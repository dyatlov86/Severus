var CoreUICallComputeMaximumMessageSize = Module.findExportByName("CoreMessaging.dll", "CoreUICallComputeMaximumMessageSize")
Interceptor.attach(CoreUICallComputeMaximumMessageSize, {onLeave: function (args) {send("CoreUICallComputeMaximumMessageSize");}});

var CoreUICallCreateConversationHost = Module.findExportByName("CoreMessaging.dll", "CoreUICallCreateConversationHost")
Interceptor.attach(CoreUICallCreateConversationHost, {onLeave: function (args) {send("CoreUICallCreateConversationHost");}});

var CoreUICallCreateEndpointHost = Module.findExportByName("CoreMessaging.dll", "CoreUICallCreateEndpointHost")
Interceptor.attach(CoreUICallCreateEndpointHost, {onLeave: function (args) {send("CoreUICallCreateEndpointHost");}});

var CoreUICallCreateEndpointHostWithSendPriority = Module.findExportByName("CoreMessaging.dll", "CoreUICallCreateEndpointHostWithSendPriority")
Interceptor.attach(CoreUICallCreateEndpointHostWithSendPriority, {onLeave: function (args) {send("CoreUICallCreateEndpointHostWithSendPriority");}});

var CoreUICallGetAddressOfParameterInBuffer = Module.findExportByName("CoreMessaging.dll", "CoreUICallGetAddressOfParameterInBuffer")
Interceptor.attach(CoreUICallGetAddressOfParameterInBuffer, {onLeave: function (args) {send("CoreUICallGetAddressOfParameterInBuffer");}});

var CoreUICallReceive = Module.findExportByName("CoreMessaging.dll", "CoreUICallReceive")
Interceptor.attach(CoreUICallReceive, {onLeave: function (args) {send("CoreUICallReceive");}});

var CoreUICallSend = Module.findExportByName("CoreMessaging.dll", "CoreUICallSend")
Interceptor.attach(CoreUICallSend, {onLeave: function (args) {send("CoreUICallSend");}});

var CoreUICallSendVaList = Module.findExportByName("CoreMessaging.dll", "CoreUICallSendVaList")
Interceptor.attach(CoreUICallSendVaList, {onLeave: function (args) {send("CoreUICallSendVaList");}});

var CoreUIConfigureTestHost = Module.findExportByName("CoreMessaging.dll", "CoreUIConfigureTestHost")
Interceptor.attach(CoreUIConfigureTestHost, {onLeave: function (args) {send("CoreUIConfigureTestHost");}});

var CoreUIConfigureUserIntegration = Module.findExportByName("CoreMessaging.dll", "CoreUIConfigureUserIntegration")
Interceptor.attach(CoreUIConfigureUserIntegration, {onLeave: function (args) {send("CoreUIConfigureUserIntegration");}});

var CoreUICreate = Module.findExportByName("CoreMessaging.dll", "CoreUICreate")
Interceptor.attach(CoreUICreate, {onLeave: function (args) {send("CoreUICreate");}});

var CoreUICreateAnonymousStream = Module.findExportByName("CoreMessaging.dll", "CoreUICreateAnonymousStream")
Interceptor.attach(CoreUICreateAnonymousStream, {onLeave: function (args) {send("CoreUICreateAnonymousStream");}});

var CoreUICreateEx = Module.findExportByName("CoreMessaging.dll", "CoreUICreateEx")
Interceptor.attach(CoreUICreateEx, {onLeave: function (args) {send("CoreUICreateEx");}});

var CoreUIInitializeTestService = Module.findExportByName("CoreMessaging.dll", "CoreUIInitializeTestService")
Interceptor.attach(CoreUIInitializeTestService, {onLeave: function (args) {send("CoreUIInitializeTestService");}});

var CoreUIOpenExisting = Module.findExportByName("CoreMessaging.dll", "CoreUIOpenExisting")
Interceptor.attach(CoreUIOpenExisting, {onLeave: function (args) {send("CoreUIOpenExisting");}});

var CoreUIRouteToTestRegistrar = Module.findExportByName("CoreMessaging.dll", "CoreUIRouteToTestRegistrar")
Interceptor.attach(CoreUIRouteToTestRegistrar, {onLeave: function (args) {send("CoreUIRouteToTestRegistrar");}});

var CoreUIUninitializeTestService = Module.findExportByName("CoreMessaging.dll", "CoreUIUninitializeTestService")
Interceptor.attach(CoreUIUninitializeTestService, {onLeave: function (args) {send("CoreUIUninitializeTestService");}});

var CreateDispatcherQueueController = Module.findExportByName("CoreMessaging.dll", "CreateDispatcherQueueController")
Interceptor.attach(CreateDispatcherQueueController, {onLeave: function (args) {send("CreateDispatcherQueueController");}});

var CreateDispatcherQueueForCurrentThread = Module.findExportByName("CoreMessaging.dll", "CreateDispatcherQueueForCurrentThread")
Interceptor.attach(CreateDispatcherQueueForCurrentThread, {onLeave: function (args) {send("CreateDispatcherQueueForCurrentThread");}});

var DllCanUnloadNow = Module.findExportByName("CoreMessaging.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetActivationFactory = Module.findExportByName("CoreMessaging.dll", "DllGetActivationFactory")
Interceptor.attach(DllGetActivationFactory, {onLeave: function (args) {send("DllGetActivationFactory");}});

var DllGetClassObject = Module.findExportByName("CoreMessaging.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var GetDispatcherQueueForCurrentThread = Module.findExportByName("CoreMessaging.dll", "GetDispatcherQueueForCurrentThread")
Interceptor.attach(GetDispatcherQueueForCurrentThread, {onLeave: function (args) {send("GetDispatcherQueueForCurrentThread");}});

var MsgBlobCreateShared = Module.findExportByName("CoreMessaging.dll", "MsgBlobCreateShared")
Interceptor.attach(MsgBlobCreateShared, {onLeave: function (args) {send("MsgBlobCreateShared");}});

var MsgBlobCreateStack = Module.findExportByName("CoreMessaging.dll", "MsgBlobCreateStack")
Interceptor.attach(MsgBlobCreateStack, {onLeave: function (args) {send("MsgBlobCreateStack");}});

var MsgBufferShare = Module.findExportByName("CoreMessaging.dll", "MsgBufferShare")
Interceptor.attach(MsgBufferShare, {onLeave: function (args) {send("MsgBufferShare");}});

var MsgRelease = Module.findExportByName("CoreMessaging.dll", "MsgRelease")
Interceptor.attach(MsgRelease, {onLeave: function (args) {send("MsgRelease");}});

var MsgStringCreateShared = Module.findExportByName("CoreMessaging.dll", "MsgStringCreateShared")
Interceptor.attach(MsgStringCreateShared, {onLeave: function (args) {send("MsgStringCreateShared");}});

var MsgStringCreateStack = Module.findExportByName("CoreMessaging.dll", "MsgStringCreateStack")
Interceptor.attach(MsgStringCreateStack, {onLeave: function (args) {send("MsgStringCreateStack");}});

var ServiceMain = Module.findExportByName("CoreMessaging.dll", "ServiceMain")
Interceptor.attach(ServiceMain, {onLeave: function (args) {send("ServiceMain");}});

var SvchostPushServiceGlobals = Module.findExportByName("CoreMessaging.dll", "SvchostPushServiceGlobals")
Interceptor.attach(SvchostPushServiceGlobals, {onLeave: function (args) {send("SvchostPushServiceGlobals");}});

