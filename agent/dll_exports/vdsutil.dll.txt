var ??0?$CVdsHandleImpl@$0?0@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0?$CVdsHandleImpl@$0?0@@QEAA@XZ")
Interceptor.attach(??0?$CVdsHandleImpl@$0?0@@QEAA@XZ, {onLeave: function (args) {send("??0?$CVdsHandleImpl@$0?0@@QEAA@XZ");}});

var ??0CGlobalResource@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CGlobalResource@@QEAA@XZ")
Interceptor.attach(??0CGlobalResource@@QEAA@XZ, {onLeave: function (args) {send("??0CGlobalResource@@QEAA@XZ");}});

var ??0CPrvEnumObject@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CPrvEnumObject@@QEAA@XZ")
Interceptor.attach(??0CPrvEnumObject@@QEAA@XZ, {onLeave: function (args) {send("??0CPrvEnumObject@@QEAA@XZ");}});

var ??0CRtlList@@QEAA@P6AXPEAVCRtlEntry@@@Z@Z = Module.findExportByName("vdsutil.dll", "??0CRtlList@@QEAA@P6AXPEAVCRtlEntry@@@Z@Z")
Interceptor.attach(??0CRtlList@@QEAA@P6AXPEAVCRtlEntry@@@Z@Z, {onLeave: function (args) {send("??0CRtlList@@QEAA@P6AXPEAVCRtlEntry@@@Z@Z");}});

var ??0CRtlMap@@QEAA@KP6AXPEAVCRtlEntry@@@Z1@Z = Module.findExportByName("vdsutil.dll", "??0CRtlMap@@QEAA@KP6AXPEAVCRtlEntry@@@Z1@Z")
Interceptor.attach(??0CRtlMap@@QEAA@KP6AXPEAVCRtlEntry@@@Z1@Z, {onLeave: function (args) {send("??0CRtlMap@@QEAA@KP6AXPEAVCRtlEntry@@@Z1@Z");}});

var ??0CRtlSharedLock@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CRtlSharedLock@@QEAA@XZ")
Interceptor.attach(??0CRtlSharedLock@@QEAA@XZ, {onLeave: function (args) {send("??0CRtlSharedLock@@QEAA@XZ");}});

var ??0CVdsAsyncObjectBase@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CVdsAsyncObjectBase@@QEAA@XZ")
Interceptor.attach(??0CVdsAsyncObjectBase@@QEAA@XZ, {onLeave: function (args) {send("??0CVdsAsyncObjectBase@@QEAA@XZ");}});

var ??0CVdsCallTracer@@QEAA@KPEBD@Z = Module.findExportByName("vdsutil.dll", "??0CVdsCallTracer@@QEAA@KPEBD@Z")
Interceptor.attach(??0CVdsCallTracer@@QEAA@KPEBD@Z, {onLeave: function (args) {send("??0CVdsCallTracer@@QEAA@KPEBD@Z");}});

var ??0CVdsCriticalSection@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z = Module.findExportByName("vdsutil.dll", "??0CVdsCriticalSection@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z")
Interceptor.attach(??0CVdsCriticalSection@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z, {onLeave: function (args) {send("??0CVdsCriticalSection@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z");}});

var ??0CVdsPnPNotificationBase@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CVdsPnPNotificationBase@@QEAA@XZ")
Interceptor.attach(??0CVdsPnPNotificationBase@@QEAA@XZ, {onLeave: function (args) {send("??0CVdsPnPNotificationBase@@QEAA@XZ");}});

var ??0CVdsTraceSettings@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CVdsTraceSettings@@QEAA@XZ")
Interceptor.attach(??0CVdsTraceSettings@@QEAA@XZ, {onLeave: function (args) {send("??0CVdsTraceSettings@@QEAA@XZ");}});

var ??0CVdsUnlockIt@@QEAA@AEAJ@Z = Module.findExportByName("vdsutil.dll", "??0CVdsUnlockIt@@QEAA@AEAJ@Z")
Interceptor.attach(??0CVdsUnlockIt@@QEAA@AEAJ@Z, {onLeave: function (args) {send("??0CVdsUnlockIt@@QEAA@AEAJ@Z");}});

var ??0CVdsWmiVariantObjectArrayEnum@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??0CVdsWmiVariantObjectArrayEnum@@QEAA@XZ")
Interceptor.attach(??0CVdsWmiVariantObjectArrayEnum@@QEAA@XZ, {onLeave: function (args) {send("??0CVdsWmiVariantObjectArrayEnum@@QEAA@XZ");}});

var ??1?$CVdsHandleImpl@$0?0@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1?$CVdsHandleImpl@$0?0@@QEAA@XZ")
Interceptor.attach(??1?$CVdsHandleImpl@$0?0@@QEAA@XZ, {onLeave: function (args) {send("??1?$CVdsHandleImpl@$0?0@@QEAA@XZ");}});

var ??1CGlobalResource@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CGlobalResource@@QEAA@XZ")
Interceptor.attach(??1CGlobalResource@@QEAA@XZ, {onLeave: function (args) {send("??1CGlobalResource@@QEAA@XZ");}});

var ??1CPrvEnumObject@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CPrvEnumObject@@QEAA@XZ")
Interceptor.attach(??1CPrvEnumObject@@QEAA@XZ, {onLeave: function (args) {send("??1CPrvEnumObject@@QEAA@XZ");}});

var ??1CRtlList@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CRtlList@@QEAA@XZ")
Interceptor.attach(??1CRtlList@@QEAA@XZ, {onLeave: function (args) {send("??1CRtlList@@QEAA@XZ");}});

var ??1CRtlMap@@UEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CRtlMap@@UEAA@XZ")
Interceptor.attach(??1CRtlMap@@UEAA@XZ, {onLeave: function (args) {send("??1CRtlMap@@UEAA@XZ");}});

var ??1CRtlSharedLock@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CRtlSharedLock@@QEAA@XZ")
Interceptor.attach(??1CRtlSharedLock@@QEAA@XZ, {onLeave: function (args) {send("??1CRtlSharedLock@@QEAA@XZ");}});

var ??1CVdsAsyncObjectBase@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CVdsAsyncObjectBase@@QEAA@XZ")
Interceptor.attach(??1CVdsAsyncObjectBase@@QEAA@XZ, {onLeave: function (args) {send("??1CVdsAsyncObjectBase@@QEAA@XZ");}});

var ??1CVdsCallTracer@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CVdsCallTracer@@QEAA@XZ")
Interceptor.attach(??1CVdsCallTracer@@QEAA@XZ, {onLeave: function (args) {send("??1CVdsCallTracer@@QEAA@XZ");}});

var ??1CVdsCriticalSection@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CVdsCriticalSection@@QEAA@XZ")
Interceptor.attach(??1CVdsCriticalSection@@QEAA@XZ, {onLeave: function (args) {send("??1CVdsCriticalSection@@QEAA@XZ");}});

var ??1CVdsPnPNotificationBase@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CVdsPnPNotificationBase@@QEAA@XZ")
Interceptor.attach(??1CVdsPnPNotificationBase@@QEAA@XZ, {onLeave: function (args) {send("??1CVdsPnPNotificationBase@@QEAA@XZ");}});

var ??1CVdsUnlockIt@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CVdsUnlockIt@@QEAA@XZ")
Interceptor.attach(??1CVdsUnlockIt@@QEAA@XZ, {onLeave: function (args) {send("??1CVdsUnlockIt@@QEAA@XZ");}});

var ??1CVdsWmiVariantObjectArrayEnum@@QEAA@XZ = Module.findExportByName("vdsutil.dll", "??1CVdsWmiVariantObjectArrayEnum@@QEAA@XZ")
Interceptor.attach(??1CVdsWmiVariantObjectArrayEnum@@QEAA@XZ, {onLeave: function (args) {send("??1CVdsWmiVariantObjectArrayEnum@@QEAA@XZ");}});

var ??4?$CVdsHandleImpl@$0?0@@QEAAPEAXPEAX@Z = Module.findExportByName("vdsutil.dll", "??4?$CVdsHandleImpl@$0?0@@QEAAPEAXPEAX@Z")
Interceptor.attach(??4?$CVdsHandleImpl@$0?0@@QEAAPEAXPEAX@Z, {onLeave: function (args) {send("??4?$CVdsHandleImpl@$0?0@@QEAAPEAXPEAX@Z");}});

var ??4CRtlList@@QEAAAEAV0@AEAV0@@Z = Module.findExportByName("vdsutil.dll", "??4CRtlList@@QEAAAEAV0@AEAV0@@Z")
Interceptor.attach(??4CRtlList@@QEAAAEAV0@AEAV0@@Z, {onLeave: function (args) {send("??4CRtlList@@QEAAAEAV0@AEAV0@@Z");}});

var ??8?$CVdsHandleImpl@$0?0@@QEBA_NPEAX@Z = Module.findExportByName("vdsutil.dll", "??8?$CVdsHandleImpl@$0?0@@QEBA_NPEAX@Z")
Interceptor.attach(??8?$CVdsHandleImpl@$0?0@@QEBA_NPEAX@Z, {onLeave: function (args) {send("??8?$CVdsHandleImpl@$0?0@@QEBA_NPEAX@Z");}});

var ??B?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ = Module.findExportByName("vdsutil.dll", "??B?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ")
Interceptor.attach(??B?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ, {onLeave: function (args) {send("??B?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ");}});

var ??_FCRtlList@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "??_FCRtlList@@QEAAXXZ")
Interceptor.attach(??_FCRtlList@@QEAAXXZ, {onLeave: function (args) {send("??_FCRtlList@@QEAAXXZ");}});

var ??_FCRtlMap@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "??_FCRtlMap@@QEAAXXZ")
Interceptor.attach(??_FCRtlMap@@QEAAXXZ, {onLeave: function (args) {send("??_FCRtlMap@@QEAAXXZ");}});

var ?AcquireRead@CRtlSharedLock@@AEAAXXZ = Module.findExportByName("vdsutil.dll", "?AcquireRead@CRtlSharedLock@@AEAAXXZ")
Interceptor.attach(?AcquireRead@CRtlSharedLock@@AEAAXXZ, {onLeave: function (args) {send("?AcquireRead@CRtlSharedLock@@AEAAXXZ");}});

var ?AcquireWrite@CRtlSharedLock@@AEAAXXZ = Module.findExportByName("vdsutil.dll", "?AcquireWrite@CRtlSharedLock@@AEAAXXZ")
Interceptor.attach(?AcquireWrite@CRtlSharedLock@@AEAAXXZ, {onLeave: function (args) {send("?AcquireWrite@CRtlSharedLock@@AEAAXXZ");}});

var ?AllowCancel@CVdsAsyncObjectBase@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?AllowCancel@CVdsAsyncObjectBase@@QEAAXXZ")
Interceptor.attach(?AllowCancel@CVdsAsyncObjectBase@@QEAAXXZ, {onLeave: function (args) {send("?AllowCancel@CVdsAsyncObjectBase@@QEAAXXZ");}});

var ?Append@CPrvEnumObject@@QEAAJPEAUIUnknown@@@Z = Module.findExportByName("vdsutil.dll", "?Append@CPrvEnumObject@@QEAAJPEAUIUnknown@@@Z")
Interceptor.attach(?Append@CPrvEnumObject@@QEAAJPEAUIUnknown@@@Z, {onLeave: function (args) {send("?Append@CPrvEnumObject@@QEAAJPEAUIUnknown@@@Z");}});

var ?Attach@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAUtagVARIANT@@@Z = Module.findExportByName("vdsutil.dll", "?Attach@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAUtagVARIANT@@@Z")
Interceptor.attach(?Attach@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAUtagVARIANT@@@Z, {onLeave: function (args) {send("?Attach@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAUtagVARIANT@@@Z");}});

var ?Begin@CRtlList@@QEAA?AVCRtlListIter@@XZ = Module.findExportByName("vdsutil.dll", "?Begin@CRtlList@@QEAA?AVCRtlListIter@@XZ")
Interceptor.attach(?Begin@CRtlList@@QEAA?AVCRtlListIter@@XZ, {onLeave: function (args) {send("?Begin@CRtlList@@QEAA?AVCRtlListIter@@XZ");}});

var ?Begin@CRtlMap@@QEAA?AVCRtlMapIter@@XZ = Module.findExportByName("vdsutil.dll", "?Begin@CRtlMap@@QEAA?AVCRtlMapIter@@XZ")
Interceptor.attach(?Begin@CRtlMap@@QEAA?AVCRtlMapIter@@XZ, {onLeave: function (args) {send("?Begin@CRtlMap@@QEAA?AVCRtlMapIter@@XZ");}});

var ?Cancel@CVdsAsyncObjectBase@@UEAAJXZ = Module.findExportByName("vdsutil.dll", "?Cancel@CVdsAsyncObjectBase@@UEAAJXZ")
Interceptor.attach(?Cancel@CVdsAsyncObjectBase@@UEAAJXZ, {onLeave: function (args) {send("?Cancel@CVdsAsyncObjectBase@@UEAAJXZ");}});

var ?Clear@CPrvEnumObject@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?Clear@CPrvEnumObject@@QEAAXXZ")
Interceptor.attach(?Clear@CPrvEnumObject@@QEAAXXZ, {onLeave: function (args) {send("?Clear@CPrvEnumObject@@QEAAXXZ");}});

var ?Clone@CPrvEnumObject@@UEAAJPEAPEAUIEnumVdsObject@@@Z = Module.findExportByName("vdsutil.dll", "?Clone@CPrvEnumObject@@UEAAJPEAPEAUIEnumVdsObject@@@Z")
Interceptor.attach(?Clone@CPrvEnumObject@@UEAAJPEAPEAUIEnumVdsObject@@@Z, {onLeave: function (args) {send("?Clone@CPrvEnumObject@@UEAAJPEAPEAUIEnumVdsObject@@@Z");}});

var ?CreateListenThread@CVdsPnPNotificationBase@@AEAAKXZ = Module.findExportByName("vdsutil.dll", "?CreateListenThread@CVdsPnPNotificationBase@@AEAAKXZ")
Interceptor.attach(?CreateListenThread@CVdsPnPNotificationBase@@AEAAKXZ, {onLeave: function (args) {send("?CreateListenThread@CVdsPnPNotificationBase@@AEAAKXZ");}});

var ?CurrentThreadIsWriter@CRtlSharedLock@@QEAAHXZ = Module.findExportByName("vdsutil.dll", "?CurrentThreadIsWriter@CRtlSharedLock@@QEAAHXZ")
Interceptor.attach(?CurrentThreadIsWriter@CRtlSharedLock@@QEAAHXZ, {onLeave: function (args) {send("?CurrentThreadIsWriter@CRtlSharedLock@@QEAAHXZ");}});

var ?Detach@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ = Module.findExportByName("vdsutil.dll", "?Detach@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ")
Interceptor.attach(?Detach@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ, {onLeave: function (args) {send("?Detach@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ");}});

var ?DisallowCancel@CVdsAsyncObjectBase@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?DisallowCancel@CVdsAsyncObjectBase@@QEAAXXZ")
Interceptor.attach(?DisallowCancel@CVdsAsyncObjectBase@@QEAAXXZ, {onLeave: function (args) {send("?DisallowCancel@CVdsAsyncObjectBase@@QEAAXXZ");}});

var ?Downgrade@CRtlSharedLock@@AEAAXXZ = Module.findExportByName("vdsutil.dll", "?Downgrade@CRtlSharedLock@@AEAAXXZ")
Interceptor.attach(?Downgrade@CRtlSharedLock@@AEAAXXZ, {onLeave: function (args) {send("?Downgrade@CRtlSharedLock@@AEAAXXZ");}});

var ?End@CRtlList@@QEAA?AVCRtlListIter@@XZ = Module.findExportByName("vdsutil.dll", "?End@CRtlList@@QEAA?AVCRtlListIter@@XZ")
Interceptor.attach(?End@CRtlList@@QEAA?AVCRtlListIter@@XZ, {onLeave: function (args) {send("?End@CRtlList@@QEAA?AVCRtlListIter@@XZ");}});

var ?Find@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAV2@@Z = Module.findExportByName("vdsutil.dll", "?Find@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAV2@@Z")
Interceptor.attach(?Find@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAV2@@Z, {onLeave: function (args) {send("?Find@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAV2@@Z");}});

var ?FindPtr@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAPEAV2@@Z = Module.findExportByName("vdsutil.dll", "?FindPtr@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAPEAV2@@Z")
Interceptor.attach(?FindPtr@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAPEAV2@@Z, {onLeave: function (args) {send("?FindPtr@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAPEAV2@@Z");}});

var ?GetEntry@CRtlListIter@@QEAAPEAVCRtlEntry@@XZ = Module.findExportByName("vdsutil.dll", "?GetEntry@CRtlListIter@@QEAAPEAVCRtlEntry@@XZ")
Interceptor.attach(?GetEntry@CRtlListIter@@QEAAPEAVCRtlEntry@@XZ, {onLeave: function (args) {send("?GetEntry@CRtlListIter@@QEAAPEAVCRtlEntry@@XZ");}});

var ?GetEntryPointer@CRtlListIter@@QEAAPEAXXZ = Module.findExportByName("vdsutil.dll", "?GetEntryPointer@CRtlListIter@@QEAAPEAXXZ")
Interceptor.attach(?GetEntryPointer@CRtlListIter@@QEAAPEAXXZ, {onLeave: function (args) {send("?GetEntryPointer@CRtlListIter@@QEAAPEAXXZ");}});

var ?GetNode@CRtlListIter@@QEAAPEAVCRtlListEntry@@XZ = Module.findExportByName("vdsutil.dll", "?GetNode@CRtlListIter@@QEAAPEAVCRtlListEntry@@XZ")
Interceptor.attach(?GetNode@CRtlListIter@@QEAAPEAVCRtlListEntry@@XZ, {onLeave: function (args) {send("?GetNode@CRtlListIter@@QEAAPEAVCRtlListEntry@@XZ");}});

var ?GetOutputType@CVdsAsyncObjectBase@@QEAA?AW4_VDS_ASYNC_OUTPUT_TYPE@@XZ = Module.findExportByName("vdsutil.dll", "?GetOutputType@CVdsAsyncObjectBase@@QEAA?AW4_VDS_ASYNC_OUTPUT_TYPE@@XZ")
Interceptor.attach(?GetOutputType@CVdsAsyncObjectBase@@QEAA?AW4_VDS_ASYNC_OUTPUT_TYPE@@XZ, {onLeave: function (args) {send("?GetOutputType@CVdsAsyncObjectBase@@QEAA?AW4_VDS_ASYNC_OUTPUT_TYPE@@XZ");}});

var ?GetWindowHandle@CVdsPnPNotificationBase@@QEAAPEAUHWND__@@XZ = Module.findExportByName("vdsutil.dll", "?GetWindowHandle@CVdsPnPNotificationBase@@QEAAPEAUHWND__@@XZ")
Interceptor.attach(?GetWindowHandle@CVdsPnPNotificationBase@@QEAAPEAUHWND__@@XZ, {onLeave: function (args) {send("?GetWindowHandle@CVdsPnPNotificationBase@@QEAAPEAUHWND__@@XZ");}});

var ?Initialize@CGlobalResource@@QEAAJXZ = Module.findExportByName("vdsutil.dll", "?Initialize@CGlobalResource@@QEAAJXZ")
Interceptor.attach(?Initialize@CGlobalResource@@QEAAJXZ, {onLeave: function (args) {send("?Initialize@CGlobalResource@@QEAAJXZ");}});

var ?Initialize@CVdsAsyncObjectBase@@SAKXZ = Module.findExportByName("vdsutil.dll", "?Initialize@CVdsAsyncObjectBase@@SAKXZ")
Interceptor.attach(?Initialize@CVdsAsyncObjectBase@@SAKXZ, {onLeave: function (args) {send("?Initialize@CVdsAsyncObjectBase@@SAKXZ");}});

var ?Initialize@CVdsPnPNotificationBase@@QEAAKXZ = Module.findExportByName("vdsutil.dll", "?Initialize@CVdsPnPNotificationBase@@QEAAKXZ")
Interceptor.attach(?Initialize@CVdsPnPNotificationBase@@QEAAKXZ, {onLeave: function (args) {send("?Initialize@CVdsPnPNotificationBase@@QEAAKXZ");}});

var ?Insert@CRtlList@@QEAAHAEAVCRtlListIter@@AEAVCRtlEntry@@@Z = Module.findExportByName("vdsutil.dll", "?Insert@CRtlList@@QEAAHAEAVCRtlListIter@@AEAVCRtlEntry@@@Z")
Interceptor.attach(?Insert@CRtlList@@QEAAHAEAVCRtlListIter@@AEAVCRtlEntry@@@Z, {onLeave: function (args) {send("?Insert@CRtlList@@QEAAHAEAVCRtlListIter@@AEAVCRtlEntry@@@Z");}});

var ?Insert@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z = Module.findExportByName("vdsutil.dll", "?Insert@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z")
Interceptor.attach(?Insert@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z, {onLeave: function (args) {send("?Insert@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z");}});

var ?InsertHead@CRtlList@@QEAAHAEAVCRtlEntry@@@Z = Module.findExportByName("vdsutil.dll", "?InsertHead@CRtlList@@QEAAHAEAVCRtlEntry@@@Z")
Interceptor.attach(?InsertHead@CRtlList@@QEAAHAEAVCRtlEntry@@@Z, {onLeave: function (args) {send("?InsertHead@CRtlList@@QEAAHAEAVCRtlEntry@@@Z");}});

var ?InsertHeadPointer@CRtlList@@QEAAHPEAX@Z = Module.findExportByName("vdsutil.dll", "?InsertHeadPointer@CRtlList@@QEAAHPEAX@Z")
Interceptor.attach(?InsertHeadPointer@CRtlList@@QEAAHPEAX@Z, {onLeave: function (args) {send("?InsertHeadPointer@CRtlList@@QEAAHPEAX@Z");}});

var ?InsertPointer@CRtlList@@QEAAHAEAVCRtlListIter@@PEAX@Z = Module.findExportByName("vdsutil.dll", "?InsertPointer@CRtlList@@QEAAHAEAVCRtlListIter@@PEAX@Z")
Interceptor.attach(?InsertPointer@CRtlList@@QEAAHAEAVCRtlListIter@@PEAX@Z, {onLeave: function (args) {send("?InsertPointer@CRtlList@@QEAAHAEAVCRtlListIter@@PEAX@Z");}});

var ?InsertTail@CRtlList@@QEAAHAEAVCRtlEntry@@@Z = Module.findExportByName("vdsutil.dll", "?InsertTail@CRtlList@@QEAAHAEAVCRtlEntry@@@Z")
Interceptor.attach(?InsertTail@CRtlList@@QEAAHAEAVCRtlEntry@@@Z, {onLeave: function (args) {send("?InsertTail@CRtlList@@QEAAHAEAVCRtlEntry@@@Z");}});

var ?InsertTailPointer@CRtlList@@QEAAHPEAX@Z = Module.findExportByName("vdsutil.dll", "?InsertTailPointer@CRtlList@@QEAAHPEAX@Z")
Interceptor.attach(?InsertTailPointer@CRtlList@@QEAAHPEAX@Z, {onLeave: function (args) {send("?InsertTailPointer@CRtlList@@QEAAHPEAX@Z");}});

var ?InsertUnique@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z = Module.findExportByName("vdsutil.dll", "?InsertUnique@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z")
Interceptor.attach(?InsertUnique@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z, {onLeave: function (args) {send("?InsertUnique@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z");}});

var ?IsCancelRequested@CVdsAsyncObjectBase@@QEAAHXZ = Module.findExportByName("vdsutil.dll", "?IsCancelRequested@CVdsAsyncObjectBase@@QEAAHXZ")
Interceptor.attach(?IsCancelRequested@CVdsAsyncObjectBase@@QEAAHXZ, {onLeave: function (args) {send("?IsCancelRequested@CVdsAsyncObjectBase@@QEAAHXZ");}});

var ?IsDone@CRtlListIter@@QEAAHXZ = Module.findExportByName("vdsutil.dll", "?IsDone@CRtlListIter@@QEAAHXZ")
Interceptor.attach(?IsDone@CRtlListIter@@QEAAHXZ, {onLeave: function (args) {send("?IsDone@CRtlListIter@@QEAAHXZ");}});

var ?IsFinished@CVdsAsyncObjectBase@@QEAAHXZ = Module.findExportByName("vdsutil.dll", "?IsFinished@CVdsAsyncObjectBase@@QEAAHXZ")
Interceptor.attach(?IsFinished@CVdsAsyncObjectBase@@QEAAHXZ, {onLeave: function (args) {send("?IsFinished@CVdsAsyncObjectBase@@QEAAHXZ");}});

var ?Next@CPrvEnumObject@@UEAAJKPEAPEAUIUnknown@@PEAK@Z = Module.findExportByName("vdsutil.dll", "?Next@CPrvEnumObject@@UEAAJKPEAPEAUIUnknown@@PEAK@Z")
Interceptor.attach(?Next@CPrvEnumObject@@UEAAJKPEAPEAUIUnknown@@PEAK@Z, {onLeave: function (args) {send("?Next@CPrvEnumObject@@UEAAJKPEAPEAUIUnknown@@PEAK@Z");}});

var ?Next@CRtlListIter@@QEAAAEAV1@XZ = Module.findExportByName("vdsutil.dll", "?Next@CRtlListIter@@QEAAAEAV1@XZ")
Interceptor.attach(?Next@CRtlListIter@@QEAAAEAV1@XZ, {onLeave: function (args) {send("?Next@CRtlListIter@@QEAAAEAV1@XZ");}});

var ?Next@CRtlMapIter@@QEAAAEAV1@XZ = Module.findExportByName("vdsutil.dll", "?Next@CRtlMapIter@@QEAAAEAV1@XZ")
Interceptor.attach(?Next@CRtlMapIter@@QEAAAEAV1@XZ, {onLeave: function (args) {send("?Next@CRtlMapIter@@QEAAAEAV1@XZ");}});

var ?Next@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAPEAUIWbemClassObject@@@Z = Module.findExportByName("vdsutil.dll", "?Next@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAPEAUIWbemClassObject@@@Z")
Interceptor.attach(?Next@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAPEAUIWbemClassObject@@@Z, {onLeave: function (args) {send("?Next@CVdsWmiVariantObjectArrayEnum@@QEAAJPEAPEAUIWbemClassObject@@@Z");}});

var ?NotificationThread@CVdsPnPNotificationBase@@AEAAKPEAX@Z = Module.findExportByName("vdsutil.dll", "?NotificationThread@CVdsPnPNotificationBase@@AEAAKPEAX@Z")
Interceptor.attach(?NotificationThread@CVdsPnPNotificationBase@@AEAAKPEAX@Z, {onLeave: function (args) {send("?NotificationThread@CVdsPnPNotificationBase@@AEAAKPEAX@Z");}});

var ?NotificationThreadEntry@CVdsPnPNotificationBase@@CAKPEAX@Z = Module.findExportByName("vdsutil.dll", "?NotificationThreadEntry@CVdsPnPNotificationBase@@CAKPEAX@Z")
Interceptor.attach(?NotificationThreadEntry@CVdsPnPNotificationBase@@CAKPEAX@Z, {onLeave: function (args) {send("?NotificationThreadEntry@CVdsPnPNotificationBase@@CAKPEAX@Z");}});

var ?Prev@CRtlListIter@@QEAAAEAV1@XZ = Module.findExportByName("vdsutil.dll", "?Prev@CRtlListIter@@QEAAAEAV1@XZ")
Interceptor.attach(?Prev@CRtlListIter@@QEAAAEAV1@XZ, {onLeave: function (args) {send("?Prev@CRtlListIter@@QEAAAEAV1@XZ");}});

var ?QueryStatus@CVdsAsyncObjectBase@@UEAAJPEAJPEAK@Z = Module.findExportByName("vdsutil.dll", "?QueryStatus@CVdsAsyncObjectBase@@UEAAJPEAJPEAK@Z")
Interceptor.attach(?QueryStatus@CVdsAsyncObjectBase@@UEAAJPEAJPEAK@Z, {onLeave: function (args) {send("?QueryStatus@CVdsAsyncObjectBase@@UEAAJPEAJPEAK@Z");}});

var ?Register@CVdsPnPNotificationBase@@QEAAKPEAU_NotificationListeningRequest@@K@Z = Module.findExportByName("vdsutil.dll", "?Register@CVdsPnPNotificationBase@@QEAAKPEAU_NotificationListeningRequest@@K@Z")
Interceptor.attach(?Register@CVdsPnPNotificationBase@@QEAAKPEAU_NotificationListeningRequest@@K@Z, {onLeave: function (args) {send("?Register@CVdsPnPNotificationBase@@QEAAKPEAU_NotificationListeningRequest@@K@Z");}});

var ?RegisterHandle@CVdsPnPNotificationBase@@QEAAKPEAXPEAPEAX@Z = Module.findExportByName("vdsutil.dll", "?RegisterHandle@CVdsPnPNotificationBase@@QEAAKPEAXPEAPEAX@Z")
Interceptor.attach(?RegisterHandle@CVdsPnPNotificationBase@@QEAAKPEAXPEAPEAX@Z, {onLeave: function (args) {send("?RegisterHandle@CVdsPnPNotificationBase@@QEAAKPEAXPEAPEAX@Z");}});

var ?Release@CRtlSharedLock@@AEAAXXZ = Module.findExportByName("vdsutil.dll", "?Release@CRtlSharedLock@@AEAAXXZ")
Interceptor.attach(?Release@CRtlSharedLock@@AEAAXXZ, {onLeave: function (args) {send("?Release@CRtlSharedLock@@AEAAXXZ");}});

var ?Remove@CRtlList@@QEAAXAEAVCRtlListIter@@@Z = Module.findExportByName("vdsutil.dll", "?Remove@CRtlList@@QEAAXAEAVCRtlListIter@@@Z")
Interceptor.attach(?Remove@CRtlList@@QEAAXAEAVCRtlListIter@@@Z, {onLeave: function (args) {send("?Remove@CRtlList@@QEAAXAEAVCRtlListIter@@@Z");}});

var ?Remove@CRtlMap@@QEAAHAEAVCRtlEntry@@@Z = Module.findExportByName("vdsutil.dll", "?Remove@CRtlMap@@QEAAHAEAVCRtlEntry@@@Z")
Interceptor.attach(?Remove@CRtlMap@@QEAAHAEAVCRtlEntry@@@Z, {onLeave: function (args) {send("?Remove@CRtlMap@@QEAAHAEAVCRtlEntry@@@Z");}});

var ?RemoveAll@CRtlList@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?RemoveAll@CRtlList@@QEAAXXZ")
Interceptor.attach(?RemoveAll@CRtlList@@QEAAXXZ, {onLeave: function (args) {send("?RemoveAll@CRtlList@@QEAAXXZ");}});

var ?RemoveAll@CRtlMap@@QEAAXH@Z = Module.findExportByName("vdsutil.dll", "?RemoveAll@CRtlMap@@QEAAXH@Z")
Interceptor.attach(?RemoveAll@CRtlMap@@QEAAXH@Z, {onLeave: function (args) {send("?RemoveAll@CRtlMap@@QEAAXH@Z");}});

var ?Reset@CPrvEnumObject@@UEAAJXZ = Module.findExportByName("vdsutil.dll", "?Reset@CPrvEnumObject@@UEAAJXZ")
Interceptor.attach(?Reset@CPrvEnumObject@@UEAAJXZ, {onLeave: function (args) {send("?Reset@CPrvEnumObject@@UEAAJXZ");}});

var ?Reset@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ = Module.findExportByName("vdsutil.dll", "?Reset@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ")
Interceptor.attach(?Reset@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ, {onLeave: function (args) {send("?Reset@CVdsWmiVariantObjectArrayEnum@@QEAAJXZ");}});

var ?SetCompletionStatus@CVdsAsyncObjectBase@@QEAAXJK@Z = Module.findExportByName("vdsutil.dll", "?SetCompletionStatus@CVdsAsyncObjectBase@@QEAAXJK@Z")
Interceptor.attach(?SetCompletionStatus@CVdsAsyncObjectBase@@QEAAXJK@Z, {onLeave: function (args) {send("?SetCompletionStatus@CVdsAsyncObjectBase@@QEAAXJK@Z");}});

var ?SetOutput@CVdsAsyncObjectBase@@QEAAXU_VDS_ASYNC_OUTPUT@@@Z = Module.findExportByName("vdsutil.dll", "?SetOutput@CVdsAsyncObjectBase@@QEAAXU_VDS_ASYNC_OUTPUT@@@Z")
Interceptor.attach(?SetOutput@CVdsAsyncObjectBase@@QEAAXU_VDS_ASYNC_OUTPUT@@@Z, {onLeave: function (args) {send("?SetOutput@CVdsAsyncObjectBase@@QEAAXU_VDS_ASYNC_OUTPUT@@@Z");}});

var ?SetOutputType@CVdsAsyncObjectBase@@QEAAXW4_VDS_ASYNC_OUTPUT_TYPE@@@Z = Module.findExportByName("vdsutil.dll", "?SetOutputType@CVdsAsyncObjectBase@@QEAAXW4_VDS_ASYNC_OUTPUT_TYPE@@@Z")
Interceptor.attach(?SetOutputType@CVdsAsyncObjectBase@@QEAAXW4_VDS_ASYNC_OUTPUT_TYPE@@@Z, {onLeave: function (args) {send("?SetOutputType@CVdsAsyncObjectBase@@QEAAXW4_VDS_ASYNC_OUTPUT_TYPE@@@Z");}});

var ?SetPositionToLast@CPrvEnumObject@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?SetPositionToLast@CPrvEnumObject@@QEAAXXZ")
Interceptor.attach(?SetPositionToLast@CPrvEnumObject@@QEAAXXZ, {onLeave: function (args) {send("?SetPositionToLast@CPrvEnumObject@@QEAAXXZ");}});

var ?Signal@CVdsAsyncObjectBase@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?Signal@CVdsAsyncObjectBase@@QEAAXXZ")
Interceptor.attach(?Signal@CVdsAsyncObjectBase@@QEAAXXZ, {onLeave: function (args) {send("?Signal@CVdsAsyncObjectBase@@QEAAXXZ");}});

var ?Skip@CPrvEnumObject@@UEAAJK@Z = Module.findExportByName("vdsutil.dll", "?Skip@CPrvEnumObject@@UEAAJK@Z")
Interceptor.attach(?Skip@CPrvEnumObject@@UEAAJK@Z, {onLeave: function (args) {send("?Skip@CPrvEnumObject@@UEAAJK@Z");}});

var ?Uninitialize@CVdsAsyncObjectBase@@SAXXZ = Module.findExportByName("vdsutil.dll", "?Uninitialize@CVdsAsyncObjectBase@@SAXXZ")
Interceptor.attach(?Uninitialize@CVdsAsyncObjectBase@@SAXXZ, {onLeave: function (args) {send("?Uninitialize@CVdsAsyncObjectBase@@SAXXZ");}});

var ?Uninitialize@CVdsPnPNotificationBase@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?Uninitialize@CVdsPnPNotificationBase@@QEAAXXZ")
Interceptor.attach(?Uninitialize@CVdsPnPNotificationBase@@QEAAXXZ, {onLeave: function (args) {send("?Uninitialize@CVdsPnPNotificationBase@@QEAAXXZ");}});

var ?Unregister@CVdsPnPNotificationBase@@QEAAXPEAU_NotificationListeningRequest@@@Z = Module.findExportByName("vdsutil.dll", "?Unregister@CVdsPnPNotificationBase@@QEAAXPEAU_NotificationListeningRequest@@@Z")
Interceptor.attach(?Unregister@CVdsPnPNotificationBase@@QEAAXPEAU_NotificationListeningRequest@@@Z, {onLeave: function (args) {send("?Unregister@CVdsPnPNotificationBase@@QEAAXPEAU_NotificationListeningRequest@@@Z");}});

var ?UnregisterHandle@CVdsPnPNotificationBase@@QEAAXPEAX@Z = Module.findExportByName("vdsutil.dll", "?UnregisterHandle@CVdsPnPNotificationBase@@QEAAXPEAX@Z")
Interceptor.attach(?UnregisterHandle@CVdsPnPNotificationBase@@QEAAXPEAX@Z, {onLeave: function (args) {send("?UnregisterHandle@CVdsPnPNotificationBase@@QEAAXPEAX@Z");}});

var ?Upgrade@CRtlSharedLock@@AEAAXXZ = Module.findExportByName("vdsutil.dll", "?Upgrade@CRtlSharedLock@@AEAAXXZ")
Interceptor.attach(?Upgrade@CRtlSharedLock@@AEAAXXZ, {onLeave: function (args) {send("?Upgrade@CRtlSharedLock@@AEAAXXZ");}});

var ?WaitImpl@CVdsAsyncObjectBase@@QEAAJPEAJ@Z = Module.findExportByName("vdsutil.dll", "?WaitImpl@CVdsAsyncObjectBase@@QEAAJPEAJ@Z")
Interceptor.attach(?WaitImpl@CVdsAsyncObjectBase@@QEAAJPEAJ@Z, {onLeave: function (args) {send("?WaitImpl@CVdsAsyncObjectBase@@QEAAJPEAJ@Z");}});

var ?WindowProcEntry@CVdsPnPNotificationBase@@CA_JPEAUHWND__@@I_K_J@Z = Module.findExportByName("vdsutil.dll", "?WindowProcEntry@CVdsPnPNotificationBase@@CA_JPEAUHWND__@@I_K_J@Z")
Interceptor.attach(?WindowProcEntry@CVdsPnPNotificationBase@@CA_JPEAUHWND__@@I_K_J@Z, {onLeave: function (args) {send("?WindowProcEntry@CVdsPnPNotificationBase@@CA_JPEAUHWND__@@I_K_J@Z");}});

var ?ZeroAsyncOut@CVdsAsyncObjectBase@@QEAAXXZ = Module.findExportByName("vdsutil.dll", "?ZeroAsyncOut@CVdsAsyncObjectBase@@QEAAXXZ")
Interceptor.attach(?ZeroAsyncOut@CVdsAsyncObjectBase@@QEAAXXZ, {onLeave: function (args) {send("?ZeroAsyncOut@CVdsAsyncObjectBase@@QEAAXXZ");}});

var ?m_ExtraLogging@CVdsTraceSettings@@QEAAHXZ = Module.findExportByName("vdsutil.dll", "?m_ExtraLogging@CVdsTraceSettings@@QEAAHXZ")
Interceptor.attach(?m_ExtraLogging@CVdsTraceSettings@@QEAAHXZ, {onLeave: function (args) {send("?m_ExtraLogging@CVdsTraceSettings@@QEAAHXZ");}});

var ?m_NoDebuggerLogging@CVdsTraceSettings@@QEAAHXZ = Module.findExportByName("vdsutil.dll", "?m_NoDebuggerLogging@CVdsTraceSettings@@QEAAHXZ")
Interceptor.attach(?m_NoDebuggerLogging@CVdsTraceSettings@@QEAAHXZ, {onLeave: function (args) {send("?m_NoDebuggerLogging@CVdsTraceSettings@@QEAAHXZ");}});

var AcquireRundownProtection = Module.findExportByName("vdsutil.dll", "AcquireRundownProtection")
Interceptor.attach(AcquireRundownProtection, {onLeave: function (args) {send("AcquireRundownProtection");}});

var AddEventSource = Module.findExportByName("vdsutil.dll", "AddEventSource")
Interceptor.attach(AddEventSource, {onLeave: function (args) {send("AddEventSource");}});

var AllocateAndGetVolumePathName = Module.findExportByName("vdsutil.dll", "AllocateAndGetVolumePathName")
Interceptor.attach(AllocateAndGetVolumePathName, {onLeave: function (args) {send("AllocateAndGetVolumePathName");}});

var AssignTempVolumeName = Module.findExportByName("vdsutil.dll", "AssignTempVolumeName")
Interceptor.attach(AssignTempVolumeName, {onLeave: function (args) {send("AssignTempVolumeName");}});

var BacksBootVolume = Module.findExportByName("vdsutil.dll", "BacksBootVolume")
Interceptor.attach(BacksBootVolume, {onLeave: function (args) {send("BacksBootVolume");}});

var BootBackedByWim = Module.findExportByName("vdsutil.dll", "BootBackedByWim")
Interceptor.attach(BootBackedByWim, {onLeave: function (args) {send("BootBackedByWim");}});

var CoFreeStringArray = Module.findExportByName("vdsutil.dll", "CoFreeStringArray")
Interceptor.attach(CoFreeStringArray, {onLeave: function (args) {send("CoFreeStringArray");}});

var CreateDeviceInfoSet = Module.findExportByName("vdsutil.dll", "CreateDeviceInfoSet")
Interceptor.attach(CreateDeviceInfoSet, {onLeave: function (args) {send("CreateDeviceInfoSet");}});

var DeleteBcdObjects = Module.findExportByName("vdsutil.dll", "DeleteBcdObjects")
Interceptor.attach(DeleteBcdObjects, {onLeave: function (args) {send("DeleteBcdObjects");}});

var DeleteNetworkShare = Module.findExportByName("vdsutil.dll", "DeleteNetworkShare")
Interceptor.attach(DeleteNetworkShare, {onLeave: function (args) {send("DeleteNetworkShare");}});

var DllMain = Module.findExportByName("vdsutil.dll", "DllMain")
Interceptor.attach(DllMain, {onLeave: function (args) {send("DllMain");}});

var GarbageCollectDriveLetters = Module.findExportByName("vdsutil.dll", "GarbageCollectDriveLetters")
Interceptor.attach(GarbageCollectDriveLetters, {onLeave: function (args) {send("GarbageCollectDriveLetters");}});

var GetBootDiskNumber = Module.findExportByName("vdsutil.dll", "GetBootDiskNumber")
Interceptor.attach(GetBootDiskNumber, {onLeave: function (args) {send("GetBootDiskNumber");}});

var GetBootFromDiskNumber = Module.findExportByName("vdsutil.dll", "GetBootFromDiskNumber")
Interceptor.attach(GetBootFromDiskNumber, {onLeave: function (args) {send("GetBootFromDiskNumber");}});

var GetBootVolumeHandle = Module.findExportByName("vdsutil.dll", "GetBootVolumeHandle")
Interceptor.attach(GetBootVolumeHandle, {onLeave: function (args) {send("GetBootVolumeHandle");}});

var GetDefaultAlignment = Module.findExportByName("vdsutil.dll", "GetDefaultAlignment")
Interceptor.attach(GetDefaultAlignment, {onLeave: function (args) {send("GetDefaultAlignment");}});

var GetDeviceAndMediaType = Module.findExportByName("vdsutil.dll", "GetDeviceAndMediaType")
Interceptor.attach(GetDeviceAndMediaType, {onLeave: function (args) {send("GetDeviceAndMediaType");}});

var GetDeviceId = Module.findExportByName("vdsutil.dll", "GetDeviceId")
Interceptor.attach(GetDeviceId, {onLeave: function (args) {send("GetDeviceId");}});

var GetDeviceLocation = Module.findExportByName("vdsutil.dll", "GetDeviceLocation")
Interceptor.attach(GetDeviceLocation, {onLeave: function (args) {send("GetDeviceLocation");}});

var GetDeviceLocationEx = Module.findExportByName("vdsutil.dll", "GetDeviceLocationEx")
Interceptor.attach(GetDeviceLocationEx, {onLeave: function (args) {send("GetDeviceLocationEx");}});

var GetDeviceLocationPath = Module.findExportByName("vdsutil.dll", "GetDeviceLocationPath")
Interceptor.attach(GetDeviceLocationPath, {onLeave: function (args) {send("GetDeviceLocationPath");}});

var GetDeviceManufacturerInfo = Module.findExportByName("vdsutil.dll", "GetDeviceManufacturerInfo")
Interceptor.attach(GetDeviceManufacturerInfo, {onLeave: function (args) {send("GetDeviceManufacturerInfo");}});

var GetDeviceName = Module.findExportByName("vdsutil.dll", "GetDeviceName")
Interceptor.attach(GetDeviceName, {onLeave: function (args) {send("GetDeviceName");}});

var GetDeviceNumber = Module.findExportByName("vdsutil.dll", "GetDeviceNumber")
Interceptor.attach(GetDeviceNumber, {onLeave: function (args) {send("GetDeviceNumber");}});

var GetDeviceRegistryPropertyByInfo = Module.findExportByName("vdsutil.dll", "GetDeviceRegistryPropertyByInfo")
Interceptor.attach(GetDeviceRegistryPropertyByInfo, {onLeave: function (args) {send("GetDeviceRegistryPropertyByInfo");}});

var GetDeviceRegistryPropertyByInst = Module.findExportByName("vdsutil.dll", "GetDeviceRegistryPropertyByInst")
Interceptor.attach(GetDeviceRegistryPropertyByInst, {onLeave: function (args) {send("GetDeviceRegistryPropertyByInst");}});

var GetDiskFlags = Module.findExportByName("vdsutil.dll", "GetDiskFlags")
Interceptor.attach(GetDiskFlags, {onLeave: function (args) {send("GetDiskFlags");}});

var GetDiskIdentifiers = Module.findExportByName("vdsutil.dll", "GetDiskIdentifiers")
Interceptor.attach(GetDiskIdentifiers, {onLeave: function (args) {send("GetDiskIdentifiers");}});

var GetDiskLayout = Module.findExportByName("vdsutil.dll", "GetDiskLayout")
Interceptor.attach(GetDiskLayout, {onLeave: function (args) {send("GetDiskLayout");}});

var GetDiskOfflineReason = Module.findExportByName("vdsutil.dll", "GetDiskOfflineReason")
Interceptor.attach(GetDiskOfflineReason, {onLeave: function (args) {send("GetDiskOfflineReason");}});

var GetDiskRedundancyCount = Module.findExportByName("vdsutil.dll", "GetDiskRedundancyCount")
Interceptor.attach(GetDiskRedundancyCount, {onLeave: function (args) {send("GetDiskRedundancyCount");}});

var GetFMIFSEnableCompressionRoutine = Module.findExportByName("vdsutil.dll", "GetFMIFSEnableCompressionRoutine")
Interceptor.attach(GetFMIFSEnableCompressionRoutine, {onLeave: function (args) {send("GetFMIFSEnableCompressionRoutine");}});

var GetFMIFSFormatEx2Routine = Module.findExportByName("vdsutil.dll", "GetFMIFSFormatEx2Routine")
Interceptor.attach(GetFMIFSFormatEx2Routine, {onLeave: function (args) {send("GetFMIFSFormatEx2Routine");}});

var GetFMIFSGetDefaultFilesystemRoutine = Module.findExportByName("vdsutil.dll", "GetFMIFSGetDefaultFilesystemRoutine")
Interceptor.attach(GetFMIFSGetDefaultFilesystemRoutine, {onLeave: function (args) {send("GetFMIFSGetDefaultFilesystemRoutine");}});

var GetFMIFSQueryDeviceInfo = Module.findExportByName("vdsutil.dll", "GetFMIFSQueryDeviceInfo")
Interceptor.attach(GetFMIFSQueryDeviceInfo, {onLeave: function (args) {send("GetFMIFSQueryDeviceInfo");}});

var GetFMIFSQueryDeviceInfoByHandle = Module.findExportByName("vdsutil.dll", "GetFMIFSQueryDeviceInfoByHandle")
Interceptor.attach(GetFMIFSQueryDeviceInfoByHandle, {onLeave: function (args) {send("GetFMIFSQueryDeviceInfoByHandle");}});

var GetFileSystemRecognitionName = Module.findExportByName("vdsutil.dll", "GetFileSystemRecognitionName")
Interceptor.attach(GetFileSystemRecognitionName, {onLeave: function (args) {send("GetFileSystemRecognitionName");}});

var GetInterfaceDetailData = Module.findExportByName("vdsutil.dll", "GetInterfaceDetailData")
Interceptor.attach(GetInterfaceDetailData, {onLeave: function (args) {send("GetInterfaceDetailData");}});

var GetIsRemovable = Module.findExportByName("vdsutil.dll", "GetIsRemovable")
Interceptor.attach(GetIsRemovable, {onLeave: function (args) {send("GetIsRemovable");}});

var GetMediaGeometry = Module.findExportByName("vdsutil.dll", "GetMediaGeometry")
Interceptor.attach(GetMediaGeometry, {onLeave: function (args) {send("GetMediaGeometry");}});

var GetMediaGeometryEx = Module.findExportByName("vdsutil.dll", "GetMediaGeometryEx")
Interceptor.attach(GetMediaGeometryEx, {onLeave: function (args) {send("GetMediaGeometryEx");}});

var GetPartitionInformation = Module.findExportByName("vdsutil.dll", "GetPartitionInformation")
Interceptor.attach(GetPartitionInformation, {onLeave: function (args) {send("GetPartitionInformation");}});

var GetRegistryValue = Module.findExportByName("vdsutil.dll", "GetRegistryValue")
Interceptor.attach(GetRegistryValue, {onLeave: function (args) {send("GetRegistryValue");}});

var GetStorageAccessAlignmentProperty = Module.findExportByName("vdsutil.dll", "GetStorageAccessAlignmentProperty")
Interceptor.attach(GetStorageAccessAlignmentProperty, {onLeave: function (args) {send("GetStorageAccessAlignmentProperty");}});

var GetSystemVolumeHandle = Module.findExportByName("vdsutil.dll", "GetSystemVolumeHandle")
Interceptor.attach(GetSystemVolumeHandle, {onLeave: function (args) {send("GetSystemVolumeHandle");}});

var GetVolumeDiskExtentInfo = Module.findExportByName("vdsutil.dll", "GetVolumeDiskExtentInfo")
Interceptor.attach(GetVolumeDiskExtentInfo, {onLeave: function (args) {send("GetVolumeDiskExtentInfo");}});

var GetVolumeGuidPathnames = Module.findExportByName("vdsutil.dll", "GetVolumeGuidPathnames")
Interceptor.attach(GetVolumeGuidPathnames, {onLeave: function (args) {send("GetVolumeGuidPathnames");}});

var GetVolumeName = Module.findExportByName("vdsutil.dll", "GetVolumeName")
Interceptor.attach(GetVolumeName, {onLeave: function (args) {send("GetVolumeName");}});

var GetVolumePath = Module.findExportByName("vdsutil.dll", "GetVolumePath")
Interceptor.attach(GetVolumePath, {onLeave: function (args) {send("GetVolumePath");}});

var GetVolumeSize = Module.findExportByName("vdsutil.dll", "GetVolumeSize")
Interceptor.attach(GetVolumeSize, {onLeave: function (args) {send("GetVolumeSize");}});

var GetVolumeUniqueId = Module.findExportByName("vdsutil.dll", "GetVolumeUniqueId")
Interceptor.attach(GetVolumeUniqueId, {onLeave: function (args) {send("GetVolumeUniqueId");}});

var GuidToString = Module.findExportByName("vdsutil.dll", "GuidToString")
Interceptor.attach(GuidToString, {onLeave: function (args) {send("GuidToString");}});

var InitializeRundownProtection = Module.findExportByName("vdsutil.dll", "InitializeRundownProtection")
Interceptor.attach(InitializeRundownProtection, {onLeave: function (args) {send("InitializeRundownProtection");}});

var InitializeSecurityDescriptorHelper = Module.findExportByName("vdsutil.dll", "InitializeSecurityDescriptorHelper")
Interceptor.attach(InitializeSecurityDescriptorHelper, {onLeave: function (args) {send("InitializeSecurityDescriptorHelper");}});

var InvalidateDiskCache = Module.findExportByName("vdsutil.dll", "InvalidateDiskCache")
Interceptor.attach(InvalidateDiskCache, {onLeave: function (args) {send("InvalidateDiskCache");}});

var IoctlMountmgrQueryPointsDevicePath = Module.findExportByName("vdsutil.dll", "IoctlMountmgrQueryPointsDevicePath")
Interceptor.attach(IoctlMountmgrQueryPointsDevicePath, {onLeave: function (args) {send("IoctlMountmgrQueryPointsDevicePath");}});

var IsClientSKU = Module.findExportByName("vdsutil.dll", "IsClientSKU")
Interceptor.attach(IsClientSKU, {onLeave: function (args) {send("IsClientSKU");}});

var IsDeviceFullyInstalled = Module.findExportByName("vdsutil.dll", "IsDeviceFullyInstalled")
Interceptor.attach(IsDeviceFullyInstalled, {onLeave: function (args) {send("IsDeviceFullyInstalled");}});

var IsDiskClustered = Module.findExportByName("vdsutil.dll", "IsDiskClustered")
Interceptor.attach(IsDiskClustered, {onLeave: function (args) {send("IsDiskClustered");}});

var IsDiskCurrentStateReadOnly = Module.findExportByName("vdsutil.dll", "IsDiskCurrentStateReadOnly")
Interceptor.attach(IsDiskCurrentStateReadOnly, {onLeave: function (args) {send("IsDiskCurrentStateReadOnly");}});

var IsDiskReadOnly = Module.findExportByName("vdsutil.dll", "IsDiskReadOnly")
Interceptor.attach(IsDiskReadOnly, {onLeave: function (args) {send("IsDiskReadOnly");}});

var IsDriveLetter = Module.findExportByName("vdsutil.dll", "IsDriveLetter")
Interceptor.attach(IsDriveLetter, {onLeave: function (args) {send("IsDriveLetter");}});

var IsEfiFirmware = Module.findExportByName("vdsutil.dll", "IsEfiFirmware")
Interceptor.attach(IsEfiFirmware, {onLeave: function (args) {send("IsEfiFirmware");}});

var IsLocalComputer = Module.findExportByName("vdsutil.dll", "IsLocalComputer")
Interceptor.attach(IsLocalComputer, {onLeave: function (args) {send("IsLocalComputer");}});

var IsMediaPresent = Module.findExportByName("vdsutil.dll", "IsMediaPresent")
Interceptor.attach(IsMediaPresent, {onLeave: function (args) {send("IsMediaPresent");}});

var IsNoAutoMount = Module.findExportByName("vdsutil.dll", "IsNoAutoMount")
Interceptor.attach(IsNoAutoMount, {onLeave: function (args) {send("IsNoAutoMount");}});

var IsRamDrive = Module.findExportByName("vdsutil.dll", "IsRamDrive")
Interceptor.attach(IsRamDrive, {onLeave: function (args) {send("IsRamDrive");}});

var IsRunningOnAMD64 = Module.findExportByName("vdsutil.dll", "IsRunningOnAMD64")
Interceptor.attach(IsRunningOnAMD64, {onLeave: function (args) {send("IsRunningOnAMD64");}});

var IsVdsLoggingEnabled = Module.findExportByName("vdsutil.dll", "IsVdsLoggingEnabled")
Interceptor.attach(IsVdsLoggingEnabled, {onLeave: function (args) {send("IsVdsLoggingEnabled");}});

var IsWinPE = Module.findExportByName("vdsutil.dll", "IsWinPE")
Interceptor.attach(IsWinPE, {onLeave: function (args) {send("IsWinPE");}});

var LockDismountVolume = Module.findExportByName("vdsutil.dll", "LockDismountVolume")
Interceptor.attach(LockDismountVolume, {onLeave: function (args) {send("LockDismountVolume");}});

var LockVolume = Module.findExportByName("vdsutil.dll", "LockVolume")
Interceptor.attach(LockVolume, {onLeave: function (args) {send("LockVolume");}});

var LogError = Module.findExportByName("vdsutil.dll", "LogError")
Interceptor.attach(LogError, {onLeave: function (args) {send("LogError");}});

var LogEvent = Module.findExportByName("vdsutil.dll", "LogEvent")
Interceptor.attach(LogEvent, {onLeave: function (args) {send("LogEvent");}});

var LogInfo = Module.findExportByName("vdsutil.dll", "LogInfo")
Interceptor.attach(LogInfo, {onLeave: function (args) {send("LogInfo");}});

var LogWarning = Module.findExportByName("vdsutil.dll", "LogWarning")
Interceptor.attach(LogWarning, {onLeave: function (args) {send("LogWarning");}});

var MirrorBcdObjects = Module.findExportByName("vdsutil.dll", "MirrorBcdObjects")
Interceptor.attach(MirrorBcdObjects, {onLeave: function (args) {send("MirrorBcdObjects");}});

var MountVolume = Module.findExportByName("vdsutil.dll", "MountVolume")
Interceptor.attach(MountVolume, {onLeave: function (args) {send("MountVolume");}});

var OpenDevice = Module.findExportByName("vdsutil.dll", "OpenDevice")
Interceptor.attach(OpenDevice, {onLeave: function (args) {send("OpenDevice");}});

var QueryObjects = Module.findExportByName("vdsutil.dll", "QueryObjects")
Interceptor.attach(QueryObjects, {onLeave: function (args) {send("QueryObjects");}});

var QueryVolPersistentState = Module.findExportByName("vdsutil.dll", "QueryVolPersistentState")
Interceptor.attach(QueryVolPersistentState, {onLeave: function (args) {send("QueryVolPersistentState");}});

var ReInitializeRundownProtection = Module.findExportByName("vdsutil.dll", "ReInitializeRundownProtection")
Interceptor.attach(ReInitializeRundownProtection, {onLeave: function (args) {send("ReInitializeRundownProtection");}});

var RegisterProvider = Module.findExportByName("vdsutil.dll", "RegisterProvider")
Interceptor.attach(RegisterProvider, {onLeave: function (args) {send("RegisterProvider");}});

var ReleaseRundownProtection = Module.findExportByName("vdsutil.dll", "ReleaseRundownProtection")
Interceptor.attach(ReleaseRundownProtection, {onLeave: function (args) {send("ReleaseRundownProtection");}});

var RemoveEventSource = Module.findExportByName("vdsutil.dll", "RemoveEventSource")
Interceptor.attach(RemoveEventSource, {onLeave: function (args) {send("RemoveEventSource");}});

var RemoveTempVolumeName = Module.findExportByName("vdsutil.dll", "RemoveTempVolumeName")
Interceptor.attach(RemoveTempVolumeName, {onLeave: function (args) {send("RemoveTempVolumeName");}});

var RundownCompleted = Module.findExportByName("vdsutil.dll", "RundownCompleted")
Interceptor.attach(RundownCompleted, {onLeave: function (args) {send("RundownCompleted");}});

var SetDiskLayout = Module.findExportByName("vdsutil.dll", "SetDiskLayout")
Interceptor.attach(SetDiskLayout, {onLeave: function (args) {send("SetDiskLayout");}});

var StartReferenceHistory = Module.findExportByName("vdsutil.dll", "StartReferenceHistory")
Interceptor.attach(StartReferenceHistory, {onLeave: function (args) {send("StartReferenceHistory");}});

var StopReferenceHistory = Module.findExportByName("vdsutil.dll", "StopReferenceHistory")
Interceptor.attach(StopReferenceHistory, {onLeave: function (args) {send("StopReferenceHistory");}});

var UnInitializeGlobalResouce = Module.findExportByName("vdsutil.dll", "UnInitializeGlobalResouce")
Interceptor.attach(UnInitializeGlobalResouce, {onLeave: function (args) {send("UnInitializeGlobalResouce");}});

var UnregisterProvider = Module.findExportByName("vdsutil.dll", "UnregisterProvider")
Interceptor.attach(UnregisterProvider, {onLeave: function (args) {send("UnregisterProvider");}});

var VdsAllocateEmptyString = Module.findExportByName("vdsutil.dll", "VdsAllocateEmptyString")
Interceptor.attach(VdsAllocateEmptyString, {onLeave: function (args) {send("VdsAllocateEmptyString");}});

var VdsAllocateString = Module.findExportByName("vdsutil.dll", "VdsAllocateString")
Interceptor.attach(VdsAllocateString, {onLeave: function (args) {send("VdsAllocateString");}});

var VdsAssert = Module.findExportByName("vdsutil.dll", "VdsAssert")
Interceptor.attach(VdsAssert, {onLeave: function (args) {send("VdsAssert");}});

var VdsDisableCOMFatalExceptionHandling = Module.findExportByName("vdsutil.dll", "VdsDisableCOMFatalExceptionHandling")
Interceptor.attach(VdsDisableCOMFatalExceptionHandling, {onLeave: function (args) {send("VdsDisableCOMFatalExceptionHandling");}});

var VdsDoesDiskHaveArcPath = Module.findExportByName("vdsutil.dll", "VdsDoesDiskHaveArcPath")
Interceptor.attach(VdsDoesDiskHaveArcPath, {onLeave: function (args) {send("VdsDoesDiskHaveArcPath");}});

var VdsHeapAlloc = Module.findExportByName("vdsutil.dll", "VdsHeapAlloc")
Interceptor.attach(VdsHeapAlloc, {onLeave: function (args) {send("VdsHeapAlloc");}});

var VdsHeapFree = Module.findExportByName("vdsutil.dll", "VdsHeapFree")
Interceptor.attach(VdsHeapFree, {onLeave: function (args) {send("VdsHeapFree");}});

var VdsInitializeCriticalSection = Module.findExportByName("vdsutil.dll", "VdsInitializeCriticalSection")
Interceptor.attach(VdsInitializeCriticalSection, {onLeave: function (args) {send("VdsInitializeCriticalSection");}});

var VdsIscsiCacheSessionDevices = Module.findExportByName("vdsutil.dll", "VdsIscsiCacheSessionDevices")
Interceptor.attach(VdsIscsiCacheSessionDevices, {onLeave: function (args) {send("VdsIscsiCacheSessionDevices");}});

var VdsIscsiCheckEqualIpAddress = Module.findExportByName("vdsutil.dll", "VdsIscsiCheckEqualIpAddress")
Interceptor.attach(VdsIscsiCheckEqualIpAddress, {onLeave: function (args) {send("VdsIscsiCheckEqualIpAddress");}});

var VdsIscsiGetIpAddressFromInstance = Module.findExportByName("vdsutil.dll", "VdsIscsiGetIpAddressFromInstance")
Interceptor.attach(VdsIscsiGetIpAddressFromInstance, {onLeave: function (args) {send("VdsIscsiGetIpAddressFromInstance");}});

var VdsIscsiIpAddressToIpsecId = Module.findExportByName("vdsutil.dll", "VdsIscsiIpAddressToIpsecId")
Interceptor.attach(VdsIscsiIpAddressToIpsecId, {onLeave: function (args) {send("VdsIscsiIpAddressToIpsecId");}});

var VdsIscsiIpAddressToString = Module.findExportByName("vdsutil.dll", "VdsIscsiIpAddressToString")
Interceptor.attach(VdsIscsiIpAddressToString, {onLeave: function (args) {send("VdsIscsiIpAddressToString");}});

var VdsIscsiIpsecIdToIpAddress = Module.findExportByName("vdsutil.dll", "VdsIscsiIpsecIdToIpAddress")
Interceptor.attach(VdsIscsiIpsecIdToIpAddress, {onLeave: function (args) {send("VdsIscsiIpsecIdToIpAddress");}});

var VdsIscsiIsIscsiLun = Module.findExportByName("vdsutil.dll", "VdsIscsiIsIscsiLun")
Interceptor.attach(VdsIscsiIsIscsiLun, {onLeave: function (args) {send("VdsIscsiIsIscsiLun");}});

var VdsIscsiSetIpAddressInInstance = Module.findExportByName("vdsutil.dll", "VdsIscsiSetIpAddressInInstance")
Interceptor.attach(VdsIscsiSetIpAddressInInstance, {onLeave: function (args) {send("VdsIscsiSetIpAddressInInstance");}});

var VdsTrace = Module.findExportByName("vdsutil.dll", "VdsTrace")
Interceptor.attach(VdsTrace, {onLeave: function (args) {send("VdsTrace");}});

var VdsTraceEx = Module.findExportByName("vdsutil.dll", "VdsTraceEx")
Interceptor.attach(VdsTraceEx, {onLeave: function (args) {send("VdsTraceEx");}});

var VdsTraceExHelper = Module.findExportByName("vdsutil.dll", "VdsTraceExHelper")
Interceptor.attach(VdsTraceExHelper, {onLeave: function (args) {send("VdsTraceExHelper");}});

var VdsTraceExW = Module.findExportByName("vdsutil.dll", "VdsTraceExW")
Interceptor.attach(VdsTraceExW, {onLeave: function (args) {send("VdsTraceExW");}});

var VdsTraceExWHelper = Module.findExportByName("vdsutil.dll", "VdsTraceExWHelper")
Interceptor.attach(VdsTraceExWHelper, {onLeave: function (args) {send("VdsTraceExWHelper");}});

var VdsTraceW = Module.findExportByName("vdsutil.dll", "VdsTraceW")
Interceptor.attach(VdsTraceW, {onLeave: function (args) {send("VdsTraceW");}});

var VdsWmiCallMethod = Module.findExportByName("vdsutil.dll", "VdsWmiCallMethod")
Interceptor.attach(VdsWmiCallMethod, {onLeave: function (args) {send("VdsWmiCallMethod");}});

var VdsWmiConnectToNamespace = Module.findExportByName("vdsutil.dll", "VdsWmiConnectToNamespace")
Interceptor.attach(VdsWmiConnectToNamespace, {onLeave: function (args) {send("VdsWmiConnectToNamespace");}});

var VdsWmiCopyFromVariantByteArray = Module.findExportByName("vdsutil.dll", "VdsWmiCopyFromVariantByteArray")
Interceptor.attach(VdsWmiCopyFromVariantByteArray, {onLeave: function (args) {send("VdsWmiCopyFromVariantByteArray");}});

var VdsWmiCopyToVariantByteArray = Module.findExportByName("vdsutil.dll", "VdsWmiCopyToVariantByteArray")
Interceptor.attach(VdsWmiCopyToVariantByteArray, {onLeave: function (args) {send("VdsWmiCopyToVariantByteArray");}});

var VdsWmiCreateClassInstance = Module.findExportByName("vdsutil.dll", "VdsWmiCreateClassInstance")
Interceptor.attach(VdsWmiCreateClassInstance, {onLeave: function (args) {send("VdsWmiCreateClassInstance");}});

var VdsWmiCreateVariantArray = Module.findExportByName("vdsutil.dll", "VdsWmiCreateVariantArray")
Interceptor.attach(VdsWmiCreateVariantArray, {onLeave: function (args) {send("VdsWmiCreateVariantArray");}});

var VdsWmiFindInstanceOfClass = Module.findExportByName("vdsutil.dll", "VdsWmiFindInstanceOfClass")
Interceptor.attach(VdsWmiFindInstanceOfClass, {onLeave: function (args) {send("VdsWmiFindInstanceOfClass");}});

var VdsWmiGetBoolFromInstance = Module.findExportByName("vdsutil.dll", "VdsWmiGetBoolFromInstance")
Interceptor.attach(VdsWmiGetBoolFromInstance, {onLeave: function (args) {send("VdsWmiGetBoolFromInstance");}});

var VdsWmiGetByteFromInstance = Module.findExportByName("vdsutil.dll", "VdsWmiGetByteFromInstance")
Interceptor.attach(VdsWmiGetByteFromInstance, {onLeave: function (args) {send("VdsWmiGetByteFromInstance");}});

var VdsWmiGetByteInVariantByteArray = Module.findExportByName("vdsutil.dll", "VdsWmiGetByteInVariantByteArray")
Interceptor.attach(VdsWmiGetByteInVariantByteArray, {onLeave: function (args) {send("VdsWmiGetByteInVariantByteArray");}});

var VdsWmiGetMethodArgumentObject = Module.findExportByName("vdsutil.dll", "VdsWmiGetMethodArgumentObject")
Interceptor.attach(VdsWmiGetMethodArgumentObject, {onLeave: function (args) {send("VdsWmiGetMethodArgumentObject");}});

var VdsWmiGetObjectFromInstance = Module.findExportByName("vdsutil.dll", "VdsWmiGetObjectFromInstance")
Interceptor.attach(VdsWmiGetObjectFromInstance, {onLeave: function (args) {send("VdsWmiGetObjectFromInstance");}});

var VdsWmiGetObjectInVariantObjectArray = Module.findExportByName("vdsutil.dll", "VdsWmiGetObjectInVariantObjectArray")
Interceptor.attach(VdsWmiGetObjectInVariantObjectArray, {onLeave: function (args) {send("VdsWmiGetObjectInVariantObjectArray");}});

var VdsWmiGetUlongFromInstance = Module.findExportByName("vdsutil.dll", "VdsWmiGetUlongFromInstance")
Interceptor.attach(VdsWmiGetUlongFromInstance, {onLeave: function (args) {send("VdsWmiGetUlongFromInstance");}});

var VdsWmiGetUlonglongFromInstance = Module.findExportByName("vdsutil.dll", "VdsWmiGetUlonglongFromInstance")
Interceptor.attach(VdsWmiGetUlonglongFromInstance, {onLeave: function (args) {send("VdsWmiGetUlonglongFromInstance");}});

var VdsWmiSetBoolInInstance = Module.findExportByName("vdsutil.dll", "VdsWmiSetBoolInInstance")
Interceptor.attach(VdsWmiSetBoolInInstance, {onLeave: function (args) {send("VdsWmiSetBoolInInstance");}});

var VdsWmiSetByteInInstance = Module.findExportByName("vdsutil.dll", "VdsWmiSetByteInInstance")
Interceptor.attach(VdsWmiSetByteInInstance, {onLeave: function (args) {send("VdsWmiSetByteInInstance");}});

var VdsWmiSetObjectInInstance = Module.findExportByName("vdsutil.dll", "VdsWmiSetObjectInInstance")
Interceptor.attach(VdsWmiSetObjectInInstance, {onLeave: function (args) {send("VdsWmiSetObjectInInstance");}});

var VdsWmiSetStringInInstance = Module.findExportByName("vdsutil.dll", "VdsWmiSetStringInInstance")
Interceptor.attach(VdsWmiSetStringInInstance, {onLeave: function (args) {send("VdsWmiSetStringInInstance");}});

var VdsWmiSetUlongInInstance = Module.findExportByName("vdsutil.dll", "VdsWmiSetUlongInInstance")
Interceptor.attach(VdsWmiSetUlongInInstance, {onLeave: function (args) {send("VdsWmiSetUlongInInstance");}});

var VdsWmiSetUlonglongInInstance = Module.findExportByName("vdsutil.dll", "VdsWmiSetUlonglongInInstance")
Interceptor.attach(VdsWmiSetUlonglongInInstance, {onLeave: function (args) {send("VdsWmiSetUlonglongInInstance");}});

var WaitForRundownProtectionRelease = Module.findExportByName("vdsutil.dll", "WaitForRundownProtectionRelease")
Interceptor.attach(WaitForRundownProtectionRelease, {onLeave: function (args) {send("WaitForRundownProtectionRelease");}});

var WriteBootCode = Module.findExportByName("vdsutil.dll", "WriteBootCode")
Interceptor.attach(WriteBootCode, {onLeave: function (args) {send("WriteBootCode");}});

