var ChallengeUser = Module.findExportByName("microsoft_shell_integration.dll", "ChallengeUser")
Interceptor.attach(ChallengeUser, {onLeave: function (args) {send("ChallengeUser");}});

var CreateAndShowNotification = Module.findExportByName("microsoft_shell_integration.dll", "CreateAndShowNotification")
Interceptor.attach(CreateAndShowNotification, {onLeave: function (args) {send("CreateAndShowNotification");}});

var CreateWin7SpellCheckerFactory = Module.findExportByName("microsoft_shell_integration.dll", "CreateWin7SpellCheckerFactory")
Interceptor.attach(CreateWin7SpellCheckerFactory, {onLeave: function (args) {send("CreateWin7SpellCheckerFactory");}});

var DisableControllerNavigation = Module.findExportByName("microsoft_shell_integration.dll", "DisableControllerNavigation")
Interceptor.attach(DisableControllerNavigation, {onLeave: function (args) {send("DisableControllerNavigation");}});

var EnableControllerNavigation = Module.findExportByName("microsoft_shell_integration.dll", "EnableControllerNavigation")
Interceptor.attach(EnableControllerNavigation, {onLeave: function (args) {send("EnableControllerNavigation");}});

var EnableControllerNavigationHwnd = Module.findExportByName("microsoft_shell_integration.dll", "EnableControllerNavigationHwnd")
Interceptor.attach(EnableControllerNavigationHwnd, {onLeave: function (args) {send("EnableControllerNavigationHwnd");}});

var GetElementForTaskbar = Module.findExportByName("microsoft_shell_integration.dll", "GetElementForTaskbar")
Interceptor.attach(GetElementForTaskbar, {onLeave: function (args) {send("GetElementForTaskbar");}});

var GetElementForTaskbarIcon = Module.findExportByName("microsoft_shell_integration.dll", "GetElementForTaskbarIcon")
Interceptor.attach(GetElementForTaskbarIcon, {onLeave: function (args) {send("GetElementForTaskbarIcon");}});

var GetNotificationIdentity = Module.findExportByName("microsoft_shell_integration.dll", "GetNotificationIdentity")
Interceptor.attach(GetNotificationIdentity, {onLeave: function (args) {send("GetNotificationIdentity");}});

var GetProcessAppSessionGuid = Module.findExportByName("microsoft_shell_integration.dll", "GetProcessAppSessionGuid")
Interceptor.attach(GetProcessAppSessionGuid, {onLeave: function (args) {send("GetProcessAppSessionGuid");}});

var GetUIAClientInfo = Module.findExportByName("microsoft_shell_integration.dll", "GetUIAClientInfo")
Interceptor.attach(GetUIAClientInfo, {onLeave: function (args) {send("GetUIAClientInfo");}});

var IsItemPinnedToTaskbarByAppID = Module.findExportByName("microsoft_shell_integration.dll", "IsItemPinnedToTaskbarByAppID")
Interceptor.attach(IsItemPinnedToTaskbarByAppID, {onLeave: function (args) {send("IsItemPinnedToTaskbarByAppID");}});

var IsShortcutPinnedToTaskbar = Module.findExportByName("microsoft_shell_integration.dll", "IsShortcutPinnedToTaskbar")
Interceptor.attach(IsShortcutPinnedToTaskbar, {onLeave: function (args) {send("IsShortcutPinnedToTaskbar");}});

var IsTipsOsSettingEnabled = Module.findExportByName("microsoft_shell_integration.dll", "IsTipsOsSettingEnabled")
Interceptor.attach(IsTipsOsSettingEnabled, {onLeave: function (args) {send("IsTipsOsSettingEnabled");}});

var PinShortcutToTaskbar = Module.findExportByName("microsoft_shell_integration.dll", "PinShortcutToTaskbar")
Interceptor.attach(PinShortcutToTaskbar, {onLeave: function (args) {send("PinShortcutToTaskbar");}});

var PrepareVisualForWcos = Module.findExportByName("microsoft_shell_integration.dll", "PrepareVisualForWcos")
Interceptor.attach(PrepareVisualForWcos, {onLeave: function (args) {send("PrepareVisualForWcos");}});

var RegisterClosestInteractiveBoundsWindow = Module.findExportByName("microsoft_shell_integration.dll", "RegisterClosestInteractiveBoundsWindow")
Interceptor.attach(RegisterClosestInteractiveBoundsWindow, {onLeave: function (args) {send("RegisterClosestInteractiveBoundsWindow");}});

var ReplaceTaskbarPin = Module.findExportByName("microsoft_shell_integration.dll", "ReplaceTaskbarPin")
Interceptor.attach(ReplaceTaskbarPin, {onLeave: function (args) {send("ReplaceTaskbarPin");}});

var UnpinShortcutFromTaskbar = Module.findExportByName("microsoft_shell_integration.dll", "UnpinShortcutFromTaskbar")
Interceptor.attach(UnpinShortcutFromTaskbar, {onLeave: function (args) {send("UnpinShortcutFromTaskbar");}});

var XboxAreWebAppsEnabled = Module.findExportByName("microsoft_shell_integration.dll", "XboxAreWebAppsEnabled")
Interceptor.attach(XboxAreWebAppsEnabled, {onLeave: function (args) {send("XboxAreWebAppsEnabled");}});

var XboxAreWebAppsUserInstallable = Module.findExportByName("microsoft_shell_integration.dll", "XboxAreWebAppsUserInstallable")
Interceptor.attach(XboxAreWebAppsUserInstallable, {onLeave: function (args) {send("XboxAreWebAppsUserInstallable");}});

var XboxCreateArgbScreenshot = Module.findExportByName("microsoft_shell_integration.dll", "XboxCreateArgbScreenshot")
Interceptor.attach(XboxCreateArgbScreenshot, {onLeave: function (args) {send("XboxCreateArgbScreenshot");}});

var XboxDidAppTerminateNormally = Module.findExportByName("microsoft_shell_integration.dll", "XboxDidAppTerminateNormally")
Interceptor.attach(XboxDidAppTerminateNormally, {onLeave: function (args) {send("XboxDidAppTerminateNormally");}});

var XboxFreeArgbScreenshot = Module.findExportByName("microsoft_shell_integration.dll", "XboxFreeArgbScreenshot")
Interceptor.attach(XboxFreeArgbScreenshot, {onLeave: function (args) {send("XboxFreeArgbScreenshot");}});

var XboxGetProtocolHandlerForScheme = Module.findExportByName("microsoft_shell_integration.dll", "XboxGetProtocolHandlerForScheme")
Interceptor.attach(XboxGetProtocolHandlerForScheme, {onLeave: function (args) {send("XboxGetProtocolHandlerForScheme");}});

var XboxIsBrowserOnFastStorage = Module.findExportByName("microsoft_shell_integration.dll", "XboxIsBrowserOnFastStorage")
Interceptor.attach(XboxIsBrowserOnFastStorage, {onLeave: function (args) {send("XboxIsBrowserOnFastStorage");}});

var XboxIsBrowserSetBackgroundImageEnabled = Module.findExportByName("microsoft_shell_integration.dll", "XboxIsBrowserSetBackgroundImageEnabled")
Interceptor.attach(XboxIsBrowserSetBackgroundImageEnabled, {onLeave: function (args) {send("XboxIsBrowserSetBackgroundImageEnabled");}});

var XboxIsHevcCapEnabledForCurrentProcess = Module.findExportByName("microsoft_shell_integration.dll", "XboxIsHevcCapEnabledForCurrentProcess")
Interceptor.attach(XboxIsHevcCapEnabledForCurrentProcess, {onLeave: function (args) {send("XboxIsHevcCapEnabledForCurrentProcess");}});

var XboxNavigateBack = Module.findExportByName("microsoft_shell_integration.dll", "XboxNavigateBack")
Interceptor.attach(XboxNavigateBack, {onLeave: function (args) {send("XboxNavigateBack");}});

var XboxSetBackgroundImageFromArgbBuffer = Module.findExportByName("microsoft_shell_integration.dll", "XboxSetBackgroundImageFromArgbBuffer")
Interceptor.attach(XboxSetBackgroundImageFromArgbBuffer, {onLeave: function (args) {send("XboxSetBackgroundImageFromArgbBuffer");}});

var XboxShowLegalDocuments = Module.findExportByName("microsoft_shell_integration.dll", "XboxShowLegalDocuments")
Interceptor.attach(XboxShowLegalDocuments, {onLeave: function (args) {send("XboxShowLegalDocuments");}});

