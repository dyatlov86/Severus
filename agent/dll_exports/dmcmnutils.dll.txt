var BigStrcat = Module.findExportByName("dmcmnutils.dll", "BigStrcat")
Interceptor.attach(BigStrcat, {onLeave: function (args) {send("BigStrcat");}});

var BinaryToHexString = Module.findExportByName("dmcmnutils.dll", "BinaryToHexString")
Interceptor.attach(BinaryToHexString, {onLeave: function (args) {send("BinaryToHexString");}});

var ComputeHmac = Module.findExportByName("dmcmnutils.dll", "ComputeHmac")
Interceptor.attach(ComputeHmac, {onLeave: function (args) {send("ComputeHmac");}});

var CopyString = Module.findExportByName("dmcmnutils.dll", "CopyString")
Interceptor.attach(CopyString, {onLeave: function (args) {send("CopyString");}});

var CreateBstrArray = Module.findExportByName("dmcmnutils.dll", "CreateBstrArray")
Interceptor.attach(CreateBstrArray, {onLeave: function (args) {send("CreateBstrArray");}});

var DMGetClientHardwareUID = Module.findExportByName("dmcmnutils.dll", "DMGetClientHardwareUID")
Interceptor.attach(DMGetClientHardwareUID, {onLeave: function (args) {send("DMGetClientHardwareUID");}});

var DMGetDeviceClientID = Module.findExportByName("dmcmnutils.dll", "DMGetDeviceClientID")
Interceptor.attach(DMGetDeviceClientID, {onLeave: function (args) {send("DMGetDeviceClientID");}});

var DMSetDeviceClientID = Module.findExportByName("dmcmnutils.dll", "DMSetDeviceClientID")
Interceptor.attach(DMSetDeviceClientID, {onLeave: function (args) {send("DMSetDeviceClientID");}});

var DecodeBase64W = Module.findExportByName("dmcmnutils.dll", "DecodeBase64W")
Interceptor.attach(DecodeBase64W, {onLeave: function (args) {send("DecodeBase64W");}});

var DmCancelGetUserPermissionAsync = Module.findExportByName("dmcmnutils.dll", "DmCancelGetUserPermissionAsync")
Interceptor.attach(DmCancelGetUserPermissionAsync, {onLeave: function (args) {send("DmCancelGetUserPermissionAsync");}});

var DmCheckIfAadAccountLoggedOn = Module.findExportByName("dmcmnutils.dll", "DmCheckIfAadAccountLoggedOn")
Interceptor.attach(DmCheckIfAadAccountLoggedOn, {onLeave: function (args) {send("DmCheckIfAadAccountLoggedOn");}});

var DmCopyDirectoryRecursive = Module.findExportByName("dmcmnutils.dll", "DmCopyDirectoryRecursive")
Interceptor.attach(DmCopyDirectoryRecursive, {onLeave: function (args) {send("DmCopyDirectoryRecursive");}});

var DmCreateFileSafe = Module.findExportByName("dmcmnutils.dll", "DmCreateFileSafe")
Interceptor.attach(DmCreateFileSafe, {onLeave: function (args) {send("DmCreateFileSafe");}});

var DmCreateTask = Module.findExportByName("dmcmnutils.dll", "DmCreateTask")
Interceptor.attach(DmCreateTask, {onLeave: function (args) {send("DmCreateTask");}});

var DmDeleteTask = Module.findExportByName("dmcmnutils.dll", "DmDeleteTask")
Interceptor.attach(DmDeleteTask, {onLeave: function (args) {send("DmDeleteTask");}});

var DmDisableTask = Module.findExportByName("dmcmnutils.dll", "DmDisableTask")
Interceptor.attach(DmDisableTask, {onLeave: function (args) {send("DmDisableTask");}});

var DmEnableTask = Module.findExportByName("dmcmnutils.dll", "DmEnableTask")
Interceptor.attach(DmEnableTask, {onLeave: function (args) {send("DmEnableTask");}});

var DmEnumUsers = Module.findExportByName("dmcmnutils.dll", "DmEnumUsers")
Interceptor.attach(DmEnumUsers, {onLeave: function (args) {send("DmEnumUsers");}});

var DmExecuteProcessAndCollect = Module.findExportByName("dmcmnutils.dll", "DmExecuteProcessAndCollect")
Interceptor.attach(DmExecuteProcessAndCollect, {onLeave: function (args) {send("DmExecuteProcessAndCollect");}});

var DmGenerateAttestationClaims = Module.findExportByName("dmcmnutils.dll", "DmGenerateAttestationClaims")
Interceptor.attach(DmGenerateAttestationClaims, {onLeave: function (args) {send("DmGenerateAttestationClaims");}});

var DmGetAadDeviceMdmEnrollmentResourceUrlWithDiscovery = Module.findExportByName("dmcmnutils.dll", "DmGetAadDeviceMdmEnrollmentResourceUrlWithDiscovery")
Interceptor.attach(DmGetAadDeviceMdmEnrollmentResourceUrlWithDiscovery, {onLeave: function (args) {send("DmGetAadDeviceMdmEnrollmentResourceUrlWithDiscovery");}});

var DmGetAadDeviceToken = Module.findExportByName("dmcmnutils.dll", "DmGetAadDeviceToken")
Interceptor.attach(DmGetAadDeviceToken, {onLeave: function (args) {send("DmGetAadDeviceToken");}});

var DmGetAadDeviceTokenWithDiscovery = Module.findExportByName("dmcmnutils.dll", "DmGetAadDeviceTokenWithDiscovery")
Interceptor.attach(DmGetAadDeviceTokenWithDiscovery, {onLeave: function (args) {send("DmGetAadDeviceTokenWithDiscovery");}});

var DmGetAadEnrollmentResource = Module.findExportByName("dmcmnutils.dll", "DmGetAadEnrollmentResource")
Interceptor.attach(DmGetAadEnrollmentResource, {onLeave: function (args) {send("DmGetAadEnrollmentResource");}});

var DmGetAadUserToken = Module.findExportByName("dmcmnutils.dll", "DmGetAadUserToken")
Interceptor.attach(DmGetAadUserToken, {onLeave: function (args) {send("DmGetAadUserToken");}});

var DmGetActiveUserSid = Module.findExportByName("dmcmnutils.dll", "DmGetActiveUserSid")
Interceptor.attach(DmGetActiveUserSid, {onLeave: function (args) {send("DmGetActiveUserSid");}});

var DmGetCurrentUserSid = Module.findExportByName("dmcmnutils.dll", "DmGetCurrentUserSid")
Interceptor.attach(DmGetCurrentUserSid, {onLeave: function (args) {send("DmGetCurrentUserSid");}});

var DmGetCurrentUserToken = Module.findExportByName("dmcmnutils.dll", "DmGetCurrentUserToken")
Interceptor.attach(DmGetCurrentUserToken, {onLeave: function (args) {send("DmGetCurrentUserToken");}});

var DmGetEnrollmentTypeName = Module.findExportByName("dmcmnutils.dll", "DmGetEnrollmentTypeName")
Interceptor.attach(DmGetEnrollmentTypeName, {onLeave: function (args) {send("DmGetEnrollmentTypeName");}});

var DmGetEnrollmentTypeValue = Module.findExportByName("dmcmnutils.dll", "DmGetEnrollmentTypeValue")
Interceptor.attach(DmGetEnrollmentTypeValue, {onLeave: function (args) {send("DmGetEnrollmentTypeValue");}});

var DmGetFileSize = Module.findExportByName("dmcmnutils.dll", "DmGetFileSize")
Interceptor.attach(DmGetFileSize, {onLeave: function (args) {send("DmGetFileSize");}});

var DmGetIMEI = Module.findExportByName("dmcmnutils.dll", "DmGetIMEI")
Interceptor.attach(DmGetIMEI, {onLeave: function (args) {send("DmGetIMEI");}});

var DmGetSmbiosSerialNumber = Module.findExportByName("dmcmnutils.dll", "DmGetSmbiosSerialNumber")
Interceptor.attach(DmGetSmbiosSerialNumber, {onLeave: function (args) {send("DmGetSmbiosSerialNumber");}});

var DmGetTpmInfo = Module.findExportByName("dmcmnutils.dll", "DmGetTpmInfo")
Interceptor.attach(DmGetTpmInfo, {onLeave: function (args) {send("DmGetTpmInfo");}});

var DmGetTpmIsAlgorithmSupported = Module.findExportByName("dmcmnutils.dll", "DmGetTpmIsAlgorithmSupported")
Interceptor.attach(DmGetTpmIsAlgorithmSupported, {onLeave: function (args) {send("DmGetTpmIsAlgorithmSupported");}});

var DmGetTpmState = Module.findExportByName("dmcmnutils.dll", "DmGetTpmState")
Interceptor.attach(DmGetTpmState, {onLeave: function (args) {send("DmGetTpmState");}});

var DmGetUserEditFieldInput = Module.findExportByName("dmcmnutils.dll", "DmGetUserEditFieldInput")
Interceptor.attach(DmGetUserEditFieldInput, {onLeave: function (args) {send("DmGetUserEditFieldInput");}});

var DmGetUserPermission = Module.findExportByName("dmcmnutils.dll", "DmGetUserPermission")
Interceptor.attach(DmGetUserPermission, {onLeave: function (args) {send("DmGetUserPermission");}});

var DmGetUserPermissionAsync = Module.findExportByName("dmcmnutils.dll", "DmGetUserPermissionAsync")
Interceptor.attach(DmGetUserPermissionAsync, {onLeave: function (args) {send("DmGetUserPermissionAsync");}});

var DmGetUserSidFromToken = Module.findExportByName("dmcmnutils.dll", "DmGetUserSidFromToken")
Interceptor.attach(DmGetUserSidFromToken, {onLeave: function (args) {send("DmGetUserSidFromToken");}});

var DmGetUserTokenFromSid = Module.findExportByName("dmcmnutils.dll", "DmGetUserTokenFromSid")
Interceptor.attach(DmGetUserTokenFromSid, {onLeave: function (args) {send("DmGetUserTokenFromSid");}});

var DmImpersonate = Module.findExportByName("dmcmnutils.dll", "DmImpersonate")
Interceptor.attach(DmImpersonate, {onLeave: function (args) {send("DmImpersonate");}});

var DmInformUser = Module.findExportByName("dmcmnutils.dll", "DmInformUser")
Interceptor.attach(DmInformUser, {onLeave: function (args) {send("DmInformUser");}});

var DmInitializeContainer = Module.findExportByName("dmcmnutils.dll", "DmInitializeContainer")
Interceptor.attach(DmInitializeContainer, {onLeave: function (args) {send("DmInitializeContainer");}});

var DmInvalidateAadDeviceToken = Module.findExportByName("dmcmnutils.dll", "DmInvalidateAadDeviceToken")
Interceptor.attach(DmInvalidateAadDeviceToken, {onLeave: function (args) {send("DmInvalidateAadDeviceToken");}});

var DmInvalidateAadUserToken = Module.findExportByName("dmcmnutils.dll", "DmInvalidateAadUserToken")
Interceptor.attach(DmInvalidateAadUserToken, {onLeave: function (args) {send("DmInvalidateAadUserToken");}});

var DmIsDeviceConnected = Module.findExportByName("dmcmnutils.dll", "DmIsDeviceConnected")
Interceptor.attach(DmIsDeviceConnected, {onLeave: function (args) {send("DmIsDeviceConnected");}});

var DmIsDeviceRoaming = Module.findExportByName("dmcmnutils.dll", "DmIsDeviceRoaming")
Interceptor.attach(DmIsDeviceRoaming, {onLeave: function (args) {send("DmIsDeviceRoaming");}});

var DmIsRunningInSystemContext = Module.findExportByName("dmcmnutils.dll", "DmIsRunningInSystemContext")
Interceptor.attach(DmIsRunningInSystemContext, {onLeave: function (args) {send("DmIsRunningInSystemContext");}});

var DmIsSystemOrAdmin = Module.findExportByName("dmcmnutils.dll", "DmIsSystemOrAdmin")
Interceptor.attach(DmIsSystemOrAdmin, {onLeave: function (args) {send("DmIsSystemOrAdmin");}});

var DmIsSystemOrUserIsAdmin = Module.findExportByName("dmcmnutils.dll", "DmIsSystemOrUserIsAdmin")
Interceptor.attach(DmIsSystemOrUserIsAdmin, {onLeave: function (args) {send("DmIsSystemOrUserIsAdmin");}});

var DmIsTaskScheduled = Module.findExportByName("dmcmnutils.dll", "DmIsTaskScheduled")
Interceptor.attach(DmIsTaskScheduled, {onLeave: function (args) {send("DmIsTaskScheduled");}});

var DmIsTaskScheduledAndEnabled = Module.findExportByName("dmcmnutils.dll", "DmIsTaskScheduledAndEnabled")
Interceptor.attach(DmIsTaskScheduledAndEnabled, {onLeave: function (args) {send("DmIsTaskScheduledAndEnabled");}});

var DmMdmSign = Module.findExportByName("dmcmnutils.dll", "DmMdmSign")
Interceptor.attach(DmMdmSign, {onLeave: function (args) {send("DmMdmSign");}});

var DmPlayNotificationSound = Module.findExportByName("dmcmnutils.dll", "DmPlayNotificationSound")
Interceptor.attach(DmPlayNotificationSound, {onLeave: function (args) {send("DmPlayNotificationSound");}});

var DmRaiseToastNotification = Module.findExportByName("dmcmnutils.dll", "DmRaiseToastNotification")
Interceptor.attach(DmRaiseToastNotification, {onLeave: function (args) {send("DmRaiseToastNotification");}});

var DmRaiseToastNotificationAndWait = Module.findExportByName("dmcmnutils.dll", "DmRaiseToastNotificationAndWait")
Interceptor.attach(DmRaiseToastNotificationAndWait, {onLeave: function (args) {send("DmRaiseToastNotificationAndWait");}});

var DmRegisterRoamingNotification = Module.findExportByName("dmcmnutils.dll", "DmRegisterRoamingNotification")
Interceptor.attach(DmRegisterRoamingNotification, {onLeave: function (args) {send("DmRegisterRoamingNotification");}});

var DmReleaseContainer = Module.findExportByName("dmcmnutils.dll", "DmReleaseContainer")
Interceptor.attach(DmReleaseContainer, {onLeave: function (args) {send("DmReleaseContainer");}});

var DmRemoveToastNotification = Module.findExportByName("dmcmnutils.dll", "DmRemoveToastNotification")
Interceptor.attach(DmRemoveToastNotification, {onLeave: function (args) {send("DmRemoveToastNotification");}});

var DmRemoveToastNotificationByExecutablePath = Module.findExportByName("dmcmnutils.dll", "DmRemoveToastNotificationByExecutablePath")
Interceptor.attach(DmRemoveToastNotificationByExecutablePath, {onLeave: function (args) {send("DmRemoveToastNotificationByExecutablePath");}});

var DmRequestAadUserToken = Module.findExportByName("dmcmnutils.dll", "DmRequestAadUserToken")
Interceptor.attach(DmRequestAadUserToken, {onLeave: function (args) {send("DmRequestAadUserToken");}});

var DmRevertToSelf = Module.findExportByName("dmcmnutils.dll", "DmRevertToSelf")
Interceptor.attach(DmRevertToSelf, {onLeave: function (args) {send("DmRevertToSelf");}});

var DmRunTask = Module.findExportByName("dmcmnutils.dll", "DmRunTask")
Interceptor.attach(DmRunTask, {onLeave: function (args) {send("DmRunTask");}});

var DmSetWindowsAIKStorageLocation = Module.findExportByName("dmcmnutils.dll", "DmSetWindowsAIKStorageLocation")
Interceptor.attach(DmSetWindowsAIKStorageLocation, {onLeave: function (args) {send("DmSetWindowsAIKStorageLocation");}});

var DmStartContainerActivity = Module.findExportByName("dmcmnutils.dll", "DmStartContainerActivity")
Interceptor.attach(DmStartContainerActivity, {onLeave: function (args) {send("DmStartContainerActivity");}});

var DmStopContainerActivity = Module.findExportByName("dmcmnutils.dll", "DmStopContainerActivity")
Interceptor.attach(DmStopContainerActivity, {onLeave: function (args) {send("DmStopContainerActivity");}});

var DmStringCchPrintfAllStrings = Module.findExportByName("dmcmnutils.dll", "DmStringCchPrintfAllStrings")
Interceptor.attach(DmStringCchPrintfAllStrings, {onLeave: function (args) {send("DmStringCchPrintfAllStrings");}});

var DmUnregisterRoamingNotification = Module.findExportByName("dmcmnutils.dll", "DmUnregisterRoamingNotification")
Interceptor.attach(DmUnregisterRoamingNotification, {onLeave: function (args) {send("DmUnregisterRoamingNotification");}});

var DmWnfGetNotification = Module.findExportByName("dmcmnutils.dll", "DmWnfGetNotification")
Interceptor.attach(DmWnfGetNotification, {onLeave: function (args) {send("DmWnfGetNotification");}});

var DmWnfPublish = Module.findExportByName("dmcmnutils.dll", "DmWnfPublish")
Interceptor.attach(DmWnfPublish, {onLeave: function (args) {send("DmWnfPublish");}});

var DmWnfQuery = Module.findExportByName("dmcmnutils.dll", "DmWnfQuery")
Interceptor.attach(DmWnfQuery, {onLeave: function (args) {send("DmWnfQuery");}});

var EncodeBase64 = Module.findExportByName("dmcmnutils.dll", "EncodeBase64")
Interceptor.attach(EncodeBase64, {onLeave: function (args) {send("EncodeBase64");}});

var EncodeBase64W = Module.findExportByName("dmcmnutils.dll", "EncodeBase64W")
Interceptor.attach(EncodeBase64W, {onLeave: function (args) {send("EncodeBase64W");}});

var EscapeStringW = Module.findExportByName("dmcmnutils.dll", "EscapeStringW")
Interceptor.attach(EscapeStringW, {onLeave: function (args) {send("EscapeStringW");}});

var GetHeader = Module.findExportByName("dmcmnutils.dll", "GetHeader")
Interceptor.attach(GetHeader, {onLeave: function (args) {send("GetHeader");}});

var GetICCID = Module.findExportByName("dmcmnutils.dll", "GetICCID")
Interceptor.attach(GetICCID, {onLeave: function (args) {send("GetICCID");}});

var GetIMEI = Module.findExportByName("dmcmnutils.dll", "GetIMEI")
Interceptor.attach(GetIMEI, {onLeave: function (args) {send("GetIMEI");}});

var GetIMSI = Module.findExportByName("dmcmnutils.dll", "GetIMSI")
Interceptor.attach(GetIMSI, {onLeave: function (args) {send("GetIMSI");}});

var GetIMSIByIccID = Module.findExportByName("dmcmnutils.dll", "GetIMSIByIccID")
Interceptor.attach(GetIMSIByIccID, {onLeave: function (args) {send("GetIMSIByIccID");}});

var GetPGListRegKeyName = Module.findExportByName("dmcmnutils.dll", "GetPGListRegKeyName")
Interceptor.attach(GetPGListRegKeyName, {onLeave: function (args) {send("GetPGListRegKeyName");}});

var GetPhoneNumber = Module.findExportByName("dmcmnutils.dll", "GetPhoneNumber")
Interceptor.attach(GetPhoneNumber, {onLeave: function (args) {send("GetPhoneNumber");}});

var GetPhoneUID = Module.findExportByName("dmcmnutils.dll", "GetPhoneUID")
Interceptor.attach(GetPhoneUID, {onLeave: function (args) {send("GetPhoneUID");}});

var Hash_Create = Module.findExportByName("dmcmnutils.dll", "Hash_Create")
Interceptor.attach(Hash_Create, {onLeave: function (args) {send("Hash_Create");}});

var Hash_Delete = Module.findExportByName("dmcmnutils.dll", "Hash_Delete")
Interceptor.attach(Hash_Delete, {onLeave: function (args) {send("Hash_Delete");}});

var Hash_Destroy = Module.findExportByName("dmcmnutils.dll", "Hash_Destroy")
Interceptor.attach(Hash_Destroy, {onLeave: function (args) {send("Hash_Destroy");}});

var Hash_DestroyCallback = Module.findExportByName("dmcmnutils.dll", "Hash_DestroyCallback")
Interceptor.attach(Hash_DestroyCallback, {onLeave: function (args) {send("Hash_DestroyCallback");}});

var Hash_EnumCallback = Module.findExportByName("dmcmnutils.dll", "Hash_EnumCallback")
Interceptor.attach(Hash_EnumCallback, {onLeave: function (args) {send("Hash_EnumCallback");}});

var Hash_Get = Module.findExportByName("dmcmnutils.dll", "Hash_Get")
Interceptor.attach(Hash_Get, {onLeave: function (args) {send("Hash_Get");}});

var Hash_Insert = Module.findExportByName("dmcmnutils.dll", "Hash_Insert")
Interceptor.attach(Hash_Insert, {onLeave: function (args) {send("Hash_Insert");}});

var Hash_SetBucketThreshold = Module.findExportByName("dmcmnutils.dll", "Hash_SetBucketThreshold")
Interceptor.attach(Hash_SetBucketThreshold, {onLeave: function (args) {send("Hash_SetBucketThreshold");}});

var HexStringToBinary = Module.findExportByName("dmcmnutils.dll", "HexStringToBinary")
Interceptor.attach(HexStringToBinary, {onLeave: function (args) {send("HexStringToBinary");}});

var InitializeCVForLocalConfigSession = Module.findExportByName("dmcmnutils.dll", "InitializeCVForLocalConfigSession")
Interceptor.attach(InitializeCVForLocalConfigSession, {onLeave: function (args) {send("InitializeCVForLocalConfigSession");}});

var InvStrCmpIW = Module.findExportByName("dmcmnutils.dll", "InvStrCmpIW")
Interceptor.attach(InvStrCmpIW, {onLeave: function (args) {send("InvStrCmpIW");}});

var InvStrCmpNIW = Module.findExportByName("dmcmnutils.dll", "InvStrCmpNIW")
Interceptor.attach(InvStrCmpNIW, {onLeave: function (args) {send("InvStrCmpNIW");}});

var InvStrCmpNW = Module.findExportByName("dmcmnutils.dll", "InvStrCmpNW")
Interceptor.attach(InvStrCmpNW, {onLeave: function (args) {send("InvStrCmpNW");}});

var InvStrCmpW = Module.findExportByName("dmcmnutils.dll", "InvStrCmpW")
Interceptor.attach(InvStrCmpW, {onLeave: function (args) {send("InvStrCmpW");}});

var IsDesktopSku = Module.findExportByName("dmcmnutils.dll", "IsDesktopSku")
Interceptor.attach(IsDesktopSku, {onLeave: function (args) {send("IsDesktopSku");}});

var IsServerVersionOrAbove = Module.findExportByName("dmcmnutils.dll", "IsServerVersionOrAbove")
Interceptor.attach(IsServerVersionOrAbove, {onLeave: function (args) {send("IsServerVersionOrAbove");}});

var IsWvdFeatureAllowed = Module.findExportByName("dmcmnutils.dll", "IsWvdFeatureAllowed")
Interceptor.attach(IsWvdFeatureAllowed, {onLeave: function (args) {send("IsWvdFeatureAllowed");}});

var IsWvdSku = Module.findExportByName("dmcmnutils.dll", "IsWvdSku")
Interceptor.attach(IsWvdSku, {onLeave: function (args) {send("IsWvdSku");}});

var MBToUnicode = Module.findExportByName("dmcmnutils.dll", "MBToUnicode")
Interceptor.attach(MBToUnicode, {onLeave: function (args) {send("MBToUnicode");}});

var OmDmRegistryAllocAndGetString = Module.findExportByName("dmcmnutils.dll", "OmDmRegistryAllocAndGetString")
Interceptor.attach(OmDmRegistryAllocAndGetString, {onLeave: function (args) {send("OmDmRegistryAllocAndGetString");}});

var OmaDmRegistryDeleteValue = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryDeleteValue")
Interceptor.attach(OmaDmRegistryDeleteValue, {onLeave: function (args) {send("OmaDmRegistryDeleteValue");}});

var OmaDmRegistryGetAllSubKeys = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryGetAllSubKeys")
Interceptor.attach(OmaDmRegistryGetAllSubKeys, {onLeave: function (args) {send("OmaDmRegistryGetAllSubKeys");}});

var OmaDmRegistryGetAllValues = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryGetAllValues")
Interceptor.attach(OmaDmRegistryGetAllValues, {onLeave: function (args) {send("OmaDmRegistryGetAllValues");}});

var OmaDmRegistryGetBinary = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryGetBinary")
Interceptor.attach(OmaDmRegistryGetBinary, {onLeave: function (args) {send("OmaDmRegistryGetBinary");}});

var OmaDmRegistryGetDWORD = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryGetDWORD")
Interceptor.attach(OmaDmRegistryGetDWORD, {onLeave: function (args) {send("OmaDmRegistryGetDWORD");}});

var OmaDmRegistryGetString = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryGetString")
Interceptor.attach(OmaDmRegistryGetString, {onLeave: function (args) {send("OmaDmRegistryGetString");}});

var OmaDmRegistryRetrieveCurrentUsersHKCU = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistryRetrieveCurrentUsersHKCU")
Interceptor.attach(OmaDmRegistryRetrieveCurrentUsersHKCU, {onLeave: function (args) {send("OmaDmRegistryRetrieveCurrentUsersHKCU");}});

var OmaDmRegistrySetBinary = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistrySetBinary")
Interceptor.attach(OmaDmRegistrySetBinary, {onLeave: function (args) {send("OmaDmRegistrySetBinary");}});

var OmaDmRegistrySetDWORD = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistrySetDWORD")
Interceptor.attach(OmaDmRegistrySetDWORD, {onLeave: function (args) {send("OmaDmRegistrySetDWORD");}});

var OmaDmRegistrySetString = Module.findExportByName("dmcmnutils.dll", "OmaDmRegistrySetString")
Interceptor.attach(OmaDmRegistrySetString, {onLeave: function (args) {send("OmaDmRegistrySetString");}});

var QueryPolicy = Module.findExportByName("dmcmnutils.dll", "QueryPolicy")
Interceptor.attach(QueryPolicy, {onLeave: function (args) {send("QueryPolicy");}});

var SafeMultiByteToWideChar = Module.findExportByName("dmcmnutils.dll", "SafeMultiByteToWideChar")
Interceptor.attach(SafeMultiByteToWideChar, {onLeave: function (args) {send("SafeMultiByteToWideChar");}});

var SafeStringToDword = Module.findExportByName("dmcmnutils.dll", "SafeStringToDword")
Interceptor.attach(SafeStringToDword, {onLeave: function (args) {send("SafeStringToDword");}});

var SafeWideCharToMultiByte = Module.findExportByName("dmcmnutils.dll", "SafeWideCharToMultiByte")
Interceptor.attach(SafeWideCharToMultiByte, {onLeave: function (args) {send("SafeWideCharToMultiByte");}});

var SetConnectionPriority = Module.findExportByName("dmcmnutils.dll", "SetConnectionPriority")
Interceptor.attach(SetConnectionPriority, {onLeave: function (args) {send("SetConnectionPriority");}});

var SetPolicy = Module.findExportByName("dmcmnutils.dll", "SetPolicy")
Interceptor.attach(SetPolicy, {onLeave: function (args) {send("SetPolicy");}});

var UnicodeToMB = Module.findExportByName("dmcmnutils.dll", "UnicodeToMB")
Interceptor.attach(UnicodeToMB, {onLeave: function (args) {send("UnicodeToMB");}});

