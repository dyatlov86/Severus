var BestMatchInTable = Module.findExportByName("rtm.dll", "BestMatchInTable")
Interceptor.attach(BestMatchInTable, {onLeave: function (args) {send("BestMatchInTable");}});

var CheckTable = Module.findExportByName("rtm.dll", "CheckTable")
Interceptor.attach(CheckTable, {onLeave: function (args) {send("CheckTable");}});

var CreateTable = Module.findExportByName("rtm.dll", "CreateTable")
Interceptor.attach(CreateTable, {onLeave: function (args) {send("CreateTable");}});

var DeleteFromTable = Module.findExportByName("rtm.dll", "DeleteFromTable")
Interceptor.attach(DeleteFromTable, {onLeave: function (args) {send("DeleteFromTable");}});

var DestroyTable = Module.findExportByName("rtm.dll", "DestroyTable")
Interceptor.attach(DestroyTable, {onLeave: function (args) {send("DestroyTable");}});

var DumpTable = Module.findExportByName("rtm.dll", "DumpTable")
Interceptor.attach(DumpTable, {onLeave: function (args) {send("DumpTable");}});

var EnumOverTable = Module.findExportByName("rtm.dll", "EnumOverTable")
Interceptor.attach(EnumOverTable, {onLeave: function (args) {send("EnumOverTable");}});

var InsertIntoTable = Module.findExportByName("rtm.dll", "InsertIntoTable")
Interceptor.attach(InsertIntoTable, {onLeave: function (args) {send("InsertIntoTable");}});

var MgmAddGroupMembershipEntry = Module.findExportByName("rtm.dll", "MgmAddGroupMembershipEntry")
Interceptor.attach(MgmAddGroupMembershipEntry, {onLeave: function (args) {send("MgmAddGroupMembershipEntry");}});

var MgmDeInitialize = Module.findExportByName("rtm.dll", "MgmDeInitialize")
Interceptor.attach(MgmDeInitialize, {onLeave: function (args) {send("MgmDeInitialize");}});

var MgmDeRegisterMProtocol = Module.findExportByName("rtm.dll", "MgmDeRegisterMProtocol")
Interceptor.attach(MgmDeRegisterMProtocol, {onLeave: function (args) {send("MgmDeRegisterMProtocol");}});

var MgmDeleteGroupMembershipEntry = Module.findExportByName("rtm.dll", "MgmDeleteGroupMembershipEntry")
Interceptor.attach(MgmDeleteGroupMembershipEntry, {onLeave: function (args) {send("MgmDeleteGroupMembershipEntry");}});

var MgmGetFirstMfe = Module.findExportByName("rtm.dll", "MgmGetFirstMfe")
Interceptor.attach(MgmGetFirstMfe, {onLeave: function (args) {send("MgmGetFirstMfe");}});

var MgmGetFirstMfeStats = Module.findExportByName("rtm.dll", "MgmGetFirstMfeStats")
Interceptor.attach(MgmGetFirstMfeStats, {onLeave: function (args) {send("MgmGetFirstMfeStats");}});

var MgmGetMfe = Module.findExportByName("rtm.dll", "MgmGetMfe")
Interceptor.attach(MgmGetMfe, {onLeave: function (args) {send("MgmGetMfe");}});

var MgmGetMfeStats = Module.findExportByName("rtm.dll", "MgmGetMfeStats")
Interceptor.attach(MgmGetMfeStats, {onLeave: function (args) {send("MgmGetMfeStats");}});

var MgmGetNextMfe = Module.findExportByName("rtm.dll", "MgmGetNextMfe")
Interceptor.attach(MgmGetNextMfe, {onLeave: function (args) {send("MgmGetNextMfe");}});

var MgmGetNextMfeStats = Module.findExportByName("rtm.dll", "MgmGetNextMfeStats")
Interceptor.attach(MgmGetNextMfeStats, {onLeave: function (args) {send("MgmGetNextMfeStats");}});

var MgmGetProtocolOnInterface = Module.findExportByName("rtm.dll", "MgmGetProtocolOnInterface")
Interceptor.attach(MgmGetProtocolOnInterface, {onLeave: function (args) {send("MgmGetProtocolOnInterface");}});

var MgmGroupEnumerationEnd = Module.findExportByName("rtm.dll", "MgmGroupEnumerationEnd")
Interceptor.attach(MgmGroupEnumerationEnd, {onLeave: function (args) {send("MgmGroupEnumerationEnd");}});

var MgmGroupEnumerationGetNext = Module.findExportByName("rtm.dll", "MgmGroupEnumerationGetNext")
Interceptor.attach(MgmGroupEnumerationGetNext, {onLeave: function (args) {send("MgmGroupEnumerationGetNext");}});

var MgmGroupEnumerationStart = Module.findExportByName("rtm.dll", "MgmGroupEnumerationStart")
Interceptor.attach(MgmGroupEnumerationStart, {onLeave: function (args) {send("MgmGroupEnumerationStart");}});

var MgmInitialize = Module.findExportByName("rtm.dll", "MgmInitialize")
Interceptor.attach(MgmInitialize, {onLeave: function (args) {send("MgmInitialize");}});

var MgmRegisterMProtocol = Module.findExportByName("rtm.dll", "MgmRegisterMProtocol")
Interceptor.attach(MgmRegisterMProtocol, {onLeave: function (args) {send("MgmRegisterMProtocol");}});

var MgmReleaseInterfaceOwnership = Module.findExportByName("rtm.dll", "MgmReleaseInterfaceOwnership")
Interceptor.attach(MgmReleaseInterfaceOwnership, {onLeave: function (args) {send("MgmReleaseInterfaceOwnership");}});

var MgmTakeInterfaceOwnership = Module.findExportByName("rtm.dll", "MgmTakeInterfaceOwnership")
Interceptor.attach(MgmTakeInterfaceOwnership, {onLeave: function (args) {send("MgmTakeInterfaceOwnership");}});

var NextMatchInTable = Module.findExportByName("rtm.dll", "NextMatchInTable")
Interceptor.attach(NextMatchInTable, {onLeave: function (args) {send("NextMatchInTable");}});

var RtmAddNextHop = Module.findExportByName("rtm.dll", "RtmAddNextHop")
Interceptor.attach(RtmAddNextHop, {onLeave: function (args) {send("RtmAddNextHop");}});

var RtmAddRoute = Module.findExportByName("rtm.dll", "RtmAddRoute")
Interceptor.attach(RtmAddRoute, {onLeave: function (args) {send("RtmAddRoute");}});

var RtmAddRouteToDest = Module.findExportByName("rtm.dll", "RtmAddRouteToDest")
Interceptor.attach(RtmAddRouteToDest, {onLeave: function (args) {send("RtmAddRouteToDest");}});

var RtmBlockConvertRoutesToStatic = Module.findExportByName("rtm.dll", "RtmBlockConvertRoutesToStatic")
Interceptor.attach(RtmBlockConvertRoutesToStatic, {onLeave: function (args) {send("RtmBlockConvertRoutesToStatic");}});

var RtmBlockDeleteRoutes = Module.findExportByName("rtm.dll", "RtmBlockDeleteRoutes")
Interceptor.attach(RtmBlockDeleteRoutes, {onLeave: function (args) {send("RtmBlockDeleteRoutes");}});

var RtmBlockMethods = Module.findExportByName("rtm.dll", "RtmBlockMethods")
Interceptor.attach(RtmBlockMethods, {onLeave: function (args) {send("RtmBlockMethods");}});

var RtmBlockSetRouteEnable = Module.findExportByName("rtm.dll", "RtmBlockSetRouteEnable")
Interceptor.attach(RtmBlockSetRouteEnable, {onLeave: function (args) {send("RtmBlockSetRouteEnable");}});

var RtmCleanupInstances = Module.findExportByName("rtm.dll", "RtmCleanupInstances")
Interceptor.attach(RtmCleanupInstances, {onLeave: function (args) {send("RtmCleanupInstances");}});

var RtmCloseEnumerationHandle = Module.findExportByName("rtm.dll", "RtmCloseEnumerationHandle")
Interceptor.attach(RtmCloseEnumerationHandle, {onLeave: function (args) {send("RtmCloseEnumerationHandle");}});

var RtmConvertIpv6AddressAndLengthToNetAddress = Module.findExportByName("rtm.dll", "RtmConvertIpv6AddressAndLengthToNetAddress")
Interceptor.attach(RtmConvertIpv6AddressAndLengthToNetAddress, {onLeave: function (args) {send("RtmConvertIpv6AddressAndLengthToNetAddress");}});

var RtmConvertNetAddressToIpv6AddressAndLength = Module.findExportByName("rtm.dll", "RtmConvertNetAddressToIpv6AddressAndLength")
Interceptor.attach(RtmConvertNetAddressToIpv6AddressAndLength, {onLeave: function (args) {send("RtmConvertNetAddressToIpv6AddressAndLength");}});

var RtmCreateBestRouteEnum = Module.findExportByName("rtm.dll", "RtmCreateBestRouteEnum")
Interceptor.attach(RtmCreateBestRouteEnum, {onLeave: function (args) {send("RtmCreateBestRouteEnum");}});

var RtmCreateDestEnum = Module.findExportByName("rtm.dll", "RtmCreateDestEnum")
Interceptor.attach(RtmCreateDestEnum, {onLeave: function (args) {send("RtmCreateDestEnum");}});

var RtmCreateEnumerationHandle = Module.findExportByName("rtm.dll", "RtmCreateEnumerationHandle")
Interceptor.attach(RtmCreateEnumerationHandle, {onLeave: function (args) {send("RtmCreateEnumerationHandle");}});

var RtmCreateNextHopEnum = Module.findExportByName("rtm.dll", "RtmCreateNextHopEnum")
Interceptor.attach(RtmCreateNextHopEnum, {onLeave: function (args) {send("RtmCreateNextHopEnum");}});

var RtmCreateRouteEnum = Module.findExportByName("rtm.dll", "RtmCreateRouteEnum")
Interceptor.attach(RtmCreateRouteEnum, {onLeave: function (args) {send("RtmCreateRouteEnum");}});

var RtmCreateRouteList = Module.findExportByName("rtm.dll", "RtmCreateRouteList")
Interceptor.attach(RtmCreateRouteList, {onLeave: function (args) {send("RtmCreateRouteList");}});

var RtmCreateRouteListEnum = Module.findExportByName("rtm.dll", "RtmCreateRouteListEnum")
Interceptor.attach(RtmCreateRouteListEnum, {onLeave: function (args) {send("RtmCreateRouteListEnum");}});

var RtmDeleteEnumHandle = Module.findExportByName("rtm.dll", "RtmDeleteEnumHandle")
Interceptor.attach(RtmDeleteEnumHandle, {onLeave: function (args) {send("RtmDeleteEnumHandle");}});

var RtmDeleteNextHop = Module.findExportByName("rtm.dll", "RtmDeleteNextHop")
Interceptor.attach(RtmDeleteNextHop, {onLeave: function (args) {send("RtmDeleteNextHop");}});

var RtmDeleteRoute = Module.findExportByName("rtm.dll", "RtmDeleteRoute")
Interceptor.attach(RtmDeleteRoute, {onLeave: function (args) {send("RtmDeleteRoute");}});

var RtmDeleteRouteList = Module.findExportByName("rtm.dll", "RtmDeleteRouteList")
Interceptor.attach(RtmDeleteRouteList, {onLeave: function (args) {send("RtmDeleteRouteList");}});

var RtmDeleteRouteTable = Module.findExportByName("rtm.dll", "RtmDeleteRouteTable")
Interceptor.attach(RtmDeleteRouteTable, {onLeave: function (args) {send("RtmDeleteRouteTable");}});

var RtmDeleteRouteToDest = Module.findExportByName("rtm.dll", "RtmDeleteRouteToDest")
Interceptor.attach(RtmDeleteRouteToDest, {onLeave: function (args) {send("RtmDeleteRouteToDest");}});

var RtmDequeueRouteChangeMessage = Module.findExportByName("rtm.dll", "RtmDequeueRouteChangeMessage")
Interceptor.attach(RtmDequeueRouteChangeMessage, {onLeave: function (args) {send("RtmDequeueRouteChangeMessage");}});

var RtmDereferenceHandles = Module.findExportByName("rtm.dll", "RtmDereferenceHandles")
Interceptor.attach(RtmDereferenceHandles, {onLeave: function (args) {send("RtmDereferenceHandles");}});

var RtmDeregisterClient = Module.findExportByName("rtm.dll", "RtmDeregisterClient")
Interceptor.attach(RtmDeregisterClient, {onLeave: function (args) {send("RtmDeregisterClient");}});

var RtmDeregisterEntity = Module.findExportByName("rtm.dll", "RtmDeregisterEntity")
Interceptor.attach(RtmDeregisterEntity, {onLeave: function (args) {send("RtmDeregisterEntity");}});

var RtmDeregisterFromChangeNotification = Module.findExportByName("rtm.dll", "RtmDeregisterFromChangeNotification")
Interceptor.attach(RtmDeregisterFromChangeNotification, {onLeave: function (args) {send("RtmDeregisterFromChangeNotification");}});

var RtmEnumerateGetNextRoute = Module.findExportByName("rtm.dll", "RtmEnumerateGetNextRoute")
Interceptor.attach(RtmEnumerateGetNextRoute, {onLeave: function (args) {send("RtmEnumerateGetNextRoute");}});

var RtmFindNextHop = Module.findExportByName("rtm.dll", "RtmFindNextHop")
Interceptor.attach(RtmFindNextHop, {onLeave: function (args) {send("RtmFindNextHop");}});

var RtmGetAddressFamilyInfo = Module.findExportByName("rtm.dll", "RtmGetAddressFamilyInfo")
Interceptor.attach(RtmGetAddressFamilyInfo, {onLeave: function (args) {send("RtmGetAddressFamilyInfo");}});

var RtmGetChangeStatus = Module.findExportByName("rtm.dll", "RtmGetChangeStatus")
Interceptor.attach(RtmGetChangeStatus, {onLeave: function (args) {send("RtmGetChangeStatus");}});

var RtmGetChangedDests = Module.findExportByName("rtm.dll", "RtmGetChangedDests")
Interceptor.attach(RtmGetChangedDests, {onLeave: function (args) {send("RtmGetChangedDests");}});

var RtmGetDestInfo = Module.findExportByName("rtm.dll", "RtmGetDestInfo")
Interceptor.attach(RtmGetDestInfo, {onLeave: function (args) {send("RtmGetDestInfo");}});

var RtmGetEntityInfo = Module.findExportByName("rtm.dll", "RtmGetEntityInfo")
Interceptor.attach(RtmGetEntityInfo, {onLeave: function (args) {send("RtmGetEntityInfo");}});

var RtmGetEntityMethods = Module.findExportByName("rtm.dll", "RtmGetEntityMethods")
Interceptor.attach(RtmGetEntityMethods, {onLeave: function (args) {send("RtmGetEntityMethods");}});

var RtmGetEnumBestRoutes = Module.findExportByName("rtm.dll", "RtmGetEnumBestRoutes")
Interceptor.attach(RtmGetEnumBestRoutes, {onLeave: function (args) {send("RtmGetEnumBestRoutes");}});

var RtmGetEnumDests = Module.findExportByName("rtm.dll", "RtmGetEnumDests")
Interceptor.attach(RtmGetEnumDests, {onLeave: function (args) {send("RtmGetEnumDests");}});

var RtmGetEnumNextHops = Module.findExportByName("rtm.dll", "RtmGetEnumNextHops")
Interceptor.attach(RtmGetEnumNextHops, {onLeave: function (args) {send("RtmGetEnumNextHops");}});

var RtmGetEnumRoutes = Module.findExportByName("rtm.dll", "RtmGetEnumRoutes")
Interceptor.attach(RtmGetEnumRoutes, {onLeave: function (args) {send("RtmGetEnumRoutes");}});

var RtmGetExactMatchDestination = Module.findExportByName("rtm.dll", "RtmGetExactMatchDestination")
Interceptor.attach(RtmGetExactMatchDestination, {onLeave: function (args) {send("RtmGetExactMatchDestination");}});

var RtmGetExactMatchRoute = Module.findExportByName("rtm.dll", "RtmGetExactMatchRoute")
Interceptor.attach(RtmGetExactMatchRoute, {onLeave: function (args) {send("RtmGetExactMatchRoute");}});

var RtmGetFirstRoute = Module.findExportByName("rtm.dll", "RtmGetFirstRoute")
Interceptor.attach(RtmGetFirstRoute, {onLeave: function (args) {send("RtmGetFirstRoute");}});

var RtmGetInstanceInfo = Module.findExportByName("rtm.dll", "RtmGetInstanceInfo")
Interceptor.attach(RtmGetInstanceInfo, {onLeave: function (args) {send("RtmGetInstanceInfo");}});

var RtmGetInstances = Module.findExportByName("rtm.dll", "RtmGetInstances")
Interceptor.attach(RtmGetInstances, {onLeave: function (args) {send("RtmGetInstances");}});

var RtmGetLessSpecificDestination = Module.findExportByName("rtm.dll", "RtmGetLessSpecificDestination")
Interceptor.attach(RtmGetLessSpecificDestination, {onLeave: function (args) {send("RtmGetLessSpecificDestination");}});

var RtmGetListEnumRoutes = Module.findExportByName("rtm.dll", "RtmGetListEnumRoutes")
Interceptor.attach(RtmGetListEnumRoutes, {onLeave: function (args) {send("RtmGetListEnumRoutes");}});

var RtmGetMostSpecificDestination = Module.findExportByName("rtm.dll", "RtmGetMostSpecificDestination")
Interceptor.attach(RtmGetMostSpecificDestination, {onLeave: function (args) {send("RtmGetMostSpecificDestination");}});

var RtmGetNetworkCount = Module.findExportByName("rtm.dll", "RtmGetNetworkCount")
Interceptor.attach(RtmGetNetworkCount, {onLeave: function (args) {send("RtmGetNetworkCount");}});

var RtmGetNextHopInfo = Module.findExportByName("rtm.dll", "RtmGetNextHopInfo")
Interceptor.attach(RtmGetNextHopInfo, {onLeave: function (args) {send("RtmGetNextHopInfo");}});

var RtmGetNextHopPointer = Module.findExportByName("rtm.dll", "RtmGetNextHopPointer")
Interceptor.attach(RtmGetNextHopPointer, {onLeave: function (args) {send("RtmGetNextHopPointer");}});

var RtmGetNextRoute = Module.findExportByName("rtm.dll", "RtmGetNextRoute")
Interceptor.attach(RtmGetNextRoute, {onLeave: function (args) {send("RtmGetNextRoute");}});

var RtmGetOpaqueInformationPointer = Module.findExportByName("rtm.dll", "RtmGetOpaqueInformationPointer")
Interceptor.attach(RtmGetOpaqueInformationPointer, {onLeave: function (args) {send("RtmGetOpaqueInformationPointer");}});

var RtmGetRegisteredEntities = Module.findExportByName("rtm.dll", "RtmGetRegisteredEntities")
Interceptor.attach(RtmGetRegisteredEntities, {onLeave: function (args) {send("RtmGetRegisteredEntities");}});

var RtmGetRouteAge = Module.findExportByName("rtm.dll", "RtmGetRouteAge")
Interceptor.attach(RtmGetRouteAge, {onLeave: function (args) {send("RtmGetRouteAge");}});

var RtmGetRouteInfo = Module.findExportByName("rtm.dll", "RtmGetRouteInfo")
Interceptor.attach(RtmGetRouteInfo, {onLeave: function (args) {send("RtmGetRouteInfo");}});

var RtmGetRoutePointer = Module.findExportByName("rtm.dll", "RtmGetRoutePointer")
Interceptor.attach(RtmGetRoutePointer, {onLeave: function (args) {send("RtmGetRoutePointer");}});

var RtmHoldDestination = Module.findExportByName("rtm.dll", "RtmHoldDestination")
Interceptor.attach(RtmHoldDestination, {onLeave: function (args) {send("RtmHoldDestination");}});

var RtmIgnoreChangedDests = Module.findExportByName("rtm.dll", "RtmIgnoreChangedDests")
Interceptor.attach(RtmIgnoreChangedDests, {onLeave: function (args) {send("RtmIgnoreChangedDests");}});

var RtmInsertInRouteList = Module.findExportByName("rtm.dll", "RtmInsertInRouteList")
Interceptor.attach(RtmInsertInRouteList, {onLeave: function (args) {send("RtmInsertInRouteList");}});

var RtmInvokeMethod = Module.findExportByName("rtm.dll", "RtmInvokeMethod")
Interceptor.attach(RtmInvokeMethod, {onLeave: function (args) {send("RtmInvokeMethod");}});

var RtmIsBestRoute = Module.findExportByName("rtm.dll", "RtmIsBestRoute")
Interceptor.attach(RtmIsBestRoute, {onLeave: function (args) {send("RtmIsBestRoute");}});

var RtmIsMarkedForChangeNotification = Module.findExportByName("rtm.dll", "RtmIsMarkedForChangeNotification")
Interceptor.attach(RtmIsMarkedForChangeNotification, {onLeave: function (args) {send("RtmIsMarkedForChangeNotification");}});

var RtmIsRoute = Module.findExportByName("rtm.dll", "RtmIsRoute")
Interceptor.attach(RtmIsRoute, {onLeave: function (args) {send("RtmIsRoute");}});

var RtmLockDestination = Module.findExportByName("rtm.dll", "RtmLockDestination")
Interceptor.attach(RtmLockDestination, {onLeave: function (args) {send("RtmLockDestination");}});

var RtmLockNextHop = Module.findExportByName("rtm.dll", "RtmLockNextHop")
Interceptor.attach(RtmLockNextHop, {onLeave: function (args) {send("RtmLockNextHop");}});

var RtmLockRoute = Module.findExportByName("rtm.dll", "RtmLockRoute")
Interceptor.attach(RtmLockRoute, {onLeave: function (args) {send("RtmLockRoute");}});

var RtmLookupIPDestination = Module.findExportByName("rtm.dll", "RtmLookupIPDestination")
Interceptor.attach(RtmLookupIPDestination, {onLeave: function (args) {send("RtmLookupIPDestination");}});

var RtmMarkDestForChangeNotification = Module.findExportByName("rtm.dll", "RtmMarkDestForChangeNotification")
Interceptor.attach(RtmMarkDestForChangeNotification, {onLeave: function (args) {send("RtmMarkDestForChangeNotification");}});

var RtmReadAddressFamilyConfig = Module.findExportByName("rtm.dll", "RtmReadAddressFamilyConfig")
Interceptor.attach(RtmReadAddressFamilyConfig, {onLeave: function (args) {send("RtmReadAddressFamilyConfig");}});

var RtmReadInstanceConfig = Module.findExportByName("rtm.dll", "RtmReadInstanceConfig")
Interceptor.attach(RtmReadInstanceConfig, {onLeave: function (args) {send("RtmReadInstanceConfig");}});

var RtmReferenceHandles = Module.findExportByName("rtm.dll", "RtmReferenceHandles")
Interceptor.attach(RtmReferenceHandles, {onLeave: function (args) {send("RtmReferenceHandles");}});

var RtmRegisterClient = Module.findExportByName("rtm.dll", "RtmRegisterClient")
Interceptor.attach(RtmRegisterClient, {onLeave: function (args) {send("RtmRegisterClient");}});

var RtmRegisterEntity = Module.findExportByName("rtm.dll", "RtmRegisterEntity")
Interceptor.attach(RtmRegisterEntity, {onLeave: function (args) {send("RtmRegisterEntity");}});

var RtmRegisterForChangeNotification = Module.findExportByName("rtm.dll", "RtmRegisterForChangeNotification")
Interceptor.attach(RtmRegisterForChangeNotification, {onLeave: function (args) {send("RtmRegisterForChangeNotification");}});

var RtmReleaseChangedDests = Module.findExportByName("rtm.dll", "RtmReleaseChangedDests")
Interceptor.attach(RtmReleaseChangedDests, {onLeave: function (args) {send("RtmReleaseChangedDests");}});

var RtmReleaseDestInfo = Module.findExportByName("rtm.dll", "RtmReleaseDestInfo")
Interceptor.attach(RtmReleaseDestInfo, {onLeave: function (args) {send("RtmReleaseDestInfo");}});

var RtmReleaseDests = Module.findExportByName("rtm.dll", "RtmReleaseDests")
Interceptor.attach(RtmReleaseDests, {onLeave: function (args) {send("RtmReleaseDests");}});

var RtmReleaseEntities = Module.findExportByName("rtm.dll", "RtmReleaseEntities")
Interceptor.attach(RtmReleaseEntities, {onLeave: function (args) {send("RtmReleaseEntities");}});

var RtmReleaseEntityInfo = Module.findExportByName("rtm.dll", "RtmReleaseEntityInfo")
Interceptor.attach(RtmReleaseEntityInfo, {onLeave: function (args) {send("RtmReleaseEntityInfo");}});

var RtmReleaseNextHopInfo = Module.findExportByName("rtm.dll", "RtmReleaseNextHopInfo")
Interceptor.attach(RtmReleaseNextHopInfo, {onLeave: function (args) {send("RtmReleaseNextHopInfo");}});

var RtmReleaseNextHops = Module.findExportByName("rtm.dll", "RtmReleaseNextHops")
Interceptor.attach(RtmReleaseNextHops, {onLeave: function (args) {send("RtmReleaseNextHops");}});

var RtmReleaseRouteInfo = Module.findExportByName("rtm.dll", "RtmReleaseRouteInfo")
Interceptor.attach(RtmReleaseRouteInfo, {onLeave: function (args) {send("RtmReleaseRouteInfo");}});

var RtmReleaseRoutes = Module.findExportByName("rtm.dll", "RtmReleaseRoutes")
Interceptor.attach(RtmReleaseRoutes, {onLeave: function (args) {send("RtmReleaseRoutes");}});

var RtmUpdateAndUnlockRoute = Module.findExportByName("rtm.dll", "RtmUpdateAndUnlockRoute")
Interceptor.attach(RtmUpdateAndUnlockRoute, {onLeave: function (args) {send("RtmUpdateAndUnlockRoute");}});

var RtmWriteAddressFamilyConfig = Module.findExportByName("rtm.dll", "RtmWriteAddressFamilyConfig")
Interceptor.attach(RtmWriteAddressFamilyConfig, {onLeave: function (args) {send("RtmWriteAddressFamilyConfig");}});

var RtmWriteInstanceConfig = Module.findExportByName("rtm.dll", "RtmWriteInstanceConfig")
Interceptor.attach(RtmWriteInstanceConfig, {onLeave: function (args) {send("RtmWriteInstanceConfig");}});

var SearchInTable = Module.findExportByName("rtm.dll", "SearchInTable")
Interceptor.attach(SearchInTable, {onLeave: function (args) {send("SearchInTable");}});

