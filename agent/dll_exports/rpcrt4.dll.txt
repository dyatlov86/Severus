var CStdStubBuffer_AddRef = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_AddRef")
Interceptor.attach(CStdStubBuffer_AddRef, {onLeave: function (args) {send("CStdStubBuffer_AddRef");}});

var CStdStubBuffer_Connect = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_Connect")
Interceptor.attach(CStdStubBuffer_Connect, {onLeave: function (args) {send("CStdStubBuffer_Connect");}});

var CStdStubBuffer_CountRefs = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_CountRefs")
Interceptor.attach(CStdStubBuffer_CountRefs, {onLeave: function (args) {send("CStdStubBuffer_CountRefs");}});

var CStdStubBuffer_DebugServerQueryInterface = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_DebugServerQueryInterface")
Interceptor.attach(CStdStubBuffer_DebugServerQueryInterface, {onLeave: function (args) {send("CStdStubBuffer_DebugServerQueryInterface");}});

var CStdStubBuffer_DebugServerRelease = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_DebugServerRelease")
Interceptor.attach(CStdStubBuffer_DebugServerRelease, {onLeave: function (args) {send("CStdStubBuffer_DebugServerRelease");}});

var CStdStubBuffer_Disconnect = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_Disconnect")
Interceptor.attach(CStdStubBuffer_Disconnect, {onLeave: function (args) {send("CStdStubBuffer_Disconnect");}});

var CStdStubBuffer_Invoke = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_Invoke")
Interceptor.attach(CStdStubBuffer_Invoke, {onLeave: function (args) {send("CStdStubBuffer_Invoke");}});

var CStdStubBuffer_IsIIDSupported = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_IsIIDSupported")
Interceptor.attach(CStdStubBuffer_IsIIDSupported, {onLeave: function (args) {send("CStdStubBuffer_IsIIDSupported");}});

var CStdStubBuffer_QueryInterface = Module.findExportByName("rpcrt4.dll", "CStdStubBuffer_QueryInterface")
Interceptor.attach(CStdStubBuffer_QueryInterface, {onLeave: function (args) {send("CStdStubBuffer_QueryInterface");}});

var CreateProxyFromTypeInfo = Module.findExportByName("rpcrt4.dll", "CreateProxyFromTypeInfo")
Interceptor.attach(CreateProxyFromTypeInfo, {onLeave: function (args) {send("CreateProxyFromTypeInfo");}});

var CreateStubFromTypeInfo = Module.findExportByName("rpcrt4.dll", "CreateStubFromTypeInfo")
Interceptor.attach(CreateStubFromTypeInfo, {onLeave: function (args) {send("CreateStubFromTypeInfo");}});

var DceErrorInqTextA = Module.findExportByName("rpcrt4.dll", "DceErrorInqTextA")
Interceptor.attach(DceErrorInqTextA, {onLeave: function (args) {send("DceErrorInqTextA");}});

var DceErrorInqTextW = Module.findExportByName("rpcrt4.dll", "DceErrorInqTextW")
Interceptor.attach(DceErrorInqTextW, {onLeave: function (args) {send("DceErrorInqTextW");}});

var DllGetClassObject = Module.findExportByName("rpcrt4.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var DllRegisterServer = Module.findExportByName("rpcrt4.dll", "DllRegisterServer")
Interceptor.attach(DllRegisterServer, {onLeave: function (args) {send("DllRegisterServer");}});

var IUnknown_AddRef_Proxy = Module.findExportByName("rpcrt4.dll", "IUnknown_AddRef_Proxy")
Interceptor.attach(IUnknown_AddRef_Proxy, {onLeave: function (args) {send("IUnknown_AddRef_Proxy");}});

var IUnknown_QueryInterface_Proxy = Module.findExportByName("rpcrt4.dll", "IUnknown_QueryInterface_Proxy")
Interceptor.attach(IUnknown_QueryInterface_Proxy, {onLeave: function (args) {send("IUnknown_QueryInterface_Proxy");}});

var IUnknown_Release_Proxy = Module.findExportByName("rpcrt4.dll", "IUnknown_Release_Proxy")
Interceptor.attach(IUnknown_Release_Proxy, {onLeave: function (args) {send("IUnknown_Release_Proxy");}});

var I_RpcAllocate = Module.findExportByName("rpcrt4.dll", "I_RpcAllocate")
Interceptor.attach(I_RpcAllocate, {onLeave: function (args) {send("I_RpcAllocate");}});

var I_RpcAsyncAbortCall = Module.findExportByName("rpcrt4.dll", "I_RpcAsyncAbortCall")
Interceptor.attach(I_RpcAsyncAbortCall, {onLeave: function (args) {send("I_RpcAsyncAbortCall");}});

var I_RpcAsyncSetHandle = Module.findExportByName("rpcrt4.dll", "I_RpcAsyncSetHandle")
Interceptor.attach(I_RpcAsyncSetHandle, {onLeave: function (args) {send("I_RpcAsyncSetHandle");}});

var I_RpcBCacheAllocate = Module.findExportByName("rpcrt4.dll", "I_RpcBCacheAllocate")
Interceptor.attach(I_RpcBCacheAllocate, {onLeave: function (args) {send("I_RpcBCacheAllocate");}});

var I_RpcBCacheFree = Module.findExportByName("rpcrt4.dll", "I_RpcBCacheFree")
Interceptor.attach(I_RpcBCacheFree, {onLeave: function (args) {send("I_RpcBCacheFree");}});

var I_RpcBindingCopy = Module.findExportByName("rpcrt4.dll", "I_RpcBindingCopy")
Interceptor.attach(I_RpcBindingCopy, {onLeave: function (args) {send("I_RpcBindingCopy");}});

var I_RpcBindingCreateNP = Module.findExportByName("rpcrt4.dll", "I_RpcBindingCreateNP")
Interceptor.attach(I_RpcBindingCreateNP, {onLeave: function (args) {send("I_RpcBindingCreateNP");}});

var I_RpcBindingHandleToAsyncHandle = Module.findExportByName("rpcrt4.dll", "I_RpcBindingHandleToAsyncHandle")
Interceptor.attach(I_RpcBindingHandleToAsyncHandle, {onLeave: function (args) {send("I_RpcBindingHandleToAsyncHandle");}});

var I_RpcBindingInqClientTokenAttributes = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqClientTokenAttributes")
Interceptor.attach(I_RpcBindingInqClientTokenAttributes, {onLeave: function (args) {send("I_RpcBindingInqClientTokenAttributes");}});

var I_RpcBindingInqCurrentModifiedId = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqCurrentModifiedId")
Interceptor.attach(I_RpcBindingInqCurrentModifiedId, {onLeave: function (args) {send("I_RpcBindingInqCurrentModifiedId");}});

var I_RpcBindingInqDynamicEndpoint = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqDynamicEndpoint")
Interceptor.attach(I_RpcBindingInqDynamicEndpoint, {onLeave: function (args) {send("I_RpcBindingInqDynamicEndpoint");}});

var I_RpcBindingInqDynamicEndpointA = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqDynamicEndpointA")
Interceptor.attach(I_RpcBindingInqDynamicEndpointA, {onLeave: function (args) {send("I_RpcBindingInqDynamicEndpointA");}});

var I_RpcBindingInqDynamicEndpointW = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqDynamicEndpointW")
Interceptor.attach(I_RpcBindingInqDynamicEndpointW, {onLeave: function (args) {send("I_RpcBindingInqDynamicEndpointW");}});

var I_RpcBindingInqLocalClientPID = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqLocalClientPID")
Interceptor.attach(I_RpcBindingInqLocalClientPID, {onLeave: function (args) {send("I_RpcBindingInqLocalClientPID");}});

var I_RpcBindingInqMarshalledTargetInfo = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqMarshalledTargetInfo")
Interceptor.attach(I_RpcBindingInqMarshalledTargetInfo, {onLeave: function (args) {send("I_RpcBindingInqMarshalledTargetInfo");}});

var I_RpcBindingInqSecurityContext = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqSecurityContext")
Interceptor.attach(I_RpcBindingInqSecurityContext, {onLeave: function (args) {send("I_RpcBindingInqSecurityContext");}});

var I_RpcBindingInqSecurityContextKeyInfo = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqSecurityContextKeyInfo")
Interceptor.attach(I_RpcBindingInqSecurityContextKeyInfo, {onLeave: function (args) {send("I_RpcBindingInqSecurityContextKeyInfo");}});

var I_RpcBindingInqTransportType = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqTransportType")
Interceptor.attach(I_RpcBindingInqTransportType, {onLeave: function (args) {send("I_RpcBindingInqTransportType");}});

var I_RpcBindingInqWireIdForSnego = Module.findExportByName("rpcrt4.dll", "I_RpcBindingInqWireIdForSnego")
Interceptor.attach(I_RpcBindingInqWireIdForSnego, {onLeave: function (args) {send("I_RpcBindingInqWireIdForSnego");}});

var I_RpcBindingIsClientLocal = Module.findExportByName("rpcrt4.dll", "I_RpcBindingIsClientLocal")
Interceptor.attach(I_RpcBindingIsClientLocal, {onLeave: function (args) {send("I_RpcBindingIsClientLocal");}});

var I_RpcBindingIsServerLocal = Module.findExportByName("rpcrt4.dll", "I_RpcBindingIsServerLocal")
Interceptor.attach(I_RpcBindingIsServerLocal, {onLeave: function (args) {send("I_RpcBindingIsServerLocal");}});

var I_RpcBindingSetPrivateOption = Module.findExportByName("rpcrt4.dll", "I_RpcBindingSetPrivateOption")
Interceptor.attach(I_RpcBindingSetPrivateOption, {onLeave: function (args) {send("I_RpcBindingSetPrivateOption");}});

var I_RpcBindingToStaticStringBindingW = Module.findExportByName("rpcrt4.dll", "I_RpcBindingToStaticStringBindingW")
Interceptor.attach(I_RpcBindingToStaticStringBindingW, {onLeave: function (args) {send("I_RpcBindingToStaticStringBindingW");}});

var I_RpcCertProcessAndProvision = Module.findExportByName("rpcrt4.dll", "I_RpcCertProcessAndProvision")
Interceptor.attach(I_RpcCertProcessAndProvision, {onLeave: function (args) {send("I_RpcCertProcessAndProvision");}});

var I_RpcClearMutex = Module.findExportByName("rpcrt4.dll", "I_RpcClearMutex")
Interceptor.attach(I_RpcClearMutex, {onLeave: function (args) {send("I_RpcClearMutex");}});

var I_RpcCompleteAndFree = Module.findExportByName("rpcrt4.dll", "I_RpcCompleteAndFree")
Interceptor.attach(I_RpcCompleteAndFree, {onLeave: function (args) {send("I_RpcCompleteAndFree");}});

var I_RpcDeleteMutex = Module.findExportByName("rpcrt4.dll", "I_RpcDeleteMutex")
Interceptor.attach(I_RpcDeleteMutex, {onLeave: function (args) {send("I_RpcDeleteMutex");}});

var I_RpcEnableWmiTrace = Module.findExportByName("rpcrt4.dll", "I_RpcEnableWmiTrace")
Interceptor.attach(I_RpcEnableWmiTrace, {onLeave: function (args) {send("I_RpcEnableWmiTrace");}});

var I_RpcExceptionFilter = Module.findExportByName("rpcrt4.dll", "I_RpcExceptionFilter")
Interceptor.attach(I_RpcExceptionFilter, {onLeave: function (args) {send("I_RpcExceptionFilter");}});

var I_RpcFilterDCOMActivation = Module.findExportByName("rpcrt4.dll", "I_RpcFilterDCOMActivation")
Interceptor.attach(I_RpcFilterDCOMActivation, {onLeave: function (args) {send("I_RpcFilterDCOMActivation");}});

var I_RpcFixTransferSyntax = Module.findExportByName("rpcrt4.dll", "I_RpcFixTransferSyntax")
Interceptor.attach(I_RpcFixTransferSyntax, {onLeave: function (args) {send("I_RpcFixTransferSyntax");}});

var I_RpcFree = Module.findExportByName("rpcrt4.dll", "I_RpcFree")
Interceptor.attach(I_RpcFree, {onLeave: function (args) {send("I_RpcFree");}});

var I_RpcFreeBuffer = Module.findExportByName("rpcrt4.dll", "I_RpcFreeBuffer")
Interceptor.attach(I_RpcFreeBuffer, {onLeave: function (args) {send("I_RpcFreeBuffer");}});

var I_RpcFreePipeBuffer = Module.findExportByName("rpcrt4.dll", "I_RpcFreePipeBuffer")
Interceptor.attach(I_RpcFreePipeBuffer, {onLeave: function (args) {send("I_RpcFreePipeBuffer");}});

var I_RpcFreeSystemHandle = Module.findExportByName("rpcrt4.dll", "I_RpcFreeSystemHandle")
Interceptor.attach(I_RpcFreeSystemHandle, {onLeave: function (args) {send("I_RpcFreeSystemHandle");}});

var I_RpcFreeSystemHandleCollection = Module.findExportByName("rpcrt4.dll", "I_RpcFreeSystemHandleCollection")
Interceptor.attach(I_RpcFreeSystemHandleCollection, {onLeave: function (args) {send("I_RpcFreeSystemHandleCollection");}});

var I_RpcFwThisIsTheManager = Module.findExportByName("rpcrt4.dll", "I_RpcFwThisIsTheManager")
Interceptor.attach(I_RpcFwThisIsTheManager, {onLeave: function (args) {send("I_RpcFwThisIsTheManager");}});

var I_RpcGetBuffer = Module.findExportByName("rpcrt4.dll", "I_RpcGetBuffer")
Interceptor.attach(I_RpcGetBuffer, {onLeave: function (args) {send("I_RpcGetBuffer");}});

var I_RpcGetBufferWithObject = Module.findExportByName("rpcrt4.dll", "I_RpcGetBufferWithObject")
Interceptor.attach(I_RpcGetBufferWithObject, {onLeave: function (args) {send("I_RpcGetBufferWithObject");}});

var I_RpcGetCurrentCallHandle = Module.findExportByName("rpcrt4.dll", "I_RpcGetCurrentCallHandle")
Interceptor.attach(I_RpcGetCurrentCallHandle, {onLeave: function (args) {send("I_RpcGetCurrentCallHandle");}});

var I_RpcGetDefaultSD = Module.findExportByName("rpcrt4.dll", "I_RpcGetDefaultSD")
Interceptor.attach(I_RpcGetDefaultSD, {onLeave: function (args) {send("I_RpcGetDefaultSD");}});

var I_RpcGetExtendedError = Module.findExportByName("rpcrt4.dll", "I_RpcGetExtendedError")
Interceptor.attach(I_RpcGetExtendedError, {onLeave: function (args) {send("I_RpcGetExtendedError");}});

var I_RpcGetPortAllocationData = Module.findExportByName("rpcrt4.dll", "I_RpcGetPortAllocationData")
Interceptor.attach(I_RpcGetPortAllocationData, {onLeave: function (args) {send("I_RpcGetPortAllocationData");}});

var I_RpcGetSystemHandle = Module.findExportByName("rpcrt4.dll", "I_RpcGetSystemHandle")
Interceptor.attach(I_RpcGetSystemHandle, {onLeave: function (args) {send("I_RpcGetSystemHandle");}});

var I_RpcIfInqTransferSyntaxes = Module.findExportByName("rpcrt4.dll", "I_RpcIfInqTransferSyntaxes")
Interceptor.attach(I_RpcIfInqTransferSyntaxes, {onLeave: function (args) {send("I_RpcIfInqTransferSyntaxes");}});

var I_RpcInitFwImports = Module.findExportByName("rpcrt4.dll", "I_RpcInitFwImports")
Interceptor.attach(I_RpcInitFwImports, {onLeave: function (args) {send("I_RpcInitFwImports");}});

var I_RpcInitHttpImports = Module.findExportByName("rpcrt4.dll", "I_RpcInitHttpImports")
Interceptor.attach(I_RpcInitHttpImports, {onLeave: function (args) {send("I_RpcInitHttpImports");}});

var I_RpcInitImports = Module.findExportByName("rpcrt4.dll", "I_RpcInitImports")
Interceptor.attach(I_RpcInitImports, {onLeave: function (args) {send("I_RpcInitImports");}});

var I_RpcInitNdrImports = Module.findExportByName("rpcrt4.dll", "I_RpcInitNdrImports")
Interceptor.attach(I_RpcInitNdrImports, {onLeave: function (args) {send("I_RpcInitNdrImports");}});

var I_RpcLogEvent = Module.findExportByName("rpcrt4.dll", "I_RpcLogEvent")
Interceptor.attach(I_RpcLogEvent, {onLeave: function (args) {send("I_RpcLogEvent");}});

var I_RpcMapWin32Status = Module.findExportByName("rpcrt4.dll", "I_RpcMapWin32Status")
Interceptor.attach(I_RpcMapWin32Status, {onLeave: function (args) {send("I_RpcMapWin32Status");}});

var I_RpcMarshalBindingHandleAndInterfaceForNDF = Module.findExportByName("rpcrt4.dll", "I_RpcMarshalBindingHandleAndInterfaceForNDF")
Interceptor.attach(I_RpcMarshalBindingHandleAndInterfaceForNDF, {onLeave: function (args) {send("I_RpcMarshalBindingHandleAndInterfaceForNDF");}});

var I_RpcMgmtEnableDedicatedThreadPool = Module.findExportByName("rpcrt4.dll", "I_RpcMgmtEnableDedicatedThreadPool")
Interceptor.attach(I_RpcMgmtEnableDedicatedThreadPool, {onLeave: function (args) {send("I_RpcMgmtEnableDedicatedThreadPool");}});

var I_RpcMgmtQueryDedicatedThreadPool = Module.findExportByName("rpcrt4.dll", "I_RpcMgmtQueryDedicatedThreadPool")
Interceptor.attach(I_RpcMgmtQueryDedicatedThreadPool, {onLeave: function (args) {send("I_RpcMgmtQueryDedicatedThreadPool");}});

var I_RpcNDRCGetWireRepresentation = Module.findExportByName("rpcrt4.dll", "I_RpcNDRCGetWireRepresentation")
Interceptor.attach(I_RpcNDRCGetWireRepresentation, {onLeave: function (args) {send("I_RpcNDRCGetWireRepresentation");}});

var I_RpcNDRSContextEmergencyCleanup = Module.findExportByName("rpcrt4.dll", "I_RpcNDRSContextEmergencyCleanup")
Interceptor.attach(I_RpcNDRSContextEmergencyCleanup, {onLeave: function (args) {send("I_RpcNDRSContextEmergencyCleanup");}});

var I_RpcNegotiateTransferSyntax = Module.findExportByName("rpcrt4.dll", "I_RpcNegotiateTransferSyntax")
Interceptor.attach(I_RpcNegotiateTransferSyntax, {onLeave: function (args) {send("I_RpcNegotiateTransferSyntax");}});

var I_RpcNsBindingSetEntryName = Module.findExportByName("rpcrt4.dll", "I_RpcNsBindingSetEntryName")
Interceptor.attach(I_RpcNsBindingSetEntryName, {onLeave: function (args) {send("I_RpcNsBindingSetEntryName");}});

var I_RpcNsBindingSetEntryNameA = Module.findExportByName("rpcrt4.dll", "I_RpcNsBindingSetEntryNameA")
Interceptor.attach(I_RpcNsBindingSetEntryNameA, {onLeave: function (args) {send("I_RpcNsBindingSetEntryNameA");}});

var I_RpcNsBindingSetEntryNameW = Module.findExportByName("rpcrt4.dll", "I_RpcNsBindingSetEntryNameW")
Interceptor.attach(I_RpcNsBindingSetEntryNameW, {onLeave: function (args) {send("I_RpcNsBindingSetEntryNameW");}});

var I_RpcNsInterfaceExported = Module.findExportByName("rpcrt4.dll", "I_RpcNsInterfaceExported")
Interceptor.attach(I_RpcNsInterfaceExported, {onLeave: function (args) {send("I_RpcNsInterfaceExported");}});

var I_RpcNsInterfaceUnexported = Module.findExportByName("rpcrt4.dll", "I_RpcNsInterfaceUnexported")
Interceptor.attach(I_RpcNsInterfaceUnexported, {onLeave: function (args) {send("I_RpcNsInterfaceUnexported");}});

var I_RpcOpenClientProcess = Module.findExportByName("rpcrt4.dll", "I_RpcOpenClientProcess")
Interceptor.attach(I_RpcOpenClientProcess, {onLeave: function (args) {send("I_RpcOpenClientProcess");}});

var I_RpcOpenClientThread = Module.findExportByName("rpcrt4.dll", "I_RpcOpenClientThread")
Interceptor.attach(I_RpcOpenClientThread, {onLeave: function (args) {send("I_RpcOpenClientThread");}});

var I_RpcParseSecurity = Module.findExportByName("rpcrt4.dll", "I_RpcParseSecurity")
Interceptor.attach(I_RpcParseSecurity, {onLeave: function (args) {send("I_RpcParseSecurity");}});

var I_RpcPauseExecution = Module.findExportByName("rpcrt4.dll", "I_RpcPauseExecution")
Interceptor.attach(I_RpcPauseExecution, {onLeave: function (args) {send("I_RpcPauseExecution");}});

var I_RpcReallocPipeBuffer = Module.findExportByName("rpcrt4.dll", "I_RpcReallocPipeBuffer")
Interceptor.attach(I_RpcReallocPipeBuffer, {onLeave: function (args) {send("I_RpcReallocPipeBuffer");}});

var I_RpcReceive = Module.findExportByName("rpcrt4.dll", "I_RpcReceive")
Interceptor.attach(I_RpcReceive, {onLeave: function (args) {send("I_RpcReceive");}});

var I_RpcRecordCalloutFailure = Module.findExportByName("rpcrt4.dll", "I_RpcRecordCalloutFailure")
Interceptor.attach(I_RpcRecordCalloutFailure, {onLeave: function (args) {send("I_RpcRecordCalloutFailure");}});

var I_RpcRequestMutex = Module.findExportByName("rpcrt4.dll", "I_RpcRequestMutex")
Interceptor.attach(I_RpcRequestMutex, {onLeave: function (args) {send("I_RpcRequestMutex");}});

var I_RpcSNCHOption = Module.findExportByName("rpcrt4.dll", "I_RpcSNCHOption")
Interceptor.attach(I_RpcSNCHOption, {onLeave: function (args) {send("I_RpcSNCHOption");}});

var I_RpcSend = Module.findExportByName("rpcrt4.dll", "I_RpcSend")
Interceptor.attach(I_RpcSend, {onLeave: function (args) {send("I_RpcSend");}});

var I_RpcSendReceive = Module.findExportByName("rpcrt4.dll", "I_RpcSendReceive")
Interceptor.attach(I_RpcSendReceive, {onLeave: function (args) {send("I_RpcSendReceive");}});

var I_RpcServerAllocateIpPort = Module.findExportByName("rpcrt4.dll", "I_RpcServerAllocateIpPort")
Interceptor.attach(I_RpcServerAllocateIpPort, {onLeave: function (args) {send("I_RpcServerAllocateIpPort");}});

var I_RpcServerCheckClientRestriction = Module.findExportByName("rpcrt4.dll", "I_RpcServerCheckClientRestriction")
Interceptor.attach(I_RpcServerCheckClientRestriction, {onLeave: function (args) {send("I_RpcServerCheckClientRestriction");}});

var I_RpcServerDisableExceptionFilter = Module.findExportByName("rpcrt4.dll", "I_RpcServerDisableExceptionFilter")
Interceptor.attach(I_RpcServerDisableExceptionFilter, {onLeave: function (args) {send("I_RpcServerDisableExceptionFilter");}});

var I_RpcServerGetAssociationID = Module.findExportByName("rpcrt4.dll", "I_RpcServerGetAssociationID")
Interceptor.attach(I_RpcServerGetAssociationID, {onLeave: function (args) {send("I_RpcServerGetAssociationID");}});

var I_RpcServerInqAddressChangeFn = Module.findExportByName("rpcrt4.dll", "I_RpcServerInqAddressChangeFn")
Interceptor.attach(I_RpcServerInqAddressChangeFn, {onLeave: function (args) {send("I_RpcServerInqAddressChangeFn");}});

var I_RpcServerInqLocalConnAddress = Module.findExportByName("rpcrt4.dll", "I_RpcServerInqLocalConnAddress")
Interceptor.attach(I_RpcServerInqLocalConnAddress, {onLeave: function (args) {send("I_RpcServerInqLocalConnAddress");}});

var I_RpcServerInqRemoteConnAddress = Module.findExportByName("rpcrt4.dll", "I_RpcServerInqRemoteConnAddress")
Interceptor.attach(I_RpcServerInqRemoteConnAddress, {onLeave: function (args) {send("I_RpcServerInqRemoteConnAddress");}});

var I_RpcServerInqTransportType = Module.findExportByName("rpcrt4.dll", "I_RpcServerInqTransportType")
Interceptor.attach(I_RpcServerInqTransportType, {onLeave: function (args) {send("I_RpcServerInqTransportType");}});

var I_RpcServerIsClientDisconnected = Module.findExportByName("rpcrt4.dll", "I_RpcServerIsClientDisconnected")
Interceptor.attach(I_RpcServerIsClientDisconnected, {onLeave: function (args) {send("I_RpcServerIsClientDisconnected");}});

var I_RpcServerRegisterForwardFunction = Module.findExportByName("rpcrt4.dll", "I_RpcServerRegisterForwardFunction")
Interceptor.attach(I_RpcServerRegisterForwardFunction, {onLeave: function (args) {send("I_RpcServerRegisterForwardFunction");}});

var I_RpcServerSetAddressChangeFn = Module.findExportByName("rpcrt4.dll", "I_RpcServerSetAddressChangeFn")
Interceptor.attach(I_RpcServerSetAddressChangeFn, {onLeave: function (args) {send("I_RpcServerSetAddressChangeFn");}});

var I_RpcServerStartService = Module.findExportByName("rpcrt4.dll", "I_RpcServerStartService")
Interceptor.attach(I_RpcServerStartService, {onLeave: function (args) {send("I_RpcServerStartService");}});

var I_RpcServerSubscribeForDisconnectNotification = Module.findExportByName("rpcrt4.dll", "I_RpcServerSubscribeForDisconnectNotification")
Interceptor.attach(I_RpcServerSubscribeForDisconnectNotification, {onLeave: function (args) {send("I_RpcServerSubscribeForDisconnectNotification");}});

var I_RpcServerSubscribeForDisconnectNotification2 = Module.findExportByName("rpcrt4.dll", "I_RpcServerSubscribeForDisconnectNotification2")
Interceptor.attach(I_RpcServerSubscribeForDisconnectNotification2, {onLeave: function (args) {send("I_RpcServerSubscribeForDisconnectNotification2");}});

var I_RpcServerTurnOnOffKeepalives = Module.findExportByName("rpcrt4.dll", "I_RpcServerTurnOnOffKeepalives")
Interceptor.attach(I_RpcServerTurnOnOffKeepalives, {onLeave: function (args) {send("I_RpcServerTurnOnOffKeepalives");}});

var I_RpcServerUnsubscribeForDisconnectNotification = Module.findExportByName("rpcrt4.dll", "I_RpcServerUnsubscribeForDisconnectNotification")
Interceptor.attach(I_RpcServerUnsubscribeForDisconnectNotification, {onLeave: function (args) {send("I_RpcServerUnsubscribeForDisconnectNotification");}});

var I_RpcServerUseProtseq2A = Module.findExportByName("rpcrt4.dll", "I_RpcServerUseProtseq2A")
Interceptor.attach(I_RpcServerUseProtseq2A, {onLeave: function (args) {send("I_RpcServerUseProtseq2A");}});

var I_RpcServerUseProtseq2W = Module.findExportByName("rpcrt4.dll", "I_RpcServerUseProtseq2W")
Interceptor.attach(I_RpcServerUseProtseq2W, {onLeave: function (args) {send("I_RpcServerUseProtseq2W");}});

var I_RpcServerUseProtseqEp2A = Module.findExportByName("rpcrt4.dll", "I_RpcServerUseProtseqEp2A")
Interceptor.attach(I_RpcServerUseProtseqEp2A, {onLeave: function (args) {send("I_RpcServerUseProtseqEp2A");}});

var I_RpcServerUseProtseqEp2W = Module.findExportByName("rpcrt4.dll", "I_RpcServerUseProtseqEp2W")
Interceptor.attach(I_RpcServerUseProtseqEp2W, {onLeave: function (args) {send("I_RpcServerUseProtseqEp2W");}});

var I_RpcSessionStrictContextHandle = Module.findExportByName("rpcrt4.dll", "I_RpcSessionStrictContextHandle")
Interceptor.attach(I_RpcSessionStrictContextHandle, {onLeave: function (args) {send("I_RpcSessionStrictContextHandle");}});

var I_RpcSetDCOMAppId = Module.findExportByName("rpcrt4.dll", "I_RpcSetDCOMAppId")
Interceptor.attach(I_RpcSetDCOMAppId, {onLeave: function (args) {send("I_RpcSetDCOMAppId");}});

var I_RpcSetSystemHandle = Module.findExportByName("rpcrt4.dll", "I_RpcSetSystemHandle")
Interceptor.attach(I_RpcSetSystemHandle, {onLeave: function (args) {send("I_RpcSetSystemHandle");}});

var I_RpcSsDontSerializeContext = Module.findExportByName("rpcrt4.dll", "I_RpcSsDontSerializeContext")
Interceptor.attach(I_RpcSsDontSerializeContext, {onLeave: function (args) {send("I_RpcSsDontSerializeContext");}});

var I_RpcSystemFunction001 = Module.findExportByName("rpcrt4.dll", "I_RpcSystemFunction001")
Interceptor.attach(I_RpcSystemFunction001, {onLeave: function (args) {send("I_RpcSystemFunction001");}});

var I_RpcSystemHandleTypeSpecificWork = Module.findExportByName("rpcrt4.dll", "I_RpcSystemHandleTypeSpecificWork")
Interceptor.attach(I_RpcSystemHandleTypeSpecificWork, {onLeave: function (args) {send("I_RpcSystemHandleTypeSpecificWork");}});

var I_RpcTransConnectionAllocatePacket = Module.findExportByName("rpcrt4.dll", "I_RpcTransConnectionAllocatePacket")
Interceptor.attach(I_RpcTransConnectionAllocatePacket, {onLeave: function (args) {send("I_RpcTransConnectionAllocatePacket");}});

var I_RpcTransConnectionFreePacket = Module.findExportByName("rpcrt4.dll", "I_RpcTransConnectionFreePacket")
Interceptor.attach(I_RpcTransConnectionFreePacket, {onLeave: function (args) {send("I_RpcTransConnectionFreePacket");}});

var I_RpcTransConnectionReallocPacket = Module.findExportByName("rpcrt4.dll", "I_RpcTransConnectionReallocPacket")
Interceptor.attach(I_RpcTransConnectionReallocPacket, {onLeave: function (args) {send("I_RpcTransConnectionReallocPacket");}});

var I_RpcTransDatagramAllocate = Module.findExportByName("rpcrt4.dll", "I_RpcTransDatagramAllocate")
Interceptor.attach(I_RpcTransDatagramAllocate, {onLeave: function (args) {send("I_RpcTransDatagramAllocate");}});

var I_RpcTransDatagramAllocate2 = Module.findExportByName("rpcrt4.dll", "I_RpcTransDatagramAllocate2")
Interceptor.attach(I_RpcTransDatagramAllocate2, {onLeave: function (args) {send("I_RpcTransDatagramAllocate2");}});

var I_RpcTransDatagramFree = Module.findExportByName("rpcrt4.dll", "I_RpcTransDatagramFree")
Interceptor.attach(I_RpcTransDatagramFree, {onLeave: function (args) {send("I_RpcTransDatagramFree");}});

var I_RpcTransGetThreadEvent = Module.findExportByName("rpcrt4.dll", "I_RpcTransGetThreadEvent")
Interceptor.attach(I_RpcTransGetThreadEvent, {onLeave: function (args) {send("I_RpcTransGetThreadEvent");}});

var I_RpcTransGetThreadEventThreadOptional = Module.findExportByName("rpcrt4.dll", "I_RpcTransGetThreadEventThreadOptional")
Interceptor.attach(I_RpcTransGetThreadEventThreadOptional, {onLeave: function (args) {send("I_RpcTransGetThreadEventThreadOptional");}});

var I_RpcTransIoCancelled = Module.findExportByName("rpcrt4.dll", "I_RpcTransIoCancelled")
Interceptor.attach(I_RpcTransIoCancelled, {onLeave: function (args) {send("I_RpcTransIoCancelled");}});

var I_RpcTransServerNewConnection = Module.findExportByName("rpcrt4.dll", "I_RpcTransServerNewConnection")
Interceptor.attach(I_RpcTransServerNewConnection, {onLeave: function (args) {send("I_RpcTransServerNewConnection");}});

var I_RpcTurnOnEEInfoPropagation = Module.findExportByName("rpcrt4.dll", "I_RpcTurnOnEEInfoPropagation")
Interceptor.attach(I_RpcTurnOnEEInfoPropagation, {onLeave: function (args) {send("I_RpcTurnOnEEInfoPropagation");}});

var I_RpcVerifierCorruptionExpected = Module.findExportByName("rpcrt4.dll", "I_RpcVerifierCorruptionExpected")
Interceptor.attach(I_RpcVerifierCorruptionExpected, {onLeave: function (args) {send("I_RpcVerifierCorruptionExpected");}});

var I_UuidCreate = Module.findExportByName("rpcrt4.dll", "I_UuidCreate")
Interceptor.attach(I_UuidCreate, {onLeave: function (args) {send("I_UuidCreate");}});

var MesBufferHandleReset = Module.findExportByName("rpcrt4.dll", "MesBufferHandleReset")
Interceptor.attach(MesBufferHandleReset, {onLeave: function (args) {send("MesBufferHandleReset");}});

var MesDecodeBufferHandleCreate = Module.findExportByName("rpcrt4.dll", "MesDecodeBufferHandleCreate")
Interceptor.attach(MesDecodeBufferHandleCreate, {onLeave: function (args) {send("MesDecodeBufferHandleCreate");}});

var MesDecodeIncrementalHandleCreate = Module.findExportByName("rpcrt4.dll", "MesDecodeIncrementalHandleCreate")
Interceptor.attach(MesDecodeIncrementalHandleCreate, {onLeave: function (args) {send("MesDecodeIncrementalHandleCreate");}});

var MesEncodeDynBufferHandleCreate = Module.findExportByName("rpcrt4.dll", "MesEncodeDynBufferHandleCreate")
Interceptor.attach(MesEncodeDynBufferHandleCreate, {onLeave: function (args) {send("MesEncodeDynBufferHandleCreate");}});

var MesEncodeFixedBufferHandleCreate = Module.findExportByName("rpcrt4.dll", "MesEncodeFixedBufferHandleCreate")
Interceptor.attach(MesEncodeFixedBufferHandleCreate, {onLeave: function (args) {send("MesEncodeFixedBufferHandleCreate");}});

var MesEncodeIncrementalHandleCreate = Module.findExportByName("rpcrt4.dll", "MesEncodeIncrementalHandleCreate")
Interceptor.attach(MesEncodeIncrementalHandleCreate, {onLeave: function (args) {send("MesEncodeIncrementalHandleCreate");}});

var MesHandleFree = Module.findExportByName("rpcrt4.dll", "MesHandleFree")
Interceptor.attach(MesHandleFree, {onLeave: function (args) {send("MesHandleFree");}});

var MesIncrementalHandleReset = Module.findExportByName("rpcrt4.dll", "MesIncrementalHandleReset")
Interceptor.attach(MesIncrementalHandleReset, {onLeave: function (args) {send("MesIncrementalHandleReset");}});

var MesInqProcEncodingId = Module.findExportByName("rpcrt4.dll", "MesInqProcEncodingId")
Interceptor.attach(MesInqProcEncodingId, {onLeave: function (args) {send("MesInqProcEncodingId");}});

var NDRCContextBinding = Module.findExportByName("rpcrt4.dll", "NDRCContextBinding")
Interceptor.attach(NDRCContextBinding, {onLeave: function (args) {send("NDRCContextBinding");}});

var NDRCContextMarshall = Module.findExportByName("rpcrt4.dll", "NDRCContextMarshall")
Interceptor.attach(NDRCContextMarshall, {onLeave: function (args) {send("NDRCContextMarshall");}});

var NDRCContextUnmarshall = Module.findExportByName("rpcrt4.dll", "NDRCContextUnmarshall")
Interceptor.attach(NDRCContextUnmarshall, {onLeave: function (args) {send("NDRCContextUnmarshall");}});

var NDRSContextMarshall = Module.findExportByName("rpcrt4.dll", "NDRSContextMarshall")
Interceptor.attach(NDRSContextMarshall, {onLeave: function (args) {send("NDRSContextMarshall");}});

var NDRSContextMarshall2 = Module.findExportByName("rpcrt4.dll", "NDRSContextMarshall2")
Interceptor.attach(NDRSContextMarshall2, {onLeave: function (args) {send("NDRSContextMarshall2");}});

var NDRSContextMarshallEx = Module.findExportByName("rpcrt4.dll", "NDRSContextMarshallEx")
Interceptor.attach(NDRSContextMarshallEx, {onLeave: function (args) {send("NDRSContextMarshallEx");}});

var NDRSContextUnmarshall = Module.findExportByName("rpcrt4.dll", "NDRSContextUnmarshall")
Interceptor.attach(NDRSContextUnmarshall, {onLeave: function (args) {send("NDRSContextUnmarshall");}});

var NDRSContextUnmarshall2 = Module.findExportByName("rpcrt4.dll", "NDRSContextUnmarshall2")
Interceptor.attach(NDRSContextUnmarshall2, {onLeave: function (args) {send("NDRSContextUnmarshall2");}});

var NDRSContextUnmarshallEx = Module.findExportByName("rpcrt4.dll", "NDRSContextUnmarshallEx")
Interceptor.attach(NDRSContextUnmarshallEx, {onLeave: function (args) {send("NDRSContextUnmarshallEx");}});

var Ndr64AsyncClientCall = Module.findExportByName("rpcrt4.dll", "Ndr64AsyncClientCall")
Interceptor.attach(Ndr64AsyncClientCall, {onLeave: function (args) {send("Ndr64AsyncClientCall");}});

var Ndr64AsyncServerCall64 = Module.findExportByName("rpcrt4.dll", "Ndr64AsyncServerCall64")
Interceptor.attach(Ndr64AsyncServerCall64, {onLeave: function (args) {send("Ndr64AsyncServerCall64");}});

var Ndr64AsyncServerCallAll = Module.findExportByName("rpcrt4.dll", "Ndr64AsyncServerCallAll")
Interceptor.attach(Ndr64AsyncServerCallAll, {onLeave: function (args) {send("Ndr64AsyncServerCallAll");}});

var Ndr64DcomAsyncClientCall = Module.findExportByName("rpcrt4.dll", "Ndr64DcomAsyncClientCall")
Interceptor.attach(Ndr64DcomAsyncClientCall, {onLeave: function (args) {send("Ndr64DcomAsyncClientCall");}});

var Ndr64DcomAsyncStubCall = Module.findExportByName("rpcrt4.dll", "Ndr64DcomAsyncStubCall")
Interceptor.attach(Ndr64DcomAsyncStubCall, {onLeave: function (args) {send("Ndr64DcomAsyncStubCall");}});

var NdrAllocate = Module.findExportByName("rpcrt4.dll", "NdrAllocate")
Interceptor.attach(NdrAllocate, {onLeave: function (args) {send("NdrAllocate");}});

var NdrAsyncClientCall = Module.findExportByName("rpcrt4.dll", "NdrAsyncClientCall")
Interceptor.attach(NdrAsyncClientCall, {onLeave: function (args) {send("NdrAsyncClientCall");}});

var NdrAsyncServerCall = Module.findExportByName("rpcrt4.dll", "NdrAsyncServerCall")
Interceptor.attach(NdrAsyncServerCall, {onLeave: function (args) {send("NdrAsyncServerCall");}});

var NdrByteCountPointerBufferSize = Module.findExportByName("rpcrt4.dll", "NdrByteCountPointerBufferSize")
Interceptor.attach(NdrByteCountPointerBufferSize, {onLeave: function (args) {send("NdrByteCountPointerBufferSize");}});

var NdrByteCountPointerFree = Module.findExportByName("rpcrt4.dll", "NdrByteCountPointerFree")
Interceptor.attach(NdrByteCountPointerFree, {onLeave: function (args) {send("NdrByteCountPointerFree");}});

var NdrByteCountPointerMarshall = Module.findExportByName("rpcrt4.dll", "NdrByteCountPointerMarshall")
Interceptor.attach(NdrByteCountPointerMarshall, {onLeave: function (args) {send("NdrByteCountPointerMarshall");}});

var NdrByteCountPointerUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrByteCountPointerUnmarshall")
Interceptor.attach(NdrByteCountPointerUnmarshall, {onLeave: function (args) {send("NdrByteCountPointerUnmarshall");}});

var NdrCStdStubBuffer2_Release = Module.findExportByName("rpcrt4.dll", "NdrCStdStubBuffer2_Release")
Interceptor.attach(NdrCStdStubBuffer2_Release, {onLeave: function (args) {send("NdrCStdStubBuffer2_Release");}});

var NdrCStdStubBuffer_Release = Module.findExportByName("rpcrt4.dll", "NdrCStdStubBuffer_Release")
Interceptor.attach(NdrCStdStubBuffer_Release, {onLeave: function (args) {send("NdrCStdStubBuffer_Release");}});

var NdrClearOutParameters = Module.findExportByName("rpcrt4.dll", "NdrClearOutParameters")
Interceptor.attach(NdrClearOutParameters, {onLeave: function (args) {send("NdrClearOutParameters");}});

var NdrClientCall2 = Module.findExportByName("rpcrt4.dll", "NdrClientCall2")
Interceptor.attach(NdrClientCall2, {onLeave: function (args) {send("NdrClientCall2");}});

var NdrClientCall3 = Module.findExportByName("rpcrt4.dll", "NdrClientCall3")
Interceptor.attach(NdrClientCall3, {onLeave: function (args) {send("NdrClientCall3");}});

var NdrClientContextMarshall = Module.findExportByName("rpcrt4.dll", "NdrClientContextMarshall")
Interceptor.attach(NdrClientContextMarshall, {onLeave: function (args) {send("NdrClientContextMarshall");}});

var NdrClientContextUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrClientContextUnmarshall")
Interceptor.attach(NdrClientContextUnmarshall, {onLeave: function (args) {send("NdrClientContextUnmarshall");}});

var NdrClientInitialize = Module.findExportByName("rpcrt4.dll", "NdrClientInitialize")
Interceptor.attach(NdrClientInitialize, {onLeave: function (args) {send("NdrClientInitialize");}});

var NdrClientInitializeNew = Module.findExportByName("rpcrt4.dll", "NdrClientInitializeNew")
Interceptor.attach(NdrClientInitializeNew, {onLeave: function (args) {send("NdrClientInitializeNew");}});

var NdrComplexArrayBufferSize = Module.findExportByName("rpcrt4.dll", "NdrComplexArrayBufferSize")
Interceptor.attach(NdrComplexArrayBufferSize, {onLeave: function (args) {send("NdrComplexArrayBufferSize");}});

var NdrComplexArrayFree = Module.findExportByName("rpcrt4.dll", "NdrComplexArrayFree")
Interceptor.attach(NdrComplexArrayFree, {onLeave: function (args) {send("NdrComplexArrayFree");}});

var NdrComplexArrayMarshall = Module.findExportByName("rpcrt4.dll", "NdrComplexArrayMarshall")
Interceptor.attach(NdrComplexArrayMarshall, {onLeave: function (args) {send("NdrComplexArrayMarshall");}});

var NdrComplexArrayMemorySize = Module.findExportByName("rpcrt4.dll", "NdrComplexArrayMemorySize")
Interceptor.attach(NdrComplexArrayMemorySize, {onLeave: function (args) {send("NdrComplexArrayMemorySize");}});

var NdrComplexArrayUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrComplexArrayUnmarshall")
Interceptor.attach(NdrComplexArrayUnmarshall, {onLeave: function (args) {send("NdrComplexArrayUnmarshall");}});

var NdrComplexStructBufferSize = Module.findExportByName("rpcrt4.dll", "NdrComplexStructBufferSize")
Interceptor.attach(NdrComplexStructBufferSize, {onLeave: function (args) {send("NdrComplexStructBufferSize");}});

var NdrComplexStructFree = Module.findExportByName("rpcrt4.dll", "NdrComplexStructFree")
Interceptor.attach(NdrComplexStructFree, {onLeave: function (args) {send("NdrComplexStructFree");}});

var NdrComplexStructMarshall = Module.findExportByName("rpcrt4.dll", "NdrComplexStructMarshall")
Interceptor.attach(NdrComplexStructMarshall, {onLeave: function (args) {send("NdrComplexStructMarshall");}});

var NdrComplexStructMemorySize = Module.findExportByName("rpcrt4.dll", "NdrComplexStructMemorySize")
Interceptor.attach(NdrComplexStructMemorySize, {onLeave: function (args) {send("NdrComplexStructMemorySize");}});

var NdrComplexStructUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrComplexStructUnmarshall")
Interceptor.attach(NdrComplexStructUnmarshall, {onLeave: function (args) {send("NdrComplexStructUnmarshall");}});

var NdrConformantArrayBufferSize = Module.findExportByName("rpcrt4.dll", "NdrConformantArrayBufferSize")
Interceptor.attach(NdrConformantArrayBufferSize, {onLeave: function (args) {send("NdrConformantArrayBufferSize");}});

var NdrConformantArrayFree = Module.findExportByName("rpcrt4.dll", "NdrConformantArrayFree")
Interceptor.attach(NdrConformantArrayFree, {onLeave: function (args) {send("NdrConformantArrayFree");}});

var NdrConformantArrayMarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantArrayMarshall")
Interceptor.attach(NdrConformantArrayMarshall, {onLeave: function (args) {send("NdrConformantArrayMarshall");}});

var NdrConformantArrayMemorySize = Module.findExportByName("rpcrt4.dll", "NdrConformantArrayMemorySize")
Interceptor.attach(NdrConformantArrayMemorySize, {onLeave: function (args) {send("NdrConformantArrayMemorySize");}});

var NdrConformantArrayUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantArrayUnmarshall")
Interceptor.attach(NdrConformantArrayUnmarshall, {onLeave: function (args) {send("NdrConformantArrayUnmarshall");}});

var NdrConformantStringBufferSize = Module.findExportByName("rpcrt4.dll", "NdrConformantStringBufferSize")
Interceptor.attach(NdrConformantStringBufferSize, {onLeave: function (args) {send("NdrConformantStringBufferSize");}});

var NdrConformantStringMarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantStringMarshall")
Interceptor.attach(NdrConformantStringMarshall, {onLeave: function (args) {send("NdrConformantStringMarshall");}});

var NdrConformantStringMemorySize = Module.findExportByName("rpcrt4.dll", "NdrConformantStringMemorySize")
Interceptor.attach(NdrConformantStringMemorySize, {onLeave: function (args) {send("NdrConformantStringMemorySize");}});

var NdrConformantStringUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantStringUnmarshall")
Interceptor.attach(NdrConformantStringUnmarshall, {onLeave: function (args) {send("NdrConformantStringUnmarshall");}});

var NdrConformantStructBufferSize = Module.findExportByName("rpcrt4.dll", "NdrConformantStructBufferSize")
Interceptor.attach(NdrConformantStructBufferSize, {onLeave: function (args) {send("NdrConformantStructBufferSize");}});

var NdrConformantStructFree = Module.findExportByName("rpcrt4.dll", "NdrConformantStructFree")
Interceptor.attach(NdrConformantStructFree, {onLeave: function (args) {send("NdrConformantStructFree");}});

var NdrConformantStructMarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantStructMarshall")
Interceptor.attach(NdrConformantStructMarshall, {onLeave: function (args) {send("NdrConformantStructMarshall");}});

var NdrConformantStructMemorySize = Module.findExportByName("rpcrt4.dll", "NdrConformantStructMemorySize")
Interceptor.attach(NdrConformantStructMemorySize, {onLeave: function (args) {send("NdrConformantStructMemorySize");}});

var NdrConformantStructUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantStructUnmarshall")
Interceptor.attach(NdrConformantStructUnmarshall, {onLeave: function (args) {send("NdrConformantStructUnmarshall");}});

var NdrConformantVaryingArrayBufferSize = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingArrayBufferSize")
Interceptor.attach(NdrConformantVaryingArrayBufferSize, {onLeave: function (args) {send("NdrConformantVaryingArrayBufferSize");}});

var NdrConformantVaryingArrayFree = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingArrayFree")
Interceptor.attach(NdrConformantVaryingArrayFree, {onLeave: function (args) {send("NdrConformantVaryingArrayFree");}});

var NdrConformantVaryingArrayMarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingArrayMarshall")
Interceptor.attach(NdrConformantVaryingArrayMarshall, {onLeave: function (args) {send("NdrConformantVaryingArrayMarshall");}});

var NdrConformantVaryingArrayMemorySize = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingArrayMemorySize")
Interceptor.attach(NdrConformantVaryingArrayMemorySize, {onLeave: function (args) {send("NdrConformantVaryingArrayMemorySize");}});

var NdrConformantVaryingArrayUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingArrayUnmarshall")
Interceptor.attach(NdrConformantVaryingArrayUnmarshall, {onLeave: function (args) {send("NdrConformantVaryingArrayUnmarshall");}});

var NdrConformantVaryingStructBufferSize = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingStructBufferSize")
Interceptor.attach(NdrConformantVaryingStructBufferSize, {onLeave: function (args) {send("NdrConformantVaryingStructBufferSize");}});

var NdrConformantVaryingStructFree = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingStructFree")
Interceptor.attach(NdrConformantVaryingStructFree, {onLeave: function (args) {send("NdrConformantVaryingStructFree");}});

var NdrConformantVaryingStructMarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingStructMarshall")
Interceptor.attach(NdrConformantVaryingStructMarshall, {onLeave: function (args) {send("NdrConformantVaryingStructMarshall");}});

var NdrConformantVaryingStructMemorySize = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingStructMemorySize")
Interceptor.attach(NdrConformantVaryingStructMemorySize, {onLeave: function (args) {send("NdrConformantVaryingStructMemorySize");}});

var NdrConformantVaryingStructUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrConformantVaryingStructUnmarshall")
Interceptor.attach(NdrConformantVaryingStructUnmarshall, {onLeave: function (args) {send("NdrConformantVaryingStructUnmarshall");}});

var NdrContextHandleInitialize = Module.findExportByName("rpcrt4.dll", "NdrContextHandleInitialize")
Interceptor.attach(NdrContextHandleInitialize, {onLeave: function (args) {send("NdrContextHandleInitialize");}});

var NdrContextHandleSize = Module.findExportByName("rpcrt4.dll", "NdrContextHandleSize")
Interceptor.attach(NdrContextHandleSize, {onLeave: function (args) {send("NdrContextHandleSize");}});

var NdrConvert = Module.findExportByName("rpcrt4.dll", "NdrConvert")
Interceptor.attach(NdrConvert, {onLeave: function (args) {send("NdrConvert");}});

var NdrConvert2 = Module.findExportByName("rpcrt4.dll", "NdrConvert2")
Interceptor.attach(NdrConvert2, {onLeave: function (args) {send("NdrConvert2");}});

var NdrCorrelationFree = Module.findExportByName("rpcrt4.dll", "NdrCorrelationFree")
Interceptor.attach(NdrCorrelationFree, {onLeave: function (args) {send("NdrCorrelationFree");}});

var NdrCorrelationInitialize = Module.findExportByName("rpcrt4.dll", "NdrCorrelationInitialize")
Interceptor.attach(NdrCorrelationInitialize, {onLeave: function (args) {send("NdrCorrelationInitialize");}});

var NdrCorrelationPass = Module.findExportByName("rpcrt4.dll", "NdrCorrelationPass")
Interceptor.attach(NdrCorrelationPass, {onLeave: function (args) {send("NdrCorrelationPass");}});

var NdrCreateServerInterfaceFromStub = Module.findExportByName("rpcrt4.dll", "NdrCreateServerInterfaceFromStub")
Interceptor.attach(NdrCreateServerInterfaceFromStub, {onLeave: function (args) {send("NdrCreateServerInterfaceFromStub");}});

var NdrDcomAsyncClientCall = Module.findExportByName("rpcrt4.dll", "NdrDcomAsyncClientCall")
Interceptor.attach(NdrDcomAsyncClientCall, {onLeave: function (args) {send("NdrDcomAsyncClientCall");}});

var NdrDcomAsyncStubCall = Module.findExportByName("rpcrt4.dll", "NdrDcomAsyncStubCall")
Interceptor.attach(NdrDcomAsyncStubCall, {onLeave: function (args) {send("NdrDcomAsyncStubCall");}});

var NdrDllCanUnloadNow = Module.findExportByName("rpcrt4.dll", "NdrDllCanUnloadNow")
Interceptor.attach(NdrDllCanUnloadNow, {onLeave: function (args) {send("NdrDllCanUnloadNow");}});

var NdrDllGetClassObject = Module.findExportByName("rpcrt4.dll", "NdrDllGetClassObject")
Interceptor.attach(NdrDllGetClassObject, {onLeave: function (args) {send("NdrDllGetClassObject");}});

var NdrDllRegisterProxy = Module.findExportByName("rpcrt4.dll", "NdrDllRegisterProxy")
Interceptor.attach(NdrDllRegisterProxy, {onLeave: function (args) {send("NdrDllRegisterProxy");}});

var NdrDllUnregisterProxy = Module.findExportByName("rpcrt4.dll", "NdrDllUnregisterProxy")
Interceptor.attach(NdrDllUnregisterProxy, {onLeave: function (args) {send("NdrDllUnregisterProxy");}});

var NdrEncapsulatedUnionBufferSize = Module.findExportByName("rpcrt4.dll", "NdrEncapsulatedUnionBufferSize")
Interceptor.attach(NdrEncapsulatedUnionBufferSize, {onLeave: function (args) {send("NdrEncapsulatedUnionBufferSize");}});

var NdrEncapsulatedUnionFree = Module.findExportByName("rpcrt4.dll", "NdrEncapsulatedUnionFree")
Interceptor.attach(NdrEncapsulatedUnionFree, {onLeave: function (args) {send("NdrEncapsulatedUnionFree");}});

var NdrEncapsulatedUnionMarshall = Module.findExportByName("rpcrt4.dll", "NdrEncapsulatedUnionMarshall")
Interceptor.attach(NdrEncapsulatedUnionMarshall, {onLeave: function (args) {send("NdrEncapsulatedUnionMarshall");}});

var NdrEncapsulatedUnionMemorySize = Module.findExportByName("rpcrt4.dll", "NdrEncapsulatedUnionMemorySize")
Interceptor.attach(NdrEncapsulatedUnionMemorySize, {onLeave: function (args) {send("NdrEncapsulatedUnionMemorySize");}});

var NdrEncapsulatedUnionUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrEncapsulatedUnionUnmarshall")
Interceptor.attach(NdrEncapsulatedUnionUnmarshall, {onLeave: function (args) {send("NdrEncapsulatedUnionUnmarshall");}});

var NdrFixedArrayBufferSize = Module.findExportByName("rpcrt4.dll", "NdrFixedArrayBufferSize")
Interceptor.attach(NdrFixedArrayBufferSize, {onLeave: function (args) {send("NdrFixedArrayBufferSize");}});

var NdrFixedArrayFree = Module.findExportByName("rpcrt4.dll", "NdrFixedArrayFree")
Interceptor.attach(NdrFixedArrayFree, {onLeave: function (args) {send("NdrFixedArrayFree");}});

var NdrFixedArrayMarshall = Module.findExportByName("rpcrt4.dll", "NdrFixedArrayMarshall")
Interceptor.attach(NdrFixedArrayMarshall, {onLeave: function (args) {send("NdrFixedArrayMarshall");}});

var NdrFixedArrayMemorySize = Module.findExportByName("rpcrt4.dll", "NdrFixedArrayMemorySize")
Interceptor.attach(NdrFixedArrayMemorySize, {onLeave: function (args) {send("NdrFixedArrayMemorySize");}});

var NdrFixedArrayUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrFixedArrayUnmarshall")
Interceptor.attach(NdrFixedArrayUnmarshall, {onLeave: function (args) {send("NdrFixedArrayUnmarshall");}});

var NdrFreeBuffer = Module.findExportByName("rpcrt4.dll", "NdrFreeBuffer")
Interceptor.attach(NdrFreeBuffer, {onLeave: function (args) {send("NdrFreeBuffer");}});

var NdrFullPointerFree = Module.findExportByName("rpcrt4.dll", "NdrFullPointerFree")
Interceptor.attach(NdrFullPointerFree, {onLeave: function (args) {send("NdrFullPointerFree");}});

var NdrFullPointerInsertRefId = Module.findExportByName("rpcrt4.dll", "NdrFullPointerInsertRefId")
Interceptor.attach(NdrFullPointerInsertRefId, {onLeave: function (args) {send("NdrFullPointerInsertRefId");}});

var NdrFullPointerQueryPointer = Module.findExportByName("rpcrt4.dll", "NdrFullPointerQueryPointer")
Interceptor.attach(NdrFullPointerQueryPointer, {onLeave: function (args) {send("NdrFullPointerQueryPointer");}});

var NdrFullPointerQueryRefId = Module.findExportByName("rpcrt4.dll", "NdrFullPointerQueryRefId")
Interceptor.attach(NdrFullPointerQueryRefId, {onLeave: function (args) {send("NdrFullPointerQueryRefId");}});

var NdrFullPointerXlatFree = Module.findExportByName("rpcrt4.dll", "NdrFullPointerXlatFree")
Interceptor.attach(NdrFullPointerXlatFree, {onLeave: function (args) {send("NdrFullPointerXlatFree");}});

var NdrFullPointerXlatInit = Module.findExportByName("rpcrt4.dll", "NdrFullPointerXlatInit")
Interceptor.attach(NdrFullPointerXlatInit, {onLeave: function (args) {send("NdrFullPointerXlatInit");}});

var NdrGetBaseInterfaceFromStub = Module.findExportByName("rpcrt4.dll", "NdrGetBaseInterfaceFromStub")
Interceptor.attach(NdrGetBaseInterfaceFromStub, {onLeave: function (args) {send("NdrGetBaseInterfaceFromStub");}});

var NdrGetBuffer = Module.findExportByName("rpcrt4.dll", "NdrGetBuffer")
Interceptor.attach(NdrGetBuffer, {onLeave: function (args) {send("NdrGetBuffer");}});

var NdrGetDcomProtocolVersion = Module.findExportByName("rpcrt4.dll", "NdrGetDcomProtocolVersion")
Interceptor.attach(NdrGetDcomProtocolVersion, {onLeave: function (args) {send("NdrGetDcomProtocolVersion");}});

var NdrGetSimpleTypeBufferAlignment = Module.findExportByName("rpcrt4.dll", "NdrGetSimpleTypeBufferAlignment")
Interceptor.attach(NdrGetSimpleTypeBufferAlignment, {onLeave: function (args) {send("NdrGetSimpleTypeBufferAlignment");}});

var NdrGetSimpleTypeBufferSize = Module.findExportByName("rpcrt4.dll", "NdrGetSimpleTypeBufferSize")
Interceptor.attach(NdrGetSimpleTypeBufferSize, {onLeave: function (args) {send("NdrGetSimpleTypeBufferSize");}});

var NdrGetSimpleTypeMemorySize = Module.findExportByName("rpcrt4.dll", "NdrGetSimpleTypeMemorySize")
Interceptor.attach(NdrGetSimpleTypeMemorySize, {onLeave: function (args) {send("NdrGetSimpleTypeMemorySize");}});

var NdrGetTypeFlags = Module.findExportByName("rpcrt4.dll", "NdrGetTypeFlags")
Interceptor.attach(NdrGetTypeFlags, {onLeave: function (args) {send("NdrGetTypeFlags");}});

var NdrGetUserMarshalInfo = Module.findExportByName("rpcrt4.dll", "NdrGetUserMarshalInfo")
Interceptor.attach(NdrGetUserMarshalInfo, {onLeave: function (args) {send("NdrGetUserMarshalInfo");}});

var NdrInterfacePointerBufferSize = Module.findExportByName("rpcrt4.dll", "NdrInterfacePointerBufferSize")
Interceptor.attach(NdrInterfacePointerBufferSize, {onLeave: function (args) {send("NdrInterfacePointerBufferSize");}});

var NdrInterfacePointerFree = Module.findExportByName("rpcrt4.dll", "NdrInterfacePointerFree")
Interceptor.attach(NdrInterfacePointerFree, {onLeave: function (args) {send("NdrInterfacePointerFree");}});

var NdrInterfacePointerMarshall = Module.findExportByName("rpcrt4.dll", "NdrInterfacePointerMarshall")
Interceptor.attach(NdrInterfacePointerMarshall, {onLeave: function (args) {send("NdrInterfacePointerMarshall");}});

var NdrInterfacePointerMemorySize = Module.findExportByName("rpcrt4.dll", "NdrInterfacePointerMemorySize")
Interceptor.attach(NdrInterfacePointerMemorySize, {onLeave: function (args) {send("NdrInterfacePointerMemorySize");}});

var NdrInterfacePointerUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrInterfacePointerUnmarshall")
Interceptor.attach(NdrInterfacePointerUnmarshall, {onLeave: function (args) {send("NdrInterfacePointerUnmarshall");}});

var NdrMapCommAndFaultStatus = Module.findExportByName("rpcrt4.dll", "NdrMapCommAndFaultStatus")
Interceptor.attach(NdrMapCommAndFaultStatus, {onLeave: function (args) {send("NdrMapCommAndFaultStatus");}});

var NdrMesProcEncodeDecode = Module.findExportByName("rpcrt4.dll", "NdrMesProcEncodeDecode")
Interceptor.attach(NdrMesProcEncodeDecode, {onLeave: function (args) {send("NdrMesProcEncodeDecode");}});

var NdrMesProcEncodeDecode2 = Module.findExportByName("rpcrt4.dll", "NdrMesProcEncodeDecode2")
Interceptor.attach(NdrMesProcEncodeDecode2, {onLeave: function (args) {send("NdrMesProcEncodeDecode2");}});

var NdrMesProcEncodeDecode3 = Module.findExportByName("rpcrt4.dll", "NdrMesProcEncodeDecode3")
Interceptor.attach(NdrMesProcEncodeDecode3, {onLeave: function (args) {send("NdrMesProcEncodeDecode3");}});

var NdrMesSimpleTypeAlignSize = Module.findExportByName("rpcrt4.dll", "NdrMesSimpleTypeAlignSize")
Interceptor.attach(NdrMesSimpleTypeAlignSize, {onLeave: function (args) {send("NdrMesSimpleTypeAlignSize");}});

var NdrMesSimpleTypeAlignSizeAll = Module.findExportByName("rpcrt4.dll", "NdrMesSimpleTypeAlignSizeAll")
Interceptor.attach(NdrMesSimpleTypeAlignSizeAll, {onLeave: function (args) {send("NdrMesSimpleTypeAlignSizeAll");}});

var NdrMesSimpleTypeDecode = Module.findExportByName("rpcrt4.dll", "NdrMesSimpleTypeDecode")
Interceptor.attach(NdrMesSimpleTypeDecode, {onLeave: function (args) {send("NdrMesSimpleTypeDecode");}});

var NdrMesSimpleTypeDecodeAll = Module.findExportByName("rpcrt4.dll", "NdrMesSimpleTypeDecodeAll")
Interceptor.attach(NdrMesSimpleTypeDecodeAll, {onLeave: function (args) {send("NdrMesSimpleTypeDecodeAll");}});

var NdrMesSimpleTypeEncode = Module.findExportByName("rpcrt4.dll", "NdrMesSimpleTypeEncode")
Interceptor.attach(NdrMesSimpleTypeEncode, {onLeave: function (args) {send("NdrMesSimpleTypeEncode");}});

var NdrMesSimpleTypeEncodeAll = Module.findExportByName("rpcrt4.dll", "NdrMesSimpleTypeEncodeAll")
Interceptor.attach(NdrMesSimpleTypeEncodeAll, {onLeave: function (args) {send("NdrMesSimpleTypeEncodeAll");}});

var NdrMesTypeAlignSize = Module.findExportByName("rpcrt4.dll", "NdrMesTypeAlignSize")
Interceptor.attach(NdrMesTypeAlignSize, {onLeave: function (args) {send("NdrMesTypeAlignSize");}});

var NdrMesTypeAlignSize2 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeAlignSize2")
Interceptor.attach(NdrMesTypeAlignSize2, {onLeave: function (args) {send("NdrMesTypeAlignSize2");}});

var NdrMesTypeAlignSize3 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeAlignSize3")
Interceptor.attach(NdrMesTypeAlignSize3, {onLeave: function (args) {send("NdrMesTypeAlignSize3");}});

var NdrMesTypeDecode = Module.findExportByName("rpcrt4.dll", "NdrMesTypeDecode")
Interceptor.attach(NdrMesTypeDecode, {onLeave: function (args) {send("NdrMesTypeDecode");}});

var NdrMesTypeDecode2 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeDecode2")
Interceptor.attach(NdrMesTypeDecode2, {onLeave: function (args) {send("NdrMesTypeDecode2");}});

var NdrMesTypeDecode3 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeDecode3")
Interceptor.attach(NdrMesTypeDecode3, {onLeave: function (args) {send("NdrMesTypeDecode3");}});

var NdrMesTypeEncode = Module.findExportByName("rpcrt4.dll", "NdrMesTypeEncode")
Interceptor.attach(NdrMesTypeEncode, {onLeave: function (args) {send("NdrMesTypeEncode");}});

var NdrMesTypeEncode2 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeEncode2")
Interceptor.attach(NdrMesTypeEncode2, {onLeave: function (args) {send("NdrMesTypeEncode2");}});

var NdrMesTypeEncode3 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeEncode3")
Interceptor.attach(NdrMesTypeEncode3, {onLeave: function (args) {send("NdrMesTypeEncode3");}});

var NdrMesTypeFree2 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeFree2")
Interceptor.attach(NdrMesTypeFree2, {onLeave: function (args) {send("NdrMesTypeFree2");}});

var NdrMesTypeFree3 = Module.findExportByName("rpcrt4.dll", "NdrMesTypeFree3")
Interceptor.attach(NdrMesTypeFree3, {onLeave: function (args) {send("NdrMesTypeFree3");}});

var NdrNonConformantStringBufferSize = Module.findExportByName("rpcrt4.dll", "NdrNonConformantStringBufferSize")
Interceptor.attach(NdrNonConformantStringBufferSize, {onLeave: function (args) {send("NdrNonConformantStringBufferSize");}});

var NdrNonConformantStringMarshall = Module.findExportByName("rpcrt4.dll", "NdrNonConformantStringMarshall")
Interceptor.attach(NdrNonConformantStringMarshall, {onLeave: function (args) {send("NdrNonConformantStringMarshall");}});

var NdrNonConformantStringMemorySize = Module.findExportByName("rpcrt4.dll", "NdrNonConformantStringMemorySize")
Interceptor.attach(NdrNonConformantStringMemorySize, {onLeave: function (args) {send("NdrNonConformantStringMemorySize");}});

var NdrNonConformantStringUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrNonConformantStringUnmarshall")
Interceptor.attach(NdrNonConformantStringUnmarshall, {onLeave: function (args) {send("NdrNonConformantStringUnmarshall");}});

var NdrNonEncapsulatedUnionBufferSize = Module.findExportByName("rpcrt4.dll", "NdrNonEncapsulatedUnionBufferSize")
Interceptor.attach(NdrNonEncapsulatedUnionBufferSize, {onLeave: function (args) {send("NdrNonEncapsulatedUnionBufferSize");}});

var NdrNonEncapsulatedUnionFree = Module.findExportByName("rpcrt4.dll", "NdrNonEncapsulatedUnionFree")
Interceptor.attach(NdrNonEncapsulatedUnionFree, {onLeave: function (args) {send("NdrNonEncapsulatedUnionFree");}});

var NdrNonEncapsulatedUnionMarshall = Module.findExportByName("rpcrt4.dll", "NdrNonEncapsulatedUnionMarshall")
Interceptor.attach(NdrNonEncapsulatedUnionMarshall, {onLeave: function (args) {send("NdrNonEncapsulatedUnionMarshall");}});

var NdrNonEncapsulatedUnionMemorySize = Module.findExportByName("rpcrt4.dll", "NdrNonEncapsulatedUnionMemorySize")
Interceptor.attach(NdrNonEncapsulatedUnionMemorySize, {onLeave: function (args) {send("NdrNonEncapsulatedUnionMemorySize");}});

var NdrNonEncapsulatedUnionUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrNonEncapsulatedUnionUnmarshall")
Interceptor.attach(NdrNonEncapsulatedUnionUnmarshall, {onLeave: function (args) {send("NdrNonEncapsulatedUnionUnmarshall");}});

var NdrNsGetBuffer = Module.findExportByName("rpcrt4.dll", "NdrNsGetBuffer")
Interceptor.attach(NdrNsGetBuffer, {onLeave: function (args) {send("NdrNsGetBuffer");}});

var NdrNsSendReceive = Module.findExportByName("rpcrt4.dll", "NdrNsSendReceive")
Interceptor.attach(NdrNsSendReceive, {onLeave: function (args) {send("NdrNsSendReceive");}});

var NdrOleAllocate = Module.findExportByName("rpcrt4.dll", "NdrOleAllocate")
Interceptor.attach(NdrOleAllocate, {onLeave: function (args) {send("NdrOleAllocate");}});

var NdrOleFree = Module.findExportByName("rpcrt4.dll", "NdrOleFree")
Interceptor.attach(NdrOleFree, {onLeave: function (args) {send("NdrOleFree");}});

var NdrOutInit = Module.findExportByName("rpcrt4.dll", "NdrOutInit")
Interceptor.attach(NdrOutInit, {onLeave: function (args) {send("NdrOutInit");}});

var NdrPartialIgnoreClientBufferSize = Module.findExportByName("rpcrt4.dll", "NdrPartialIgnoreClientBufferSize")
Interceptor.attach(NdrPartialIgnoreClientBufferSize, {onLeave: function (args) {send("NdrPartialIgnoreClientBufferSize");}});

var NdrPartialIgnoreClientMarshall = Module.findExportByName("rpcrt4.dll", "NdrPartialIgnoreClientMarshall")
Interceptor.attach(NdrPartialIgnoreClientMarshall, {onLeave: function (args) {send("NdrPartialIgnoreClientMarshall");}});

var NdrPartialIgnoreServerInitialize = Module.findExportByName("rpcrt4.dll", "NdrPartialIgnoreServerInitialize")
Interceptor.attach(NdrPartialIgnoreServerInitialize, {onLeave: function (args) {send("NdrPartialIgnoreServerInitialize");}});

var NdrPartialIgnoreServerUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrPartialIgnoreServerUnmarshall")
Interceptor.attach(NdrPartialIgnoreServerUnmarshall, {onLeave: function (args) {send("NdrPartialIgnoreServerUnmarshall");}});

var NdrPointerBufferSize = Module.findExportByName("rpcrt4.dll", "NdrPointerBufferSize")
Interceptor.attach(NdrPointerBufferSize, {onLeave: function (args) {send("NdrPointerBufferSize");}});

var NdrPointerFree = Module.findExportByName("rpcrt4.dll", "NdrPointerFree")
Interceptor.attach(NdrPointerFree, {onLeave: function (args) {send("NdrPointerFree");}});

var NdrPointerMarshall = Module.findExportByName("rpcrt4.dll", "NdrPointerMarshall")
Interceptor.attach(NdrPointerMarshall, {onLeave: function (args) {send("NdrPointerMarshall");}});

var NdrPointerMemorySize = Module.findExportByName("rpcrt4.dll", "NdrPointerMemorySize")
Interceptor.attach(NdrPointerMemorySize, {onLeave: function (args) {send("NdrPointerMemorySize");}});

var NdrPointerUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrPointerUnmarshall")
Interceptor.attach(NdrPointerUnmarshall, {onLeave: function (args) {send("NdrPointerUnmarshall");}});

var NdrProxyErrorHandler = Module.findExportByName("rpcrt4.dll", "NdrProxyErrorHandler")
Interceptor.attach(NdrProxyErrorHandler, {onLeave: function (args) {send("NdrProxyErrorHandler");}});

var NdrProxyFreeBuffer = Module.findExportByName("rpcrt4.dll", "NdrProxyFreeBuffer")
Interceptor.attach(NdrProxyFreeBuffer, {onLeave: function (args) {send("NdrProxyFreeBuffer");}});

var NdrProxyGetBuffer = Module.findExportByName("rpcrt4.dll", "NdrProxyGetBuffer")
Interceptor.attach(NdrProxyGetBuffer, {onLeave: function (args) {send("NdrProxyGetBuffer");}});

var NdrProxyInitialize = Module.findExportByName("rpcrt4.dll", "NdrProxyInitialize")
Interceptor.attach(NdrProxyInitialize, {onLeave: function (args) {send("NdrProxyInitialize");}});

var NdrProxySendReceive = Module.findExportByName("rpcrt4.dll", "NdrProxySendReceive")
Interceptor.attach(NdrProxySendReceive, {onLeave: function (args) {send("NdrProxySendReceive");}});

var NdrRangeUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrRangeUnmarshall")
Interceptor.attach(NdrRangeUnmarshall, {onLeave: function (args) {send("NdrRangeUnmarshall");}});

var NdrRpcSmClientAllocate = Module.findExportByName("rpcrt4.dll", "NdrRpcSmClientAllocate")
Interceptor.attach(NdrRpcSmClientAllocate, {onLeave: function (args) {send("NdrRpcSmClientAllocate");}});

var NdrRpcSmClientFree = Module.findExportByName("rpcrt4.dll", "NdrRpcSmClientFree")
Interceptor.attach(NdrRpcSmClientFree, {onLeave: function (args) {send("NdrRpcSmClientFree");}});

var NdrRpcSmSetClientToOsf = Module.findExportByName("rpcrt4.dll", "NdrRpcSmSetClientToOsf")
Interceptor.attach(NdrRpcSmSetClientToOsf, {onLeave: function (args) {send("NdrRpcSmSetClientToOsf");}});

var NdrRpcSsDefaultAllocate = Module.findExportByName("rpcrt4.dll", "NdrRpcSsDefaultAllocate")
Interceptor.attach(NdrRpcSsDefaultAllocate, {onLeave: function (args) {send("NdrRpcSsDefaultAllocate");}});

var NdrRpcSsDefaultFree = Module.findExportByName("rpcrt4.dll", "NdrRpcSsDefaultFree")
Interceptor.attach(NdrRpcSsDefaultFree, {onLeave: function (args) {send("NdrRpcSsDefaultFree");}});

var NdrRpcSsDisableAllocate = Module.findExportByName("rpcrt4.dll", "NdrRpcSsDisableAllocate")
Interceptor.attach(NdrRpcSsDisableAllocate, {onLeave: function (args) {send("NdrRpcSsDisableAllocate");}});

var NdrRpcSsEnableAllocate = Module.findExportByName("rpcrt4.dll", "NdrRpcSsEnableAllocate")
Interceptor.attach(NdrRpcSsEnableAllocate, {onLeave: function (args) {send("NdrRpcSsEnableAllocate");}});

var NdrSendReceive = Module.findExportByName("rpcrt4.dll", "NdrSendReceive")
Interceptor.attach(NdrSendReceive, {onLeave: function (args) {send("NdrSendReceive");}});

var NdrServerCall2 = Module.findExportByName("rpcrt4.dll", "NdrServerCall2")
Interceptor.attach(NdrServerCall2, {onLeave: function (args) {send("NdrServerCall2");}});

var NdrServerCallAll = Module.findExportByName("rpcrt4.dll", "NdrServerCallAll")
Interceptor.attach(NdrServerCallAll, {onLeave: function (args) {send("NdrServerCallAll");}});

var NdrServerCallNdr64 = Module.findExportByName("rpcrt4.dll", "NdrServerCallNdr64")
Interceptor.attach(NdrServerCallNdr64, {onLeave: function (args) {send("NdrServerCallNdr64");}});

var NdrServerContextMarshall = Module.findExportByName("rpcrt4.dll", "NdrServerContextMarshall")
Interceptor.attach(NdrServerContextMarshall, {onLeave: function (args) {send("NdrServerContextMarshall");}});

var NdrServerContextNewMarshall = Module.findExportByName("rpcrt4.dll", "NdrServerContextNewMarshall")
Interceptor.attach(NdrServerContextNewMarshall, {onLeave: function (args) {send("NdrServerContextNewMarshall");}});

var NdrServerContextNewUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrServerContextNewUnmarshall")
Interceptor.attach(NdrServerContextNewUnmarshall, {onLeave: function (args) {send("NdrServerContextNewUnmarshall");}});

var NdrServerContextUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrServerContextUnmarshall")
Interceptor.attach(NdrServerContextUnmarshall, {onLeave: function (args) {send("NdrServerContextUnmarshall");}});

var NdrServerInitialize = Module.findExportByName("rpcrt4.dll", "NdrServerInitialize")
Interceptor.attach(NdrServerInitialize, {onLeave: function (args) {send("NdrServerInitialize");}});

var NdrServerInitializeMarshall = Module.findExportByName("rpcrt4.dll", "NdrServerInitializeMarshall")
Interceptor.attach(NdrServerInitializeMarshall, {onLeave: function (args) {send("NdrServerInitializeMarshall");}});

var NdrServerInitializeNew = Module.findExportByName("rpcrt4.dll", "NdrServerInitializeNew")
Interceptor.attach(NdrServerInitializeNew, {onLeave: function (args) {send("NdrServerInitializeNew");}});

var NdrServerInitializePartial = Module.findExportByName("rpcrt4.dll", "NdrServerInitializePartial")
Interceptor.attach(NdrServerInitializePartial, {onLeave: function (args) {send("NdrServerInitializePartial");}});

var NdrServerInitializeUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrServerInitializeUnmarshall")
Interceptor.attach(NdrServerInitializeUnmarshall, {onLeave: function (args) {send("NdrServerInitializeUnmarshall");}});

var NdrSimpleStructBufferSize = Module.findExportByName("rpcrt4.dll", "NdrSimpleStructBufferSize")
Interceptor.attach(NdrSimpleStructBufferSize, {onLeave: function (args) {send("NdrSimpleStructBufferSize");}});

var NdrSimpleStructFree = Module.findExportByName("rpcrt4.dll", "NdrSimpleStructFree")
Interceptor.attach(NdrSimpleStructFree, {onLeave: function (args) {send("NdrSimpleStructFree");}});

var NdrSimpleStructMarshall = Module.findExportByName("rpcrt4.dll", "NdrSimpleStructMarshall")
Interceptor.attach(NdrSimpleStructMarshall, {onLeave: function (args) {send("NdrSimpleStructMarshall");}});

var NdrSimpleStructMemorySize = Module.findExportByName("rpcrt4.dll", "NdrSimpleStructMemorySize")
Interceptor.attach(NdrSimpleStructMemorySize, {onLeave: function (args) {send("NdrSimpleStructMemorySize");}});

var NdrSimpleStructUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrSimpleStructUnmarshall")
Interceptor.attach(NdrSimpleStructUnmarshall, {onLeave: function (args) {send("NdrSimpleStructUnmarshall");}});

var NdrSimpleTypeMarshall = Module.findExportByName("rpcrt4.dll", "NdrSimpleTypeMarshall")
Interceptor.attach(NdrSimpleTypeMarshall, {onLeave: function (args) {send("NdrSimpleTypeMarshall");}});

var NdrSimpleTypeUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrSimpleTypeUnmarshall")
Interceptor.attach(NdrSimpleTypeUnmarshall, {onLeave: function (args) {send("NdrSimpleTypeUnmarshall");}});

var NdrStubCall2 = Module.findExportByName("rpcrt4.dll", "NdrStubCall2")
Interceptor.attach(NdrStubCall2, {onLeave: function (args) {send("NdrStubCall2");}});

var NdrStubCall3 = Module.findExportByName("rpcrt4.dll", "NdrStubCall3")
Interceptor.attach(NdrStubCall3, {onLeave: function (args) {send("NdrStubCall3");}});

var NdrStubForwardingFunction = Module.findExportByName("rpcrt4.dll", "NdrStubForwardingFunction")
Interceptor.attach(NdrStubForwardingFunction, {onLeave: function (args) {send("NdrStubForwardingFunction");}});

var NdrStubGetBuffer = Module.findExportByName("rpcrt4.dll", "NdrStubGetBuffer")
Interceptor.attach(NdrStubGetBuffer, {onLeave: function (args) {send("NdrStubGetBuffer");}});

var NdrStubInitialize = Module.findExportByName("rpcrt4.dll", "NdrStubInitialize")
Interceptor.attach(NdrStubInitialize, {onLeave: function (args) {send("NdrStubInitialize");}});

var NdrStubInitializeMarshall = Module.findExportByName("rpcrt4.dll", "NdrStubInitializeMarshall")
Interceptor.attach(NdrStubInitializeMarshall, {onLeave: function (args) {send("NdrStubInitializeMarshall");}});

var NdrTypeFlags = Module.findExportByName("rpcrt4.dll", "NdrTypeFlags")
Interceptor.attach(NdrTypeFlags, {onLeave: function (args) {send("NdrTypeFlags");}});

var NdrTypeFree = Module.findExportByName("rpcrt4.dll", "NdrTypeFree")
Interceptor.attach(NdrTypeFree, {onLeave: function (args) {send("NdrTypeFree");}});

var NdrTypeMarshall = Module.findExportByName("rpcrt4.dll", "NdrTypeMarshall")
Interceptor.attach(NdrTypeMarshall, {onLeave: function (args) {send("NdrTypeMarshall");}});

var NdrTypeSize = Module.findExportByName("rpcrt4.dll", "NdrTypeSize")
Interceptor.attach(NdrTypeSize, {onLeave: function (args) {send("NdrTypeSize");}});

var NdrTypeUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrTypeUnmarshall")
Interceptor.attach(NdrTypeUnmarshall, {onLeave: function (args) {send("NdrTypeUnmarshall");}});

var NdrUnmarshallBasetypeInline = Module.findExportByName("rpcrt4.dll", "NdrUnmarshallBasetypeInline")
Interceptor.attach(NdrUnmarshallBasetypeInline, {onLeave: function (args) {send("NdrUnmarshallBasetypeInline");}});

var NdrUserMarshalBufferSize = Module.findExportByName("rpcrt4.dll", "NdrUserMarshalBufferSize")
Interceptor.attach(NdrUserMarshalBufferSize, {onLeave: function (args) {send("NdrUserMarshalBufferSize");}});

var NdrUserMarshalFree = Module.findExportByName("rpcrt4.dll", "NdrUserMarshalFree")
Interceptor.attach(NdrUserMarshalFree, {onLeave: function (args) {send("NdrUserMarshalFree");}});

var NdrUserMarshalMarshall = Module.findExportByName("rpcrt4.dll", "NdrUserMarshalMarshall")
Interceptor.attach(NdrUserMarshalMarshall, {onLeave: function (args) {send("NdrUserMarshalMarshall");}});

var NdrUserMarshalMemorySize = Module.findExportByName("rpcrt4.dll", "NdrUserMarshalMemorySize")
Interceptor.attach(NdrUserMarshalMemorySize, {onLeave: function (args) {send("NdrUserMarshalMemorySize");}});

var NdrUserMarshalSimpleTypeConvert = Module.findExportByName("rpcrt4.dll", "NdrUserMarshalSimpleTypeConvert")
Interceptor.attach(NdrUserMarshalSimpleTypeConvert, {onLeave: function (args) {send("NdrUserMarshalSimpleTypeConvert");}});

var NdrUserMarshalUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrUserMarshalUnmarshall")
Interceptor.attach(NdrUserMarshalUnmarshall, {onLeave: function (args) {send("NdrUserMarshalUnmarshall");}});

var NdrVaryingArrayBufferSize = Module.findExportByName("rpcrt4.dll", "NdrVaryingArrayBufferSize")
Interceptor.attach(NdrVaryingArrayBufferSize, {onLeave: function (args) {send("NdrVaryingArrayBufferSize");}});

var NdrVaryingArrayFree = Module.findExportByName("rpcrt4.dll", "NdrVaryingArrayFree")
Interceptor.attach(NdrVaryingArrayFree, {onLeave: function (args) {send("NdrVaryingArrayFree");}});

var NdrVaryingArrayMarshall = Module.findExportByName("rpcrt4.dll", "NdrVaryingArrayMarshall")
Interceptor.attach(NdrVaryingArrayMarshall, {onLeave: function (args) {send("NdrVaryingArrayMarshall");}});

var NdrVaryingArrayMemorySize = Module.findExportByName("rpcrt4.dll", "NdrVaryingArrayMemorySize")
Interceptor.attach(NdrVaryingArrayMemorySize, {onLeave: function (args) {send("NdrVaryingArrayMemorySize");}});

var NdrVaryingArrayUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrVaryingArrayUnmarshall")
Interceptor.attach(NdrVaryingArrayUnmarshall, {onLeave: function (args) {send("NdrVaryingArrayUnmarshall");}});

var NdrXmitOrRepAsBufferSize = Module.findExportByName("rpcrt4.dll", "NdrXmitOrRepAsBufferSize")
Interceptor.attach(NdrXmitOrRepAsBufferSize, {onLeave: function (args) {send("NdrXmitOrRepAsBufferSize");}});

var NdrXmitOrRepAsFree = Module.findExportByName("rpcrt4.dll", "NdrXmitOrRepAsFree")
Interceptor.attach(NdrXmitOrRepAsFree, {onLeave: function (args) {send("NdrXmitOrRepAsFree");}});

var NdrXmitOrRepAsMarshall = Module.findExportByName("rpcrt4.dll", "NdrXmitOrRepAsMarshall")
Interceptor.attach(NdrXmitOrRepAsMarshall, {onLeave: function (args) {send("NdrXmitOrRepAsMarshall");}});

var NdrXmitOrRepAsMemorySize = Module.findExportByName("rpcrt4.dll", "NdrXmitOrRepAsMemorySize")
Interceptor.attach(NdrXmitOrRepAsMemorySize, {onLeave: function (args) {send("NdrXmitOrRepAsMemorySize");}});

var NdrXmitOrRepAsUnmarshall = Module.findExportByName("rpcrt4.dll", "NdrXmitOrRepAsUnmarshall")
Interceptor.attach(NdrXmitOrRepAsUnmarshall, {onLeave: function (args) {send("NdrXmitOrRepAsUnmarshall");}});

var NdrpClientCall2 = Module.findExportByName("rpcrt4.dll", "NdrpClientCall2")
Interceptor.attach(NdrpClientCall2, {onLeave: function (args) {send("NdrpClientCall2");}});

var NdrpCreateProxy = Module.findExportByName("rpcrt4.dll", "NdrpCreateProxy")
Interceptor.attach(NdrpCreateProxy, {onLeave: function (args) {send("NdrpCreateProxy");}});

var NdrpCreateStub = Module.findExportByName("rpcrt4.dll", "NdrpCreateStub")
Interceptor.attach(NdrpCreateStub, {onLeave: function (args) {send("NdrpCreateStub");}});

var NdrpGetProcFormatString = Module.findExportByName("rpcrt4.dll", "NdrpGetProcFormatString")
Interceptor.attach(NdrpGetProcFormatString, {onLeave: function (args) {send("NdrpGetProcFormatString");}});

var NdrpGetTypeFormatString = Module.findExportByName("rpcrt4.dll", "NdrpGetTypeFormatString")
Interceptor.attach(NdrpGetTypeFormatString, {onLeave: function (args) {send("NdrpGetTypeFormatString");}});

var NdrpGetTypeGenCookie = Module.findExportByName("rpcrt4.dll", "NdrpGetTypeGenCookie")
Interceptor.attach(NdrpGetTypeGenCookie, {onLeave: function (args) {send("NdrpGetTypeGenCookie");}});

var NdrpMemoryIncrement = Module.findExportByName("rpcrt4.dll", "NdrpMemoryIncrement")
Interceptor.attach(NdrpMemoryIncrement, {onLeave: function (args) {send("NdrpMemoryIncrement");}});

var NdrpReleaseTypeFormatString = Module.findExportByName("rpcrt4.dll", "NdrpReleaseTypeFormatString")
Interceptor.attach(NdrpReleaseTypeFormatString, {onLeave: function (args) {send("NdrpReleaseTypeFormatString");}});

var NdrpReleaseTypeGenCookie = Module.findExportByName("rpcrt4.dll", "NdrpReleaseTypeGenCookie")
Interceptor.attach(NdrpReleaseTypeGenCookie, {onLeave: function (args) {send("NdrpReleaseTypeGenCookie");}});

var NdrpVarVtOfTypeDesc = Module.findExportByName("rpcrt4.dll", "NdrpVarVtOfTypeDesc")
Interceptor.attach(NdrpVarVtOfTypeDesc, {onLeave: function (args) {send("NdrpVarVtOfTypeDesc");}});

var RpcAsyncAbortCall = Module.findExportByName("rpcrt4.dll", "RpcAsyncAbortCall")
Interceptor.attach(RpcAsyncAbortCall, {onLeave: function (args) {send("RpcAsyncAbortCall");}});

var RpcAsyncCancelCall = Module.findExportByName("rpcrt4.dll", "RpcAsyncCancelCall")
Interceptor.attach(RpcAsyncCancelCall, {onLeave: function (args) {send("RpcAsyncCancelCall");}});

var RpcAsyncCompleteCall = Module.findExportByName("rpcrt4.dll", "RpcAsyncCompleteCall")
Interceptor.attach(RpcAsyncCompleteCall, {onLeave: function (args) {send("RpcAsyncCompleteCall");}});

var RpcAsyncGetCallStatus = Module.findExportByName("rpcrt4.dll", "RpcAsyncGetCallStatus")
Interceptor.attach(RpcAsyncGetCallStatus, {onLeave: function (args) {send("RpcAsyncGetCallStatus");}});

var RpcAsyncInitializeHandle = Module.findExportByName("rpcrt4.dll", "RpcAsyncInitializeHandle")
Interceptor.attach(RpcAsyncInitializeHandle, {onLeave: function (args) {send("RpcAsyncInitializeHandle");}});

var RpcAsyncRegisterInfo = Module.findExportByName("rpcrt4.dll", "RpcAsyncRegisterInfo")
Interceptor.attach(RpcAsyncRegisterInfo, {onLeave: function (args) {send("RpcAsyncRegisterInfo");}});

var RpcBindingBind = Module.findExportByName("rpcrt4.dll", "RpcBindingBind")
Interceptor.attach(RpcBindingBind, {onLeave: function (args) {send("RpcBindingBind");}});

var RpcBindingCopy = Module.findExportByName("rpcrt4.dll", "RpcBindingCopy")
Interceptor.attach(RpcBindingCopy, {onLeave: function (args) {send("RpcBindingCopy");}});

var RpcBindingCreateA = Module.findExportByName("rpcrt4.dll", "RpcBindingCreateA")
Interceptor.attach(RpcBindingCreateA, {onLeave: function (args) {send("RpcBindingCreateA");}});

var RpcBindingCreateW = Module.findExportByName("rpcrt4.dll", "RpcBindingCreateW")
Interceptor.attach(RpcBindingCreateW, {onLeave: function (args) {send("RpcBindingCreateW");}});

var RpcBindingFree = Module.findExportByName("rpcrt4.dll", "RpcBindingFree")
Interceptor.attach(RpcBindingFree, {onLeave: function (args) {send("RpcBindingFree");}});

var RpcBindingFromStringBindingA = Module.findExportByName("rpcrt4.dll", "RpcBindingFromStringBindingA")
Interceptor.attach(RpcBindingFromStringBindingA, {onLeave: function (args) {send("RpcBindingFromStringBindingA");}});

var RpcBindingFromStringBindingW = Module.findExportByName("rpcrt4.dll", "RpcBindingFromStringBindingW")
Interceptor.attach(RpcBindingFromStringBindingW, {onLeave: function (args) {send("RpcBindingFromStringBindingW");}});

var RpcBindingInqAuthClientA = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthClientA")
Interceptor.attach(RpcBindingInqAuthClientA, {onLeave: function (args) {send("RpcBindingInqAuthClientA");}});

var RpcBindingInqAuthClientExA = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthClientExA")
Interceptor.attach(RpcBindingInqAuthClientExA, {onLeave: function (args) {send("RpcBindingInqAuthClientExA");}});

var RpcBindingInqAuthClientExW = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthClientExW")
Interceptor.attach(RpcBindingInqAuthClientExW, {onLeave: function (args) {send("RpcBindingInqAuthClientExW");}});

var RpcBindingInqAuthClientW = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthClientW")
Interceptor.attach(RpcBindingInqAuthClientW, {onLeave: function (args) {send("RpcBindingInqAuthClientW");}});

var RpcBindingInqAuthInfoA = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthInfoA")
Interceptor.attach(RpcBindingInqAuthInfoA, {onLeave: function (args) {send("RpcBindingInqAuthInfoA");}});

var RpcBindingInqAuthInfoExA = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthInfoExA")
Interceptor.attach(RpcBindingInqAuthInfoExA, {onLeave: function (args) {send("RpcBindingInqAuthInfoExA");}});

var RpcBindingInqAuthInfoExW = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthInfoExW")
Interceptor.attach(RpcBindingInqAuthInfoExW, {onLeave: function (args) {send("RpcBindingInqAuthInfoExW");}});

var RpcBindingInqAuthInfoW = Module.findExportByName("rpcrt4.dll", "RpcBindingInqAuthInfoW")
Interceptor.attach(RpcBindingInqAuthInfoW, {onLeave: function (args) {send("RpcBindingInqAuthInfoW");}});

var RpcBindingInqMaxCalls = Module.findExportByName("rpcrt4.dll", "RpcBindingInqMaxCalls")
Interceptor.attach(RpcBindingInqMaxCalls, {onLeave: function (args) {send("RpcBindingInqMaxCalls");}});

var RpcBindingInqObject = Module.findExportByName("rpcrt4.dll", "RpcBindingInqObject")
Interceptor.attach(RpcBindingInqObject, {onLeave: function (args) {send("RpcBindingInqObject");}});

var RpcBindingInqOption = Module.findExportByName("rpcrt4.dll", "RpcBindingInqOption")
Interceptor.attach(RpcBindingInqOption, {onLeave: function (args) {send("RpcBindingInqOption");}});

var RpcBindingReset = Module.findExportByName("rpcrt4.dll", "RpcBindingReset")
Interceptor.attach(RpcBindingReset, {onLeave: function (args) {send("RpcBindingReset");}});

var RpcBindingServerFromClient = Module.findExportByName("rpcrt4.dll", "RpcBindingServerFromClient")
Interceptor.attach(RpcBindingServerFromClient, {onLeave: function (args) {send("RpcBindingServerFromClient");}});

var RpcBindingSetAuthInfoA = Module.findExportByName("rpcrt4.dll", "RpcBindingSetAuthInfoA")
Interceptor.attach(RpcBindingSetAuthInfoA, {onLeave: function (args) {send("RpcBindingSetAuthInfoA");}});

var RpcBindingSetAuthInfoExA = Module.findExportByName("rpcrt4.dll", "RpcBindingSetAuthInfoExA")
Interceptor.attach(RpcBindingSetAuthInfoExA, {onLeave: function (args) {send("RpcBindingSetAuthInfoExA");}});

var RpcBindingSetAuthInfoExW = Module.findExportByName("rpcrt4.dll", "RpcBindingSetAuthInfoExW")
Interceptor.attach(RpcBindingSetAuthInfoExW, {onLeave: function (args) {send("RpcBindingSetAuthInfoExW");}});

var RpcBindingSetAuthInfoW = Module.findExportByName("rpcrt4.dll", "RpcBindingSetAuthInfoW")
Interceptor.attach(RpcBindingSetAuthInfoW, {onLeave: function (args) {send("RpcBindingSetAuthInfoW");}});

var RpcBindingSetObject = Module.findExportByName("rpcrt4.dll", "RpcBindingSetObject")
Interceptor.attach(RpcBindingSetObject, {onLeave: function (args) {send("RpcBindingSetObject");}});

var RpcBindingSetOption = Module.findExportByName("rpcrt4.dll", "RpcBindingSetOption")
Interceptor.attach(RpcBindingSetOption, {onLeave: function (args) {send("RpcBindingSetOption");}});

var RpcBindingToStringBindingA = Module.findExportByName("rpcrt4.dll", "RpcBindingToStringBindingA")
Interceptor.attach(RpcBindingToStringBindingA, {onLeave: function (args) {send("RpcBindingToStringBindingA");}});

var RpcBindingToStringBindingW = Module.findExportByName("rpcrt4.dll", "RpcBindingToStringBindingW")
Interceptor.attach(RpcBindingToStringBindingW, {onLeave: function (args) {send("RpcBindingToStringBindingW");}});

var RpcBindingUnbind = Module.findExportByName("rpcrt4.dll", "RpcBindingUnbind")
Interceptor.attach(RpcBindingUnbind, {onLeave: function (args) {send("RpcBindingUnbind");}});

var RpcBindingVectorFree = Module.findExportByName("rpcrt4.dll", "RpcBindingVectorFree")
Interceptor.attach(RpcBindingVectorFree, {onLeave: function (args) {send("RpcBindingVectorFree");}});

var RpcCancelThread = Module.findExportByName("rpcrt4.dll", "RpcCancelThread")
Interceptor.attach(RpcCancelThread, {onLeave: function (args) {send("RpcCancelThread");}});

var RpcCancelThreadEx = Module.findExportByName("rpcrt4.dll", "RpcCancelThreadEx")
Interceptor.attach(RpcCancelThreadEx, {onLeave: function (args) {send("RpcCancelThreadEx");}});

var RpcCertGeneratePrincipalNameA = Module.findExportByName("rpcrt4.dll", "RpcCertGeneratePrincipalNameA")
Interceptor.attach(RpcCertGeneratePrincipalNameA, {onLeave: function (args) {send("RpcCertGeneratePrincipalNameA");}});

var RpcCertGeneratePrincipalNameW = Module.findExportByName("rpcrt4.dll", "RpcCertGeneratePrincipalNameW")
Interceptor.attach(RpcCertGeneratePrincipalNameW, {onLeave: function (args) {send("RpcCertGeneratePrincipalNameW");}});

var RpcCertMatchPrincipalName = Module.findExportByName("rpcrt4.dll", "RpcCertMatchPrincipalName")
Interceptor.attach(RpcCertMatchPrincipalName, {onLeave: function (args) {send("RpcCertMatchPrincipalName");}});

var RpcEpRegisterA = Module.findExportByName("rpcrt4.dll", "RpcEpRegisterA")
Interceptor.attach(RpcEpRegisterA, {onLeave: function (args) {send("RpcEpRegisterA");}});

var RpcEpRegisterNoReplaceA = Module.findExportByName("rpcrt4.dll", "RpcEpRegisterNoReplaceA")
Interceptor.attach(RpcEpRegisterNoReplaceA, {onLeave: function (args) {send("RpcEpRegisterNoReplaceA");}});

var RpcEpRegisterNoReplaceW = Module.findExportByName("rpcrt4.dll", "RpcEpRegisterNoReplaceW")
Interceptor.attach(RpcEpRegisterNoReplaceW, {onLeave: function (args) {send("RpcEpRegisterNoReplaceW");}});

var RpcEpRegisterW = Module.findExportByName("rpcrt4.dll", "RpcEpRegisterW")
Interceptor.attach(RpcEpRegisterW, {onLeave: function (args) {send("RpcEpRegisterW");}});

var RpcEpResolveBinding = Module.findExportByName("rpcrt4.dll", "RpcEpResolveBinding")
Interceptor.attach(RpcEpResolveBinding, {onLeave: function (args) {send("RpcEpResolveBinding");}});

var RpcEpUnregister = Module.findExportByName("rpcrt4.dll", "RpcEpUnregister")
Interceptor.attach(RpcEpUnregister, {onLeave: function (args) {send("RpcEpUnregister");}});

var RpcErrorAddRecord = Module.findExportByName("rpcrt4.dll", "RpcErrorAddRecord")
Interceptor.attach(RpcErrorAddRecord, {onLeave: function (args) {send("RpcErrorAddRecord");}});

var RpcErrorClearInformation = Module.findExportByName("rpcrt4.dll", "RpcErrorClearInformation")
Interceptor.attach(RpcErrorClearInformation, {onLeave: function (args) {send("RpcErrorClearInformation");}});

var RpcErrorEndEnumeration = Module.findExportByName("rpcrt4.dll", "RpcErrorEndEnumeration")
Interceptor.attach(RpcErrorEndEnumeration, {onLeave: function (args) {send("RpcErrorEndEnumeration");}});

var RpcErrorGetNextRecord = Module.findExportByName("rpcrt4.dll", "RpcErrorGetNextRecord")
Interceptor.attach(RpcErrorGetNextRecord, {onLeave: function (args) {send("RpcErrorGetNextRecord");}});

var RpcErrorGetNumberOfRecords = Module.findExportByName("rpcrt4.dll", "RpcErrorGetNumberOfRecords")
Interceptor.attach(RpcErrorGetNumberOfRecords, {onLeave: function (args) {send("RpcErrorGetNumberOfRecords");}});

var RpcErrorLoadErrorInfo = Module.findExportByName("rpcrt4.dll", "RpcErrorLoadErrorInfo")
Interceptor.attach(RpcErrorLoadErrorInfo, {onLeave: function (args) {send("RpcErrorLoadErrorInfo");}});

var RpcErrorResetEnumeration = Module.findExportByName("rpcrt4.dll", "RpcErrorResetEnumeration")
Interceptor.attach(RpcErrorResetEnumeration, {onLeave: function (args) {send("RpcErrorResetEnumeration");}});

var RpcErrorSaveErrorInfo = Module.findExportByName("rpcrt4.dll", "RpcErrorSaveErrorInfo")
Interceptor.attach(RpcErrorSaveErrorInfo, {onLeave: function (args) {send("RpcErrorSaveErrorInfo");}});

var RpcErrorStartEnumeration = Module.findExportByName("rpcrt4.dll", "RpcErrorStartEnumeration")
Interceptor.attach(RpcErrorStartEnumeration, {onLeave: function (args) {send("RpcErrorStartEnumeration");}});

var RpcExceptionFilter = Module.findExportByName("rpcrt4.dll", "RpcExceptionFilter")
Interceptor.attach(RpcExceptionFilter, {onLeave: function (args) {send("RpcExceptionFilter");}});

var RpcFreeAuthorizationContext = Module.findExportByName("rpcrt4.dll", "RpcFreeAuthorizationContext")
Interceptor.attach(RpcFreeAuthorizationContext, {onLeave: function (args) {send("RpcFreeAuthorizationContext");}});

var RpcGetAuthorizationContextForClient = Module.findExportByName("rpcrt4.dll", "RpcGetAuthorizationContextForClient")
Interceptor.attach(RpcGetAuthorizationContextForClient, {onLeave: function (args) {send("RpcGetAuthorizationContextForClient");}});

var RpcIfIdVectorFree = Module.findExportByName("rpcrt4.dll", "RpcIfIdVectorFree")
Interceptor.attach(RpcIfIdVectorFree, {onLeave: function (args) {send("RpcIfIdVectorFree");}});

var RpcIfInqId = Module.findExportByName("rpcrt4.dll", "RpcIfInqId")
Interceptor.attach(RpcIfInqId, {onLeave: function (args) {send("RpcIfInqId");}});

var RpcImpersonateClient = Module.findExportByName("rpcrt4.dll", "RpcImpersonateClient")
Interceptor.attach(RpcImpersonateClient, {onLeave: function (args) {send("RpcImpersonateClient");}});

var RpcImpersonateClient2 = Module.findExportByName("rpcrt4.dll", "RpcImpersonateClient2")
Interceptor.attach(RpcImpersonateClient2, {onLeave: function (args) {send("RpcImpersonateClient2");}});

var RpcImpersonateClientContainer = Module.findExportByName("rpcrt4.dll", "RpcImpersonateClientContainer")
Interceptor.attach(RpcImpersonateClientContainer, {onLeave: function (args) {send("RpcImpersonateClientContainer");}});

var RpcMgmtEnableIdleCleanup = Module.findExportByName("rpcrt4.dll", "RpcMgmtEnableIdleCleanup")
Interceptor.attach(RpcMgmtEnableIdleCleanup, {onLeave: function (args) {send("RpcMgmtEnableIdleCleanup");}});

var RpcMgmtEpEltInqBegin = Module.findExportByName("rpcrt4.dll", "RpcMgmtEpEltInqBegin")
Interceptor.attach(RpcMgmtEpEltInqBegin, {onLeave: function (args) {send("RpcMgmtEpEltInqBegin");}});

var RpcMgmtEpEltInqDone = Module.findExportByName("rpcrt4.dll", "RpcMgmtEpEltInqDone")
Interceptor.attach(RpcMgmtEpEltInqDone, {onLeave: function (args) {send("RpcMgmtEpEltInqDone");}});

var RpcMgmtEpEltInqNextA = Module.findExportByName("rpcrt4.dll", "RpcMgmtEpEltInqNextA")
Interceptor.attach(RpcMgmtEpEltInqNextA, {onLeave: function (args) {send("RpcMgmtEpEltInqNextA");}});

var RpcMgmtEpEltInqNextW = Module.findExportByName("rpcrt4.dll", "RpcMgmtEpEltInqNextW")
Interceptor.attach(RpcMgmtEpEltInqNextW, {onLeave: function (args) {send("RpcMgmtEpEltInqNextW");}});

var RpcMgmtEpUnregister = Module.findExportByName("rpcrt4.dll", "RpcMgmtEpUnregister")
Interceptor.attach(RpcMgmtEpUnregister, {onLeave: function (args) {send("RpcMgmtEpUnregister");}});

var RpcMgmtInqComTimeout = Module.findExportByName("rpcrt4.dll", "RpcMgmtInqComTimeout")
Interceptor.attach(RpcMgmtInqComTimeout, {onLeave: function (args) {send("RpcMgmtInqComTimeout");}});

var RpcMgmtInqDefaultProtectLevel = Module.findExportByName("rpcrt4.dll", "RpcMgmtInqDefaultProtectLevel")
Interceptor.attach(RpcMgmtInqDefaultProtectLevel, {onLeave: function (args) {send("RpcMgmtInqDefaultProtectLevel");}});

var RpcMgmtInqIfIds = Module.findExportByName("rpcrt4.dll", "RpcMgmtInqIfIds")
Interceptor.attach(RpcMgmtInqIfIds, {onLeave: function (args) {send("RpcMgmtInqIfIds");}});

var RpcMgmtInqServerPrincNameA = Module.findExportByName("rpcrt4.dll", "RpcMgmtInqServerPrincNameA")
Interceptor.attach(RpcMgmtInqServerPrincNameA, {onLeave: function (args) {send("RpcMgmtInqServerPrincNameA");}});

var RpcMgmtInqServerPrincNameW = Module.findExportByName("rpcrt4.dll", "RpcMgmtInqServerPrincNameW")
Interceptor.attach(RpcMgmtInqServerPrincNameW, {onLeave: function (args) {send("RpcMgmtInqServerPrincNameW");}});

var RpcMgmtInqStats = Module.findExportByName("rpcrt4.dll", "RpcMgmtInqStats")
Interceptor.attach(RpcMgmtInqStats, {onLeave: function (args) {send("RpcMgmtInqStats");}});

var RpcMgmtIsServerListening = Module.findExportByName("rpcrt4.dll", "RpcMgmtIsServerListening")
Interceptor.attach(RpcMgmtIsServerListening, {onLeave: function (args) {send("RpcMgmtIsServerListening");}});

var RpcMgmtSetAuthorizationFn = Module.findExportByName("rpcrt4.dll", "RpcMgmtSetAuthorizationFn")
Interceptor.attach(RpcMgmtSetAuthorizationFn, {onLeave: function (args) {send("RpcMgmtSetAuthorizationFn");}});

var RpcMgmtSetCancelTimeout = Module.findExportByName("rpcrt4.dll", "RpcMgmtSetCancelTimeout")
Interceptor.attach(RpcMgmtSetCancelTimeout, {onLeave: function (args) {send("RpcMgmtSetCancelTimeout");}});

var RpcMgmtSetComTimeout = Module.findExportByName("rpcrt4.dll", "RpcMgmtSetComTimeout")
Interceptor.attach(RpcMgmtSetComTimeout, {onLeave: function (args) {send("RpcMgmtSetComTimeout");}});

var RpcMgmtSetServerStackSize = Module.findExportByName("rpcrt4.dll", "RpcMgmtSetServerStackSize")
Interceptor.attach(RpcMgmtSetServerStackSize, {onLeave: function (args) {send("RpcMgmtSetServerStackSize");}});

var RpcMgmtStatsVectorFree = Module.findExportByName("rpcrt4.dll", "RpcMgmtStatsVectorFree")
Interceptor.attach(RpcMgmtStatsVectorFree, {onLeave: function (args) {send("RpcMgmtStatsVectorFree");}});

var RpcMgmtStopServerListening = Module.findExportByName("rpcrt4.dll", "RpcMgmtStopServerListening")
Interceptor.attach(RpcMgmtStopServerListening, {onLeave: function (args) {send("RpcMgmtStopServerListening");}});

var RpcMgmtWaitServerListen = Module.findExportByName("rpcrt4.dll", "RpcMgmtWaitServerListen")
Interceptor.attach(RpcMgmtWaitServerListen, {onLeave: function (args) {send("RpcMgmtWaitServerListen");}});

var RpcNetworkInqProtseqsA = Module.findExportByName("rpcrt4.dll", "RpcNetworkInqProtseqsA")
Interceptor.attach(RpcNetworkInqProtseqsA, {onLeave: function (args) {send("RpcNetworkInqProtseqsA");}});

var RpcNetworkInqProtseqsW = Module.findExportByName("rpcrt4.dll", "RpcNetworkInqProtseqsW")
Interceptor.attach(RpcNetworkInqProtseqsW, {onLeave: function (args) {send("RpcNetworkInqProtseqsW");}});

var RpcNetworkIsProtseqValidA = Module.findExportByName("rpcrt4.dll", "RpcNetworkIsProtseqValidA")
Interceptor.attach(RpcNetworkIsProtseqValidA, {onLeave: function (args) {send("RpcNetworkIsProtseqValidA");}});

var RpcNetworkIsProtseqValidW = Module.findExportByName("rpcrt4.dll", "RpcNetworkIsProtseqValidW")
Interceptor.attach(RpcNetworkIsProtseqValidW, {onLeave: function (args) {send("RpcNetworkIsProtseqValidW");}});

var RpcNsBindingInqEntryNameA = Module.findExportByName("rpcrt4.dll", "RpcNsBindingInqEntryNameA")
Interceptor.attach(RpcNsBindingInqEntryNameA, {onLeave: function (args) {send("RpcNsBindingInqEntryNameA");}});

var RpcNsBindingInqEntryNameW = Module.findExportByName("rpcrt4.dll", "RpcNsBindingInqEntryNameW")
Interceptor.attach(RpcNsBindingInqEntryNameW, {onLeave: function (args) {send("RpcNsBindingInqEntryNameW");}});

var RpcObjectInqType = Module.findExportByName("rpcrt4.dll", "RpcObjectInqType")
Interceptor.attach(RpcObjectInqType, {onLeave: function (args) {send("RpcObjectInqType");}});

var RpcObjectSetInqFn = Module.findExportByName("rpcrt4.dll", "RpcObjectSetInqFn")
Interceptor.attach(RpcObjectSetInqFn, {onLeave: function (args) {send("RpcObjectSetInqFn");}});

var RpcObjectSetType = Module.findExportByName("rpcrt4.dll", "RpcObjectSetType")
Interceptor.attach(RpcObjectSetType, {onLeave: function (args) {send("RpcObjectSetType");}});

var RpcProtseqVectorFreeA = Module.findExportByName("rpcrt4.dll", "RpcProtseqVectorFreeA")
Interceptor.attach(RpcProtseqVectorFreeA, {onLeave: function (args) {send("RpcProtseqVectorFreeA");}});

var RpcProtseqVectorFreeW = Module.findExportByName("rpcrt4.dll", "RpcProtseqVectorFreeW")
Interceptor.attach(RpcProtseqVectorFreeW, {onLeave: function (args) {send("RpcProtseqVectorFreeW");}});

var RpcRaiseException = Module.findExportByName("rpcrt4.dll", "RpcRaiseException")
Interceptor.attach(RpcRaiseException, {onLeave: function (args) {send("RpcRaiseException");}});

var RpcRevertContainerImpersonation = Module.findExportByName("rpcrt4.dll", "RpcRevertContainerImpersonation")
Interceptor.attach(RpcRevertContainerImpersonation, {onLeave: function (args) {send("RpcRevertContainerImpersonation");}});

var RpcRevertToSelf = Module.findExportByName("rpcrt4.dll", "RpcRevertToSelf")
Interceptor.attach(RpcRevertToSelf, {onLeave: function (args) {send("RpcRevertToSelf");}});

var RpcRevertToSelfEx = Module.findExportByName("rpcrt4.dll", "RpcRevertToSelfEx")
Interceptor.attach(RpcRevertToSelfEx, {onLeave: function (args) {send("RpcRevertToSelfEx");}});

var RpcServerCompleteSecurityCallback = Module.findExportByName("rpcrt4.dll", "RpcServerCompleteSecurityCallback")
Interceptor.attach(RpcServerCompleteSecurityCallback, {onLeave: function (args) {send("RpcServerCompleteSecurityCallback");}});

var RpcServerInqBindingHandle = Module.findExportByName("rpcrt4.dll", "RpcServerInqBindingHandle")
Interceptor.attach(RpcServerInqBindingHandle, {onLeave: function (args) {send("RpcServerInqBindingHandle");}});

var RpcServerInqBindings = Module.findExportByName("rpcrt4.dll", "RpcServerInqBindings")
Interceptor.attach(RpcServerInqBindings, {onLeave: function (args) {send("RpcServerInqBindings");}});

var RpcServerInqBindingsEx = Module.findExportByName("rpcrt4.dll", "RpcServerInqBindingsEx")
Interceptor.attach(RpcServerInqBindingsEx, {onLeave: function (args) {send("RpcServerInqBindingsEx");}});

var RpcServerInqCallAttributesA = Module.findExportByName("rpcrt4.dll", "RpcServerInqCallAttributesA")
Interceptor.attach(RpcServerInqCallAttributesA, {onLeave: function (args) {send("RpcServerInqCallAttributesA");}});

var RpcServerInqCallAttributesW = Module.findExportByName("rpcrt4.dll", "RpcServerInqCallAttributesW")
Interceptor.attach(RpcServerInqCallAttributesW, {onLeave: function (args) {send("RpcServerInqCallAttributesW");}});

var RpcServerInqDefaultPrincNameA = Module.findExportByName("rpcrt4.dll", "RpcServerInqDefaultPrincNameA")
Interceptor.attach(RpcServerInqDefaultPrincNameA, {onLeave: function (args) {send("RpcServerInqDefaultPrincNameA");}});

var RpcServerInqDefaultPrincNameW = Module.findExportByName("rpcrt4.dll", "RpcServerInqDefaultPrincNameW")
Interceptor.attach(RpcServerInqDefaultPrincNameW, {onLeave: function (args) {send("RpcServerInqDefaultPrincNameW");}});

var RpcServerInqIf = Module.findExportByName("rpcrt4.dll", "RpcServerInqIf")
Interceptor.attach(RpcServerInqIf, {onLeave: function (args) {send("RpcServerInqIf");}});

var RpcServerInterfaceGroupActivate = Module.findExportByName("rpcrt4.dll", "RpcServerInterfaceGroupActivate")
Interceptor.attach(RpcServerInterfaceGroupActivate, {onLeave: function (args) {send("RpcServerInterfaceGroupActivate");}});

var RpcServerInterfaceGroupClose = Module.findExportByName("rpcrt4.dll", "RpcServerInterfaceGroupClose")
Interceptor.attach(RpcServerInterfaceGroupClose, {onLeave: function (args) {send("RpcServerInterfaceGroupClose");}});

var RpcServerInterfaceGroupCreateA = Module.findExportByName("rpcrt4.dll", "RpcServerInterfaceGroupCreateA")
Interceptor.attach(RpcServerInterfaceGroupCreateA, {onLeave: function (args) {send("RpcServerInterfaceGroupCreateA");}});

var RpcServerInterfaceGroupCreateW = Module.findExportByName("rpcrt4.dll", "RpcServerInterfaceGroupCreateW")
Interceptor.attach(RpcServerInterfaceGroupCreateW, {onLeave: function (args) {send("RpcServerInterfaceGroupCreateW");}});

var RpcServerInterfaceGroupDeactivate = Module.findExportByName("rpcrt4.dll", "RpcServerInterfaceGroupDeactivate")
Interceptor.attach(RpcServerInterfaceGroupDeactivate, {onLeave: function (args) {send("RpcServerInterfaceGroupDeactivate");}});

var RpcServerInterfaceGroupInqBindings = Module.findExportByName("rpcrt4.dll", "RpcServerInterfaceGroupInqBindings")
Interceptor.attach(RpcServerInterfaceGroupInqBindings, {onLeave: function (args) {send("RpcServerInterfaceGroupInqBindings");}});

var RpcServerListen = Module.findExportByName("rpcrt4.dll", "RpcServerListen")
Interceptor.attach(RpcServerListen, {onLeave: function (args) {send("RpcServerListen");}});

var RpcServerRegisterAuthInfoA = Module.findExportByName("rpcrt4.dll", "RpcServerRegisterAuthInfoA")
Interceptor.attach(RpcServerRegisterAuthInfoA, {onLeave: function (args) {send("RpcServerRegisterAuthInfoA");}});

var RpcServerRegisterAuthInfoW = Module.findExportByName("rpcrt4.dll", "RpcServerRegisterAuthInfoW")
Interceptor.attach(RpcServerRegisterAuthInfoW, {onLeave: function (args) {send("RpcServerRegisterAuthInfoW");}});

var RpcServerRegisterIf = Module.findExportByName("rpcrt4.dll", "RpcServerRegisterIf")
Interceptor.attach(RpcServerRegisterIf, {onLeave: function (args) {send("RpcServerRegisterIf");}});

var RpcServerRegisterIf2 = Module.findExportByName("rpcrt4.dll", "RpcServerRegisterIf2")
Interceptor.attach(RpcServerRegisterIf2, {onLeave: function (args) {send("RpcServerRegisterIf2");}});

var RpcServerRegisterIf3 = Module.findExportByName("rpcrt4.dll", "RpcServerRegisterIf3")
Interceptor.attach(RpcServerRegisterIf3, {onLeave: function (args) {send("RpcServerRegisterIf3");}});

var RpcServerRegisterIfEx = Module.findExportByName("rpcrt4.dll", "RpcServerRegisterIfEx")
Interceptor.attach(RpcServerRegisterIfEx, {onLeave: function (args) {send("RpcServerRegisterIfEx");}});

var RpcServerSubscribeForNotification = Module.findExportByName("rpcrt4.dll", "RpcServerSubscribeForNotification")
Interceptor.attach(RpcServerSubscribeForNotification, {onLeave: function (args) {send("RpcServerSubscribeForNotification");}});

var RpcServerTestCancel = Module.findExportByName("rpcrt4.dll", "RpcServerTestCancel")
Interceptor.attach(RpcServerTestCancel, {onLeave: function (args) {send("RpcServerTestCancel");}});

var RpcServerUnregisterIf = Module.findExportByName("rpcrt4.dll", "RpcServerUnregisterIf")
Interceptor.attach(RpcServerUnregisterIf, {onLeave: function (args) {send("RpcServerUnregisterIf");}});

var RpcServerUnregisterIfEx = Module.findExportByName("rpcrt4.dll", "RpcServerUnregisterIfEx")
Interceptor.attach(RpcServerUnregisterIfEx, {onLeave: function (args) {send("RpcServerUnregisterIfEx");}});

var RpcServerUnsubscribeForNotification = Module.findExportByName("rpcrt4.dll", "RpcServerUnsubscribeForNotification")
Interceptor.attach(RpcServerUnsubscribeForNotification, {onLeave: function (args) {send("RpcServerUnsubscribeForNotification");}});

var RpcServerUseAllProtseqs = Module.findExportByName("rpcrt4.dll", "RpcServerUseAllProtseqs")
Interceptor.attach(RpcServerUseAllProtseqs, {onLeave: function (args) {send("RpcServerUseAllProtseqs");}});

var RpcServerUseAllProtseqsEx = Module.findExportByName("rpcrt4.dll", "RpcServerUseAllProtseqsEx")
Interceptor.attach(RpcServerUseAllProtseqsEx, {onLeave: function (args) {send("RpcServerUseAllProtseqsEx");}});

var RpcServerUseAllProtseqsIf = Module.findExportByName("rpcrt4.dll", "RpcServerUseAllProtseqsIf")
Interceptor.attach(RpcServerUseAllProtseqsIf, {onLeave: function (args) {send("RpcServerUseAllProtseqsIf");}});

var RpcServerUseAllProtseqsIfEx = Module.findExportByName("rpcrt4.dll", "RpcServerUseAllProtseqsIfEx")
Interceptor.attach(RpcServerUseAllProtseqsIfEx, {onLeave: function (args) {send("RpcServerUseAllProtseqsIfEx");}});

var RpcServerUseProtseqA = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqA")
Interceptor.attach(RpcServerUseProtseqA, {onLeave: function (args) {send("RpcServerUseProtseqA");}});

var RpcServerUseProtseqEpA = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqEpA")
Interceptor.attach(RpcServerUseProtseqEpA, {onLeave: function (args) {send("RpcServerUseProtseqEpA");}});

var RpcServerUseProtseqEpExA = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqEpExA")
Interceptor.attach(RpcServerUseProtseqEpExA, {onLeave: function (args) {send("RpcServerUseProtseqEpExA");}});

var RpcServerUseProtseqEpExW = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqEpExW")
Interceptor.attach(RpcServerUseProtseqEpExW, {onLeave: function (args) {send("RpcServerUseProtseqEpExW");}});

var RpcServerUseProtseqEpW = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqEpW")
Interceptor.attach(RpcServerUseProtseqEpW, {onLeave: function (args) {send("RpcServerUseProtseqEpW");}});

var RpcServerUseProtseqExA = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqExA")
Interceptor.attach(RpcServerUseProtseqExA, {onLeave: function (args) {send("RpcServerUseProtseqExA");}});

var RpcServerUseProtseqExW = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqExW")
Interceptor.attach(RpcServerUseProtseqExW, {onLeave: function (args) {send("RpcServerUseProtseqExW");}});

var RpcServerUseProtseqIfA = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqIfA")
Interceptor.attach(RpcServerUseProtseqIfA, {onLeave: function (args) {send("RpcServerUseProtseqIfA");}});

var RpcServerUseProtseqIfExA = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqIfExA")
Interceptor.attach(RpcServerUseProtseqIfExA, {onLeave: function (args) {send("RpcServerUseProtseqIfExA");}});

var RpcServerUseProtseqIfExW = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqIfExW")
Interceptor.attach(RpcServerUseProtseqIfExW, {onLeave: function (args) {send("RpcServerUseProtseqIfExW");}});

var RpcServerUseProtseqIfW = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqIfW")
Interceptor.attach(RpcServerUseProtseqIfW, {onLeave: function (args) {send("RpcServerUseProtseqIfW");}});

var RpcServerUseProtseqW = Module.findExportByName("rpcrt4.dll", "RpcServerUseProtseqW")
Interceptor.attach(RpcServerUseProtseqW, {onLeave: function (args) {send("RpcServerUseProtseqW");}});

var RpcServerYield = Module.findExportByName("rpcrt4.dll", "RpcServerYield")
Interceptor.attach(RpcServerYield, {onLeave: function (args) {send("RpcServerYield");}});

var RpcSmAllocate = Module.findExportByName("rpcrt4.dll", "RpcSmAllocate")
Interceptor.attach(RpcSmAllocate, {onLeave: function (args) {send("RpcSmAllocate");}});

var RpcSmClientFree = Module.findExportByName("rpcrt4.dll", "RpcSmClientFree")
Interceptor.attach(RpcSmClientFree, {onLeave: function (args) {send("RpcSmClientFree");}});

var RpcSmDestroyClientContext = Module.findExportByName("rpcrt4.dll", "RpcSmDestroyClientContext")
Interceptor.attach(RpcSmDestroyClientContext, {onLeave: function (args) {send("RpcSmDestroyClientContext");}});

var RpcSmDisableAllocate = Module.findExportByName("rpcrt4.dll", "RpcSmDisableAllocate")
Interceptor.attach(RpcSmDisableAllocate, {onLeave: function (args) {send("RpcSmDisableAllocate");}});

var RpcSmEnableAllocate = Module.findExportByName("rpcrt4.dll", "RpcSmEnableAllocate")
Interceptor.attach(RpcSmEnableAllocate, {onLeave: function (args) {send("RpcSmEnableAllocate");}});

var RpcSmFree = Module.findExportByName("rpcrt4.dll", "RpcSmFree")
Interceptor.attach(RpcSmFree, {onLeave: function (args) {send("RpcSmFree");}});

var RpcSmGetThreadHandle = Module.findExportByName("rpcrt4.dll", "RpcSmGetThreadHandle")
Interceptor.attach(RpcSmGetThreadHandle, {onLeave: function (args) {send("RpcSmGetThreadHandle");}});

var RpcSmSetClientAllocFree = Module.findExportByName("rpcrt4.dll", "RpcSmSetClientAllocFree")
Interceptor.attach(RpcSmSetClientAllocFree, {onLeave: function (args) {send("RpcSmSetClientAllocFree");}});

var RpcSmSetThreadHandle = Module.findExportByName("rpcrt4.dll", "RpcSmSetThreadHandle")
Interceptor.attach(RpcSmSetThreadHandle, {onLeave: function (args) {send("RpcSmSetThreadHandle");}});

var RpcSmSwapClientAllocFree = Module.findExportByName("rpcrt4.dll", "RpcSmSwapClientAllocFree")
Interceptor.attach(RpcSmSwapClientAllocFree, {onLeave: function (args) {send("RpcSmSwapClientAllocFree");}});

var RpcSsAllocate = Module.findExportByName("rpcrt4.dll", "RpcSsAllocate")
Interceptor.attach(RpcSsAllocate, {onLeave: function (args) {send("RpcSsAllocate");}});

var RpcSsContextLockExclusive = Module.findExportByName("rpcrt4.dll", "RpcSsContextLockExclusive")
Interceptor.attach(RpcSsContextLockExclusive, {onLeave: function (args) {send("RpcSsContextLockExclusive");}});

var RpcSsContextLockShared = Module.findExportByName("rpcrt4.dll", "RpcSsContextLockShared")
Interceptor.attach(RpcSsContextLockShared, {onLeave: function (args) {send("RpcSsContextLockShared");}});

var RpcSsDestroyClientContext = Module.findExportByName("rpcrt4.dll", "RpcSsDestroyClientContext")
Interceptor.attach(RpcSsDestroyClientContext, {onLeave: function (args) {send("RpcSsDestroyClientContext");}});

var RpcSsDisableAllocate = Module.findExportByName("rpcrt4.dll", "RpcSsDisableAllocate")
Interceptor.attach(RpcSsDisableAllocate, {onLeave: function (args) {send("RpcSsDisableAllocate");}});

var RpcSsDontSerializeContext = Module.findExportByName("rpcrt4.dll", "RpcSsDontSerializeContext")
Interceptor.attach(RpcSsDontSerializeContext, {onLeave: function (args) {send("RpcSsDontSerializeContext");}});

var RpcSsEnableAllocate = Module.findExportByName("rpcrt4.dll", "RpcSsEnableAllocate")
Interceptor.attach(RpcSsEnableAllocate, {onLeave: function (args) {send("RpcSsEnableAllocate");}});

var RpcSsFree = Module.findExportByName("rpcrt4.dll", "RpcSsFree")
Interceptor.attach(RpcSsFree, {onLeave: function (args) {send("RpcSsFree");}});

var RpcSsGetContextBinding = Module.findExportByName("rpcrt4.dll", "RpcSsGetContextBinding")
Interceptor.attach(RpcSsGetContextBinding, {onLeave: function (args) {send("RpcSsGetContextBinding");}});

var RpcSsGetThreadHandle = Module.findExportByName("rpcrt4.dll", "RpcSsGetThreadHandle")
Interceptor.attach(RpcSsGetThreadHandle, {onLeave: function (args) {send("RpcSsGetThreadHandle");}});

var RpcSsSetClientAllocFree = Module.findExportByName("rpcrt4.dll", "RpcSsSetClientAllocFree")
Interceptor.attach(RpcSsSetClientAllocFree, {onLeave: function (args) {send("RpcSsSetClientAllocFree");}});

var RpcSsSetThreadHandle = Module.findExportByName("rpcrt4.dll", "RpcSsSetThreadHandle")
Interceptor.attach(RpcSsSetThreadHandle, {onLeave: function (args) {send("RpcSsSetThreadHandle");}});

var RpcSsSwapClientAllocFree = Module.findExportByName("rpcrt4.dll", "RpcSsSwapClientAllocFree")
Interceptor.attach(RpcSsSwapClientAllocFree, {onLeave: function (args) {send("RpcSsSwapClientAllocFree");}});

var RpcStringBindingComposeA = Module.findExportByName("rpcrt4.dll", "RpcStringBindingComposeA")
Interceptor.attach(RpcStringBindingComposeA, {onLeave: function (args) {send("RpcStringBindingComposeA");}});

var RpcStringBindingComposeW = Module.findExportByName("rpcrt4.dll", "RpcStringBindingComposeW")
Interceptor.attach(RpcStringBindingComposeW, {onLeave: function (args) {send("RpcStringBindingComposeW");}});

var RpcStringBindingParseA = Module.findExportByName("rpcrt4.dll", "RpcStringBindingParseA")
Interceptor.attach(RpcStringBindingParseA, {onLeave: function (args) {send("RpcStringBindingParseA");}});

var RpcStringBindingParseW = Module.findExportByName("rpcrt4.dll", "RpcStringBindingParseW")
Interceptor.attach(RpcStringBindingParseW, {onLeave: function (args) {send("RpcStringBindingParseW");}});

var RpcStringFreeA = Module.findExportByName("rpcrt4.dll", "RpcStringFreeA")
Interceptor.attach(RpcStringFreeA, {onLeave: function (args) {send("RpcStringFreeA");}});

var RpcStringFreeW = Module.findExportByName("rpcrt4.dll", "RpcStringFreeW")
Interceptor.attach(RpcStringFreeW, {onLeave: function (args) {send("RpcStringFreeW");}});

var RpcTestCancel = Module.findExportByName("rpcrt4.dll", "RpcTestCancel")
Interceptor.attach(RpcTestCancel, {onLeave: function (args) {send("RpcTestCancel");}});

var RpcUserFree = Module.findExportByName("rpcrt4.dll", "RpcUserFree")
Interceptor.attach(RpcUserFree, {onLeave: function (args) {send("RpcUserFree");}});

var SimpleTypeAlignment = Module.findExportByName("rpcrt4.dll", "SimpleTypeAlignment")
Interceptor.attach(SimpleTypeAlignment, {onLeave: function (args) {send("SimpleTypeAlignment");}});

var SimpleTypeBufferSize = Module.findExportByName("rpcrt4.dll", "SimpleTypeBufferSize")
Interceptor.attach(SimpleTypeBufferSize, {onLeave: function (args) {send("SimpleTypeBufferSize");}});

var SimpleTypeMemorySize = Module.findExportByName("rpcrt4.dll", "SimpleTypeMemorySize")
Interceptor.attach(SimpleTypeMemorySize, {onLeave: function (args) {send("SimpleTypeMemorySize");}});

var TowerConstruct = Module.findExportByName("rpcrt4.dll", "TowerConstruct")
Interceptor.attach(TowerConstruct, {onLeave: function (args) {send("TowerConstruct");}});

var TowerExplode = Module.findExportByName("rpcrt4.dll", "TowerExplode")
Interceptor.attach(TowerExplode, {onLeave: function (args) {send("TowerExplode");}});

var UuidCompare = Module.findExportByName("rpcrt4.dll", "UuidCompare")
Interceptor.attach(UuidCompare, {onLeave: function (args) {send("UuidCompare");}});

var UuidCreate = Module.findExportByName("rpcrt4.dll", "UuidCreate")
Interceptor.attach(UuidCreate, {onLeave: function (args) {send("UuidCreate");}});

var UuidCreateNil = Module.findExportByName("rpcrt4.dll", "UuidCreateNil")
Interceptor.attach(UuidCreateNil, {onLeave: function (args) {send("UuidCreateNil");}});

var UuidCreateSequential = Module.findExportByName("rpcrt4.dll", "UuidCreateSequential")
Interceptor.attach(UuidCreateSequential, {onLeave: function (args) {send("UuidCreateSequential");}});

var UuidEqual = Module.findExportByName("rpcrt4.dll", "UuidEqual")
Interceptor.attach(UuidEqual, {onLeave: function (args) {send("UuidEqual");}});

var UuidFromStringA = Module.findExportByName("rpcrt4.dll", "UuidFromStringA")
Interceptor.attach(UuidFromStringA, {onLeave: function (args) {send("UuidFromStringA");}});

var UuidFromStringW = Module.findExportByName("rpcrt4.dll", "UuidFromStringW")
Interceptor.attach(UuidFromStringW, {onLeave: function (args) {send("UuidFromStringW");}});

var UuidHash = Module.findExportByName("rpcrt4.dll", "UuidHash")
Interceptor.attach(UuidHash, {onLeave: function (args) {send("UuidHash");}});

var UuidIsNil = Module.findExportByName("rpcrt4.dll", "UuidIsNil")
Interceptor.attach(UuidIsNil, {onLeave: function (args) {send("UuidIsNil");}});

var UuidToStringA = Module.findExportByName("rpcrt4.dll", "UuidToStringA")
Interceptor.attach(UuidToStringA, {onLeave: function (args) {send("UuidToStringA");}});

var UuidToStringW = Module.findExportByName("rpcrt4.dll", "UuidToStringW")
Interceptor.attach(UuidToStringW, {onLeave: function (args) {send("UuidToStringW");}});

var pfnFreeRoutines = Module.findExportByName("rpcrt4.dll", "pfnFreeRoutines")
Interceptor.attach(pfnFreeRoutines, {onLeave: function (args) {send("pfnFreeRoutines");}});

var pfnMarshallRoutines = Module.findExportByName("rpcrt4.dll", "pfnMarshallRoutines")
Interceptor.attach(pfnMarshallRoutines, {onLeave: function (args) {send("pfnMarshallRoutines");}});

var pfnSizeRoutines = Module.findExportByName("rpcrt4.dll", "pfnSizeRoutines")
Interceptor.attach(pfnSizeRoutines, {onLeave: function (args) {send("pfnSizeRoutines");}});

var pfnUnmarshallRoutines = Module.findExportByName("rpcrt4.dll", "pfnUnmarshallRoutines")
Interceptor.attach(pfnUnmarshallRoutines, {onLeave: function (args) {send("pfnUnmarshallRoutines");}});

