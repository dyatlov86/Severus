var AcquireSRWLockExclusive = Module.findExportByName("kernel32.dll", "AcquireSRWLockExclusive")
Interceptor.attach(AcquireSRWLockExclusive, {onLeave: function (args) {send("AcquireSRWLockExclusive");}});

var AcquireSRWLockShared = Module.findExportByName("kernel32.dll", "AcquireSRWLockShared")
Interceptor.attach(AcquireSRWLockShared, {onLeave: function (args) {send("AcquireSRWLockShared");}});

var ActivateActCtx = Module.findExportByName("kernel32.dll", "ActivateActCtx")
Interceptor.attach(ActivateActCtx, {onLeave: function (args) {send("ActivateActCtx");}});

var ActivateActCtxWorker = Module.findExportByName("kernel32.dll", "ActivateActCtxWorker")
Interceptor.attach(ActivateActCtxWorker, {onLeave: function (args) {send("ActivateActCtxWorker");}});

var ActivatePackageVirtualizationContext = Module.findExportByName("kernel32.dll", "ActivatePackageVirtualizationContext")
Interceptor.attach(ActivatePackageVirtualizationContext, {onLeave: function (args) {send("ActivatePackageVirtualizationContext");}});

var AddAtomA = Module.findExportByName("kernel32.dll", "AddAtomA")
Interceptor.attach(AddAtomA, {onLeave: function (args) {send("AddAtomA");}});

var AddAtomW = Module.findExportByName("kernel32.dll", "AddAtomW")
Interceptor.attach(AddAtomW, {onLeave: function (args) {send("AddAtomW");}});

var AddConsoleAliasA = Module.findExportByName("kernel32.dll", "AddConsoleAliasA")
Interceptor.attach(AddConsoleAliasA, {onLeave: function (args) {send("AddConsoleAliasA");}});

var AddConsoleAliasW = Module.findExportByName("kernel32.dll", "AddConsoleAliasW")
Interceptor.attach(AddConsoleAliasW, {onLeave: function (args) {send("AddConsoleAliasW");}});

var AddDllDirectory = Module.findExportByName("kernel32.dll", "AddDllDirectory")
Interceptor.attach(AddDllDirectory, {onLeave: function (args) {send("AddDllDirectory");}});

var AddIntegrityLabelToBoundaryDescriptor = Module.findExportByName("kernel32.dll", "AddIntegrityLabelToBoundaryDescriptor")
Interceptor.attach(AddIntegrityLabelToBoundaryDescriptor, {onLeave: function (args) {send("AddIntegrityLabelToBoundaryDescriptor");}});

var AddLocalAlternateComputerNameA = Module.findExportByName("kernel32.dll", "AddLocalAlternateComputerNameA")
Interceptor.attach(AddLocalAlternateComputerNameA, {onLeave: function (args) {send("AddLocalAlternateComputerNameA");}});

var AddLocalAlternateComputerNameW = Module.findExportByName("kernel32.dll", "AddLocalAlternateComputerNameW")
Interceptor.attach(AddLocalAlternateComputerNameW, {onLeave: function (args) {send("AddLocalAlternateComputerNameW");}});

var AddRefActCtx = Module.findExportByName("kernel32.dll", "AddRefActCtx")
Interceptor.attach(AddRefActCtx, {onLeave: function (args) {send("AddRefActCtx");}});

var AddRefActCtxWorker = Module.findExportByName("kernel32.dll", "AddRefActCtxWorker")
Interceptor.attach(AddRefActCtxWorker, {onLeave: function (args) {send("AddRefActCtxWorker");}});

var AddResourceAttributeAce = Module.findExportByName("kernel32.dll", "AddResourceAttributeAce")
Interceptor.attach(AddResourceAttributeAce, {onLeave: function (args) {send("AddResourceAttributeAce");}});

var AddSIDToBoundaryDescriptor = Module.findExportByName("kernel32.dll", "AddSIDToBoundaryDescriptor")
Interceptor.attach(AddSIDToBoundaryDescriptor, {onLeave: function (args) {send("AddSIDToBoundaryDescriptor");}});

var AddScopedPolicyIDAce = Module.findExportByName("kernel32.dll", "AddScopedPolicyIDAce")
Interceptor.attach(AddScopedPolicyIDAce, {onLeave: function (args) {send("AddScopedPolicyIDAce");}});

var AddSecureMemoryCacheCallback = Module.findExportByName("kernel32.dll", "AddSecureMemoryCacheCallback")
Interceptor.attach(AddSecureMemoryCacheCallback, {onLeave: function (args) {send("AddSecureMemoryCacheCallback");}});

var AddVectoredContinueHandler = Module.findExportByName("kernel32.dll", "AddVectoredContinueHandler")
Interceptor.attach(AddVectoredContinueHandler, {onLeave: function (args) {send("AddVectoredContinueHandler");}});

var AddVectoredExceptionHandler = Module.findExportByName("kernel32.dll", "AddVectoredExceptionHandler")
Interceptor.attach(AddVectoredExceptionHandler, {onLeave: function (args) {send("AddVectoredExceptionHandler");}});

var AdjustCalendarDate = Module.findExportByName("kernel32.dll", "AdjustCalendarDate")
Interceptor.attach(AdjustCalendarDate, {onLeave: function (args) {send("AdjustCalendarDate");}});

var AllocConsole = Module.findExportByName("kernel32.dll", "AllocConsole")
Interceptor.attach(AllocConsole, {onLeave: function (args) {send("AllocConsole");}});

var AllocateUserPhysicalPages = Module.findExportByName("kernel32.dll", "AllocateUserPhysicalPages")
Interceptor.attach(AllocateUserPhysicalPages, {onLeave: function (args) {send("AllocateUserPhysicalPages");}});

var AllocateUserPhysicalPagesNuma = Module.findExportByName("kernel32.dll", "AllocateUserPhysicalPagesNuma")
Interceptor.attach(AllocateUserPhysicalPagesNuma, {onLeave: function (args) {send("AllocateUserPhysicalPagesNuma");}});

var AppPolicyGetClrCompat = Module.findExportByName("kernel32.dll", "AppPolicyGetClrCompat")
Interceptor.attach(AppPolicyGetClrCompat, {onLeave: function (args) {send("AppPolicyGetClrCompat");}});

var AppPolicyGetCreateFileAccess = Module.findExportByName("kernel32.dll", "AppPolicyGetCreateFileAccess")
Interceptor.attach(AppPolicyGetCreateFileAccess, {onLeave: function (args) {send("AppPolicyGetCreateFileAccess");}});

var AppPolicyGetLifecycleManagement = Module.findExportByName("kernel32.dll", "AppPolicyGetLifecycleManagement")
Interceptor.attach(AppPolicyGetLifecycleManagement, {onLeave: function (args) {send("AppPolicyGetLifecycleManagement");}});

var AppPolicyGetMediaFoundationCodecLoading = Module.findExportByName("kernel32.dll", "AppPolicyGetMediaFoundationCodecLoading")
Interceptor.attach(AppPolicyGetMediaFoundationCodecLoading, {onLeave: function (args) {send("AppPolicyGetMediaFoundationCodecLoading");}});

var AppPolicyGetProcessTerminationMethod = Module.findExportByName("kernel32.dll", "AppPolicyGetProcessTerminationMethod")
Interceptor.attach(AppPolicyGetProcessTerminationMethod, {onLeave: function (args) {send("AppPolicyGetProcessTerminationMethod");}});

var AppPolicyGetShowDeveloperDiagnostic = Module.findExportByName("kernel32.dll", "AppPolicyGetShowDeveloperDiagnostic")
Interceptor.attach(AppPolicyGetShowDeveloperDiagnostic, {onLeave: function (args) {send("AppPolicyGetShowDeveloperDiagnostic");}});

var AppPolicyGetThreadInitializationType = Module.findExportByName("kernel32.dll", "AppPolicyGetThreadInitializationType")
Interceptor.attach(AppPolicyGetThreadInitializationType, {onLeave: function (args) {send("AppPolicyGetThreadInitializationType");}});

var AppPolicyGetWindowingModel = Module.findExportByName("kernel32.dll", "AppPolicyGetWindowingModel")
Interceptor.attach(AppPolicyGetWindowingModel, {onLeave: function (args) {send("AppPolicyGetWindowingModel");}});

var AppXGetOSMaxVersionTested = Module.findExportByName("kernel32.dll", "AppXGetOSMaxVersionTested")
Interceptor.attach(AppXGetOSMaxVersionTested, {onLeave: function (args) {send("AppXGetOSMaxVersionTested");}});

var ApplicationRecoveryFinished = Module.findExportByName("kernel32.dll", "ApplicationRecoveryFinished")
Interceptor.attach(ApplicationRecoveryFinished, {onLeave: function (args) {send("ApplicationRecoveryFinished");}});

var ApplicationRecoveryInProgress = Module.findExportByName("kernel32.dll", "ApplicationRecoveryInProgress")
Interceptor.attach(ApplicationRecoveryInProgress, {onLeave: function (args) {send("ApplicationRecoveryInProgress");}});

var AreFileApisANSI = Module.findExportByName("kernel32.dll", "AreFileApisANSI")
Interceptor.attach(AreFileApisANSI, {onLeave: function (args) {send("AreFileApisANSI");}});

var AreShortNamesEnabled = Module.findExportByName("kernel32.dll", "AreShortNamesEnabled")
Interceptor.attach(AreShortNamesEnabled, {onLeave: function (args) {send("AreShortNamesEnabled");}});

var AssignProcessToJobObject = Module.findExportByName("kernel32.dll", "AssignProcessToJobObject")
Interceptor.attach(AssignProcessToJobObject, {onLeave: function (args) {send("AssignProcessToJobObject");}});

var AttachConsole = Module.findExportByName("kernel32.dll", "AttachConsole")
Interceptor.attach(AttachConsole, {onLeave: function (args) {send("AttachConsole");}});

var BackupRead = Module.findExportByName("kernel32.dll", "BackupRead")
Interceptor.attach(BackupRead, {onLeave: function (args) {send("BackupRead");}});

var BackupSeek = Module.findExportByName("kernel32.dll", "BackupSeek")
Interceptor.attach(BackupSeek, {onLeave: function (args) {send("BackupSeek");}});

var BackupWrite = Module.findExportByName("kernel32.dll", "BackupWrite")
Interceptor.attach(BackupWrite, {onLeave: function (args) {send("BackupWrite");}});

var BaseCheckAppcompatCache = Module.findExportByName("kernel32.dll", "BaseCheckAppcompatCache")
Interceptor.attach(BaseCheckAppcompatCache, {onLeave: function (args) {send("BaseCheckAppcompatCache");}});

var BaseCheckAppcompatCacheEx = Module.findExportByName("kernel32.dll", "BaseCheckAppcompatCacheEx")
Interceptor.attach(BaseCheckAppcompatCacheEx, {onLeave: function (args) {send("BaseCheckAppcompatCacheEx");}});

var BaseCheckAppcompatCacheExWorker = Module.findExportByName("kernel32.dll", "BaseCheckAppcompatCacheExWorker")
Interceptor.attach(BaseCheckAppcompatCacheExWorker, {onLeave: function (args) {send("BaseCheckAppcompatCacheExWorker");}});

var BaseCheckAppcompatCacheWorker = Module.findExportByName("kernel32.dll", "BaseCheckAppcompatCacheWorker")
Interceptor.attach(BaseCheckAppcompatCacheWorker, {onLeave: function (args) {send("BaseCheckAppcompatCacheWorker");}});

var BaseCheckElevation = Module.findExportByName("kernel32.dll", "BaseCheckElevation")
Interceptor.attach(BaseCheckElevation, {onLeave: function (args) {send("BaseCheckElevation");}});

var BaseCleanupAppcompatCacheSupport = Module.findExportByName("kernel32.dll", "BaseCleanupAppcompatCacheSupport")
Interceptor.attach(BaseCleanupAppcompatCacheSupport, {onLeave: function (args) {send("BaseCleanupAppcompatCacheSupport");}});

var BaseCleanupAppcompatCacheSupportWorker = Module.findExportByName("kernel32.dll", "BaseCleanupAppcompatCacheSupportWorker")
Interceptor.attach(BaseCleanupAppcompatCacheSupportWorker, {onLeave: function (args) {send("BaseCleanupAppcompatCacheSupportWorker");}});

var BaseDestroyVDMEnvironment = Module.findExportByName("kernel32.dll", "BaseDestroyVDMEnvironment")
Interceptor.attach(BaseDestroyVDMEnvironment, {onLeave: function (args) {send("BaseDestroyVDMEnvironment");}});

var BaseDllReadWriteIniFile = Module.findExportByName("kernel32.dll", "BaseDllReadWriteIniFile")
Interceptor.attach(BaseDllReadWriteIniFile, {onLeave: function (args) {send("BaseDllReadWriteIniFile");}});

var BaseDumpAppcompatCache = Module.findExportByName("kernel32.dll", "BaseDumpAppcompatCache")
Interceptor.attach(BaseDumpAppcompatCache, {onLeave: function (args) {send("BaseDumpAppcompatCache");}});

var BaseDumpAppcompatCacheWorker = Module.findExportByName("kernel32.dll", "BaseDumpAppcompatCacheWorker")
Interceptor.attach(BaseDumpAppcompatCacheWorker, {onLeave: function (args) {send("BaseDumpAppcompatCacheWorker");}});

var BaseElevationPostProcessing = Module.findExportByName("kernel32.dll", "BaseElevationPostProcessing")
Interceptor.attach(BaseElevationPostProcessing, {onLeave: function (args) {send("BaseElevationPostProcessing");}});

var BaseFlushAppcompatCache = Module.findExportByName("kernel32.dll", "BaseFlushAppcompatCache")
Interceptor.attach(BaseFlushAppcompatCache, {onLeave: function (args) {send("BaseFlushAppcompatCache");}});

var BaseFlushAppcompatCacheWorker = Module.findExportByName("kernel32.dll", "BaseFlushAppcompatCacheWorker")
Interceptor.attach(BaseFlushAppcompatCacheWorker, {onLeave: function (args) {send("BaseFlushAppcompatCacheWorker");}});

var BaseFormatObjectAttributes = Module.findExportByName("kernel32.dll", "BaseFormatObjectAttributes")
Interceptor.attach(BaseFormatObjectAttributes, {onLeave: function (args) {send("BaseFormatObjectAttributes");}});

var BaseFormatTimeOut = Module.findExportByName("kernel32.dll", "BaseFormatTimeOut")
Interceptor.attach(BaseFormatTimeOut, {onLeave: function (args) {send("BaseFormatTimeOut");}});

var BaseFreeAppCompatDataForProcessWorker = Module.findExportByName("kernel32.dll", "BaseFreeAppCompatDataForProcessWorker")
Interceptor.attach(BaseFreeAppCompatDataForProcessWorker, {onLeave: function (args) {send("BaseFreeAppCompatDataForProcessWorker");}});

var BaseGenerateAppCompatData = Module.findExportByName("kernel32.dll", "BaseGenerateAppCompatData")
Interceptor.attach(BaseGenerateAppCompatData, {onLeave: function (args) {send("BaseGenerateAppCompatData");}});

var BaseGetNamedObjectDirectory = Module.findExportByName("kernel32.dll", "BaseGetNamedObjectDirectory")
Interceptor.attach(BaseGetNamedObjectDirectory, {onLeave: function (args) {send("BaseGetNamedObjectDirectory");}});

var BaseInitAppcompatCacheSupport = Module.findExportByName("kernel32.dll", "BaseInitAppcompatCacheSupport")
Interceptor.attach(BaseInitAppcompatCacheSupport, {onLeave: function (args) {send("BaseInitAppcompatCacheSupport");}});

var BaseInitAppcompatCacheSupportWorker = Module.findExportByName("kernel32.dll", "BaseInitAppcompatCacheSupportWorker")
Interceptor.attach(BaseInitAppcompatCacheSupportWorker, {onLeave: function (args) {send("BaseInitAppcompatCacheSupportWorker");}});

var BaseIsAppcompatInfrastructureDisabled = Module.findExportByName("kernel32.dll", "BaseIsAppcompatInfrastructureDisabled")
Interceptor.attach(BaseIsAppcompatInfrastructureDisabled, {onLeave: function (args) {send("BaseIsAppcompatInfrastructureDisabled");}});

var BaseIsAppcompatInfrastructureDisabledWorker = Module.findExportByName("kernel32.dll", "BaseIsAppcompatInfrastructureDisabledWorker")
Interceptor.attach(BaseIsAppcompatInfrastructureDisabledWorker, {onLeave: function (args) {send("BaseIsAppcompatInfrastructureDisabledWorker");}});

var BaseIsDosApplication = Module.findExportByName("kernel32.dll", "BaseIsDosApplication")
Interceptor.attach(BaseIsDosApplication, {onLeave: function (args) {send("BaseIsDosApplication");}});

var BaseQueryModuleData = Module.findExportByName("kernel32.dll", "BaseQueryModuleData")
Interceptor.attach(BaseQueryModuleData, {onLeave: function (args) {send("BaseQueryModuleData");}});

var BaseReadAppCompatDataForProcessWorker = Module.findExportByName("kernel32.dll", "BaseReadAppCompatDataForProcessWorker")
Interceptor.attach(BaseReadAppCompatDataForProcessWorker, {onLeave: function (args) {send("BaseReadAppCompatDataForProcessWorker");}});

var BaseSetLastNTError = Module.findExportByName("kernel32.dll", "BaseSetLastNTError")
Interceptor.attach(BaseSetLastNTError, {onLeave: function (args) {send("BaseSetLastNTError");}});

var BaseThreadInitThunk = Module.findExportByName("kernel32.dll", "BaseThreadInitThunk")
Interceptor.attach(BaseThreadInitThunk, {onLeave: function (args) {send("BaseThreadInitThunk");}});

var BaseUpdateAppcompatCache = Module.findExportByName("kernel32.dll", "BaseUpdateAppcompatCache")
Interceptor.attach(BaseUpdateAppcompatCache, {onLeave: function (args) {send("BaseUpdateAppcompatCache");}});

var BaseUpdateAppcompatCacheWorker = Module.findExportByName("kernel32.dll", "BaseUpdateAppcompatCacheWorker")
Interceptor.attach(BaseUpdateAppcompatCacheWorker, {onLeave: function (args) {send("BaseUpdateAppcompatCacheWorker");}});

var BaseUpdateVDMEntry = Module.findExportByName("kernel32.dll", "BaseUpdateVDMEntry")
Interceptor.attach(BaseUpdateVDMEntry, {onLeave: function (args) {send("BaseUpdateVDMEntry");}});

var BaseVerifyUnicodeString = Module.findExportByName("kernel32.dll", "BaseVerifyUnicodeString")
Interceptor.attach(BaseVerifyUnicodeString, {onLeave: function (args) {send("BaseVerifyUnicodeString");}});

var BaseWriteErrorElevationRequiredEvent = Module.findExportByName("kernel32.dll", "BaseWriteErrorElevationRequiredEvent")
Interceptor.attach(BaseWriteErrorElevationRequiredEvent, {onLeave: function (args) {send("BaseWriteErrorElevationRequiredEvent");}});

var Basep8BitStringToDynamicUnicodeString = Module.findExportByName("kernel32.dll", "Basep8BitStringToDynamicUnicodeString")
Interceptor.attach(Basep8BitStringToDynamicUnicodeString, {onLeave: function (args) {send("Basep8BitStringToDynamicUnicodeString");}});

var BasepAllocateActivationContextActivationBlock = Module.findExportByName("kernel32.dll", "BasepAllocateActivationContextActivationBlock")
Interceptor.attach(BasepAllocateActivationContextActivationBlock, {onLeave: function (args) {send("BasepAllocateActivationContextActivationBlock");}});

var BasepAnsiStringToDynamicUnicodeString = Module.findExportByName("kernel32.dll", "BasepAnsiStringToDynamicUnicodeString")
Interceptor.attach(BasepAnsiStringToDynamicUnicodeString, {onLeave: function (args) {send("BasepAnsiStringToDynamicUnicodeString");}});

var BasepAppContainerEnvironmentExtension = Module.findExportByName("kernel32.dll", "BasepAppContainerEnvironmentExtension")
Interceptor.attach(BasepAppContainerEnvironmentExtension, {onLeave: function (args) {send("BasepAppContainerEnvironmentExtension");}});

var BasepAppXExtension = Module.findExportByName("kernel32.dll", "BasepAppXExtension")
Interceptor.attach(BasepAppXExtension, {onLeave: function (args) {send("BasepAppXExtension");}});

var BasepCheckAppCompat = Module.findExportByName("kernel32.dll", "BasepCheckAppCompat")
Interceptor.attach(BasepCheckAppCompat, {onLeave: function (args) {send("BasepCheckAppCompat");}});

var BasepCheckWebBladeHashes = Module.findExportByName("kernel32.dll", "BasepCheckWebBladeHashes")
Interceptor.attach(BasepCheckWebBladeHashes, {onLeave: function (args) {send("BasepCheckWebBladeHashes");}});

var BasepCheckWinSaferRestrictions = Module.findExportByName("kernel32.dll", "BasepCheckWinSaferRestrictions")
Interceptor.attach(BasepCheckWinSaferRestrictions, {onLeave: function (args) {send("BasepCheckWinSaferRestrictions");}});

var BasepConstructSxsCreateProcessMessage = Module.findExportByName("kernel32.dll", "BasepConstructSxsCreateProcessMessage")
Interceptor.attach(BasepConstructSxsCreateProcessMessage, {onLeave: function (args) {send("BasepConstructSxsCreateProcessMessage");}});

var BasepCopyEncryption = Module.findExportByName("kernel32.dll", "BasepCopyEncryption")
Interceptor.attach(BasepCopyEncryption, {onLeave: function (args) {send("BasepCopyEncryption");}});

var BasepFinishPackageActivation = Module.findExportByName("kernel32.dll", "BasepFinishPackageActivation")
Interceptor.attach(BasepFinishPackageActivation, {onLeave: function (args) {send("BasepFinishPackageActivation");}});

var BasepFinishPackageActivationForSxS = Module.findExportByName("kernel32.dll", "BasepFinishPackageActivationForSxS")
Interceptor.attach(BasepFinishPackageActivationForSxS, {onLeave: function (args) {send("BasepFinishPackageActivationForSxS");}});

var BasepFreeActivationContextActivationBlock = Module.findExportByName("kernel32.dll", "BasepFreeActivationContextActivationBlock")
Interceptor.attach(BasepFreeActivationContextActivationBlock, {onLeave: function (args) {send("BasepFreeActivationContextActivationBlock");}});

var BasepFreeAppCompatData = Module.findExportByName("kernel32.dll", "BasepFreeAppCompatData")
Interceptor.attach(BasepFreeAppCompatData, {onLeave: function (args) {send("BasepFreeAppCompatData");}});

var BasepGetAppCompatData = Module.findExportByName("kernel32.dll", "BasepGetAppCompatData")
Interceptor.attach(BasepGetAppCompatData, {onLeave: function (args) {send("BasepGetAppCompatData");}});

var BasepGetComputerNameFromNtPath = Module.findExportByName("kernel32.dll", "BasepGetComputerNameFromNtPath")
Interceptor.attach(BasepGetComputerNameFromNtPath, {onLeave: function (args) {send("BasepGetComputerNameFromNtPath");}});

var BasepGetExeArchType = Module.findExportByName("kernel32.dll", "BasepGetExeArchType")
Interceptor.attach(BasepGetExeArchType, {onLeave: function (args) {send("BasepGetExeArchType");}});

var BasepGetPackageActivationTokenForFilePath = Module.findExportByName("kernel32.dll", "BasepGetPackageActivationTokenForFilePath")
Interceptor.attach(BasepGetPackageActivationTokenForFilePath, {onLeave: function (args) {send("BasepGetPackageActivationTokenForFilePath");}});

var BasepGetPackageActivationTokenForSxS = Module.findExportByName("kernel32.dll", "BasepGetPackageActivationTokenForSxS")
Interceptor.attach(BasepGetPackageActivationTokenForSxS, {onLeave: function (args) {send("BasepGetPackageActivationTokenForSxS");}});

var BasepGetPackagedAppInfoForFile = Module.findExportByName("kernel32.dll", "BasepGetPackagedAppInfoForFile")
Interceptor.attach(BasepGetPackagedAppInfoForFile, {onLeave: function (args) {send("BasepGetPackagedAppInfoForFile");}});

var BasepInitAppCompatData = Module.findExportByName("kernel32.dll", "BasepInitAppCompatData")
Interceptor.attach(BasepInitAppCompatData, {onLeave: function (args) {send("BasepInitAppCompatData");}});

var BasepIsProcessAllowed = Module.findExportByName("kernel32.dll", "BasepIsProcessAllowed")
Interceptor.attach(BasepIsProcessAllowed, {onLeave: function (args) {send("BasepIsProcessAllowed");}});

var BasepMapModuleHandle = Module.findExportByName("kernel32.dll", "BasepMapModuleHandle")
Interceptor.attach(BasepMapModuleHandle, {onLeave: function (args) {send("BasepMapModuleHandle");}});

var BasepNotifyLoadStringResource = Module.findExportByName("kernel32.dll", "BasepNotifyLoadStringResource")
Interceptor.attach(BasepNotifyLoadStringResource, {onLeave: function (args) {send("BasepNotifyLoadStringResource");}});

var BasepPostSuccessAppXExtension = Module.findExportByName("kernel32.dll", "BasepPostSuccessAppXExtension")
Interceptor.attach(BasepPostSuccessAppXExtension, {onLeave: function (args) {send("BasepPostSuccessAppXExtension");}});

var BasepProcessInvalidImage = Module.findExportByName("kernel32.dll", "BasepProcessInvalidImage")
Interceptor.attach(BasepProcessInvalidImage, {onLeave: function (args) {send("BasepProcessInvalidImage");}});

var BasepQueryAppCompat = Module.findExportByName("kernel32.dll", "BasepQueryAppCompat")
Interceptor.attach(BasepQueryAppCompat, {onLeave: function (args) {send("BasepQueryAppCompat");}});

var BasepQueryModuleChpeSettings = Module.findExportByName("kernel32.dll", "BasepQueryModuleChpeSettings")
Interceptor.attach(BasepQueryModuleChpeSettings, {onLeave: function (args) {send("BasepQueryModuleChpeSettings");}});

var BasepReleaseAppXContext = Module.findExportByName("kernel32.dll", "BasepReleaseAppXContext")
Interceptor.attach(BasepReleaseAppXContext, {onLeave: function (args) {send("BasepReleaseAppXContext");}});

var BasepReleasePackagedAppInfo = Module.findExportByName("kernel32.dll", "BasepReleasePackagedAppInfo")
Interceptor.attach(BasepReleasePackagedAppInfo, {onLeave: function (args) {send("BasepReleasePackagedAppInfo");}});

var BasepReleaseSxsCreateProcessUtilityStruct = Module.findExportByName("kernel32.dll", "BasepReleaseSxsCreateProcessUtilityStruct")
Interceptor.attach(BasepReleaseSxsCreateProcessUtilityStruct, {onLeave: function (args) {send("BasepReleaseSxsCreateProcessUtilityStruct");}});

var BasepReportFault = Module.findExportByName("kernel32.dll", "BasepReportFault")
Interceptor.attach(BasepReportFault, {onLeave: function (args) {send("BasepReportFault");}});

var BasepSetFileEncryptionCompression = Module.findExportByName("kernel32.dll", "BasepSetFileEncryptionCompression")
Interceptor.attach(BasepSetFileEncryptionCompression, {onLeave: function (args) {send("BasepSetFileEncryptionCompression");}});

var Beep = Module.findExportByName("kernel32.dll", "Beep")
Interceptor.attach(Beep, {onLeave: function (args) {send("Beep");}});

var BeginUpdateResourceA = Module.findExportByName("kernel32.dll", "BeginUpdateResourceA")
Interceptor.attach(BeginUpdateResourceA, {onLeave: function (args) {send("BeginUpdateResourceA");}});

var BeginUpdateResourceW = Module.findExportByName("kernel32.dll", "BeginUpdateResourceW")
Interceptor.attach(BeginUpdateResourceW, {onLeave: function (args) {send("BeginUpdateResourceW");}});

var BindIoCompletionCallback = Module.findExportByName("kernel32.dll", "BindIoCompletionCallback")
Interceptor.attach(BindIoCompletionCallback, {onLeave: function (args) {send("BindIoCompletionCallback");}});

var BuildCommDCBA = Module.findExportByName("kernel32.dll", "BuildCommDCBA")
Interceptor.attach(BuildCommDCBA, {onLeave: function (args) {send("BuildCommDCBA");}});

var BuildCommDCBAndTimeoutsA = Module.findExportByName("kernel32.dll", "BuildCommDCBAndTimeoutsA")
Interceptor.attach(BuildCommDCBAndTimeoutsA, {onLeave: function (args) {send("BuildCommDCBAndTimeoutsA");}});

var BuildCommDCBAndTimeoutsW = Module.findExportByName("kernel32.dll", "BuildCommDCBAndTimeoutsW")
Interceptor.attach(BuildCommDCBAndTimeoutsW, {onLeave: function (args) {send("BuildCommDCBAndTimeoutsW");}});

var BuildCommDCBW = Module.findExportByName("kernel32.dll", "BuildCommDCBW")
Interceptor.attach(BuildCommDCBW, {onLeave: function (args) {send("BuildCommDCBW");}});

var BuildIoRingCancelRequest = Module.findExportByName("kernel32.dll", "BuildIoRingCancelRequest")
Interceptor.attach(BuildIoRingCancelRequest, {onLeave: function (args) {send("BuildIoRingCancelRequest");}});

var BuildIoRingFlushFile = Module.findExportByName("kernel32.dll", "BuildIoRingFlushFile")
Interceptor.attach(BuildIoRingFlushFile, {onLeave: function (args) {send("BuildIoRingFlushFile");}});

var BuildIoRingReadFile = Module.findExportByName("kernel32.dll", "BuildIoRingReadFile")
Interceptor.attach(BuildIoRingReadFile, {onLeave: function (args) {send("BuildIoRingReadFile");}});

var BuildIoRingRegisterBuffers = Module.findExportByName("kernel32.dll", "BuildIoRingRegisterBuffers")
Interceptor.attach(BuildIoRingRegisterBuffers, {onLeave: function (args) {send("BuildIoRingRegisterBuffers");}});

var BuildIoRingRegisterFileHandles = Module.findExportByName("kernel32.dll", "BuildIoRingRegisterFileHandles")
Interceptor.attach(BuildIoRingRegisterFileHandles, {onLeave: function (args) {send("BuildIoRingRegisterFileHandles");}});

var BuildIoRingWriteFile = Module.findExportByName("kernel32.dll", "BuildIoRingWriteFile")
Interceptor.attach(BuildIoRingWriteFile, {onLeave: function (args) {send("BuildIoRingWriteFile");}});

var CallNamedPipeA = Module.findExportByName("kernel32.dll", "CallNamedPipeA")
Interceptor.attach(CallNamedPipeA, {onLeave: function (args) {send("CallNamedPipeA");}});

var CallNamedPipeW = Module.findExportByName("kernel32.dll", "CallNamedPipeW")
Interceptor.attach(CallNamedPipeW, {onLeave: function (args) {send("CallNamedPipeW");}});

var CallbackMayRunLong = Module.findExportByName("kernel32.dll", "CallbackMayRunLong")
Interceptor.attach(CallbackMayRunLong, {onLeave: function (args) {send("CallbackMayRunLong");}});

var CancelDeviceWakeupRequest = Module.findExportByName("kernel32.dll", "CancelDeviceWakeupRequest")
Interceptor.attach(CancelDeviceWakeupRequest, {onLeave: function (args) {send("CancelDeviceWakeupRequest");}});

var CancelIo = Module.findExportByName("kernel32.dll", "CancelIo")
Interceptor.attach(CancelIo, {onLeave: function (args) {send("CancelIo");}});

var CancelIoEx = Module.findExportByName("kernel32.dll", "CancelIoEx")
Interceptor.attach(CancelIoEx, {onLeave: function (args) {send("CancelIoEx");}});

var CancelSynchronousIo = Module.findExportByName("kernel32.dll", "CancelSynchronousIo")
Interceptor.attach(CancelSynchronousIo, {onLeave: function (args) {send("CancelSynchronousIo");}});

var CancelThreadpoolIo = Module.findExportByName("kernel32.dll", "CancelThreadpoolIo")
Interceptor.attach(CancelThreadpoolIo, {onLeave: function (args) {send("CancelThreadpoolIo");}});

var CancelTimerQueueTimer = Module.findExportByName("kernel32.dll", "CancelTimerQueueTimer")
Interceptor.attach(CancelTimerQueueTimer, {onLeave: function (args) {send("CancelTimerQueueTimer");}});

var CancelWaitableTimer = Module.findExportByName("kernel32.dll", "CancelWaitableTimer")
Interceptor.attach(CancelWaitableTimer, {onLeave: function (args) {send("CancelWaitableTimer");}});

var CeipIsOptedIn = Module.findExportByName("kernel32.dll", "CeipIsOptedIn")
Interceptor.attach(CeipIsOptedIn, {onLeave: function (args) {send("CeipIsOptedIn");}});

var ChangeTimerQueueTimer = Module.findExportByName("kernel32.dll", "ChangeTimerQueueTimer")
Interceptor.attach(ChangeTimerQueueTimer, {onLeave: function (args) {send("ChangeTimerQueueTimer");}});

var CheckAllowDecryptedRemoteDestinationPolicy = Module.findExportByName("kernel32.dll", "CheckAllowDecryptedRemoteDestinationPolicy")
Interceptor.attach(CheckAllowDecryptedRemoteDestinationPolicy, {onLeave: function (args) {send("CheckAllowDecryptedRemoteDestinationPolicy");}});

var CheckElevation = Module.findExportByName("kernel32.dll", "CheckElevation")
Interceptor.attach(CheckElevation, {onLeave: function (args) {send("CheckElevation");}});

var CheckElevationEnabled = Module.findExportByName("kernel32.dll", "CheckElevationEnabled")
Interceptor.attach(CheckElevationEnabled, {onLeave: function (args) {send("CheckElevationEnabled");}});

var CheckForReadOnlyResource = Module.findExportByName("kernel32.dll", "CheckForReadOnlyResource")
Interceptor.attach(CheckForReadOnlyResource, {onLeave: function (args) {send("CheckForReadOnlyResource");}});

var CheckForReadOnlyResourceFilter = Module.findExportByName("kernel32.dll", "CheckForReadOnlyResourceFilter")
Interceptor.attach(CheckForReadOnlyResourceFilter, {onLeave: function (args) {send("CheckForReadOnlyResourceFilter");}});

var CheckNameLegalDOS8Dot3A = Module.findExportByName("kernel32.dll", "CheckNameLegalDOS8Dot3A")
Interceptor.attach(CheckNameLegalDOS8Dot3A, {onLeave: function (args) {send("CheckNameLegalDOS8Dot3A");}});

var CheckNameLegalDOS8Dot3W = Module.findExportByName("kernel32.dll", "CheckNameLegalDOS8Dot3W")
Interceptor.attach(CheckNameLegalDOS8Dot3W, {onLeave: function (args) {send("CheckNameLegalDOS8Dot3W");}});

var CheckRemoteDebuggerPresent = Module.findExportByName("kernel32.dll", "CheckRemoteDebuggerPresent")
Interceptor.attach(CheckRemoteDebuggerPresent, {onLeave: function (args) {send("CheckRemoteDebuggerPresent");}});

var CheckTokenCapability = Module.findExportByName("kernel32.dll", "CheckTokenCapability")
Interceptor.attach(CheckTokenCapability, {onLeave: function (args) {send("CheckTokenCapability");}});

var CheckTokenMembershipEx = Module.findExportByName("kernel32.dll", "CheckTokenMembershipEx")
Interceptor.attach(CheckTokenMembershipEx, {onLeave: function (args) {send("CheckTokenMembershipEx");}});

var ClearCommBreak = Module.findExportByName("kernel32.dll", "ClearCommBreak")
Interceptor.attach(ClearCommBreak, {onLeave: function (args) {send("ClearCommBreak");}});

var ClearCommError = Module.findExportByName("kernel32.dll", "ClearCommError")
Interceptor.attach(ClearCommError, {onLeave: function (args) {send("ClearCommError");}});

var CloseConsoleHandle = Module.findExportByName("kernel32.dll", "CloseConsoleHandle")
Interceptor.attach(CloseConsoleHandle, {onLeave: function (args) {send("CloseConsoleHandle");}});

var CloseHandle = Module.findExportByName("kernel32.dll", "CloseHandle")
Interceptor.attach(CloseHandle, {onLeave: function (args) {send("CloseHandle");}});

var CloseIoRing = Module.findExportByName("kernel32.dll", "CloseIoRing")
Interceptor.attach(CloseIoRing, {onLeave: function (args) {send("CloseIoRing");}});

var ClosePackageInfo = Module.findExportByName("kernel32.dll", "ClosePackageInfo")
Interceptor.attach(ClosePackageInfo, {onLeave: function (args) {send("ClosePackageInfo");}});

var ClosePrivateNamespace = Module.findExportByName("kernel32.dll", "ClosePrivateNamespace")
Interceptor.attach(ClosePrivateNamespace, {onLeave: function (args) {send("ClosePrivateNamespace");}});

var CloseProfileUserMapping = Module.findExportByName("kernel32.dll", "CloseProfileUserMapping")
Interceptor.attach(CloseProfileUserMapping, {onLeave: function (args) {send("CloseProfileUserMapping");}});

var ClosePseudoConsole = Module.findExportByName("kernel32.dll", "ClosePseudoConsole")
Interceptor.attach(ClosePseudoConsole, {onLeave: function (args) {send("ClosePseudoConsole");}});

var CloseState = Module.findExportByName("kernel32.dll", "CloseState")
Interceptor.attach(CloseState, {onLeave: function (args) {send("CloseState");}});

var CloseThreadpool = Module.findExportByName("kernel32.dll", "CloseThreadpool")
Interceptor.attach(CloseThreadpool, {onLeave: function (args) {send("CloseThreadpool");}});

var CloseThreadpoolCleanupGroup = Module.findExportByName("kernel32.dll", "CloseThreadpoolCleanupGroup")
Interceptor.attach(CloseThreadpoolCleanupGroup, {onLeave: function (args) {send("CloseThreadpoolCleanupGroup");}});

var CloseThreadpoolCleanupGroupMembers = Module.findExportByName("kernel32.dll", "CloseThreadpoolCleanupGroupMembers")
Interceptor.attach(CloseThreadpoolCleanupGroupMembers, {onLeave: function (args) {send("CloseThreadpoolCleanupGroupMembers");}});

var CloseThreadpoolIo = Module.findExportByName("kernel32.dll", "CloseThreadpoolIo")
Interceptor.attach(CloseThreadpoolIo, {onLeave: function (args) {send("CloseThreadpoolIo");}});

var CloseThreadpoolTimer = Module.findExportByName("kernel32.dll", "CloseThreadpoolTimer")
Interceptor.attach(CloseThreadpoolTimer, {onLeave: function (args) {send("CloseThreadpoolTimer");}});

var CloseThreadpoolWait = Module.findExportByName("kernel32.dll", "CloseThreadpoolWait")
Interceptor.attach(CloseThreadpoolWait, {onLeave: function (args) {send("CloseThreadpoolWait");}});

var CloseThreadpoolWork = Module.findExportByName("kernel32.dll", "CloseThreadpoolWork")
Interceptor.attach(CloseThreadpoolWork, {onLeave: function (args) {send("CloseThreadpoolWork");}});

var CmdBatNotification = Module.findExportByName("kernel32.dll", "CmdBatNotification")
Interceptor.attach(CmdBatNotification, {onLeave: function (args) {send("CmdBatNotification");}});

var CommConfigDialogA = Module.findExportByName("kernel32.dll", "CommConfigDialogA")
Interceptor.attach(CommConfigDialogA, {onLeave: function (args) {send("CommConfigDialogA");}});

var CommConfigDialogW = Module.findExportByName("kernel32.dll", "CommConfigDialogW")
Interceptor.attach(CommConfigDialogW, {onLeave: function (args) {send("CommConfigDialogW");}});

var CompareCalendarDates = Module.findExportByName("kernel32.dll", "CompareCalendarDates")
Interceptor.attach(CompareCalendarDates, {onLeave: function (args) {send("CompareCalendarDates");}});

var CompareFileTime = Module.findExportByName("kernel32.dll", "CompareFileTime")
Interceptor.attach(CompareFileTime, {onLeave: function (args) {send("CompareFileTime");}});

var CompareStringA = Module.findExportByName("kernel32.dll", "CompareStringA")
Interceptor.attach(CompareStringA, {onLeave: function (args) {send("CompareStringA");}});

var CompareStringEx = Module.findExportByName("kernel32.dll", "CompareStringEx")
Interceptor.attach(CompareStringEx, {onLeave: function (args) {send("CompareStringEx");}});

var CompareStringOrdinal = Module.findExportByName("kernel32.dll", "CompareStringOrdinal")
Interceptor.attach(CompareStringOrdinal, {onLeave: function (args) {send("CompareStringOrdinal");}});

var CompareStringW = Module.findExportByName("kernel32.dll", "CompareStringW")
Interceptor.attach(CompareStringW, {onLeave: function (args) {send("CompareStringW");}});

var ConnectNamedPipe = Module.findExportByName("kernel32.dll", "ConnectNamedPipe")
Interceptor.attach(ConnectNamedPipe, {onLeave: function (args) {send("ConnectNamedPipe");}});

var ConsoleMenuControl = Module.findExportByName("kernel32.dll", "ConsoleMenuControl")
Interceptor.attach(ConsoleMenuControl, {onLeave: function (args) {send("ConsoleMenuControl");}});

var ContinueDebugEvent = Module.findExportByName("kernel32.dll", "ContinueDebugEvent")
Interceptor.attach(ContinueDebugEvent, {onLeave: function (args) {send("ContinueDebugEvent");}});

var ConvertCalDateTimeToSystemTime = Module.findExportByName("kernel32.dll", "ConvertCalDateTimeToSystemTime")
Interceptor.attach(ConvertCalDateTimeToSystemTime, {onLeave: function (args) {send("ConvertCalDateTimeToSystemTime");}});

var ConvertDefaultLocale = Module.findExportByName("kernel32.dll", "ConvertDefaultLocale")
Interceptor.attach(ConvertDefaultLocale, {onLeave: function (args) {send("ConvertDefaultLocale");}});

var ConvertFiberToThread = Module.findExportByName("kernel32.dll", "ConvertFiberToThread")
Interceptor.attach(ConvertFiberToThread, {onLeave: function (args) {send("ConvertFiberToThread");}});

var ConvertNLSDayOfWeekToWin32DayOfWeek = Module.findExportByName("kernel32.dll", "ConvertNLSDayOfWeekToWin32DayOfWeek")
Interceptor.attach(ConvertNLSDayOfWeekToWin32DayOfWeek, {onLeave: function (args) {send("ConvertNLSDayOfWeekToWin32DayOfWeek");}});

var ConvertSystemTimeToCalDateTime = Module.findExportByName("kernel32.dll", "ConvertSystemTimeToCalDateTime")
Interceptor.attach(ConvertSystemTimeToCalDateTime, {onLeave: function (args) {send("ConvertSystemTimeToCalDateTime");}});

var ConvertThreadToFiber = Module.findExportByName("kernel32.dll", "ConvertThreadToFiber")
Interceptor.attach(ConvertThreadToFiber, {onLeave: function (args) {send("ConvertThreadToFiber");}});

var ConvertThreadToFiberEx = Module.findExportByName("kernel32.dll", "ConvertThreadToFiberEx")
Interceptor.attach(ConvertThreadToFiberEx, {onLeave: function (args) {send("ConvertThreadToFiberEx");}});

var CopyContext = Module.findExportByName("kernel32.dll", "CopyContext")
Interceptor.attach(CopyContext, {onLeave: function (args) {send("CopyContext");}});

var CopyFile2 = Module.findExportByName("kernel32.dll", "CopyFile2")
Interceptor.attach(CopyFile2, {onLeave: function (args) {send("CopyFile2");}});

var CopyFileA = Module.findExportByName("kernel32.dll", "CopyFileA")
Interceptor.attach(CopyFileA, {onLeave: function (args) {send("CopyFileA");}});

var CopyFileExA = Module.findExportByName("kernel32.dll", "CopyFileExA")
Interceptor.attach(CopyFileExA, {onLeave: function (args) {send("CopyFileExA");}});

var CopyFileExW = Module.findExportByName("kernel32.dll", "CopyFileExW")
Interceptor.attach(CopyFileExW, {onLeave: function (args) {send("CopyFileExW");}});

var CopyFileTransactedA = Module.findExportByName("kernel32.dll", "CopyFileTransactedA")
Interceptor.attach(CopyFileTransactedA, {onLeave: function (args) {send("CopyFileTransactedA");}});

var CopyFileTransactedW = Module.findExportByName("kernel32.dll", "CopyFileTransactedW")
Interceptor.attach(CopyFileTransactedW, {onLeave: function (args) {send("CopyFileTransactedW");}});

var CopyFileW = Module.findExportByName("kernel32.dll", "CopyFileW")
Interceptor.attach(CopyFileW, {onLeave: function (args) {send("CopyFileW");}});

var CopyLZFile = Module.findExportByName("kernel32.dll", "CopyLZFile")
Interceptor.attach(CopyLZFile, {onLeave: function (args) {send("CopyLZFile");}});

var CreateActCtxA = Module.findExportByName("kernel32.dll", "CreateActCtxA")
Interceptor.attach(CreateActCtxA, {onLeave: function (args) {send("CreateActCtxA");}});

var CreateActCtxW = Module.findExportByName("kernel32.dll", "CreateActCtxW")
Interceptor.attach(CreateActCtxW, {onLeave: function (args) {send("CreateActCtxW");}});

var CreateActCtxWWorker = Module.findExportByName("kernel32.dll", "CreateActCtxWWorker")
Interceptor.attach(CreateActCtxWWorker, {onLeave: function (args) {send("CreateActCtxWWorker");}});

var CreateBoundaryDescriptorA = Module.findExportByName("kernel32.dll", "CreateBoundaryDescriptorA")
Interceptor.attach(CreateBoundaryDescriptorA, {onLeave: function (args) {send("CreateBoundaryDescriptorA");}});

var CreateBoundaryDescriptorW = Module.findExportByName("kernel32.dll", "CreateBoundaryDescriptorW")
Interceptor.attach(CreateBoundaryDescriptorW, {onLeave: function (args) {send("CreateBoundaryDescriptorW");}});

var CreateConsoleScreenBuffer = Module.findExportByName("kernel32.dll", "CreateConsoleScreenBuffer")
Interceptor.attach(CreateConsoleScreenBuffer, {onLeave: function (args) {send("CreateConsoleScreenBuffer");}});

var CreateDirectoryA = Module.findExportByName("kernel32.dll", "CreateDirectoryA")
Interceptor.attach(CreateDirectoryA, {onLeave: function (args) {send("CreateDirectoryA");}});

var CreateDirectoryExA = Module.findExportByName("kernel32.dll", "CreateDirectoryExA")
Interceptor.attach(CreateDirectoryExA, {onLeave: function (args) {send("CreateDirectoryExA");}});

var CreateDirectoryExW = Module.findExportByName("kernel32.dll", "CreateDirectoryExW")
Interceptor.attach(CreateDirectoryExW, {onLeave: function (args) {send("CreateDirectoryExW");}});

var CreateDirectoryTransactedA = Module.findExportByName("kernel32.dll", "CreateDirectoryTransactedA")
Interceptor.attach(CreateDirectoryTransactedA, {onLeave: function (args) {send("CreateDirectoryTransactedA");}});

var CreateDirectoryTransactedW = Module.findExportByName("kernel32.dll", "CreateDirectoryTransactedW")
Interceptor.attach(CreateDirectoryTransactedW, {onLeave: function (args) {send("CreateDirectoryTransactedW");}});

var CreateDirectoryW = Module.findExportByName("kernel32.dll", "CreateDirectoryW")
Interceptor.attach(CreateDirectoryW, {onLeave: function (args) {send("CreateDirectoryW");}});

var CreateEnclave = Module.findExportByName("kernel32.dll", "CreateEnclave")
Interceptor.attach(CreateEnclave, {onLeave: function (args) {send("CreateEnclave");}});

var CreateEventA = Module.findExportByName("kernel32.dll", "CreateEventA")
Interceptor.attach(CreateEventA, {onLeave: function (args) {send("CreateEventA");}});

var CreateEventExA = Module.findExportByName("kernel32.dll", "CreateEventExA")
Interceptor.attach(CreateEventExA, {onLeave: function (args) {send("CreateEventExA");}});

var CreateEventExW = Module.findExportByName("kernel32.dll", "CreateEventExW")
Interceptor.attach(CreateEventExW, {onLeave: function (args) {send("CreateEventExW");}});

var CreateEventW = Module.findExportByName("kernel32.dll", "CreateEventW")
Interceptor.attach(CreateEventW, {onLeave: function (args) {send("CreateEventW");}});

var CreateFiber = Module.findExportByName("kernel32.dll", "CreateFiber")
Interceptor.attach(CreateFiber, {onLeave: function (args) {send("CreateFiber");}});

var CreateFiberEx = Module.findExportByName("kernel32.dll", "CreateFiberEx")
Interceptor.attach(CreateFiberEx, {onLeave: function (args) {send("CreateFiberEx");}});

var CreateFile2 = Module.findExportByName("kernel32.dll", "CreateFile2")
Interceptor.attach(CreateFile2, {onLeave: function (args) {send("CreateFile2");}});

var CreateFileA = Module.findExportByName("kernel32.dll", "CreateFileA")
Interceptor.attach(CreateFileA, {onLeave: function (args) {send("CreateFileA");}});

var CreateFileMappingA = Module.findExportByName("kernel32.dll", "CreateFileMappingA")
Interceptor.attach(CreateFileMappingA, {onLeave: function (args) {send("CreateFileMappingA");}});

var CreateFileMappingFromApp = Module.findExportByName("kernel32.dll", "CreateFileMappingFromApp")
Interceptor.attach(CreateFileMappingFromApp, {onLeave: function (args) {send("CreateFileMappingFromApp");}});

var CreateFileMappingNumaA = Module.findExportByName("kernel32.dll", "CreateFileMappingNumaA")
Interceptor.attach(CreateFileMappingNumaA, {onLeave: function (args) {send("CreateFileMappingNumaA");}});

var CreateFileMappingNumaW = Module.findExportByName("kernel32.dll", "CreateFileMappingNumaW")
Interceptor.attach(CreateFileMappingNumaW, {onLeave: function (args) {send("CreateFileMappingNumaW");}});

var CreateFileMappingW = Module.findExportByName("kernel32.dll", "CreateFileMappingW")
Interceptor.attach(CreateFileMappingW, {onLeave: function (args) {send("CreateFileMappingW");}});

var CreateFileTransactedA = Module.findExportByName("kernel32.dll", "CreateFileTransactedA")
Interceptor.attach(CreateFileTransactedA, {onLeave: function (args) {send("CreateFileTransactedA");}});

var CreateFileTransactedW = Module.findExportByName("kernel32.dll", "CreateFileTransactedW")
Interceptor.attach(CreateFileTransactedW, {onLeave: function (args) {send("CreateFileTransactedW");}});

var CreateFileW = Module.findExportByName("kernel32.dll", "CreateFileW")
Interceptor.attach(CreateFileW, {onLeave: function (args) {send("CreateFileW");}});

var CreateHardLinkA = Module.findExportByName("kernel32.dll", "CreateHardLinkA")
Interceptor.attach(CreateHardLinkA, {onLeave: function (args) {send("CreateHardLinkA");}});

var CreateHardLinkTransactedA = Module.findExportByName("kernel32.dll", "CreateHardLinkTransactedA")
Interceptor.attach(CreateHardLinkTransactedA, {onLeave: function (args) {send("CreateHardLinkTransactedA");}});

var CreateHardLinkTransactedW = Module.findExportByName("kernel32.dll", "CreateHardLinkTransactedW")
Interceptor.attach(CreateHardLinkTransactedW, {onLeave: function (args) {send("CreateHardLinkTransactedW");}});

var CreateHardLinkW = Module.findExportByName("kernel32.dll", "CreateHardLinkW")
Interceptor.attach(CreateHardLinkW, {onLeave: function (args) {send("CreateHardLinkW");}});

var CreateIoCompletionPort = Module.findExportByName("kernel32.dll", "CreateIoCompletionPort")
Interceptor.attach(CreateIoCompletionPort, {onLeave: function (args) {send("CreateIoCompletionPort");}});

var CreateIoRing = Module.findExportByName("kernel32.dll", "CreateIoRing")
Interceptor.attach(CreateIoRing, {onLeave: function (args) {send("CreateIoRing");}});

var CreateJobObjectA = Module.findExportByName("kernel32.dll", "CreateJobObjectA")
Interceptor.attach(CreateJobObjectA, {onLeave: function (args) {send("CreateJobObjectA");}});

var CreateJobObjectW = Module.findExportByName("kernel32.dll", "CreateJobObjectW")
Interceptor.attach(CreateJobObjectW, {onLeave: function (args) {send("CreateJobObjectW");}});

var CreateJobSet = Module.findExportByName("kernel32.dll", "CreateJobSet")
Interceptor.attach(CreateJobSet, {onLeave: function (args) {send("CreateJobSet");}});

var CreateMailslotA = Module.findExportByName("kernel32.dll", "CreateMailslotA")
Interceptor.attach(CreateMailslotA, {onLeave: function (args) {send("CreateMailslotA");}});

var CreateMailslotW = Module.findExportByName("kernel32.dll", "CreateMailslotW")
Interceptor.attach(CreateMailslotW, {onLeave: function (args) {send("CreateMailslotW");}});

var CreateMemoryResourceNotification = Module.findExportByName("kernel32.dll", "CreateMemoryResourceNotification")
Interceptor.attach(CreateMemoryResourceNotification, {onLeave: function (args) {send("CreateMemoryResourceNotification");}});

var CreateMutexA = Module.findExportByName("kernel32.dll", "CreateMutexA")
Interceptor.attach(CreateMutexA, {onLeave: function (args) {send("CreateMutexA");}});

var CreateMutexExA = Module.findExportByName("kernel32.dll", "CreateMutexExA")
Interceptor.attach(CreateMutexExA, {onLeave: function (args) {send("CreateMutexExA");}});

var CreateMutexExW = Module.findExportByName("kernel32.dll", "CreateMutexExW")
Interceptor.attach(CreateMutexExW, {onLeave: function (args) {send("CreateMutexExW");}});

var CreateMutexW = Module.findExportByName("kernel32.dll", "CreateMutexW")
Interceptor.attach(CreateMutexW, {onLeave: function (args) {send("CreateMutexW");}});

var CreateNamedPipeA = Module.findExportByName("kernel32.dll", "CreateNamedPipeA")
Interceptor.attach(CreateNamedPipeA, {onLeave: function (args) {send("CreateNamedPipeA");}});

var CreateNamedPipeW = Module.findExportByName("kernel32.dll", "CreateNamedPipeW")
Interceptor.attach(CreateNamedPipeW, {onLeave: function (args) {send("CreateNamedPipeW");}});

var CreatePackageVirtualizationContext = Module.findExportByName("kernel32.dll", "CreatePackageVirtualizationContext")
Interceptor.attach(CreatePackageVirtualizationContext, {onLeave: function (args) {send("CreatePackageVirtualizationContext");}});

var CreatePipe = Module.findExportByName("kernel32.dll", "CreatePipe")
Interceptor.attach(CreatePipe, {onLeave: function (args) {send("CreatePipe");}});

var CreatePrivateNamespaceA = Module.findExportByName("kernel32.dll", "CreatePrivateNamespaceA")
Interceptor.attach(CreatePrivateNamespaceA, {onLeave: function (args) {send("CreatePrivateNamespaceA");}});

var CreatePrivateNamespaceW = Module.findExportByName("kernel32.dll", "CreatePrivateNamespaceW")
Interceptor.attach(CreatePrivateNamespaceW, {onLeave: function (args) {send("CreatePrivateNamespaceW");}});

var CreateProcessA = Module.findExportByName("kernel32.dll", "CreateProcessA")
Interceptor.attach(CreateProcessA, {onLeave: function (args) {send("CreateProcessA");}});

var CreateProcessAsUserA = Module.findExportByName("kernel32.dll", "CreateProcessAsUserA")
Interceptor.attach(CreateProcessAsUserA, {onLeave: function (args) {send("CreateProcessAsUserA");}});

var CreateProcessAsUserW = Module.findExportByName("kernel32.dll", "CreateProcessAsUserW")
Interceptor.attach(CreateProcessAsUserW, {onLeave: function (args) {send("CreateProcessAsUserW");}});

var CreateProcessInternalA = Module.findExportByName("kernel32.dll", "CreateProcessInternalA")
Interceptor.attach(CreateProcessInternalA, {onLeave: function (args) {send("CreateProcessInternalA");}});

var CreateProcessInternalW = Module.findExportByName("kernel32.dll", "CreateProcessInternalW")
Interceptor.attach(CreateProcessInternalW, {onLeave: function (args) {send("CreateProcessInternalW");}});

var CreateProcessW = Module.findExportByName("kernel32.dll", "CreateProcessW")
Interceptor.attach(CreateProcessW, {onLeave: function (args) {send("CreateProcessW");}});

var CreatePseudoConsole = Module.findExportByName("kernel32.dll", "CreatePseudoConsole")
Interceptor.attach(CreatePseudoConsole, {onLeave: function (args) {send("CreatePseudoConsole");}});

var CreateRemoteThread = Module.findExportByName("kernel32.dll", "CreateRemoteThread")
Interceptor.attach(CreateRemoteThread, {onLeave: function (args) {send("CreateRemoteThread");}});

var CreateRemoteThreadEx = Module.findExportByName("kernel32.dll", "CreateRemoteThreadEx")
Interceptor.attach(CreateRemoteThreadEx, {onLeave: function (args) {send("CreateRemoteThreadEx");}});

var CreateSemaphoreA = Module.findExportByName("kernel32.dll", "CreateSemaphoreA")
Interceptor.attach(CreateSemaphoreA, {onLeave: function (args) {send("CreateSemaphoreA");}});

var CreateSemaphoreExA = Module.findExportByName("kernel32.dll", "CreateSemaphoreExA")
Interceptor.attach(CreateSemaphoreExA, {onLeave: function (args) {send("CreateSemaphoreExA");}});

var CreateSemaphoreExW = Module.findExportByName("kernel32.dll", "CreateSemaphoreExW")
Interceptor.attach(CreateSemaphoreExW, {onLeave: function (args) {send("CreateSemaphoreExW");}});

var CreateSemaphoreW = Module.findExportByName("kernel32.dll", "CreateSemaphoreW")
Interceptor.attach(CreateSemaphoreW, {onLeave: function (args) {send("CreateSemaphoreW");}});

var CreateSymbolicLinkA = Module.findExportByName("kernel32.dll", "CreateSymbolicLinkA")
Interceptor.attach(CreateSymbolicLinkA, {onLeave: function (args) {send("CreateSymbolicLinkA");}});

var CreateSymbolicLinkTransactedA = Module.findExportByName("kernel32.dll", "CreateSymbolicLinkTransactedA")
Interceptor.attach(CreateSymbolicLinkTransactedA, {onLeave: function (args) {send("CreateSymbolicLinkTransactedA");}});

var CreateSymbolicLinkTransactedW = Module.findExportByName("kernel32.dll", "CreateSymbolicLinkTransactedW")
Interceptor.attach(CreateSymbolicLinkTransactedW, {onLeave: function (args) {send("CreateSymbolicLinkTransactedW");}});

var CreateSymbolicLinkW = Module.findExportByName("kernel32.dll", "CreateSymbolicLinkW")
Interceptor.attach(CreateSymbolicLinkW, {onLeave: function (args) {send("CreateSymbolicLinkW");}});

var CreateTapePartition = Module.findExportByName("kernel32.dll", "CreateTapePartition")
Interceptor.attach(CreateTapePartition, {onLeave: function (args) {send("CreateTapePartition");}});

var CreateThread = Module.findExportByName("kernel32.dll", "CreateThread")
Interceptor.attach(CreateThread, {onLeave: function (args) {send("CreateThread");}});

var CreateThreadpool = Module.findExportByName("kernel32.dll", "CreateThreadpool")
Interceptor.attach(CreateThreadpool, {onLeave: function (args) {send("CreateThreadpool");}});

var CreateThreadpoolCleanupGroup = Module.findExportByName("kernel32.dll", "CreateThreadpoolCleanupGroup")
Interceptor.attach(CreateThreadpoolCleanupGroup, {onLeave: function (args) {send("CreateThreadpoolCleanupGroup");}});

var CreateThreadpoolIo = Module.findExportByName("kernel32.dll", "CreateThreadpoolIo")
Interceptor.attach(CreateThreadpoolIo, {onLeave: function (args) {send("CreateThreadpoolIo");}});

var CreateThreadpoolTimer = Module.findExportByName("kernel32.dll", "CreateThreadpoolTimer")
Interceptor.attach(CreateThreadpoolTimer, {onLeave: function (args) {send("CreateThreadpoolTimer");}});

var CreateThreadpoolWait = Module.findExportByName("kernel32.dll", "CreateThreadpoolWait")
Interceptor.attach(CreateThreadpoolWait, {onLeave: function (args) {send("CreateThreadpoolWait");}});

var CreateThreadpoolWork = Module.findExportByName("kernel32.dll", "CreateThreadpoolWork")
Interceptor.attach(CreateThreadpoolWork, {onLeave: function (args) {send("CreateThreadpoolWork");}});

var CreateTimerQueue = Module.findExportByName("kernel32.dll", "CreateTimerQueue")
Interceptor.attach(CreateTimerQueue, {onLeave: function (args) {send("CreateTimerQueue");}});

var CreateTimerQueueTimer = Module.findExportByName("kernel32.dll", "CreateTimerQueueTimer")
Interceptor.attach(CreateTimerQueueTimer, {onLeave: function (args) {send("CreateTimerQueueTimer");}});

var CreateToolhelp32Snapshot = Module.findExportByName("kernel32.dll", "CreateToolhelp32Snapshot")
Interceptor.attach(CreateToolhelp32Snapshot, {onLeave: function (args) {send("CreateToolhelp32Snapshot");}});

var CreateUmsCompletionList = Module.findExportByName("kernel32.dll", "CreateUmsCompletionList")
Interceptor.attach(CreateUmsCompletionList, {onLeave: function (args) {send("CreateUmsCompletionList");}});

var CreateUmsThreadContext = Module.findExportByName("kernel32.dll", "CreateUmsThreadContext")
Interceptor.attach(CreateUmsThreadContext, {onLeave: function (args) {send("CreateUmsThreadContext");}});

var CreateWaitableTimerA = Module.findExportByName("kernel32.dll", "CreateWaitableTimerA")
Interceptor.attach(CreateWaitableTimerA, {onLeave: function (args) {send("CreateWaitableTimerA");}});

var CreateWaitableTimerExA = Module.findExportByName("kernel32.dll", "CreateWaitableTimerExA")
Interceptor.attach(CreateWaitableTimerExA, {onLeave: function (args) {send("CreateWaitableTimerExA");}});

var CreateWaitableTimerExW = Module.findExportByName("kernel32.dll", "CreateWaitableTimerExW")
Interceptor.attach(CreateWaitableTimerExW, {onLeave: function (args) {send("CreateWaitableTimerExW");}});

var CreateWaitableTimerW = Module.findExportByName("kernel32.dll", "CreateWaitableTimerW")
Interceptor.attach(CreateWaitableTimerW, {onLeave: function (args) {send("CreateWaitableTimerW");}});

var CtrlRoutine = Module.findExportByName("kernel32.dll", "CtrlRoutine")
Interceptor.attach(CtrlRoutine, {onLeave: function (args) {send("CtrlRoutine");}});

var DeactivateActCtx = Module.findExportByName("kernel32.dll", "DeactivateActCtx")
Interceptor.attach(DeactivateActCtx, {onLeave: function (args) {send("DeactivateActCtx");}});

var DeactivateActCtxWorker = Module.findExportByName("kernel32.dll", "DeactivateActCtxWorker")
Interceptor.attach(DeactivateActCtxWorker, {onLeave: function (args) {send("DeactivateActCtxWorker");}});

var DeactivatePackageVirtualizationContext = Module.findExportByName("kernel32.dll", "DeactivatePackageVirtualizationContext")
Interceptor.attach(DeactivatePackageVirtualizationContext, {onLeave: function (args) {send("DeactivatePackageVirtualizationContext");}});

var DebugActiveProcess = Module.findExportByName("kernel32.dll", "DebugActiveProcess")
Interceptor.attach(DebugActiveProcess, {onLeave: function (args) {send("DebugActiveProcess");}});

var DebugActiveProcessStop = Module.findExportByName("kernel32.dll", "DebugActiveProcessStop")
Interceptor.attach(DebugActiveProcessStop, {onLeave: function (args) {send("DebugActiveProcessStop");}});

var DebugBreak = Module.findExportByName("kernel32.dll", "DebugBreak")
Interceptor.attach(DebugBreak, {onLeave: function (args) {send("DebugBreak");}});

var DebugBreakProcess = Module.findExportByName("kernel32.dll", "DebugBreakProcess")
Interceptor.attach(DebugBreakProcess, {onLeave: function (args) {send("DebugBreakProcess");}});

var DebugSetProcessKillOnExit = Module.findExportByName("kernel32.dll", "DebugSetProcessKillOnExit")
Interceptor.attach(DebugSetProcessKillOnExit, {onLeave: function (args) {send("DebugSetProcessKillOnExit");}});

var DecodePointer = Module.findExportByName("kernel32.dll", "DecodePointer")
Interceptor.attach(DecodePointer, {onLeave: function (args) {send("DecodePointer");}});

var DecodeSystemPointer = Module.findExportByName("kernel32.dll", "DecodeSystemPointer")
Interceptor.attach(DecodeSystemPointer, {onLeave: function (args) {send("DecodeSystemPointer");}});

var DefineDosDeviceA = Module.findExportByName("kernel32.dll", "DefineDosDeviceA")
Interceptor.attach(DefineDosDeviceA, {onLeave: function (args) {send("DefineDosDeviceA");}});

var DefineDosDeviceW = Module.findExportByName("kernel32.dll", "DefineDosDeviceW")
Interceptor.attach(DefineDosDeviceW, {onLeave: function (args) {send("DefineDosDeviceW");}});

var DelayLoadFailureHook = Module.findExportByName("kernel32.dll", "DelayLoadFailureHook")
Interceptor.attach(DelayLoadFailureHook, {onLeave: function (args) {send("DelayLoadFailureHook");}});

var DeleteAtom = Module.findExportByName("kernel32.dll", "DeleteAtom")
Interceptor.attach(DeleteAtom, {onLeave: function (args) {send("DeleteAtom");}});

var DeleteBoundaryDescriptor = Module.findExportByName("kernel32.dll", "DeleteBoundaryDescriptor")
Interceptor.attach(DeleteBoundaryDescriptor, {onLeave: function (args) {send("DeleteBoundaryDescriptor");}});

var DeleteCriticalSection = Module.findExportByName("kernel32.dll", "DeleteCriticalSection")
Interceptor.attach(DeleteCriticalSection, {onLeave: function (args) {send("DeleteCriticalSection");}});

var DeleteFiber = Module.findExportByName("kernel32.dll", "DeleteFiber")
Interceptor.attach(DeleteFiber, {onLeave: function (args) {send("DeleteFiber");}});

var DeleteFileA = Module.findExportByName("kernel32.dll", "DeleteFileA")
Interceptor.attach(DeleteFileA, {onLeave: function (args) {send("DeleteFileA");}});

var DeleteFileTransactedA = Module.findExportByName("kernel32.dll", "DeleteFileTransactedA")
Interceptor.attach(DeleteFileTransactedA, {onLeave: function (args) {send("DeleteFileTransactedA");}});

var DeleteFileTransactedW = Module.findExportByName("kernel32.dll", "DeleteFileTransactedW")
Interceptor.attach(DeleteFileTransactedW, {onLeave: function (args) {send("DeleteFileTransactedW");}});

var DeleteFileW = Module.findExportByName("kernel32.dll", "DeleteFileW")
Interceptor.attach(DeleteFileW, {onLeave: function (args) {send("DeleteFileW");}});

var DeleteProcThreadAttributeList = Module.findExportByName("kernel32.dll", "DeleteProcThreadAttributeList")
Interceptor.attach(DeleteProcThreadAttributeList, {onLeave: function (args) {send("DeleteProcThreadAttributeList");}});

var DeleteSynchronizationBarrier = Module.findExportByName("kernel32.dll", "DeleteSynchronizationBarrier")
Interceptor.attach(DeleteSynchronizationBarrier, {onLeave: function (args) {send("DeleteSynchronizationBarrier");}});

var DeleteTimerQueue = Module.findExportByName("kernel32.dll", "DeleteTimerQueue")
Interceptor.attach(DeleteTimerQueue, {onLeave: function (args) {send("DeleteTimerQueue");}});

var DeleteTimerQueueEx = Module.findExportByName("kernel32.dll", "DeleteTimerQueueEx")
Interceptor.attach(DeleteTimerQueueEx, {onLeave: function (args) {send("DeleteTimerQueueEx");}});

var DeleteTimerQueueTimer = Module.findExportByName("kernel32.dll", "DeleteTimerQueueTimer")
Interceptor.attach(DeleteTimerQueueTimer, {onLeave: function (args) {send("DeleteTimerQueueTimer");}});

var DeleteUmsCompletionList = Module.findExportByName("kernel32.dll", "DeleteUmsCompletionList")
Interceptor.attach(DeleteUmsCompletionList, {onLeave: function (args) {send("DeleteUmsCompletionList");}});

var DeleteUmsThreadContext = Module.findExportByName("kernel32.dll", "DeleteUmsThreadContext")
Interceptor.attach(DeleteUmsThreadContext, {onLeave: function (args) {send("DeleteUmsThreadContext");}});

var DeleteVolumeMountPointA = Module.findExportByName("kernel32.dll", "DeleteVolumeMountPointA")
Interceptor.attach(DeleteVolumeMountPointA, {onLeave: function (args) {send("DeleteVolumeMountPointA");}});

var DeleteVolumeMountPointW = Module.findExportByName("kernel32.dll", "DeleteVolumeMountPointW")
Interceptor.attach(DeleteVolumeMountPointW, {onLeave: function (args) {send("DeleteVolumeMountPointW");}});

var DequeueUmsCompletionListItems = Module.findExportByName("kernel32.dll", "DequeueUmsCompletionListItems")
Interceptor.attach(DequeueUmsCompletionListItems, {onLeave: function (args) {send("DequeueUmsCompletionListItems");}});

var DeviceIoControl = Module.findExportByName("kernel32.dll", "DeviceIoControl")
Interceptor.attach(DeviceIoControl, {onLeave: function (args) {send("DeviceIoControl");}});

var DisableThreadLibraryCalls = Module.findExportByName("kernel32.dll", "DisableThreadLibraryCalls")
Interceptor.attach(DisableThreadLibraryCalls, {onLeave: function (args) {send("DisableThreadLibraryCalls");}});

var DisableThreadProfiling = Module.findExportByName("kernel32.dll", "DisableThreadProfiling")
Interceptor.attach(DisableThreadProfiling, {onLeave: function (args) {send("DisableThreadProfiling");}});

var DisassociateCurrentThreadFromCallback = Module.findExportByName("kernel32.dll", "DisassociateCurrentThreadFromCallback")
Interceptor.attach(DisassociateCurrentThreadFromCallback, {onLeave: function (args) {send("DisassociateCurrentThreadFromCallback");}});

var DiscardVirtualMemory = Module.findExportByName("kernel32.dll", "DiscardVirtualMemory")
Interceptor.attach(DiscardVirtualMemory, {onLeave: function (args) {send("DiscardVirtualMemory");}});

var DisconnectNamedPipe = Module.findExportByName("kernel32.dll", "DisconnectNamedPipe")
Interceptor.attach(DisconnectNamedPipe, {onLeave: function (args) {send("DisconnectNamedPipe");}});

var DnsHostnameToComputerNameA = Module.findExportByName("kernel32.dll", "DnsHostnameToComputerNameA")
Interceptor.attach(DnsHostnameToComputerNameA, {onLeave: function (args) {send("DnsHostnameToComputerNameA");}});

var DnsHostnameToComputerNameExW = Module.findExportByName("kernel32.dll", "DnsHostnameToComputerNameExW")
Interceptor.attach(DnsHostnameToComputerNameExW, {onLeave: function (args) {send("DnsHostnameToComputerNameExW");}});

var DnsHostnameToComputerNameW = Module.findExportByName("kernel32.dll", "DnsHostnameToComputerNameW")
Interceptor.attach(DnsHostnameToComputerNameW, {onLeave: function (args) {send("DnsHostnameToComputerNameW");}});

var DosDateTimeToFileTime = Module.findExportByName("kernel32.dll", "DosDateTimeToFileTime")
Interceptor.attach(DosDateTimeToFileTime, {onLeave: function (args) {send("DosDateTimeToFileTime");}});

var DosPathToSessionPathA = Module.findExportByName("kernel32.dll", "DosPathToSessionPathA")
Interceptor.attach(DosPathToSessionPathA, {onLeave: function (args) {send("DosPathToSessionPathA");}});

var DosPathToSessionPathW = Module.findExportByName("kernel32.dll", "DosPathToSessionPathW")
Interceptor.attach(DosPathToSessionPathW, {onLeave: function (args) {send("DosPathToSessionPathW");}});

var DuplicateConsoleHandle = Module.findExportByName("kernel32.dll", "DuplicateConsoleHandle")
Interceptor.attach(DuplicateConsoleHandle, {onLeave: function (args) {send("DuplicateConsoleHandle");}});

var DuplicateEncryptionInfoFileExt = Module.findExportByName("kernel32.dll", "DuplicateEncryptionInfoFileExt")
Interceptor.attach(DuplicateEncryptionInfoFileExt, {onLeave: function (args) {send("DuplicateEncryptionInfoFileExt");}});

var DuplicateHandle = Module.findExportByName("kernel32.dll", "DuplicateHandle")
Interceptor.attach(DuplicateHandle, {onLeave: function (args) {send("DuplicateHandle");}});

var DuplicatePackageVirtualizationContext = Module.findExportByName("kernel32.dll", "DuplicatePackageVirtualizationContext")
Interceptor.attach(DuplicatePackageVirtualizationContext, {onLeave: function (args) {send("DuplicatePackageVirtualizationContext");}});

var EnableProcessOptionalXStateFeatures = Module.findExportByName("kernel32.dll", "EnableProcessOptionalXStateFeatures")
Interceptor.attach(EnableProcessOptionalXStateFeatures, {onLeave: function (args) {send("EnableProcessOptionalXStateFeatures");}});

var EnableThreadProfiling = Module.findExportByName("kernel32.dll", "EnableThreadProfiling")
Interceptor.attach(EnableThreadProfiling, {onLeave: function (args) {send("EnableThreadProfiling");}});

var EncodePointer = Module.findExportByName("kernel32.dll", "EncodePointer")
Interceptor.attach(EncodePointer, {onLeave: function (args) {send("EncodePointer");}});

var EncodeSystemPointer = Module.findExportByName("kernel32.dll", "EncodeSystemPointer")
Interceptor.attach(EncodeSystemPointer, {onLeave: function (args) {send("EncodeSystemPointer");}});

var EndUpdateResourceA = Module.findExportByName("kernel32.dll", "EndUpdateResourceA")
Interceptor.attach(EndUpdateResourceA, {onLeave: function (args) {send("EndUpdateResourceA");}});

var EndUpdateResourceW = Module.findExportByName("kernel32.dll", "EndUpdateResourceW")
Interceptor.attach(EndUpdateResourceW, {onLeave: function (args) {send("EndUpdateResourceW");}});

var EnterCriticalSection = Module.findExportByName("kernel32.dll", "EnterCriticalSection")
Interceptor.attach(EnterCriticalSection, {onLeave: function (args) {send("EnterCriticalSection");}});

var EnterSynchronizationBarrier = Module.findExportByName("kernel32.dll", "EnterSynchronizationBarrier")
Interceptor.attach(EnterSynchronizationBarrier, {onLeave: function (args) {send("EnterSynchronizationBarrier");}});

var EnterUmsSchedulingMode = Module.findExportByName("kernel32.dll", "EnterUmsSchedulingMode")
Interceptor.attach(EnterUmsSchedulingMode, {onLeave: function (args) {send("EnterUmsSchedulingMode");}});

var EnumCalendarInfoA = Module.findExportByName("kernel32.dll", "EnumCalendarInfoA")
Interceptor.attach(EnumCalendarInfoA, {onLeave: function (args) {send("EnumCalendarInfoA");}});

var EnumCalendarInfoExA = Module.findExportByName("kernel32.dll", "EnumCalendarInfoExA")
Interceptor.attach(EnumCalendarInfoExA, {onLeave: function (args) {send("EnumCalendarInfoExA");}});

var EnumCalendarInfoExEx = Module.findExportByName("kernel32.dll", "EnumCalendarInfoExEx")
Interceptor.attach(EnumCalendarInfoExEx, {onLeave: function (args) {send("EnumCalendarInfoExEx");}});

var EnumCalendarInfoExW = Module.findExportByName("kernel32.dll", "EnumCalendarInfoExW")
Interceptor.attach(EnumCalendarInfoExW, {onLeave: function (args) {send("EnumCalendarInfoExW");}});

var EnumCalendarInfoW = Module.findExportByName("kernel32.dll", "EnumCalendarInfoW")
Interceptor.attach(EnumCalendarInfoW, {onLeave: function (args) {send("EnumCalendarInfoW");}});

var EnumDateFormatsA = Module.findExportByName("kernel32.dll", "EnumDateFormatsA")
Interceptor.attach(EnumDateFormatsA, {onLeave: function (args) {send("EnumDateFormatsA");}});

var EnumDateFormatsExA = Module.findExportByName("kernel32.dll", "EnumDateFormatsExA")
Interceptor.attach(EnumDateFormatsExA, {onLeave: function (args) {send("EnumDateFormatsExA");}});

var EnumDateFormatsExEx = Module.findExportByName("kernel32.dll", "EnumDateFormatsExEx")
Interceptor.attach(EnumDateFormatsExEx, {onLeave: function (args) {send("EnumDateFormatsExEx");}});

var EnumDateFormatsExW = Module.findExportByName("kernel32.dll", "EnumDateFormatsExW")
Interceptor.attach(EnumDateFormatsExW, {onLeave: function (args) {send("EnumDateFormatsExW");}});

var EnumDateFormatsW = Module.findExportByName("kernel32.dll", "EnumDateFormatsW")
Interceptor.attach(EnumDateFormatsW, {onLeave: function (args) {send("EnumDateFormatsW");}});

var EnumLanguageGroupLocalesA = Module.findExportByName("kernel32.dll", "EnumLanguageGroupLocalesA")
Interceptor.attach(EnumLanguageGroupLocalesA, {onLeave: function (args) {send("EnumLanguageGroupLocalesA");}});

var EnumLanguageGroupLocalesW = Module.findExportByName("kernel32.dll", "EnumLanguageGroupLocalesW")
Interceptor.attach(EnumLanguageGroupLocalesW, {onLeave: function (args) {send("EnumLanguageGroupLocalesW");}});

var EnumResourceLanguagesA = Module.findExportByName("kernel32.dll", "EnumResourceLanguagesA")
Interceptor.attach(EnumResourceLanguagesA, {onLeave: function (args) {send("EnumResourceLanguagesA");}});

var EnumResourceLanguagesExA = Module.findExportByName("kernel32.dll", "EnumResourceLanguagesExA")
Interceptor.attach(EnumResourceLanguagesExA, {onLeave: function (args) {send("EnumResourceLanguagesExA");}});

var EnumResourceLanguagesExW = Module.findExportByName("kernel32.dll", "EnumResourceLanguagesExW")
Interceptor.attach(EnumResourceLanguagesExW, {onLeave: function (args) {send("EnumResourceLanguagesExW");}});

var EnumResourceLanguagesW = Module.findExportByName("kernel32.dll", "EnumResourceLanguagesW")
Interceptor.attach(EnumResourceLanguagesW, {onLeave: function (args) {send("EnumResourceLanguagesW");}});

var EnumResourceNamesA = Module.findExportByName("kernel32.dll", "EnumResourceNamesA")
Interceptor.attach(EnumResourceNamesA, {onLeave: function (args) {send("EnumResourceNamesA");}});

var EnumResourceNamesExA = Module.findExportByName("kernel32.dll", "EnumResourceNamesExA")
Interceptor.attach(EnumResourceNamesExA, {onLeave: function (args) {send("EnumResourceNamesExA");}});

var EnumResourceNamesExW = Module.findExportByName("kernel32.dll", "EnumResourceNamesExW")
Interceptor.attach(EnumResourceNamesExW, {onLeave: function (args) {send("EnumResourceNamesExW");}});

var EnumResourceNamesW = Module.findExportByName("kernel32.dll", "EnumResourceNamesW")
Interceptor.attach(EnumResourceNamesW, {onLeave: function (args) {send("EnumResourceNamesW");}});

var EnumResourceTypesA = Module.findExportByName("kernel32.dll", "EnumResourceTypesA")
Interceptor.attach(EnumResourceTypesA, {onLeave: function (args) {send("EnumResourceTypesA");}});

var EnumResourceTypesExA = Module.findExportByName("kernel32.dll", "EnumResourceTypesExA")
Interceptor.attach(EnumResourceTypesExA, {onLeave: function (args) {send("EnumResourceTypesExA");}});

var EnumResourceTypesExW = Module.findExportByName("kernel32.dll", "EnumResourceTypesExW")
Interceptor.attach(EnumResourceTypesExW, {onLeave: function (args) {send("EnumResourceTypesExW");}});

var EnumResourceTypesW = Module.findExportByName("kernel32.dll", "EnumResourceTypesW")
Interceptor.attach(EnumResourceTypesW, {onLeave: function (args) {send("EnumResourceTypesW");}});

var EnumSystemCodePagesA = Module.findExportByName("kernel32.dll", "EnumSystemCodePagesA")
Interceptor.attach(EnumSystemCodePagesA, {onLeave: function (args) {send("EnumSystemCodePagesA");}});

var EnumSystemCodePagesW = Module.findExportByName("kernel32.dll", "EnumSystemCodePagesW")
Interceptor.attach(EnumSystemCodePagesW, {onLeave: function (args) {send("EnumSystemCodePagesW");}});

var EnumSystemFirmwareTables = Module.findExportByName("kernel32.dll", "EnumSystemFirmwareTables")
Interceptor.attach(EnumSystemFirmwareTables, {onLeave: function (args) {send("EnumSystemFirmwareTables");}});

var EnumSystemGeoID = Module.findExportByName("kernel32.dll", "EnumSystemGeoID")
Interceptor.attach(EnumSystemGeoID, {onLeave: function (args) {send("EnumSystemGeoID");}});

var EnumSystemGeoNames = Module.findExportByName("kernel32.dll", "EnumSystemGeoNames")
Interceptor.attach(EnumSystemGeoNames, {onLeave: function (args) {send("EnumSystemGeoNames");}});

var EnumSystemLanguageGroupsA = Module.findExportByName("kernel32.dll", "EnumSystemLanguageGroupsA")
Interceptor.attach(EnumSystemLanguageGroupsA, {onLeave: function (args) {send("EnumSystemLanguageGroupsA");}});

var EnumSystemLanguageGroupsW = Module.findExportByName("kernel32.dll", "EnumSystemLanguageGroupsW")
Interceptor.attach(EnumSystemLanguageGroupsW, {onLeave: function (args) {send("EnumSystemLanguageGroupsW");}});

var EnumSystemLocalesA = Module.findExportByName("kernel32.dll", "EnumSystemLocalesA")
Interceptor.attach(EnumSystemLocalesA, {onLeave: function (args) {send("EnumSystemLocalesA");}});

var EnumSystemLocalesEx = Module.findExportByName("kernel32.dll", "EnumSystemLocalesEx")
Interceptor.attach(EnumSystemLocalesEx, {onLeave: function (args) {send("EnumSystemLocalesEx");}});

var EnumSystemLocalesW = Module.findExportByName("kernel32.dll", "EnumSystemLocalesW")
Interceptor.attach(EnumSystemLocalesW, {onLeave: function (args) {send("EnumSystemLocalesW");}});

var EnumTimeFormatsA = Module.findExportByName("kernel32.dll", "EnumTimeFormatsA")
Interceptor.attach(EnumTimeFormatsA, {onLeave: function (args) {send("EnumTimeFormatsA");}});

var EnumTimeFormatsEx = Module.findExportByName("kernel32.dll", "EnumTimeFormatsEx")
Interceptor.attach(EnumTimeFormatsEx, {onLeave: function (args) {send("EnumTimeFormatsEx");}});

var EnumTimeFormatsW = Module.findExportByName("kernel32.dll", "EnumTimeFormatsW")
Interceptor.attach(EnumTimeFormatsW, {onLeave: function (args) {send("EnumTimeFormatsW");}});

var EnumUILanguagesA = Module.findExportByName("kernel32.dll", "EnumUILanguagesA")
Interceptor.attach(EnumUILanguagesA, {onLeave: function (args) {send("EnumUILanguagesA");}});

var EnumUILanguagesW = Module.findExportByName("kernel32.dll", "EnumUILanguagesW")
Interceptor.attach(EnumUILanguagesW, {onLeave: function (args) {send("EnumUILanguagesW");}});

var EnumerateLocalComputerNamesA = Module.findExportByName("kernel32.dll", "EnumerateLocalComputerNamesA")
Interceptor.attach(EnumerateLocalComputerNamesA, {onLeave: function (args) {send("EnumerateLocalComputerNamesA");}});

var EnumerateLocalComputerNamesW = Module.findExportByName("kernel32.dll", "EnumerateLocalComputerNamesW")
Interceptor.attach(EnumerateLocalComputerNamesW, {onLeave: function (args) {send("EnumerateLocalComputerNamesW");}});

var EraseTape = Module.findExportByName("kernel32.dll", "EraseTape")
Interceptor.attach(EraseTape, {onLeave: function (args) {send("EraseTape");}});

var EscapeCommFunction = Module.findExportByName("kernel32.dll", "EscapeCommFunction")
Interceptor.attach(EscapeCommFunction, {onLeave: function (args) {send("EscapeCommFunction");}});

var ExecuteUmsThread = Module.findExportByName("kernel32.dll", "ExecuteUmsThread")
Interceptor.attach(ExecuteUmsThread, {onLeave: function (args) {send("ExecuteUmsThread");}});

var ExitProcess = Module.findExportByName("kernel32.dll", "ExitProcess")
Interceptor.attach(ExitProcess, {onLeave: function (args) {send("ExitProcess");}});

var ExitThread = Module.findExportByName("kernel32.dll", "ExitThread")
Interceptor.attach(ExitThread, {onLeave: function (args) {send("ExitThread");}});

var ExitVDM = Module.findExportByName("kernel32.dll", "ExitVDM")
Interceptor.attach(ExitVDM, {onLeave: function (args) {send("ExitVDM");}});

var ExpandEnvironmentStringsA = Module.findExportByName("kernel32.dll", "ExpandEnvironmentStringsA")
Interceptor.attach(ExpandEnvironmentStringsA, {onLeave: function (args) {send("ExpandEnvironmentStringsA");}});

var ExpandEnvironmentStringsW = Module.findExportByName("kernel32.dll", "ExpandEnvironmentStringsW")
Interceptor.attach(ExpandEnvironmentStringsW, {onLeave: function (args) {send("ExpandEnvironmentStringsW");}});

var ExpungeConsoleCommandHistoryA = Module.findExportByName("kernel32.dll", "ExpungeConsoleCommandHistoryA")
Interceptor.attach(ExpungeConsoleCommandHistoryA, {onLeave: function (args) {send("ExpungeConsoleCommandHistoryA");}});

var ExpungeConsoleCommandHistoryW = Module.findExportByName("kernel32.dll", "ExpungeConsoleCommandHistoryW")
Interceptor.attach(ExpungeConsoleCommandHistoryW, {onLeave: function (args) {send("ExpungeConsoleCommandHistoryW");}});

var FatalAppExitA = Module.findExportByName("kernel32.dll", "FatalAppExitA")
Interceptor.attach(FatalAppExitA, {onLeave: function (args) {send("FatalAppExitA");}});

var FatalAppExitW = Module.findExportByName("kernel32.dll", "FatalAppExitW")
Interceptor.attach(FatalAppExitW, {onLeave: function (args) {send("FatalAppExitW");}});

var FatalExit = Module.findExportByName("kernel32.dll", "FatalExit")
Interceptor.attach(FatalExit, {onLeave: function (args) {send("FatalExit");}});

var FileTimeToDosDateTime = Module.findExportByName("kernel32.dll", "FileTimeToDosDateTime")
Interceptor.attach(FileTimeToDosDateTime, {onLeave: function (args) {send("FileTimeToDosDateTime");}});

var FileTimeToLocalFileTime = Module.findExportByName("kernel32.dll", "FileTimeToLocalFileTime")
Interceptor.attach(FileTimeToLocalFileTime, {onLeave: function (args) {send("FileTimeToLocalFileTime");}});

var FileTimeToSystemTime = Module.findExportByName("kernel32.dll", "FileTimeToSystemTime")
Interceptor.attach(FileTimeToSystemTime, {onLeave: function (args) {send("FileTimeToSystemTime");}});

var FillConsoleOutputAttribute = Module.findExportByName("kernel32.dll", "FillConsoleOutputAttribute")
Interceptor.attach(FillConsoleOutputAttribute, {onLeave: function (args) {send("FillConsoleOutputAttribute");}});

var FillConsoleOutputCharacterA = Module.findExportByName("kernel32.dll", "FillConsoleOutputCharacterA")
Interceptor.attach(FillConsoleOutputCharacterA, {onLeave: function (args) {send("FillConsoleOutputCharacterA");}});

var FillConsoleOutputCharacterW = Module.findExportByName("kernel32.dll", "FillConsoleOutputCharacterW")
Interceptor.attach(FillConsoleOutputCharacterW, {onLeave: function (args) {send("FillConsoleOutputCharacterW");}});

var FindActCtxSectionGuid = Module.findExportByName("kernel32.dll", "FindActCtxSectionGuid")
Interceptor.attach(FindActCtxSectionGuid, {onLeave: function (args) {send("FindActCtxSectionGuid");}});

var FindActCtxSectionGuidWorker = Module.findExportByName("kernel32.dll", "FindActCtxSectionGuidWorker")
Interceptor.attach(FindActCtxSectionGuidWorker, {onLeave: function (args) {send("FindActCtxSectionGuidWorker");}});

var FindActCtxSectionStringA = Module.findExportByName("kernel32.dll", "FindActCtxSectionStringA")
Interceptor.attach(FindActCtxSectionStringA, {onLeave: function (args) {send("FindActCtxSectionStringA");}});

var FindActCtxSectionStringW = Module.findExportByName("kernel32.dll", "FindActCtxSectionStringW")
Interceptor.attach(FindActCtxSectionStringW, {onLeave: function (args) {send("FindActCtxSectionStringW");}});

var FindActCtxSectionStringWWorker = Module.findExportByName("kernel32.dll", "FindActCtxSectionStringWWorker")
Interceptor.attach(FindActCtxSectionStringWWorker, {onLeave: function (args) {send("FindActCtxSectionStringWWorker");}});

var FindAtomA = Module.findExportByName("kernel32.dll", "FindAtomA")
Interceptor.attach(FindAtomA, {onLeave: function (args) {send("FindAtomA");}});

var FindAtomW = Module.findExportByName("kernel32.dll", "FindAtomW")
Interceptor.attach(FindAtomW, {onLeave: function (args) {send("FindAtomW");}});

var FindClose = Module.findExportByName("kernel32.dll", "FindClose")
Interceptor.attach(FindClose, {onLeave: function (args) {send("FindClose");}});

var FindCloseChangeNotification = Module.findExportByName("kernel32.dll", "FindCloseChangeNotification")
Interceptor.attach(FindCloseChangeNotification, {onLeave: function (args) {send("FindCloseChangeNotification");}});

var FindFirstChangeNotificationA = Module.findExportByName("kernel32.dll", "FindFirstChangeNotificationA")
Interceptor.attach(FindFirstChangeNotificationA, {onLeave: function (args) {send("FindFirstChangeNotificationA");}});

var FindFirstChangeNotificationW = Module.findExportByName("kernel32.dll", "FindFirstChangeNotificationW")
Interceptor.attach(FindFirstChangeNotificationW, {onLeave: function (args) {send("FindFirstChangeNotificationW");}});

var FindFirstFileA = Module.findExportByName("kernel32.dll", "FindFirstFileA")
Interceptor.attach(FindFirstFileA, {onLeave: function (args) {send("FindFirstFileA");}});

var FindFirstFileExA = Module.findExportByName("kernel32.dll", "FindFirstFileExA")
Interceptor.attach(FindFirstFileExA, {onLeave: function (args) {send("FindFirstFileExA");}});

var FindFirstFileExW = Module.findExportByName("kernel32.dll", "FindFirstFileExW")
Interceptor.attach(FindFirstFileExW, {onLeave: function (args) {send("FindFirstFileExW");}});

var FindFirstFileNameTransactedW = Module.findExportByName("kernel32.dll", "FindFirstFileNameTransactedW")
Interceptor.attach(FindFirstFileNameTransactedW, {onLeave: function (args) {send("FindFirstFileNameTransactedW");}});

var FindFirstFileNameW = Module.findExportByName("kernel32.dll", "FindFirstFileNameW")
Interceptor.attach(FindFirstFileNameW, {onLeave: function (args) {send("FindFirstFileNameW");}});

var FindFirstFileTransactedA = Module.findExportByName("kernel32.dll", "FindFirstFileTransactedA")
Interceptor.attach(FindFirstFileTransactedA, {onLeave: function (args) {send("FindFirstFileTransactedA");}});

var FindFirstFileTransactedW = Module.findExportByName("kernel32.dll", "FindFirstFileTransactedW")
Interceptor.attach(FindFirstFileTransactedW, {onLeave: function (args) {send("FindFirstFileTransactedW");}});

var FindFirstFileW = Module.findExportByName("kernel32.dll", "FindFirstFileW")
Interceptor.attach(FindFirstFileW, {onLeave: function (args) {send("FindFirstFileW");}});

var FindFirstStreamTransactedW = Module.findExportByName("kernel32.dll", "FindFirstStreamTransactedW")
Interceptor.attach(FindFirstStreamTransactedW, {onLeave: function (args) {send("FindFirstStreamTransactedW");}});

var FindFirstStreamW = Module.findExportByName("kernel32.dll", "FindFirstStreamW")
Interceptor.attach(FindFirstStreamW, {onLeave: function (args) {send("FindFirstStreamW");}});

var FindFirstVolumeA = Module.findExportByName("kernel32.dll", "FindFirstVolumeA")
Interceptor.attach(FindFirstVolumeA, {onLeave: function (args) {send("FindFirstVolumeA");}});

var FindFirstVolumeMountPointA = Module.findExportByName("kernel32.dll", "FindFirstVolumeMountPointA")
Interceptor.attach(FindFirstVolumeMountPointA, {onLeave: function (args) {send("FindFirstVolumeMountPointA");}});

var FindFirstVolumeMountPointW = Module.findExportByName("kernel32.dll", "FindFirstVolumeMountPointW")
Interceptor.attach(FindFirstVolumeMountPointW, {onLeave: function (args) {send("FindFirstVolumeMountPointW");}});

var FindFirstVolumeW = Module.findExportByName("kernel32.dll", "FindFirstVolumeW")
Interceptor.attach(FindFirstVolumeW, {onLeave: function (args) {send("FindFirstVolumeW");}});

var FindNLSString = Module.findExportByName("kernel32.dll", "FindNLSString")
Interceptor.attach(FindNLSString, {onLeave: function (args) {send("FindNLSString");}});

var FindNLSStringEx = Module.findExportByName("kernel32.dll", "FindNLSStringEx")
Interceptor.attach(FindNLSStringEx, {onLeave: function (args) {send("FindNLSStringEx");}});

var FindNextChangeNotification = Module.findExportByName("kernel32.dll", "FindNextChangeNotification")
Interceptor.attach(FindNextChangeNotification, {onLeave: function (args) {send("FindNextChangeNotification");}});

var FindNextFileA = Module.findExportByName("kernel32.dll", "FindNextFileA")
Interceptor.attach(FindNextFileA, {onLeave: function (args) {send("FindNextFileA");}});

var FindNextFileNameW = Module.findExportByName("kernel32.dll", "FindNextFileNameW")
Interceptor.attach(FindNextFileNameW, {onLeave: function (args) {send("FindNextFileNameW");}});

var FindNextFileW = Module.findExportByName("kernel32.dll", "FindNextFileW")
Interceptor.attach(FindNextFileW, {onLeave: function (args) {send("FindNextFileW");}});

var FindNextStreamW = Module.findExportByName("kernel32.dll", "FindNextStreamW")
Interceptor.attach(FindNextStreamW, {onLeave: function (args) {send("FindNextStreamW");}});

var FindNextVolumeA = Module.findExportByName("kernel32.dll", "FindNextVolumeA")
Interceptor.attach(FindNextVolumeA, {onLeave: function (args) {send("FindNextVolumeA");}});

var FindNextVolumeMountPointA = Module.findExportByName("kernel32.dll", "FindNextVolumeMountPointA")
Interceptor.attach(FindNextVolumeMountPointA, {onLeave: function (args) {send("FindNextVolumeMountPointA");}});

var FindNextVolumeMountPointW = Module.findExportByName("kernel32.dll", "FindNextVolumeMountPointW")
Interceptor.attach(FindNextVolumeMountPointW, {onLeave: function (args) {send("FindNextVolumeMountPointW");}});

var FindNextVolumeW = Module.findExportByName("kernel32.dll", "FindNextVolumeW")
Interceptor.attach(FindNextVolumeW, {onLeave: function (args) {send("FindNextVolumeW");}});

var FindPackagesByPackageFamily = Module.findExportByName("kernel32.dll", "FindPackagesByPackageFamily")
Interceptor.attach(FindPackagesByPackageFamily, {onLeave: function (args) {send("FindPackagesByPackageFamily");}});

var FindResourceA = Module.findExportByName("kernel32.dll", "FindResourceA")
Interceptor.attach(FindResourceA, {onLeave: function (args) {send("FindResourceA");}});

var FindResourceExA = Module.findExportByName("kernel32.dll", "FindResourceExA")
Interceptor.attach(FindResourceExA, {onLeave: function (args) {send("FindResourceExA");}});

var FindResourceExW = Module.findExportByName("kernel32.dll", "FindResourceExW")
Interceptor.attach(FindResourceExW, {onLeave: function (args) {send("FindResourceExW");}});

var FindResourceW = Module.findExportByName("kernel32.dll", "FindResourceW")
Interceptor.attach(FindResourceW, {onLeave: function (args) {send("FindResourceW");}});

var FindStringOrdinal = Module.findExportByName("kernel32.dll", "FindStringOrdinal")
Interceptor.attach(FindStringOrdinal, {onLeave: function (args) {send("FindStringOrdinal");}});

var FindVolumeClose = Module.findExportByName("kernel32.dll", "FindVolumeClose")
Interceptor.attach(FindVolumeClose, {onLeave: function (args) {send("FindVolumeClose");}});

var FindVolumeMountPointClose = Module.findExportByName("kernel32.dll", "FindVolumeMountPointClose")
Interceptor.attach(FindVolumeMountPointClose, {onLeave: function (args) {send("FindVolumeMountPointClose");}});

var FlsAlloc = Module.findExportByName("kernel32.dll", "FlsAlloc")
Interceptor.attach(FlsAlloc, {onLeave: function (args) {send("FlsAlloc");}});

var FlsFree = Module.findExportByName("kernel32.dll", "FlsFree")
Interceptor.attach(FlsFree, {onLeave: function (args) {send("FlsFree");}});

var FlsGetValue = Module.findExportByName("kernel32.dll", "FlsGetValue")
Interceptor.attach(FlsGetValue, {onLeave: function (args) {send("FlsGetValue");}});

var FlsSetValue = Module.findExportByName("kernel32.dll", "FlsSetValue")
Interceptor.attach(FlsSetValue, {onLeave: function (args) {send("FlsSetValue");}});

var FlushConsoleInputBuffer = Module.findExportByName("kernel32.dll", "FlushConsoleInputBuffer")
Interceptor.attach(FlushConsoleInputBuffer, {onLeave: function (args) {send("FlushConsoleInputBuffer");}});

var FlushFileBuffers = Module.findExportByName("kernel32.dll", "FlushFileBuffers")
Interceptor.attach(FlushFileBuffers, {onLeave: function (args) {send("FlushFileBuffers");}});

var FlushInstructionCache = Module.findExportByName("kernel32.dll", "FlushInstructionCache")
Interceptor.attach(FlushInstructionCache, {onLeave: function (args) {send("FlushInstructionCache");}});

var FlushProcessWriteBuffers = Module.findExportByName("kernel32.dll", "FlushProcessWriteBuffers")
Interceptor.attach(FlushProcessWriteBuffers, {onLeave: function (args) {send("FlushProcessWriteBuffers");}});

var FlushViewOfFile = Module.findExportByName("kernel32.dll", "FlushViewOfFile")
Interceptor.attach(FlushViewOfFile, {onLeave: function (args) {send("FlushViewOfFile");}});

var FoldStringA = Module.findExportByName("kernel32.dll", "FoldStringA")
Interceptor.attach(FoldStringA, {onLeave: function (args) {send("FoldStringA");}});

var FoldStringW = Module.findExportByName("kernel32.dll", "FoldStringW")
Interceptor.attach(FoldStringW, {onLeave: function (args) {send("FoldStringW");}});

var FormatApplicationUserModelId = Module.findExportByName("kernel32.dll", "FormatApplicationUserModelId")
Interceptor.attach(FormatApplicationUserModelId, {onLeave: function (args) {send("FormatApplicationUserModelId");}});

var FormatMessageA = Module.findExportByName("kernel32.dll", "FormatMessageA")
Interceptor.attach(FormatMessageA, {onLeave: function (args) {send("FormatMessageA");}});

var FormatMessageW = Module.findExportByName("kernel32.dll", "FormatMessageW")
Interceptor.attach(FormatMessageW, {onLeave: function (args) {send("FormatMessageW");}});

var FreeConsole = Module.findExportByName("kernel32.dll", "FreeConsole")
Interceptor.attach(FreeConsole, {onLeave: function (args) {send("FreeConsole");}});

var FreeEnvironmentStringsA = Module.findExportByName("kernel32.dll", "FreeEnvironmentStringsA")
Interceptor.attach(FreeEnvironmentStringsA, {onLeave: function (args) {send("FreeEnvironmentStringsA");}});

var FreeEnvironmentStringsW = Module.findExportByName("kernel32.dll", "FreeEnvironmentStringsW")
Interceptor.attach(FreeEnvironmentStringsW, {onLeave: function (args) {send("FreeEnvironmentStringsW");}});

var FreeLibrary = Module.findExportByName("kernel32.dll", "FreeLibrary")
Interceptor.attach(FreeLibrary, {onLeave: function (args) {send("FreeLibrary");}});

var FreeLibraryAndExitThread = Module.findExportByName("kernel32.dll", "FreeLibraryAndExitThread")
Interceptor.attach(FreeLibraryAndExitThread, {onLeave: function (args) {send("FreeLibraryAndExitThread");}});

var FreeLibraryWhenCallbackReturns = Module.findExportByName("kernel32.dll", "FreeLibraryWhenCallbackReturns")
Interceptor.attach(FreeLibraryWhenCallbackReturns, {onLeave: function (args) {send("FreeLibraryWhenCallbackReturns");}});

var FreeMemoryJobObject = Module.findExportByName("kernel32.dll", "FreeMemoryJobObject")
Interceptor.attach(FreeMemoryJobObject, {onLeave: function (args) {send("FreeMemoryJobObject");}});

var FreeResource = Module.findExportByName("kernel32.dll", "FreeResource")
Interceptor.attach(FreeResource, {onLeave: function (args) {send("FreeResource");}});

var FreeUserPhysicalPages = Module.findExportByName("kernel32.dll", "FreeUserPhysicalPages")
Interceptor.attach(FreeUserPhysicalPages, {onLeave: function (args) {send("FreeUserPhysicalPages");}});

var GenerateConsoleCtrlEvent = Module.findExportByName("kernel32.dll", "GenerateConsoleCtrlEvent")
Interceptor.attach(GenerateConsoleCtrlEvent, {onLeave: function (args) {send("GenerateConsoleCtrlEvent");}});

var GetACP = Module.findExportByName("kernel32.dll", "GetACP")
Interceptor.attach(GetACP, {onLeave: function (args) {send("GetACP");}});

var GetActiveProcessorCount = Module.findExportByName("kernel32.dll", "GetActiveProcessorCount")
Interceptor.attach(GetActiveProcessorCount, {onLeave: function (args) {send("GetActiveProcessorCount");}});

var GetActiveProcessorGroupCount = Module.findExportByName("kernel32.dll", "GetActiveProcessorGroupCount")
Interceptor.attach(GetActiveProcessorGroupCount, {onLeave: function (args) {send("GetActiveProcessorGroupCount");}});

var GetAppContainerAce = Module.findExportByName("kernel32.dll", "GetAppContainerAce")
Interceptor.attach(GetAppContainerAce, {onLeave: function (args) {send("GetAppContainerAce");}});

var GetAppContainerNamedObjectPath = Module.findExportByName("kernel32.dll", "GetAppContainerNamedObjectPath")
Interceptor.attach(GetAppContainerNamedObjectPath, {onLeave: function (args) {send("GetAppContainerNamedObjectPath");}});

var GetApplicationRecoveryCallback = Module.findExportByName("kernel32.dll", "GetApplicationRecoveryCallback")
Interceptor.attach(GetApplicationRecoveryCallback, {onLeave: function (args) {send("GetApplicationRecoveryCallback");}});

var GetApplicationRecoveryCallbackWorker = Module.findExportByName("kernel32.dll", "GetApplicationRecoveryCallbackWorker")
Interceptor.attach(GetApplicationRecoveryCallbackWorker, {onLeave: function (args) {send("GetApplicationRecoveryCallbackWorker");}});

var GetApplicationRestartSettings = Module.findExportByName("kernel32.dll", "GetApplicationRestartSettings")
Interceptor.attach(GetApplicationRestartSettings, {onLeave: function (args) {send("GetApplicationRestartSettings");}});

var GetApplicationRestartSettingsWorker = Module.findExportByName("kernel32.dll", "GetApplicationRestartSettingsWorker")
Interceptor.attach(GetApplicationRestartSettingsWorker, {onLeave: function (args) {send("GetApplicationRestartSettingsWorker");}});

var GetApplicationUserModelId = Module.findExportByName("kernel32.dll", "GetApplicationUserModelId")
Interceptor.attach(GetApplicationUserModelId, {onLeave: function (args) {send("GetApplicationUserModelId");}});

var GetAtomNameA = Module.findExportByName("kernel32.dll", "GetAtomNameA")
Interceptor.attach(GetAtomNameA, {onLeave: function (args) {send("GetAtomNameA");}});

var GetAtomNameW = Module.findExportByName("kernel32.dll", "GetAtomNameW")
Interceptor.attach(GetAtomNameW, {onLeave: function (args) {send("GetAtomNameW");}});

var GetBinaryType = Module.findExportByName("kernel32.dll", "GetBinaryType")
Interceptor.attach(GetBinaryType, {onLeave: function (args) {send("GetBinaryType");}});

var GetBinaryTypeA = Module.findExportByName("kernel32.dll", "GetBinaryTypeA")
Interceptor.attach(GetBinaryTypeA, {onLeave: function (args) {send("GetBinaryTypeA");}});

var GetBinaryTypeW = Module.findExportByName("kernel32.dll", "GetBinaryTypeW")
Interceptor.attach(GetBinaryTypeW, {onLeave: function (args) {send("GetBinaryTypeW");}});

var GetCPInfo = Module.findExportByName("kernel32.dll", "GetCPInfo")
Interceptor.attach(GetCPInfo, {onLeave: function (args) {send("GetCPInfo");}});

var GetCPInfoExA = Module.findExportByName("kernel32.dll", "GetCPInfoExA")
Interceptor.attach(GetCPInfoExA, {onLeave: function (args) {send("GetCPInfoExA");}});

var GetCPInfoExW = Module.findExportByName("kernel32.dll", "GetCPInfoExW")
Interceptor.attach(GetCPInfoExW, {onLeave: function (args) {send("GetCPInfoExW");}});

var GetCachedSigningLevel = Module.findExportByName("kernel32.dll", "GetCachedSigningLevel")
Interceptor.attach(GetCachedSigningLevel, {onLeave: function (args) {send("GetCachedSigningLevel");}});

var GetCalendarDateFormat = Module.findExportByName("kernel32.dll", "GetCalendarDateFormat")
Interceptor.attach(GetCalendarDateFormat, {onLeave: function (args) {send("GetCalendarDateFormat");}});

var GetCalendarDateFormatEx = Module.findExportByName("kernel32.dll", "GetCalendarDateFormatEx")
Interceptor.attach(GetCalendarDateFormatEx, {onLeave: function (args) {send("GetCalendarDateFormatEx");}});

var GetCalendarDaysInMonth = Module.findExportByName("kernel32.dll", "GetCalendarDaysInMonth")
Interceptor.attach(GetCalendarDaysInMonth, {onLeave: function (args) {send("GetCalendarDaysInMonth");}});

var GetCalendarDifferenceInDays = Module.findExportByName("kernel32.dll", "GetCalendarDifferenceInDays")
Interceptor.attach(GetCalendarDifferenceInDays, {onLeave: function (args) {send("GetCalendarDifferenceInDays");}});

var GetCalendarInfoA = Module.findExportByName("kernel32.dll", "GetCalendarInfoA")
Interceptor.attach(GetCalendarInfoA, {onLeave: function (args) {send("GetCalendarInfoA");}});

var GetCalendarInfoEx = Module.findExportByName("kernel32.dll", "GetCalendarInfoEx")
Interceptor.attach(GetCalendarInfoEx, {onLeave: function (args) {send("GetCalendarInfoEx");}});

var GetCalendarInfoW = Module.findExportByName("kernel32.dll", "GetCalendarInfoW")
Interceptor.attach(GetCalendarInfoW, {onLeave: function (args) {send("GetCalendarInfoW");}});

var GetCalendarMonthsInYear = Module.findExportByName("kernel32.dll", "GetCalendarMonthsInYear")
Interceptor.attach(GetCalendarMonthsInYear, {onLeave: function (args) {send("GetCalendarMonthsInYear");}});

var GetCalendarSupportedDateRange = Module.findExportByName("kernel32.dll", "GetCalendarSupportedDateRange")
Interceptor.attach(GetCalendarSupportedDateRange, {onLeave: function (args) {send("GetCalendarSupportedDateRange");}});

var GetCalendarWeekNumber = Module.findExportByName("kernel32.dll", "GetCalendarWeekNumber")
Interceptor.attach(GetCalendarWeekNumber, {onLeave: function (args) {send("GetCalendarWeekNumber");}});

var GetComPlusPackageInstallStatus = Module.findExportByName("kernel32.dll", "GetComPlusPackageInstallStatus")
Interceptor.attach(GetComPlusPackageInstallStatus, {onLeave: function (args) {send("GetComPlusPackageInstallStatus");}});

var GetCommConfig = Module.findExportByName("kernel32.dll", "GetCommConfig")
Interceptor.attach(GetCommConfig, {onLeave: function (args) {send("GetCommConfig");}});

var GetCommMask = Module.findExportByName("kernel32.dll", "GetCommMask")
Interceptor.attach(GetCommMask, {onLeave: function (args) {send("GetCommMask");}});

var GetCommModemStatus = Module.findExportByName("kernel32.dll", "GetCommModemStatus")
Interceptor.attach(GetCommModemStatus, {onLeave: function (args) {send("GetCommModemStatus");}});

var GetCommProperties = Module.findExportByName("kernel32.dll", "GetCommProperties")
Interceptor.attach(GetCommProperties, {onLeave: function (args) {send("GetCommProperties");}});

var GetCommState = Module.findExportByName("kernel32.dll", "GetCommState")
Interceptor.attach(GetCommState, {onLeave: function (args) {send("GetCommState");}});

var GetCommTimeouts = Module.findExportByName("kernel32.dll", "GetCommTimeouts")
Interceptor.attach(GetCommTimeouts, {onLeave: function (args) {send("GetCommTimeouts");}});

var GetCommandLineA = Module.findExportByName("kernel32.dll", "GetCommandLineA")
Interceptor.attach(GetCommandLineA, {onLeave: function (args) {send("GetCommandLineA");}});

var GetCommandLineW = Module.findExportByName("kernel32.dll", "GetCommandLineW")
Interceptor.attach(GetCommandLineW, {onLeave: function (args) {send("GetCommandLineW");}});

var GetCompressedFileSizeA = Module.findExportByName("kernel32.dll", "GetCompressedFileSizeA")
Interceptor.attach(GetCompressedFileSizeA, {onLeave: function (args) {send("GetCompressedFileSizeA");}});

var GetCompressedFileSizeTransactedA = Module.findExportByName("kernel32.dll", "GetCompressedFileSizeTransactedA")
Interceptor.attach(GetCompressedFileSizeTransactedA, {onLeave: function (args) {send("GetCompressedFileSizeTransactedA");}});

var GetCompressedFileSizeTransactedW = Module.findExportByName("kernel32.dll", "GetCompressedFileSizeTransactedW")
Interceptor.attach(GetCompressedFileSizeTransactedW, {onLeave: function (args) {send("GetCompressedFileSizeTransactedW");}});

var GetCompressedFileSizeW = Module.findExportByName("kernel32.dll", "GetCompressedFileSizeW")
Interceptor.attach(GetCompressedFileSizeW, {onLeave: function (args) {send("GetCompressedFileSizeW");}});

var GetComputerNameA = Module.findExportByName("kernel32.dll", "GetComputerNameA")
Interceptor.attach(GetComputerNameA, {onLeave: function (args) {send("GetComputerNameA");}});

var GetComputerNameExA = Module.findExportByName("kernel32.dll", "GetComputerNameExA")
Interceptor.attach(GetComputerNameExA, {onLeave: function (args) {send("GetComputerNameExA");}});

var GetComputerNameExW = Module.findExportByName("kernel32.dll", "GetComputerNameExW")
Interceptor.attach(GetComputerNameExW, {onLeave: function (args) {send("GetComputerNameExW");}});

var GetComputerNameW = Module.findExportByName("kernel32.dll", "GetComputerNameW")
Interceptor.attach(GetComputerNameW, {onLeave: function (args) {send("GetComputerNameW");}});

var GetConsoleAliasA = Module.findExportByName("kernel32.dll", "GetConsoleAliasA")
Interceptor.attach(GetConsoleAliasA, {onLeave: function (args) {send("GetConsoleAliasA");}});

var GetConsoleAliasExesA = Module.findExportByName("kernel32.dll", "GetConsoleAliasExesA")
Interceptor.attach(GetConsoleAliasExesA, {onLeave: function (args) {send("GetConsoleAliasExesA");}});

var GetConsoleAliasExesLengthA = Module.findExportByName("kernel32.dll", "GetConsoleAliasExesLengthA")
Interceptor.attach(GetConsoleAliasExesLengthA, {onLeave: function (args) {send("GetConsoleAliasExesLengthA");}});

var GetConsoleAliasExesLengthW = Module.findExportByName("kernel32.dll", "GetConsoleAliasExesLengthW")
Interceptor.attach(GetConsoleAliasExesLengthW, {onLeave: function (args) {send("GetConsoleAliasExesLengthW");}});

var GetConsoleAliasExesW = Module.findExportByName("kernel32.dll", "GetConsoleAliasExesW")
Interceptor.attach(GetConsoleAliasExesW, {onLeave: function (args) {send("GetConsoleAliasExesW");}});

var GetConsoleAliasW = Module.findExportByName("kernel32.dll", "GetConsoleAliasW")
Interceptor.attach(GetConsoleAliasW, {onLeave: function (args) {send("GetConsoleAliasW");}});

var GetConsoleAliasesA = Module.findExportByName("kernel32.dll", "GetConsoleAliasesA")
Interceptor.attach(GetConsoleAliasesA, {onLeave: function (args) {send("GetConsoleAliasesA");}});

var GetConsoleAliasesLengthA = Module.findExportByName("kernel32.dll", "GetConsoleAliasesLengthA")
Interceptor.attach(GetConsoleAliasesLengthA, {onLeave: function (args) {send("GetConsoleAliasesLengthA");}});

var GetConsoleAliasesLengthW = Module.findExportByName("kernel32.dll", "GetConsoleAliasesLengthW")
Interceptor.attach(GetConsoleAliasesLengthW, {onLeave: function (args) {send("GetConsoleAliasesLengthW");}});

var GetConsoleAliasesW = Module.findExportByName("kernel32.dll", "GetConsoleAliasesW")
Interceptor.attach(GetConsoleAliasesW, {onLeave: function (args) {send("GetConsoleAliasesW");}});

var GetConsoleCP = Module.findExportByName("kernel32.dll", "GetConsoleCP")
Interceptor.attach(GetConsoleCP, {onLeave: function (args) {send("GetConsoleCP");}});

var GetConsoleCharType = Module.findExportByName("kernel32.dll", "GetConsoleCharType")
Interceptor.attach(GetConsoleCharType, {onLeave: function (args) {send("GetConsoleCharType");}});

var GetConsoleCommandHistoryA = Module.findExportByName("kernel32.dll", "GetConsoleCommandHistoryA")
Interceptor.attach(GetConsoleCommandHistoryA, {onLeave: function (args) {send("GetConsoleCommandHistoryA");}});

var GetConsoleCommandHistoryLengthA = Module.findExportByName("kernel32.dll", "GetConsoleCommandHistoryLengthA")
Interceptor.attach(GetConsoleCommandHistoryLengthA, {onLeave: function (args) {send("GetConsoleCommandHistoryLengthA");}});

var GetConsoleCommandHistoryLengthW = Module.findExportByName("kernel32.dll", "GetConsoleCommandHistoryLengthW")
Interceptor.attach(GetConsoleCommandHistoryLengthW, {onLeave: function (args) {send("GetConsoleCommandHistoryLengthW");}});

var GetConsoleCommandHistoryW = Module.findExportByName("kernel32.dll", "GetConsoleCommandHistoryW")
Interceptor.attach(GetConsoleCommandHistoryW, {onLeave: function (args) {send("GetConsoleCommandHistoryW");}});

var GetConsoleCursorInfo = Module.findExportByName("kernel32.dll", "GetConsoleCursorInfo")
Interceptor.attach(GetConsoleCursorInfo, {onLeave: function (args) {send("GetConsoleCursorInfo");}});

var GetConsoleCursorMode = Module.findExportByName("kernel32.dll", "GetConsoleCursorMode")
Interceptor.attach(GetConsoleCursorMode, {onLeave: function (args) {send("GetConsoleCursorMode");}});

var GetConsoleDisplayMode = Module.findExportByName("kernel32.dll", "GetConsoleDisplayMode")
Interceptor.attach(GetConsoleDisplayMode, {onLeave: function (args) {send("GetConsoleDisplayMode");}});

var GetConsoleFontInfo = Module.findExportByName("kernel32.dll", "GetConsoleFontInfo")
Interceptor.attach(GetConsoleFontInfo, {onLeave: function (args) {send("GetConsoleFontInfo");}});

var GetConsoleFontSize = Module.findExportByName("kernel32.dll", "GetConsoleFontSize")
Interceptor.attach(GetConsoleFontSize, {onLeave: function (args) {send("GetConsoleFontSize");}});

var GetConsoleHardwareState = Module.findExportByName("kernel32.dll", "GetConsoleHardwareState")
Interceptor.attach(GetConsoleHardwareState, {onLeave: function (args) {send("GetConsoleHardwareState");}});

var GetConsoleHistoryInfo = Module.findExportByName("kernel32.dll", "GetConsoleHistoryInfo")
Interceptor.attach(GetConsoleHistoryInfo, {onLeave: function (args) {send("GetConsoleHistoryInfo");}});

var GetConsoleInputExeNameA = Module.findExportByName("kernel32.dll", "GetConsoleInputExeNameA")
Interceptor.attach(GetConsoleInputExeNameA, {onLeave: function (args) {send("GetConsoleInputExeNameA");}});

var GetConsoleInputExeNameW = Module.findExportByName("kernel32.dll", "GetConsoleInputExeNameW")
Interceptor.attach(GetConsoleInputExeNameW, {onLeave: function (args) {send("GetConsoleInputExeNameW");}});

var GetConsoleInputWaitHandle = Module.findExportByName("kernel32.dll", "GetConsoleInputWaitHandle")
Interceptor.attach(GetConsoleInputWaitHandle, {onLeave: function (args) {send("GetConsoleInputWaitHandle");}});

var GetConsoleKeyboardLayoutNameA = Module.findExportByName("kernel32.dll", "GetConsoleKeyboardLayoutNameA")
Interceptor.attach(GetConsoleKeyboardLayoutNameA, {onLeave: function (args) {send("GetConsoleKeyboardLayoutNameA");}});

var GetConsoleKeyboardLayoutNameW = Module.findExportByName("kernel32.dll", "GetConsoleKeyboardLayoutNameW")
Interceptor.attach(GetConsoleKeyboardLayoutNameW, {onLeave: function (args) {send("GetConsoleKeyboardLayoutNameW");}});

var GetConsoleMode = Module.findExportByName("kernel32.dll", "GetConsoleMode")
Interceptor.attach(GetConsoleMode, {onLeave: function (args) {send("GetConsoleMode");}});

var GetConsoleNlsMode = Module.findExportByName("kernel32.dll", "GetConsoleNlsMode")
Interceptor.attach(GetConsoleNlsMode, {onLeave: function (args) {send("GetConsoleNlsMode");}});

var GetConsoleOriginalTitleA = Module.findExportByName("kernel32.dll", "GetConsoleOriginalTitleA")
Interceptor.attach(GetConsoleOriginalTitleA, {onLeave: function (args) {send("GetConsoleOriginalTitleA");}});

var GetConsoleOriginalTitleW = Module.findExportByName("kernel32.dll", "GetConsoleOriginalTitleW")
Interceptor.attach(GetConsoleOriginalTitleW, {onLeave: function (args) {send("GetConsoleOriginalTitleW");}});

var GetConsoleOutputCP = Module.findExportByName("kernel32.dll", "GetConsoleOutputCP")
Interceptor.attach(GetConsoleOutputCP, {onLeave: function (args) {send("GetConsoleOutputCP");}});

var GetConsoleProcessList = Module.findExportByName("kernel32.dll", "GetConsoleProcessList")
Interceptor.attach(GetConsoleProcessList, {onLeave: function (args) {send("GetConsoleProcessList");}});

var GetConsoleScreenBufferInfo = Module.findExportByName("kernel32.dll", "GetConsoleScreenBufferInfo")
Interceptor.attach(GetConsoleScreenBufferInfo, {onLeave: function (args) {send("GetConsoleScreenBufferInfo");}});

var GetConsoleScreenBufferInfoEx = Module.findExportByName("kernel32.dll", "GetConsoleScreenBufferInfoEx")
Interceptor.attach(GetConsoleScreenBufferInfoEx, {onLeave: function (args) {send("GetConsoleScreenBufferInfoEx");}});

var GetConsoleSelectionInfo = Module.findExportByName("kernel32.dll", "GetConsoleSelectionInfo")
Interceptor.attach(GetConsoleSelectionInfo, {onLeave: function (args) {send("GetConsoleSelectionInfo");}});

var GetConsoleTitleA = Module.findExportByName("kernel32.dll", "GetConsoleTitleA")
Interceptor.attach(GetConsoleTitleA, {onLeave: function (args) {send("GetConsoleTitleA");}});

var GetConsoleTitleW = Module.findExportByName("kernel32.dll", "GetConsoleTitleW")
Interceptor.attach(GetConsoleTitleW, {onLeave: function (args) {send("GetConsoleTitleW");}});

var GetConsoleWindow = Module.findExportByName("kernel32.dll", "GetConsoleWindow")
Interceptor.attach(GetConsoleWindow, {onLeave: function (args) {send("GetConsoleWindow");}});

var GetCurrencyFormatA = Module.findExportByName("kernel32.dll", "GetCurrencyFormatA")
Interceptor.attach(GetCurrencyFormatA, {onLeave: function (args) {send("GetCurrencyFormatA");}});

var GetCurrencyFormatEx = Module.findExportByName("kernel32.dll", "GetCurrencyFormatEx")
Interceptor.attach(GetCurrencyFormatEx, {onLeave: function (args) {send("GetCurrencyFormatEx");}});

var GetCurrencyFormatW = Module.findExportByName("kernel32.dll", "GetCurrencyFormatW")
Interceptor.attach(GetCurrencyFormatW, {onLeave: function (args) {send("GetCurrencyFormatW");}});

var GetCurrentActCtx = Module.findExportByName("kernel32.dll", "GetCurrentActCtx")
Interceptor.attach(GetCurrentActCtx, {onLeave: function (args) {send("GetCurrentActCtx");}});

var GetCurrentActCtxWorker = Module.findExportByName("kernel32.dll", "GetCurrentActCtxWorker")
Interceptor.attach(GetCurrentActCtxWorker, {onLeave: function (args) {send("GetCurrentActCtxWorker");}});

var GetCurrentApplicationUserModelId = Module.findExportByName("kernel32.dll", "GetCurrentApplicationUserModelId")
Interceptor.attach(GetCurrentApplicationUserModelId, {onLeave: function (args) {send("GetCurrentApplicationUserModelId");}});

var GetCurrentConsoleFont = Module.findExportByName("kernel32.dll", "GetCurrentConsoleFont")
Interceptor.attach(GetCurrentConsoleFont, {onLeave: function (args) {send("GetCurrentConsoleFont");}});

var GetCurrentConsoleFontEx = Module.findExportByName("kernel32.dll", "GetCurrentConsoleFontEx")
Interceptor.attach(GetCurrentConsoleFontEx, {onLeave: function (args) {send("GetCurrentConsoleFontEx");}});

var GetCurrentDirectoryA = Module.findExportByName("kernel32.dll", "GetCurrentDirectoryA")
Interceptor.attach(GetCurrentDirectoryA, {onLeave: function (args) {send("GetCurrentDirectoryA");}});

var GetCurrentDirectoryW = Module.findExportByName("kernel32.dll", "GetCurrentDirectoryW")
Interceptor.attach(GetCurrentDirectoryW, {onLeave: function (args) {send("GetCurrentDirectoryW");}});

var GetCurrentPackageFamilyName = Module.findExportByName("kernel32.dll", "GetCurrentPackageFamilyName")
Interceptor.attach(GetCurrentPackageFamilyName, {onLeave: function (args) {send("GetCurrentPackageFamilyName");}});

var GetCurrentPackageFullName = Module.findExportByName("kernel32.dll", "GetCurrentPackageFullName")
Interceptor.attach(GetCurrentPackageFullName, {onLeave: function (args) {send("GetCurrentPackageFullName");}});

var GetCurrentPackageId = Module.findExportByName("kernel32.dll", "GetCurrentPackageId")
Interceptor.attach(GetCurrentPackageId, {onLeave: function (args) {send("GetCurrentPackageId");}});

var GetCurrentPackageInfo = Module.findExportByName("kernel32.dll", "GetCurrentPackageInfo")
Interceptor.attach(GetCurrentPackageInfo, {onLeave: function (args) {send("GetCurrentPackageInfo");}});

var GetCurrentPackagePath = Module.findExportByName("kernel32.dll", "GetCurrentPackagePath")
Interceptor.attach(GetCurrentPackagePath, {onLeave: function (args) {send("GetCurrentPackagePath");}});

var GetCurrentPackageVirtualizationContext = Module.findExportByName("kernel32.dll", "GetCurrentPackageVirtualizationContext")
Interceptor.attach(GetCurrentPackageVirtualizationContext, {onLeave: function (args) {send("GetCurrentPackageVirtualizationContext");}});

var GetCurrentProcess = Module.findExportByName("kernel32.dll", "GetCurrentProcess")
Interceptor.attach(GetCurrentProcess, {onLeave: function (args) {send("GetCurrentProcess");}});

var GetCurrentProcessId = Module.findExportByName("kernel32.dll", "GetCurrentProcessId")
Interceptor.attach(GetCurrentProcessId, {onLeave: function (args) {send("GetCurrentProcessId");}});

var GetCurrentProcessorNumber = Module.findExportByName("kernel32.dll", "GetCurrentProcessorNumber")
Interceptor.attach(GetCurrentProcessorNumber, {onLeave: function (args) {send("GetCurrentProcessorNumber");}});

var GetCurrentProcessorNumberEx = Module.findExportByName("kernel32.dll", "GetCurrentProcessorNumberEx")
Interceptor.attach(GetCurrentProcessorNumberEx, {onLeave: function (args) {send("GetCurrentProcessorNumberEx");}});

var GetCurrentThread = Module.findExportByName("kernel32.dll", "GetCurrentThread")
Interceptor.attach(GetCurrentThread, {onLeave: function (args) {send("GetCurrentThread");}});

var GetCurrentThreadId = Module.findExportByName("kernel32.dll", "GetCurrentThreadId")
Interceptor.attach(GetCurrentThreadId, {onLeave: function (args) {send("GetCurrentThreadId");}});

var GetCurrentThreadStackLimits = Module.findExportByName("kernel32.dll", "GetCurrentThreadStackLimits")
Interceptor.attach(GetCurrentThreadStackLimits, {onLeave: function (args) {send("GetCurrentThreadStackLimits");}});

var GetCurrentUmsThread = Module.findExportByName("kernel32.dll", "GetCurrentUmsThread")
Interceptor.attach(GetCurrentUmsThread, {onLeave: function (args) {send("GetCurrentUmsThread");}});

var GetDateFormatA = Module.findExportByName("kernel32.dll", "GetDateFormatA")
Interceptor.attach(GetDateFormatA, {onLeave: function (args) {send("GetDateFormatA");}});

var GetDateFormatAWorker = Module.findExportByName("kernel32.dll", "GetDateFormatAWorker")
Interceptor.attach(GetDateFormatAWorker, {onLeave: function (args) {send("GetDateFormatAWorker");}});

var GetDateFormatEx = Module.findExportByName("kernel32.dll", "GetDateFormatEx")
Interceptor.attach(GetDateFormatEx, {onLeave: function (args) {send("GetDateFormatEx");}});

var GetDateFormatW = Module.findExportByName("kernel32.dll", "GetDateFormatW")
Interceptor.attach(GetDateFormatW, {onLeave: function (args) {send("GetDateFormatW");}});

var GetDateFormatWWorker = Module.findExportByName("kernel32.dll", "GetDateFormatWWorker")
Interceptor.attach(GetDateFormatWWorker, {onLeave: function (args) {send("GetDateFormatWWorker");}});

var GetDefaultCommConfigA = Module.findExportByName("kernel32.dll", "GetDefaultCommConfigA")
Interceptor.attach(GetDefaultCommConfigA, {onLeave: function (args) {send("GetDefaultCommConfigA");}});

var GetDefaultCommConfigW = Module.findExportByName("kernel32.dll", "GetDefaultCommConfigW")
Interceptor.attach(GetDefaultCommConfigW, {onLeave: function (args) {send("GetDefaultCommConfigW");}});

var GetDevicePowerState = Module.findExportByName("kernel32.dll", "GetDevicePowerState")
Interceptor.attach(GetDevicePowerState, {onLeave: function (args) {send("GetDevicePowerState");}});

var GetDiskFreeSpaceA = Module.findExportByName("kernel32.dll", "GetDiskFreeSpaceA")
Interceptor.attach(GetDiskFreeSpaceA, {onLeave: function (args) {send("GetDiskFreeSpaceA");}});

var GetDiskFreeSpaceExA = Module.findExportByName("kernel32.dll", "GetDiskFreeSpaceExA")
Interceptor.attach(GetDiskFreeSpaceExA, {onLeave: function (args) {send("GetDiskFreeSpaceExA");}});

var GetDiskFreeSpaceExW = Module.findExportByName("kernel32.dll", "GetDiskFreeSpaceExW")
Interceptor.attach(GetDiskFreeSpaceExW, {onLeave: function (args) {send("GetDiskFreeSpaceExW");}});

var GetDiskFreeSpaceW = Module.findExportByName("kernel32.dll", "GetDiskFreeSpaceW")
Interceptor.attach(GetDiskFreeSpaceW, {onLeave: function (args) {send("GetDiskFreeSpaceW");}});

var GetDiskSpaceInformationA = Module.findExportByName("kernel32.dll", "GetDiskSpaceInformationA")
Interceptor.attach(GetDiskSpaceInformationA, {onLeave: function (args) {send("GetDiskSpaceInformationA");}});

var GetDiskSpaceInformationW = Module.findExportByName("kernel32.dll", "GetDiskSpaceInformationW")
Interceptor.attach(GetDiskSpaceInformationW, {onLeave: function (args) {send("GetDiskSpaceInformationW");}});

var GetDllDirectoryA = Module.findExportByName("kernel32.dll", "GetDllDirectoryA")
Interceptor.attach(GetDllDirectoryA, {onLeave: function (args) {send("GetDllDirectoryA");}});

var GetDllDirectoryW = Module.findExportByName("kernel32.dll", "GetDllDirectoryW")
Interceptor.attach(GetDllDirectoryW, {onLeave: function (args) {send("GetDllDirectoryW");}});

var GetDriveTypeA = Module.findExportByName("kernel32.dll", "GetDriveTypeA")
Interceptor.attach(GetDriveTypeA, {onLeave: function (args) {send("GetDriveTypeA");}});

var GetDriveTypeW = Module.findExportByName("kernel32.dll", "GetDriveTypeW")
Interceptor.attach(GetDriveTypeW, {onLeave: function (args) {send("GetDriveTypeW");}});

var GetDurationFormat = Module.findExportByName("kernel32.dll", "GetDurationFormat")
Interceptor.attach(GetDurationFormat, {onLeave: function (args) {send("GetDurationFormat");}});

var GetDurationFormatEx = Module.findExportByName("kernel32.dll", "GetDurationFormatEx")
Interceptor.attach(GetDurationFormatEx, {onLeave: function (args) {send("GetDurationFormatEx");}});

var GetDynamicTimeZoneInformation = Module.findExportByName("kernel32.dll", "GetDynamicTimeZoneInformation")
Interceptor.attach(GetDynamicTimeZoneInformation, {onLeave: function (args) {send("GetDynamicTimeZoneInformation");}});

var GetEnabledXStateFeatures = Module.findExportByName("kernel32.dll", "GetEnabledXStateFeatures")
Interceptor.attach(GetEnabledXStateFeatures, {onLeave: function (args) {send("GetEnabledXStateFeatures");}});

var GetEncryptedFileVersionExt = Module.findExportByName("kernel32.dll", "GetEncryptedFileVersionExt")
Interceptor.attach(GetEncryptedFileVersionExt, {onLeave: function (args) {send("GetEncryptedFileVersionExt");}});

var GetEnvironmentStrings = Module.findExportByName("kernel32.dll", "GetEnvironmentStrings")
Interceptor.attach(GetEnvironmentStrings, {onLeave: function (args) {send("GetEnvironmentStrings");}});

var GetEnvironmentStringsA = Module.findExportByName("kernel32.dll", "GetEnvironmentStringsA")
Interceptor.attach(GetEnvironmentStringsA, {onLeave: function (args) {send("GetEnvironmentStringsA");}});

var GetEnvironmentStringsW = Module.findExportByName("kernel32.dll", "GetEnvironmentStringsW")
Interceptor.attach(GetEnvironmentStringsW, {onLeave: function (args) {send("GetEnvironmentStringsW");}});

var GetEnvironmentVariableA = Module.findExportByName("kernel32.dll", "GetEnvironmentVariableA")
Interceptor.attach(GetEnvironmentVariableA, {onLeave: function (args) {send("GetEnvironmentVariableA");}});

var GetEnvironmentVariableW = Module.findExportByName("kernel32.dll", "GetEnvironmentVariableW")
Interceptor.attach(GetEnvironmentVariableW, {onLeave: function (args) {send("GetEnvironmentVariableW");}});

var GetEraNameCountedString = Module.findExportByName("kernel32.dll", "GetEraNameCountedString")
Interceptor.attach(GetEraNameCountedString, {onLeave: function (args) {send("GetEraNameCountedString");}});

var GetErrorMode = Module.findExportByName("kernel32.dll", "GetErrorMode")
Interceptor.attach(GetErrorMode, {onLeave: function (args) {send("GetErrorMode");}});

var GetExitCodeProcess = Module.findExportByName("kernel32.dll", "GetExitCodeProcess")
Interceptor.attach(GetExitCodeProcess, {onLeave: function (args) {send("GetExitCodeProcess");}});

var GetExitCodeThread = Module.findExportByName("kernel32.dll", "GetExitCodeThread")
Interceptor.attach(GetExitCodeThread, {onLeave: function (args) {send("GetExitCodeThread");}});

var GetExpandedNameA = Module.findExportByName("kernel32.dll", "GetExpandedNameA")
Interceptor.attach(GetExpandedNameA, {onLeave: function (args) {send("GetExpandedNameA");}});

var GetExpandedNameW = Module.findExportByName("kernel32.dll", "GetExpandedNameW")
Interceptor.attach(GetExpandedNameW, {onLeave: function (args) {send("GetExpandedNameW");}});

var GetFileAttributesA = Module.findExportByName("kernel32.dll", "GetFileAttributesA")
Interceptor.attach(GetFileAttributesA, {onLeave: function (args) {send("GetFileAttributesA");}});

var GetFileAttributesExA = Module.findExportByName("kernel32.dll", "GetFileAttributesExA")
Interceptor.attach(GetFileAttributesExA, {onLeave: function (args) {send("GetFileAttributesExA");}});

var GetFileAttributesExW = Module.findExportByName("kernel32.dll", "GetFileAttributesExW")
Interceptor.attach(GetFileAttributesExW, {onLeave: function (args) {send("GetFileAttributesExW");}});

var GetFileAttributesTransactedA = Module.findExportByName("kernel32.dll", "GetFileAttributesTransactedA")
Interceptor.attach(GetFileAttributesTransactedA, {onLeave: function (args) {send("GetFileAttributesTransactedA");}});

var GetFileAttributesTransactedW = Module.findExportByName("kernel32.dll", "GetFileAttributesTransactedW")
Interceptor.attach(GetFileAttributesTransactedW, {onLeave: function (args) {send("GetFileAttributesTransactedW");}});

var GetFileAttributesW = Module.findExportByName("kernel32.dll", "GetFileAttributesW")
Interceptor.attach(GetFileAttributesW, {onLeave: function (args) {send("GetFileAttributesW");}});

var GetFileBandwidthReservation = Module.findExportByName("kernel32.dll", "GetFileBandwidthReservation")
Interceptor.attach(GetFileBandwidthReservation, {onLeave: function (args) {send("GetFileBandwidthReservation");}});

var GetFileInformationByHandle = Module.findExportByName("kernel32.dll", "GetFileInformationByHandle")
Interceptor.attach(GetFileInformationByHandle, {onLeave: function (args) {send("GetFileInformationByHandle");}});

var GetFileInformationByHandleEx = Module.findExportByName("kernel32.dll", "GetFileInformationByHandleEx")
Interceptor.attach(GetFileInformationByHandleEx, {onLeave: function (args) {send("GetFileInformationByHandleEx");}});

var GetFileMUIInfo = Module.findExportByName("kernel32.dll", "GetFileMUIInfo")
Interceptor.attach(GetFileMUIInfo, {onLeave: function (args) {send("GetFileMUIInfo");}});

var GetFileMUIPath = Module.findExportByName("kernel32.dll", "GetFileMUIPath")
Interceptor.attach(GetFileMUIPath, {onLeave: function (args) {send("GetFileMUIPath");}});

var GetFileSize = Module.findExportByName("kernel32.dll", "GetFileSize")
Interceptor.attach(GetFileSize, {onLeave: function (args) {send("GetFileSize");}});

var GetFileSizeEx = Module.findExportByName("kernel32.dll", "GetFileSizeEx")
Interceptor.attach(GetFileSizeEx, {onLeave: function (args) {send("GetFileSizeEx");}});

var GetFileTime = Module.findExportByName("kernel32.dll", "GetFileTime")
Interceptor.attach(GetFileTime, {onLeave: function (args) {send("GetFileTime");}});

var GetFileType = Module.findExportByName("kernel32.dll", "GetFileType")
Interceptor.attach(GetFileType, {onLeave: function (args) {send("GetFileType");}});

var GetFinalPathNameByHandleA = Module.findExportByName("kernel32.dll", "GetFinalPathNameByHandleA")
Interceptor.attach(GetFinalPathNameByHandleA, {onLeave: function (args) {send("GetFinalPathNameByHandleA");}});

var GetFinalPathNameByHandleW = Module.findExportByName("kernel32.dll", "GetFinalPathNameByHandleW")
Interceptor.attach(GetFinalPathNameByHandleW, {onLeave: function (args) {send("GetFinalPathNameByHandleW");}});

var GetFirmwareEnvironmentVariableA = Module.findExportByName("kernel32.dll", "GetFirmwareEnvironmentVariableA")
Interceptor.attach(GetFirmwareEnvironmentVariableA, {onLeave: function (args) {send("GetFirmwareEnvironmentVariableA");}});

var GetFirmwareEnvironmentVariableExA = Module.findExportByName("kernel32.dll", "GetFirmwareEnvironmentVariableExA")
Interceptor.attach(GetFirmwareEnvironmentVariableExA, {onLeave: function (args) {send("GetFirmwareEnvironmentVariableExA");}});

var GetFirmwareEnvironmentVariableExW = Module.findExportByName("kernel32.dll", "GetFirmwareEnvironmentVariableExW")
Interceptor.attach(GetFirmwareEnvironmentVariableExW, {onLeave: function (args) {send("GetFirmwareEnvironmentVariableExW");}});

var GetFirmwareEnvironmentVariableW = Module.findExportByName("kernel32.dll", "GetFirmwareEnvironmentVariableW")
Interceptor.attach(GetFirmwareEnvironmentVariableW, {onLeave: function (args) {send("GetFirmwareEnvironmentVariableW");}});

var GetFirmwareType = Module.findExportByName("kernel32.dll", "GetFirmwareType")
Interceptor.attach(GetFirmwareType, {onLeave: function (args) {send("GetFirmwareType");}});

var GetFullPathNameA = Module.findExportByName("kernel32.dll", "GetFullPathNameA")
Interceptor.attach(GetFullPathNameA, {onLeave: function (args) {send("GetFullPathNameA");}});

var GetFullPathNameTransactedA = Module.findExportByName("kernel32.dll", "GetFullPathNameTransactedA")
Interceptor.attach(GetFullPathNameTransactedA, {onLeave: function (args) {send("GetFullPathNameTransactedA");}});

var GetFullPathNameTransactedW = Module.findExportByName("kernel32.dll", "GetFullPathNameTransactedW")
Interceptor.attach(GetFullPathNameTransactedW, {onLeave: function (args) {send("GetFullPathNameTransactedW");}});

var GetFullPathNameW = Module.findExportByName("kernel32.dll", "GetFullPathNameW")
Interceptor.attach(GetFullPathNameW, {onLeave: function (args) {send("GetFullPathNameW");}});

var GetGeoInfoA = Module.findExportByName("kernel32.dll", "GetGeoInfoA")
Interceptor.attach(GetGeoInfoA, {onLeave: function (args) {send("GetGeoInfoA");}});

var GetGeoInfoEx = Module.findExportByName("kernel32.dll", "GetGeoInfoEx")
Interceptor.attach(GetGeoInfoEx, {onLeave: function (args) {send("GetGeoInfoEx");}});

var GetGeoInfoW = Module.findExportByName("kernel32.dll", "GetGeoInfoW")
Interceptor.attach(GetGeoInfoW, {onLeave: function (args) {send("GetGeoInfoW");}});

var GetHandleInformation = Module.findExportByName("kernel32.dll", "GetHandleInformation")
Interceptor.attach(GetHandleInformation, {onLeave: function (args) {send("GetHandleInformation");}});

var GetIoRingInfo = Module.findExportByName("kernel32.dll", "GetIoRingInfo")
Interceptor.attach(GetIoRingInfo, {onLeave: function (args) {send("GetIoRingInfo");}});

var GetLargePageMinimum = Module.findExportByName("kernel32.dll", "GetLargePageMinimum")
Interceptor.attach(GetLargePageMinimum, {onLeave: function (args) {send("GetLargePageMinimum");}});

var GetLargestConsoleWindowSize = Module.findExportByName("kernel32.dll", "GetLargestConsoleWindowSize")
Interceptor.attach(GetLargestConsoleWindowSize, {onLeave: function (args) {send("GetLargestConsoleWindowSize");}});

var GetLastError = Module.findExportByName("kernel32.dll", "GetLastError")
Interceptor.attach(GetLastError, {onLeave: function (args) {send("GetLastError");}});

var GetLocalTime = Module.findExportByName("kernel32.dll", "GetLocalTime")
Interceptor.attach(GetLocalTime, {onLeave: function (args) {send("GetLocalTime");}});

var GetLocaleInfoA = Module.findExportByName("kernel32.dll", "GetLocaleInfoA")
Interceptor.attach(GetLocaleInfoA, {onLeave: function (args) {send("GetLocaleInfoA");}});

var GetLocaleInfoEx = Module.findExportByName("kernel32.dll", "GetLocaleInfoEx")
Interceptor.attach(GetLocaleInfoEx, {onLeave: function (args) {send("GetLocaleInfoEx");}});

var GetLocaleInfoW = Module.findExportByName("kernel32.dll", "GetLocaleInfoW")
Interceptor.attach(GetLocaleInfoW, {onLeave: function (args) {send("GetLocaleInfoW");}});

var GetLogicalDriveStringsA = Module.findExportByName("kernel32.dll", "GetLogicalDriveStringsA")
Interceptor.attach(GetLogicalDriveStringsA, {onLeave: function (args) {send("GetLogicalDriveStringsA");}});

var GetLogicalDriveStringsW = Module.findExportByName("kernel32.dll", "GetLogicalDriveStringsW")
Interceptor.attach(GetLogicalDriveStringsW, {onLeave: function (args) {send("GetLogicalDriveStringsW");}});

var GetLogicalDrives = Module.findExportByName("kernel32.dll", "GetLogicalDrives")
Interceptor.attach(GetLogicalDrives, {onLeave: function (args) {send("GetLogicalDrives");}});

var GetLogicalProcessorInformation = Module.findExportByName("kernel32.dll", "GetLogicalProcessorInformation")
Interceptor.attach(GetLogicalProcessorInformation, {onLeave: function (args) {send("GetLogicalProcessorInformation");}});

var GetLogicalProcessorInformationEx = Module.findExportByName("kernel32.dll", "GetLogicalProcessorInformationEx")
Interceptor.attach(GetLogicalProcessorInformationEx, {onLeave: function (args) {send("GetLogicalProcessorInformationEx");}});

var GetLongPathNameA = Module.findExportByName("kernel32.dll", "GetLongPathNameA")
Interceptor.attach(GetLongPathNameA, {onLeave: function (args) {send("GetLongPathNameA");}});

var GetLongPathNameTransactedA = Module.findExportByName("kernel32.dll", "GetLongPathNameTransactedA")
Interceptor.attach(GetLongPathNameTransactedA, {onLeave: function (args) {send("GetLongPathNameTransactedA");}});

var GetLongPathNameTransactedW = Module.findExportByName("kernel32.dll", "GetLongPathNameTransactedW")
Interceptor.attach(GetLongPathNameTransactedW, {onLeave: function (args) {send("GetLongPathNameTransactedW");}});

var GetLongPathNameW = Module.findExportByName("kernel32.dll", "GetLongPathNameW")
Interceptor.attach(GetLongPathNameW, {onLeave: function (args) {send("GetLongPathNameW");}});

var GetMachineTypeAttributes = Module.findExportByName("kernel32.dll", "GetMachineTypeAttributes")
Interceptor.attach(GetMachineTypeAttributes, {onLeave: function (args) {send("GetMachineTypeAttributes");}});

var GetMailslotInfo = Module.findExportByName("kernel32.dll", "GetMailslotInfo")
Interceptor.attach(GetMailslotInfo, {onLeave: function (args) {send("GetMailslotInfo");}});

var GetMaximumProcessorCount = Module.findExportByName("kernel32.dll", "GetMaximumProcessorCount")
Interceptor.attach(GetMaximumProcessorCount, {onLeave: function (args) {send("GetMaximumProcessorCount");}});

var GetMaximumProcessorGroupCount = Module.findExportByName("kernel32.dll", "GetMaximumProcessorGroupCount")
Interceptor.attach(GetMaximumProcessorGroupCount, {onLeave: function (args) {send("GetMaximumProcessorGroupCount");}});

var GetMemoryErrorHandlingCapabilities = Module.findExportByName("kernel32.dll", "GetMemoryErrorHandlingCapabilities")
Interceptor.attach(GetMemoryErrorHandlingCapabilities, {onLeave: function (args) {send("GetMemoryErrorHandlingCapabilities");}});

var GetModuleFileNameA = Module.findExportByName("kernel32.dll", "GetModuleFileNameA")
Interceptor.attach(GetModuleFileNameA, {onLeave: function (args) {send("GetModuleFileNameA");}});

var GetModuleFileNameW = Module.findExportByName("kernel32.dll", "GetModuleFileNameW")
Interceptor.attach(GetModuleFileNameW, {onLeave: function (args) {send("GetModuleFileNameW");}});

var GetModuleHandleA = Module.findExportByName("kernel32.dll", "GetModuleHandleA")
Interceptor.attach(GetModuleHandleA, {onLeave: function (args) {send("GetModuleHandleA");}});

var GetModuleHandleExA = Module.findExportByName("kernel32.dll", "GetModuleHandleExA")
Interceptor.attach(GetModuleHandleExA, {onLeave: function (args) {send("GetModuleHandleExA");}});

var GetModuleHandleExW = Module.findExportByName("kernel32.dll", "GetModuleHandleExW")
Interceptor.attach(GetModuleHandleExW, {onLeave: function (args) {send("GetModuleHandleExW");}});

var GetModuleHandleW = Module.findExportByName("kernel32.dll", "GetModuleHandleW")
Interceptor.attach(GetModuleHandleW, {onLeave: function (args) {send("GetModuleHandleW");}});

var GetNLSVersion = Module.findExportByName("kernel32.dll", "GetNLSVersion")
Interceptor.attach(GetNLSVersion, {onLeave: function (args) {send("GetNLSVersion");}});

var GetNLSVersionEx = Module.findExportByName("kernel32.dll", "GetNLSVersionEx")
Interceptor.attach(GetNLSVersionEx, {onLeave: function (args) {send("GetNLSVersionEx");}});

var GetNamedPipeAttribute = Module.findExportByName("kernel32.dll", "GetNamedPipeAttribute")
Interceptor.attach(GetNamedPipeAttribute, {onLeave: function (args) {send("GetNamedPipeAttribute");}});

var GetNamedPipeClientComputerNameA = Module.findExportByName("kernel32.dll", "GetNamedPipeClientComputerNameA")
Interceptor.attach(GetNamedPipeClientComputerNameA, {onLeave: function (args) {send("GetNamedPipeClientComputerNameA");}});

var GetNamedPipeClientComputerNameW = Module.findExportByName("kernel32.dll", "GetNamedPipeClientComputerNameW")
Interceptor.attach(GetNamedPipeClientComputerNameW, {onLeave: function (args) {send("GetNamedPipeClientComputerNameW");}});

var GetNamedPipeClientProcessId = Module.findExportByName("kernel32.dll", "GetNamedPipeClientProcessId")
Interceptor.attach(GetNamedPipeClientProcessId, {onLeave: function (args) {send("GetNamedPipeClientProcessId");}});

var GetNamedPipeClientSessionId = Module.findExportByName("kernel32.dll", "GetNamedPipeClientSessionId")
Interceptor.attach(GetNamedPipeClientSessionId, {onLeave: function (args) {send("GetNamedPipeClientSessionId");}});

var GetNamedPipeHandleStateA = Module.findExportByName("kernel32.dll", "GetNamedPipeHandleStateA")
Interceptor.attach(GetNamedPipeHandleStateA, {onLeave: function (args) {send("GetNamedPipeHandleStateA");}});

var GetNamedPipeHandleStateW = Module.findExportByName("kernel32.dll", "GetNamedPipeHandleStateW")
Interceptor.attach(GetNamedPipeHandleStateW, {onLeave: function (args) {send("GetNamedPipeHandleStateW");}});

var GetNamedPipeInfo = Module.findExportByName("kernel32.dll", "GetNamedPipeInfo")
Interceptor.attach(GetNamedPipeInfo, {onLeave: function (args) {send("GetNamedPipeInfo");}});

var GetNamedPipeServerProcessId = Module.findExportByName("kernel32.dll", "GetNamedPipeServerProcessId")
Interceptor.attach(GetNamedPipeServerProcessId, {onLeave: function (args) {send("GetNamedPipeServerProcessId");}});

var GetNamedPipeServerSessionId = Module.findExportByName("kernel32.dll", "GetNamedPipeServerSessionId")
Interceptor.attach(GetNamedPipeServerSessionId, {onLeave: function (args) {send("GetNamedPipeServerSessionId");}});

var GetNativeSystemInfo = Module.findExportByName("kernel32.dll", "GetNativeSystemInfo")
Interceptor.attach(GetNativeSystemInfo, {onLeave: function (args) {send("GetNativeSystemInfo");}});

var GetNextUmsListItem = Module.findExportByName("kernel32.dll", "GetNextUmsListItem")
Interceptor.attach(GetNextUmsListItem, {onLeave: function (args) {send("GetNextUmsListItem");}});

var GetNextVDMCommand = Module.findExportByName("kernel32.dll", "GetNextVDMCommand")
Interceptor.attach(GetNextVDMCommand, {onLeave: function (args) {send("GetNextVDMCommand");}});

var GetNumaAvailableMemoryNode = Module.findExportByName("kernel32.dll", "GetNumaAvailableMemoryNode")
Interceptor.attach(GetNumaAvailableMemoryNode, {onLeave: function (args) {send("GetNumaAvailableMemoryNode");}});

var GetNumaAvailableMemoryNodeEx = Module.findExportByName("kernel32.dll", "GetNumaAvailableMemoryNodeEx")
Interceptor.attach(GetNumaAvailableMemoryNodeEx, {onLeave: function (args) {send("GetNumaAvailableMemoryNodeEx");}});

var GetNumaHighestNodeNumber = Module.findExportByName("kernel32.dll", "GetNumaHighestNodeNumber")
Interceptor.attach(GetNumaHighestNodeNumber, {onLeave: function (args) {send("GetNumaHighestNodeNumber");}});

var GetNumaNodeNumberFromHandle = Module.findExportByName("kernel32.dll", "GetNumaNodeNumberFromHandle")
Interceptor.attach(GetNumaNodeNumberFromHandle, {onLeave: function (args) {send("GetNumaNodeNumberFromHandle");}});

var GetNumaNodeProcessorMask = Module.findExportByName("kernel32.dll", "GetNumaNodeProcessorMask")
Interceptor.attach(GetNumaNodeProcessorMask, {onLeave: function (args) {send("GetNumaNodeProcessorMask");}});

var GetNumaNodeProcessorMask2 = Module.findExportByName("kernel32.dll", "GetNumaNodeProcessorMask2")
Interceptor.attach(GetNumaNodeProcessorMask2, {onLeave: function (args) {send("GetNumaNodeProcessorMask2");}});

var GetNumaNodeProcessorMaskEx = Module.findExportByName("kernel32.dll", "GetNumaNodeProcessorMaskEx")
Interceptor.attach(GetNumaNodeProcessorMaskEx, {onLeave: function (args) {send("GetNumaNodeProcessorMaskEx");}});

var GetNumaProcessorNode = Module.findExportByName("kernel32.dll", "GetNumaProcessorNode")
Interceptor.attach(GetNumaProcessorNode, {onLeave: function (args) {send("GetNumaProcessorNode");}});

var GetNumaProcessorNodeEx = Module.findExportByName("kernel32.dll", "GetNumaProcessorNodeEx")
Interceptor.attach(GetNumaProcessorNodeEx, {onLeave: function (args) {send("GetNumaProcessorNodeEx");}});

var GetNumaProximityNode = Module.findExportByName("kernel32.dll", "GetNumaProximityNode")
Interceptor.attach(GetNumaProximityNode, {onLeave: function (args) {send("GetNumaProximityNode");}});

var GetNumaProximityNodeEx = Module.findExportByName("kernel32.dll", "GetNumaProximityNodeEx")
Interceptor.attach(GetNumaProximityNodeEx, {onLeave: function (args) {send("GetNumaProximityNodeEx");}});

var GetNumberFormatA = Module.findExportByName("kernel32.dll", "GetNumberFormatA")
Interceptor.attach(GetNumberFormatA, {onLeave: function (args) {send("GetNumberFormatA");}});

var GetNumberFormatEx = Module.findExportByName("kernel32.dll", "GetNumberFormatEx")
Interceptor.attach(GetNumberFormatEx, {onLeave: function (args) {send("GetNumberFormatEx");}});

var GetNumberFormatW = Module.findExportByName("kernel32.dll", "GetNumberFormatW")
Interceptor.attach(GetNumberFormatW, {onLeave: function (args) {send("GetNumberFormatW");}});

var GetNumberOfConsoleFonts = Module.findExportByName("kernel32.dll", "GetNumberOfConsoleFonts")
Interceptor.attach(GetNumberOfConsoleFonts, {onLeave: function (args) {send("GetNumberOfConsoleFonts");}});

var GetNumberOfConsoleInputEvents = Module.findExportByName("kernel32.dll", "GetNumberOfConsoleInputEvents")
Interceptor.attach(GetNumberOfConsoleInputEvents, {onLeave: function (args) {send("GetNumberOfConsoleInputEvents");}});

var GetNumberOfConsoleMouseButtons = Module.findExportByName("kernel32.dll", "GetNumberOfConsoleMouseButtons")
Interceptor.attach(GetNumberOfConsoleMouseButtons, {onLeave: function (args) {send("GetNumberOfConsoleMouseButtons");}});

var GetOEMCP = Module.findExportByName("kernel32.dll", "GetOEMCP")
Interceptor.attach(GetOEMCP, {onLeave: function (args) {send("GetOEMCP");}});

var GetOverlappedResult = Module.findExportByName("kernel32.dll", "GetOverlappedResult")
Interceptor.attach(GetOverlappedResult, {onLeave: function (args) {send("GetOverlappedResult");}});

var GetOverlappedResultEx = Module.findExportByName("kernel32.dll", "GetOverlappedResultEx")
Interceptor.attach(GetOverlappedResultEx, {onLeave: function (args) {send("GetOverlappedResultEx");}});

var GetPackageApplicationIds = Module.findExportByName("kernel32.dll", "GetPackageApplicationIds")
Interceptor.attach(GetPackageApplicationIds, {onLeave: function (args) {send("GetPackageApplicationIds");}});

var GetPackageFamilyName = Module.findExportByName("kernel32.dll", "GetPackageFamilyName")
Interceptor.attach(GetPackageFamilyName, {onLeave: function (args) {send("GetPackageFamilyName");}});

var GetPackageFullName = Module.findExportByName("kernel32.dll", "GetPackageFullName")
Interceptor.attach(GetPackageFullName, {onLeave: function (args) {send("GetPackageFullName");}});

var GetPackageId = Module.findExportByName("kernel32.dll", "GetPackageId")
Interceptor.attach(GetPackageId, {onLeave: function (args) {send("GetPackageId");}});

var GetPackageInfo = Module.findExportByName("kernel32.dll", "GetPackageInfo")
Interceptor.attach(GetPackageInfo, {onLeave: function (args) {send("GetPackageInfo");}});

var GetPackagePath = Module.findExportByName("kernel32.dll", "GetPackagePath")
Interceptor.attach(GetPackagePath, {onLeave: function (args) {send("GetPackagePath");}});

var GetPackagePathByFullName = Module.findExportByName("kernel32.dll", "GetPackagePathByFullName")
Interceptor.attach(GetPackagePathByFullName, {onLeave: function (args) {send("GetPackagePathByFullName");}});

var GetPackagesByPackageFamily = Module.findExportByName("kernel32.dll", "GetPackagesByPackageFamily")
Interceptor.attach(GetPackagesByPackageFamily, {onLeave: function (args) {send("GetPackagesByPackageFamily");}});

var GetPhysicallyInstalledSystemMemory = Module.findExportByName("kernel32.dll", "GetPhysicallyInstalledSystemMemory")
Interceptor.attach(GetPhysicallyInstalledSystemMemory, {onLeave: function (args) {send("GetPhysicallyInstalledSystemMemory");}});

var GetPriorityClass = Module.findExportByName("kernel32.dll", "GetPriorityClass")
Interceptor.attach(GetPriorityClass, {onLeave: function (args) {send("GetPriorityClass");}});

var GetPrivateProfileIntA = Module.findExportByName("kernel32.dll", "GetPrivateProfileIntA")
Interceptor.attach(GetPrivateProfileIntA, {onLeave: function (args) {send("GetPrivateProfileIntA");}});

var GetPrivateProfileIntW = Module.findExportByName("kernel32.dll", "GetPrivateProfileIntW")
Interceptor.attach(GetPrivateProfileIntW, {onLeave: function (args) {send("GetPrivateProfileIntW");}});

var GetPrivateProfileSectionA = Module.findExportByName("kernel32.dll", "GetPrivateProfileSectionA")
Interceptor.attach(GetPrivateProfileSectionA, {onLeave: function (args) {send("GetPrivateProfileSectionA");}});

var GetPrivateProfileSectionNamesA = Module.findExportByName("kernel32.dll", "GetPrivateProfileSectionNamesA")
Interceptor.attach(GetPrivateProfileSectionNamesA, {onLeave: function (args) {send("GetPrivateProfileSectionNamesA");}});

var GetPrivateProfileSectionNamesW = Module.findExportByName("kernel32.dll", "GetPrivateProfileSectionNamesW")
Interceptor.attach(GetPrivateProfileSectionNamesW, {onLeave: function (args) {send("GetPrivateProfileSectionNamesW");}});

var GetPrivateProfileSectionW = Module.findExportByName("kernel32.dll", "GetPrivateProfileSectionW")
Interceptor.attach(GetPrivateProfileSectionW, {onLeave: function (args) {send("GetPrivateProfileSectionW");}});

var GetPrivateProfileStringA = Module.findExportByName("kernel32.dll", "GetPrivateProfileStringA")
Interceptor.attach(GetPrivateProfileStringA, {onLeave: function (args) {send("GetPrivateProfileStringA");}});

var GetPrivateProfileStringW = Module.findExportByName("kernel32.dll", "GetPrivateProfileStringW")
Interceptor.attach(GetPrivateProfileStringW, {onLeave: function (args) {send("GetPrivateProfileStringW");}});

var GetPrivateProfileStructA = Module.findExportByName("kernel32.dll", "GetPrivateProfileStructA")
Interceptor.attach(GetPrivateProfileStructA, {onLeave: function (args) {send("GetPrivateProfileStructA");}});

var GetPrivateProfileStructW = Module.findExportByName("kernel32.dll", "GetPrivateProfileStructW")
Interceptor.attach(GetPrivateProfileStructW, {onLeave: function (args) {send("GetPrivateProfileStructW");}});

var GetProcAddress = Module.findExportByName("kernel32.dll", "GetProcAddress")
Interceptor.attach(GetProcAddress, {onLeave: function (args) {send("GetProcAddress");}});

var GetProcessAffinityMask = Module.findExportByName("kernel32.dll", "GetProcessAffinityMask")
Interceptor.attach(GetProcessAffinityMask, {onLeave: function (args) {send("GetProcessAffinityMask");}});

var GetProcessDEPPolicy = Module.findExportByName("kernel32.dll", "GetProcessDEPPolicy")
Interceptor.attach(GetProcessDEPPolicy, {onLeave: function (args) {send("GetProcessDEPPolicy");}});

var GetProcessDefaultCpuSetMasks = Module.findExportByName("kernel32.dll", "GetProcessDefaultCpuSetMasks")
Interceptor.attach(GetProcessDefaultCpuSetMasks, {onLeave: function (args) {send("GetProcessDefaultCpuSetMasks");}});

var GetProcessDefaultCpuSets = Module.findExportByName("kernel32.dll", "GetProcessDefaultCpuSets")
Interceptor.attach(GetProcessDefaultCpuSets, {onLeave: function (args) {send("GetProcessDefaultCpuSets");}});

var GetProcessGroupAffinity = Module.findExportByName("kernel32.dll", "GetProcessGroupAffinity")
Interceptor.attach(GetProcessGroupAffinity, {onLeave: function (args) {send("GetProcessGroupAffinity");}});

var GetProcessHandleCount = Module.findExportByName("kernel32.dll", "GetProcessHandleCount")
Interceptor.attach(GetProcessHandleCount, {onLeave: function (args) {send("GetProcessHandleCount");}});

var GetProcessHeap = Module.findExportByName("kernel32.dll", "GetProcessHeap")
Interceptor.attach(GetProcessHeap, {onLeave: function (args) {send("GetProcessHeap");}});

var GetProcessHeaps = Module.findExportByName("kernel32.dll", "GetProcessHeaps")
Interceptor.attach(GetProcessHeaps, {onLeave: function (args) {send("GetProcessHeaps");}});

var GetProcessId = Module.findExportByName("kernel32.dll", "GetProcessId")
Interceptor.attach(GetProcessId, {onLeave: function (args) {send("GetProcessId");}});

var GetProcessIdOfThread = Module.findExportByName("kernel32.dll", "GetProcessIdOfThread")
Interceptor.attach(GetProcessIdOfThread, {onLeave: function (args) {send("GetProcessIdOfThread");}});

var GetProcessInformation = Module.findExportByName("kernel32.dll", "GetProcessInformation")
Interceptor.attach(GetProcessInformation, {onLeave: function (args) {send("GetProcessInformation");}});

var GetProcessIoCounters = Module.findExportByName("kernel32.dll", "GetProcessIoCounters")
Interceptor.attach(GetProcessIoCounters, {onLeave: function (args) {send("GetProcessIoCounters");}});

var GetProcessMitigationPolicy = Module.findExportByName("kernel32.dll", "GetProcessMitigationPolicy")
Interceptor.attach(GetProcessMitigationPolicy, {onLeave: function (args) {send("GetProcessMitigationPolicy");}});

var GetProcessPreferredUILanguages = Module.findExportByName("kernel32.dll", "GetProcessPreferredUILanguages")
Interceptor.attach(GetProcessPreferredUILanguages, {onLeave: function (args) {send("GetProcessPreferredUILanguages");}});

var GetProcessPriorityBoost = Module.findExportByName("kernel32.dll", "GetProcessPriorityBoost")
Interceptor.attach(GetProcessPriorityBoost, {onLeave: function (args) {send("GetProcessPriorityBoost");}});

var GetProcessShutdownParameters = Module.findExportByName("kernel32.dll", "GetProcessShutdownParameters")
Interceptor.attach(GetProcessShutdownParameters, {onLeave: function (args) {send("GetProcessShutdownParameters");}});

var GetProcessTimes = Module.findExportByName("kernel32.dll", "GetProcessTimes")
Interceptor.attach(GetProcessTimes, {onLeave: function (args) {send("GetProcessTimes");}});

var GetProcessVersion = Module.findExportByName("kernel32.dll", "GetProcessVersion")
Interceptor.attach(GetProcessVersion, {onLeave: function (args) {send("GetProcessVersion");}});

var GetProcessWorkingSetSize = Module.findExportByName("kernel32.dll", "GetProcessWorkingSetSize")
Interceptor.attach(GetProcessWorkingSetSize, {onLeave: function (args) {send("GetProcessWorkingSetSize");}});

var GetProcessWorkingSetSizeEx = Module.findExportByName("kernel32.dll", "GetProcessWorkingSetSizeEx")
Interceptor.attach(GetProcessWorkingSetSizeEx, {onLeave: function (args) {send("GetProcessWorkingSetSizeEx");}});

var GetProcessesInVirtualizationContext = Module.findExportByName("kernel32.dll", "GetProcessesInVirtualizationContext")
Interceptor.attach(GetProcessesInVirtualizationContext, {onLeave: function (args) {send("GetProcessesInVirtualizationContext");}});

var GetProcessorSystemCycleTime = Module.findExportByName("kernel32.dll", "GetProcessorSystemCycleTime")
Interceptor.attach(GetProcessorSystemCycleTime, {onLeave: function (args) {send("GetProcessorSystemCycleTime");}});

var GetProductInfo = Module.findExportByName("kernel32.dll", "GetProductInfo")
Interceptor.attach(GetProductInfo, {onLeave: function (args) {send("GetProductInfo");}});

var GetProfileIntA = Module.findExportByName("kernel32.dll", "GetProfileIntA")
Interceptor.attach(GetProfileIntA, {onLeave: function (args) {send("GetProfileIntA");}});

var GetProfileIntW = Module.findExportByName("kernel32.dll", "GetProfileIntW")
Interceptor.attach(GetProfileIntW, {onLeave: function (args) {send("GetProfileIntW");}});

var GetProfileSectionA = Module.findExportByName("kernel32.dll", "GetProfileSectionA")
Interceptor.attach(GetProfileSectionA, {onLeave: function (args) {send("GetProfileSectionA");}});

var GetProfileSectionW = Module.findExportByName("kernel32.dll", "GetProfileSectionW")
Interceptor.attach(GetProfileSectionW, {onLeave: function (args) {send("GetProfileSectionW");}});

var GetProfileStringA = Module.findExportByName("kernel32.dll", "GetProfileStringA")
Interceptor.attach(GetProfileStringA, {onLeave: function (args) {send("GetProfileStringA");}});

var GetProfileStringW = Module.findExportByName("kernel32.dll", "GetProfileStringW")
Interceptor.attach(GetProfileStringW, {onLeave: function (args) {send("GetProfileStringW");}});

var GetQueuedCompletionStatus = Module.findExportByName("kernel32.dll", "GetQueuedCompletionStatus")
Interceptor.attach(GetQueuedCompletionStatus, {onLeave: function (args) {send("GetQueuedCompletionStatus");}});

var GetQueuedCompletionStatusEx = Module.findExportByName("kernel32.dll", "GetQueuedCompletionStatusEx")
Interceptor.attach(GetQueuedCompletionStatusEx, {onLeave: function (args) {send("GetQueuedCompletionStatusEx");}});

var GetShortPathNameA = Module.findExportByName("kernel32.dll", "GetShortPathNameA")
Interceptor.attach(GetShortPathNameA, {onLeave: function (args) {send("GetShortPathNameA");}});

var GetShortPathNameW = Module.findExportByName("kernel32.dll", "GetShortPathNameW")
Interceptor.attach(GetShortPathNameW, {onLeave: function (args) {send("GetShortPathNameW");}});

var GetStagedPackagePathByFullName = Module.findExportByName("kernel32.dll", "GetStagedPackagePathByFullName")
Interceptor.attach(GetStagedPackagePathByFullName, {onLeave: function (args) {send("GetStagedPackagePathByFullName");}});

var GetStartupInfoA = Module.findExportByName("kernel32.dll", "GetStartupInfoA")
Interceptor.attach(GetStartupInfoA, {onLeave: function (args) {send("GetStartupInfoA");}});

var GetStartupInfoW = Module.findExportByName("kernel32.dll", "GetStartupInfoW")
Interceptor.attach(GetStartupInfoW, {onLeave: function (args) {send("GetStartupInfoW");}});

var GetStateFolder = Module.findExportByName("kernel32.dll", "GetStateFolder")
Interceptor.attach(GetStateFolder, {onLeave: function (args) {send("GetStateFolder");}});

var GetStdHandle = Module.findExportByName("kernel32.dll", "GetStdHandle")
Interceptor.attach(GetStdHandle, {onLeave: function (args) {send("GetStdHandle");}});

var GetStringScripts = Module.findExportByName("kernel32.dll", "GetStringScripts")
Interceptor.attach(GetStringScripts, {onLeave: function (args) {send("GetStringScripts");}});

var GetStringTypeA = Module.findExportByName("kernel32.dll", "GetStringTypeA")
Interceptor.attach(GetStringTypeA, {onLeave: function (args) {send("GetStringTypeA");}});

var GetStringTypeExA = Module.findExportByName("kernel32.dll", "GetStringTypeExA")
Interceptor.attach(GetStringTypeExA, {onLeave: function (args) {send("GetStringTypeExA");}});

var GetStringTypeExW = Module.findExportByName("kernel32.dll", "GetStringTypeExW")
Interceptor.attach(GetStringTypeExW, {onLeave: function (args) {send("GetStringTypeExW");}});

var GetStringTypeW = Module.findExportByName("kernel32.dll", "GetStringTypeW")
Interceptor.attach(GetStringTypeW, {onLeave: function (args) {send("GetStringTypeW");}});

var GetSystemAppDataKey = Module.findExportByName("kernel32.dll", "GetSystemAppDataKey")
Interceptor.attach(GetSystemAppDataKey, {onLeave: function (args) {send("GetSystemAppDataKey");}});

var GetSystemCpuSetInformation = Module.findExportByName("kernel32.dll", "GetSystemCpuSetInformation")
Interceptor.attach(GetSystemCpuSetInformation, {onLeave: function (args) {send("GetSystemCpuSetInformation");}});

var GetSystemDEPPolicy = Module.findExportByName("kernel32.dll", "GetSystemDEPPolicy")
Interceptor.attach(GetSystemDEPPolicy, {onLeave: function (args) {send("GetSystemDEPPolicy");}});

var GetSystemDefaultLCID = Module.findExportByName("kernel32.dll", "GetSystemDefaultLCID")
Interceptor.attach(GetSystemDefaultLCID, {onLeave: function (args) {send("GetSystemDefaultLCID");}});

var GetSystemDefaultLangID = Module.findExportByName("kernel32.dll", "GetSystemDefaultLangID")
Interceptor.attach(GetSystemDefaultLangID, {onLeave: function (args) {send("GetSystemDefaultLangID");}});

var GetSystemDefaultLocaleName = Module.findExportByName("kernel32.dll", "GetSystemDefaultLocaleName")
Interceptor.attach(GetSystemDefaultLocaleName, {onLeave: function (args) {send("GetSystemDefaultLocaleName");}});

var GetSystemDefaultUILanguage = Module.findExportByName("kernel32.dll", "GetSystemDefaultUILanguage")
Interceptor.attach(GetSystemDefaultUILanguage, {onLeave: function (args) {send("GetSystemDefaultUILanguage");}});

var GetSystemDirectoryA = Module.findExportByName("kernel32.dll", "GetSystemDirectoryA")
Interceptor.attach(GetSystemDirectoryA, {onLeave: function (args) {send("GetSystemDirectoryA");}});

var GetSystemDirectoryW = Module.findExportByName("kernel32.dll", "GetSystemDirectoryW")
Interceptor.attach(GetSystemDirectoryW, {onLeave: function (args) {send("GetSystemDirectoryW");}});

var GetSystemFileCacheSize = Module.findExportByName("kernel32.dll", "GetSystemFileCacheSize")
Interceptor.attach(GetSystemFileCacheSize, {onLeave: function (args) {send("GetSystemFileCacheSize");}});

var GetSystemFirmwareTable = Module.findExportByName("kernel32.dll", "GetSystemFirmwareTable")
Interceptor.attach(GetSystemFirmwareTable, {onLeave: function (args) {send("GetSystemFirmwareTable");}});

var GetSystemInfo = Module.findExportByName("kernel32.dll", "GetSystemInfo")
Interceptor.attach(GetSystemInfo, {onLeave: function (args) {send("GetSystemInfo");}});

var GetSystemPowerStatus = Module.findExportByName("kernel32.dll", "GetSystemPowerStatus")
Interceptor.attach(GetSystemPowerStatus, {onLeave: function (args) {send("GetSystemPowerStatus");}});

var GetSystemPreferredUILanguages = Module.findExportByName("kernel32.dll", "GetSystemPreferredUILanguages")
Interceptor.attach(GetSystemPreferredUILanguages, {onLeave: function (args) {send("GetSystemPreferredUILanguages");}});

var GetSystemRegistryQuota = Module.findExportByName("kernel32.dll", "GetSystemRegistryQuota")
Interceptor.attach(GetSystemRegistryQuota, {onLeave: function (args) {send("GetSystemRegistryQuota");}});

var GetSystemTime = Module.findExportByName("kernel32.dll", "GetSystemTime")
Interceptor.attach(GetSystemTime, {onLeave: function (args) {send("GetSystemTime");}});

var GetSystemTimeAdjustment = Module.findExportByName("kernel32.dll", "GetSystemTimeAdjustment")
Interceptor.attach(GetSystemTimeAdjustment, {onLeave: function (args) {send("GetSystemTimeAdjustment");}});

var GetSystemTimeAsFileTime = Module.findExportByName("kernel32.dll", "GetSystemTimeAsFileTime")
Interceptor.attach(GetSystemTimeAsFileTime, {onLeave: function (args) {send("GetSystemTimeAsFileTime");}});

var GetSystemTimePreciseAsFileTime = Module.findExportByName("kernel32.dll", "GetSystemTimePreciseAsFileTime")
Interceptor.attach(GetSystemTimePreciseAsFileTime, {onLeave: function (args) {send("GetSystemTimePreciseAsFileTime");}});

var GetSystemTimes = Module.findExportByName("kernel32.dll", "GetSystemTimes")
Interceptor.attach(GetSystemTimes, {onLeave: function (args) {send("GetSystemTimes");}});

var GetSystemWindowsDirectoryA = Module.findExportByName("kernel32.dll", "GetSystemWindowsDirectoryA")
Interceptor.attach(GetSystemWindowsDirectoryA, {onLeave: function (args) {send("GetSystemWindowsDirectoryA");}});

var GetSystemWindowsDirectoryW = Module.findExportByName("kernel32.dll", "GetSystemWindowsDirectoryW")
Interceptor.attach(GetSystemWindowsDirectoryW, {onLeave: function (args) {send("GetSystemWindowsDirectoryW");}});

var GetSystemWow64DirectoryA = Module.findExportByName("kernel32.dll", "GetSystemWow64DirectoryA")
Interceptor.attach(GetSystemWow64DirectoryA, {onLeave: function (args) {send("GetSystemWow64DirectoryA");}});

var GetSystemWow64DirectoryW = Module.findExportByName("kernel32.dll", "GetSystemWow64DirectoryW")
Interceptor.attach(GetSystemWow64DirectoryW, {onLeave: function (args) {send("GetSystemWow64DirectoryW");}});

var GetTapeParameters = Module.findExportByName("kernel32.dll", "GetTapeParameters")
Interceptor.attach(GetTapeParameters, {onLeave: function (args) {send("GetTapeParameters");}});

var GetTapePosition = Module.findExportByName("kernel32.dll", "GetTapePosition")
Interceptor.attach(GetTapePosition, {onLeave: function (args) {send("GetTapePosition");}});

var GetTapeStatus = Module.findExportByName("kernel32.dll", "GetTapeStatus")
Interceptor.attach(GetTapeStatus, {onLeave: function (args) {send("GetTapeStatus");}});

var GetTempFileNameA = Module.findExportByName("kernel32.dll", "GetTempFileNameA")
Interceptor.attach(GetTempFileNameA, {onLeave: function (args) {send("GetTempFileNameA");}});

var GetTempFileNameW = Module.findExportByName("kernel32.dll", "GetTempFileNameW")
Interceptor.attach(GetTempFileNameW, {onLeave: function (args) {send("GetTempFileNameW");}});

var GetTempPath2A = Module.findExportByName("kernel32.dll", "GetTempPath2A")
Interceptor.attach(GetTempPath2A, {onLeave: function (args) {send("GetTempPath2A");}});

var GetTempPath2W = Module.findExportByName("kernel32.dll", "GetTempPath2W")
Interceptor.attach(GetTempPath2W, {onLeave: function (args) {send("GetTempPath2W");}});

var GetTempPathA = Module.findExportByName("kernel32.dll", "GetTempPathA")
Interceptor.attach(GetTempPathA, {onLeave: function (args) {send("GetTempPathA");}});

var GetTempPathW = Module.findExportByName("kernel32.dll", "GetTempPathW")
Interceptor.attach(GetTempPathW, {onLeave: function (args) {send("GetTempPathW");}});

var GetThreadContext = Module.findExportByName("kernel32.dll", "GetThreadContext")
Interceptor.attach(GetThreadContext, {onLeave: function (args) {send("GetThreadContext");}});

var GetThreadDescription = Module.findExportByName("kernel32.dll", "GetThreadDescription")
Interceptor.attach(GetThreadDescription, {onLeave: function (args) {send("GetThreadDescription");}});

var GetThreadEnabledXStateFeatures = Module.findExportByName("kernel32.dll", "GetThreadEnabledXStateFeatures")
Interceptor.attach(GetThreadEnabledXStateFeatures, {onLeave: function (args) {send("GetThreadEnabledXStateFeatures");}});

var GetThreadErrorMode = Module.findExportByName("kernel32.dll", "GetThreadErrorMode")
Interceptor.attach(GetThreadErrorMode, {onLeave: function (args) {send("GetThreadErrorMode");}});

var GetThreadGroupAffinity = Module.findExportByName("kernel32.dll", "GetThreadGroupAffinity")
Interceptor.attach(GetThreadGroupAffinity, {onLeave: function (args) {send("GetThreadGroupAffinity");}});

var GetThreadIOPendingFlag = Module.findExportByName("kernel32.dll", "GetThreadIOPendingFlag")
Interceptor.attach(GetThreadIOPendingFlag, {onLeave: function (args) {send("GetThreadIOPendingFlag");}});

var GetThreadId = Module.findExportByName("kernel32.dll", "GetThreadId")
Interceptor.attach(GetThreadId, {onLeave: function (args) {send("GetThreadId");}});

var GetThreadIdealProcessorEx = Module.findExportByName("kernel32.dll", "GetThreadIdealProcessorEx")
Interceptor.attach(GetThreadIdealProcessorEx, {onLeave: function (args) {send("GetThreadIdealProcessorEx");}});

var GetThreadInformation = Module.findExportByName("kernel32.dll", "GetThreadInformation")
Interceptor.attach(GetThreadInformation, {onLeave: function (args) {send("GetThreadInformation");}});

var GetThreadLocale = Module.findExportByName("kernel32.dll", "GetThreadLocale")
Interceptor.attach(GetThreadLocale, {onLeave: function (args) {send("GetThreadLocale");}});

var GetThreadPreferredUILanguages = Module.findExportByName("kernel32.dll", "GetThreadPreferredUILanguages")
Interceptor.attach(GetThreadPreferredUILanguages, {onLeave: function (args) {send("GetThreadPreferredUILanguages");}});

var GetThreadPriority = Module.findExportByName("kernel32.dll", "GetThreadPriority")
Interceptor.attach(GetThreadPriority, {onLeave: function (args) {send("GetThreadPriority");}});

var GetThreadPriorityBoost = Module.findExportByName("kernel32.dll", "GetThreadPriorityBoost")
Interceptor.attach(GetThreadPriorityBoost, {onLeave: function (args) {send("GetThreadPriorityBoost");}});

var GetThreadSelectedCpuSetMasks = Module.findExportByName("kernel32.dll", "GetThreadSelectedCpuSetMasks")
Interceptor.attach(GetThreadSelectedCpuSetMasks, {onLeave: function (args) {send("GetThreadSelectedCpuSetMasks");}});

var GetThreadSelectedCpuSets = Module.findExportByName("kernel32.dll", "GetThreadSelectedCpuSets")
Interceptor.attach(GetThreadSelectedCpuSets, {onLeave: function (args) {send("GetThreadSelectedCpuSets");}});

var GetThreadSelectorEntry = Module.findExportByName("kernel32.dll", "GetThreadSelectorEntry")
Interceptor.attach(GetThreadSelectorEntry, {onLeave: function (args) {send("GetThreadSelectorEntry");}});

var GetThreadTimes = Module.findExportByName("kernel32.dll", "GetThreadTimes")
Interceptor.attach(GetThreadTimes, {onLeave: function (args) {send("GetThreadTimes");}});

var GetThreadUILanguage = Module.findExportByName("kernel32.dll", "GetThreadUILanguage")
Interceptor.attach(GetThreadUILanguage, {onLeave: function (args) {send("GetThreadUILanguage");}});

var GetTickCount = Module.findExportByName("kernel32.dll", "GetTickCount")
Interceptor.attach(GetTickCount, {onLeave: function (args) {send("GetTickCount");}});

var GetTickCount64 = Module.findExportByName("kernel32.dll", "GetTickCount64")
Interceptor.attach(GetTickCount64, {onLeave: function (args) {send("GetTickCount64");}});

var GetTimeFormatA = Module.findExportByName("kernel32.dll", "GetTimeFormatA")
Interceptor.attach(GetTimeFormatA, {onLeave: function (args) {send("GetTimeFormatA");}});

var GetTimeFormatAWorker = Module.findExportByName("kernel32.dll", "GetTimeFormatAWorker")
Interceptor.attach(GetTimeFormatAWorker, {onLeave: function (args) {send("GetTimeFormatAWorker");}});

var GetTimeFormatEx = Module.findExportByName("kernel32.dll", "GetTimeFormatEx")
Interceptor.attach(GetTimeFormatEx, {onLeave: function (args) {send("GetTimeFormatEx");}});

var GetTimeFormatW = Module.findExportByName("kernel32.dll", "GetTimeFormatW")
Interceptor.attach(GetTimeFormatW, {onLeave: function (args) {send("GetTimeFormatW");}});

var GetTimeFormatWWorker = Module.findExportByName("kernel32.dll", "GetTimeFormatWWorker")
Interceptor.attach(GetTimeFormatWWorker, {onLeave: function (args) {send("GetTimeFormatWWorker");}});

var GetTimeZoneInformation = Module.findExportByName("kernel32.dll", "GetTimeZoneInformation")
Interceptor.attach(GetTimeZoneInformation, {onLeave: function (args) {send("GetTimeZoneInformation");}});

var GetTimeZoneInformationForYear = Module.findExportByName("kernel32.dll", "GetTimeZoneInformationForYear")
Interceptor.attach(GetTimeZoneInformationForYear, {onLeave: function (args) {send("GetTimeZoneInformationForYear");}});

var GetUILanguageInfo = Module.findExportByName("kernel32.dll", "GetUILanguageInfo")
Interceptor.attach(GetUILanguageInfo, {onLeave: function (args) {send("GetUILanguageInfo");}});

var GetUmsCompletionListEvent = Module.findExportByName("kernel32.dll", "GetUmsCompletionListEvent")
Interceptor.attach(GetUmsCompletionListEvent, {onLeave: function (args) {send("GetUmsCompletionListEvent");}});

var GetUmsSystemThreadInformation = Module.findExportByName("kernel32.dll", "GetUmsSystemThreadInformation")
Interceptor.attach(GetUmsSystemThreadInformation, {onLeave: function (args) {send("GetUmsSystemThreadInformation");}});

var GetUserDefaultGeoName = Module.findExportByName("kernel32.dll", "GetUserDefaultGeoName")
Interceptor.attach(GetUserDefaultGeoName, {onLeave: function (args) {send("GetUserDefaultGeoName");}});

var GetUserDefaultLCID = Module.findExportByName("kernel32.dll", "GetUserDefaultLCID")
Interceptor.attach(GetUserDefaultLCID, {onLeave: function (args) {send("GetUserDefaultLCID");}});

var GetUserDefaultLangID = Module.findExportByName("kernel32.dll", "GetUserDefaultLangID")
Interceptor.attach(GetUserDefaultLangID, {onLeave: function (args) {send("GetUserDefaultLangID");}});

var GetUserDefaultLocaleName = Module.findExportByName("kernel32.dll", "GetUserDefaultLocaleName")
Interceptor.attach(GetUserDefaultLocaleName, {onLeave: function (args) {send("GetUserDefaultLocaleName");}});

var GetUserDefaultUILanguage = Module.findExportByName("kernel32.dll", "GetUserDefaultUILanguage")
Interceptor.attach(GetUserDefaultUILanguage, {onLeave: function (args) {send("GetUserDefaultUILanguage");}});

var GetUserGeoID = Module.findExportByName("kernel32.dll", "GetUserGeoID")
Interceptor.attach(GetUserGeoID, {onLeave: function (args) {send("GetUserGeoID");}});

var GetUserPreferredUILanguages = Module.findExportByName("kernel32.dll", "GetUserPreferredUILanguages")
Interceptor.attach(GetUserPreferredUILanguages, {onLeave: function (args) {send("GetUserPreferredUILanguages");}});

var GetVDMCurrentDirectories = Module.findExportByName("kernel32.dll", "GetVDMCurrentDirectories")
Interceptor.attach(GetVDMCurrentDirectories, {onLeave: function (args) {send("GetVDMCurrentDirectories");}});

var GetVersion = Module.findExportByName("kernel32.dll", "GetVersion")
Interceptor.attach(GetVersion, {onLeave: function (args) {send("GetVersion");}});

var GetVersionExA = Module.findExportByName("kernel32.dll", "GetVersionExA")
Interceptor.attach(GetVersionExA, {onLeave: function (args) {send("GetVersionExA");}});

var GetVersionExW = Module.findExportByName("kernel32.dll", "GetVersionExW")
Interceptor.attach(GetVersionExW, {onLeave: function (args) {send("GetVersionExW");}});

var GetVolumeInformationA = Module.findExportByName("kernel32.dll", "GetVolumeInformationA")
Interceptor.attach(GetVolumeInformationA, {onLeave: function (args) {send("GetVolumeInformationA");}});

var GetVolumeInformationByHandleW = Module.findExportByName("kernel32.dll", "GetVolumeInformationByHandleW")
Interceptor.attach(GetVolumeInformationByHandleW, {onLeave: function (args) {send("GetVolumeInformationByHandleW");}});

var GetVolumeInformationW = Module.findExportByName("kernel32.dll", "GetVolumeInformationW")
Interceptor.attach(GetVolumeInformationW, {onLeave: function (args) {send("GetVolumeInformationW");}});

var GetVolumeNameForVolumeMountPointA = Module.findExportByName("kernel32.dll", "GetVolumeNameForVolumeMountPointA")
Interceptor.attach(GetVolumeNameForVolumeMountPointA, {onLeave: function (args) {send("GetVolumeNameForVolumeMountPointA");}});

var GetVolumeNameForVolumeMountPointW = Module.findExportByName("kernel32.dll", "GetVolumeNameForVolumeMountPointW")
Interceptor.attach(GetVolumeNameForVolumeMountPointW, {onLeave: function (args) {send("GetVolumeNameForVolumeMountPointW");}});

var GetVolumePathNameA = Module.findExportByName("kernel32.dll", "GetVolumePathNameA")
Interceptor.attach(GetVolumePathNameA, {onLeave: function (args) {send("GetVolumePathNameA");}});

var GetVolumePathNameW = Module.findExportByName("kernel32.dll", "GetVolumePathNameW")
Interceptor.attach(GetVolumePathNameW, {onLeave: function (args) {send("GetVolumePathNameW");}});

var GetVolumePathNamesForVolumeNameA = Module.findExportByName("kernel32.dll", "GetVolumePathNamesForVolumeNameA")
Interceptor.attach(GetVolumePathNamesForVolumeNameA, {onLeave: function (args) {send("GetVolumePathNamesForVolumeNameA");}});

var GetVolumePathNamesForVolumeNameW = Module.findExportByName("kernel32.dll", "GetVolumePathNamesForVolumeNameW")
Interceptor.attach(GetVolumePathNamesForVolumeNameW, {onLeave: function (args) {send("GetVolumePathNamesForVolumeNameW");}});

var GetWindowsDirectoryA = Module.findExportByName("kernel32.dll", "GetWindowsDirectoryA")
Interceptor.attach(GetWindowsDirectoryA, {onLeave: function (args) {send("GetWindowsDirectoryA");}});

var GetWindowsDirectoryW = Module.findExportByName("kernel32.dll", "GetWindowsDirectoryW")
Interceptor.attach(GetWindowsDirectoryW, {onLeave: function (args) {send("GetWindowsDirectoryW");}});

var GetWriteWatch = Module.findExportByName("kernel32.dll", "GetWriteWatch")
Interceptor.attach(GetWriteWatch, {onLeave: function (args) {send("GetWriteWatch");}});

var GetXStateFeaturesMask = Module.findExportByName("kernel32.dll", "GetXStateFeaturesMask")
Interceptor.attach(GetXStateFeaturesMask, {onLeave: function (args) {send("GetXStateFeaturesMask");}});

var GlobalAddAtomA = Module.findExportByName("kernel32.dll", "GlobalAddAtomA")
Interceptor.attach(GlobalAddAtomA, {onLeave: function (args) {send("GlobalAddAtomA");}});

var GlobalAddAtomExA = Module.findExportByName("kernel32.dll", "GlobalAddAtomExA")
Interceptor.attach(GlobalAddAtomExA, {onLeave: function (args) {send("GlobalAddAtomExA");}});

var GlobalAddAtomExW = Module.findExportByName("kernel32.dll", "GlobalAddAtomExW")
Interceptor.attach(GlobalAddAtomExW, {onLeave: function (args) {send("GlobalAddAtomExW");}});

var GlobalAddAtomW = Module.findExportByName("kernel32.dll", "GlobalAddAtomW")
Interceptor.attach(GlobalAddAtomW, {onLeave: function (args) {send("GlobalAddAtomW");}});

var GlobalAlloc = Module.findExportByName("kernel32.dll", "GlobalAlloc")
Interceptor.attach(GlobalAlloc, {onLeave: function (args) {send("GlobalAlloc");}});

var GlobalCompact = Module.findExportByName("kernel32.dll", "GlobalCompact")
Interceptor.attach(GlobalCompact, {onLeave: function (args) {send("GlobalCompact");}});

var GlobalDeleteAtom = Module.findExportByName("kernel32.dll", "GlobalDeleteAtom")
Interceptor.attach(GlobalDeleteAtom, {onLeave: function (args) {send("GlobalDeleteAtom");}});

var GlobalFindAtomA = Module.findExportByName("kernel32.dll", "GlobalFindAtomA")
Interceptor.attach(GlobalFindAtomA, {onLeave: function (args) {send("GlobalFindAtomA");}});

var GlobalFindAtomW = Module.findExportByName("kernel32.dll", "GlobalFindAtomW")
Interceptor.attach(GlobalFindAtomW, {onLeave: function (args) {send("GlobalFindAtomW");}});

var GlobalFix = Module.findExportByName("kernel32.dll", "GlobalFix")
Interceptor.attach(GlobalFix, {onLeave: function (args) {send("GlobalFix");}});

var GlobalFlags = Module.findExportByName("kernel32.dll", "GlobalFlags")
Interceptor.attach(GlobalFlags, {onLeave: function (args) {send("GlobalFlags");}});

var GlobalFree = Module.findExportByName("kernel32.dll", "GlobalFree")
Interceptor.attach(GlobalFree, {onLeave: function (args) {send("GlobalFree");}});

var GlobalGetAtomNameA = Module.findExportByName("kernel32.dll", "GlobalGetAtomNameA")
Interceptor.attach(GlobalGetAtomNameA, {onLeave: function (args) {send("GlobalGetAtomNameA");}});

var GlobalGetAtomNameW = Module.findExportByName("kernel32.dll", "GlobalGetAtomNameW")
Interceptor.attach(GlobalGetAtomNameW, {onLeave: function (args) {send("GlobalGetAtomNameW");}});

var GlobalHandle = Module.findExportByName("kernel32.dll", "GlobalHandle")
Interceptor.attach(GlobalHandle, {onLeave: function (args) {send("GlobalHandle");}});

var GlobalLock = Module.findExportByName("kernel32.dll", "GlobalLock")
Interceptor.attach(GlobalLock, {onLeave: function (args) {send("GlobalLock");}});

var GlobalMemoryStatus = Module.findExportByName("kernel32.dll", "GlobalMemoryStatus")
Interceptor.attach(GlobalMemoryStatus, {onLeave: function (args) {send("GlobalMemoryStatus");}});

var GlobalMemoryStatusEx = Module.findExportByName("kernel32.dll", "GlobalMemoryStatusEx")
Interceptor.attach(GlobalMemoryStatusEx, {onLeave: function (args) {send("GlobalMemoryStatusEx");}});

var GlobalReAlloc = Module.findExportByName("kernel32.dll", "GlobalReAlloc")
Interceptor.attach(GlobalReAlloc, {onLeave: function (args) {send("GlobalReAlloc");}});

var GlobalSize = Module.findExportByName("kernel32.dll", "GlobalSize")
Interceptor.attach(GlobalSize, {onLeave: function (args) {send("GlobalSize");}});

var GlobalUnWire = Module.findExportByName("kernel32.dll", "GlobalUnWire")
Interceptor.attach(GlobalUnWire, {onLeave: function (args) {send("GlobalUnWire");}});

var GlobalUnfix = Module.findExportByName("kernel32.dll", "GlobalUnfix")
Interceptor.attach(GlobalUnfix, {onLeave: function (args) {send("GlobalUnfix");}});

var GlobalUnlock = Module.findExportByName("kernel32.dll", "GlobalUnlock")
Interceptor.attach(GlobalUnlock, {onLeave: function (args) {send("GlobalUnlock");}});

var GlobalWire = Module.findExportByName("kernel32.dll", "GlobalWire")
Interceptor.attach(GlobalWire, {onLeave: function (args) {send("GlobalWire");}});

var Heap32First = Module.findExportByName("kernel32.dll", "Heap32First")
Interceptor.attach(Heap32First, {onLeave: function (args) {send("Heap32First");}});

var Heap32ListFirst = Module.findExportByName("kernel32.dll", "Heap32ListFirst")
Interceptor.attach(Heap32ListFirst, {onLeave: function (args) {send("Heap32ListFirst");}});

var Heap32ListNext = Module.findExportByName("kernel32.dll", "Heap32ListNext")
Interceptor.attach(Heap32ListNext, {onLeave: function (args) {send("Heap32ListNext");}});

var Heap32Next = Module.findExportByName("kernel32.dll", "Heap32Next")
Interceptor.attach(Heap32Next, {onLeave: function (args) {send("Heap32Next");}});

var HeapAlloc = Module.findExportByName("kernel32.dll", "HeapAlloc")
Interceptor.attach(HeapAlloc, {onLeave: function (args) {send("HeapAlloc");}});

var HeapCompact = Module.findExportByName("kernel32.dll", "HeapCompact")
Interceptor.attach(HeapCompact, {onLeave: function (args) {send("HeapCompact");}});

var HeapCreate = Module.findExportByName("kernel32.dll", "HeapCreate")
Interceptor.attach(HeapCreate, {onLeave: function (args) {send("HeapCreate");}});

var HeapDestroy = Module.findExportByName("kernel32.dll", "HeapDestroy")
Interceptor.attach(HeapDestroy, {onLeave: function (args) {send("HeapDestroy");}});

var HeapFree = Module.findExportByName("kernel32.dll", "HeapFree")
Interceptor.attach(HeapFree, {onLeave: function (args) {send("HeapFree");}});

var HeapLock = Module.findExportByName("kernel32.dll", "HeapLock")
Interceptor.attach(HeapLock, {onLeave: function (args) {send("HeapLock");}});

var HeapQueryInformation = Module.findExportByName("kernel32.dll", "HeapQueryInformation")
Interceptor.attach(HeapQueryInformation, {onLeave: function (args) {send("HeapQueryInformation");}});

var HeapReAlloc = Module.findExportByName("kernel32.dll", "HeapReAlloc")
Interceptor.attach(HeapReAlloc, {onLeave: function (args) {send("HeapReAlloc");}});

var HeapSetInformation = Module.findExportByName("kernel32.dll", "HeapSetInformation")
Interceptor.attach(HeapSetInformation, {onLeave: function (args) {send("HeapSetInformation");}});

var HeapSize = Module.findExportByName("kernel32.dll", "HeapSize")
Interceptor.attach(HeapSize, {onLeave: function (args) {send("HeapSize");}});

var HeapSummary = Module.findExportByName("kernel32.dll", "HeapSummary")
Interceptor.attach(HeapSummary, {onLeave: function (args) {send("HeapSummary");}});

var HeapUnlock = Module.findExportByName("kernel32.dll", "HeapUnlock")
Interceptor.attach(HeapUnlock, {onLeave: function (args) {send("HeapUnlock");}});

var HeapValidate = Module.findExportByName("kernel32.dll", "HeapValidate")
Interceptor.attach(HeapValidate, {onLeave: function (args) {send("HeapValidate");}});

var HeapWalk = Module.findExportByName("kernel32.dll", "HeapWalk")
Interceptor.attach(HeapWalk, {onLeave: function (args) {send("HeapWalk");}});

var IdnToAscii = Module.findExportByName("kernel32.dll", "IdnToAscii")
Interceptor.attach(IdnToAscii, {onLeave: function (args) {send("IdnToAscii");}});

var IdnToNameprepUnicode = Module.findExportByName("kernel32.dll", "IdnToNameprepUnicode")
Interceptor.attach(IdnToNameprepUnicode, {onLeave: function (args) {send("IdnToNameprepUnicode");}});

var IdnToUnicode = Module.findExportByName("kernel32.dll", "IdnToUnicode")
Interceptor.attach(IdnToUnicode, {onLeave: function (args) {send("IdnToUnicode");}});

var InitAtomTable = Module.findExportByName("kernel32.dll", "InitAtomTable")
Interceptor.attach(InitAtomTable, {onLeave: function (args) {send("InitAtomTable");}});

var InitOnceBeginInitialize = Module.findExportByName("kernel32.dll", "InitOnceBeginInitialize")
Interceptor.attach(InitOnceBeginInitialize, {onLeave: function (args) {send("InitOnceBeginInitialize");}});

var InitOnceComplete = Module.findExportByName("kernel32.dll", "InitOnceComplete")
Interceptor.attach(InitOnceComplete, {onLeave: function (args) {send("InitOnceComplete");}});

var InitOnceExecuteOnce = Module.findExportByName("kernel32.dll", "InitOnceExecuteOnce")
Interceptor.attach(InitOnceExecuteOnce, {onLeave: function (args) {send("InitOnceExecuteOnce");}});

var InitOnceInitialize = Module.findExportByName("kernel32.dll", "InitOnceInitialize")
Interceptor.attach(InitOnceInitialize, {onLeave: function (args) {send("InitOnceInitialize");}});

var InitializeConditionVariable = Module.findExportByName("kernel32.dll", "InitializeConditionVariable")
Interceptor.attach(InitializeConditionVariable, {onLeave: function (args) {send("InitializeConditionVariable");}});

var InitializeContext = Module.findExportByName("kernel32.dll", "InitializeContext")
Interceptor.attach(InitializeContext, {onLeave: function (args) {send("InitializeContext");}});

var InitializeContext2 = Module.findExportByName("kernel32.dll", "InitializeContext2")
Interceptor.attach(InitializeContext2, {onLeave: function (args) {send("InitializeContext2");}});

var InitializeCriticalSection = Module.findExportByName("kernel32.dll", "InitializeCriticalSection")
Interceptor.attach(InitializeCriticalSection, {onLeave: function (args) {send("InitializeCriticalSection");}});

var InitializeCriticalSectionAndSpinCount = Module.findExportByName("kernel32.dll", "InitializeCriticalSectionAndSpinCount")
Interceptor.attach(InitializeCriticalSectionAndSpinCount, {onLeave: function (args) {send("InitializeCriticalSectionAndSpinCount");}});

var InitializeCriticalSectionEx = Module.findExportByName("kernel32.dll", "InitializeCriticalSectionEx")
Interceptor.attach(InitializeCriticalSectionEx, {onLeave: function (args) {send("InitializeCriticalSectionEx");}});

var InitializeEnclave = Module.findExportByName("kernel32.dll", "InitializeEnclave")
Interceptor.attach(InitializeEnclave, {onLeave: function (args) {send("InitializeEnclave");}});

var InitializeProcThreadAttributeList = Module.findExportByName("kernel32.dll", "InitializeProcThreadAttributeList")
Interceptor.attach(InitializeProcThreadAttributeList, {onLeave: function (args) {send("InitializeProcThreadAttributeList");}});

var InitializeSListHead = Module.findExportByName("kernel32.dll", "InitializeSListHead")
Interceptor.attach(InitializeSListHead, {onLeave: function (args) {send("InitializeSListHead");}});

var InitializeSRWLock = Module.findExportByName("kernel32.dll", "InitializeSRWLock")
Interceptor.attach(InitializeSRWLock, {onLeave: function (args) {send("InitializeSRWLock");}});

var InitializeSynchronizationBarrier = Module.findExportByName("kernel32.dll", "InitializeSynchronizationBarrier")
Interceptor.attach(InitializeSynchronizationBarrier, {onLeave: function (args) {send("InitializeSynchronizationBarrier");}});

var InstallELAMCertificateInfo = Module.findExportByName("kernel32.dll", "InstallELAMCertificateInfo")
Interceptor.attach(InstallELAMCertificateInfo, {onLeave: function (args) {send("InstallELAMCertificateInfo");}});

var InterlockedFlushSList = Module.findExportByName("kernel32.dll", "InterlockedFlushSList")
Interceptor.attach(InterlockedFlushSList, {onLeave: function (args) {send("InterlockedFlushSList");}});

var InterlockedPopEntrySList = Module.findExportByName("kernel32.dll", "InterlockedPopEntrySList")
Interceptor.attach(InterlockedPopEntrySList, {onLeave: function (args) {send("InterlockedPopEntrySList");}});

var InterlockedPushEntrySList = Module.findExportByName("kernel32.dll", "InterlockedPushEntrySList")
Interceptor.attach(InterlockedPushEntrySList, {onLeave: function (args) {send("InterlockedPushEntrySList");}});

var InterlockedPushListSList = Module.findExportByName("kernel32.dll", "InterlockedPushListSList")
Interceptor.attach(InterlockedPushListSList, {onLeave: function (args) {send("InterlockedPushListSList");}});

var InterlockedPushListSListEx = Module.findExportByName("kernel32.dll", "InterlockedPushListSListEx")
Interceptor.attach(InterlockedPushListSListEx, {onLeave: function (args) {send("InterlockedPushListSListEx");}});

var InvalidateConsoleDIBits = Module.findExportByName("kernel32.dll", "InvalidateConsoleDIBits")
Interceptor.attach(InvalidateConsoleDIBits, {onLeave: function (args) {send("InvalidateConsoleDIBits");}});

var IsBadCodePtr = Module.findExportByName("kernel32.dll", "IsBadCodePtr")
Interceptor.attach(IsBadCodePtr, {onLeave: function (args) {send("IsBadCodePtr");}});

var IsBadHugeReadPtr = Module.findExportByName("kernel32.dll", "IsBadHugeReadPtr")
Interceptor.attach(IsBadHugeReadPtr, {onLeave: function (args) {send("IsBadHugeReadPtr");}});

var IsBadHugeWritePtr = Module.findExportByName("kernel32.dll", "IsBadHugeWritePtr")
Interceptor.attach(IsBadHugeWritePtr, {onLeave: function (args) {send("IsBadHugeWritePtr");}});

var IsBadReadPtr = Module.findExportByName("kernel32.dll", "IsBadReadPtr")
Interceptor.attach(IsBadReadPtr, {onLeave: function (args) {send("IsBadReadPtr");}});

var IsBadStringPtrA = Module.findExportByName("kernel32.dll", "IsBadStringPtrA")
Interceptor.attach(IsBadStringPtrA, {onLeave: function (args) {send("IsBadStringPtrA");}});

var IsBadStringPtrW = Module.findExportByName("kernel32.dll", "IsBadStringPtrW")
Interceptor.attach(IsBadStringPtrW, {onLeave: function (args) {send("IsBadStringPtrW");}});

var IsBadWritePtr = Module.findExportByName("kernel32.dll", "IsBadWritePtr")
Interceptor.attach(IsBadWritePtr, {onLeave: function (args) {send("IsBadWritePtr");}});

var IsCalendarLeapDay = Module.findExportByName("kernel32.dll", "IsCalendarLeapDay")
Interceptor.attach(IsCalendarLeapDay, {onLeave: function (args) {send("IsCalendarLeapDay");}});

var IsCalendarLeapMonth = Module.findExportByName("kernel32.dll", "IsCalendarLeapMonth")
Interceptor.attach(IsCalendarLeapMonth, {onLeave: function (args) {send("IsCalendarLeapMonth");}});

var IsCalendarLeapYear = Module.findExportByName("kernel32.dll", "IsCalendarLeapYear")
Interceptor.attach(IsCalendarLeapYear, {onLeave: function (args) {send("IsCalendarLeapYear");}});

var IsDBCSLeadByte = Module.findExportByName("kernel32.dll", "IsDBCSLeadByte")
Interceptor.attach(IsDBCSLeadByte, {onLeave: function (args) {send("IsDBCSLeadByte");}});

var IsDBCSLeadByteEx = Module.findExportByName("kernel32.dll", "IsDBCSLeadByteEx")
Interceptor.attach(IsDBCSLeadByteEx, {onLeave: function (args) {send("IsDBCSLeadByteEx");}});

var IsDebuggerPresent = Module.findExportByName("kernel32.dll", "IsDebuggerPresent")
Interceptor.attach(IsDebuggerPresent, {onLeave: function (args) {send("IsDebuggerPresent");}});

var IsEnclaveTypeSupported = Module.findExportByName("kernel32.dll", "IsEnclaveTypeSupported")
Interceptor.attach(IsEnclaveTypeSupported, {onLeave: function (args) {send("IsEnclaveTypeSupported");}});

var IsIoRingOpSupported = Module.findExportByName("kernel32.dll", "IsIoRingOpSupported")
Interceptor.attach(IsIoRingOpSupported, {onLeave: function (args) {send("IsIoRingOpSupported");}});

var IsNLSDefinedString = Module.findExportByName("kernel32.dll", "IsNLSDefinedString")
Interceptor.attach(IsNLSDefinedString, {onLeave: function (args) {send("IsNLSDefinedString");}});

var IsNativeVhdBoot = Module.findExportByName("kernel32.dll", "IsNativeVhdBoot")
Interceptor.attach(IsNativeVhdBoot, {onLeave: function (args) {send("IsNativeVhdBoot");}});

var IsNormalizedString = Module.findExportByName("kernel32.dll", "IsNormalizedString")
Interceptor.attach(IsNormalizedString, {onLeave: function (args) {send("IsNormalizedString");}});

var IsProcessCritical = Module.findExportByName("kernel32.dll", "IsProcessCritical")
Interceptor.attach(IsProcessCritical, {onLeave: function (args) {send("IsProcessCritical");}});

var IsProcessInJob = Module.findExportByName("kernel32.dll", "IsProcessInJob")
Interceptor.attach(IsProcessInJob, {onLeave: function (args) {send("IsProcessInJob");}});

var IsProcessorFeaturePresent = Module.findExportByName("kernel32.dll", "IsProcessorFeaturePresent")
Interceptor.attach(IsProcessorFeaturePresent, {onLeave: function (args) {send("IsProcessorFeaturePresent");}});

var IsSystemResumeAutomatic = Module.findExportByName("kernel32.dll", "IsSystemResumeAutomatic")
Interceptor.attach(IsSystemResumeAutomatic, {onLeave: function (args) {send("IsSystemResumeAutomatic");}});

var IsThreadAFiber = Module.findExportByName("kernel32.dll", "IsThreadAFiber")
Interceptor.attach(IsThreadAFiber, {onLeave: function (args) {send("IsThreadAFiber");}});

var IsThreadpoolTimerSet = Module.findExportByName("kernel32.dll", "IsThreadpoolTimerSet")
Interceptor.attach(IsThreadpoolTimerSet, {onLeave: function (args) {send("IsThreadpoolTimerSet");}});

var IsUserCetAvailableInEnvironment = Module.findExportByName("kernel32.dll", "IsUserCetAvailableInEnvironment")
Interceptor.attach(IsUserCetAvailableInEnvironment, {onLeave: function (args) {send("IsUserCetAvailableInEnvironment");}});

var IsValidCalDateTime = Module.findExportByName("kernel32.dll", "IsValidCalDateTime")
Interceptor.attach(IsValidCalDateTime, {onLeave: function (args) {send("IsValidCalDateTime");}});

var IsValidCodePage = Module.findExportByName("kernel32.dll", "IsValidCodePage")
Interceptor.attach(IsValidCodePage, {onLeave: function (args) {send("IsValidCodePage");}});

var IsValidLanguageGroup = Module.findExportByName("kernel32.dll", "IsValidLanguageGroup")
Interceptor.attach(IsValidLanguageGroup, {onLeave: function (args) {send("IsValidLanguageGroup");}});

var IsValidLocale = Module.findExportByName("kernel32.dll", "IsValidLocale")
Interceptor.attach(IsValidLocale, {onLeave: function (args) {send("IsValidLocale");}});

var IsValidLocaleName = Module.findExportByName("kernel32.dll", "IsValidLocaleName")
Interceptor.attach(IsValidLocaleName, {onLeave: function (args) {send("IsValidLocaleName");}});

var IsValidNLSVersion = Module.findExportByName("kernel32.dll", "IsValidNLSVersion")
Interceptor.attach(IsValidNLSVersion, {onLeave: function (args) {send("IsValidNLSVersion");}});

var IsWow64GuestMachineSupported = Module.findExportByName("kernel32.dll", "IsWow64GuestMachineSupported")
Interceptor.attach(IsWow64GuestMachineSupported, {onLeave: function (args) {send("IsWow64GuestMachineSupported");}});

var IsWow64Process = Module.findExportByName("kernel32.dll", "IsWow64Process")
Interceptor.attach(IsWow64Process, {onLeave: function (args) {send("IsWow64Process");}});

var IsWow64Process2 = Module.findExportByName("kernel32.dll", "IsWow64Process2")
Interceptor.attach(IsWow64Process2, {onLeave: function (args) {send("IsWow64Process2");}});

var K32EmptyWorkingSet = Module.findExportByName("kernel32.dll", "K32EmptyWorkingSet")
Interceptor.attach(K32EmptyWorkingSet, {onLeave: function (args) {send("K32EmptyWorkingSet");}});

var K32EnumDeviceDrivers = Module.findExportByName("kernel32.dll", "K32EnumDeviceDrivers")
Interceptor.attach(K32EnumDeviceDrivers, {onLeave: function (args) {send("K32EnumDeviceDrivers");}});

var K32EnumPageFilesA = Module.findExportByName("kernel32.dll", "K32EnumPageFilesA")
Interceptor.attach(K32EnumPageFilesA, {onLeave: function (args) {send("K32EnumPageFilesA");}});

var K32EnumPageFilesW = Module.findExportByName("kernel32.dll", "K32EnumPageFilesW")
Interceptor.attach(K32EnumPageFilesW, {onLeave: function (args) {send("K32EnumPageFilesW");}});

var K32EnumProcessModules = Module.findExportByName("kernel32.dll", "K32EnumProcessModules")
Interceptor.attach(K32EnumProcessModules, {onLeave: function (args) {send("K32EnumProcessModules");}});

var K32EnumProcessModulesEx = Module.findExportByName("kernel32.dll", "K32EnumProcessModulesEx")
Interceptor.attach(K32EnumProcessModulesEx, {onLeave: function (args) {send("K32EnumProcessModulesEx");}});

var K32EnumProcesses = Module.findExportByName("kernel32.dll", "K32EnumProcesses")
Interceptor.attach(K32EnumProcesses, {onLeave: function (args) {send("K32EnumProcesses");}});

var K32GetDeviceDriverBaseNameA = Module.findExportByName("kernel32.dll", "K32GetDeviceDriverBaseNameA")
Interceptor.attach(K32GetDeviceDriverBaseNameA, {onLeave: function (args) {send("K32GetDeviceDriverBaseNameA");}});

var K32GetDeviceDriverBaseNameW = Module.findExportByName("kernel32.dll", "K32GetDeviceDriverBaseNameW")
Interceptor.attach(K32GetDeviceDriverBaseNameW, {onLeave: function (args) {send("K32GetDeviceDriverBaseNameW");}});

var K32GetDeviceDriverFileNameA = Module.findExportByName("kernel32.dll", "K32GetDeviceDriverFileNameA")
Interceptor.attach(K32GetDeviceDriverFileNameA, {onLeave: function (args) {send("K32GetDeviceDriverFileNameA");}});

var K32GetDeviceDriverFileNameW = Module.findExportByName("kernel32.dll", "K32GetDeviceDriverFileNameW")
Interceptor.attach(K32GetDeviceDriverFileNameW, {onLeave: function (args) {send("K32GetDeviceDriverFileNameW");}});

var K32GetMappedFileNameA = Module.findExportByName("kernel32.dll", "K32GetMappedFileNameA")
Interceptor.attach(K32GetMappedFileNameA, {onLeave: function (args) {send("K32GetMappedFileNameA");}});

var K32GetMappedFileNameW = Module.findExportByName("kernel32.dll", "K32GetMappedFileNameW")
Interceptor.attach(K32GetMappedFileNameW, {onLeave: function (args) {send("K32GetMappedFileNameW");}});

var K32GetModuleBaseNameA = Module.findExportByName("kernel32.dll", "K32GetModuleBaseNameA")
Interceptor.attach(K32GetModuleBaseNameA, {onLeave: function (args) {send("K32GetModuleBaseNameA");}});

var K32GetModuleBaseNameW = Module.findExportByName("kernel32.dll", "K32GetModuleBaseNameW")
Interceptor.attach(K32GetModuleBaseNameW, {onLeave: function (args) {send("K32GetModuleBaseNameW");}});

var K32GetModuleFileNameExA = Module.findExportByName("kernel32.dll", "K32GetModuleFileNameExA")
Interceptor.attach(K32GetModuleFileNameExA, {onLeave: function (args) {send("K32GetModuleFileNameExA");}});

var K32GetModuleFileNameExW = Module.findExportByName("kernel32.dll", "K32GetModuleFileNameExW")
Interceptor.attach(K32GetModuleFileNameExW, {onLeave: function (args) {send("K32GetModuleFileNameExW");}});

var K32GetModuleInformation = Module.findExportByName("kernel32.dll", "K32GetModuleInformation")
Interceptor.attach(K32GetModuleInformation, {onLeave: function (args) {send("K32GetModuleInformation");}});

var K32GetPerformanceInfo = Module.findExportByName("kernel32.dll", "K32GetPerformanceInfo")
Interceptor.attach(K32GetPerformanceInfo, {onLeave: function (args) {send("K32GetPerformanceInfo");}});

var K32GetProcessImageFileNameA = Module.findExportByName("kernel32.dll", "K32GetProcessImageFileNameA")
Interceptor.attach(K32GetProcessImageFileNameA, {onLeave: function (args) {send("K32GetProcessImageFileNameA");}});

var K32GetProcessImageFileNameW = Module.findExportByName("kernel32.dll", "K32GetProcessImageFileNameW")
Interceptor.attach(K32GetProcessImageFileNameW, {onLeave: function (args) {send("K32GetProcessImageFileNameW");}});

var K32GetProcessMemoryInfo = Module.findExportByName("kernel32.dll", "K32GetProcessMemoryInfo")
Interceptor.attach(K32GetProcessMemoryInfo, {onLeave: function (args) {send("K32GetProcessMemoryInfo");}});

var K32GetWsChanges = Module.findExportByName("kernel32.dll", "K32GetWsChanges")
Interceptor.attach(K32GetWsChanges, {onLeave: function (args) {send("K32GetWsChanges");}});

var K32GetWsChangesEx = Module.findExportByName("kernel32.dll", "K32GetWsChangesEx")
Interceptor.attach(K32GetWsChangesEx, {onLeave: function (args) {send("K32GetWsChangesEx");}});

var K32InitializeProcessForWsWatch = Module.findExportByName("kernel32.dll", "K32InitializeProcessForWsWatch")
Interceptor.attach(K32InitializeProcessForWsWatch, {onLeave: function (args) {send("K32InitializeProcessForWsWatch");}});

var K32QueryWorkingSet = Module.findExportByName("kernel32.dll", "K32QueryWorkingSet")
Interceptor.attach(K32QueryWorkingSet, {onLeave: function (args) {send("K32QueryWorkingSet");}});

var K32QueryWorkingSetEx = Module.findExportByName("kernel32.dll", "K32QueryWorkingSetEx")
Interceptor.attach(K32QueryWorkingSetEx, {onLeave: function (args) {send("K32QueryWorkingSetEx");}});

var LCIDToLocaleName = Module.findExportByName("kernel32.dll", "LCIDToLocaleName")
Interceptor.attach(LCIDToLocaleName, {onLeave: function (args) {send("LCIDToLocaleName");}});

var LCMapStringA = Module.findExportByName("kernel32.dll", "LCMapStringA")
Interceptor.attach(LCMapStringA, {onLeave: function (args) {send("LCMapStringA");}});

var LCMapStringEx = Module.findExportByName("kernel32.dll", "LCMapStringEx")
Interceptor.attach(LCMapStringEx, {onLeave: function (args) {send("LCMapStringEx");}});

var LCMapStringW = Module.findExportByName("kernel32.dll", "LCMapStringW")
Interceptor.attach(LCMapStringW, {onLeave: function (args) {send("LCMapStringW");}});

var LZClose = Module.findExportByName("kernel32.dll", "LZClose")
Interceptor.attach(LZClose, {onLeave: function (args) {send("LZClose");}});

var LZCloseFile = Module.findExportByName("kernel32.dll", "LZCloseFile")
Interceptor.attach(LZCloseFile, {onLeave: function (args) {send("LZCloseFile");}});

var LZCopy = Module.findExportByName("kernel32.dll", "LZCopy")
Interceptor.attach(LZCopy, {onLeave: function (args) {send("LZCopy");}});

var LZCreateFileW = Module.findExportByName("kernel32.dll", "LZCreateFileW")
Interceptor.attach(LZCreateFileW, {onLeave: function (args) {send("LZCreateFileW");}});

var LZDone = Module.findExportByName("kernel32.dll", "LZDone")
Interceptor.attach(LZDone, {onLeave: function (args) {send("LZDone");}});

var LZInit = Module.findExportByName("kernel32.dll", "LZInit")
Interceptor.attach(LZInit, {onLeave: function (args) {send("LZInit");}});

var LZOpenFileA = Module.findExportByName("kernel32.dll", "LZOpenFileA")
Interceptor.attach(LZOpenFileA, {onLeave: function (args) {send("LZOpenFileA");}});

var LZOpenFileW = Module.findExportByName("kernel32.dll", "LZOpenFileW")
Interceptor.attach(LZOpenFileW, {onLeave: function (args) {send("LZOpenFileW");}});

var LZRead = Module.findExportByName("kernel32.dll", "LZRead")
Interceptor.attach(LZRead, {onLeave: function (args) {send("LZRead");}});

var LZSeek = Module.findExportByName("kernel32.dll", "LZSeek")
Interceptor.attach(LZSeek, {onLeave: function (args) {send("LZSeek");}});

var LZStart = Module.findExportByName("kernel32.dll", "LZStart")
Interceptor.attach(LZStart, {onLeave: function (args) {send("LZStart");}});

var LeaveCriticalSection = Module.findExportByName("kernel32.dll", "LeaveCriticalSection")
Interceptor.attach(LeaveCriticalSection, {onLeave: function (args) {send("LeaveCriticalSection");}});

var LeaveCriticalSectionWhenCallbackReturns = Module.findExportByName("kernel32.dll", "LeaveCriticalSectionWhenCallbackReturns")
Interceptor.attach(LeaveCriticalSectionWhenCallbackReturns, {onLeave: function (args) {send("LeaveCriticalSectionWhenCallbackReturns");}});

var LoadAppInitDlls = Module.findExportByName("kernel32.dll", "LoadAppInitDlls")
Interceptor.attach(LoadAppInitDlls, {onLeave: function (args) {send("LoadAppInitDlls");}});

var LoadEnclaveData = Module.findExportByName("kernel32.dll", "LoadEnclaveData")
Interceptor.attach(LoadEnclaveData, {onLeave: function (args) {send("LoadEnclaveData");}});

var LoadLibraryA = Module.findExportByName("kernel32.dll", "LoadLibraryA")
Interceptor.attach(LoadLibraryA, {onLeave: function (args) {send("LoadLibraryA");}});

var LoadLibraryExA = Module.findExportByName("kernel32.dll", "LoadLibraryExA")
Interceptor.attach(LoadLibraryExA, {onLeave: function (args) {send("LoadLibraryExA");}});

var LoadLibraryExW = Module.findExportByName("kernel32.dll", "LoadLibraryExW")
Interceptor.attach(LoadLibraryExW, {onLeave: function (args) {send("LoadLibraryExW");}});

var LoadLibraryW = Module.findExportByName("kernel32.dll", "LoadLibraryW")
Interceptor.attach(LoadLibraryW, {onLeave: function (args) {send("LoadLibraryW");}});

var LoadModule = Module.findExportByName("kernel32.dll", "LoadModule")
Interceptor.attach(LoadModule, {onLeave: function (args) {send("LoadModule");}});

var LoadPackagedLibrary = Module.findExportByName("kernel32.dll", "LoadPackagedLibrary")
Interceptor.attach(LoadPackagedLibrary, {onLeave: function (args) {send("LoadPackagedLibrary");}});

var LoadResource = Module.findExportByName("kernel32.dll", "LoadResource")
Interceptor.attach(LoadResource, {onLeave: function (args) {send("LoadResource");}});

var LoadStringBaseExW = Module.findExportByName("kernel32.dll", "LoadStringBaseExW")
Interceptor.attach(LoadStringBaseExW, {onLeave: function (args) {send("LoadStringBaseExW");}});

var LoadStringBaseW = Module.findExportByName("kernel32.dll", "LoadStringBaseW")
Interceptor.attach(LoadStringBaseW, {onLeave: function (args) {send("LoadStringBaseW");}});

var LocalAlloc = Module.findExportByName("kernel32.dll", "LocalAlloc")
Interceptor.attach(LocalAlloc, {onLeave: function (args) {send("LocalAlloc");}});

var LocalCompact = Module.findExportByName("kernel32.dll", "LocalCompact")
Interceptor.attach(LocalCompact, {onLeave: function (args) {send("LocalCompact");}});

var LocalFileTimeToFileTime = Module.findExportByName("kernel32.dll", "LocalFileTimeToFileTime")
Interceptor.attach(LocalFileTimeToFileTime, {onLeave: function (args) {send("LocalFileTimeToFileTime");}});

var LocalFileTimeToLocalSystemTime = Module.findExportByName("kernel32.dll", "LocalFileTimeToLocalSystemTime")
Interceptor.attach(LocalFileTimeToLocalSystemTime, {onLeave: function (args) {send("LocalFileTimeToLocalSystemTime");}});

var LocalFlags = Module.findExportByName("kernel32.dll", "LocalFlags")
Interceptor.attach(LocalFlags, {onLeave: function (args) {send("LocalFlags");}});

var LocalFree = Module.findExportByName("kernel32.dll", "LocalFree")
Interceptor.attach(LocalFree, {onLeave: function (args) {send("LocalFree");}});

var LocalHandle = Module.findExportByName("kernel32.dll", "LocalHandle")
Interceptor.attach(LocalHandle, {onLeave: function (args) {send("LocalHandle");}});

var LocalLock = Module.findExportByName("kernel32.dll", "LocalLock")
Interceptor.attach(LocalLock, {onLeave: function (args) {send("LocalLock");}});

var LocalReAlloc = Module.findExportByName("kernel32.dll", "LocalReAlloc")
Interceptor.attach(LocalReAlloc, {onLeave: function (args) {send("LocalReAlloc");}});

var LocalShrink = Module.findExportByName("kernel32.dll", "LocalShrink")
Interceptor.attach(LocalShrink, {onLeave: function (args) {send("LocalShrink");}});

var LocalSize = Module.findExportByName("kernel32.dll", "LocalSize")
Interceptor.attach(LocalSize, {onLeave: function (args) {send("LocalSize");}});

var LocalSystemTimeToLocalFileTime = Module.findExportByName("kernel32.dll", "LocalSystemTimeToLocalFileTime")
Interceptor.attach(LocalSystemTimeToLocalFileTime, {onLeave: function (args) {send("LocalSystemTimeToLocalFileTime");}});

var LocalUnlock = Module.findExportByName("kernel32.dll", "LocalUnlock")
Interceptor.attach(LocalUnlock, {onLeave: function (args) {send("LocalUnlock");}});

var LocaleNameToLCID = Module.findExportByName("kernel32.dll", "LocaleNameToLCID")
Interceptor.attach(LocaleNameToLCID, {onLeave: function (args) {send("LocaleNameToLCID");}});

var LocateXStateFeature = Module.findExportByName("kernel32.dll", "LocateXStateFeature")
Interceptor.attach(LocateXStateFeature, {onLeave: function (args) {send("LocateXStateFeature");}});

var LockFile = Module.findExportByName("kernel32.dll", "LockFile")
Interceptor.attach(LockFile, {onLeave: function (args) {send("LockFile");}});

var LockFileEx = Module.findExportByName("kernel32.dll", "LockFileEx")
Interceptor.attach(LockFileEx, {onLeave: function (args) {send("LockFileEx");}});

var LockResource = Module.findExportByName("kernel32.dll", "LockResource")
Interceptor.attach(LockResource, {onLeave: function (args) {send("LockResource");}});

var MapUserPhysicalPages = Module.findExportByName("kernel32.dll", "MapUserPhysicalPages")
Interceptor.attach(MapUserPhysicalPages, {onLeave: function (args) {send("MapUserPhysicalPages");}});

var MapUserPhysicalPagesScatter = Module.findExportByName("kernel32.dll", "MapUserPhysicalPagesScatter")
Interceptor.attach(MapUserPhysicalPagesScatter, {onLeave: function (args) {send("MapUserPhysicalPagesScatter");}});

var MapViewOfFile = Module.findExportByName("kernel32.dll", "MapViewOfFile")
Interceptor.attach(MapViewOfFile, {onLeave: function (args) {send("MapViewOfFile");}});

var MapViewOfFileEx = Module.findExportByName("kernel32.dll", "MapViewOfFileEx")
Interceptor.attach(MapViewOfFileEx, {onLeave: function (args) {send("MapViewOfFileEx");}});

var MapViewOfFileExNuma = Module.findExportByName("kernel32.dll", "MapViewOfFileExNuma")
Interceptor.attach(MapViewOfFileExNuma, {onLeave: function (args) {send("MapViewOfFileExNuma");}});

var MapViewOfFileFromApp = Module.findExportByName("kernel32.dll", "MapViewOfFileFromApp")
Interceptor.attach(MapViewOfFileFromApp, {onLeave: function (args) {send("MapViewOfFileFromApp");}});

var Module32First = Module.findExportByName("kernel32.dll", "Module32First")
Interceptor.attach(Module32First, {onLeave: function (args) {send("Module32First");}});

var Module32FirstW = Module.findExportByName("kernel32.dll", "Module32FirstW")
Interceptor.attach(Module32FirstW, {onLeave: function (args) {send("Module32FirstW");}});

var Module32Next = Module.findExportByName("kernel32.dll", "Module32Next")
Interceptor.attach(Module32Next, {onLeave: function (args) {send("Module32Next");}});

var Module32NextW = Module.findExportByName("kernel32.dll", "Module32NextW")
Interceptor.attach(Module32NextW, {onLeave: function (args) {send("Module32NextW");}});

var MoveFileA = Module.findExportByName("kernel32.dll", "MoveFileA")
Interceptor.attach(MoveFileA, {onLeave: function (args) {send("MoveFileA");}});

var MoveFileExA = Module.findExportByName("kernel32.dll", "MoveFileExA")
Interceptor.attach(MoveFileExA, {onLeave: function (args) {send("MoveFileExA");}});

var MoveFileExW = Module.findExportByName("kernel32.dll", "MoveFileExW")
Interceptor.attach(MoveFileExW, {onLeave: function (args) {send("MoveFileExW");}});

var MoveFileTransactedA = Module.findExportByName("kernel32.dll", "MoveFileTransactedA")
Interceptor.attach(MoveFileTransactedA, {onLeave: function (args) {send("MoveFileTransactedA");}});

var MoveFileTransactedW = Module.findExportByName("kernel32.dll", "MoveFileTransactedW")
Interceptor.attach(MoveFileTransactedW, {onLeave: function (args) {send("MoveFileTransactedW");}});

var MoveFileW = Module.findExportByName("kernel32.dll", "MoveFileW")
Interceptor.attach(MoveFileW, {onLeave: function (args) {send("MoveFileW");}});

var MoveFileWithProgressA = Module.findExportByName("kernel32.dll", "MoveFileWithProgressA")
Interceptor.attach(MoveFileWithProgressA, {onLeave: function (args) {send("MoveFileWithProgressA");}});

var MoveFileWithProgressW = Module.findExportByName("kernel32.dll", "MoveFileWithProgressW")
Interceptor.attach(MoveFileWithProgressW, {onLeave: function (args) {send("MoveFileWithProgressW");}});

var MulDiv = Module.findExportByName("kernel32.dll", "MulDiv")
Interceptor.attach(MulDiv, {onLeave: function (args) {send("MulDiv");}});

var MultiByteToWideChar = Module.findExportByName("kernel32.dll", "MultiByteToWideChar")
Interceptor.attach(MultiByteToWideChar, {onLeave: function (args) {send("MultiByteToWideChar");}});

var NeedCurrentDirectoryForExePathA = Module.findExportByName("kernel32.dll", "NeedCurrentDirectoryForExePathA")
Interceptor.attach(NeedCurrentDirectoryForExePathA, {onLeave: function (args) {send("NeedCurrentDirectoryForExePathA");}});

var NeedCurrentDirectoryForExePathW = Module.findExportByName("kernel32.dll", "NeedCurrentDirectoryForExePathW")
Interceptor.attach(NeedCurrentDirectoryForExePathW, {onLeave: function (args) {send("NeedCurrentDirectoryForExePathW");}});

var NlsCheckPolicy = Module.findExportByName("kernel32.dll", "NlsCheckPolicy")
Interceptor.attach(NlsCheckPolicy, {onLeave: function (args) {send("NlsCheckPolicy");}});

var NlsGetCacheUpdateCount = Module.findExportByName("kernel32.dll", "NlsGetCacheUpdateCount")
Interceptor.attach(NlsGetCacheUpdateCount, {onLeave: function (args) {send("NlsGetCacheUpdateCount");}});

var NlsUpdateLocale = Module.findExportByName("kernel32.dll", "NlsUpdateLocale")
Interceptor.attach(NlsUpdateLocale, {onLeave: function (args) {send("NlsUpdateLocale");}});

var NlsUpdateSystemLocale = Module.findExportByName("kernel32.dll", "NlsUpdateSystemLocale")
Interceptor.attach(NlsUpdateSystemLocale, {onLeave: function (args) {send("NlsUpdateSystemLocale");}});

var NormalizeString = Module.findExportByName("kernel32.dll", "NormalizeString")
Interceptor.attach(NormalizeString, {onLeave: function (args) {send("NormalizeString");}});

var NotifyMountMgr = Module.findExportByName("kernel32.dll", "NotifyMountMgr")
Interceptor.attach(NotifyMountMgr, {onLeave: function (args) {send("NotifyMountMgr");}});

var NotifyUILanguageChange = Module.findExportByName("kernel32.dll", "NotifyUILanguageChange")
Interceptor.attach(NotifyUILanguageChange, {onLeave: function (args) {send("NotifyUILanguageChange");}});

var NtVdm64CreateProcessInternalW = Module.findExportByName("kernel32.dll", "NtVdm64CreateProcessInternalW")
Interceptor.attach(NtVdm64CreateProcessInternalW, {onLeave: function (args) {send("NtVdm64CreateProcessInternalW");}});

var OOBEComplete = Module.findExportByName("kernel32.dll", "OOBEComplete")
Interceptor.attach(OOBEComplete, {onLeave: function (args) {send("OOBEComplete");}});

var OfferVirtualMemory = Module.findExportByName("kernel32.dll", "OfferVirtualMemory")
Interceptor.attach(OfferVirtualMemory, {onLeave: function (args) {send("OfferVirtualMemory");}});

var OpenConsoleW = Module.findExportByName("kernel32.dll", "OpenConsoleW")
Interceptor.attach(OpenConsoleW, {onLeave: function (args) {send("OpenConsoleW");}});

var OpenConsoleWStub = Module.findExportByName("kernel32.dll", "OpenConsoleWStub")
Interceptor.attach(OpenConsoleWStub, {onLeave: function (args) {send("OpenConsoleWStub");}});

var OpenEventA = Module.findExportByName("kernel32.dll", "OpenEventA")
Interceptor.attach(OpenEventA, {onLeave: function (args) {send("OpenEventA");}});

var OpenEventW = Module.findExportByName("kernel32.dll", "OpenEventW")
Interceptor.attach(OpenEventW, {onLeave: function (args) {send("OpenEventW");}});

var OpenFile = Module.findExportByName("kernel32.dll", "OpenFile")
Interceptor.attach(OpenFile, {onLeave: function (args) {send("OpenFile");}});

var OpenFileById = Module.findExportByName("kernel32.dll", "OpenFileById")
Interceptor.attach(OpenFileById, {onLeave: function (args) {send("OpenFileById");}});

var OpenFileMappingA = Module.findExportByName("kernel32.dll", "OpenFileMappingA")
Interceptor.attach(OpenFileMappingA, {onLeave: function (args) {send("OpenFileMappingA");}});

var OpenFileMappingW = Module.findExportByName("kernel32.dll", "OpenFileMappingW")
Interceptor.attach(OpenFileMappingW, {onLeave: function (args) {send("OpenFileMappingW");}});

var OpenJobObjectA = Module.findExportByName("kernel32.dll", "OpenJobObjectA")
Interceptor.attach(OpenJobObjectA, {onLeave: function (args) {send("OpenJobObjectA");}});

var OpenJobObjectW = Module.findExportByName("kernel32.dll", "OpenJobObjectW")
Interceptor.attach(OpenJobObjectW, {onLeave: function (args) {send("OpenJobObjectW");}});

var OpenMutexA = Module.findExportByName("kernel32.dll", "OpenMutexA")
Interceptor.attach(OpenMutexA, {onLeave: function (args) {send("OpenMutexA");}});

var OpenMutexW = Module.findExportByName("kernel32.dll", "OpenMutexW")
Interceptor.attach(OpenMutexW, {onLeave: function (args) {send("OpenMutexW");}});

var OpenPackageInfoByFullName = Module.findExportByName("kernel32.dll", "OpenPackageInfoByFullName")
Interceptor.attach(OpenPackageInfoByFullName, {onLeave: function (args) {send("OpenPackageInfoByFullName");}});

var OpenPrivateNamespaceA = Module.findExportByName("kernel32.dll", "OpenPrivateNamespaceA")
Interceptor.attach(OpenPrivateNamespaceA, {onLeave: function (args) {send("OpenPrivateNamespaceA");}});

var OpenPrivateNamespaceW = Module.findExportByName("kernel32.dll", "OpenPrivateNamespaceW")
Interceptor.attach(OpenPrivateNamespaceW, {onLeave: function (args) {send("OpenPrivateNamespaceW");}});

var OpenProcess = Module.findExportByName("kernel32.dll", "OpenProcess")
Interceptor.attach(OpenProcess, {onLeave: function (args) {send("OpenProcess");}});

var OpenProcessToken = Module.findExportByName("kernel32.dll", "OpenProcessToken")
Interceptor.attach(OpenProcessToken, {onLeave: function (args) {send("OpenProcessToken");}});

var OpenProfileUserMapping = Module.findExportByName("kernel32.dll", "OpenProfileUserMapping")
Interceptor.attach(OpenProfileUserMapping, {onLeave: function (args) {send("OpenProfileUserMapping");}});

var OpenSemaphoreA = Module.findExportByName("kernel32.dll", "OpenSemaphoreA")
Interceptor.attach(OpenSemaphoreA, {onLeave: function (args) {send("OpenSemaphoreA");}});

var OpenSemaphoreW = Module.findExportByName("kernel32.dll", "OpenSemaphoreW")
Interceptor.attach(OpenSemaphoreW, {onLeave: function (args) {send("OpenSemaphoreW");}});

var OpenState = Module.findExportByName("kernel32.dll", "OpenState")
Interceptor.attach(OpenState, {onLeave: function (args) {send("OpenState");}});

var OpenStateExplicit = Module.findExportByName("kernel32.dll", "OpenStateExplicit")
Interceptor.attach(OpenStateExplicit, {onLeave: function (args) {send("OpenStateExplicit");}});

var OpenThread = Module.findExportByName("kernel32.dll", "OpenThread")
Interceptor.attach(OpenThread, {onLeave: function (args) {send("OpenThread");}});

var OpenThreadToken = Module.findExportByName("kernel32.dll", "OpenThreadToken")
Interceptor.attach(OpenThreadToken, {onLeave: function (args) {send("OpenThreadToken");}});

var OpenWaitableTimerA = Module.findExportByName("kernel32.dll", "OpenWaitableTimerA")
Interceptor.attach(OpenWaitableTimerA, {onLeave: function (args) {send("OpenWaitableTimerA");}});

var OpenWaitableTimerW = Module.findExportByName("kernel32.dll", "OpenWaitableTimerW")
Interceptor.attach(OpenWaitableTimerW, {onLeave: function (args) {send("OpenWaitableTimerW");}});

var OutputDebugStringA = Module.findExportByName("kernel32.dll", "OutputDebugStringA")
Interceptor.attach(OutputDebugStringA, {onLeave: function (args) {send("OutputDebugStringA");}});

var OutputDebugStringW = Module.findExportByName("kernel32.dll", "OutputDebugStringW")
Interceptor.attach(OutputDebugStringW, {onLeave: function (args) {send("OutputDebugStringW");}});

var PackageFamilyNameFromFullName = Module.findExportByName("kernel32.dll", "PackageFamilyNameFromFullName")
Interceptor.attach(PackageFamilyNameFromFullName, {onLeave: function (args) {send("PackageFamilyNameFromFullName");}});

var PackageFamilyNameFromId = Module.findExportByName("kernel32.dll", "PackageFamilyNameFromId")
Interceptor.attach(PackageFamilyNameFromId, {onLeave: function (args) {send("PackageFamilyNameFromId");}});

var PackageFullNameFromId = Module.findExportByName("kernel32.dll", "PackageFullNameFromId")
Interceptor.attach(PackageFullNameFromId, {onLeave: function (args) {send("PackageFullNameFromId");}});

var PackageIdFromFullName = Module.findExportByName("kernel32.dll", "PackageIdFromFullName")
Interceptor.attach(PackageIdFromFullName, {onLeave: function (args) {send("PackageIdFromFullName");}});

var PackageNameAndPublisherIdFromFamilyName = Module.findExportByName("kernel32.dll", "PackageNameAndPublisherIdFromFamilyName")
Interceptor.attach(PackageNameAndPublisherIdFromFamilyName, {onLeave: function (args) {send("PackageNameAndPublisherIdFromFamilyName");}});

var ParseApplicationUserModelId = Module.findExportByName("kernel32.dll", "ParseApplicationUserModelId")
Interceptor.attach(ParseApplicationUserModelId, {onLeave: function (args) {send("ParseApplicationUserModelId");}});

var PeekConsoleInputA = Module.findExportByName("kernel32.dll", "PeekConsoleInputA")
Interceptor.attach(PeekConsoleInputA, {onLeave: function (args) {send("PeekConsoleInputA");}});

var PeekConsoleInputW = Module.findExportByName("kernel32.dll", "PeekConsoleInputW")
Interceptor.attach(PeekConsoleInputW, {onLeave: function (args) {send("PeekConsoleInputW");}});

var PeekNamedPipe = Module.findExportByName("kernel32.dll", "PeekNamedPipe")
Interceptor.attach(PeekNamedPipe, {onLeave: function (args) {send("PeekNamedPipe");}});

var PopIoRingCompletion = Module.findExportByName("kernel32.dll", "PopIoRingCompletion")
Interceptor.attach(PopIoRingCompletion, {onLeave: function (args) {send("PopIoRingCompletion");}});

var PostQueuedCompletionStatus = Module.findExportByName("kernel32.dll", "PostQueuedCompletionStatus")
Interceptor.attach(PostQueuedCompletionStatus, {onLeave: function (args) {send("PostQueuedCompletionStatus");}});

var PowerClearRequest = Module.findExportByName("kernel32.dll", "PowerClearRequest")
Interceptor.attach(PowerClearRequest, {onLeave: function (args) {send("PowerClearRequest");}});

var PowerCreateRequest = Module.findExportByName("kernel32.dll", "PowerCreateRequest")
Interceptor.attach(PowerCreateRequest, {onLeave: function (args) {send("PowerCreateRequest");}});

var PowerSetRequest = Module.findExportByName("kernel32.dll", "PowerSetRequest")
Interceptor.attach(PowerSetRequest, {onLeave: function (args) {send("PowerSetRequest");}});

var PrefetchVirtualMemory = Module.findExportByName("kernel32.dll", "PrefetchVirtualMemory")
Interceptor.attach(PrefetchVirtualMemory, {onLeave: function (args) {send("PrefetchVirtualMemory");}});

var PrepareTape = Module.findExportByName("kernel32.dll", "PrepareTape")
Interceptor.attach(PrepareTape, {onLeave: function (args) {send("PrepareTape");}});

var PrivCopyFileExW = Module.findExportByName("kernel32.dll", "PrivCopyFileExW")
Interceptor.attach(PrivCopyFileExW, {onLeave: function (args) {send("PrivCopyFileExW");}});

var PrivMoveFileIdentityW = Module.findExportByName("kernel32.dll", "PrivMoveFileIdentityW")
Interceptor.attach(PrivMoveFileIdentityW, {onLeave: function (args) {send("PrivMoveFileIdentityW");}});

var Process32First = Module.findExportByName("kernel32.dll", "Process32First")
Interceptor.attach(Process32First, {onLeave: function (args) {send("Process32First");}});

var Process32FirstW = Module.findExportByName("kernel32.dll", "Process32FirstW")
Interceptor.attach(Process32FirstW, {onLeave: function (args) {send("Process32FirstW");}});

var Process32Next = Module.findExportByName("kernel32.dll", "Process32Next")
Interceptor.attach(Process32Next, {onLeave: function (args) {send("Process32Next");}});

var Process32NextW = Module.findExportByName("kernel32.dll", "Process32NextW")
Interceptor.attach(Process32NextW, {onLeave: function (args) {send("Process32NextW");}});

var ProcessIdToSessionId = Module.findExportByName("kernel32.dll", "ProcessIdToSessionId")
Interceptor.attach(ProcessIdToSessionId, {onLeave: function (args) {send("ProcessIdToSessionId");}});

var PssCaptureSnapshot = Module.findExportByName("kernel32.dll", "PssCaptureSnapshot")
Interceptor.attach(PssCaptureSnapshot, {onLeave: function (args) {send("PssCaptureSnapshot");}});

var PssDuplicateSnapshot = Module.findExportByName("kernel32.dll", "PssDuplicateSnapshot")
Interceptor.attach(PssDuplicateSnapshot, {onLeave: function (args) {send("PssDuplicateSnapshot");}});

var PssFreeSnapshot = Module.findExportByName("kernel32.dll", "PssFreeSnapshot")
Interceptor.attach(PssFreeSnapshot, {onLeave: function (args) {send("PssFreeSnapshot");}});

var PssQuerySnapshot = Module.findExportByName("kernel32.dll", "PssQuerySnapshot")
Interceptor.attach(PssQuerySnapshot, {onLeave: function (args) {send("PssQuerySnapshot");}});

var PssWalkMarkerCreate = Module.findExportByName("kernel32.dll", "PssWalkMarkerCreate")
Interceptor.attach(PssWalkMarkerCreate, {onLeave: function (args) {send("PssWalkMarkerCreate");}});

var PssWalkMarkerFree = Module.findExportByName("kernel32.dll", "PssWalkMarkerFree")
Interceptor.attach(PssWalkMarkerFree, {onLeave: function (args) {send("PssWalkMarkerFree");}});

var PssWalkMarkerGetPosition = Module.findExportByName("kernel32.dll", "PssWalkMarkerGetPosition")
Interceptor.attach(PssWalkMarkerGetPosition, {onLeave: function (args) {send("PssWalkMarkerGetPosition");}});

var PssWalkMarkerRewind = Module.findExportByName("kernel32.dll", "PssWalkMarkerRewind")
Interceptor.attach(PssWalkMarkerRewind, {onLeave: function (args) {send("PssWalkMarkerRewind");}});

var PssWalkMarkerSeek = Module.findExportByName("kernel32.dll", "PssWalkMarkerSeek")
Interceptor.attach(PssWalkMarkerSeek, {onLeave: function (args) {send("PssWalkMarkerSeek");}});

var PssWalkMarkerSeekToBeginning = Module.findExportByName("kernel32.dll", "PssWalkMarkerSeekToBeginning")
Interceptor.attach(PssWalkMarkerSeekToBeginning, {onLeave: function (args) {send("PssWalkMarkerSeekToBeginning");}});

var PssWalkMarkerSetPosition = Module.findExportByName("kernel32.dll", "PssWalkMarkerSetPosition")
Interceptor.attach(PssWalkMarkerSetPosition, {onLeave: function (args) {send("PssWalkMarkerSetPosition");}});

var PssWalkMarkerTell = Module.findExportByName("kernel32.dll", "PssWalkMarkerTell")
Interceptor.attach(PssWalkMarkerTell, {onLeave: function (args) {send("PssWalkMarkerTell");}});

var PssWalkSnapshot = Module.findExportByName("kernel32.dll", "PssWalkSnapshot")
Interceptor.attach(PssWalkSnapshot, {onLeave: function (args) {send("PssWalkSnapshot");}});

var PulseEvent = Module.findExportByName("kernel32.dll", "PulseEvent")
Interceptor.attach(PulseEvent, {onLeave: function (args) {send("PulseEvent");}});

var PurgeComm = Module.findExportByName("kernel32.dll", "PurgeComm")
Interceptor.attach(PurgeComm, {onLeave: function (args) {send("PurgeComm");}});

var QueryActCtxSettingsW = Module.findExportByName("kernel32.dll", "QueryActCtxSettingsW")
Interceptor.attach(QueryActCtxSettingsW, {onLeave: function (args) {send("QueryActCtxSettingsW");}});

var QueryActCtxSettingsWWorker = Module.findExportByName("kernel32.dll", "QueryActCtxSettingsWWorker")
Interceptor.attach(QueryActCtxSettingsWWorker, {onLeave: function (args) {send("QueryActCtxSettingsWWorker");}});

var QueryActCtxW = Module.findExportByName("kernel32.dll", "QueryActCtxW")
Interceptor.attach(QueryActCtxW, {onLeave: function (args) {send("QueryActCtxW");}});

var QueryActCtxWWorker = Module.findExportByName("kernel32.dll", "QueryActCtxWWorker")
Interceptor.attach(QueryActCtxWWorker, {onLeave: function (args) {send("QueryActCtxWWorker");}});

var QueryDepthSList = Module.findExportByName("kernel32.dll", "QueryDepthSList")
Interceptor.attach(QueryDepthSList, {onLeave: function (args) {send("QueryDepthSList");}});

var QueryDosDeviceA = Module.findExportByName("kernel32.dll", "QueryDosDeviceA")
Interceptor.attach(QueryDosDeviceA, {onLeave: function (args) {send("QueryDosDeviceA");}});

var QueryDosDeviceW = Module.findExportByName("kernel32.dll", "QueryDosDeviceW")
Interceptor.attach(QueryDosDeviceW, {onLeave: function (args) {send("QueryDosDeviceW");}});

var QueryFullProcessImageNameA = Module.findExportByName("kernel32.dll", "QueryFullProcessImageNameA")
Interceptor.attach(QueryFullProcessImageNameA, {onLeave: function (args) {send("QueryFullProcessImageNameA");}});

var QueryFullProcessImageNameW = Module.findExportByName("kernel32.dll", "QueryFullProcessImageNameW")
Interceptor.attach(QueryFullProcessImageNameW, {onLeave: function (args) {send("QueryFullProcessImageNameW");}});

var QueryIdleProcessorCycleTime = Module.findExportByName("kernel32.dll", "QueryIdleProcessorCycleTime")
Interceptor.attach(QueryIdleProcessorCycleTime, {onLeave: function (args) {send("QueryIdleProcessorCycleTime");}});

var QueryIdleProcessorCycleTimeEx = Module.findExportByName("kernel32.dll", "QueryIdleProcessorCycleTimeEx")
Interceptor.attach(QueryIdleProcessorCycleTimeEx, {onLeave: function (args) {send("QueryIdleProcessorCycleTimeEx");}});

var QueryInformationJobObject = Module.findExportByName("kernel32.dll", "QueryInformationJobObject")
Interceptor.attach(QueryInformationJobObject, {onLeave: function (args) {send("QueryInformationJobObject");}});

var QueryIoRateControlInformationJobObject = Module.findExportByName("kernel32.dll", "QueryIoRateControlInformationJobObject")
Interceptor.attach(QueryIoRateControlInformationJobObject, {onLeave: function (args) {send("QueryIoRateControlInformationJobObject");}});

var QueryIoRingCapabilities = Module.findExportByName("kernel32.dll", "QueryIoRingCapabilities")
Interceptor.attach(QueryIoRingCapabilities, {onLeave: function (args) {send("QueryIoRingCapabilities");}});

var QueryMemoryResourceNotification = Module.findExportByName("kernel32.dll", "QueryMemoryResourceNotification")
Interceptor.attach(QueryMemoryResourceNotification, {onLeave: function (args) {send("QueryMemoryResourceNotification");}});

var QueryPerformanceCounter = Module.findExportByName("kernel32.dll", "QueryPerformanceCounter")
Interceptor.attach(QueryPerformanceCounter, {onLeave: function (args) {send("QueryPerformanceCounter");}});

var QueryPerformanceFrequency = Module.findExportByName("kernel32.dll", "QueryPerformanceFrequency")
Interceptor.attach(QueryPerformanceFrequency, {onLeave: function (args) {send("QueryPerformanceFrequency");}});

var QueryProcessAffinityUpdateMode = Module.findExportByName("kernel32.dll", "QueryProcessAffinityUpdateMode")
Interceptor.attach(QueryProcessAffinityUpdateMode, {onLeave: function (args) {send("QueryProcessAffinityUpdateMode");}});

var QueryProcessCycleTime = Module.findExportByName("kernel32.dll", "QueryProcessCycleTime")
Interceptor.attach(QueryProcessCycleTime, {onLeave: function (args) {send("QueryProcessCycleTime");}});

var QueryProtectedPolicy = Module.findExportByName("kernel32.dll", "QueryProtectedPolicy")
Interceptor.attach(QueryProtectedPolicy, {onLeave: function (args) {send("QueryProtectedPolicy");}});

var QueryThreadCycleTime = Module.findExportByName("kernel32.dll", "QueryThreadCycleTime")
Interceptor.attach(QueryThreadCycleTime, {onLeave: function (args) {send("QueryThreadCycleTime");}});

var QueryThreadProfiling = Module.findExportByName("kernel32.dll", "QueryThreadProfiling")
Interceptor.attach(QueryThreadProfiling, {onLeave: function (args) {send("QueryThreadProfiling");}});

var QueryThreadpoolStackInformation = Module.findExportByName("kernel32.dll", "QueryThreadpoolStackInformation")
Interceptor.attach(QueryThreadpoolStackInformation, {onLeave: function (args) {send("QueryThreadpoolStackInformation");}});

var QueryUmsThreadInformation = Module.findExportByName("kernel32.dll", "QueryUmsThreadInformation")
Interceptor.attach(QueryUmsThreadInformation, {onLeave: function (args) {send("QueryUmsThreadInformation");}});

var QueryUnbiasedInterruptTime = Module.findExportByName("kernel32.dll", "QueryUnbiasedInterruptTime")
Interceptor.attach(QueryUnbiasedInterruptTime, {onLeave: function (args) {send("QueryUnbiasedInterruptTime");}});

var QueueUserAPC = Module.findExportByName("kernel32.dll", "QueueUserAPC")
Interceptor.attach(QueueUserAPC, {onLeave: function (args) {send("QueueUserAPC");}});

var QueueUserAPC2 = Module.findExportByName("kernel32.dll", "QueueUserAPC2")
Interceptor.attach(QueueUserAPC2, {onLeave: function (args) {send("QueueUserAPC2");}});

var QueueUserWorkItem = Module.findExportByName("kernel32.dll", "QueueUserWorkItem")
Interceptor.attach(QueueUserWorkItem, {onLeave: function (args) {send("QueueUserWorkItem");}});

var QuirkGetData2Worker = Module.findExportByName("kernel32.dll", "QuirkGetData2Worker")
Interceptor.attach(QuirkGetData2Worker, {onLeave: function (args) {send("QuirkGetData2Worker");}});

var QuirkGetDataWorker = Module.findExportByName("kernel32.dll", "QuirkGetDataWorker")
Interceptor.attach(QuirkGetDataWorker, {onLeave: function (args) {send("QuirkGetDataWorker");}});

var QuirkIsEnabled2Worker = Module.findExportByName("kernel32.dll", "QuirkIsEnabled2Worker")
Interceptor.attach(QuirkIsEnabled2Worker, {onLeave: function (args) {send("QuirkIsEnabled2Worker");}});

var QuirkIsEnabled3Worker = Module.findExportByName("kernel32.dll", "QuirkIsEnabled3Worker")
Interceptor.attach(QuirkIsEnabled3Worker, {onLeave: function (args) {send("QuirkIsEnabled3Worker");}});

var QuirkIsEnabledForPackage2Worker = Module.findExportByName("kernel32.dll", "QuirkIsEnabledForPackage2Worker")
Interceptor.attach(QuirkIsEnabledForPackage2Worker, {onLeave: function (args) {send("QuirkIsEnabledForPackage2Worker");}});

var QuirkIsEnabledForPackage3Worker = Module.findExportByName("kernel32.dll", "QuirkIsEnabledForPackage3Worker")
Interceptor.attach(QuirkIsEnabledForPackage3Worker, {onLeave: function (args) {send("QuirkIsEnabledForPackage3Worker");}});

var QuirkIsEnabledForPackage4Worker = Module.findExportByName("kernel32.dll", "QuirkIsEnabledForPackage4Worker")
Interceptor.attach(QuirkIsEnabledForPackage4Worker, {onLeave: function (args) {send("QuirkIsEnabledForPackage4Worker");}});

var QuirkIsEnabledForPackageWorker = Module.findExportByName("kernel32.dll", "QuirkIsEnabledForPackageWorker")
Interceptor.attach(QuirkIsEnabledForPackageWorker, {onLeave: function (args) {send("QuirkIsEnabledForPackageWorker");}});

var QuirkIsEnabledForProcessWorker = Module.findExportByName("kernel32.dll", "QuirkIsEnabledForProcessWorker")
Interceptor.attach(QuirkIsEnabledForProcessWorker, {onLeave: function (args) {send("QuirkIsEnabledForProcessWorker");}});

var QuirkIsEnabledWorker = Module.findExportByName("kernel32.dll", "QuirkIsEnabledWorker")
Interceptor.attach(QuirkIsEnabledWorker, {onLeave: function (args) {send("QuirkIsEnabledWorker");}});

var RaiseException = Module.findExportByName("kernel32.dll", "RaiseException")
Interceptor.attach(RaiseException, {onLeave: function (args) {send("RaiseException");}});

var RaiseFailFastException = Module.findExportByName("kernel32.dll", "RaiseFailFastException")
Interceptor.attach(RaiseFailFastException, {onLeave: function (args) {send("RaiseFailFastException");}});

var RaiseInvalid16BitExeError = Module.findExportByName("kernel32.dll", "RaiseInvalid16BitExeError")
Interceptor.attach(RaiseInvalid16BitExeError, {onLeave: function (args) {send("RaiseInvalid16BitExeError");}});

var ReOpenFile = Module.findExportByName("kernel32.dll", "ReOpenFile")
Interceptor.attach(ReOpenFile, {onLeave: function (args) {send("ReOpenFile");}});

var ReadConsoleA = Module.findExportByName("kernel32.dll", "ReadConsoleA")
Interceptor.attach(ReadConsoleA, {onLeave: function (args) {send("ReadConsoleA");}});

var ReadConsoleInputA = Module.findExportByName("kernel32.dll", "ReadConsoleInputA")
Interceptor.attach(ReadConsoleInputA, {onLeave: function (args) {send("ReadConsoleInputA");}});

var ReadConsoleInputExA = Module.findExportByName("kernel32.dll", "ReadConsoleInputExA")
Interceptor.attach(ReadConsoleInputExA, {onLeave: function (args) {send("ReadConsoleInputExA");}});

var ReadConsoleInputExW = Module.findExportByName("kernel32.dll", "ReadConsoleInputExW")
Interceptor.attach(ReadConsoleInputExW, {onLeave: function (args) {send("ReadConsoleInputExW");}});

var ReadConsoleInputW = Module.findExportByName("kernel32.dll", "ReadConsoleInputW")
Interceptor.attach(ReadConsoleInputW, {onLeave: function (args) {send("ReadConsoleInputW");}});

var ReadConsoleOutputA = Module.findExportByName("kernel32.dll", "ReadConsoleOutputA")
Interceptor.attach(ReadConsoleOutputA, {onLeave: function (args) {send("ReadConsoleOutputA");}});

var ReadConsoleOutputAttribute = Module.findExportByName("kernel32.dll", "ReadConsoleOutputAttribute")
Interceptor.attach(ReadConsoleOutputAttribute, {onLeave: function (args) {send("ReadConsoleOutputAttribute");}});

var ReadConsoleOutputCharacterA = Module.findExportByName("kernel32.dll", "ReadConsoleOutputCharacterA")
Interceptor.attach(ReadConsoleOutputCharacterA, {onLeave: function (args) {send("ReadConsoleOutputCharacterA");}});

var ReadConsoleOutputCharacterW = Module.findExportByName("kernel32.dll", "ReadConsoleOutputCharacterW")
Interceptor.attach(ReadConsoleOutputCharacterW, {onLeave: function (args) {send("ReadConsoleOutputCharacterW");}});

var ReadConsoleOutputW = Module.findExportByName("kernel32.dll", "ReadConsoleOutputW")
Interceptor.attach(ReadConsoleOutputW, {onLeave: function (args) {send("ReadConsoleOutputW");}});

var ReadConsoleW = Module.findExportByName("kernel32.dll", "ReadConsoleW")
Interceptor.attach(ReadConsoleW, {onLeave: function (args) {send("ReadConsoleW");}});

var ReadDirectoryChangesExW = Module.findExportByName("kernel32.dll", "ReadDirectoryChangesExW")
Interceptor.attach(ReadDirectoryChangesExW, {onLeave: function (args) {send("ReadDirectoryChangesExW");}});

var ReadDirectoryChangesW = Module.findExportByName("kernel32.dll", "ReadDirectoryChangesW")
Interceptor.attach(ReadDirectoryChangesW, {onLeave: function (args) {send("ReadDirectoryChangesW");}});

var ReadFile = Module.findExportByName("kernel32.dll", "ReadFile")
Interceptor.attach(ReadFile, {onLeave: function (args) {send("ReadFile");}});

var ReadFileEx = Module.findExportByName("kernel32.dll", "ReadFileEx")
Interceptor.attach(ReadFileEx, {onLeave: function (args) {send("ReadFileEx");}});

var ReadFileScatter = Module.findExportByName("kernel32.dll", "ReadFileScatter")
Interceptor.attach(ReadFileScatter, {onLeave: function (args) {send("ReadFileScatter");}});

var ReadProcessMemory = Module.findExportByName("kernel32.dll", "ReadProcessMemory")
Interceptor.attach(ReadProcessMemory, {onLeave: function (args) {send("ReadProcessMemory");}});

var ReadThreadProfilingData = Module.findExportByName("kernel32.dll", "ReadThreadProfilingData")
Interceptor.attach(ReadThreadProfilingData, {onLeave: function (args) {send("ReadThreadProfilingData");}});

var ReclaimVirtualMemory = Module.findExportByName("kernel32.dll", "ReclaimVirtualMemory")
Interceptor.attach(ReclaimVirtualMemory, {onLeave: function (args) {send("ReclaimVirtualMemory");}});

var RegCloseKey = Module.findExportByName("kernel32.dll", "RegCloseKey")
Interceptor.attach(RegCloseKey, {onLeave: function (args) {send("RegCloseKey");}});

var RegCopyTreeW = Module.findExportByName("kernel32.dll", "RegCopyTreeW")
Interceptor.attach(RegCopyTreeW, {onLeave: function (args) {send("RegCopyTreeW");}});

var RegCreateKeyExA = Module.findExportByName("kernel32.dll", "RegCreateKeyExA")
Interceptor.attach(RegCreateKeyExA, {onLeave: function (args) {send("RegCreateKeyExA");}});

var RegCreateKeyExW = Module.findExportByName("kernel32.dll", "RegCreateKeyExW")
Interceptor.attach(RegCreateKeyExW, {onLeave: function (args) {send("RegCreateKeyExW");}});

var RegDeleteKeyExA = Module.findExportByName("kernel32.dll", "RegDeleteKeyExA")
Interceptor.attach(RegDeleteKeyExA, {onLeave: function (args) {send("RegDeleteKeyExA");}});

var RegDeleteKeyExW = Module.findExportByName("kernel32.dll", "RegDeleteKeyExW")
Interceptor.attach(RegDeleteKeyExW, {onLeave: function (args) {send("RegDeleteKeyExW");}});

var RegDeleteTreeA = Module.findExportByName("kernel32.dll", "RegDeleteTreeA")
Interceptor.attach(RegDeleteTreeA, {onLeave: function (args) {send("RegDeleteTreeA");}});

var RegDeleteTreeW = Module.findExportByName("kernel32.dll", "RegDeleteTreeW")
Interceptor.attach(RegDeleteTreeW, {onLeave: function (args) {send("RegDeleteTreeW");}});

var RegDeleteValueA = Module.findExportByName("kernel32.dll", "RegDeleteValueA")
Interceptor.attach(RegDeleteValueA, {onLeave: function (args) {send("RegDeleteValueA");}});

var RegDeleteValueW = Module.findExportByName("kernel32.dll", "RegDeleteValueW")
Interceptor.attach(RegDeleteValueW, {onLeave: function (args) {send("RegDeleteValueW");}});

var RegDisablePredefinedCacheEx = Module.findExportByName("kernel32.dll", "RegDisablePredefinedCacheEx")
Interceptor.attach(RegDisablePredefinedCacheEx, {onLeave: function (args) {send("RegDisablePredefinedCacheEx");}});

var RegEnumKeyExA = Module.findExportByName("kernel32.dll", "RegEnumKeyExA")
Interceptor.attach(RegEnumKeyExA, {onLeave: function (args) {send("RegEnumKeyExA");}});

var RegEnumKeyExW = Module.findExportByName("kernel32.dll", "RegEnumKeyExW")
Interceptor.attach(RegEnumKeyExW, {onLeave: function (args) {send("RegEnumKeyExW");}});

var RegEnumValueA = Module.findExportByName("kernel32.dll", "RegEnumValueA")
Interceptor.attach(RegEnumValueA, {onLeave: function (args) {send("RegEnumValueA");}});

var RegEnumValueW = Module.findExportByName("kernel32.dll", "RegEnumValueW")
Interceptor.attach(RegEnumValueW, {onLeave: function (args) {send("RegEnumValueW");}});

var RegFlushKey = Module.findExportByName("kernel32.dll", "RegFlushKey")
Interceptor.attach(RegFlushKey, {onLeave: function (args) {send("RegFlushKey");}});

var RegGetKeySecurity = Module.findExportByName("kernel32.dll", "RegGetKeySecurity")
Interceptor.attach(RegGetKeySecurity, {onLeave: function (args) {send("RegGetKeySecurity");}});

var RegGetValueA = Module.findExportByName("kernel32.dll", "RegGetValueA")
Interceptor.attach(RegGetValueA, {onLeave: function (args) {send("RegGetValueA");}});

var RegGetValueW = Module.findExportByName("kernel32.dll", "RegGetValueW")
Interceptor.attach(RegGetValueW, {onLeave: function (args) {send("RegGetValueW");}});

var RegLoadKeyA = Module.findExportByName("kernel32.dll", "RegLoadKeyA")
Interceptor.attach(RegLoadKeyA, {onLeave: function (args) {send("RegLoadKeyA");}});

var RegLoadKeyW = Module.findExportByName("kernel32.dll", "RegLoadKeyW")
Interceptor.attach(RegLoadKeyW, {onLeave: function (args) {send("RegLoadKeyW");}});

var RegLoadMUIStringA = Module.findExportByName("kernel32.dll", "RegLoadMUIStringA")
Interceptor.attach(RegLoadMUIStringA, {onLeave: function (args) {send("RegLoadMUIStringA");}});

var RegLoadMUIStringW = Module.findExportByName("kernel32.dll", "RegLoadMUIStringW")
Interceptor.attach(RegLoadMUIStringW, {onLeave: function (args) {send("RegLoadMUIStringW");}});

var RegNotifyChangeKeyValue = Module.findExportByName("kernel32.dll", "RegNotifyChangeKeyValue")
Interceptor.attach(RegNotifyChangeKeyValue, {onLeave: function (args) {send("RegNotifyChangeKeyValue");}});

var RegOpenCurrentUser = Module.findExportByName("kernel32.dll", "RegOpenCurrentUser")
Interceptor.attach(RegOpenCurrentUser, {onLeave: function (args) {send("RegOpenCurrentUser");}});

var RegOpenKeyExA = Module.findExportByName("kernel32.dll", "RegOpenKeyExA")
Interceptor.attach(RegOpenKeyExA, {onLeave: function (args) {send("RegOpenKeyExA");}});

var RegOpenKeyExW = Module.findExportByName("kernel32.dll", "RegOpenKeyExW")
Interceptor.attach(RegOpenKeyExW, {onLeave: function (args) {send("RegOpenKeyExW");}});

var RegOpenUserClassesRoot = Module.findExportByName("kernel32.dll", "RegOpenUserClassesRoot")
Interceptor.attach(RegOpenUserClassesRoot, {onLeave: function (args) {send("RegOpenUserClassesRoot");}});

var RegQueryInfoKeyA = Module.findExportByName("kernel32.dll", "RegQueryInfoKeyA")
Interceptor.attach(RegQueryInfoKeyA, {onLeave: function (args) {send("RegQueryInfoKeyA");}});

var RegQueryInfoKeyW = Module.findExportByName("kernel32.dll", "RegQueryInfoKeyW")
Interceptor.attach(RegQueryInfoKeyW, {onLeave: function (args) {send("RegQueryInfoKeyW");}});

var RegQueryValueExA = Module.findExportByName("kernel32.dll", "RegQueryValueExA")
Interceptor.attach(RegQueryValueExA, {onLeave: function (args) {send("RegQueryValueExA");}});

var RegQueryValueExW = Module.findExportByName("kernel32.dll", "RegQueryValueExW")
Interceptor.attach(RegQueryValueExW, {onLeave: function (args) {send("RegQueryValueExW");}});

var RegRestoreKeyA = Module.findExportByName("kernel32.dll", "RegRestoreKeyA")
Interceptor.attach(RegRestoreKeyA, {onLeave: function (args) {send("RegRestoreKeyA");}});

var RegRestoreKeyW = Module.findExportByName("kernel32.dll", "RegRestoreKeyW")
Interceptor.attach(RegRestoreKeyW, {onLeave: function (args) {send("RegRestoreKeyW");}});

var RegSaveKeyExA = Module.findExportByName("kernel32.dll", "RegSaveKeyExA")
Interceptor.attach(RegSaveKeyExA, {onLeave: function (args) {send("RegSaveKeyExA");}});

var RegSaveKeyExW = Module.findExportByName("kernel32.dll", "RegSaveKeyExW")
Interceptor.attach(RegSaveKeyExW, {onLeave: function (args) {send("RegSaveKeyExW");}});

var RegSetKeySecurity = Module.findExportByName("kernel32.dll", "RegSetKeySecurity")
Interceptor.attach(RegSetKeySecurity, {onLeave: function (args) {send("RegSetKeySecurity");}});

var RegSetValueExA = Module.findExportByName("kernel32.dll", "RegSetValueExA")
Interceptor.attach(RegSetValueExA, {onLeave: function (args) {send("RegSetValueExA");}});

var RegSetValueExW = Module.findExportByName("kernel32.dll", "RegSetValueExW")
Interceptor.attach(RegSetValueExW, {onLeave: function (args) {send("RegSetValueExW");}});

var RegUnLoadKeyA = Module.findExportByName("kernel32.dll", "RegUnLoadKeyA")
Interceptor.attach(RegUnLoadKeyA, {onLeave: function (args) {send("RegUnLoadKeyA");}});

var RegUnLoadKeyW = Module.findExportByName("kernel32.dll", "RegUnLoadKeyW")
Interceptor.attach(RegUnLoadKeyW, {onLeave: function (args) {send("RegUnLoadKeyW");}});

var RegisterApplicationRecoveryCallback = Module.findExportByName("kernel32.dll", "RegisterApplicationRecoveryCallback")
Interceptor.attach(RegisterApplicationRecoveryCallback, {onLeave: function (args) {send("RegisterApplicationRecoveryCallback");}});

var RegisterApplicationRestart = Module.findExportByName("kernel32.dll", "RegisterApplicationRestart")
Interceptor.attach(RegisterApplicationRestart, {onLeave: function (args) {send("RegisterApplicationRestart");}});

var RegisterBadMemoryNotification = Module.findExportByName("kernel32.dll", "RegisterBadMemoryNotification")
Interceptor.attach(RegisterBadMemoryNotification, {onLeave: function (args) {send("RegisterBadMemoryNotification");}});

var RegisterConsoleIME = Module.findExportByName("kernel32.dll", "RegisterConsoleIME")
Interceptor.attach(RegisterConsoleIME, {onLeave: function (args) {send("RegisterConsoleIME");}});

var RegisterConsoleOS2 = Module.findExportByName("kernel32.dll", "RegisterConsoleOS2")
Interceptor.attach(RegisterConsoleOS2, {onLeave: function (args) {send("RegisterConsoleOS2");}});

var RegisterConsoleVDM = Module.findExportByName("kernel32.dll", "RegisterConsoleVDM")
Interceptor.attach(RegisterConsoleVDM, {onLeave: function (args) {send("RegisterConsoleVDM");}});

var RegisterWaitForInputIdle = Module.findExportByName("kernel32.dll", "RegisterWaitForInputIdle")
Interceptor.attach(RegisterWaitForInputIdle, {onLeave: function (args) {send("RegisterWaitForInputIdle");}});

var RegisterWaitForSingleObject = Module.findExportByName("kernel32.dll", "RegisterWaitForSingleObject")
Interceptor.attach(RegisterWaitForSingleObject, {onLeave: function (args) {send("RegisterWaitForSingleObject");}});

var RegisterWaitForSingleObjectEx = Module.findExportByName("kernel32.dll", "RegisterWaitForSingleObjectEx")
Interceptor.attach(RegisterWaitForSingleObjectEx, {onLeave: function (args) {send("RegisterWaitForSingleObjectEx");}});

var RegisterWaitUntilOOBECompleted = Module.findExportByName("kernel32.dll", "RegisterWaitUntilOOBECompleted")
Interceptor.attach(RegisterWaitUntilOOBECompleted, {onLeave: function (args) {send("RegisterWaitUntilOOBECompleted");}});

var RegisterWowBaseHandlers = Module.findExportByName("kernel32.dll", "RegisterWowBaseHandlers")
Interceptor.attach(RegisterWowBaseHandlers, {onLeave: function (args) {send("RegisterWowBaseHandlers");}});

var RegisterWowExec = Module.findExportByName("kernel32.dll", "RegisterWowExec")
Interceptor.attach(RegisterWowExec, {onLeave: function (args) {send("RegisterWowExec");}});

var ReleaseActCtx = Module.findExportByName("kernel32.dll", "ReleaseActCtx")
Interceptor.attach(ReleaseActCtx, {onLeave: function (args) {send("ReleaseActCtx");}});

var ReleaseActCtxWorker = Module.findExportByName("kernel32.dll", "ReleaseActCtxWorker")
Interceptor.attach(ReleaseActCtxWorker, {onLeave: function (args) {send("ReleaseActCtxWorker");}});

var ReleaseMutex = Module.findExportByName("kernel32.dll", "ReleaseMutex")
Interceptor.attach(ReleaseMutex, {onLeave: function (args) {send("ReleaseMutex");}});

var ReleaseMutexWhenCallbackReturns = Module.findExportByName("kernel32.dll", "ReleaseMutexWhenCallbackReturns")
Interceptor.attach(ReleaseMutexWhenCallbackReturns, {onLeave: function (args) {send("ReleaseMutexWhenCallbackReturns");}});

var ReleasePackageVirtualizationContext = Module.findExportByName("kernel32.dll", "ReleasePackageVirtualizationContext")
Interceptor.attach(ReleasePackageVirtualizationContext, {onLeave: function (args) {send("ReleasePackageVirtualizationContext");}});

var ReleaseSRWLockExclusive = Module.findExportByName("kernel32.dll", "ReleaseSRWLockExclusive")
Interceptor.attach(ReleaseSRWLockExclusive, {onLeave: function (args) {send("ReleaseSRWLockExclusive");}});

var ReleaseSRWLockShared = Module.findExportByName("kernel32.dll", "ReleaseSRWLockShared")
Interceptor.attach(ReleaseSRWLockShared, {onLeave: function (args) {send("ReleaseSRWLockShared");}});

var ReleaseSemaphore = Module.findExportByName("kernel32.dll", "ReleaseSemaphore")
Interceptor.attach(ReleaseSemaphore, {onLeave: function (args) {send("ReleaseSemaphore");}});

var ReleaseSemaphoreWhenCallbackReturns = Module.findExportByName("kernel32.dll", "ReleaseSemaphoreWhenCallbackReturns")
Interceptor.attach(ReleaseSemaphoreWhenCallbackReturns, {onLeave: function (args) {send("ReleaseSemaphoreWhenCallbackReturns");}});

var RemoveDirectoryA = Module.findExportByName("kernel32.dll", "RemoveDirectoryA")
Interceptor.attach(RemoveDirectoryA, {onLeave: function (args) {send("RemoveDirectoryA");}});

var RemoveDirectoryTransactedA = Module.findExportByName("kernel32.dll", "RemoveDirectoryTransactedA")
Interceptor.attach(RemoveDirectoryTransactedA, {onLeave: function (args) {send("RemoveDirectoryTransactedA");}});

var RemoveDirectoryTransactedW = Module.findExportByName("kernel32.dll", "RemoveDirectoryTransactedW")
Interceptor.attach(RemoveDirectoryTransactedW, {onLeave: function (args) {send("RemoveDirectoryTransactedW");}});

var RemoveDirectoryW = Module.findExportByName("kernel32.dll", "RemoveDirectoryW")
Interceptor.attach(RemoveDirectoryW, {onLeave: function (args) {send("RemoveDirectoryW");}});

var RemoveDllDirectory = Module.findExportByName("kernel32.dll", "RemoveDllDirectory")
Interceptor.attach(RemoveDllDirectory, {onLeave: function (args) {send("RemoveDllDirectory");}});

var RemoveLocalAlternateComputerNameA = Module.findExportByName("kernel32.dll", "RemoveLocalAlternateComputerNameA")
Interceptor.attach(RemoveLocalAlternateComputerNameA, {onLeave: function (args) {send("RemoveLocalAlternateComputerNameA");}});

var RemoveLocalAlternateComputerNameW = Module.findExportByName("kernel32.dll", "RemoveLocalAlternateComputerNameW")
Interceptor.attach(RemoveLocalAlternateComputerNameW, {onLeave: function (args) {send("RemoveLocalAlternateComputerNameW");}});

var RemoveSecureMemoryCacheCallback = Module.findExportByName("kernel32.dll", "RemoveSecureMemoryCacheCallback")
Interceptor.attach(RemoveSecureMemoryCacheCallback, {onLeave: function (args) {send("RemoveSecureMemoryCacheCallback");}});

var RemoveVectoredContinueHandler = Module.findExportByName("kernel32.dll", "RemoveVectoredContinueHandler")
Interceptor.attach(RemoveVectoredContinueHandler, {onLeave: function (args) {send("RemoveVectoredContinueHandler");}});

var RemoveVectoredExceptionHandler = Module.findExportByName("kernel32.dll", "RemoveVectoredExceptionHandler")
Interceptor.attach(RemoveVectoredExceptionHandler, {onLeave: function (args) {send("RemoveVectoredExceptionHandler");}});

var ReplaceFile = Module.findExportByName("kernel32.dll", "ReplaceFile")
Interceptor.attach(ReplaceFile, {onLeave: function (args) {send("ReplaceFile");}});

var ReplaceFileA = Module.findExportByName("kernel32.dll", "ReplaceFileA")
Interceptor.attach(ReplaceFileA, {onLeave: function (args) {send("ReplaceFileA");}});

var ReplaceFileW = Module.findExportByName("kernel32.dll", "ReplaceFileW")
Interceptor.attach(ReplaceFileW, {onLeave: function (args) {send("ReplaceFileW");}});

var ReplacePartitionUnit = Module.findExportByName("kernel32.dll", "ReplacePartitionUnit")
Interceptor.attach(ReplacePartitionUnit, {onLeave: function (args) {send("ReplacePartitionUnit");}});

var RequestDeviceWakeup = Module.findExportByName("kernel32.dll", "RequestDeviceWakeup")
Interceptor.attach(RequestDeviceWakeup, {onLeave: function (args) {send("RequestDeviceWakeup");}});

var RequestWakeupLatency = Module.findExportByName("kernel32.dll", "RequestWakeupLatency")
Interceptor.attach(RequestWakeupLatency, {onLeave: function (args) {send("RequestWakeupLatency");}});

var ResetEvent = Module.findExportByName("kernel32.dll", "ResetEvent")
Interceptor.attach(ResetEvent, {onLeave: function (args) {send("ResetEvent");}});

var ResetWriteWatch = Module.findExportByName("kernel32.dll", "ResetWriteWatch")
Interceptor.attach(ResetWriteWatch, {onLeave: function (args) {send("ResetWriteWatch");}});

var ResizePseudoConsole = Module.findExportByName("kernel32.dll", "ResizePseudoConsole")
Interceptor.attach(ResizePseudoConsole, {onLeave: function (args) {send("ResizePseudoConsole");}});

var ResolveDelayLoadedAPI = Module.findExportByName("kernel32.dll", "ResolveDelayLoadedAPI")
Interceptor.attach(ResolveDelayLoadedAPI, {onLeave: function (args) {send("ResolveDelayLoadedAPI");}});

var ResolveDelayLoadsFromDll = Module.findExportByName("kernel32.dll", "ResolveDelayLoadsFromDll")
Interceptor.attach(ResolveDelayLoadsFromDll, {onLeave: function (args) {send("ResolveDelayLoadsFromDll");}});

var ResolveLocaleName = Module.findExportByName("kernel32.dll", "ResolveLocaleName")
Interceptor.attach(ResolveLocaleName, {onLeave: function (args) {send("ResolveLocaleName");}});

var RestoreLastError = Module.findExportByName("kernel32.dll", "RestoreLastError")
Interceptor.attach(RestoreLastError, {onLeave: function (args) {send("RestoreLastError");}});

var ResumeThread = Module.findExportByName("kernel32.dll", "ResumeThread")
Interceptor.attach(ResumeThread, {onLeave: function (args) {send("ResumeThread");}});

var RtlAddFunctionTable = Module.findExportByName("kernel32.dll", "RtlAddFunctionTable")
Interceptor.attach(RtlAddFunctionTable, {onLeave: function (args) {send("RtlAddFunctionTable");}});

var RtlCaptureContext = Module.findExportByName("kernel32.dll", "RtlCaptureContext")
Interceptor.attach(RtlCaptureContext, {onLeave: function (args) {send("RtlCaptureContext");}});

var RtlCaptureStackBackTrace = Module.findExportByName("kernel32.dll", "RtlCaptureStackBackTrace")
Interceptor.attach(RtlCaptureStackBackTrace, {onLeave: function (args) {send("RtlCaptureStackBackTrace");}});

var RtlCompareMemory = Module.findExportByName("kernel32.dll", "RtlCompareMemory")
Interceptor.attach(RtlCompareMemory, {onLeave: function (args) {send("RtlCompareMemory");}});

var RtlCopyMemory = Module.findExportByName("kernel32.dll", "RtlCopyMemory")
Interceptor.attach(RtlCopyMemory, {onLeave: function (args) {send("RtlCopyMemory");}});

var RtlDeleteFunctionTable = Module.findExportByName("kernel32.dll", "RtlDeleteFunctionTable")
Interceptor.attach(RtlDeleteFunctionTable, {onLeave: function (args) {send("RtlDeleteFunctionTable");}});

var RtlFillMemory = Module.findExportByName("kernel32.dll", "RtlFillMemory")
Interceptor.attach(RtlFillMemory, {onLeave: function (args) {send("RtlFillMemory");}});

var RtlInstallFunctionTableCallback = Module.findExportByName("kernel32.dll", "RtlInstallFunctionTableCallback")
Interceptor.attach(RtlInstallFunctionTableCallback, {onLeave: function (args) {send("RtlInstallFunctionTableCallback");}});

var RtlIsEcCode = Module.findExportByName("kernel32.dll", "RtlIsEcCode")
Interceptor.attach(RtlIsEcCode, {onLeave: function (args) {send("RtlIsEcCode");}});

var RtlLookupFunctionEntry = Module.findExportByName("kernel32.dll", "RtlLookupFunctionEntry")
Interceptor.attach(RtlLookupFunctionEntry, {onLeave: function (args) {send("RtlLookupFunctionEntry");}});

var RtlMoveMemory = Module.findExportByName("kernel32.dll", "RtlMoveMemory")
Interceptor.attach(RtlMoveMemory, {onLeave: function (args) {send("RtlMoveMemory");}});

var RtlPcToFileHeader = Module.findExportByName("kernel32.dll", "RtlPcToFileHeader")
Interceptor.attach(RtlPcToFileHeader, {onLeave: function (args) {send("RtlPcToFileHeader");}});

var RtlRaiseException = Module.findExportByName("kernel32.dll", "RtlRaiseException")
Interceptor.attach(RtlRaiseException, {onLeave: function (args) {send("RtlRaiseException");}});

var RtlRestoreContext = Module.findExportByName("kernel32.dll", "RtlRestoreContext")
Interceptor.attach(RtlRestoreContext, {onLeave: function (args) {send("RtlRestoreContext");}});

var RtlUnwind = Module.findExportByName("kernel32.dll", "RtlUnwind")
Interceptor.attach(RtlUnwind, {onLeave: function (args) {send("RtlUnwind");}});

var RtlUnwindEx = Module.findExportByName("kernel32.dll", "RtlUnwindEx")
Interceptor.attach(RtlUnwindEx, {onLeave: function (args) {send("RtlUnwindEx");}});

var RtlVirtualUnwind = Module.findExportByName("kernel32.dll", "RtlVirtualUnwind")
Interceptor.attach(RtlVirtualUnwind, {onLeave: function (args) {send("RtlVirtualUnwind");}});

var RtlVirtualUnwind2 = Module.findExportByName("kernel32.dll", "RtlVirtualUnwind2")
Interceptor.attach(RtlVirtualUnwind2, {onLeave: function (args) {send("RtlVirtualUnwind2");}});

var RtlZeroMemory = Module.findExportByName("kernel32.dll", "RtlZeroMemory")
Interceptor.attach(RtlZeroMemory, {onLeave: function (args) {send("RtlZeroMemory");}});

var ScrollConsoleScreenBufferA = Module.findExportByName("kernel32.dll", "ScrollConsoleScreenBufferA")
Interceptor.attach(ScrollConsoleScreenBufferA, {onLeave: function (args) {send("ScrollConsoleScreenBufferA");}});

var ScrollConsoleScreenBufferW = Module.findExportByName("kernel32.dll", "ScrollConsoleScreenBufferW")
Interceptor.attach(ScrollConsoleScreenBufferW, {onLeave: function (args) {send("ScrollConsoleScreenBufferW");}});

var SearchPathA = Module.findExportByName("kernel32.dll", "SearchPathA")
Interceptor.attach(SearchPathA, {onLeave: function (args) {send("SearchPathA");}});

var SearchPathW = Module.findExportByName("kernel32.dll", "SearchPathW")
Interceptor.attach(SearchPathW, {onLeave: function (args) {send("SearchPathW");}});

var SetCachedSigningLevel = Module.findExportByName("kernel32.dll", "SetCachedSigningLevel")
Interceptor.attach(SetCachedSigningLevel, {onLeave: function (args) {send("SetCachedSigningLevel");}});

var SetCalendarInfoA = Module.findExportByName("kernel32.dll", "SetCalendarInfoA")
Interceptor.attach(SetCalendarInfoA, {onLeave: function (args) {send("SetCalendarInfoA");}});

var SetCalendarInfoW = Module.findExportByName("kernel32.dll", "SetCalendarInfoW")
Interceptor.attach(SetCalendarInfoW, {onLeave: function (args) {send("SetCalendarInfoW");}});

var SetComPlusPackageInstallStatus = Module.findExportByName("kernel32.dll", "SetComPlusPackageInstallStatus")
Interceptor.attach(SetComPlusPackageInstallStatus, {onLeave: function (args) {send("SetComPlusPackageInstallStatus");}});

var SetCommBreak = Module.findExportByName("kernel32.dll", "SetCommBreak")
Interceptor.attach(SetCommBreak, {onLeave: function (args) {send("SetCommBreak");}});

var SetCommConfig = Module.findExportByName("kernel32.dll", "SetCommConfig")
Interceptor.attach(SetCommConfig, {onLeave: function (args) {send("SetCommConfig");}});

var SetCommMask = Module.findExportByName("kernel32.dll", "SetCommMask")
Interceptor.attach(SetCommMask, {onLeave: function (args) {send("SetCommMask");}});

var SetCommState = Module.findExportByName("kernel32.dll", "SetCommState")
Interceptor.attach(SetCommState, {onLeave: function (args) {send("SetCommState");}});

var SetCommTimeouts = Module.findExportByName("kernel32.dll", "SetCommTimeouts")
Interceptor.attach(SetCommTimeouts, {onLeave: function (args) {send("SetCommTimeouts");}});

var SetComputerNameA = Module.findExportByName("kernel32.dll", "SetComputerNameA")
Interceptor.attach(SetComputerNameA, {onLeave: function (args) {send("SetComputerNameA");}});

var SetComputerNameEx2W = Module.findExportByName("kernel32.dll", "SetComputerNameEx2W")
Interceptor.attach(SetComputerNameEx2W, {onLeave: function (args) {send("SetComputerNameEx2W");}});

var SetComputerNameExA = Module.findExportByName("kernel32.dll", "SetComputerNameExA")
Interceptor.attach(SetComputerNameExA, {onLeave: function (args) {send("SetComputerNameExA");}});

var SetComputerNameExW = Module.findExportByName("kernel32.dll", "SetComputerNameExW")
Interceptor.attach(SetComputerNameExW, {onLeave: function (args) {send("SetComputerNameExW");}});

var SetComputerNameW = Module.findExportByName("kernel32.dll", "SetComputerNameW")
Interceptor.attach(SetComputerNameW, {onLeave: function (args) {send("SetComputerNameW");}});

var SetConsoleActiveScreenBuffer = Module.findExportByName("kernel32.dll", "SetConsoleActiveScreenBuffer")
Interceptor.attach(SetConsoleActiveScreenBuffer, {onLeave: function (args) {send("SetConsoleActiveScreenBuffer");}});

var SetConsoleCP = Module.findExportByName("kernel32.dll", "SetConsoleCP")
Interceptor.attach(SetConsoleCP, {onLeave: function (args) {send("SetConsoleCP");}});

var SetConsoleCtrlHandler = Module.findExportByName("kernel32.dll", "SetConsoleCtrlHandler")
Interceptor.attach(SetConsoleCtrlHandler, {onLeave: function (args) {send("SetConsoleCtrlHandler");}});

var SetConsoleCursor = Module.findExportByName("kernel32.dll", "SetConsoleCursor")
Interceptor.attach(SetConsoleCursor, {onLeave: function (args) {send("SetConsoleCursor");}});

var SetConsoleCursorInfo = Module.findExportByName("kernel32.dll", "SetConsoleCursorInfo")
Interceptor.attach(SetConsoleCursorInfo, {onLeave: function (args) {send("SetConsoleCursorInfo");}});

var SetConsoleCursorMode = Module.findExportByName("kernel32.dll", "SetConsoleCursorMode")
Interceptor.attach(SetConsoleCursorMode, {onLeave: function (args) {send("SetConsoleCursorMode");}});

var SetConsoleCursorPosition = Module.findExportByName("kernel32.dll", "SetConsoleCursorPosition")
Interceptor.attach(SetConsoleCursorPosition, {onLeave: function (args) {send("SetConsoleCursorPosition");}});

var SetConsoleDisplayMode = Module.findExportByName("kernel32.dll", "SetConsoleDisplayMode")
Interceptor.attach(SetConsoleDisplayMode, {onLeave: function (args) {send("SetConsoleDisplayMode");}});

var SetConsoleFont = Module.findExportByName("kernel32.dll", "SetConsoleFont")
Interceptor.attach(SetConsoleFont, {onLeave: function (args) {send("SetConsoleFont");}});

var SetConsoleHardwareState = Module.findExportByName("kernel32.dll", "SetConsoleHardwareState")
Interceptor.attach(SetConsoleHardwareState, {onLeave: function (args) {send("SetConsoleHardwareState");}});

var SetConsoleHistoryInfo = Module.findExportByName("kernel32.dll", "SetConsoleHistoryInfo")
Interceptor.attach(SetConsoleHistoryInfo, {onLeave: function (args) {send("SetConsoleHistoryInfo");}});

var SetConsoleIcon = Module.findExportByName("kernel32.dll", "SetConsoleIcon")
Interceptor.attach(SetConsoleIcon, {onLeave: function (args) {send("SetConsoleIcon");}});

var SetConsoleInputExeNameA = Module.findExportByName("kernel32.dll", "SetConsoleInputExeNameA")
Interceptor.attach(SetConsoleInputExeNameA, {onLeave: function (args) {send("SetConsoleInputExeNameA");}});

var SetConsoleInputExeNameW = Module.findExportByName("kernel32.dll", "SetConsoleInputExeNameW")
Interceptor.attach(SetConsoleInputExeNameW, {onLeave: function (args) {send("SetConsoleInputExeNameW");}});

var SetConsoleKeyShortcuts = Module.findExportByName("kernel32.dll", "SetConsoleKeyShortcuts")
Interceptor.attach(SetConsoleKeyShortcuts, {onLeave: function (args) {send("SetConsoleKeyShortcuts");}});

var SetConsoleLocalEUDC = Module.findExportByName("kernel32.dll", "SetConsoleLocalEUDC")
Interceptor.attach(SetConsoleLocalEUDC, {onLeave: function (args) {send("SetConsoleLocalEUDC");}});

var SetConsoleMaximumWindowSize = Module.findExportByName("kernel32.dll", "SetConsoleMaximumWindowSize")
Interceptor.attach(SetConsoleMaximumWindowSize, {onLeave: function (args) {send("SetConsoleMaximumWindowSize");}});

var SetConsoleMenuClose = Module.findExportByName("kernel32.dll", "SetConsoleMenuClose")
Interceptor.attach(SetConsoleMenuClose, {onLeave: function (args) {send("SetConsoleMenuClose");}});

var SetConsoleMode = Module.findExportByName("kernel32.dll", "SetConsoleMode")
Interceptor.attach(SetConsoleMode, {onLeave: function (args) {send("SetConsoleMode");}});

var SetConsoleNlsMode = Module.findExportByName("kernel32.dll", "SetConsoleNlsMode")
Interceptor.attach(SetConsoleNlsMode, {onLeave: function (args) {send("SetConsoleNlsMode");}});

var SetConsoleNumberOfCommandsA = Module.findExportByName("kernel32.dll", "SetConsoleNumberOfCommandsA")
Interceptor.attach(SetConsoleNumberOfCommandsA, {onLeave: function (args) {send("SetConsoleNumberOfCommandsA");}});

var SetConsoleNumberOfCommandsW = Module.findExportByName("kernel32.dll", "SetConsoleNumberOfCommandsW")
Interceptor.attach(SetConsoleNumberOfCommandsW, {onLeave: function (args) {send("SetConsoleNumberOfCommandsW");}});

var SetConsoleOS2OemFormat = Module.findExportByName("kernel32.dll", "SetConsoleOS2OemFormat")
Interceptor.attach(SetConsoleOS2OemFormat, {onLeave: function (args) {send("SetConsoleOS2OemFormat");}});

var SetConsoleOutputCP = Module.findExportByName("kernel32.dll", "SetConsoleOutputCP")
Interceptor.attach(SetConsoleOutputCP, {onLeave: function (args) {send("SetConsoleOutputCP");}});

var SetConsolePalette = Module.findExportByName("kernel32.dll", "SetConsolePalette")
Interceptor.attach(SetConsolePalette, {onLeave: function (args) {send("SetConsolePalette");}});

var SetConsoleScreenBufferInfoEx = Module.findExportByName("kernel32.dll", "SetConsoleScreenBufferInfoEx")
Interceptor.attach(SetConsoleScreenBufferInfoEx, {onLeave: function (args) {send("SetConsoleScreenBufferInfoEx");}});

var SetConsoleScreenBufferSize = Module.findExportByName("kernel32.dll", "SetConsoleScreenBufferSize")
Interceptor.attach(SetConsoleScreenBufferSize, {onLeave: function (args) {send("SetConsoleScreenBufferSize");}});

var SetConsoleTextAttribute = Module.findExportByName("kernel32.dll", "SetConsoleTextAttribute")
Interceptor.attach(SetConsoleTextAttribute, {onLeave: function (args) {send("SetConsoleTextAttribute");}});

var SetConsoleTitleA = Module.findExportByName("kernel32.dll", "SetConsoleTitleA")
Interceptor.attach(SetConsoleTitleA, {onLeave: function (args) {send("SetConsoleTitleA");}});

var SetConsoleTitleW = Module.findExportByName("kernel32.dll", "SetConsoleTitleW")
Interceptor.attach(SetConsoleTitleW, {onLeave: function (args) {send("SetConsoleTitleW");}});

var SetConsoleWindowInfo = Module.findExportByName("kernel32.dll", "SetConsoleWindowInfo")
Interceptor.attach(SetConsoleWindowInfo, {onLeave: function (args) {send("SetConsoleWindowInfo");}});

var SetCriticalSectionSpinCount = Module.findExportByName("kernel32.dll", "SetCriticalSectionSpinCount")
Interceptor.attach(SetCriticalSectionSpinCount, {onLeave: function (args) {send("SetCriticalSectionSpinCount");}});

var SetCurrentConsoleFontEx = Module.findExportByName("kernel32.dll", "SetCurrentConsoleFontEx")
Interceptor.attach(SetCurrentConsoleFontEx, {onLeave: function (args) {send("SetCurrentConsoleFontEx");}});

var SetCurrentDirectoryA = Module.findExportByName("kernel32.dll", "SetCurrentDirectoryA")
Interceptor.attach(SetCurrentDirectoryA, {onLeave: function (args) {send("SetCurrentDirectoryA");}});

var SetCurrentDirectoryW = Module.findExportByName("kernel32.dll", "SetCurrentDirectoryW")
Interceptor.attach(SetCurrentDirectoryW, {onLeave: function (args) {send("SetCurrentDirectoryW");}});

var SetDefaultCommConfigA = Module.findExportByName("kernel32.dll", "SetDefaultCommConfigA")
Interceptor.attach(SetDefaultCommConfigA, {onLeave: function (args) {send("SetDefaultCommConfigA");}});

var SetDefaultCommConfigW = Module.findExportByName("kernel32.dll", "SetDefaultCommConfigW")
Interceptor.attach(SetDefaultCommConfigW, {onLeave: function (args) {send("SetDefaultCommConfigW");}});

var SetDefaultDllDirectories = Module.findExportByName("kernel32.dll", "SetDefaultDllDirectories")
Interceptor.attach(SetDefaultDllDirectories, {onLeave: function (args) {send("SetDefaultDllDirectories");}});

var SetDllDirectoryA = Module.findExportByName("kernel32.dll", "SetDllDirectoryA")
Interceptor.attach(SetDllDirectoryA, {onLeave: function (args) {send("SetDllDirectoryA");}});

var SetDllDirectoryW = Module.findExportByName("kernel32.dll", "SetDllDirectoryW")
Interceptor.attach(SetDllDirectoryW, {onLeave: function (args) {send("SetDllDirectoryW");}});

var SetDynamicTimeZoneInformation = Module.findExportByName("kernel32.dll", "SetDynamicTimeZoneInformation")
Interceptor.attach(SetDynamicTimeZoneInformation, {onLeave: function (args) {send("SetDynamicTimeZoneInformation");}});

var SetEndOfFile = Module.findExportByName("kernel32.dll", "SetEndOfFile")
Interceptor.attach(SetEndOfFile, {onLeave: function (args) {send("SetEndOfFile");}});

var SetEnvironmentStringsA = Module.findExportByName("kernel32.dll", "SetEnvironmentStringsA")
Interceptor.attach(SetEnvironmentStringsA, {onLeave: function (args) {send("SetEnvironmentStringsA");}});

var SetEnvironmentStringsW = Module.findExportByName("kernel32.dll", "SetEnvironmentStringsW")
Interceptor.attach(SetEnvironmentStringsW, {onLeave: function (args) {send("SetEnvironmentStringsW");}});

var SetEnvironmentVariableA = Module.findExportByName("kernel32.dll", "SetEnvironmentVariableA")
Interceptor.attach(SetEnvironmentVariableA, {onLeave: function (args) {send("SetEnvironmentVariableA");}});

var SetEnvironmentVariableW = Module.findExportByName("kernel32.dll", "SetEnvironmentVariableW")
Interceptor.attach(SetEnvironmentVariableW, {onLeave: function (args) {send("SetEnvironmentVariableW");}});

var SetErrorMode = Module.findExportByName("kernel32.dll", "SetErrorMode")
Interceptor.attach(SetErrorMode, {onLeave: function (args) {send("SetErrorMode");}});

var SetEvent = Module.findExportByName("kernel32.dll", "SetEvent")
Interceptor.attach(SetEvent, {onLeave: function (args) {send("SetEvent");}});

var SetEventWhenCallbackReturns = Module.findExportByName("kernel32.dll", "SetEventWhenCallbackReturns")
Interceptor.attach(SetEventWhenCallbackReturns, {onLeave: function (args) {send("SetEventWhenCallbackReturns");}});

var SetFileApisToANSI = Module.findExportByName("kernel32.dll", "SetFileApisToANSI")
Interceptor.attach(SetFileApisToANSI, {onLeave: function (args) {send("SetFileApisToANSI");}});

var SetFileApisToOEM = Module.findExportByName("kernel32.dll", "SetFileApisToOEM")
Interceptor.attach(SetFileApisToOEM, {onLeave: function (args) {send("SetFileApisToOEM");}});

var SetFileAttributesA = Module.findExportByName("kernel32.dll", "SetFileAttributesA")
Interceptor.attach(SetFileAttributesA, {onLeave: function (args) {send("SetFileAttributesA");}});

var SetFileAttributesTransactedA = Module.findExportByName("kernel32.dll", "SetFileAttributesTransactedA")
Interceptor.attach(SetFileAttributesTransactedA, {onLeave: function (args) {send("SetFileAttributesTransactedA");}});

var SetFileAttributesTransactedW = Module.findExportByName("kernel32.dll", "SetFileAttributesTransactedW")
Interceptor.attach(SetFileAttributesTransactedW, {onLeave: function (args) {send("SetFileAttributesTransactedW");}});

var SetFileAttributesW = Module.findExportByName("kernel32.dll", "SetFileAttributesW")
Interceptor.attach(SetFileAttributesW, {onLeave: function (args) {send("SetFileAttributesW");}});

var SetFileBandwidthReservation = Module.findExportByName("kernel32.dll", "SetFileBandwidthReservation")
Interceptor.attach(SetFileBandwidthReservation, {onLeave: function (args) {send("SetFileBandwidthReservation");}});

var SetFileCompletionNotificationModes = Module.findExportByName("kernel32.dll", "SetFileCompletionNotificationModes")
Interceptor.attach(SetFileCompletionNotificationModes, {onLeave: function (args) {send("SetFileCompletionNotificationModes");}});

var SetFileInformationByHandle = Module.findExportByName("kernel32.dll", "SetFileInformationByHandle")
Interceptor.attach(SetFileInformationByHandle, {onLeave: function (args) {send("SetFileInformationByHandle");}});

var SetFileIoOverlappedRange = Module.findExportByName("kernel32.dll", "SetFileIoOverlappedRange")
Interceptor.attach(SetFileIoOverlappedRange, {onLeave: function (args) {send("SetFileIoOverlappedRange");}});

var SetFilePointer = Module.findExportByName("kernel32.dll", "SetFilePointer")
Interceptor.attach(SetFilePointer, {onLeave: function (args) {send("SetFilePointer");}});

var SetFilePointerEx = Module.findExportByName("kernel32.dll", "SetFilePointerEx")
Interceptor.attach(SetFilePointerEx, {onLeave: function (args) {send("SetFilePointerEx");}});

var SetFileShortNameA = Module.findExportByName("kernel32.dll", "SetFileShortNameA")
Interceptor.attach(SetFileShortNameA, {onLeave: function (args) {send("SetFileShortNameA");}});

var SetFileShortNameW = Module.findExportByName("kernel32.dll", "SetFileShortNameW")
Interceptor.attach(SetFileShortNameW, {onLeave: function (args) {send("SetFileShortNameW");}});

var SetFileTime = Module.findExportByName("kernel32.dll", "SetFileTime")
Interceptor.attach(SetFileTime, {onLeave: function (args) {send("SetFileTime");}});

var SetFileValidData = Module.findExportByName("kernel32.dll", "SetFileValidData")
Interceptor.attach(SetFileValidData, {onLeave: function (args) {send("SetFileValidData");}});

var SetFirmwareEnvironmentVariableA = Module.findExportByName("kernel32.dll", "SetFirmwareEnvironmentVariableA")
Interceptor.attach(SetFirmwareEnvironmentVariableA, {onLeave: function (args) {send("SetFirmwareEnvironmentVariableA");}});

var SetFirmwareEnvironmentVariableExA = Module.findExportByName("kernel32.dll", "SetFirmwareEnvironmentVariableExA")
Interceptor.attach(SetFirmwareEnvironmentVariableExA, {onLeave: function (args) {send("SetFirmwareEnvironmentVariableExA");}});

var SetFirmwareEnvironmentVariableExW = Module.findExportByName("kernel32.dll", "SetFirmwareEnvironmentVariableExW")
Interceptor.attach(SetFirmwareEnvironmentVariableExW, {onLeave: function (args) {send("SetFirmwareEnvironmentVariableExW");}});

var SetFirmwareEnvironmentVariableW = Module.findExportByName("kernel32.dll", "SetFirmwareEnvironmentVariableW")
Interceptor.attach(SetFirmwareEnvironmentVariableW, {onLeave: function (args) {send("SetFirmwareEnvironmentVariableW");}});

var SetHandleCount = Module.findExportByName("kernel32.dll", "SetHandleCount")
Interceptor.attach(SetHandleCount, {onLeave: function (args) {send("SetHandleCount");}});

var SetHandleInformation = Module.findExportByName("kernel32.dll", "SetHandleInformation")
Interceptor.attach(SetHandleInformation, {onLeave: function (args) {send("SetHandleInformation");}});

var SetInformationJobObject = Module.findExportByName("kernel32.dll", "SetInformationJobObject")
Interceptor.attach(SetInformationJobObject, {onLeave: function (args) {send("SetInformationJobObject");}});

var SetIoRateControlInformationJobObject = Module.findExportByName("kernel32.dll", "SetIoRateControlInformationJobObject")
Interceptor.attach(SetIoRateControlInformationJobObject, {onLeave: function (args) {send("SetIoRateControlInformationJobObject");}});

var SetIoRingCompletionEvent = Module.findExportByName("kernel32.dll", "SetIoRingCompletionEvent")
Interceptor.attach(SetIoRingCompletionEvent, {onLeave: function (args) {send("SetIoRingCompletionEvent");}});

var SetLastConsoleEventActive = Module.findExportByName("kernel32.dll", "SetLastConsoleEventActive")
Interceptor.attach(SetLastConsoleEventActive, {onLeave: function (args) {send("SetLastConsoleEventActive");}});

var SetLastError = Module.findExportByName("kernel32.dll", "SetLastError")
Interceptor.attach(SetLastError, {onLeave: function (args) {send("SetLastError");}});

var SetLocalPrimaryComputerNameA = Module.findExportByName("kernel32.dll", "SetLocalPrimaryComputerNameA")
Interceptor.attach(SetLocalPrimaryComputerNameA, {onLeave: function (args) {send("SetLocalPrimaryComputerNameA");}});

var SetLocalPrimaryComputerNameW = Module.findExportByName("kernel32.dll", "SetLocalPrimaryComputerNameW")
Interceptor.attach(SetLocalPrimaryComputerNameW, {onLeave: function (args) {send("SetLocalPrimaryComputerNameW");}});

var SetLocalTime = Module.findExportByName("kernel32.dll", "SetLocalTime")
Interceptor.attach(SetLocalTime, {onLeave: function (args) {send("SetLocalTime");}});

var SetLocaleInfoA = Module.findExportByName("kernel32.dll", "SetLocaleInfoA")
Interceptor.attach(SetLocaleInfoA, {onLeave: function (args) {send("SetLocaleInfoA");}});

var SetLocaleInfoW = Module.findExportByName("kernel32.dll", "SetLocaleInfoW")
Interceptor.attach(SetLocaleInfoW, {onLeave: function (args) {send("SetLocaleInfoW");}});

var SetMailslotInfo = Module.findExportByName("kernel32.dll", "SetMailslotInfo")
Interceptor.attach(SetMailslotInfo, {onLeave: function (args) {send("SetMailslotInfo");}});

var SetMessageWaitingIndicator = Module.findExportByName("kernel32.dll", "SetMessageWaitingIndicator")
Interceptor.attach(SetMessageWaitingIndicator, {onLeave: function (args) {send("SetMessageWaitingIndicator");}});

var SetNamedPipeAttribute = Module.findExportByName("kernel32.dll", "SetNamedPipeAttribute")
Interceptor.attach(SetNamedPipeAttribute, {onLeave: function (args) {send("SetNamedPipeAttribute");}});

var SetNamedPipeHandleState = Module.findExportByName("kernel32.dll", "SetNamedPipeHandleState")
Interceptor.attach(SetNamedPipeHandleState, {onLeave: function (args) {send("SetNamedPipeHandleState");}});

var SetPriorityClass = Module.findExportByName("kernel32.dll", "SetPriorityClass")
Interceptor.attach(SetPriorityClass, {onLeave: function (args) {send("SetPriorityClass");}});

var SetProcessAffinityMask = Module.findExportByName("kernel32.dll", "SetProcessAffinityMask")
Interceptor.attach(SetProcessAffinityMask, {onLeave: function (args) {send("SetProcessAffinityMask");}});

var SetProcessAffinityUpdateMode = Module.findExportByName("kernel32.dll", "SetProcessAffinityUpdateMode")
Interceptor.attach(SetProcessAffinityUpdateMode, {onLeave: function (args) {send("SetProcessAffinityUpdateMode");}});

var SetProcessDEPPolicy = Module.findExportByName("kernel32.dll", "SetProcessDEPPolicy")
Interceptor.attach(SetProcessDEPPolicy, {onLeave: function (args) {send("SetProcessDEPPolicy");}});

var SetProcessDefaultCpuSetMasks = Module.findExportByName("kernel32.dll", "SetProcessDefaultCpuSetMasks")
Interceptor.attach(SetProcessDefaultCpuSetMasks, {onLeave: function (args) {send("SetProcessDefaultCpuSetMasks");}});

var SetProcessDefaultCpuSets = Module.findExportByName("kernel32.dll", "SetProcessDefaultCpuSets")
Interceptor.attach(SetProcessDefaultCpuSets, {onLeave: function (args) {send("SetProcessDefaultCpuSets");}});

var SetProcessDynamicEHContinuationTargets = Module.findExportByName("kernel32.dll", "SetProcessDynamicEHContinuationTargets")
Interceptor.attach(SetProcessDynamicEHContinuationTargets, {onLeave: function (args) {send("SetProcessDynamicEHContinuationTargets");}});

var SetProcessDynamicEnforcedCetCompatibleRanges = Module.findExportByName("kernel32.dll", "SetProcessDynamicEnforcedCetCompatibleRanges")
Interceptor.attach(SetProcessDynamicEnforcedCetCompatibleRanges, {onLeave: function (args) {send("SetProcessDynamicEnforcedCetCompatibleRanges");}});

var SetProcessInformation = Module.findExportByName("kernel32.dll", "SetProcessInformation")
Interceptor.attach(SetProcessInformation, {onLeave: function (args) {send("SetProcessInformation");}});

var SetProcessMitigationPolicy = Module.findExportByName("kernel32.dll", "SetProcessMitigationPolicy")
Interceptor.attach(SetProcessMitigationPolicy, {onLeave: function (args) {send("SetProcessMitigationPolicy");}});

var SetProcessPreferredUILanguages = Module.findExportByName("kernel32.dll", "SetProcessPreferredUILanguages")
Interceptor.attach(SetProcessPreferredUILanguages, {onLeave: function (args) {send("SetProcessPreferredUILanguages");}});

var SetProcessPriorityBoost = Module.findExportByName("kernel32.dll", "SetProcessPriorityBoost")
Interceptor.attach(SetProcessPriorityBoost, {onLeave: function (args) {send("SetProcessPriorityBoost");}});

var SetProcessShutdownParameters = Module.findExportByName("kernel32.dll", "SetProcessShutdownParameters")
Interceptor.attach(SetProcessShutdownParameters, {onLeave: function (args) {send("SetProcessShutdownParameters");}});

var SetProcessWorkingSetSize = Module.findExportByName("kernel32.dll", "SetProcessWorkingSetSize")
Interceptor.attach(SetProcessWorkingSetSize, {onLeave: function (args) {send("SetProcessWorkingSetSize");}});

var SetProcessWorkingSetSizeEx = Module.findExportByName("kernel32.dll", "SetProcessWorkingSetSizeEx")
Interceptor.attach(SetProcessWorkingSetSizeEx, {onLeave: function (args) {send("SetProcessWorkingSetSizeEx");}});

var SetProtectedPolicy = Module.findExportByName("kernel32.dll", "SetProtectedPolicy")
Interceptor.attach(SetProtectedPolicy, {onLeave: function (args) {send("SetProtectedPolicy");}});

var SetSearchPathMode = Module.findExportByName("kernel32.dll", "SetSearchPathMode")
Interceptor.attach(SetSearchPathMode, {onLeave: function (args) {send("SetSearchPathMode");}});

var SetStdHandle = Module.findExportByName("kernel32.dll", "SetStdHandle")
Interceptor.attach(SetStdHandle, {onLeave: function (args) {send("SetStdHandle");}});

var SetStdHandleEx = Module.findExportByName("kernel32.dll", "SetStdHandleEx")
Interceptor.attach(SetStdHandleEx, {onLeave: function (args) {send("SetStdHandleEx");}});

var SetSystemFileCacheSize = Module.findExportByName("kernel32.dll", "SetSystemFileCacheSize")
Interceptor.attach(SetSystemFileCacheSize, {onLeave: function (args) {send("SetSystemFileCacheSize");}});

var SetSystemPowerState = Module.findExportByName("kernel32.dll", "SetSystemPowerState")
Interceptor.attach(SetSystemPowerState, {onLeave: function (args) {send("SetSystemPowerState");}});

var SetSystemTime = Module.findExportByName("kernel32.dll", "SetSystemTime")
Interceptor.attach(SetSystemTime, {onLeave: function (args) {send("SetSystemTime");}});

var SetSystemTimeAdjustment = Module.findExportByName("kernel32.dll", "SetSystemTimeAdjustment")
Interceptor.attach(SetSystemTimeAdjustment, {onLeave: function (args) {send("SetSystemTimeAdjustment");}});

var SetTapeParameters = Module.findExportByName("kernel32.dll", "SetTapeParameters")
Interceptor.attach(SetTapeParameters, {onLeave: function (args) {send("SetTapeParameters");}});

var SetTapePosition = Module.findExportByName("kernel32.dll", "SetTapePosition")
Interceptor.attach(SetTapePosition, {onLeave: function (args) {send("SetTapePosition");}});

var SetTermsrvAppInstallMode = Module.findExportByName("kernel32.dll", "SetTermsrvAppInstallMode")
Interceptor.attach(SetTermsrvAppInstallMode, {onLeave: function (args) {send("SetTermsrvAppInstallMode");}});

var SetThreadAffinityMask = Module.findExportByName("kernel32.dll", "SetThreadAffinityMask")
Interceptor.attach(SetThreadAffinityMask, {onLeave: function (args) {send("SetThreadAffinityMask");}});

var SetThreadContext = Module.findExportByName("kernel32.dll", "SetThreadContext")
Interceptor.attach(SetThreadContext, {onLeave: function (args) {send("SetThreadContext");}});

var SetThreadDescription = Module.findExportByName("kernel32.dll", "SetThreadDescription")
Interceptor.attach(SetThreadDescription, {onLeave: function (args) {send("SetThreadDescription");}});

var SetThreadErrorMode = Module.findExportByName("kernel32.dll", "SetThreadErrorMode")
Interceptor.attach(SetThreadErrorMode, {onLeave: function (args) {send("SetThreadErrorMode");}});

var SetThreadExecutionState = Module.findExportByName("kernel32.dll", "SetThreadExecutionState")
Interceptor.attach(SetThreadExecutionState, {onLeave: function (args) {send("SetThreadExecutionState");}});

var SetThreadGroupAffinity = Module.findExportByName("kernel32.dll", "SetThreadGroupAffinity")
Interceptor.attach(SetThreadGroupAffinity, {onLeave: function (args) {send("SetThreadGroupAffinity");}});

var SetThreadIdealProcessor = Module.findExportByName("kernel32.dll", "SetThreadIdealProcessor")
Interceptor.attach(SetThreadIdealProcessor, {onLeave: function (args) {send("SetThreadIdealProcessor");}});

var SetThreadIdealProcessorEx = Module.findExportByName("kernel32.dll", "SetThreadIdealProcessorEx")
Interceptor.attach(SetThreadIdealProcessorEx, {onLeave: function (args) {send("SetThreadIdealProcessorEx");}});

var SetThreadInformation = Module.findExportByName("kernel32.dll", "SetThreadInformation")
Interceptor.attach(SetThreadInformation, {onLeave: function (args) {send("SetThreadInformation");}});

var SetThreadLocale = Module.findExportByName("kernel32.dll", "SetThreadLocale")
Interceptor.attach(SetThreadLocale, {onLeave: function (args) {send("SetThreadLocale");}});

var SetThreadPreferredUILanguages = Module.findExportByName("kernel32.dll", "SetThreadPreferredUILanguages")
Interceptor.attach(SetThreadPreferredUILanguages, {onLeave: function (args) {send("SetThreadPreferredUILanguages");}});

var SetThreadPriority = Module.findExportByName("kernel32.dll", "SetThreadPriority")
Interceptor.attach(SetThreadPriority, {onLeave: function (args) {send("SetThreadPriority");}});

var SetThreadPriorityBoost = Module.findExportByName("kernel32.dll", "SetThreadPriorityBoost")
Interceptor.attach(SetThreadPriorityBoost, {onLeave: function (args) {send("SetThreadPriorityBoost");}});

var SetThreadSelectedCpuSetMasks = Module.findExportByName("kernel32.dll", "SetThreadSelectedCpuSetMasks")
Interceptor.attach(SetThreadSelectedCpuSetMasks, {onLeave: function (args) {send("SetThreadSelectedCpuSetMasks");}});

var SetThreadSelectedCpuSets = Module.findExportByName("kernel32.dll", "SetThreadSelectedCpuSets")
Interceptor.attach(SetThreadSelectedCpuSets, {onLeave: function (args) {send("SetThreadSelectedCpuSets");}});

var SetThreadStackGuarantee = Module.findExportByName("kernel32.dll", "SetThreadStackGuarantee")
Interceptor.attach(SetThreadStackGuarantee, {onLeave: function (args) {send("SetThreadStackGuarantee");}});

var SetThreadToken = Module.findExportByName("kernel32.dll", "SetThreadToken")
Interceptor.attach(SetThreadToken, {onLeave: function (args) {send("SetThreadToken");}});

var SetThreadUILanguage = Module.findExportByName("kernel32.dll", "SetThreadUILanguage")
Interceptor.attach(SetThreadUILanguage, {onLeave: function (args) {send("SetThreadUILanguage");}});

var SetThreadpoolStackInformation = Module.findExportByName("kernel32.dll", "SetThreadpoolStackInformation")
Interceptor.attach(SetThreadpoolStackInformation, {onLeave: function (args) {send("SetThreadpoolStackInformation");}});

var SetThreadpoolThreadMaximum = Module.findExportByName("kernel32.dll", "SetThreadpoolThreadMaximum")
Interceptor.attach(SetThreadpoolThreadMaximum, {onLeave: function (args) {send("SetThreadpoolThreadMaximum");}});

var SetThreadpoolThreadMinimum = Module.findExportByName("kernel32.dll", "SetThreadpoolThreadMinimum")
Interceptor.attach(SetThreadpoolThreadMinimum, {onLeave: function (args) {send("SetThreadpoolThreadMinimum");}});

var SetThreadpoolTimer = Module.findExportByName("kernel32.dll", "SetThreadpoolTimer")
Interceptor.attach(SetThreadpoolTimer, {onLeave: function (args) {send("SetThreadpoolTimer");}});

var SetThreadpoolTimerEx = Module.findExportByName("kernel32.dll", "SetThreadpoolTimerEx")
Interceptor.attach(SetThreadpoolTimerEx, {onLeave: function (args) {send("SetThreadpoolTimerEx");}});

var SetThreadpoolWait = Module.findExportByName("kernel32.dll", "SetThreadpoolWait")
Interceptor.attach(SetThreadpoolWait, {onLeave: function (args) {send("SetThreadpoolWait");}});

var SetThreadpoolWaitEx = Module.findExportByName("kernel32.dll", "SetThreadpoolWaitEx")
Interceptor.attach(SetThreadpoolWaitEx, {onLeave: function (args) {send("SetThreadpoolWaitEx");}});

var SetTimeZoneInformation = Module.findExportByName("kernel32.dll", "SetTimeZoneInformation")
Interceptor.attach(SetTimeZoneInformation, {onLeave: function (args) {send("SetTimeZoneInformation");}});

var SetTimerQueueTimer = Module.findExportByName("kernel32.dll", "SetTimerQueueTimer")
Interceptor.attach(SetTimerQueueTimer, {onLeave: function (args) {send("SetTimerQueueTimer");}});

var SetUmsThreadInformation = Module.findExportByName("kernel32.dll", "SetUmsThreadInformation")
Interceptor.attach(SetUmsThreadInformation, {onLeave: function (args) {send("SetUmsThreadInformation");}});

var SetUnhandledExceptionFilter = Module.findExportByName("kernel32.dll", "SetUnhandledExceptionFilter")
Interceptor.attach(SetUnhandledExceptionFilter, {onLeave: function (args) {send("SetUnhandledExceptionFilter");}});

var SetUserGeoID = Module.findExportByName("kernel32.dll", "SetUserGeoID")
Interceptor.attach(SetUserGeoID, {onLeave: function (args) {send("SetUserGeoID");}});

var SetUserGeoName = Module.findExportByName("kernel32.dll", "SetUserGeoName")
Interceptor.attach(SetUserGeoName, {onLeave: function (args) {send("SetUserGeoName");}});

var SetVDMCurrentDirectories = Module.findExportByName("kernel32.dll", "SetVDMCurrentDirectories")
Interceptor.attach(SetVDMCurrentDirectories, {onLeave: function (args) {send("SetVDMCurrentDirectories");}});

var SetVolumeLabelA = Module.findExportByName("kernel32.dll", "SetVolumeLabelA")
Interceptor.attach(SetVolumeLabelA, {onLeave: function (args) {send("SetVolumeLabelA");}});

var SetVolumeLabelW = Module.findExportByName("kernel32.dll", "SetVolumeLabelW")
Interceptor.attach(SetVolumeLabelW, {onLeave: function (args) {send("SetVolumeLabelW");}});

var SetVolumeMountPointA = Module.findExportByName("kernel32.dll", "SetVolumeMountPointA")
Interceptor.attach(SetVolumeMountPointA, {onLeave: function (args) {send("SetVolumeMountPointA");}});

var SetVolumeMountPointW = Module.findExportByName("kernel32.dll", "SetVolumeMountPointW")
Interceptor.attach(SetVolumeMountPointW, {onLeave: function (args) {send("SetVolumeMountPointW");}});

var SetVolumeMountPointWStub = Module.findExportByName("kernel32.dll", "SetVolumeMountPointWStub")
Interceptor.attach(SetVolumeMountPointWStub, {onLeave: function (args) {send("SetVolumeMountPointWStub");}});

var SetWaitableTimer = Module.findExportByName("kernel32.dll", "SetWaitableTimer")
Interceptor.attach(SetWaitableTimer, {onLeave: function (args) {send("SetWaitableTimer");}});

var SetWaitableTimerEx = Module.findExportByName("kernel32.dll", "SetWaitableTimerEx")
Interceptor.attach(SetWaitableTimerEx, {onLeave: function (args) {send("SetWaitableTimerEx");}});

var SetXStateFeaturesMask = Module.findExportByName("kernel32.dll", "SetXStateFeaturesMask")
Interceptor.attach(SetXStateFeaturesMask, {onLeave: function (args) {send("SetXStateFeaturesMask");}});

var SetupComm = Module.findExportByName("kernel32.dll", "SetupComm")
Interceptor.attach(SetupComm, {onLeave: function (args) {send("SetupComm");}});

var ShowConsoleCursor = Module.findExportByName("kernel32.dll", "ShowConsoleCursor")
Interceptor.attach(ShowConsoleCursor, {onLeave: function (args) {send("ShowConsoleCursor");}});

var SignalObjectAndWait = Module.findExportByName("kernel32.dll", "SignalObjectAndWait")
Interceptor.attach(SignalObjectAndWait, {onLeave: function (args) {send("SignalObjectAndWait");}});

var SizeofResource = Module.findExportByName("kernel32.dll", "SizeofResource")
Interceptor.attach(SizeofResource, {onLeave: function (args) {send("SizeofResource");}});

var Sleep = Module.findExportByName("kernel32.dll", "Sleep")
Interceptor.attach(Sleep, {onLeave: function (args) {send("Sleep");}});

var SleepConditionVariableCS = Module.findExportByName("kernel32.dll", "SleepConditionVariableCS")
Interceptor.attach(SleepConditionVariableCS, {onLeave: function (args) {send("SleepConditionVariableCS");}});

var SleepConditionVariableSRW = Module.findExportByName("kernel32.dll", "SleepConditionVariableSRW")
Interceptor.attach(SleepConditionVariableSRW, {onLeave: function (args) {send("SleepConditionVariableSRW");}});

var SleepEx = Module.findExportByName("kernel32.dll", "SleepEx")
Interceptor.attach(SleepEx, {onLeave: function (args) {send("SleepEx");}});

var SortCloseHandle = Module.findExportByName("kernel32.dll", "SortCloseHandle")
Interceptor.attach(SortCloseHandle, {onLeave: function (args) {send("SortCloseHandle");}});

var SortGetHandle = Module.findExportByName("kernel32.dll", "SortGetHandle")
Interceptor.attach(SortGetHandle, {onLeave: function (args) {send("SortGetHandle");}});

var StartThreadpoolIo = Module.findExportByName("kernel32.dll", "StartThreadpoolIo")
Interceptor.attach(StartThreadpoolIo, {onLeave: function (args) {send("StartThreadpoolIo");}});

var SubmitIoRing = Module.findExportByName("kernel32.dll", "SubmitIoRing")
Interceptor.attach(SubmitIoRing, {onLeave: function (args) {send("SubmitIoRing");}});

var SubmitThreadpoolWork = Module.findExportByName("kernel32.dll", "SubmitThreadpoolWork")
Interceptor.attach(SubmitThreadpoolWork, {onLeave: function (args) {send("SubmitThreadpoolWork");}});

var SuspendThread = Module.findExportByName("kernel32.dll", "SuspendThread")
Interceptor.attach(SuspendThread, {onLeave: function (args) {send("SuspendThread");}});

var SwitchToFiber = Module.findExportByName("kernel32.dll", "SwitchToFiber")
Interceptor.attach(SwitchToFiber, {onLeave: function (args) {send("SwitchToFiber");}});

var SwitchToThread = Module.findExportByName("kernel32.dll", "SwitchToThread")
Interceptor.attach(SwitchToThread, {onLeave: function (args) {send("SwitchToThread");}});

var SystemTimeToFileTime = Module.findExportByName("kernel32.dll", "SystemTimeToFileTime")
Interceptor.attach(SystemTimeToFileTime, {onLeave: function (args) {send("SystemTimeToFileTime");}});

var SystemTimeToTzSpecificLocalTime = Module.findExportByName("kernel32.dll", "SystemTimeToTzSpecificLocalTime")
Interceptor.attach(SystemTimeToTzSpecificLocalTime, {onLeave: function (args) {send("SystemTimeToTzSpecificLocalTime");}});

var SystemTimeToTzSpecificLocalTimeEx = Module.findExportByName("kernel32.dll", "SystemTimeToTzSpecificLocalTimeEx")
Interceptor.attach(SystemTimeToTzSpecificLocalTimeEx, {onLeave: function (args) {send("SystemTimeToTzSpecificLocalTimeEx");}});

var TerminateJobObject = Module.findExportByName("kernel32.dll", "TerminateJobObject")
Interceptor.attach(TerminateJobObject, {onLeave: function (args) {send("TerminateJobObject");}});

var TerminateProcess = Module.findExportByName("kernel32.dll", "TerminateProcess")
Interceptor.attach(TerminateProcess, {onLeave: function (args) {send("TerminateProcess");}});

var TerminateThread = Module.findExportByName("kernel32.dll", "TerminateThread")
Interceptor.attach(TerminateThread, {onLeave: function (args) {send("TerminateThread");}});

var TermsrvAppInstallMode = Module.findExportByName("kernel32.dll", "TermsrvAppInstallMode")
Interceptor.attach(TermsrvAppInstallMode, {onLeave: function (args) {send("TermsrvAppInstallMode");}});

var TermsrvConvertSysRootToUserDir = Module.findExportByName("kernel32.dll", "TermsrvConvertSysRootToUserDir")
Interceptor.attach(TermsrvConvertSysRootToUserDir, {onLeave: function (args) {send("TermsrvConvertSysRootToUserDir");}});

var TermsrvCreateRegEntry = Module.findExportByName("kernel32.dll", "TermsrvCreateRegEntry")
Interceptor.attach(TermsrvCreateRegEntry, {onLeave: function (args) {send("TermsrvCreateRegEntry");}});

var TermsrvDeleteKey = Module.findExportByName("kernel32.dll", "TermsrvDeleteKey")
Interceptor.attach(TermsrvDeleteKey, {onLeave: function (args) {send("TermsrvDeleteKey");}});

var TermsrvDeleteValue = Module.findExportByName("kernel32.dll", "TermsrvDeleteValue")
Interceptor.attach(TermsrvDeleteValue, {onLeave: function (args) {send("TermsrvDeleteValue");}});

var TermsrvGetPreSetValue = Module.findExportByName("kernel32.dll", "TermsrvGetPreSetValue")
Interceptor.attach(TermsrvGetPreSetValue, {onLeave: function (args) {send("TermsrvGetPreSetValue");}});

var TermsrvGetWindowsDirectoryA = Module.findExportByName("kernel32.dll", "TermsrvGetWindowsDirectoryA")
Interceptor.attach(TermsrvGetWindowsDirectoryA, {onLeave: function (args) {send("TermsrvGetWindowsDirectoryA");}});

var TermsrvGetWindowsDirectoryW = Module.findExportByName("kernel32.dll", "TermsrvGetWindowsDirectoryW")
Interceptor.attach(TermsrvGetWindowsDirectoryW, {onLeave: function (args) {send("TermsrvGetWindowsDirectoryW");}});

var TermsrvOpenRegEntry = Module.findExportByName("kernel32.dll", "TermsrvOpenRegEntry")
Interceptor.attach(TermsrvOpenRegEntry, {onLeave: function (args) {send("TermsrvOpenRegEntry");}});

var TermsrvOpenUserClasses = Module.findExportByName("kernel32.dll", "TermsrvOpenUserClasses")
Interceptor.attach(TermsrvOpenUserClasses, {onLeave: function (args) {send("TermsrvOpenUserClasses");}});

var TermsrvRestoreKey = Module.findExportByName("kernel32.dll", "TermsrvRestoreKey")
Interceptor.attach(TermsrvRestoreKey, {onLeave: function (args) {send("TermsrvRestoreKey");}});

var TermsrvSetKeySecurity = Module.findExportByName("kernel32.dll", "TermsrvSetKeySecurity")
Interceptor.attach(TermsrvSetKeySecurity, {onLeave: function (args) {send("TermsrvSetKeySecurity");}});

var TermsrvSetValueKey = Module.findExportByName("kernel32.dll", "TermsrvSetValueKey")
Interceptor.attach(TermsrvSetValueKey, {onLeave: function (args) {send("TermsrvSetValueKey");}});

var TermsrvSyncUserIniFileExt = Module.findExportByName("kernel32.dll", "TermsrvSyncUserIniFileExt")
Interceptor.attach(TermsrvSyncUserIniFileExt, {onLeave: function (args) {send("TermsrvSyncUserIniFileExt");}});

var Thread32First = Module.findExportByName("kernel32.dll", "Thread32First")
Interceptor.attach(Thread32First, {onLeave: function (args) {send("Thread32First");}});

var Thread32Next = Module.findExportByName("kernel32.dll", "Thread32Next")
Interceptor.attach(Thread32Next, {onLeave: function (args) {send("Thread32Next");}});

var TlsAlloc = Module.findExportByName("kernel32.dll", "TlsAlloc")
Interceptor.attach(TlsAlloc, {onLeave: function (args) {send("TlsAlloc");}});

var TlsFree = Module.findExportByName("kernel32.dll", "TlsFree")
Interceptor.attach(TlsFree, {onLeave: function (args) {send("TlsFree");}});

var TlsGetValue = Module.findExportByName("kernel32.dll", "TlsGetValue")
Interceptor.attach(TlsGetValue, {onLeave: function (args) {send("TlsGetValue");}});

var TlsSetValue = Module.findExportByName("kernel32.dll", "TlsSetValue")
Interceptor.attach(TlsSetValue, {onLeave: function (args) {send("TlsSetValue");}});

var Toolhelp32ReadProcessMemory = Module.findExportByName("kernel32.dll", "Toolhelp32ReadProcessMemory")
Interceptor.attach(Toolhelp32ReadProcessMemory, {onLeave: function (args) {send("Toolhelp32ReadProcessMemory");}});

var TransactNamedPipe = Module.findExportByName("kernel32.dll", "TransactNamedPipe")
Interceptor.attach(TransactNamedPipe, {onLeave: function (args) {send("TransactNamedPipe");}});

var TransmitCommChar = Module.findExportByName("kernel32.dll", "TransmitCommChar")
Interceptor.attach(TransmitCommChar, {onLeave: function (args) {send("TransmitCommChar");}});

var TryAcquireSRWLockExclusive = Module.findExportByName("kernel32.dll", "TryAcquireSRWLockExclusive")
Interceptor.attach(TryAcquireSRWLockExclusive, {onLeave: function (args) {send("TryAcquireSRWLockExclusive");}});

var TryAcquireSRWLockShared = Module.findExportByName("kernel32.dll", "TryAcquireSRWLockShared")
Interceptor.attach(TryAcquireSRWLockShared, {onLeave: function (args) {send("TryAcquireSRWLockShared");}});

var TryEnterCriticalSection = Module.findExportByName("kernel32.dll", "TryEnterCriticalSection")
Interceptor.attach(TryEnterCriticalSection, {onLeave: function (args) {send("TryEnterCriticalSection");}});

var TrySubmitThreadpoolCallback = Module.findExportByName("kernel32.dll", "TrySubmitThreadpoolCallback")
Interceptor.attach(TrySubmitThreadpoolCallback, {onLeave: function (args) {send("TrySubmitThreadpoolCallback");}});

var TzSpecificLocalTimeToSystemTime = Module.findExportByName("kernel32.dll", "TzSpecificLocalTimeToSystemTime")
Interceptor.attach(TzSpecificLocalTimeToSystemTime, {onLeave: function (args) {send("TzSpecificLocalTimeToSystemTime");}});

var TzSpecificLocalTimeToSystemTimeEx = Module.findExportByName("kernel32.dll", "TzSpecificLocalTimeToSystemTimeEx")
Interceptor.attach(TzSpecificLocalTimeToSystemTimeEx, {onLeave: function (args) {send("TzSpecificLocalTimeToSystemTimeEx");}});

var UTRegister = Module.findExportByName("kernel32.dll", "UTRegister")
Interceptor.attach(UTRegister, {onLeave: function (args) {send("UTRegister");}});

var UTUnRegister = Module.findExportByName("kernel32.dll", "UTUnRegister")
Interceptor.attach(UTUnRegister, {onLeave: function (args) {send("UTUnRegister");}});

var UmsThreadYield = Module.findExportByName("kernel32.dll", "UmsThreadYield")
Interceptor.attach(UmsThreadYield, {onLeave: function (args) {send("UmsThreadYield");}});

var UnhandledExceptionFilter = Module.findExportByName("kernel32.dll", "UnhandledExceptionFilter")
Interceptor.attach(UnhandledExceptionFilter, {onLeave: function (args) {send("UnhandledExceptionFilter");}});

var UnlockFile = Module.findExportByName("kernel32.dll", "UnlockFile")
Interceptor.attach(UnlockFile, {onLeave: function (args) {send("UnlockFile");}});

var UnlockFileEx = Module.findExportByName("kernel32.dll", "UnlockFileEx")
Interceptor.attach(UnlockFileEx, {onLeave: function (args) {send("UnlockFileEx");}});

var UnmapViewOfFile = Module.findExportByName("kernel32.dll", "UnmapViewOfFile")
Interceptor.attach(UnmapViewOfFile, {onLeave: function (args) {send("UnmapViewOfFile");}});

var UnmapViewOfFileEx = Module.findExportByName("kernel32.dll", "UnmapViewOfFileEx")
Interceptor.attach(UnmapViewOfFileEx, {onLeave: function (args) {send("UnmapViewOfFileEx");}});

var UnregisterApplicationRecoveryCallback = Module.findExportByName("kernel32.dll", "UnregisterApplicationRecoveryCallback")
Interceptor.attach(UnregisterApplicationRecoveryCallback, {onLeave: function (args) {send("UnregisterApplicationRecoveryCallback");}});

var UnregisterApplicationRestart = Module.findExportByName("kernel32.dll", "UnregisterApplicationRestart")
Interceptor.attach(UnregisterApplicationRestart, {onLeave: function (args) {send("UnregisterApplicationRestart");}});

var UnregisterBadMemoryNotification = Module.findExportByName("kernel32.dll", "UnregisterBadMemoryNotification")
Interceptor.attach(UnregisterBadMemoryNotification, {onLeave: function (args) {send("UnregisterBadMemoryNotification");}});

var UnregisterConsoleIME = Module.findExportByName("kernel32.dll", "UnregisterConsoleIME")
Interceptor.attach(UnregisterConsoleIME, {onLeave: function (args) {send("UnregisterConsoleIME");}});

var UnregisterWait = Module.findExportByName("kernel32.dll", "UnregisterWait")
Interceptor.attach(UnregisterWait, {onLeave: function (args) {send("UnregisterWait");}});

var UnregisterWaitEx = Module.findExportByName("kernel32.dll", "UnregisterWaitEx")
Interceptor.attach(UnregisterWaitEx, {onLeave: function (args) {send("UnregisterWaitEx");}});

var UnregisterWaitUntilOOBECompleted = Module.findExportByName("kernel32.dll", "UnregisterWaitUntilOOBECompleted")
Interceptor.attach(UnregisterWaitUntilOOBECompleted, {onLeave: function (args) {send("UnregisterWaitUntilOOBECompleted");}});

var UpdateCalendarDayOfWeek = Module.findExportByName("kernel32.dll", "UpdateCalendarDayOfWeek")
Interceptor.attach(UpdateCalendarDayOfWeek, {onLeave: function (args) {send("UpdateCalendarDayOfWeek");}});

var UpdateProcThreadAttribute = Module.findExportByName("kernel32.dll", "UpdateProcThreadAttribute")
Interceptor.attach(UpdateProcThreadAttribute, {onLeave: function (args) {send("UpdateProcThreadAttribute");}});

var UpdateResourceA = Module.findExportByName("kernel32.dll", "UpdateResourceA")
Interceptor.attach(UpdateResourceA, {onLeave: function (args) {send("UpdateResourceA");}});

var UpdateResourceW = Module.findExportByName("kernel32.dll", "UpdateResourceW")
Interceptor.attach(UpdateResourceW, {onLeave: function (args) {send("UpdateResourceW");}});

var VDMConsoleOperation = Module.findExportByName("kernel32.dll", "VDMConsoleOperation")
Interceptor.attach(VDMConsoleOperation, {onLeave: function (args) {send("VDMConsoleOperation");}});

var VDMOperationStarted = Module.findExportByName("kernel32.dll", "VDMOperationStarted")
Interceptor.attach(VDMOperationStarted, {onLeave: function (args) {send("VDMOperationStarted");}});

var VerLanguageNameA = Module.findExportByName("kernel32.dll", "VerLanguageNameA")
Interceptor.attach(VerLanguageNameA, {onLeave: function (args) {send("VerLanguageNameA");}});

var VerLanguageNameW = Module.findExportByName("kernel32.dll", "VerLanguageNameW")
Interceptor.attach(VerLanguageNameW, {onLeave: function (args) {send("VerLanguageNameW");}});

var VerSetConditionMask = Module.findExportByName("kernel32.dll", "VerSetConditionMask")
Interceptor.attach(VerSetConditionMask, {onLeave: function (args) {send("VerSetConditionMask");}});

var VerifyConsoleIoHandle = Module.findExportByName("kernel32.dll", "VerifyConsoleIoHandle")
Interceptor.attach(VerifyConsoleIoHandle, {onLeave: function (args) {send("VerifyConsoleIoHandle");}});

var VerifyScripts = Module.findExportByName("kernel32.dll", "VerifyScripts")
Interceptor.attach(VerifyScripts, {onLeave: function (args) {send("VerifyScripts");}});

var VerifyVersionInfoA = Module.findExportByName("kernel32.dll", "VerifyVersionInfoA")
Interceptor.attach(VerifyVersionInfoA, {onLeave: function (args) {send("VerifyVersionInfoA");}});

var VerifyVersionInfoW = Module.findExportByName("kernel32.dll", "VerifyVersionInfoW")
Interceptor.attach(VerifyVersionInfoW, {onLeave: function (args) {send("VerifyVersionInfoW");}});

var VirtualAlloc = Module.findExportByName("kernel32.dll", "VirtualAlloc")
Interceptor.attach(VirtualAlloc, {onLeave: function (args) {send("VirtualAlloc");}});

var VirtualAllocEx = Module.findExportByName("kernel32.dll", "VirtualAllocEx")
Interceptor.attach(VirtualAllocEx, {onLeave: function (args) {send("VirtualAllocEx");}});

var VirtualAllocExNuma = Module.findExportByName("kernel32.dll", "VirtualAllocExNuma")
Interceptor.attach(VirtualAllocExNuma, {onLeave: function (args) {send("VirtualAllocExNuma");}});

var VirtualFree = Module.findExportByName("kernel32.dll", "VirtualFree")
Interceptor.attach(VirtualFree, {onLeave: function (args) {send("VirtualFree");}});

var VirtualFreeEx = Module.findExportByName("kernel32.dll", "VirtualFreeEx")
Interceptor.attach(VirtualFreeEx, {onLeave: function (args) {send("VirtualFreeEx");}});

var VirtualLock = Module.findExportByName("kernel32.dll", "VirtualLock")
Interceptor.attach(VirtualLock, {onLeave: function (args) {send("VirtualLock");}});

var VirtualProtect = Module.findExportByName("kernel32.dll", "VirtualProtect")
Interceptor.attach(VirtualProtect, {onLeave: function (args) {send("VirtualProtect");}});

var VirtualProtectEx = Module.findExportByName("kernel32.dll", "VirtualProtectEx")
Interceptor.attach(VirtualProtectEx, {onLeave: function (args) {send("VirtualProtectEx");}});

var VirtualQuery = Module.findExportByName("kernel32.dll", "VirtualQuery")
Interceptor.attach(VirtualQuery, {onLeave: function (args) {send("VirtualQuery");}});

var VirtualQueryEx = Module.findExportByName("kernel32.dll", "VirtualQueryEx")
Interceptor.attach(VirtualQueryEx, {onLeave: function (args) {send("VirtualQueryEx");}});

var VirtualUnlock = Module.findExportByName("kernel32.dll", "VirtualUnlock")
Interceptor.attach(VirtualUnlock, {onLeave: function (args) {send("VirtualUnlock");}});

var WTSGetActiveConsoleSessionId = Module.findExportByName("kernel32.dll", "WTSGetActiveConsoleSessionId")
Interceptor.attach(WTSGetActiveConsoleSessionId, {onLeave: function (args) {send("WTSGetActiveConsoleSessionId");}});

var WaitCommEvent = Module.findExportByName("kernel32.dll", "WaitCommEvent")
Interceptor.attach(WaitCommEvent, {onLeave: function (args) {send("WaitCommEvent");}});

var WaitForDebugEvent = Module.findExportByName("kernel32.dll", "WaitForDebugEvent")
Interceptor.attach(WaitForDebugEvent, {onLeave: function (args) {send("WaitForDebugEvent");}});

var WaitForDebugEventEx = Module.findExportByName("kernel32.dll", "WaitForDebugEventEx")
Interceptor.attach(WaitForDebugEventEx, {onLeave: function (args) {send("WaitForDebugEventEx");}});

var WaitForMultipleObjects = Module.findExportByName("kernel32.dll", "WaitForMultipleObjects")
Interceptor.attach(WaitForMultipleObjects, {onLeave: function (args) {send("WaitForMultipleObjects");}});

var WaitForMultipleObjectsEx = Module.findExportByName("kernel32.dll", "WaitForMultipleObjectsEx")
Interceptor.attach(WaitForMultipleObjectsEx, {onLeave: function (args) {send("WaitForMultipleObjectsEx");}});

var WaitForSingleObject = Module.findExportByName("kernel32.dll", "WaitForSingleObject")
Interceptor.attach(WaitForSingleObject, {onLeave: function (args) {send("WaitForSingleObject");}});

var WaitForSingleObjectEx = Module.findExportByName("kernel32.dll", "WaitForSingleObjectEx")
Interceptor.attach(WaitForSingleObjectEx, {onLeave: function (args) {send("WaitForSingleObjectEx");}});

var WaitForThreadpoolIoCallbacks = Module.findExportByName("kernel32.dll", "WaitForThreadpoolIoCallbacks")
Interceptor.attach(WaitForThreadpoolIoCallbacks, {onLeave: function (args) {send("WaitForThreadpoolIoCallbacks");}});

var WaitForThreadpoolTimerCallbacks = Module.findExportByName("kernel32.dll", "WaitForThreadpoolTimerCallbacks")
Interceptor.attach(WaitForThreadpoolTimerCallbacks, {onLeave: function (args) {send("WaitForThreadpoolTimerCallbacks");}});

var WaitForThreadpoolWaitCallbacks = Module.findExportByName("kernel32.dll", "WaitForThreadpoolWaitCallbacks")
Interceptor.attach(WaitForThreadpoolWaitCallbacks, {onLeave: function (args) {send("WaitForThreadpoolWaitCallbacks");}});

var WaitForThreadpoolWorkCallbacks = Module.findExportByName("kernel32.dll", "WaitForThreadpoolWorkCallbacks")
Interceptor.attach(WaitForThreadpoolWorkCallbacks, {onLeave: function (args) {send("WaitForThreadpoolWorkCallbacks");}});

var WaitNamedPipeA = Module.findExportByName("kernel32.dll", "WaitNamedPipeA")
Interceptor.attach(WaitNamedPipeA, {onLeave: function (args) {send("WaitNamedPipeA");}});

var WaitNamedPipeW = Module.findExportByName("kernel32.dll", "WaitNamedPipeW")
Interceptor.attach(WaitNamedPipeW, {onLeave: function (args) {send("WaitNamedPipeW");}});

var WakeAllConditionVariable = Module.findExportByName("kernel32.dll", "WakeAllConditionVariable")
Interceptor.attach(WakeAllConditionVariable, {onLeave: function (args) {send("WakeAllConditionVariable");}});

var WakeConditionVariable = Module.findExportByName("kernel32.dll", "WakeConditionVariable")
Interceptor.attach(WakeConditionVariable, {onLeave: function (args) {send("WakeConditionVariable");}});

var WerGetFlags = Module.findExportByName("kernel32.dll", "WerGetFlags")
Interceptor.attach(WerGetFlags, {onLeave: function (args) {send("WerGetFlags");}});

var WerGetFlagsWorker = Module.findExportByName("kernel32.dll", "WerGetFlagsWorker")
Interceptor.attach(WerGetFlagsWorker, {onLeave: function (args) {send("WerGetFlagsWorker");}});

var WerRegisterAdditionalProcess = Module.findExportByName("kernel32.dll", "WerRegisterAdditionalProcess")
Interceptor.attach(WerRegisterAdditionalProcess, {onLeave: function (args) {send("WerRegisterAdditionalProcess");}});

var WerRegisterAppLocalDump = Module.findExportByName("kernel32.dll", "WerRegisterAppLocalDump")
Interceptor.attach(WerRegisterAppLocalDump, {onLeave: function (args) {send("WerRegisterAppLocalDump");}});

var WerRegisterCustomMetadata = Module.findExportByName("kernel32.dll", "WerRegisterCustomMetadata")
Interceptor.attach(WerRegisterCustomMetadata, {onLeave: function (args) {send("WerRegisterCustomMetadata");}});

var WerRegisterExcludedMemoryBlock = Module.findExportByName("kernel32.dll", "WerRegisterExcludedMemoryBlock")
Interceptor.attach(WerRegisterExcludedMemoryBlock, {onLeave: function (args) {send("WerRegisterExcludedMemoryBlock");}});

var WerRegisterFile = Module.findExportByName("kernel32.dll", "WerRegisterFile")
Interceptor.attach(WerRegisterFile, {onLeave: function (args) {send("WerRegisterFile");}});

var WerRegisterFileWorker = Module.findExportByName("kernel32.dll", "WerRegisterFileWorker")
Interceptor.attach(WerRegisterFileWorker, {onLeave: function (args) {send("WerRegisterFileWorker");}});

var WerRegisterMemoryBlock = Module.findExportByName("kernel32.dll", "WerRegisterMemoryBlock")
Interceptor.attach(WerRegisterMemoryBlock, {onLeave: function (args) {send("WerRegisterMemoryBlock");}});

var WerRegisterMemoryBlockWorker = Module.findExportByName("kernel32.dll", "WerRegisterMemoryBlockWorker")
Interceptor.attach(WerRegisterMemoryBlockWorker, {onLeave: function (args) {send("WerRegisterMemoryBlockWorker");}});

var WerRegisterRuntimeExceptionModule = Module.findExportByName("kernel32.dll", "WerRegisterRuntimeExceptionModule")
Interceptor.attach(WerRegisterRuntimeExceptionModule, {onLeave: function (args) {send("WerRegisterRuntimeExceptionModule");}});

var WerRegisterRuntimeExceptionModuleWorker = Module.findExportByName("kernel32.dll", "WerRegisterRuntimeExceptionModuleWorker")
Interceptor.attach(WerRegisterRuntimeExceptionModuleWorker, {onLeave: function (args) {send("WerRegisterRuntimeExceptionModuleWorker");}});

var WerSetFlags = Module.findExportByName("kernel32.dll", "WerSetFlags")
Interceptor.attach(WerSetFlags, {onLeave: function (args) {send("WerSetFlags");}});

var WerSetFlagsWorker = Module.findExportByName("kernel32.dll", "WerSetFlagsWorker")
Interceptor.attach(WerSetFlagsWorker, {onLeave: function (args) {send("WerSetFlagsWorker");}});

var WerUnregisterAdditionalProcess = Module.findExportByName("kernel32.dll", "WerUnregisterAdditionalProcess")
Interceptor.attach(WerUnregisterAdditionalProcess, {onLeave: function (args) {send("WerUnregisterAdditionalProcess");}});

var WerUnregisterAppLocalDump = Module.findExportByName("kernel32.dll", "WerUnregisterAppLocalDump")
Interceptor.attach(WerUnregisterAppLocalDump, {onLeave: function (args) {send("WerUnregisterAppLocalDump");}});

var WerUnregisterCustomMetadata = Module.findExportByName("kernel32.dll", "WerUnregisterCustomMetadata")
Interceptor.attach(WerUnregisterCustomMetadata, {onLeave: function (args) {send("WerUnregisterCustomMetadata");}});

var WerUnregisterExcludedMemoryBlock = Module.findExportByName("kernel32.dll", "WerUnregisterExcludedMemoryBlock")
Interceptor.attach(WerUnregisterExcludedMemoryBlock, {onLeave: function (args) {send("WerUnregisterExcludedMemoryBlock");}});

var WerUnregisterFile = Module.findExportByName("kernel32.dll", "WerUnregisterFile")
Interceptor.attach(WerUnregisterFile, {onLeave: function (args) {send("WerUnregisterFile");}});

var WerUnregisterFileWorker = Module.findExportByName("kernel32.dll", "WerUnregisterFileWorker")
Interceptor.attach(WerUnregisterFileWorker, {onLeave: function (args) {send("WerUnregisterFileWorker");}});

var WerUnregisterMemoryBlock = Module.findExportByName("kernel32.dll", "WerUnregisterMemoryBlock")
Interceptor.attach(WerUnregisterMemoryBlock, {onLeave: function (args) {send("WerUnregisterMemoryBlock");}});

var WerUnregisterMemoryBlockWorker = Module.findExportByName("kernel32.dll", "WerUnregisterMemoryBlockWorker")
Interceptor.attach(WerUnregisterMemoryBlockWorker, {onLeave: function (args) {send("WerUnregisterMemoryBlockWorker");}});

var WerUnregisterRuntimeExceptionModule = Module.findExportByName("kernel32.dll", "WerUnregisterRuntimeExceptionModule")
Interceptor.attach(WerUnregisterRuntimeExceptionModule, {onLeave: function (args) {send("WerUnregisterRuntimeExceptionModule");}});

var WerUnregisterRuntimeExceptionModuleWorker = Module.findExportByName("kernel32.dll", "WerUnregisterRuntimeExceptionModuleWorker")
Interceptor.attach(WerUnregisterRuntimeExceptionModuleWorker, {onLeave: function (args) {send("WerUnregisterRuntimeExceptionModuleWorker");}});

var WerpGetDebugger = Module.findExportByName("kernel32.dll", "WerpGetDebugger")
Interceptor.attach(WerpGetDebugger, {onLeave: function (args) {send("WerpGetDebugger");}});

var WerpInitiateRemoteRecovery = Module.findExportByName("kernel32.dll", "WerpInitiateRemoteRecovery")
Interceptor.attach(WerpInitiateRemoteRecovery, {onLeave: function (args) {send("WerpInitiateRemoteRecovery");}});

var WerpLaunchAeDebug = Module.findExportByName("kernel32.dll", "WerpLaunchAeDebug")
Interceptor.attach(WerpLaunchAeDebug, {onLeave: function (args) {send("WerpLaunchAeDebug");}});

var WerpNotifyLoadStringResourceWorker = Module.findExportByName("kernel32.dll", "WerpNotifyLoadStringResourceWorker")
Interceptor.attach(WerpNotifyLoadStringResourceWorker, {onLeave: function (args) {send("WerpNotifyLoadStringResourceWorker");}});

var WerpNotifyUseStringResourceWorker = Module.findExportByName("kernel32.dll", "WerpNotifyUseStringResourceWorker")
Interceptor.attach(WerpNotifyUseStringResourceWorker, {onLeave: function (args) {send("WerpNotifyUseStringResourceWorker");}});

var WideCharToMultiByte = Module.findExportByName("kernel32.dll", "WideCharToMultiByte")
Interceptor.attach(WideCharToMultiByte, {onLeave: function (args) {send("WideCharToMultiByte");}});

var WinExec = Module.findExportByName("kernel32.dll", "WinExec")
Interceptor.attach(WinExec, {onLeave: function (args) {send("WinExec");}});

var Wow64DisableWow64FsRedirection = Module.findExportByName("kernel32.dll", "Wow64DisableWow64FsRedirection")
Interceptor.attach(Wow64DisableWow64FsRedirection, {onLeave: function (args) {send("Wow64DisableWow64FsRedirection");}});

var Wow64EnableWow64FsRedirection = Module.findExportByName("kernel32.dll", "Wow64EnableWow64FsRedirection")
Interceptor.attach(Wow64EnableWow64FsRedirection, {onLeave: function (args) {send("Wow64EnableWow64FsRedirection");}});

var Wow64GetThreadContext = Module.findExportByName("kernel32.dll", "Wow64GetThreadContext")
Interceptor.attach(Wow64GetThreadContext, {onLeave: function (args) {send("Wow64GetThreadContext");}});

var Wow64GetThreadSelectorEntry = Module.findExportByName("kernel32.dll", "Wow64GetThreadSelectorEntry")
Interceptor.attach(Wow64GetThreadSelectorEntry, {onLeave: function (args) {send("Wow64GetThreadSelectorEntry");}});

var Wow64RevertWow64FsRedirection = Module.findExportByName("kernel32.dll", "Wow64RevertWow64FsRedirection")
Interceptor.attach(Wow64RevertWow64FsRedirection, {onLeave: function (args) {send("Wow64RevertWow64FsRedirection");}});

var Wow64SetThreadContext = Module.findExportByName("kernel32.dll", "Wow64SetThreadContext")
Interceptor.attach(Wow64SetThreadContext, {onLeave: function (args) {send("Wow64SetThreadContext");}});

var Wow64SuspendThread = Module.findExportByName("kernel32.dll", "Wow64SuspendThread")
Interceptor.attach(Wow64SuspendThread, {onLeave: function (args) {send("Wow64SuspendThread");}});

var WriteConsoleA = Module.findExportByName("kernel32.dll", "WriteConsoleA")
Interceptor.attach(WriteConsoleA, {onLeave: function (args) {send("WriteConsoleA");}});

var WriteConsoleInputA = Module.findExportByName("kernel32.dll", "WriteConsoleInputA")
Interceptor.attach(WriteConsoleInputA, {onLeave: function (args) {send("WriteConsoleInputA");}});

var WriteConsoleInputVDMA = Module.findExportByName("kernel32.dll", "WriteConsoleInputVDMA")
Interceptor.attach(WriteConsoleInputVDMA, {onLeave: function (args) {send("WriteConsoleInputVDMA");}});

var WriteConsoleInputVDMW = Module.findExportByName("kernel32.dll", "WriteConsoleInputVDMW")
Interceptor.attach(WriteConsoleInputVDMW, {onLeave: function (args) {send("WriteConsoleInputVDMW");}});

var WriteConsoleInputW = Module.findExportByName("kernel32.dll", "WriteConsoleInputW")
Interceptor.attach(WriteConsoleInputW, {onLeave: function (args) {send("WriteConsoleInputW");}});

var WriteConsoleOutputA = Module.findExportByName("kernel32.dll", "WriteConsoleOutputA")
Interceptor.attach(WriteConsoleOutputA, {onLeave: function (args) {send("WriteConsoleOutputA");}});

var WriteConsoleOutputAttribute = Module.findExportByName("kernel32.dll", "WriteConsoleOutputAttribute")
Interceptor.attach(WriteConsoleOutputAttribute, {onLeave: function (args) {send("WriteConsoleOutputAttribute");}});

var WriteConsoleOutputCharacterA = Module.findExportByName("kernel32.dll", "WriteConsoleOutputCharacterA")
Interceptor.attach(WriteConsoleOutputCharacterA, {onLeave: function (args) {send("WriteConsoleOutputCharacterA");}});

var WriteConsoleOutputCharacterW = Module.findExportByName("kernel32.dll", "WriteConsoleOutputCharacterW")
Interceptor.attach(WriteConsoleOutputCharacterW, {onLeave: function (args) {send("WriteConsoleOutputCharacterW");}});

var WriteConsoleOutputW = Module.findExportByName("kernel32.dll", "WriteConsoleOutputW")
Interceptor.attach(WriteConsoleOutputW, {onLeave: function (args) {send("WriteConsoleOutputW");}});

var WriteConsoleW = Module.findExportByName("kernel32.dll", "WriteConsoleW")
Interceptor.attach(WriteConsoleW, {onLeave: function (args) {send("WriteConsoleW");}});

var WriteFile = Module.findExportByName("kernel32.dll", "WriteFile")
Interceptor.attach(WriteFile, {onLeave: function (args) {send("WriteFile");}});

var WriteFileEx = Module.findExportByName("kernel32.dll", "WriteFileEx")
Interceptor.attach(WriteFileEx, {onLeave: function (args) {send("WriteFileEx");}});

var WriteFileGather = Module.findExportByName("kernel32.dll", "WriteFileGather")
Interceptor.attach(WriteFileGather, {onLeave: function (args) {send("WriteFileGather");}});

var WritePrivateProfileSectionA = Module.findExportByName("kernel32.dll", "WritePrivateProfileSectionA")
Interceptor.attach(WritePrivateProfileSectionA, {onLeave: function (args) {send("WritePrivateProfileSectionA");}});

var WritePrivateProfileSectionW = Module.findExportByName("kernel32.dll", "WritePrivateProfileSectionW")
Interceptor.attach(WritePrivateProfileSectionW, {onLeave: function (args) {send("WritePrivateProfileSectionW");}});

var WritePrivateProfileStringA = Module.findExportByName("kernel32.dll", "WritePrivateProfileStringA")
Interceptor.attach(WritePrivateProfileStringA, {onLeave: function (args) {send("WritePrivateProfileStringA");}});

var WritePrivateProfileStringW = Module.findExportByName("kernel32.dll", "WritePrivateProfileStringW")
Interceptor.attach(WritePrivateProfileStringW, {onLeave: function (args) {send("WritePrivateProfileStringW");}});

var WritePrivateProfileStructA = Module.findExportByName("kernel32.dll", "WritePrivateProfileStructA")
Interceptor.attach(WritePrivateProfileStructA, {onLeave: function (args) {send("WritePrivateProfileStructA");}});

var WritePrivateProfileStructW = Module.findExportByName("kernel32.dll", "WritePrivateProfileStructW")
Interceptor.attach(WritePrivateProfileStructW, {onLeave: function (args) {send("WritePrivateProfileStructW");}});

var WriteProcessMemory = Module.findExportByName("kernel32.dll", "WriteProcessMemory")
Interceptor.attach(WriteProcessMemory, {onLeave: function (args) {send("WriteProcessMemory");}});

var WriteProfileSectionA = Module.findExportByName("kernel32.dll", "WriteProfileSectionA")
Interceptor.attach(WriteProfileSectionA, {onLeave: function (args) {send("WriteProfileSectionA");}});

var WriteProfileSectionW = Module.findExportByName("kernel32.dll", "WriteProfileSectionW")
Interceptor.attach(WriteProfileSectionW, {onLeave: function (args) {send("WriteProfileSectionW");}});

var WriteProfileStringA = Module.findExportByName("kernel32.dll", "WriteProfileStringA")
Interceptor.attach(WriteProfileStringA, {onLeave: function (args) {send("WriteProfileStringA");}});

var WriteProfileStringW = Module.findExportByName("kernel32.dll", "WriteProfileStringW")
Interceptor.attach(WriteProfileStringW, {onLeave: function (args) {send("WriteProfileStringW");}});

var WriteTapemark = Module.findExportByName("kernel32.dll", "WriteTapemark")
Interceptor.attach(WriteTapemark, {onLeave: function (args) {send("WriteTapemark");}});

var ZombifyActCtx = Module.findExportByName("kernel32.dll", "ZombifyActCtx")
Interceptor.attach(ZombifyActCtx, {onLeave: function (args) {send("ZombifyActCtx");}});

var ZombifyActCtxWorker = Module.findExportByName("kernel32.dll", "ZombifyActCtxWorker")
Interceptor.attach(ZombifyActCtxWorker, {onLeave: function (args) {send("ZombifyActCtxWorker");}});

var __C_specific_handler = Module.findExportByName("kernel32.dll", "__C_specific_handler")
Interceptor.attach(__C_specific_handler, {onLeave: function (args) {send("__C_specific_handler");}});

var __chkstk = Module.findExportByName("kernel32.dll", "__chkstk")
Interceptor.attach(__chkstk, {onLeave: function (args) {send("__chkstk");}});

var __misaligned_access = Module.findExportByName("kernel32.dll", "__misaligned_access")
Interceptor.attach(__misaligned_access, {onLeave: function (args) {send("__misaligned_access");}});

var _hread = Module.findExportByName("kernel32.dll", "_hread")
Interceptor.attach(_hread, {onLeave: function (args) {send("_hread");}});

var _hwrite = Module.findExportByName("kernel32.dll", "_hwrite")
Interceptor.attach(_hwrite, {onLeave: function (args) {send("_hwrite");}});

var _lclose = Module.findExportByName("kernel32.dll", "_lclose")
Interceptor.attach(_lclose, {onLeave: function (args) {send("_lclose");}});

var _lcreat = Module.findExportByName("kernel32.dll", "_lcreat")
Interceptor.attach(_lcreat, {onLeave: function (args) {send("_lcreat");}});

var _llseek = Module.findExportByName("kernel32.dll", "_llseek")
Interceptor.attach(_llseek, {onLeave: function (args) {send("_llseek");}});

var _local_unwind = Module.findExportByName("kernel32.dll", "_local_unwind")
Interceptor.attach(_local_unwind, {onLeave: function (args) {send("_local_unwind");}});

var _lopen = Module.findExportByName("kernel32.dll", "_lopen")
Interceptor.attach(_lopen, {onLeave: function (args) {send("_lopen");}});

var _lread = Module.findExportByName("kernel32.dll", "_lread")
Interceptor.attach(_lread, {onLeave: function (args) {send("_lread");}});

var _lwrite = Module.findExportByName("kernel32.dll", "_lwrite")
Interceptor.attach(_lwrite, {onLeave: function (args) {send("_lwrite");}});

var lstrcat = Module.findExportByName("kernel32.dll", "lstrcat")
Interceptor.attach(lstrcat, {onLeave: function (args) {send("lstrcat");}});

var lstrcatA = Module.findExportByName("kernel32.dll", "lstrcatA")
Interceptor.attach(lstrcatA, {onLeave: function (args) {send("lstrcatA");}});

var lstrcatW = Module.findExportByName("kernel32.dll", "lstrcatW")
Interceptor.attach(lstrcatW, {onLeave: function (args) {send("lstrcatW");}});

var lstrcmp = Module.findExportByName("kernel32.dll", "lstrcmp")
Interceptor.attach(lstrcmp, {onLeave: function (args) {send("lstrcmp");}});

var lstrcmpA = Module.findExportByName("kernel32.dll", "lstrcmpA")
Interceptor.attach(lstrcmpA, {onLeave: function (args) {send("lstrcmpA");}});

var lstrcmpW = Module.findExportByName("kernel32.dll", "lstrcmpW")
Interceptor.attach(lstrcmpW, {onLeave: function (args) {send("lstrcmpW");}});

var lstrcmpi = Module.findExportByName("kernel32.dll", "lstrcmpi")
Interceptor.attach(lstrcmpi, {onLeave: function (args) {send("lstrcmpi");}});

var lstrcmpiA = Module.findExportByName("kernel32.dll", "lstrcmpiA")
Interceptor.attach(lstrcmpiA, {onLeave: function (args) {send("lstrcmpiA");}});

var lstrcmpiW = Module.findExportByName("kernel32.dll", "lstrcmpiW")
Interceptor.attach(lstrcmpiW, {onLeave: function (args) {send("lstrcmpiW");}});

var lstrcpy = Module.findExportByName("kernel32.dll", "lstrcpy")
Interceptor.attach(lstrcpy, {onLeave: function (args) {send("lstrcpy");}});

var lstrcpyA = Module.findExportByName("kernel32.dll", "lstrcpyA")
Interceptor.attach(lstrcpyA, {onLeave: function (args) {send("lstrcpyA");}});

var lstrcpyW = Module.findExportByName("kernel32.dll", "lstrcpyW")
Interceptor.attach(lstrcpyW, {onLeave: function (args) {send("lstrcpyW");}});

var lstrcpyn = Module.findExportByName("kernel32.dll", "lstrcpyn")
Interceptor.attach(lstrcpyn, {onLeave: function (args) {send("lstrcpyn");}});

var lstrcpynA = Module.findExportByName("kernel32.dll", "lstrcpynA")
Interceptor.attach(lstrcpynA, {onLeave: function (args) {send("lstrcpynA");}});

var lstrcpynW = Module.findExportByName("kernel32.dll", "lstrcpynW")
Interceptor.attach(lstrcpynW, {onLeave: function (args) {send("lstrcpynW");}});

var lstrlen = Module.findExportByName("kernel32.dll", "lstrlen")
Interceptor.attach(lstrlen, {onLeave: function (args) {send("lstrlen");}});

var lstrlenA = Module.findExportByName("kernel32.dll", "lstrlenA")
Interceptor.attach(lstrlenA, {onLeave: function (args) {send("lstrlenA");}});

var lstrlenW = Module.findExportByName("kernel32.dll", "lstrlenW")
Interceptor.attach(lstrlenW, {onLeave: function (args) {send("lstrlenW");}});

var timeBeginPeriod = Module.findExportByName("kernel32.dll", "timeBeginPeriod")
Interceptor.attach(timeBeginPeriod, {onLeave: function (args) {send("timeBeginPeriod");}});

var timeEndPeriod = Module.findExportByName("kernel32.dll", "timeEndPeriod")
Interceptor.attach(timeEndPeriod, {onLeave: function (args) {send("timeEndPeriod");}});

var timeGetDevCaps = Module.findExportByName("kernel32.dll", "timeGetDevCaps")
Interceptor.attach(timeGetDevCaps, {onLeave: function (args) {send("timeGetDevCaps");}});

var timeGetSystemTime = Module.findExportByName("kernel32.dll", "timeGetSystemTime")
Interceptor.attach(timeGetSystemTime, {onLeave: function (args) {send("timeGetSystemTime");}});

var timeGetTime = Module.findExportByName("kernel32.dll", "timeGetTime")
Interceptor.attach(timeGetTime, {onLeave: function (args) {send("timeGetTime");}});

var uaw_lstrcmpW = Module.findExportByName("kernel32.dll", "uaw_lstrcmpW")
Interceptor.attach(uaw_lstrcmpW, {onLeave: function (args) {send("uaw_lstrcmpW");}});

var uaw_lstrcmpiW = Module.findExportByName("kernel32.dll", "uaw_lstrcmpiW")
Interceptor.attach(uaw_lstrcmpiW, {onLeave: function (args) {send("uaw_lstrcmpiW");}});

var uaw_lstrlenW = Module.findExportByName("kernel32.dll", "uaw_lstrlenW")
Interceptor.attach(uaw_lstrlenW, {onLeave: function (args) {send("uaw_lstrlenW");}});

var uaw_wcschr = Module.findExportByName("kernel32.dll", "uaw_wcschr")
Interceptor.attach(uaw_wcschr, {onLeave: function (args) {send("uaw_wcschr");}});

var uaw_wcscpy = Module.findExportByName("kernel32.dll", "uaw_wcscpy")
Interceptor.attach(uaw_wcscpy, {onLeave: function (args) {send("uaw_wcscpy");}});

var uaw_wcsicmp = Module.findExportByName("kernel32.dll", "uaw_wcsicmp")
Interceptor.attach(uaw_wcsicmp, {onLeave: function (args) {send("uaw_wcsicmp");}});

var uaw_wcslen = Module.findExportByName("kernel32.dll", "uaw_wcslen")
Interceptor.attach(uaw_wcslen, {onLeave: function (args) {send("uaw_wcslen");}});

var uaw_wcsrchr = Module.findExportByName("kernel32.dll", "uaw_wcsrchr")
Interceptor.attach(uaw_wcsrchr, {onLeave: function (args) {send("uaw_wcsrchr");}});

