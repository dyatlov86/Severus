var AdaptiveTimeout_ClearInterfaceSpecificConfiguration = Module.findExportByName("dnsapi.dll", "AdaptiveTimeout_ClearInterfaceSpecificConfiguration")
Interceptor.attach(AdaptiveTimeout_ClearInterfaceSpecificConfiguration, {onLeave: function (args) {send("AdaptiveTimeout_ClearInterfaceSpecificConfiguration");}});

var AdaptiveTimeout_ResetAdaptiveTimeout = Module.findExportByName("dnsapi.dll", "AdaptiveTimeout_ResetAdaptiveTimeout")
Interceptor.attach(AdaptiveTimeout_ResetAdaptiveTimeout, {onLeave: function (args) {send("AdaptiveTimeout_ResetAdaptiveTimeout");}});

var AddRefQueryBlobEx = Module.findExportByName("dnsapi.dll", "AddRefQueryBlobEx")
Interceptor.attach(AddRefQueryBlobEx, {onLeave: function (args) {send("AddRefQueryBlobEx");}});

var BreakRecordsIntoBlob = Module.findExportByName("dnsapi.dll", "BreakRecordsIntoBlob")
Interceptor.attach(BreakRecordsIntoBlob, {onLeave: function (args) {send("BreakRecordsIntoBlob");}});

var Coalesce_UpdateNetVersion = Module.findExportByName("dnsapi.dll", "Coalesce_UpdateNetVersion")
Interceptor.attach(Coalesce_UpdateNetVersion, {onLeave: function (args) {send("Coalesce_UpdateNetVersion");}});

var CombineRecordsInBlob = Module.findExportByName("dnsapi.dll", "CombineRecordsInBlob")
Interceptor.attach(CombineRecordsInBlob, {onLeave: function (args) {send("CombineRecordsInBlob");}});

var CreateSendBlob = Module.findExportByName("dnsapi.dll", "CreateSendBlob")
Interceptor.attach(CreateSendBlob, {onLeave: function (args) {send("CreateSendBlob");}});

var DeRefQueryBlobEx = Module.findExportByName("dnsapi.dll", "DeRefQueryBlobEx")
Interceptor.attach(DeRefQueryBlobEx, {onLeave: function (args) {send("DeRefQueryBlobEx");}});

var DelaySortDAServerlist = Module.findExportByName("dnsapi.dll", "DelaySortDAServerlist")
Interceptor.attach(DelaySortDAServerlist, {onLeave: function (args) {send("DelaySortDAServerlist");}});

var DnsAcquireContextHandle_A = Module.findExportByName("dnsapi.dll", "DnsAcquireContextHandle_A")
Interceptor.attach(DnsAcquireContextHandle_A, {onLeave: function (args) {send("DnsAcquireContextHandle_A");}});

var DnsAcquireContextHandle_W = Module.findExportByName("dnsapi.dll", "DnsAcquireContextHandle_W")
Interceptor.attach(DnsAcquireContextHandle_W, {onLeave: function (args) {send("DnsAcquireContextHandle_W");}});

var DnsAddrArrayAddAddr = Module.findExportByName("dnsapi.dll", "DnsAddrArrayAddAddr")
Interceptor.attach(DnsAddrArrayAddAddr, {onLeave: function (args) {send("DnsAddrArrayAddAddr");}});

var DnsAddrArrayAddIp4 = Module.findExportByName("dnsapi.dll", "DnsAddrArrayAddIp4")
Interceptor.attach(DnsAddrArrayAddIp4, {onLeave: function (args) {send("DnsAddrArrayAddIp4");}});

var DnsAddrArrayCreate = Module.findExportByName("dnsapi.dll", "DnsAddrArrayCreate")
Interceptor.attach(DnsAddrArrayCreate, {onLeave: function (args) {send("DnsAddrArrayCreate");}});

var DnsAddrBuildFromDnsRecord = Module.findExportByName("dnsapi.dll", "DnsAddrBuildFromDnsRecord")
Interceptor.attach(DnsAddrBuildFromDnsRecord, {onLeave: function (args) {send("DnsAddrBuildFromDnsRecord");}});

var DnsAllocateRecord = Module.findExportByName("dnsapi.dll", "DnsAllocateRecord")
Interceptor.attach(DnsAllocateRecord, {onLeave: function (args) {send("DnsAllocateRecord");}});

var DnsApiAlloc = Module.findExportByName("dnsapi.dll", "DnsApiAlloc")
Interceptor.attach(DnsApiAlloc, {onLeave: function (args) {send("DnsApiAlloc");}});

var DnsApiAllocZero = Module.findExportByName("dnsapi.dll", "DnsApiAllocZero")
Interceptor.attach(DnsApiAllocZero, {onLeave: function (args) {send("DnsApiAllocZero");}});

var DnsApiFree = Module.findExportByName("dnsapi.dll", "DnsApiFree")
Interceptor.attach(DnsApiFree, {onLeave: function (args) {send("DnsApiFree");}});

var DnsApiHeapReset = Module.findExportByName("dnsapi.dll", "DnsApiHeapReset")
Interceptor.attach(DnsApiHeapReset, {onLeave: function (args) {send("DnsApiHeapReset");}});

var DnsApiOnNetworkChange = Module.findExportByName("dnsapi.dll", "DnsApiOnNetworkChange")
Interceptor.attach(DnsApiOnNetworkChange, {onLeave: function (args) {send("DnsApiOnNetworkChange");}});

var DnsApiRealloc = Module.findExportByName("dnsapi.dll", "DnsApiRealloc")
Interceptor.attach(DnsApiRealloc, {onLeave: function (args) {send("DnsApiRealloc");}});

var DnsApiSetDebugGlobals = Module.findExportByName("dnsapi.dll", "DnsApiSetDebugGlobals")
Interceptor.attach(DnsApiSetDebugGlobals, {onLeave: function (args) {send("DnsApiSetDebugGlobals");}});

var DnsAsyncRegisterHostAddrs = Module.findExportByName("dnsapi.dll", "DnsAsyncRegisterHostAddrs")
Interceptor.attach(DnsAsyncRegisterHostAddrs, {onLeave: function (args) {send("DnsAsyncRegisterHostAddrs");}});

var DnsAsyncRegisterInit = Module.findExportByName("dnsapi.dll", "DnsAsyncRegisterInit")
Interceptor.attach(DnsAsyncRegisterInit, {onLeave: function (args) {send("DnsAsyncRegisterInit");}});

var DnsAsyncRegisterTerm = Module.findExportByName("dnsapi.dll", "DnsAsyncRegisterTerm")
Interceptor.attach(DnsAsyncRegisterTerm, {onLeave: function (args) {send("DnsAsyncRegisterTerm");}});

var DnsCancelQuery = Module.findExportByName("dnsapi.dll", "DnsCancelQuery")
Interceptor.attach(DnsCancelQuery, {onLeave: function (args) {send("DnsCancelQuery");}});

var DnsCancelQueryRaw = Module.findExportByName("dnsapi.dll", "DnsCancelQueryRaw")
Interceptor.attach(DnsCancelQueryRaw, {onLeave: function (args) {send("DnsCancelQueryRaw");}});

var DnsCheckNrptRuleIntegrity = Module.findExportByName("dnsapi.dll", "DnsCheckNrptRuleIntegrity")
Interceptor.attach(DnsCheckNrptRuleIntegrity, {onLeave: function (args) {send("DnsCheckNrptRuleIntegrity");}});

var DnsCheckNrptRules = Module.findExportByName("dnsapi.dll", "DnsCheckNrptRules")
Interceptor.attach(DnsCheckNrptRules, {onLeave: function (args) {send("DnsCheckNrptRules");}});

var DnsCleanupTcpConnections = Module.findExportByName("dnsapi.dll", "DnsCleanupTcpConnections")
Interceptor.attach(DnsCleanupTcpConnections, {onLeave: function (args) {send("DnsCleanupTcpConnections");}});

var DnsConnectionDeletePolicyEntries = Module.findExportByName("dnsapi.dll", "DnsConnectionDeletePolicyEntries")
Interceptor.attach(DnsConnectionDeletePolicyEntries, {onLeave: function (args) {send("DnsConnectionDeletePolicyEntries");}});

var DnsConnectionDeletePolicyEntriesPrivate = Module.findExportByName("dnsapi.dll", "DnsConnectionDeletePolicyEntriesPrivate")
Interceptor.attach(DnsConnectionDeletePolicyEntriesPrivate, {onLeave: function (args) {send("DnsConnectionDeletePolicyEntriesPrivate");}});

var DnsConnectionDeleteProxyInfo = Module.findExportByName("dnsapi.dll", "DnsConnectionDeleteProxyInfo")
Interceptor.attach(DnsConnectionDeleteProxyInfo, {onLeave: function (args) {send("DnsConnectionDeleteProxyInfo");}});

var DnsConnectionFreeNameList = Module.findExportByName("dnsapi.dll", "DnsConnectionFreeNameList")
Interceptor.attach(DnsConnectionFreeNameList, {onLeave: function (args) {send("DnsConnectionFreeNameList");}});

var DnsConnectionFreeProxyInfo = Module.findExportByName("dnsapi.dll", "DnsConnectionFreeProxyInfo")
Interceptor.attach(DnsConnectionFreeProxyInfo, {onLeave: function (args) {send("DnsConnectionFreeProxyInfo");}});

var DnsConnectionFreeProxyInfoEx = Module.findExportByName("dnsapi.dll", "DnsConnectionFreeProxyInfoEx")
Interceptor.attach(DnsConnectionFreeProxyInfoEx, {onLeave: function (args) {send("DnsConnectionFreeProxyInfoEx");}});

var DnsConnectionFreeProxyList = Module.findExportByName("dnsapi.dll", "DnsConnectionFreeProxyList")
Interceptor.attach(DnsConnectionFreeProxyList, {onLeave: function (args) {send("DnsConnectionFreeProxyList");}});

var DnsConnectionGetHandleForHostUrlPrivate = Module.findExportByName("dnsapi.dll", "DnsConnectionGetHandleForHostUrlPrivate")
Interceptor.attach(DnsConnectionGetHandleForHostUrlPrivate, {onLeave: function (args) {send("DnsConnectionGetHandleForHostUrlPrivate");}});

var DnsConnectionGetNameList = Module.findExportByName("dnsapi.dll", "DnsConnectionGetNameList")
Interceptor.attach(DnsConnectionGetNameList, {onLeave: function (args) {send("DnsConnectionGetNameList");}});

var DnsConnectionGetProxyInfo = Module.findExportByName("dnsapi.dll", "DnsConnectionGetProxyInfo")
Interceptor.attach(DnsConnectionGetProxyInfo, {onLeave: function (args) {send("DnsConnectionGetProxyInfo");}});

var DnsConnectionGetProxyInfoForHostUrl = Module.findExportByName("dnsapi.dll", "DnsConnectionGetProxyInfoForHostUrl")
Interceptor.attach(DnsConnectionGetProxyInfoForHostUrl, {onLeave: function (args) {send("DnsConnectionGetProxyInfoForHostUrl");}});

var DnsConnectionGetProxyInfoForHostUrlEx = Module.findExportByName("dnsapi.dll", "DnsConnectionGetProxyInfoForHostUrlEx")
Interceptor.attach(DnsConnectionGetProxyInfoForHostUrlEx, {onLeave: function (args) {send("DnsConnectionGetProxyInfoForHostUrlEx");}});

var DnsConnectionGetProxyList = Module.findExportByName("dnsapi.dll", "DnsConnectionGetProxyList")
Interceptor.attach(DnsConnectionGetProxyList, {onLeave: function (args) {send("DnsConnectionGetProxyList");}});

var DnsConnectionSetPolicyEntries = Module.findExportByName("dnsapi.dll", "DnsConnectionSetPolicyEntries")
Interceptor.attach(DnsConnectionSetPolicyEntries, {onLeave: function (args) {send("DnsConnectionSetPolicyEntries");}});

var DnsConnectionSetPolicyEntriesPrivate = Module.findExportByName("dnsapi.dll", "DnsConnectionSetPolicyEntriesPrivate")
Interceptor.attach(DnsConnectionSetPolicyEntriesPrivate, {onLeave: function (args) {send("DnsConnectionSetPolicyEntriesPrivate");}});

var DnsConnectionSetProxyInfo = Module.findExportByName("dnsapi.dll", "DnsConnectionSetProxyInfo")
Interceptor.attach(DnsConnectionSetProxyInfo, {onLeave: function (args) {send("DnsConnectionSetProxyInfo");}});

var DnsConnectionUpdateIfIndexTable = Module.findExportByName("dnsapi.dll", "DnsConnectionUpdateIfIndexTable")
Interceptor.attach(DnsConnectionUpdateIfIndexTable, {onLeave: function (args) {send("DnsConnectionUpdateIfIndexTable");}});

var DnsCopyStringEx = Module.findExportByName("dnsapi.dll", "DnsCopyStringEx")
Interceptor.attach(DnsCopyStringEx, {onLeave: function (args) {send("DnsCopyStringEx");}});

var DnsCreateReverseNameStringForIpAddress = Module.findExportByName("dnsapi.dll", "DnsCreateReverseNameStringForIpAddress")
Interceptor.attach(DnsCreateReverseNameStringForIpAddress, {onLeave: function (args) {send("DnsCreateReverseNameStringForIpAddress");}});

var DnsCreateStandardDnsNameCopy = Module.findExportByName("dnsapi.dll", "DnsCreateStandardDnsNameCopy")
Interceptor.attach(DnsCreateStandardDnsNameCopy, {onLeave: function (args) {send("DnsCreateStandardDnsNameCopy");}});

var DnsCreateStringCopy = Module.findExportByName("dnsapi.dll", "DnsCreateStringCopy")
Interceptor.attach(DnsCreateStringCopy, {onLeave: function (args) {send("DnsCreateStringCopy");}});

var DnsDeRegisterLocal = Module.findExportByName("dnsapi.dll", "DnsDeRegisterLocal")
Interceptor.attach(DnsDeRegisterLocal, {onLeave: function (args) {send("DnsDeRegisterLocal");}});

var DnsDeleteSettings = Module.findExportByName("dnsapi.dll", "DnsDeleteSettings")
Interceptor.attach(DnsDeleteSettings, {onLeave: function (args) {send("DnsDeleteSettings");}});

var DnsDhcpRegisterAddrs = Module.findExportByName("dnsapi.dll", "DnsDhcpRegisterAddrs")
Interceptor.attach(DnsDhcpRegisterAddrs, {onLeave: function (args) {send("DnsDhcpRegisterAddrs");}});

var DnsDhcpRegisterHostAddrs = Module.findExportByName("dnsapi.dll", "DnsDhcpRegisterHostAddrs")
Interceptor.attach(DnsDhcpRegisterHostAddrs, {onLeave: function (args) {send("DnsDhcpRegisterHostAddrs");}});

var DnsDhcpRegisterInit = Module.findExportByName("dnsapi.dll", "DnsDhcpRegisterInit")
Interceptor.attach(DnsDhcpRegisterInit, {onLeave: function (args) {send("DnsDhcpRegisterInit");}});

var DnsDhcpRegisterTerm = Module.findExportByName("dnsapi.dll", "DnsDhcpRegisterTerm")
Interceptor.attach(DnsDhcpRegisterTerm, {onLeave: function (args) {send("DnsDhcpRegisterTerm");}});

var DnsDhcpRemoveRegistrations = Module.findExportByName("dnsapi.dll", "DnsDhcpRemoveRegistrations")
Interceptor.attach(DnsDhcpRemoveRegistrations, {onLeave: function (args) {send("DnsDhcpRemoveRegistrations");}});

var DnsDhcpSrvRegisterHostAddr = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterHostAddr")
Interceptor.attach(DnsDhcpSrvRegisterHostAddr, {onLeave: function (args) {send("DnsDhcpSrvRegisterHostAddr");}});

var DnsDhcpSrvRegisterHostAddrEx = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterHostAddrEx")
Interceptor.attach(DnsDhcpSrvRegisterHostAddrEx, {onLeave: function (args) {send("DnsDhcpSrvRegisterHostAddrEx");}});

var DnsDhcpSrvRegisterHostName = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterHostName")
Interceptor.attach(DnsDhcpSrvRegisterHostName, {onLeave: function (args) {send("DnsDhcpSrvRegisterHostName");}});

var DnsDhcpSrvRegisterHostNameEx = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterHostNameEx")
Interceptor.attach(DnsDhcpSrvRegisterHostNameEx, {onLeave: function (args) {send("DnsDhcpSrvRegisterHostNameEx");}});

var DnsDhcpSrvRegisterInit = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterInit")
Interceptor.attach(DnsDhcpSrvRegisterInit, {onLeave: function (args) {send("DnsDhcpSrvRegisterInit");}});

var DnsDhcpSrvRegisterInitEx = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterInitEx")
Interceptor.attach(DnsDhcpSrvRegisterInitEx, {onLeave: function (args) {send("DnsDhcpSrvRegisterInitEx");}});

var DnsDhcpSrvRegisterInitialize = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterInitialize")
Interceptor.attach(DnsDhcpSrvRegisterInitialize, {onLeave: function (args) {send("DnsDhcpSrvRegisterInitialize");}});

var DnsDhcpSrvRegisterTerm = Module.findExportByName("dnsapi.dll", "DnsDhcpSrvRegisterTerm")
Interceptor.attach(DnsDhcpSrvRegisterTerm, {onLeave: function (args) {send("DnsDhcpSrvRegisterTerm");}});

var DnsDisableIdnEncoding = Module.findExportByName("dnsapi.dll", "DnsDisableIdnEncoding")
Interceptor.attach(DnsDisableIdnEncoding, {onLeave: function (args) {send("DnsDisableIdnEncoding");}});

var DnsDowncaseDnsNameLabel = Module.findExportByName("dnsapi.dll", "DnsDowncaseDnsNameLabel")
Interceptor.attach(DnsDowncaseDnsNameLabel, {onLeave: function (args) {send("DnsDowncaseDnsNameLabel");}});

var DnsExtractRecordsFromMessage_UTF8 = Module.findExportByName("dnsapi.dll", "DnsExtractRecordsFromMessage_UTF8")
Interceptor.attach(DnsExtractRecordsFromMessage_UTF8, {onLeave: function (args) {send("DnsExtractRecordsFromMessage_UTF8");}});

var DnsExtractRecordsFromMessage_W = Module.findExportByName("dnsapi.dll", "DnsExtractRecordsFromMessage_W")
Interceptor.attach(DnsExtractRecordsFromMessage_W, {onLeave: function (args) {send("DnsExtractRecordsFromMessage_W");}});

var DnsFindAuthoritativeZone = Module.findExportByName("dnsapi.dll", "DnsFindAuthoritativeZone")
Interceptor.attach(DnsFindAuthoritativeZone, {onLeave: function (args) {send("DnsFindAuthoritativeZone");}});

var DnsFlushResolverCache = Module.findExportByName("dnsapi.dll", "DnsFlushResolverCache")
Interceptor.attach(DnsFlushResolverCache, {onLeave: function (args) {send("DnsFlushResolverCache");}});

var DnsFlushResolverCacheEntry_A = Module.findExportByName("dnsapi.dll", "DnsFlushResolverCacheEntry_A")
Interceptor.attach(DnsFlushResolverCacheEntry_A, {onLeave: function (args) {send("DnsFlushResolverCacheEntry_A");}});

var DnsFlushResolverCacheEntry_UTF8 = Module.findExportByName("dnsapi.dll", "DnsFlushResolverCacheEntry_UTF8")
Interceptor.attach(DnsFlushResolverCacheEntry_UTF8, {onLeave: function (args) {send("DnsFlushResolverCacheEntry_UTF8");}});

var DnsFlushResolverCacheEntry_W = Module.findExportByName("dnsapi.dll", "DnsFlushResolverCacheEntry_W")
Interceptor.attach(DnsFlushResolverCacheEntry_W, {onLeave: function (args) {send("DnsFlushResolverCacheEntry_W");}});

var DnsFree = Module.findExportByName("dnsapi.dll", "DnsFree")
Interceptor.attach(DnsFree, {onLeave: function (args) {send("DnsFree");}});

var DnsFreeAdaptersInfo = Module.findExportByName("dnsapi.dll", "DnsFreeAdaptersInfo")
Interceptor.attach(DnsFreeAdaptersInfo, {onLeave: function (args) {send("DnsFreeAdaptersInfo");}});

var DnsFreeConfigStructure = Module.findExportByName("dnsapi.dll", "DnsFreeConfigStructure")
Interceptor.attach(DnsFreeConfigStructure, {onLeave: function (args) {send("DnsFreeConfigStructure");}});

var DnsFreeCustomServers = Module.findExportByName("dnsapi.dll", "DnsFreeCustomServers")
Interceptor.attach(DnsFreeCustomServers, {onLeave: function (args) {send("DnsFreeCustomServers");}});

var DnsFreeNrptRule = Module.findExportByName("dnsapi.dll", "DnsFreeNrptRule")
Interceptor.attach(DnsFreeNrptRule, {onLeave: function (args) {send("DnsFreeNrptRule");}});

var DnsFreeNrptRuleNamesList = Module.findExportByName("dnsapi.dll", "DnsFreeNrptRuleNamesList")
Interceptor.attach(DnsFreeNrptRuleNamesList, {onLeave: function (args) {send("DnsFreeNrptRuleNamesList");}});

var DnsFreePolicyConfig = Module.findExportByName("dnsapi.dll", "DnsFreePolicyConfig")
Interceptor.attach(DnsFreePolicyConfig, {onLeave: function (args) {send("DnsFreePolicyConfig");}});

var DnsFreeProxyName = Module.findExportByName("dnsapi.dll", "DnsFreeProxyName")
Interceptor.attach(DnsFreeProxyName, {onLeave: function (args) {send("DnsFreeProxyName");}});

var DnsFreeWellKnownServerProperty = Module.findExportByName("dnsapi.dll", "DnsFreeWellKnownServerProperty")
Interceptor.attach(DnsFreeWellKnownServerProperty, {onLeave: function (args) {send("DnsFreeWellKnownServerProperty");}});

var DnsFreeWellKnownServers = Module.findExportByName("dnsapi.dll", "DnsFreeWellKnownServers")
Interceptor.attach(DnsFreeWellKnownServers, {onLeave: function (args) {send("DnsFreeWellKnownServers");}});

var DnsGetAdaptersInfo = Module.findExportByName("dnsapi.dll", "DnsGetAdaptersInfo")
Interceptor.attach(DnsGetAdaptersInfo, {onLeave: function (args) {send("DnsGetAdaptersInfo");}});

var DnsGetApplicationIdentifier = Module.findExportByName("dnsapi.dll", "DnsGetApplicationIdentifier")
Interceptor.attach(DnsGetApplicationIdentifier, {onLeave: function (args) {send("DnsGetApplicationIdentifier");}});

var DnsGetApplicationSettings = Module.findExportByName("dnsapi.dll", "DnsGetApplicationSettings")
Interceptor.attach(DnsGetApplicationSettings, {onLeave: function (args) {send("DnsGetApplicationSettings");}});

var DnsGetBufferLengthForStringCopy = Module.findExportByName("dnsapi.dll", "DnsGetBufferLengthForStringCopy")
Interceptor.attach(DnsGetBufferLengthForStringCopy, {onLeave: function (args) {send("DnsGetBufferLengthForStringCopy");}});

var DnsGetCacheDataTable = Module.findExportByName("dnsapi.dll", "DnsGetCacheDataTable")
Interceptor.attach(DnsGetCacheDataTable, {onLeave: function (args) {send("DnsGetCacheDataTable");}});

var DnsGetCacheDataTableEx = Module.findExportByName("dnsapi.dll", "DnsGetCacheDataTableEx")
Interceptor.attach(DnsGetCacheDataTableEx, {onLeave: function (args) {send("DnsGetCacheDataTableEx");}});

var DnsGetDdrInfo = Module.findExportByName("dnsapi.dll", "DnsGetDdrInfo")
Interceptor.attach(DnsGetDdrInfo, {onLeave: function (args) {send("DnsGetDdrInfo");}});

var DnsGetDdrInfoCancel = Module.findExportByName("dnsapi.dll", "DnsGetDdrInfoCancel")
Interceptor.attach(DnsGetDdrInfoCancel, {onLeave: function (args) {send("DnsGetDdrInfoCancel");}});

var DnsGetDdrInfoInternal = Module.findExportByName("dnsapi.dll", "DnsGetDdrInfoInternal")
Interceptor.attach(DnsGetDdrInfoInternal, {onLeave: function (args) {send("DnsGetDdrInfoInternal");}});

var DnsGetDnsServerList = Module.findExportByName("dnsapi.dll", "DnsGetDnsServerList")
Interceptor.attach(DnsGetDnsServerList, {onLeave: function (args) {send("DnsGetDnsServerList");}});

var DnsGetDomainName = Module.findExportByName("dnsapi.dll", "DnsGetDomainName")
Interceptor.attach(DnsGetDomainName, {onLeave: function (args) {send("DnsGetDomainName");}});

var DnsGetInterfaceSettings = Module.findExportByName("dnsapi.dll", "DnsGetInterfaceSettings")
Interceptor.attach(DnsGetInterfaceSettings, {onLeave: function (args) {send("DnsGetInterfaceSettings");}});

var DnsGetInterfaceSettingsInProc = Module.findExportByName("dnsapi.dll", "DnsGetInterfaceSettingsInProc")
Interceptor.attach(DnsGetInterfaceSettingsInProc, {onLeave: function (args) {send("DnsGetInterfaceSettingsInProc");}});

var DnsGetLastFailedUpdateInfo = Module.findExportByName("dnsapi.dll", "DnsGetLastFailedUpdateInfo")
Interceptor.attach(DnsGetLastFailedUpdateInfo, {onLeave: function (args) {send("DnsGetLastFailedUpdateInfo");}});

var DnsGetNrptRuleNamesList = Module.findExportByName("dnsapi.dll", "DnsGetNrptRuleNamesList")
Interceptor.attach(DnsGetNrptRuleNamesList, {onLeave: function (args) {send("DnsGetNrptRuleNamesList");}});

var DnsGetPolicyTableInfo = Module.findExportByName("dnsapi.dll", "DnsGetPolicyTableInfo")
Interceptor.attach(DnsGetPolicyTableInfo, {onLeave: function (args) {send("DnsGetPolicyTableInfo");}});

var DnsGetPolicyTableInfoPrivate = Module.findExportByName("dnsapi.dll", "DnsGetPolicyTableInfoPrivate")
Interceptor.attach(DnsGetPolicyTableInfoPrivate, {onLeave: function (args) {send("DnsGetPolicyTableInfoPrivate");}});

var DnsGetPrimaryDomainName_A = Module.findExportByName("dnsapi.dll", "DnsGetPrimaryDomainName_A")
Interceptor.attach(DnsGetPrimaryDomainName_A, {onLeave: function (args) {send("DnsGetPrimaryDomainName_A");}});

var DnsGetProxyInfoPrivate = Module.findExportByName("dnsapi.dll", "DnsGetProxyInfoPrivate")
Interceptor.attach(DnsGetProxyInfoPrivate, {onLeave: function (args) {send("DnsGetProxyInfoPrivate");}});

var DnsGetProxyInformation = Module.findExportByName("dnsapi.dll", "DnsGetProxyInformation")
Interceptor.attach(DnsGetProxyInformation, {onLeave: function (args) {send("DnsGetProxyInformation");}});

var DnsGetProxyInformationEx = Module.findExportByName("dnsapi.dll", "DnsGetProxyInformationEx")
Interceptor.attach(DnsGetProxyInformationEx, {onLeave: function (args) {send("DnsGetProxyInformationEx");}});

var DnsGetQueryRetryTimeouts = Module.findExportByName("dnsapi.dll", "DnsGetQueryRetryTimeouts")
Interceptor.attach(DnsGetQueryRetryTimeouts, {onLeave: function (args) {send("DnsGetQueryRetryTimeouts");}});

var DnsGetSettings = Module.findExportByName("dnsapi.dll", "DnsGetSettings")
Interceptor.attach(DnsGetSettings, {onLeave: function (args) {send("DnsGetSettings");}});

var DnsGetWellKnownServerProperty = Module.findExportByName("dnsapi.dll", "DnsGetWellKnownServerProperty")
Interceptor.attach(DnsGetWellKnownServerProperty, {onLeave: function (args) {send("DnsGetWellKnownServerProperty");}});

var DnsGetWellKnownServers = Module.findExportByName("dnsapi.dll", "DnsGetWellKnownServers")
Interceptor.attach(DnsGetWellKnownServers, {onLeave: function (args) {send("DnsGetWellKnownServers");}});

var DnsGlobals = Module.findExportByName("dnsapi.dll", "DnsGlobals")
Interceptor.attach(DnsGlobals, {onLeave: function (args) {send("DnsGlobals");}});

var DnsIp6AddressToReverseNameW = Module.findExportByName("dnsapi.dll", "DnsIp6AddressToReverseNameW")
Interceptor.attach(DnsIp6AddressToReverseNameW, {onLeave: function (args) {send("DnsIp6AddressToReverseNameW");}});

var DnsIp6ReverseNameToAddressW = Module.findExportByName("dnsapi.dll", "DnsIp6ReverseNameToAddressW")
Interceptor.attach(DnsIp6ReverseNameToAddressW, {onLeave: function (args) {send("DnsIp6ReverseNameToAddressW");}});

var DnsIpv6AddressToString = Module.findExportByName("dnsapi.dll", "DnsIpv6AddressToString")
Interceptor.attach(DnsIpv6AddressToString, {onLeave: function (args) {send("DnsIpv6AddressToString");}});

var DnsIpv6StringToAddress = Module.findExportByName("dnsapi.dll", "DnsIpv6StringToAddress")
Interceptor.attach(DnsIpv6StringToAddress, {onLeave: function (args) {send("DnsIpv6StringToAddress");}});

var DnsIsAMailboxType = Module.findExportByName("dnsapi.dll", "DnsIsAMailboxType")
Interceptor.attach(DnsIsAMailboxType, {onLeave: function (args) {send("DnsIsAMailboxType");}});

var DnsIsNSECType = Module.findExportByName("dnsapi.dll", "DnsIsNSECType")
Interceptor.attach(DnsIsNSECType, {onLeave: function (args) {send("DnsIsNSECType");}});

var DnsIsStatusRcode = Module.findExportByName("dnsapi.dll", "DnsIsStatusRcode")
Interceptor.attach(DnsIsStatusRcode, {onLeave: function (args) {send("DnsIsStatusRcode");}});

var DnsIsStringCountValidForTextType = Module.findExportByName("dnsapi.dll", "DnsIsStringCountValidForTextType")
Interceptor.attach(DnsIsStringCountValidForTextType, {onLeave: function (args) {send("DnsIsStringCountValidForTextType");}});

var DnsLogEvent = Module.findExportByName("dnsapi.dll", "DnsLogEvent")
Interceptor.attach(DnsLogEvent, {onLeave: function (args) {send("DnsLogEvent");}});

var DnsMapRcodeToStatus = Module.findExportByName("dnsapi.dll", "DnsMapRcodeToStatus")
Interceptor.attach(DnsMapRcodeToStatus, {onLeave: function (args) {send("DnsMapRcodeToStatus");}});

var DnsModifyRecordsInSet_A = Module.findExportByName("dnsapi.dll", "DnsModifyRecordsInSet_A")
Interceptor.attach(DnsModifyRecordsInSet_A, {onLeave: function (args) {send("DnsModifyRecordsInSet_A");}});

var DnsModifyRecordsInSet_UTF8 = Module.findExportByName("dnsapi.dll", "DnsModifyRecordsInSet_UTF8")
Interceptor.attach(DnsModifyRecordsInSet_UTF8, {onLeave: function (args) {send("DnsModifyRecordsInSet_UTF8");}});

var DnsModifyRecordsInSet_W = Module.findExportByName("dnsapi.dll", "DnsModifyRecordsInSet_W")
Interceptor.attach(DnsModifyRecordsInSet_W, {onLeave: function (args) {send("DnsModifyRecordsInSet_W");}});

var DnsNameCompareEx_A = Module.findExportByName("dnsapi.dll", "DnsNameCompareEx_A")
Interceptor.attach(DnsNameCompareEx_A, {onLeave: function (args) {send("DnsNameCompareEx_A");}});

var DnsNameCompareEx_UTF8 = Module.findExportByName("dnsapi.dll", "DnsNameCompareEx_UTF8")
Interceptor.attach(DnsNameCompareEx_UTF8, {onLeave: function (args) {send("DnsNameCompareEx_UTF8");}});

var DnsNameCompareEx_W = Module.findExportByName("dnsapi.dll", "DnsNameCompareEx_W")
Interceptor.attach(DnsNameCompareEx_W, {onLeave: function (args) {send("DnsNameCompareEx_W");}});

var DnsNameCompare_A = Module.findExportByName("dnsapi.dll", "DnsNameCompare_A")
Interceptor.attach(DnsNameCompare_A, {onLeave: function (args) {send("DnsNameCompare_A");}});

var DnsNameCompare_UTF8 = Module.findExportByName("dnsapi.dll", "DnsNameCompare_UTF8")
Interceptor.attach(DnsNameCompare_UTF8, {onLeave: function (args) {send("DnsNameCompare_UTF8");}});

var DnsNameCompare_W = Module.findExportByName("dnsapi.dll", "DnsNameCompare_W")
Interceptor.attach(DnsNameCompare_W, {onLeave: function (args) {send("DnsNameCompare_W");}});

var DnsNameCopy = Module.findExportByName("dnsapi.dll", "DnsNameCopy")
Interceptor.attach(DnsNameCopy, {onLeave: function (args) {send("DnsNameCopy");}});

var DnsNameCopyAllocate = Module.findExportByName("dnsapi.dll", "DnsNameCopyAllocate")
Interceptor.attach(DnsNameCopyAllocate, {onLeave: function (args) {send("DnsNameCopyAllocate");}});

var DnsNetworkInfo_CreateFromFAZ = Module.findExportByName("dnsapi.dll", "DnsNetworkInfo_CreateFromFAZ")
Interceptor.attach(DnsNetworkInfo_CreateFromFAZ, {onLeave: function (args) {send("DnsNetworkInfo_CreateFromFAZ");}});

var DnsNetworkInformation_CreateFromFAZ = Module.findExportByName("dnsapi.dll", "DnsNetworkInformation_CreateFromFAZ")
Interceptor.attach(DnsNetworkInformation_CreateFromFAZ, {onLeave: function (args) {send("DnsNetworkInformation_CreateFromFAZ");}});

var DnsNotifyProxyConfigChangePrivate = Module.findExportByName("dnsapi.dll", "DnsNotifyProxyConfigChangePrivate")
Interceptor.attach(DnsNotifyProxyConfigChangePrivate, {onLeave: function (args) {send("DnsNotifyProxyConfigChangePrivate");}});

var DnsNotifyResolver = Module.findExportByName("dnsapi.dll", "DnsNotifyResolver")
Interceptor.attach(DnsNotifyResolver, {onLeave: function (args) {send("DnsNotifyResolver");}});

var DnsNotifyResolverClusterIp = Module.findExportByName("dnsapi.dll", "DnsNotifyResolverClusterIp")
Interceptor.attach(DnsNotifyResolverClusterIp, {onLeave: function (args) {send("DnsNotifyResolverClusterIp");}});

var DnsNotifyResolverEx = Module.findExportByName("dnsapi.dll", "DnsNotifyResolverEx")
Interceptor.attach(DnsNotifyResolverEx, {onLeave: function (args) {send("DnsNotifyResolverEx");}});

var DnsQueryConfig = Module.findExportByName("dnsapi.dll", "DnsQueryConfig")
Interceptor.attach(DnsQueryConfig, {onLeave: function (args) {send("DnsQueryConfig");}});

var DnsQueryConfigAllocEx = Module.findExportByName("dnsapi.dll", "DnsQueryConfigAllocEx")
Interceptor.attach(DnsQueryConfigAllocEx, {onLeave: function (args) {send("DnsQueryConfigAllocEx");}});

var DnsQueryConfigDword = Module.findExportByName("dnsapi.dll", "DnsQueryConfigDword")
Interceptor.attach(DnsQueryConfigDword, {onLeave: function (args) {send("DnsQueryConfigDword");}});

var DnsQueryEx = Module.findExportByName("dnsapi.dll", "DnsQueryEx")
Interceptor.attach(DnsQueryEx, {onLeave: function (args) {send("DnsQueryEx");}});

var DnsQueryExA = Module.findExportByName("dnsapi.dll", "DnsQueryExA")
Interceptor.attach(DnsQueryExA, {onLeave: function (args) {send("DnsQueryExA");}});

var DnsQueryExUTF8 = Module.findExportByName("dnsapi.dll", "DnsQueryExUTF8")
Interceptor.attach(DnsQueryExUTF8, {onLeave: function (args) {send("DnsQueryExUTF8");}});

var DnsQueryExW = Module.findExportByName("dnsapi.dll", "DnsQueryExW")
Interceptor.attach(DnsQueryExW, {onLeave: function (args) {send("DnsQueryExW");}});

var DnsQueryRaw = Module.findExportByName("dnsapi.dll", "DnsQueryRaw")
Interceptor.attach(DnsQueryRaw, {onLeave: function (args) {send("DnsQueryRaw");}});

var DnsQueryRawResultFree = Module.findExportByName("dnsapi.dll", "DnsQueryRawResultFree")
Interceptor.attach(DnsQueryRawResultFree, {onLeave: function (args) {send("DnsQueryRawResultFree");}});

var DnsQuery_A = Module.findExportByName("dnsapi.dll", "DnsQuery_A")
Interceptor.attach(DnsQuery_A, {onLeave: function (args) {send("DnsQuery_A");}});

var DnsQuery_UTF8 = Module.findExportByName("dnsapi.dll", "DnsQuery_UTF8")
Interceptor.attach(DnsQuery_UTF8, {onLeave: function (args) {send("DnsQuery_UTF8");}});

var DnsQuery_W = Module.findExportByName("dnsapi.dll", "DnsQuery_W")
Interceptor.attach(DnsQuery_W, {onLeave: function (args) {send("DnsQuery_W");}});

var DnsRecordBuild_UTF8 = Module.findExportByName("dnsapi.dll", "DnsRecordBuild_UTF8")
Interceptor.attach(DnsRecordBuild_UTF8, {onLeave: function (args) {send("DnsRecordBuild_UTF8");}});

var DnsRecordBuild_W = Module.findExportByName("dnsapi.dll", "DnsRecordBuild_W")
Interceptor.attach(DnsRecordBuild_W, {onLeave: function (args) {send("DnsRecordBuild_W");}});

var DnsRecordCompare = Module.findExportByName("dnsapi.dll", "DnsRecordCompare")
Interceptor.attach(DnsRecordCompare, {onLeave: function (args) {send("DnsRecordCompare");}});

var DnsRecordCopyEx = Module.findExportByName("dnsapi.dll", "DnsRecordCopyEx")
Interceptor.attach(DnsRecordCopyEx, {onLeave: function (args) {send("DnsRecordCopyEx");}});

var DnsRecordListFree = Module.findExportByName("dnsapi.dll", "DnsRecordListFree")
Interceptor.attach(DnsRecordListFree, {onLeave: function (args) {send("DnsRecordListFree");}});

var DnsRecordListUnmapV4MappedAAAAInPlace = Module.findExportByName("dnsapi.dll", "DnsRecordListUnmapV4MappedAAAAInPlace")
Interceptor.attach(DnsRecordListUnmapV4MappedAAAAInPlace, {onLeave: function (args) {send("DnsRecordListUnmapV4MappedAAAAInPlace");}});

var DnsRecordSetCompare = Module.findExportByName("dnsapi.dll", "DnsRecordSetCompare")
Interceptor.attach(DnsRecordSetCompare, {onLeave: function (args) {send("DnsRecordSetCompare");}});

var DnsRecordSetCopyEx = Module.findExportByName("dnsapi.dll", "DnsRecordSetCopyEx")
Interceptor.attach(DnsRecordSetCopyEx, {onLeave: function (args) {send("DnsRecordSetCopyEx");}});

var DnsRecordSetDetach = Module.findExportByName("dnsapi.dll", "DnsRecordSetDetach")
Interceptor.attach(DnsRecordSetDetach, {onLeave: function (args) {send("DnsRecordSetDetach");}});

var DnsRecordStringForType = Module.findExportByName("dnsapi.dll", "DnsRecordStringForType")
Interceptor.attach(DnsRecordStringForType, {onLeave: function (args) {send("DnsRecordStringForType");}});

var DnsRecordStringForWritableType = Module.findExportByName("dnsapi.dll", "DnsRecordStringForWritableType")
Interceptor.attach(DnsRecordStringForWritableType, {onLeave: function (args) {send("DnsRecordStringForWritableType");}});

var DnsRecordTypeForName = Module.findExportByName("dnsapi.dll", "DnsRecordTypeForName")
Interceptor.attach(DnsRecordTypeForName, {onLeave: function (args) {send("DnsRecordTypeForName");}});

var DnsRegisterLocal = Module.findExportByName("dnsapi.dll", "DnsRegisterLocal")
Interceptor.attach(DnsRegisterLocal, {onLeave: function (args) {send("DnsRegisterLocal");}});

var DnsReleaseContextHandle = Module.findExportByName("dnsapi.dll", "DnsReleaseContextHandle")
Interceptor.attach(DnsReleaseContextHandle, {onLeave: function (args) {send("DnsReleaseContextHandle");}});

var DnsRemoveNrptRule = Module.findExportByName("dnsapi.dll", "DnsRemoveNrptRule")
Interceptor.attach(DnsRemoveNrptRule, {onLeave: function (args) {send("DnsRemoveNrptRule");}});

var DnsRemoveRegistrations = Module.findExportByName("dnsapi.dll", "DnsRemoveRegistrations")
Interceptor.attach(DnsRemoveRegistrations, {onLeave: function (args) {send("DnsRemoveRegistrations");}});

var DnsReplaceRecordSetA = Module.findExportByName("dnsapi.dll", "DnsReplaceRecordSetA")
Interceptor.attach(DnsReplaceRecordSetA, {onLeave: function (args) {send("DnsReplaceRecordSetA");}});

var DnsReplaceRecordSetUTF8 = Module.findExportByName("dnsapi.dll", "DnsReplaceRecordSetUTF8")
Interceptor.attach(DnsReplaceRecordSetUTF8, {onLeave: function (args) {send("DnsReplaceRecordSetUTF8");}});

var DnsReplaceRecordSetW = Module.findExportByName("dnsapi.dll", "DnsReplaceRecordSetW")
Interceptor.attach(DnsReplaceRecordSetW, {onLeave: function (args) {send("DnsReplaceRecordSetW");}});

var DnsResetQueryRetryTimeouts = Module.findExportByName("dnsapi.dll", "DnsResetQueryRetryTimeouts")
Interceptor.attach(DnsResetQueryRetryTimeouts, {onLeave: function (args) {send("DnsResetQueryRetryTimeouts");}});

var DnsResolverOp = Module.findExportByName("dnsapi.dll", "DnsResolverOp")
Interceptor.attach(DnsResolverOp, {onLeave: function (args) {send("DnsResolverOp");}});

var DnsResolverQueryHvsi = Module.findExportByName("dnsapi.dll", "DnsResolverQueryHvsi")
Interceptor.attach(DnsResolverQueryHvsi, {onLeave: function (args) {send("DnsResolverQueryHvsi");}});

var DnsScreenLocalAddrsForRegistration = Module.findExportByName("dnsapi.dll", "DnsScreenLocalAddrsForRegistration")
Interceptor.attach(DnsScreenLocalAddrsForRegistration, {onLeave: function (args) {send("DnsScreenLocalAddrsForRegistration");}});

var DnsServiceBrowse = Module.findExportByName("dnsapi.dll", "DnsServiceBrowse")
Interceptor.attach(DnsServiceBrowse, {onLeave: function (args) {send("DnsServiceBrowse");}});

var DnsServiceBrowseCancel = Module.findExportByName("dnsapi.dll", "DnsServiceBrowseCancel")
Interceptor.attach(DnsServiceBrowseCancel, {onLeave: function (args) {send("DnsServiceBrowseCancel");}});

var DnsServiceConstructInstance = Module.findExportByName("dnsapi.dll", "DnsServiceConstructInstance")
Interceptor.attach(DnsServiceConstructInstance, {onLeave: function (args) {send("DnsServiceConstructInstance");}});

var DnsServiceCopyInstance = Module.findExportByName("dnsapi.dll", "DnsServiceCopyInstance")
Interceptor.attach(DnsServiceCopyInstance, {onLeave: function (args) {send("DnsServiceCopyInstance");}});

var DnsServiceDeRegister = Module.findExportByName("dnsapi.dll", "DnsServiceDeRegister")
Interceptor.attach(DnsServiceDeRegister, {onLeave: function (args) {send("DnsServiceDeRegister");}});

var DnsServiceFreeInstance = Module.findExportByName("dnsapi.dll", "DnsServiceFreeInstance")
Interceptor.attach(DnsServiceFreeInstance, {onLeave: function (args) {send("DnsServiceFreeInstance");}});

var DnsServiceRegister = Module.findExportByName("dnsapi.dll", "DnsServiceRegister")
Interceptor.attach(DnsServiceRegister, {onLeave: function (args) {send("DnsServiceRegister");}});

var DnsServiceRegisterCancel = Module.findExportByName("dnsapi.dll", "DnsServiceRegisterCancel")
Interceptor.attach(DnsServiceRegisterCancel, {onLeave: function (args) {send("DnsServiceRegisterCancel");}});

var DnsServiceResolve = Module.findExportByName("dnsapi.dll", "DnsServiceResolve")
Interceptor.attach(DnsServiceResolve, {onLeave: function (args) {send("DnsServiceResolve");}});

var DnsServiceResolveCancel = Module.findExportByName("dnsapi.dll", "DnsServiceResolveCancel")
Interceptor.attach(DnsServiceResolveCancel, {onLeave: function (args) {send("DnsServiceResolveCancel");}});

var DnsSetApplicationSettings = Module.findExportByName("dnsapi.dll", "DnsSetApplicationSettings")
Interceptor.attach(DnsSetApplicationSettings, {onLeave: function (args) {send("DnsSetApplicationSettings");}});

var DnsSetConfigDword = Module.findExportByName("dnsapi.dll", "DnsSetConfigDword")
Interceptor.attach(DnsSetConfigDword, {onLeave: function (args) {send("DnsSetConfigDword");}});

var DnsSetConfigValue = Module.findExportByName("dnsapi.dll", "DnsSetConfigValue")
Interceptor.attach(DnsSetConfigValue, {onLeave: function (args) {send("DnsSetConfigValue");}});

var DnsSetInterfaceSettings = Module.findExportByName("dnsapi.dll", "DnsSetInterfaceSettings")
Interceptor.attach(DnsSetInterfaceSettings, {onLeave: function (args) {send("DnsSetInterfaceSettings");}});

var DnsSetNrptRule = Module.findExportByName("dnsapi.dll", "DnsSetNrptRule")
Interceptor.attach(DnsSetNrptRule, {onLeave: function (args) {send("DnsSetNrptRule");}});

var DnsSetNrptRules = Module.findExportByName("dnsapi.dll", "DnsSetNrptRules")
Interceptor.attach(DnsSetNrptRules, {onLeave: function (args) {send("DnsSetNrptRules");}});

var DnsSetQueryRetryTimeouts = Module.findExportByName("dnsapi.dll", "DnsSetQueryRetryTimeouts")
Interceptor.attach(DnsSetQueryRetryTimeouts, {onLeave: function (args) {send("DnsSetQueryRetryTimeouts");}});

var DnsSetSettings = Module.findExportByName("dnsapi.dll", "DnsSetSettings")
Interceptor.attach(DnsSetSettings, {onLeave: function (args) {send("DnsSetSettings");}});

var DnsSetWellKnownServerProperty = Module.findExportByName("dnsapi.dll", "DnsSetWellKnownServerProperty")
Interceptor.attach(DnsSetWellKnownServerProperty, {onLeave: function (args) {send("DnsSetWellKnownServerProperty");}});

var DnsStartMulticastQuery = Module.findExportByName("dnsapi.dll", "DnsStartMulticastQuery")
Interceptor.attach(DnsStartMulticastQuery, {onLeave: function (args) {send("DnsStartMulticastQuery");}});

var DnsStatusString = Module.findExportByName("dnsapi.dll", "DnsStatusString")
Interceptor.attach(DnsStatusString, {onLeave: function (args) {send("DnsStatusString");}});

var DnsStopMulticastQuery = Module.findExportByName("dnsapi.dll", "DnsStopMulticastQuery")
Interceptor.attach(DnsStopMulticastQuery, {onLeave: function (args) {send("DnsStopMulticastQuery");}});

var DnsStringCopyAllocateEx = Module.findExportByName("dnsapi.dll", "DnsStringCopyAllocateEx")
Interceptor.attach(DnsStringCopyAllocateEx, {onLeave: function (args) {send("DnsStringCopyAllocateEx");}});

var DnsStringToAddress = Module.findExportByName("dnsapi.dll", "DnsStringToAddress")
Interceptor.attach(DnsStringToAddress, {onLeave: function (args) {send("DnsStringToAddress");}});

var DnsTraceServerConfig = Module.findExportByName("dnsapi.dll", "DnsTraceServerConfig")
Interceptor.attach(DnsTraceServerConfig, {onLeave: function (args) {send("DnsTraceServerConfig");}});

var DnsUnicodeToUtf8 = Module.findExportByName("dnsapi.dll", "DnsUnicodeToUtf8")
Interceptor.attach(DnsUnicodeToUtf8, {onLeave: function (args) {send("DnsUnicodeToUtf8");}});

var DnsUpdate = Module.findExportByName("dnsapi.dll", "DnsUpdate")
Interceptor.attach(DnsUpdate, {onLeave: function (args) {send("DnsUpdate");}});

var DnsUpdateCaptivePortalPresence = Module.findExportByName("dnsapi.dll", "DnsUpdateCaptivePortalPresence")
Interceptor.attach(DnsUpdateCaptivePortalPresence, {onLeave: function (args) {send("DnsUpdateCaptivePortalPresence");}});

var DnsUpdateMachinePresence = Module.findExportByName("dnsapi.dll", "DnsUpdateMachinePresence")
Interceptor.attach(DnsUpdateMachinePresence, {onLeave: function (args) {send("DnsUpdateMachinePresence");}});

var DnsUpdateTest_A = Module.findExportByName("dnsapi.dll", "DnsUpdateTest_A")
Interceptor.attach(DnsUpdateTest_A, {onLeave: function (args) {send("DnsUpdateTest_A");}});

var DnsUpdateTest_UTF8 = Module.findExportByName("dnsapi.dll", "DnsUpdateTest_UTF8")
Interceptor.attach(DnsUpdateTest_UTF8, {onLeave: function (args) {send("DnsUpdateTest_UTF8");}});

var DnsUpdateTest_W = Module.findExportByName("dnsapi.dll", "DnsUpdateTest_W")
Interceptor.attach(DnsUpdateTest_W, {onLeave: function (args) {send("DnsUpdateTest_W");}});

var DnsUtf8ToUnicode = Module.findExportByName("dnsapi.dll", "DnsUtf8ToUnicode")
Interceptor.attach(DnsUtf8ToUnicode, {onLeave: function (args) {send("DnsUtf8ToUnicode");}});

var DnsValidateNameOrIp_TempW = Module.findExportByName("dnsapi.dll", "DnsValidateNameOrIp_TempW")
Interceptor.attach(DnsValidateNameOrIp_TempW, {onLeave: function (args) {send("DnsValidateNameOrIp_TempW");}});

var DnsValidateName_A = Module.findExportByName("dnsapi.dll", "DnsValidateName_A")
Interceptor.attach(DnsValidateName_A, {onLeave: function (args) {send("DnsValidateName_A");}});

var DnsValidateName_UTF8 = Module.findExportByName("dnsapi.dll", "DnsValidateName_UTF8")
Interceptor.attach(DnsValidateName_UTF8, {onLeave: function (args) {send("DnsValidateName_UTF8");}});

var DnsValidateName_W = Module.findExportByName("dnsapi.dll", "DnsValidateName_W")
Interceptor.attach(DnsValidateName_W, {onLeave: function (args) {send("DnsValidateName_W");}});

var DnsValidateServerArray_A = Module.findExportByName("dnsapi.dll", "DnsValidateServerArray_A")
Interceptor.attach(DnsValidateServerArray_A, {onLeave: function (args) {send("DnsValidateServerArray_A");}});

var DnsValidateServerArray_W = Module.findExportByName("dnsapi.dll", "DnsValidateServerArray_W")
Interceptor.attach(DnsValidateServerArray_W, {onLeave: function (args) {send("DnsValidateServerArray_W");}});

var DnsValidateServerStatus = Module.findExportByName("dnsapi.dll", "DnsValidateServerStatus")
Interceptor.attach(DnsValidateServerStatus, {onLeave: function (args) {send("DnsValidateServerStatus");}});

var DnsValidateServer_A = Module.findExportByName("dnsapi.dll", "DnsValidateServer_A")
Interceptor.attach(DnsValidateServer_A, {onLeave: function (args) {send("DnsValidateServer_A");}});

var DnsValidateServer_W = Module.findExportByName("dnsapi.dll", "DnsValidateServer_W")
Interceptor.attach(DnsValidateServer_W, {onLeave: function (args) {send("DnsValidateServer_W");}});

var DnsValidateUtf8Byte = Module.findExportByName("dnsapi.dll", "DnsValidateUtf8Byte")
Interceptor.attach(DnsValidateUtf8Byte, {onLeave: function (args) {send("DnsValidateUtf8Byte");}});

var DnsWriteQuestionToBuffer_UTF8 = Module.findExportByName("dnsapi.dll", "DnsWriteQuestionToBuffer_UTF8")
Interceptor.attach(DnsWriteQuestionToBuffer_UTF8, {onLeave: function (args) {send("DnsWriteQuestionToBuffer_UTF8");}});

var DnsWriteQuestionToBuffer_W = Module.findExportByName("dnsapi.dll", "DnsWriteQuestionToBuffer_W")
Interceptor.attach(DnsWriteQuestionToBuffer_W, {onLeave: function (args) {send("DnsWriteQuestionToBuffer_W");}});

var DnsWriteReverseNameStringForIpAddress = Module.findExportByName("dnsapi.dll", "DnsWriteReverseNameStringForIpAddress")
Interceptor.attach(DnsWriteReverseNameStringForIpAddress, {onLeave: function (args) {send("DnsWriteReverseNameStringForIpAddress");}});

var DnsWriteReverseNameStringForIpAddressW = Module.findExportByName("dnsapi.dll", "DnsWriteReverseNameStringForIpAddressW")
Interceptor.attach(DnsWriteReverseNameStringForIpAddressW, {onLeave: function (args) {send("DnsWriteReverseNameStringForIpAddressW");}});

var Dns_AddRecordsToMessage = Module.findExportByName("dnsapi.dll", "Dns_AddRecordsToMessage")
Interceptor.attach(Dns_AddRecordsToMessage, {onLeave: function (args) {send("Dns_AddRecordsToMessage");}});

var Dns_AllocateMsgBuf = Module.findExportByName("dnsapi.dll", "Dns_AllocateMsgBuf")
Interceptor.attach(Dns_AllocateMsgBuf, {onLeave: function (args) {send("Dns_AllocateMsgBuf");}});

var Dns_BuildPacket = Module.findExportByName("dnsapi.dll", "Dns_BuildPacket")
Interceptor.attach(Dns_BuildPacket, {onLeave: function (args) {send("Dns_BuildPacket");}});

var Dns_CacheServiceCleanup = Module.findExportByName("dnsapi.dll", "Dns_CacheServiceCleanup")
Interceptor.attach(Dns_CacheServiceCleanup, {onLeave: function (args) {send("Dns_CacheServiceCleanup");}});

var Dns_CacheServiceInit = Module.findExportByName("dnsapi.dll", "Dns_CacheServiceInit")
Interceptor.attach(Dns_CacheServiceInit, {onLeave: function (args) {send("Dns_CacheServiceInit");}});

var Dns_CacheServiceInitEx = Module.findExportByName("dnsapi.dll", "Dns_CacheServiceInitEx")
Interceptor.attach(Dns_CacheServiceInitEx, {onLeave: function (args) {send("Dns_CacheServiceInitEx");}});

var Dns_CacheServiceStopIssued = Module.findExportByName("dnsapi.dll", "Dns_CacheServiceStopIssued")
Interceptor.attach(Dns_CacheServiceStopIssued, {onLeave: function (args) {send("Dns_CacheServiceStopIssued");}});

var Dns_CleanupWinsock = Module.findExportByName("dnsapi.dll", "Dns_CleanupWinsock")
Interceptor.attach(Dns_CleanupWinsock, {onLeave: function (args) {send("Dns_CleanupWinsock");}});

var Dns_CloseConnection = Module.findExportByName("dnsapi.dll", "Dns_CloseConnection")
Interceptor.attach(Dns_CloseConnection, {onLeave: function (args) {send("Dns_CloseConnection");}});

var Dns_CloseSocket = Module.findExportByName("dnsapi.dll", "Dns_CloseSocket")
Interceptor.attach(Dns_CloseSocket, {onLeave: function (args) {send("Dns_CloseSocket");}});

var Dns_CreateMulticastSocket = Module.findExportByName("dnsapi.dll", "Dns_CreateMulticastSocket")
Interceptor.attach(Dns_CreateMulticastSocket, {onLeave: function (args) {send("Dns_CreateMulticastSocket");}});

var Dns_CreateSocket = Module.findExportByName("dnsapi.dll", "Dns_CreateSocket")
Interceptor.attach(Dns_CreateSocket, {onLeave: function (args) {send("Dns_CreateSocket");}});

var Dns_CreateSocketEx = Module.findExportByName("dnsapi.dll", "Dns_CreateSocketEx")
Interceptor.attach(Dns_CreateSocketEx, {onLeave: function (args) {send("Dns_CreateSocketEx");}});

var Dns_ExtractRecordsFromMessage = Module.findExportByName("dnsapi.dll", "Dns_ExtractRecordsFromMessage")
Interceptor.attach(Dns_ExtractRecordsFromMessage, {onLeave: function (args) {send("Dns_ExtractRecordsFromMessage");}});

var Dns_FindAuthoritativeZoneLib = Module.findExportByName("dnsapi.dll", "Dns_FindAuthoritativeZoneLib")
Interceptor.attach(Dns_FindAuthoritativeZoneLib, {onLeave: function (args) {send("Dns_FindAuthoritativeZoneLib");}});

var Dns_FreeMsgBuf = Module.findExportByName("dnsapi.dll", "Dns_FreeMsgBuf")
Interceptor.attach(Dns_FreeMsgBuf, {onLeave: function (args) {send("Dns_FreeMsgBuf");}});

var Dns_GetRandomXid = Module.findExportByName("dnsapi.dll", "Dns_GetRandomXid")
Interceptor.attach(Dns_GetRandomXid, {onLeave: function (args) {send("Dns_GetRandomXid");}});

var Dns_InitializeMsgBuf = Module.findExportByName("dnsapi.dll", "Dns_InitializeMsgBuf")
Interceptor.attach(Dns_InitializeMsgBuf, {onLeave: function (args) {send("Dns_InitializeMsgBuf");}});

var Dns_InitializeMsgRemoteSockaddr = Module.findExportByName("dnsapi.dll", "Dns_InitializeMsgRemoteSockaddr")
Interceptor.attach(Dns_InitializeMsgRemoteSockaddr, {onLeave: function (args) {send("Dns_InitializeMsgRemoteSockaddr");}});

var Dns_InitializeWinsock = Module.findExportByName("dnsapi.dll", "Dns_InitializeWinsock")
Interceptor.attach(Dns_InitializeWinsock, {onLeave: function (args) {send("Dns_InitializeWinsock");}});

var Dns_OpenTcpConnectionAndSend = Module.findExportByName("dnsapi.dll", "Dns_OpenTcpConnectionAndSend")
Interceptor.attach(Dns_OpenTcpConnectionAndSend, {onLeave: function (args) {send("Dns_OpenTcpConnectionAndSend");}});

var Dns_ParseMessage = Module.findExportByName("dnsapi.dll", "Dns_ParseMessage")
Interceptor.attach(Dns_ParseMessage, {onLeave: function (args) {send("Dns_ParseMessage");}});

var Dns_ParsePacketRecord = Module.findExportByName("dnsapi.dll", "Dns_ParsePacketRecord")
Interceptor.attach(Dns_ParsePacketRecord, {onLeave: function (args) {send("Dns_ParsePacketRecord");}});

var Dns_PingAdapterServers = Module.findExportByName("dnsapi.dll", "Dns_PingAdapterServers")
Interceptor.attach(Dns_PingAdapterServers, {onLeave: function (args) {send("Dns_PingAdapterServers");}});

var Dns_ReadPacketName = Module.findExportByName("dnsapi.dll", "Dns_ReadPacketName")
Interceptor.attach(Dns_ReadPacketName, {onLeave: function (args) {send("Dns_ReadPacketName");}});

var Dns_ReadPacketNameAllocate = Module.findExportByName("dnsapi.dll", "Dns_ReadPacketNameAllocate")
Interceptor.attach(Dns_ReadPacketNameAllocate, {onLeave: function (args) {send("Dns_ReadPacketNameAllocate");}});

var Dns_ReadRecordStructureFromPacket = Module.findExportByName("dnsapi.dll", "Dns_ReadRecordStructureFromPacket")
Interceptor.attach(Dns_ReadRecordStructureFromPacket, {onLeave: function (args) {send("Dns_ReadRecordStructureFromPacket");}});

var Dns_RecvTcp = Module.findExportByName("dnsapi.dll", "Dns_RecvTcp")
Interceptor.attach(Dns_RecvTcp, {onLeave: function (args) {send("Dns_RecvTcp");}});

var Dns_ResetNetworkInfo = Module.findExportByName("dnsapi.dll", "Dns_ResetNetworkInfo")
Interceptor.attach(Dns_ResetNetworkInfo, {onLeave: function (args) {send("Dns_ResetNetworkInfo");}});

var Dns_SendAndRecvUdp = Module.findExportByName("dnsapi.dll", "Dns_SendAndRecvUdp")
Interceptor.attach(Dns_SendAndRecvUdp, {onLeave: function (args) {send("Dns_SendAndRecvUdp");}});

var Dns_SendEx = Module.findExportByName("dnsapi.dll", "Dns_SendEx")
Interceptor.attach(Dns_SendEx, {onLeave: function (args) {send("Dns_SendEx");}});

var Dns_SetRecordDatalength = Module.findExportByName("dnsapi.dll", "Dns_SetRecordDatalength")
Interceptor.attach(Dns_SetRecordDatalength, {onLeave: function (args) {send("Dns_SetRecordDatalength");}});

var Dns_SetRecordsScopeId = Module.findExportByName("dnsapi.dll", "Dns_SetRecordsScopeId")
Interceptor.attach(Dns_SetRecordsScopeId, {onLeave: function (args) {send("Dns_SetRecordsScopeId");}});

var Dns_SetRecordsSection = Module.findExportByName("dnsapi.dll", "Dns_SetRecordsSection")
Interceptor.attach(Dns_SetRecordsSection, {onLeave: function (args) {send("Dns_SetRecordsSection");}});

var Dns_SetRecordsTtl = Module.findExportByName("dnsapi.dll", "Dns_SetRecordsTtl")
Interceptor.attach(Dns_SetRecordsTtl, {onLeave: function (args) {send("Dns_SetRecordsTtl");}});

var Dns_SkipPacketName = Module.findExportByName("dnsapi.dll", "Dns_SkipPacketName")
Interceptor.attach(Dns_SkipPacketName, {onLeave: function (args) {send("Dns_SkipPacketName");}});

var Dns_SkipToRecord = Module.findExportByName("dnsapi.dll", "Dns_SkipToRecord")
Interceptor.attach(Dns_SkipToRecord, {onLeave: function (args) {send("Dns_SkipToRecord");}});

var Dns_UpdateLib = Module.findExportByName("dnsapi.dll", "Dns_UpdateLib")
Interceptor.attach(Dns_UpdateLib, {onLeave: function (args) {send("Dns_UpdateLib");}});

var Dns_UpdateLibEx = Module.findExportByName("dnsapi.dll", "Dns_UpdateLibEx")
Interceptor.attach(Dns_UpdateLibEx, {onLeave: function (args) {send("Dns_UpdateLibEx");}});

var Dns_WriteDottedNameToPacket = Module.findExportByName("dnsapi.dll", "Dns_WriteDottedNameToPacket")
Interceptor.attach(Dns_WriteDottedNameToPacket, {onLeave: function (args) {send("Dns_WriteDottedNameToPacket");}});

var Dns_WriteQuestionToMessage = Module.findExportByName("dnsapi.dll", "Dns_WriteQuestionToMessage")
Interceptor.attach(Dns_WriteQuestionToMessage, {onLeave: function (args) {send("Dns_WriteQuestionToMessage");}});

var Dns_WriteRecordStructureToPacketEx = Module.findExportByName("dnsapi.dll", "Dns_WriteRecordStructureToPacketEx")
Interceptor.attach(Dns_WriteRecordStructureToPacketEx, {onLeave: function (args) {send("Dns_WriteRecordStructureToPacketEx");}});

var ExtraInfo_Init = Module.findExportByName("dnsapi.dll", "ExtraInfo_Init")
Interceptor.attach(ExtraInfo_Init, {onLeave: function (args) {send("ExtraInfo_Init");}});

var Faz_AreServerListsInSameNameSpace = Module.findExportByName("dnsapi.dll", "Faz_AreServerListsInSameNameSpace")
Interceptor.attach(Faz_AreServerListsInSameNameSpace, {onLeave: function (args) {send("Faz_AreServerListsInSameNameSpace");}});

var FlushDnsPolicyUnreachableStatus = Module.findExportByName("dnsapi.dll", "FlushDnsPolicyUnreachableStatus")
Interceptor.attach(FlushDnsPolicyUnreachableStatus, {onLeave: function (args) {send("FlushDnsPolicyUnreachableStatus");}});

var GetCurrentTimeInSeconds = Module.findExportByName("dnsapi.dll", "GetCurrentTimeInSeconds")
Interceptor.attach(GetCurrentTimeInSeconds, {onLeave: function (args) {send("GetCurrentTimeInSeconds");}});

var HostsFile_Close = Module.findExportByName("dnsapi.dll", "HostsFile_Close")
Interceptor.attach(HostsFile_Close, {onLeave: function (args) {send("HostsFile_Close");}});

var HostsFile_Open = Module.findExportByName("dnsapi.dll", "HostsFile_Open")
Interceptor.attach(HostsFile_Open, {onLeave: function (args) {send("HostsFile_Open");}});

var HostsFile_ReadLine = Module.findExportByName("dnsapi.dll", "HostsFile_ReadLine")
Interceptor.attach(HostsFile_ReadLine, {onLeave: function (args) {send("HostsFile_ReadLine");}});

var IpHelp_IsAddrOnLink = Module.findExportByName("dnsapi.dll", "IpHelp_IsAddrOnLink")
Interceptor.attach(IpHelp_IsAddrOnLink, {onLeave: function (args) {send("IpHelp_IsAddrOnLink");}});

var Local_GetRecordsForLocalName = Module.findExportByName("dnsapi.dll", "Local_GetRecordsForLocalName")
Interceptor.attach(Local_GetRecordsForLocalName, {onLeave: function (args) {send("Local_GetRecordsForLocalName");}});

var Local_GetRecordsForLocalNameEx = Module.findExportByName("dnsapi.dll", "Local_GetRecordsForLocalNameEx")
Interceptor.attach(Local_GetRecordsForLocalNameEx, {onLeave: function (args) {send("Local_GetRecordsForLocalNameEx");}});

var NetInfo_Build = Module.findExportByName("dnsapi.dll", "NetInfo_Build")
Interceptor.attach(NetInfo_Build, {onLeave: function (args) {send("NetInfo_Build");}});

var NetInfo_BuildEx = Module.findExportByName("dnsapi.dll", "NetInfo_BuildEx")
Interceptor.attach(NetInfo_BuildEx, {onLeave: function (args) {send("NetInfo_BuildEx");}});

var NetInfo_Clean = Module.findExportByName("dnsapi.dll", "NetInfo_Clean")
Interceptor.attach(NetInfo_Clean, {onLeave: function (args) {send("NetInfo_Clean");}});

var NetInfo_Copy = Module.findExportByName("dnsapi.dll", "NetInfo_Copy")
Interceptor.attach(NetInfo_Copy, {onLeave: function (args) {send("NetInfo_Copy");}});

var NetInfo_CopyNetworkIndex = Module.findExportByName("dnsapi.dll", "NetInfo_CopyNetworkIndex")
Interceptor.attach(NetInfo_CopyNetworkIndex, {onLeave: function (args) {send("NetInfo_CopyNetworkIndex");}});

var NetInfo_CreatePerNetworkNetinfo = Module.findExportByName("dnsapi.dll", "NetInfo_CreatePerNetworkNetinfo")
Interceptor.attach(NetInfo_CreatePerNetworkNetinfo, {onLeave: function (args) {send("NetInfo_CreatePerNetworkNetinfo");}});

var NetInfo_Free = Module.findExportByName("dnsapi.dll", "NetInfo_Free")
Interceptor.attach(NetInfo_Free, {onLeave: function (args) {send("NetInfo_Free");}});

var NetInfo_GetAdapterByAddress = Module.findExportByName("dnsapi.dll", "NetInfo_GetAdapterByAddress")
Interceptor.attach(NetInfo_GetAdapterByAddress, {onLeave: function (args) {send("NetInfo_GetAdapterByAddress");}});

var NetInfo_GetAdapterByInterfaceIndex = Module.findExportByName("dnsapi.dll", "NetInfo_GetAdapterByInterfaceIndex")
Interceptor.attach(NetInfo_GetAdapterByInterfaceIndex, {onLeave: function (args) {send("NetInfo_GetAdapterByInterfaceIndex");}});

var NetInfo_GetAdapterByName = Module.findExportByName("dnsapi.dll", "NetInfo_GetAdapterByName")
Interceptor.attach(NetInfo_GetAdapterByName, {onLeave: function (args) {send("NetInfo_GetAdapterByName");}});

var NetInfo_IsAddrConfig = Module.findExportByName("dnsapi.dll", "NetInfo_IsAddrConfig")
Interceptor.attach(NetInfo_IsAddrConfig, {onLeave: function (args) {send("NetInfo_IsAddrConfig");}});

var NetInfo_IsForUpdate = Module.findExportByName("dnsapi.dll", "NetInfo_IsForUpdate")
Interceptor.attach(NetInfo_IsForUpdate, {onLeave: function (args) {send("NetInfo_IsForUpdate");}});

var NetInfo_IsTcpipConfigChange = Module.findExportByName("dnsapi.dll", "NetInfo_IsTcpipConfigChange")
Interceptor.attach(NetInfo_IsTcpipConfigChange, {onLeave: function (args) {send("NetInfo_IsTcpipConfigChange");}});

var NetInfo_ResetServerPriorities = Module.findExportByName("dnsapi.dll", "NetInfo_ResetServerPriorities")
Interceptor.attach(NetInfo_ResetServerPriorities, {onLeave: function (args) {send("NetInfo_ResetServerPriorities");}});

var NetInfo_UpdateDnsInterfaceConfigChange = Module.findExportByName("dnsapi.dll", "NetInfo_UpdateDnsInterfaceConfigChange")
Interceptor.attach(NetInfo_UpdateDnsInterfaceConfigChange, {onLeave: function (args) {send("NetInfo_UpdateDnsInterfaceConfigChange");}});

var NetInfo_UpdateNetworkProperties = Module.findExportByName("dnsapi.dll", "NetInfo_UpdateNetworkProperties")
Interceptor.attach(NetInfo_UpdateNetworkProperties, {onLeave: function (args) {send("NetInfo_UpdateNetworkProperties");}});

var NetInfo_UpdateServerReachability = Module.findExportByName("dnsapi.dll", "NetInfo_UpdateServerReachability")
Interceptor.attach(NetInfo_UpdateServerReachability, {onLeave: function (args) {send("NetInfo_UpdateServerReachability");}});

var QueryDirectEx = Module.findExportByName("dnsapi.dll", "QueryDirectEx")
Interceptor.attach(QueryDirectEx, {onLeave: function (args) {send("QueryDirectEx");}});

var Query_Cancel = Module.findExportByName("dnsapi.dll", "Query_Cancel")
Interceptor.attach(Query_Cancel, {onLeave: function (args) {send("Query_Cancel");}});

var Query_InProcSetCompletion = Module.findExportByName("dnsapi.dll", "Query_InProcSetCompletion")
Interceptor.attach(Query_InProcSetCompletion, {onLeave: function (args) {send("Query_InProcSetCompletion");}});

var Query_Main = Module.findExportByName("dnsapi.dll", "Query_Main")
Interceptor.attach(Query_Main, {onLeave: function (args) {send("Query_Main");}});

var Reg_FreeUpdateInfo = Module.findExportByName("dnsapi.dll", "Reg_FreeUpdateInfo")
Interceptor.attach(Reg_FreeUpdateInfo, {onLeave: function (args) {send("Reg_FreeUpdateInfo");}});

var Reg_GetValueEx = Module.findExportByName("dnsapi.dll", "Reg_GetValueEx")
Interceptor.attach(Reg_GetValueEx, {onLeave: function (args) {send("Reg_GetValueEx");}});

var Reg_ReadGlobalsEx = Module.findExportByName("dnsapi.dll", "Reg_ReadGlobalsEx")
Interceptor.attach(Reg_ReadGlobalsEx, {onLeave: function (args) {send("Reg_ReadGlobalsEx");}});

var Reg_ReadUpdateInfo = Module.findExportByName("dnsapi.dll", "Reg_ReadUpdateInfo")
Interceptor.attach(Reg_ReadUpdateInfo, {onLeave: function (args) {send("Reg_ReadUpdateInfo");}});

var Security_ContextListTimeout = Module.findExportByName("dnsapi.dll", "Security_ContextListTimeout")
Interceptor.attach(Security_ContextListTimeout, {onLeave: function (args) {send("Security_ContextListTimeout");}});

var Send_AndRecvUdpWithParam = Module.findExportByName("dnsapi.dll", "Send_AndRecvUdpWithParam")
Interceptor.attach(Send_AndRecvUdpWithParam, {onLeave: function (args) {send("Send_AndRecvUdpWithParam");}});

var Send_MessagePrivate = Module.findExportByName("dnsapi.dll", "Send_MessagePrivate")
Interceptor.attach(Send_MessagePrivate, {onLeave: function (args) {send("Send_MessagePrivate");}});

var Send_MessagePrivateEx = Module.findExportByName("dnsapi.dll", "Send_MessagePrivateEx")
Interceptor.attach(Send_MessagePrivateEx, {onLeave: function (args) {send("Send_MessagePrivateEx");}});

var Send_OpenTcpConnectionAndSend = Module.findExportByName("dnsapi.dll", "Send_OpenTcpConnectionAndSend")
Interceptor.attach(Send_OpenTcpConnectionAndSend, {onLeave: function (args) {send("Send_OpenTcpConnectionAndSend");}});

var Socket_CacheCleanup = Module.findExportByName("dnsapi.dll", "Socket_CacheCleanup")
Interceptor.attach(Socket_CacheCleanup, {onLeave: function (args) {send("Socket_CacheCleanup");}});

var Socket_CacheInit = Module.findExportByName("dnsapi.dll", "Socket_CacheInit")
Interceptor.attach(Socket_CacheInit, {onLeave: function (args) {send("Socket_CacheInit");}});

var Socket_CleanupWinsock = Module.findExportByName("dnsapi.dll", "Socket_CleanupWinsock")
Interceptor.attach(Socket_CleanupWinsock, {onLeave: function (args) {send("Socket_CleanupWinsock");}});

var Socket_ClearMessageSockets = Module.findExportByName("dnsapi.dll", "Socket_ClearMessageSockets")
Interceptor.attach(Socket_ClearMessageSockets, {onLeave: function (args) {send("Socket_ClearMessageSockets");}});

var Socket_CloseEx = Module.findExportByName("dnsapi.dll", "Socket_CloseEx")
Interceptor.attach(Socket_CloseEx, {onLeave: function (args) {send("Socket_CloseEx");}});

var Socket_CloseMessageSockets = Module.findExportByName("dnsapi.dll", "Socket_CloseMessageSockets")
Interceptor.attach(Socket_CloseMessageSockets, {onLeave: function (args) {send("Socket_CloseMessageSockets");}});

var Socket_Create = Module.findExportByName("dnsapi.dll", "Socket_Create")
Interceptor.attach(Socket_Create, {onLeave: function (args) {send("Socket_Create");}});

var Socket_CreateMulticast = Module.findExportByName("dnsapi.dll", "Socket_CreateMulticast")
Interceptor.attach(Socket_CreateMulticast, {onLeave: function (args) {send("Socket_CreateMulticast");}});

var Socket_InitWinsock = Module.findExportByName("dnsapi.dll", "Socket_InitWinsock")
Interceptor.attach(Socket_InitWinsock, {onLeave: function (args) {send("Socket_InitWinsock");}});

var Socket_JoinMulticast = Module.findExportByName("dnsapi.dll", "Socket_JoinMulticast")
Interceptor.attach(Socket_JoinMulticast, {onLeave: function (args) {send("Socket_JoinMulticast");}});

var Socket_RecvFrom = Module.findExportByName("dnsapi.dll", "Socket_RecvFrom")
Interceptor.attach(Socket_RecvFrom, {onLeave: function (args) {send("Socket_RecvFrom");}});

var Socket_SetMulticastInterface = Module.findExportByName("dnsapi.dll", "Socket_SetMulticastInterface")
Interceptor.attach(Socket_SetMulticastInterface, {onLeave: function (args) {send("Socket_SetMulticastInterface");}});

var Socket_SetMulticastLoopBack = Module.findExportByName("dnsapi.dll", "Socket_SetMulticastLoopBack")
Interceptor.attach(Socket_SetMulticastLoopBack, {onLeave: function (args) {send("Socket_SetMulticastLoopBack");}});

var Socket_SetTtl = Module.findExportByName("dnsapi.dll", "Socket_SetTtl")
Interceptor.attach(Socket_SetTtl, {onLeave: function (args) {send("Socket_SetTtl");}});

var Socket_TcpListen = Module.findExportByName("dnsapi.dll", "Socket_TcpListen")
Interceptor.attach(Socket_TcpListen, {onLeave: function (args) {send("Socket_TcpListen");}});

var ThreadPool_QueueWork = Module.findExportByName("dnsapi.dll", "ThreadPool_QueueWork")
Interceptor.attach(ThreadPool_QueueWork, {onLeave: function (args) {send("ThreadPool_QueueWork");}});

var Trace_Reset = Module.findExportByName("dnsapi.dll", "Trace_Reset")
Interceptor.attach(Trace_Reset, {onLeave: function (args) {send("Trace_Reset");}});

var Update_ReplaceAddressRecordsW = Module.findExportByName("dnsapi.dll", "Update_ReplaceAddressRecordsW")
Interceptor.attach(Update_ReplaceAddressRecordsW, {onLeave: function (args) {send("Update_ReplaceAddressRecordsW");}});

var Util_IsIp6Running = Module.findExportByName("dnsapi.dll", "Util_IsIp6Running")
Interceptor.attach(Util_IsIp6Running, {onLeave: function (args) {send("Util_IsIp6Running");}});

var Util_IsRunningOnXboxOne = Module.findExportByName("dnsapi.dll", "Util_IsRunningOnXboxOne")
Interceptor.attach(Util_IsRunningOnXboxOne, {onLeave: function (args) {send("Util_IsRunningOnXboxOne");}});

var WriteDnsNrptRulesToRegistry = Module.findExportByName("dnsapi.dll", "WriteDnsNrptRulesToRegistry")
Interceptor.attach(WriteDnsNrptRulesToRegistry, {onLeave: function (args) {send("WriteDnsNrptRulesToRegistry");}});

