var ClearPropVariantArray = Module.findExportByName("propsys.dll", "ClearPropVariantArray")
Interceptor.attach(ClearPropVariantArray, {onLeave: function (args) {send("ClearPropVariantArray");}});

var ClearVariantArray = Module.findExportByName("propsys.dll", "ClearVariantArray")
Interceptor.attach(ClearVariantArray, {onLeave: function (args) {send("ClearVariantArray");}});

var DllCanUnloadNow = Module.findExportByName("propsys.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetClassObject = Module.findExportByName("propsys.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var DllRegisterServer = Module.findExportByName("propsys.dll", "DllRegisterServer")
Interceptor.attach(DllRegisterServer, {onLeave: function (args) {send("DllRegisterServer");}});

var DllUnregisterServer = Module.findExportByName("propsys.dll", "DllUnregisterServer")
Interceptor.attach(DllUnregisterServer, {onLeave: function (args) {send("DllUnregisterServer");}});

var GetProxyDllInfo = Module.findExportByName("propsys.dll", "GetProxyDllInfo")
Interceptor.attach(GetProxyDllInfo, {onLeave: function (args) {send("GetProxyDllInfo");}});

var InitPropVariantFromBooleanVector = Module.findExportByName("propsys.dll", "InitPropVariantFromBooleanVector")
Interceptor.attach(InitPropVariantFromBooleanVector, {onLeave: function (args) {send("InitPropVariantFromBooleanVector");}});

var InitPropVariantFromBuffer = Module.findExportByName("propsys.dll", "InitPropVariantFromBuffer")
Interceptor.attach(InitPropVariantFromBuffer, {onLeave: function (args) {send("InitPropVariantFromBuffer");}});

var InitPropVariantFromCLSID = Module.findExportByName("propsys.dll", "InitPropVariantFromCLSID")
Interceptor.attach(InitPropVariantFromCLSID, {onLeave: function (args) {send("InitPropVariantFromCLSID");}});

var InitPropVariantFromDoubleVector = Module.findExportByName("propsys.dll", "InitPropVariantFromDoubleVector")
Interceptor.attach(InitPropVariantFromDoubleVector, {onLeave: function (args) {send("InitPropVariantFromDoubleVector");}});

var InitPropVariantFromFileTime = Module.findExportByName("propsys.dll", "InitPropVariantFromFileTime")
Interceptor.attach(InitPropVariantFromFileTime, {onLeave: function (args) {send("InitPropVariantFromFileTime");}});

var InitPropVariantFromFileTimeVector = Module.findExportByName("propsys.dll", "InitPropVariantFromFileTimeVector")
Interceptor.attach(InitPropVariantFromFileTimeVector, {onLeave: function (args) {send("InitPropVariantFromFileTimeVector");}});

var InitPropVariantFromGUIDAsString = Module.findExportByName("propsys.dll", "InitPropVariantFromGUIDAsString")
Interceptor.attach(InitPropVariantFromGUIDAsString, {onLeave: function (args) {send("InitPropVariantFromGUIDAsString");}});

var InitPropVariantFromInt16Vector = Module.findExportByName("propsys.dll", "InitPropVariantFromInt16Vector")
Interceptor.attach(InitPropVariantFromInt16Vector, {onLeave: function (args) {send("InitPropVariantFromInt16Vector");}});

var InitPropVariantFromInt32Vector = Module.findExportByName("propsys.dll", "InitPropVariantFromInt32Vector")
Interceptor.attach(InitPropVariantFromInt32Vector, {onLeave: function (args) {send("InitPropVariantFromInt32Vector");}});

var InitPropVariantFromInt64Vector = Module.findExportByName("propsys.dll", "InitPropVariantFromInt64Vector")
Interceptor.attach(InitPropVariantFromInt64Vector, {onLeave: function (args) {send("InitPropVariantFromInt64Vector");}});

var InitPropVariantFromPropVariantVectorElem = Module.findExportByName("propsys.dll", "InitPropVariantFromPropVariantVectorElem")
Interceptor.attach(InitPropVariantFromPropVariantVectorElem, {onLeave: function (args) {send("InitPropVariantFromPropVariantVectorElem");}});

var InitPropVariantFromResource = Module.findExportByName("propsys.dll", "InitPropVariantFromResource")
Interceptor.attach(InitPropVariantFromResource, {onLeave: function (args) {send("InitPropVariantFromResource");}});

var InitPropVariantFromStrRet = Module.findExportByName("propsys.dll", "InitPropVariantFromStrRet")
Interceptor.attach(InitPropVariantFromStrRet, {onLeave: function (args) {send("InitPropVariantFromStrRet");}});

var InitPropVariantFromStringAsVector = Module.findExportByName("propsys.dll", "InitPropVariantFromStringAsVector")
Interceptor.attach(InitPropVariantFromStringAsVector, {onLeave: function (args) {send("InitPropVariantFromStringAsVector");}});

var InitPropVariantFromStringVector = Module.findExportByName("propsys.dll", "InitPropVariantFromStringVector")
Interceptor.attach(InitPropVariantFromStringVector, {onLeave: function (args) {send("InitPropVariantFromStringVector");}});

var InitPropVariantFromUInt16Vector = Module.findExportByName("propsys.dll", "InitPropVariantFromUInt16Vector")
Interceptor.attach(InitPropVariantFromUInt16Vector, {onLeave: function (args) {send("InitPropVariantFromUInt16Vector");}});

var InitPropVariantFromUInt32Vector = Module.findExportByName("propsys.dll", "InitPropVariantFromUInt32Vector")
Interceptor.attach(InitPropVariantFromUInt32Vector, {onLeave: function (args) {send("InitPropVariantFromUInt32Vector");}});

var InitPropVariantFromUInt64Vector = Module.findExportByName("propsys.dll", "InitPropVariantFromUInt64Vector")
Interceptor.attach(InitPropVariantFromUInt64Vector, {onLeave: function (args) {send("InitPropVariantFromUInt64Vector");}});

var InitPropVariantVectorFromPropVariant = Module.findExportByName("propsys.dll", "InitPropVariantVectorFromPropVariant")
Interceptor.attach(InitPropVariantVectorFromPropVariant, {onLeave: function (args) {send("InitPropVariantVectorFromPropVariant");}});

var InitVariantFromBooleanArray = Module.findExportByName("propsys.dll", "InitVariantFromBooleanArray")
Interceptor.attach(InitVariantFromBooleanArray, {onLeave: function (args) {send("InitVariantFromBooleanArray");}});

var InitVariantFromBuffer = Module.findExportByName("propsys.dll", "InitVariantFromBuffer")
Interceptor.attach(InitVariantFromBuffer, {onLeave: function (args) {send("InitVariantFromBuffer");}});

var InitVariantFromDoubleArray = Module.findExportByName("propsys.dll", "InitVariantFromDoubleArray")
Interceptor.attach(InitVariantFromDoubleArray, {onLeave: function (args) {send("InitVariantFromDoubleArray");}});

var InitVariantFromFileTime = Module.findExportByName("propsys.dll", "InitVariantFromFileTime")
Interceptor.attach(InitVariantFromFileTime, {onLeave: function (args) {send("InitVariantFromFileTime");}});

var InitVariantFromFileTimeArray = Module.findExportByName("propsys.dll", "InitVariantFromFileTimeArray")
Interceptor.attach(InitVariantFromFileTimeArray, {onLeave: function (args) {send("InitVariantFromFileTimeArray");}});

var InitVariantFromGUIDAsString = Module.findExportByName("propsys.dll", "InitVariantFromGUIDAsString")
Interceptor.attach(InitVariantFromGUIDAsString, {onLeave: function (args) {send("InitVariantFromGUIDAsString");}});

var InitVariantFromInt16Array = Module.findExportByName("propsys.dll", "InitVariantFromInt16Array")
Interceptor.attach(InitVariantFromInt16Array, {onLeave: function (args) {send("InitVariantFromInt16Array");}});

var InitVariantFromInt32Array = Module.findExportByName("propsys.dll", "InitVariantFromInt32Array")
Interceptor.attach(InitVariantFromInt32Array, {onLeave: function (args) {send("InitVariantFromInt32Array");}});

var InitVariantFromInt64Array = Module.findExportByName("propsys.dll", "InitVariantFromInt64Array")
Interceptor.attach(InitVariantFromInt64Array, {onLeave: function (args) {send("InitVariantFromInt64Array");}});

var InitVariantFromResource = Module.findExportByName("propsys.dll", "InitVariantFromResource")
Interceptor.attach(InitVariantFromResource, {onLeave: function (args) {send("InitVariantFromResource");}});

var InitVariantFromStrRet = Module.findExportByName("propsys.dll", "InitVariantFromStrRet")
Interceptor.attach(InitVariantFromStrRet, {onLeave: function (args) {send("InitVariantFromStrRet");}});

var InitVariantFromStringArray = Module.findExportByName("propsys.dll", "InitVariantFromStringArray")
Interceptor.attach(InitVariantFromStringArray, {onLeave: function (args) {send("InitVariantFromStringArray");}});

var InitVariantFromUInt16Array = Module.findExportByName("propsys.dll", "InitVariantFromUInt16Array")
Interceptor.attach(InitVariantFromUInt16Array, {onLeave: function (args) {send("InitVariantFromUInt16Array");}});

var InitVariantFromUInt32Array = Module.findExportByName("propsys.dll", "InitVariantFromUInt32Array")
Interceptor.attach(InitVariantFromUInt32Array, {onLeave: function (args) {send("InitVariantFromUInt32Array");}});

var InitVariantFromUInt64Array = Module.findExportByName("propsys.dll", "InitVariantFromUInt64Array")
Interceptor.attach(InitVariantFromUInt64Array, {onLeave: function (args) {send("InitVariantFromUInt64Array");}});

var InitVariantFromVariantArrayElem = Module.findExportByName("propsys.dll", "InitVariantFromVariantArrayElem")
Interceptor.attach(InitVariantFromVariantArrayElem, {onLeave: function (args) {send("InitVariantFromVariantArrayElem");}});

var PSCoerceToCanonicalValue = Module.findExportByName("propsys.dll", "PSCoerceToCanonicalValue")
Interceptor.attach(PSCoerceToCanonicalValue, {onLeave: function (args) {send("PSCoerceToCanonicalValue");}});

var PSCreateAdapterFromPropertyStore = Module.findExportByName("propsys.dll", "PSCreateAdapterFromPropertyStore")
Interceptor.attach(PSCreateAdapterFromPropertyStore, {onLeave: function (args) {send("PSCreateAdapterFromPropertyStore");}});

var PSCreateDelayedMultiplexPropertyStore = Module.findExportByName("propsys.dll", "PSCreateDelayedMultiplexPropertyStore")
Interceptor.attach(PSCreateDelayedMultiplexPropertyStore, {onLeave: function (args) {send("PSCreateDelayedMultiplexPropertyStore");}});

var PSCreateMemoryPropertyStore = Module.findExportByName("propsys.dll", "PSCreateMemoryPropertyStore")
Interceptor.attach(PSCreateMemoryPropertyStore, {onLeave: function (args) {send("PSCreateMemoryPropertyStore");}});

var PSCreateMultiplexPropertyStore = Module.findExportByName("propsys.dll", "PSCreateMultiplexPropertyStore")
Interceptor.attach(PSCreateMultiplexPropertyStore, {onLeave: function (args) {send("PSCreateMultiplexPropertyStore");}});

var PSCreatePropertyChangeArray = Module.findExportByName("propsys.dll", "PSCreatePropertyChangeArray")
Interceptor.attach(PSCreatePropertyChangeArray, {onLeave: function (args) {send("PSCreatePropertyChangeArray");}});

var PSCreatePropertyStoreFromObject = Module.findExportByName("propsys.dll", "PSCreatePropertyStoreFromObject")
Interceptor.attach(PSCreatePropertyStoreFromObject, {onLeave: function (args) {send("PSCreatePropertyStoreFromObject");}});

var PSCreatePropertyStoreFromPropertySetStorage = Module.findExportByName("propsys.dll", "PSCreatePropertyStoreFromPropertySetStorage")
Interceptor.attach(PSCreatePropertyStoreFromPropertySetStorage, {onLeave: function (args) {send("PSCreatePropertyStoreFromPropertySetStorage");}});

var PSCreateSimplePropertyChange = Module.findExportByName("propsys.dll", "PSCreateSimplePropertyChange")
Interceptor.attach(PSCreateSimplePropertyChange, {onLeave: function (args) {send("PSCreateSimplePropertyChange");}});

var PSEnumeratePropertyDescriptions = Module.findExportByName("propsys.dll", "PSEnumeratePropertyDescriptions")
Interceptor.attach(PSEnumeratePropertyDescriptions, {onLeave: function (args) {send("PSEnumeratePropertyDescriptions");}});

var PSFormatForDisplay = Module.findExportByName("propsys.dll", "PSFormatForDisplay")
Interceptor.attach(PSFormatForDisplay, {onLeave: function (args) {send("PSFormatForDisplay");}});

var PSFormatForDisplayAlloc = Module.findExportByName("propsys.dll", "PSFormatForDisplayAlloc")
Interceptor.attach(PSFormatForDisplayAlloc, {onLeave: function (args) {send("PSFormatForDisplayAlloc");}});

var PSFormatPropertyValue = Module.findExportByName("propsys.dll", "PSFormatPropertyValue")
Interceptor.attach(PSFormatPropertyValue, {onLeave: function (args) {send("PSFormatPropertyValue");}});

var PSGetImageReferenceForValue = Module.findExportByName("propsys.dll", "PSGetImageReferenceForValue")
Interceptor.attach(PSGetImageReferenceForValue, {onLeave: function (args) {send("PSGetImageReferenceForValue");}});

var PSGetItemPropertyHandler = Module.findExportByName("propsys.dll", "PSGetItemPropertyHandler")
Interceptor.attach(PSGetItemPropertyHandler, {onLeave: function (args) {send("PSGetItemPropertyHandler");}});

var PSGetItemPropertyHandlerWithCreateObject = Module.findExportByName("propsys.dll", "PSGetItemPropertyHandlerWithCreateObject")
Interceptor.attach(PSGetItemPropertyHandlerWithCreateObject, {onLeave: function (args) {send("PSGetItemPropertyHandlerWithCreateObject");}});

var PSGetNameFromPropertyKey = Module.findExportByName("propsys.dll", "PSGetNameFromPropertyKey")
Interceptor.attach(PSGetNameFromPropertyKey, {onLeave: function (args) {send("PSGetNameFromPropertyKey");}});

var PSGetNamedPropertyFromPropertyStorage = Module.findExportByName("propsys.dll", "PSGetNamedPropertyFromPropertyStorage")
Interceptor.attach(PSGetNamedPropertyFromPropertyStorage, {onLeave: function (args) {send("PSGetNamedPropertyFromPropertyStorage");}});

var PSGetPropertyDescription = Module.findExportByName("propsys.dll", "PSGetPropertyDescription")
Interceptor.attach(PSGetPropertyDescription, {onLeave: function (args) {send("PSGetPropertyDescription");}});

var PSGetPropertyDescriptionByName = Module.findExportByName("propsys.dll", "PSGetPropertyDescriptionByName")
Interceptor.attach(PSGetPropertyDescriptionByName, {onLeave: function (args) {send("PSGetPropertyDescriptionByName");}});

var PSGetPropertyDescriptionListFromString = Module.findExportByName("propsys.dll", "PSGetPropertyDescriptionListFromString")
Interceptor.attach(PSGetPropertyDescriptionListFromString, {onLeave: function (args) {send("PSGetPropertyDescriptionListFromString");}});

var PSGetPropertyFromPropertyStorage = Module.findExportByName("propsys.dll", "PSGetPropertyFromPropertyStorage")
Interceptor.attach(PSGetPropertyFromPropertyStorage, {onLeave: function (args) {send("PSGetPropertyFromPropertyStorage");}});

var PSGetPropertyKeyFromName = Module.findExportByName("propsys.dll", "PSGetPropertyKeyFromName")
Interceptor.attach(PSGetPropertyKeyFromName, {onLeave: function (args) {send("PSGetPropertyKeyFromName");}});

var PSGetPropertySystem = Module.findExportByName("propsys.dll", "PSGetPropertySystem")
Interceptor.attach(PSGetPropertySystem, {onLeave: function (args) {send("PSGetPropertySystem");}});

var PSGetPropertyValue = Module.findExportByName("propsys.dll", "PSGetPropertyValue")
Interceptor.attach(PSGetPropertyValue, {onLeave: function (args) {send("PSGetPropertyValue");}});

var PSLookupPropertyHandlerCLSID = Module.findExportByName("propsys.dll", "PSLookupPropertyHandlerCLSID")
Interceptor.attach(PSLookupPropertyHandlerCLSID, {onLeave: function (args) {send("PSLookupPropertyHandlerCLSID");}});

var PSPropertyBag_Delete = Module.findExportByName("propsys.dll", "PSPropertyBag_Delete")
Interceptor.attach(PSPropertyBag_Delete, {onLeave: function (args) {send("PSPropertyBag_Delete");}});

var PSPropertyBag_ReadBOOL = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadBOOL")
Interceptor.attach(PSPropertyBag_ReadBOOL, {onLeave: function (args) {send("PSPropertyBag_ReadBOOL");}});

var PSPropertyBag_ReadBSTR = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadBSTR")
Interceptor.attach(PSPropertyBag_ReadBSTR, {onLeave: function (args) {send("PSPropertyBag_ReadBSTR");}});

var PSPropertyBag_ReadDWORD = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadDWORD")
Interceptor.attach(PSPropertyBag_ReadDWORD, {onLeave: function (args) {send("PSPropertyBag_ReadDWORD");}});

var PSPropertyBag_ReadGUID = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadGUID")
Interceptor.attach(PSPropertyBag_ReadGUID, {onLeave: function (args) {send("PSPropertyBag_ReadGUID");}});

var PSPropertyBag_ReadInt = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadInt")
Interceptor.attach(PSPropertyBag_ReadInt, {onLeave: function (args) {send("PSPropertyBag_ReadInt");}});

var PSPropertyBag_ReadLONG = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadLONG")
Interceptor.attach(PSPropertyBag_ReadLONG, {onLeave: function (args) {send("PSPropertyBag_ReadLONG");}});

var PSPropertyBag_ReadPOINTL = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadPOINTL")
Interceptor.attach(PSPropertyBag_ReadPOINTL, {onLeave: function (args) {send("PSPropertyBag_ReadPOINTL");}});

var PSPropertyBag_ReadPOINTS = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadPOINTS")
Interceptor.attach(PSPropertyBag_ReadPOINTS, {onLeave: function (args) {send("PSPropertyBag_ReadPOINTS");}});

var PSPropertyBag_ReadPropertyKey = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadPropertyKey")
Interceptor.attach(PSPropertyBag_ReadPropertyKey, {onLeave: function (args) {send("PSPropertyBag_ReadPropertyKey");}});

var PSPropertyBag_ReadRECTL = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadRECTL")
Interceptor.attach(PSPropertyBag_ReadRECTL, {onLeave: function (args) {send("PSPropertyBag_ReadRECTL");}});

var PSPropertyBag_ReadSHORT = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadSHORT")
Interceptor.attach(PSPropertyBag_ReadSHORT, {onLeave: function (args) {send("PSPropertyBag_ReadSHORT");}});

var PSPropertyBag_ReadStr = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadStr")
Interceptor.attach(PSPropertyBag_ReadStr, {onLeave: function (args) {send("PSPropertyBag_ReadStr");}});

var PSPropertyBag_ReadStrAlloc = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadStrAlloc")
Interceptor.attach(PSPropertyBag_ReadStrAlloc, {onLeave: function (args) {send("PSPropertyBag_ReadStrAlloc");}});

var PSPropertyBag_ReadStream = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadStream")
Interceptor.attach(PSPropertyBag_ReadStream, {onLeave: function (args) {send("PSPropertyBag_ReadStream");}});

var PSPropertyBag_ReadType = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadType")
Interceptor.attach(PSPropertyBag_ReadType, {onLeave: function (args) {send("PSPropertyBag_ReadType");}});

var PSPropertyBag_ReadULONGLONG = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadULONGLONG")
Interceptor.attach(PSPropertyBag_ReadULONGLONG, {onLeave: function (args) {send("PSPropertyBag_ReadULONGLONG");}});

var PSPropertyBag_ReadUnknown = Module.findExportByName("propsys.dll", "PSPropertyBag_ReadUnknown")
Interceptor.attach(PSPropertyBag_ReadUnknown, {onLeave: function (args) {send("PSPropertyBag_ReadUnknown");}});

var PSPropertyBag_WriteBOOL = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteBOOL")
Interceptor.attach(PSPropertyBag_WriteBOOL, {onLeave: function (args) {send("PSPropertyBag_WriteBOOL");}});

var PSPropertyBag_WriteBSTR = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteBSTR")
Interceptor.attach(PSPropertyBag_WriteBSTR, {onLeave: function (args) {send("PSPropertyBag_WriteBSTR");}});

var PSPropertyBag_WriteDWORD = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteDWORD")
Interceptor.attach(PSPropertyBag_WriteDWORD, {onLeave: function (args) {send("PSPropertyBag_WriteDWORD");}});

var PSPropertyBag_WriteGUID = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteGUID")
Interceptor.attach(PSPropertyBag_WriteGUID, {onLeave: function (args) {send("PSPropertyBag_WriteGUID");}});

var PSPropertyBag_WriteInt = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteInt")
Interceptor.attach(PSPropertyBag_WriteInt, {onLeave: function (args) {send("PSPropertyBag_WriteInt");}});

var PSPropertyBag_WriteLONG = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteLONG")
Interceptor.attach(PSPropertyBag_WriteLONG, {onLeave: function (args) {send("PSPropertyBag_WriteLONG");}});

var PSPropertyBag_WritePOINTL = Module.findExportByName("propsys.dll", "PSPropertyBag_WritePOINTL")
Interceptor.attach(PSPropertyBag_WritePOINTL, {onLeave: function (args) {send("PSPropertyBag_WritePOINTL");}});

var PSPropertyBag_WritePOINTS = Module.findExportByName("propsys.dll", "PSPropertyBag_WritePOINTS")
Interceptor.attach(PSPropertyBag_WritePOINTS, {onLeave: function (args) {send("PSPropertyBag_WritePOINTS");}});

var PSPropertyBag_WritePropertyKey = Module.findExportByName("propsys.dll", "PSPropertyBag_WritePropertyKey")
Interceptor.attach(PSPropertyBag_WritePropertyKey, {onLeave: function (args) {send("PSPropertyBag_WritePropertyKey");}});

var PSPropertyBag_WriteRECTL = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteRECTL")
Interceptor.attach(PSPropertyBag_WriteRECTL, {onLeave: function (args) {send("PSPropertyBag_WriteRECTL");}});

var PSPropertyBag_WriteSHORT = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteSHORT")
Interceptor.attach(PSPropertyBag_WriteSHORT, {onLeave: function (args) {send("PSPropertyBag_WriteSHORT");}});

var PSPropertyBag_WriteStr = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteStr")
Interceptor.attach(PSPropertyBag_WriteStr, {onLeave: function (args) {send("PSPropertyBag_WriteStr");}});

var PSPropertyBag_WriteStream = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteStream")
Interceptor.attach(PSPropertyBag_WriteStream, {onLeave: function (args) {send("PSPropertyBag_WriteStream");}});

var PSPropertyBag_WriteULONGLONG = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteULONGLONG")
Interceptor.attach(PSPropertyBag_WriteULONGLONG, {onLeave: function (args) {send("PSPropertyBag_WriteULONGLONG");}});

var PSPropertyBag_WriteUnknown = Module.findExportByName("propsys.dll", "PSPropertyBag_WriteUnknown")
Interceptor.attach(PSPropertyBag_WriteUnknown, {onLeave: function (args) {send("PSPropertyBag_WriteUnknown");}});

var PSPropertyKeyFromString = Module.findExportByName("propsys.dll", "PSPropertyKeyFromString")
Interceptor.attach(PSPropertyKeyFromString, {onLeave: function (args) {send("PSPropertyKeyFromString");}});

var PSRefreshPropertySchema = Module.findExportByName("propsys.dll", "PSRefreshPropertySchema")
Interceptor.attach(PSRefreshPropertySchema, {onLeave: function (args) {send("PSRefreshPropertySchema");}});

var PSRegisterPropertySchema = Module.findExportByName("propsys.dll", "PSRegisterPropertySchema")
Interceptor.attach(PSRegisterPropertySchema, {onLeave: function (args) {send("PSRegisterPropertySchema");}});

var PSSetPropertyValue = Module.findExportByName("propsys.dll", "PSSetPropertyValue")
Interceptor.attach(PSSetPropertyValue, {onLeave: function (args) {send("PSSetPropertyValue");}});

var PSStringFromPropertyKey = Module.findExportByName("propsys.dll", "PSStringFromPropertyKey")
Interceptor.attach(PSStringFromPropertyKey, {onLeave: function (args) {send("PSStringFromPropertyKey");}});

var PSUnregisterPropertySchema = Module.findExportByName("propsys.dll", "PSUnregisterPropertySchema")
Interceptor.attach(PSUnregisterPropertySchema, {onLeave: function (args) {send("PSUnregisterPropertySchema");}});

var PropVariantChangeType = Module.findExportByName("propsys.dll", "PropVariantChangeType")
Interceptor.attach(PropVariantChangeType, {onLeave: function (args) {send("PropVariantChangeType");}});

var PropVariantCompareEx = Module.findExportByName("propsys.dll", "PropVariantCompareEx")
Interceptor.attach(PropVariantCompareEx, {onLeave: function (args) {send("PropVariantCompareEx");}});

var PropVariantGetBooleanElem = Module.findExportByName("propsys.dll", "PropVariantGetBooleanElem")
Interceptor.attach(PropVariantGetBooleanElem, {onLeave: function (args) {send("PropVariantGetBooleanElem");}});

var PropVariantGetDoubleElem = Module.findExportByName("propsys.dll", "PropVariantGetDoubleElem")
Interceptor.attach(PropVariantGetDoubleElem, {onLeave: function (args) {send("PropVariantGetDoubleElem");}});

var PropVariantGetElementCount = Module.findExportByName("propsys.dll", "PropVariantGetElementCount")
Interceptor.attach(PropVariantGetElementCount, {onLeave: function (args) {send("PropVariantGetElementCount");}});

var PropVariantGetFileTimeElem = Module.findExportByName("propsys.dll", "PropVariantGetFileTimeElem")
Interceptor.attach(PropVariantGetFileTimeElem, {onLeave: function (args) {send("PropVariantGetFileTimeElem");}});

var PropVariantGetInt16Elem = Module.findExportByName("propsys.dll", "PropVariantGetInt16Elem")
Interceptor.attach(PropVariantGetInt16Elem, {onLeave: function (args) {send("PropVariantGetInt16Elem");}});

var PropVariantGetInt32Elem = Module.findExportByName("propsys.dll", "PropVariantGetInt32Elem")
Interceptor.attach(PropVariantGetInt32Elem, {onLeave: function (args) {send("PropVariantGetInt32Elem");}});

var PropVariantGetInt64Elem = Module.findExportByName("propsys.dll", "PropVariantGetInt64Elem")
Interceptor.attach(PropVariantGetInt64Elem, {onLeave: function (args) {send("PropVariantGetInt64Elem");}});

var PropVariantGetStringElem = Module.findExportByName("propsys.dll", "PropVariantGetStringElem")
Interceptor.attach(PropVariantGetStringElem, {onLeave: function (args) {send("PropVariantGetStringElem");}});

var PropVariantGetUInt16Elem = Module.findExportByName("propsys.dll", "PropVariantGetUInt16Elem")
Interceptor.attach(PropVariantGetUInt16Elem, {onLeave: function (args) {send("PropVariantGetUInt16Elem");}});

var PropVariantGetUInt32Elem = Module.findExportByName("propsys.dll", "PropVariantGetUInt32Elem")
Interceptor.attach(PropVariantGetUInt32Elem, {onLeave: function (args) {send("PropVariantGetUInt32Elem");}});

var PropVariantGetUInt64Elem = Module.findExportByName("propsys.dll", "PropVariantGetUInt64Elem")
Interceptor.attach(PropVariantGetUInt64Elem, {onLeave: function (args) {send("PropVariantGetUInt64Elem");}});

var PropVariantToBSTR = Module.findExportByName("propsys.dll", "PropVariantToBSTR")
Interceptor.attach(PropVariantToBSTR, {onLeave: function (args) {send("PropVariantToBSTR");}});

var PropVariantToBoolean = Module.findExportByName("propsys.dll", "PropVariantToBoolean")
Interceptor.attach(PropVariantToBoolean, {onLeave: function (args) {send("PropVariantToBoolean");}});

var PropVariantToBooleanVector = Module.findExportByName("propsys.dll", "PropVariantToBooleanVector")
Interceptor.attach(PropVariantToBooleanVector, {onLeave: function (args) {send("PropVariantToBooleanVector");}});

var PropVariantToBooleanVectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToBooleanVectorAlloc")
Interceptor.attach(PropVariantToBooleanVectorAlloc, {onLeave: function (args) {send("PropVariantToBooleanVectorAlloc");}});

var PropVariantToBooleanWithDefault = Module.findExportByName("propsys.dll", "PropVariantToBooleanWithDefault")
Interceptor.attach(PropVariantToBooleanWithDefault, {onLeave: function (args) {send("PropVariantToBooleanWithDefault");}});

var PropVariantToBuffer = Module.findExportByName("propsys.dll", "PropVariantToBuffer")
Interceptor.attach(PropVariantToBuffer, {onLeave: function (args) {send("PropVariantToBuffer");}});

var PropVariantToDouble = Module.findExportByName("propsys.dll", "PropVariantToDouble")
Interceptor.attach(PropVariantToDouble, {onLeave: function (args) {send("PropVariantToDouble");}});

var PropVariantToDoubleVector = Module.findExportByName("propsys.dll", "PropVariantToDoubleVector")
Interceptor.attach(PropVariantToDoubleVector, {onLeave: function (args) {send("PropVariantToDoubleVector");}});

var PropVariantToDoubleVectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToDoubleVectorAlloc")
Interceptor.attach(PropVariantToDoubleVectorAlloc, {onLeave: function (args) {send("PropVariantToDoubleVectorAlloc");}});

var PropVariantToDoubleWithDefault = Module.findExportByName("propsys.dll", "PropVariantToDoubleWithDefault")
Interceptor.attach(PropVariantToDoubleWithDefault, {onLeave: function (args) {send("PropVariantToDoubleWithDefault");}});

var PropVariantToFileTime = Module.findExportByName("propsys.dll", "PropVariantToFileTime")
Interceptor.attach(PropVariantToFileTime, {onLeave: function (args) {send("PropVariantToFileTime");}});

var PropVariantToFileTimeVector = Module.findExportByName("propsys.dll", "PropVariantToFileTimeVector")
Interceptor.attach(PropVariantToFileTimeVector, {onLeave: function (args) {send("PropVariantToFileTimeVector");}});

var PropVariantToFileTimeVectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToFileTimeVectorAlloc")
Interceptor.attach(PropVariantToFileTimeVectorAlloc, {onLeave: function (args) {send("PropVariantToFileTimeVectorAlloc");}});

var PropVariantToGUID = Module.findExportByName("propsys.dll", "PropVariantToGUID")
Interceptor.attach(PropVariantToGUID, {onLeave: function (args) {send("PropVariantToGUID");}});

var PropVariantToInt16 = Module.findExportByName("propsys.dll", "PropVariantToInt16")
Interceptor.attach(PropVariantToInt16, {onLeave: function (args) {send("PropVariantToInt16");}});

var PropVariantToInt16Vector = Module.findExportByName("propsys.dll", "PropVariantToInt16Vector")
Interceptor.attach(PropVariantToInt16Vector, {onLeave: function (args) {send("PropVariantToInt16Vector");}});

var PropVariantToInt16VectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToInt16VectorAlloc")
Interceptor.attach(PropVariantToInt16VectorAlloc, {onLeave: function (args) {send("PropVariantToInt16VectorAlloc");}});

var PropVariantToInt16WithDefault = Module.findExportByName("propsys.dll", "PropVariantToInt16WithDefault")
Interceptor.attach(PropVariantToInt16WithDefault, {onLeave: function (args) {send("PropVariantToInt16WithDefault");}});

var PropVariantToInt32 = Module.findExportByName("propsys.dll", "PropVariantToInt32")
Interceptor.attach(PropVariantToInt32, {onLeave: function (args) {send("PropVariantToInt32");}});

var PropVariantToInt32Vector = Module.findExportByName("propsys.dll", "PropVariantToInt32Vector")
Interceptor.attach(PropVariantToInt32Vector, {onLeave: function (args) {send("PropVariantToInt32Vector");}});

var PropVariantToInt32VectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToInt32VectorAlloc")
Interceptor.attach(PropVariantToInt32VectorAlloc, {onLeave: function (args) {send("PropVariantToInt32VectorAlloc");}});

var PropVariantToInt32WithDefault = Module.findExportByName("propsys.dll", "PropVariantToInt32WithDefault")
Interceptor.attach(PropVariantToInt32WithDefault, {onLeave: function (args) {send("PropVariantToInt32WithDefault");}});

var PropVariantToInt64 = Module.findExportByName("propsys.dll", "PropVariantToInt64")
Interceptor.attach(PropVariantToInt64, {onLeave: function (args) {send("PropVariantToInt64");}});

var PropVariantToInt64Vector = Module.findExportByName("propsys.dll", "PropVariantToInt64Vector")
Interceptor.attach(PropVariantToInt64Vector, {onLeave: function (args) {send("PropVariantToInt64Vector");}});

var PropVariantToInt64VectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToInt64VectorAlloc")
Interceptor.attach(PropVariantToInt64VectorAlloc, {onLeave: function (args) {send("PropVariantToInt64VectorAlloc");}});

var PropVariantToInt64WithDefault = Module.findExportByName("propsys.dll", "PropVariantToInt64WithDefault")
Interceptor.attach(PropVariantToInt64WithDefault, {onLeave: function (args) {send("PropVariantToInt64WithDefault");}});

var PropVariantToStrRet = Module.findExportByName("propsys.dll", "PropVariantToStrRet")
Interceptor.attach(PropVariantToStrRet, {onLeave: function (args) {send("PropVariantToStrRet");}});

var PropVariantToString = Module.findExportByName("propsys.dll", "PropVariantToString")
Interceptor.attach(PropVariantToString, {onLeave: function (args) {send("PropVariantToString");}});

var PropVariantToStringAlloc = Module.findExportByName("propsys.dll", "PropVariantToStringAlloc")
Interceptor.attach(PropVariantToStringAlloc, {onLeave: function (args) {send("PropVariantToStringAlloc");}});

var PropVariantToStringVector = Module.findExportByName("propsys.dll", "PropVariantToStringVector")
Interceptor.attach(PropVariantToStringVector, {onLeave: function (args) {send("PropVariantToStringVector");}});

var PropVariantToStringVectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToStringVectorAlloc")
Interceptor.attach(PropVariantToStringVectorAlloc, {onLeave: function (args) {send("PropVariantToStringVectorAlloc");}});

var PropVariantToStringWithDefault = Module.findExportByName("propsys.dll", "PropVariantToStringWithDefault")
Interceptor.attach(PropVariantToStringWithDefault, {onLeave: function (args) {send("PropVariantToStringWithDefault");}});

var PropVariantToUInt16 = Module.findExportByName("propsys.dll", "PropVariantToUInt16")
Interceptor.attach(PropVariantToUInt16, {onLeave: function (args) {send("PropVariantToUInt16");}});

var PropVariantToUInt16Vector = Module.findExportByName("propsys.dll", "PropVariantToUInt16Vector")
Interceptor.attach(PropVariantToUInt16Vector, {onLeave: function (args) {send("PropVariantToUInt16Vector");}});

var PropVariantToUInt16VectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToUInt16VectorAlloc")
Interceptor.attach(PropVariantToUInt16VectorAlloc, {onLeave: function (args) {send("PropVariantToUInt16VectorAlloc");}});

var PropVariantToUInt16WithDefault = Module.findExportByName("propsys.dll", "PropVariantToUInt16WithDefault")
Interceptor.attach(PropVariantToUInt16WithDefault, {onLeave: function (args) {send("PropVariantToUInt16WithDefault");}});

var PropVariantToUInt32 = Module.findExportByName("propsys.dll", "PropVariantToUInt32")
Interceptor.attach(PropVariantToUInt32, {onLeave: function (args) {send("PropVariantToUInt32");}});

var PropVariantToUInt32Vector = Module.findExportByName("propsys.dll", "PropVariantToUInt32Vector")
Interceptor.attach(PropVariantToUInt32Vector, {onLeave: function (args) {send("PropVariantToUInt32Vector");}});

var PropVariantToUInt32VectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToUInt32VectorAlloc")
Interceptor.attach(PropVariantToUInt32VectorAlloc, {onLeave: function (args) {send("PropVariantToUInt32VectorAlloc");}});

var PropVariantToUInt32WithDefault = Module.findExportByName("propsys.dll", "PropVariantToUInt32WithDefault")
Interceptor.attach(PropVariantToUInt32WithDefault, {onLeave: function (args) {send("PropVariantToUInt32WithDefault");}});

var PropVariantToUInt64 = Module.findExportByName("propsys.dll", "PropVariantToUInt64")
Interceptor.attach(PropVariantToUInt64, {onLeave: function (args) {send("PropVariantToUInt64");}});

var PropVariantToUInt64Vector = Module.findExportByName("propsys.dll", "PropVariantToUInt64Vector")
Interceptor.attach(PropVariantToUInt64Vector, {onLeave: function (args) {send("PropVariantToUInt64Vector");}});

var PropVariantToUInt64VectorAlloc = Module.findExportByName("propsys.dll", "PropVariantToUInt64VectorAlloc")
Interceptor.attach(PropVariantToUInt64VectorAlloc, {onLeave: function (args) {send("PropVariantToUInt64VectorAlloc");}});

var PropVariantToUInt64WithDefault = Module.findExportByName("propsys.dll", "PropVariantToUInt64WithDefault")
Interceptor.attach(PropVariantToUInt64WithDefault, {onLeave: function (args) {send("PropVariantToUInt64WithDefault");}});

var PropVariantToVariant = Module.findExportByName("propsys.dll", "PropVariantToVariant")
Interceptor.attach(PropVariantToVariant, {onLeave: function (args) {send("PropVariantToVariant");}});

var PropVariantToWinRTPropertyValue = Module.findExportByName("propsys.dll", "PropVariantToWinRTPropertyValue")
Interceptor.attach(PropVariantToWinRTPropertyValue, {onLeave: function (args) {send("PropVariantToWinRTPropertyValue");}});

var SHGetPropertyStoreForWindow = Module.findExportByName("propsys.dll", "SHGetPropertyStoreForWindow")
Interceptor.attach(SHGetPropertyStoreForWindow, {onLeave: function (args) {send("SHGetPropertyStoreForWindow");}});

var StgDeserializePropVariant = Module.findExportByName("propsys.dll", "StgDeserializePropVariant")
Interceptor.attach(StgDeserializePropVariant, {onLeave: function (args) {send("StgDeserializePropVariant");}});

var StgSerializePropVariant = Module.findExportByName("propsys.dll", "StgSerializePropVariant")
Interceptor.attach(StgSerializePropVariant, {onLeave: function (args) {send("StgSerializePropVariant");}});

var VariantCompare = Module.findExportByName("propsys.dll", "VariantCompare")
Interceptor.attach(VariantCompare, {onLeave: function (args) {send("VariantCompare");}});

var VariantGetBooleanElem = Module.findExportByName("propsys.dll", "VariantGetBooleanElem")
Interceptor.attach(VariantGetBooleanElem, {onLeave: function (args) {send("VariantGetBooleanElem");}});

var VariantGetDoubleElem = Module.findExportByName("propsys.dll", "VariantGetDoubleElem")
Interceptor.attach(VariantGetDoubleElem, {onLeave: function (args) {send("VariantGetDoubleElem");}});

var VariantGetElementCount = Module.findExportByName("propsys.dll", "VariantGetElementCount")
Interceptor.attach(VariantGetElementCount, {onLeave: function (args) {send("VariantGetElementCount");}});

var VariantGetInt16Elem = Module.findExportByName("propsys.dll", "VariantGetInt16Elem")
Interceptor.attach(VariantGetInt16Elem, {onLeave: function (args) {send("VariantGetInt16Elem");}});

var VariantGetInt32Elem = Module.findExportByName("propsys.dll", "VariantGetInt32Elem")
Interceptor.attach(VariantGetInt32Elem, {onLeave: function (args) {send("VariantGetInt32Elem");}});

var VariantGetInt64Elem = Module.findExportByName("propsys.dll", "VariantGetInt64Elem")
Interceptor.attach(VariantGetInt64Elem, {onLeave: function (args) {send("VariantGetInt64Elem");}});

var VariantGetStringElem = Module.findExportByName("propsys.dll", "VariantGetStringElem")
Interceptor.attach(VariantGetStringElem, {onLeave: function (args) {send("VariantGetStringElem");}});

var VariantGetUInt16Elem = Module.findExportByName("propsys.dll", "VariantGetUInt16Elem")
Interceptor.attach(VariantGetUInt16Elem, {onLeave: function (args) {send("VariantGetUInt16Elem");}});

var VariantGetUInt32Elem = Module.findExportByName("propsys.dll", "VariantGetUInt32Elem")
Interceptor.attach(VariantGetUInt32Elem, {onLeave: function (args) {send("VariantGetUInt32Elem");}});

var VariantGetUInt64Elem = Module.findExportByName("propsys.dll", "VariantGetUInt64Elem")
Interceptor.attach(VariantGetUInt64Elem, {onLeave: function (args) {send("VariantGetUInt64Elem");}});

var VariantToBoolean = Module.findExportByName("propsys.dll", "VariantToBoolean")
Interceptor.attach(VariantToBoolean, {onLeave: function (args) {send("VariantToBoolean");}});

var VariantToBooleanArray = Module.findExportByName("propsys.dll", "VariantToBooleanArray")
Interceptor.attach(VariantToBooleanArray, {onLeave: function (args) {send("VariantToBooleanArray");}});

var VariantToBooleanArrayAlloc = Module.findExportByName("propsys.dll", "VariantToBooleanArrayAlloc")
Interceptor.attach(VariantToBooleanArrayAlloc, {onLeave: function (args) {send("VariantToBooleanArrayAlloc");}});

var VariantToBooleanWithDefault = Module.findExportByName("propsys.dll", "VariantToBooleanWithDefault")
Interceptor.attach(VariantToBooleanWithDefault, {onLeave: function (args) {send("VariantToBooleanWithDefault");}});

var VariantToBuffer = Module.findExportByName("propsys.dll", "VariantToBuffer")
Interceptor.attach(VariantToBuffer, {onLeave: function (args) {send("VariantToBuffer");}});

var VariantToDosDateTime = Module.findExportByName("propsys.dll", "VariantToDosDateTime")
Interceptor.attach(VariantToDosDateTime, {onLeave: function (args) {send("VariantToDosDateTime");}});

var VariantToDouble = Module.findExportByName("propsys.dll", "VariantToDouble")
Interceptor.attach(VariantToDouble, {onLeave: function (args) {send("VariantToDouble");}});

var VariantToDoubleArray = Module.findExportByName("propsys.dll", "VariantToDoubleArray")
Interceptor.attach(VariantToDoubleArray, {onLeave: function (args) {send("VariantToDoubleArray");}});

var VariantToDoubleArrayAlloc = Module.findExportByName("propsys.dll", "VariantToDoubleArrayAlloc")
Interceptor.attach(VariantToDoubleArrayAlloc, {onLeave: function (args) {send("VariantToDoubleArrayAlloc");}});

var VariantToDoubleWithDefault = Module.findExportByName("propsys.dll", "VariantToDoubleWithDefault")
Interceptor.attach(VariantToDoubleWithDefault, {onLeave: function (args) {send("VariantToDoubleWithDefault");}});

var VariantToFileTime = Module.findExportByName("propsys.dll", "VariantToFileTime")
Interceptor.attach(VariantToFileTime, {onLeave: function (args) {send("VariantToFileTime");}});

var VariantToGUID = Module.findExportByName("propsys.dll", "VariantToGUID")
Interceptor.attach(VariantToGUID, {onLeave: function (args) {send("VariantToGUID");}});

var VariantToInt16 = Module.findExportByName("propsys.dll", "VariantToInt16")
Interceptor.attach(VariantToInt16, {onLeave: function (args) {send("VariantToInt16");}});

var VariantToInt16Array = Module.findExportByName("propsys.dll", "VariantToInt16Array")
Interceptor.attach(VariantToInt16Array, {onLeave: function (args) {send("VariantToInt16Array");}});

var VariantToInt16ArrayAlloc = Module.findExportByName("propsys.dll", "VariantToInt16ArrayAlloc")
Interceptor.attach(VariantToInt16ArrayAlloc, {onLeave: function (args) {send("VariantToInt16ArrayAlloc");}});

var VariantToInt16WithDefault = Module.findExportByName("propsys.dll", "VariantToInt16WithDefault")
Interceptor.attach(VariantToInt16WithDefault, {onLeave: function (args) {send("VariantToInt16WithDefault");}});

var VariantToInt32 = Module.findExportByName("propsys.dll", "VariantToInt32")
Interceptor.attach(VariantToInt32, {onLeave: function (args) {send("VariantToInt32");}});

var VariantToInt32Array = Module.findExportByName("propsys.dll", "VariantToInt32Array")
Interceptor.attach(VariantToInt32Array, {onLeave: function (args) {send("VariantToInt32Array");}});

var VariantToInt32ArrayAlloc = Module.findExportByName("propsys.dll", "VariantToInt32ArrayAlloc")
Interceptor.attach(VariantToInt32ArrayAlloc, {onLeave: function (args) {send("VariantToInt32ArrayAlloc");}});

var VariantToInt32WithDefault = Module.findExportByName("propsys.dll", "VariantToInt32WithDefault")
Interceptor.attach(VariantToInt32WithDefault, {onLeave: function (args) {send("VariantToInt32WithDefault");}});

var VariantToInt64 = Module.findExportByName("propsys.dll", "VariantToInt64")
Interceptor.attach(VariantToInt64, {onLeave: function (args) {send("VariantToInt64");}});

var VariantToInt64Array = Module.findExportByName("propsys.dll", "VariantToInt64Array")
Interceptor.attach(VariantToInt64Array, {onLeave: function (args) {send("VariantToInt64Array");}});

var VariantToInt64ArrayAlloc = Module.findExportByName("propsys.dll", "VariantToInt64ArrayAlloc")
Interceptor.attach(VariantToInt64ArrayAlloc, {onLeave: function (args) {send("VariantToInt64ArrayAlloc");}});

var VariantToInt64WithDefault = Module.findExportByName("propsys.dll", "VariantToInt64WithDefault")
Interceptor.attach(VariantToInt64WithDefault, {onLeave: function (args) {send("VariantToInt64WithDefault");}});

var VariantToPropVariant = Module.findExportByName("propsys.dll", "VariantToPropVariant")
Interceptor.attach(VariantToPropVariant, {onLeave: function (args) {send("VariantToPropVariant");}});

var VariantToStrRet = Module.findExportByName("propsys.dll", "VariantToStrRet")
Interceptor.attach(VariantToStrRet, {onLeave: function (args) {send("VariantToStrRet");}});

var VariantToString = Module.findExportByName("propsys.dll", "VariantToString")
Interceptor.attach(VariantToString, {onLeave: function (args) {send("VariantToString");}});

var VariantToStringAlloc = Module.findExportByName("propsys.dll", "VariantToStringAlloc")
Interceptor.attach(VariantToStringAlloc, {onLeave: function (args) {send("VariantToStringAlloc");}});

var VariantToStringArray = Module.findExportByName("propsys.dll", "VariantToStringArray")
Interceptor.attach(VariantToStringArray, {onLeave: function (args) {send("VariantToStringArray");}});

var VariantToStringArrayAlloc = Module.findExportByName("propsys.dll", "VariantToStringArrayAlloc")
Interceptor.attach(VariantToStringArrayAlloc, {onLeave: function (args) {send("VariantToStringArrayAlloc");}});

var VariantToStringWithDefault = Module.findExportByName("propsys.dll", "VariantToStringWithDefault")
Interceptor.attach(VariantToStringWithDefault, {onLeave: function (args) {send("VariantToStringWithDefault");}});

var VariantToUInt16 = Module.findExportByName("propsys.dll", "VariantToUInt16")
Interceptor.attach(VariantToUInt16, {onLeave: function (args) {send("VariantToUInt16");}});

var VariantToUInt16Array = Module.findExportByName("propsys.dll", "VariantToUInt16Array")
Interceptor.attach(VariantToUInt16Array, {onLeave: function (args) {send("VariantToUInt16Array");}});

var VariantToUInt16ArrayAlloc = Module.findExportByName("propsys.dll", "VariantToUInt16ArrayAlloc")
Interceptor.attach(VariantToUInt16ArrayAlloc, {onLeave: function (args) {send("VariantToUInt16ArrayAlloc");}});

var VariantToUInt16WithDefault = Module.findExportByName("propsys.dll", "VariantToUInt16WithDefault")
Interceptor.attach(VariantToUInt16WithDefault, {onLeave: function (args) {send("VariantToUInt16WithDefault");}});

var VariantToUInt32 = Module.findExportByName("propsys.dll", "VariantToUInt32")
Interceptor.attach(VariantToUInt32, {onLeave: function (args) {send("VariantToUInt32");}});

var VariantToUInt32Array = Module.findExportByName("propsys.dll", "VariantToUInt32Array")
Interceptor.attach(VariantToUInt32Array, {onLeave: function (args) {send("VariantToUInt32Array");}});

var VariantToUInt32ArrayAlloc = Module.findExportByName("propsys.dll", "VariantToUInt32ArrayAlloc")
Interceptor.attach(VariantToUInt32ArrayAlloc, {onLeave: function (args) {send("VariantToUInt32ArrayAlloc");}});

var VariantToUInt32WithDefault = Module.findExportByName("propsys.dll", "VariantToUInt32WithDefault")
Interceptor.attach(VariantToUInt32WithDefault, {onLeave: function (args) {send("VariantToUInt32WithDefault");}});

var VariantToUInt64 = Module.findExportByName("propsys.dll", "VariantToUInt64")
Interceptor.attach(VariantToUInt64, {onLeave: function (args) {send("VariantToUInt64");}});

var VariantToUInt64Array = Module.findExportByName("propsys.dll", "VariantToUInt64Array")
Interceptor.attach(VariantToUInt64Array, {onLeave: function (args) {send("VariantToUInt64Array");}});

var VariantToUInt64ArrayAlloc = Module.findExportByName("propsys.dll", "VariantToUInt64ArrayAlloc")
Interceptor.attach(VariantToUInt64ArrayAlloc, {onLeave: function (args) {send("VariantToUInt64ArrayAlloc");}});

var VariantToUInt64WithDefault = Module.findExportByName("propsys.dll", "VariantToUInt64WithDefault")
Interceptor.attach(VariantToUInt64WithDefault, {onLeave: function (args) {send("VariantToUInt64WithDefault");}});

var WinRTPropertyValueToPropVariant = Module.findExportByName("propsys.dll", "WinRTPropertyValueToPropVariant")
Interceptor.attach(WinRTPropertyValueToPropVariant, {onLeave: function (args) {send("WinRTPropertyValueToPropVariant");}});

