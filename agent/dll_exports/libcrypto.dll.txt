var ACCESS_DESCRIPTION_free = Module.findExportByName("libcrypto.dll", "ACCESS_DESCRIPTION_free")
Interceptor.attach(ACCESS_DESCRIPTION_free, {onLeave: function (args) {send("ACCESS_DESCRIPTION_free");}});

var ACCESS_DESCRIPTION_it = Module.findExportByName("libcrypto.dll", "ACCESS_DESCRIPTION_it")
Interceptor.attach(ACCESS_DESCRIPTION_it, {onLeave: function (args) {send("ACCESS_DESCRIPTION_it");}});

var ACCESS_DESCRIPTION_new = Module.findExportByName("libcrypto.dll", "ACCESS_DESCRIPTION_new")
Interceptor.attach(ACCESS_DESCRIPTION_new, {onLeave: function (args) {send("ACCESS_DESCRIPTION_new");}});

var AES_cbc_encrypt = Module.findExportByName("libcrypto.dll", "AES_cbc_encrypt")
Interceptor.attach(AES_cbc_encrypt, {onLeave: function (args) {send("AES_cbc_encrypt");}});

var AES_cfb128_encrypt = Module.findExportByName("libcrypto.dll", "AES_cfb128_encrypt")
Interceptor.attach(AES_cfb128_encrypt, {onLeave: function (args) {send("AES_cfb128_encrypt");}});

var AES_cfb1_encrypt = Module.findExportByName("libcrypto.dll", "AES_cfb1_encrypt")
Interceptor.attach(AES_cfb1_encrypt, {onLeave: function (args) {send("AES_cfb1_encrypt");}});

var AES_cfb8_encrypt = Module.findExportByName("libcrypto.dll", "AES_cfb8_encrypt")
Interceptor.attach(AES_cfb8_encrypt, {onLeave: function (args) {send("AES_cfb8_encrypt");}});

var AES_ctr128_encrypt = Module.findExportByName("libcrypto.dll", "AES_ctr128_encrypt")
Interceptor.attach(AES_ctr128_encrypt, {onLeave: function (args) {send("AES_ctr128_encrypt");}});

var AES_decrypt = Module.findExportByName("libcrypto.dll", "AES_decrypt")
Interceptor.attach(AES_decrypt, {onLeave: function (args) {send("AES_decrypt");}});

var AES_ecb_encrypt = Module.findExportByName("libcrypto.dll", "AES_ecb_encrypt")
Interceptor.attach(AES_ecb_encrypt, {onLeave: function (args) {send("AES_ecb_encrypt");}});

var AES_encrypt = Module.findExportByName("libcrypto.dll", "AES_encrypt")
Interceptor.attach(AES_encrypt, {onLeave: function (args) {send("AES_encrypt");}});

var AES_ige_encrypt = Module.findExportByName("libcrypto.dll", "AES_ige_encrypt")
Interceptor.attach(AES_ige_encrypt, {onLeave: function (args) {send("AES_ige_encrypt");}});

var AES_ofb128_encrypt = Module.findExportByName("libcrypto.dll", "AES_ofb128_encrypt")
Interceptor.attach(AES_ofb128_encrypt, {onLeave: function (args) {send("AES_ofb128_encrypt");}});

var AES_options = Module.findExportByName("libcrypto.dll", "AES_options")
Interceptor.attach(AES_options, {onLeave: function (args) {send("AES_options");}});

var AES_set_decrypt_key = Module.findExportByName("libcrypto.dll", "AES_set_decrypt_key")
Interceptor.attach(AES_set_decrypt_key, {onLeave: function (args) {send("AES_set_decrypt_key");}});

var AES_set_encrypt_key = Module.findExportByName("libcrypto.dll", "AES_set_encrypt_key")
Interceptor.attach(AES_set_encrypt_key, {onLeave: function (args) {send("AES_set_encrypt_key");}});

var AES_unwrap_key = Module.findExportByName("libcrypto.dll", "AES_unwrap_key")
Interceptor.attach(AES_unwrap_key, {onLeave: function (args) {send("AES_unwrap_key");}});

var AES_wrap_key = Module.findExportByName("libcrypto.dll", "AES_wrap_key")
Interceptor.attach(AES_wrap_key, {onLeave: function (args) {send("AES_wrap_key");}});

var ASN1_ANY_it = Module.findExportByName("libcrypto.dll", "ASN1_ANY_it")
Interceptor.attach(ASN1_ANY_it, {onLeave: function (args) {send("ASN1_ANY_it");}});

var ASN1_BIT_STRING_check = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_check")
Interceptor.attach(ASN1_BIT_STRING_check, {onLeave: function (args) {send("ASN1_BIT_STRING_check");}});

var ASN1_BIT_STRING_free = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_free")
Interceptor.attach(ASN1_BIT_STRING_free, {onLeave: function (args) {send("ASN1_BIT_STRING_free");}});

var ASN1_BIT_STRING_get_bit = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_get_bit")
Interceptor.attach(ASN1_BIT_STRING_get_bit, {onLeave: function (args) {send("ASN1_BIT_STRING_get_bit");}});

var ASN1_BIT_STRING_it = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_it")
Interceptor.attach(ASN1_BIT_STRING_it, {onLeave: function (args) {send("ASN1_BIT_STRING_it");}});

var ASN1_BIT_STRING_name_print = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_name_print")
Interceptor.attach(ASN1_BIT_STRING_name_print, {onLeave: function (args) {send("ASN1_BIT_STRING_name_print");}});

var ASN1_BIT_STRING_new = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_new")
Interceptor.attach(ASN1_BIT_STRING_new, {onLeave: function (args) {send("ASN1_BIT_STRING_new");}});

var ASN1_BIT_STRING_num_asc = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_num_asc")
Interceptor.attach(ASN1_BIT_STRING_num_asc, {onLeave: function (args) {send("ASN1_BIT_STRING_num_asc");}});

var ASN1_BIT_STRING_set = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_set")
Interceptor.attach(ASN1_BIT_STRING_set, {onLeave: function (args) {send("ASN1_BIT_STRING_set");}});

var ASN1_BIT_STRING_set_asc = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_set_asc")
Interceptor.attach(ASN1_BIT_STRING_set_asc, {onLeave: function (args) {send("ASN1_BIT_STRING_set_asc");}});

var ASN1_BIT_STRING_set_bit = Module.findExportByName("libcrypto.dll", "ASN1_BIT_STRING_set_bit")
Interceptor.attach(ASN1_BIT_STRING_set_bit, {onLeave: function (args) {send("ASN1_BIT_STRING_set_bit");}});

var ASN1_BMPSTRING_free = Module.findExportByName("libcrypto.dll", "ASN1_BMPSTRING_free")
Interceptor.attach(ASN1_BMPSTRING_free, {onLeave: function (args) {send("ASN1_BMPSTRING_free");}});

var ASN1_BMPSTRING_it = Module.findExportByName("libcrypto.dll", "ASN1_BMPSTRING_it")
Interceptor.attach(ASN1_BMPSTRING_it, {onLeave: function (args) {send("ASN1_BMPSTRING_it");}});

var ASN1_BMPSTRING_new = Module.findExportByName("libcrypto.dll", "ASN1_BMPSTRING_new")
Interceptor.attach(ASN1_BMPSTRING_new, {onLeave: function (args) {send("ASN1_BMPSTRING_new");}});

var ASN1_BOOLEAN_it = Module.findExportByName("libcrypto.dll", "ASN1_BOOLEAN_it")
Interceptor.attach(ASN1_BOOLEAN_it, {onLeave: function (args) {send("ASN1_BOOLEAN_it");}});

var ASN1_ENUMERATED_free = Module.findExportByName("libcrypto.dll", "ASN1_ENUMERATED_free")
Interceptor.attach(ASN1_ENUMERATED_free, {onLeave: function (args) {send("ASN1_ENUMERATED_free");}});

var ASN1_ENUMERATED_get = Module.findExportByName("libcrypto.dll", "ASN1_ENUMERATED_get")
Interceptor.attach(ASN1_ENUMERATED_get, {onLeave: function (args) {send("ASN1_ENUMERATED_get");}});

var ASN1_ENUMERATED_it = Module.findExportByName("libcrypto.dll", "ASN1_ENUMERATED_it")
Interceptor.attach(ASN1_ENUMERATED_it, {onLeave: function (args) {send("ASN1_ENUMERATED_it");}});

var ASN1_ENUMERATED_new = Module.findExportByName("libcrypto.dll", "ASN1_ENUMERATED_new")
Interceptor.attach(ASN1_ENUMERATED_new, {onLeave: function (args) {send("ASN1_ENUMERATED_new");}});

var ASN1_ENUMERATED_set = Module.findExportByName("libcrypto.dll", "ASN1_ENUMERATED_set")
Interceptor.attach(ASN1_ENUMERATED_set, {onLeave: function (args) {send("ASN1_ENUMERATED_set");}});

var ASN1_ENUMERATED_to_BN = Module.findExportByName("libcrypto.dll", "ASN1_ENUMERATED_to_BN")
Interceptor.attach(ASN1_ENUMERATED_to_BN, {onLeave: function (args) {send("ASN1_ENUMERATED_to_BN");}});

var ASN1_FBOOLEAN_it = Module.findExportByName("libcrypto.dll", "ASN1_FBOOLEAN_it")
Interceptor.attach(ASN1_FBOOLEAN_it, {onLeave: function (args) {send("ASN1_FBOOLEAN_it");}});

var ASN1_GENERALIZEDTIME_adj = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_adj")
Interceptor.attach(ASN1_GENERALIZEDTIME_adj, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_adj");}});

var ASN1_GENERALIZEDTIME_check = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_check")
Interceptor.attach(ASN1_GENERALIZEDTIME_check, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_check");}});

var ASN1_GENERALIZEDTIME_free = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_free")
Interceptor.attach(ASN1_GENERALIZEDTIME_free, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_free");}});

var ASN1_GENERALIZEDTIME_it = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_it")
Interceptor.attach(ASN1_GENERALIZEDTIME_it, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_it");}});

var ASN1_GENERALIZEDTIME_new = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_new")
Interceptor.attach(ASN1_GENERALIZEDTIME_new, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_new");}});

var ASN1_GENERALIZEDTIME_print = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_print")
Interceptor.attach(ASN1_GENERALIZEDTIME_print, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_print");}});

var ASN1_GENERALIZEDTIME_set = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_set")
Interceptor.attach(ASN1_GENERALIZEDTIME_set, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_set");}});

var ASN1_GENERALIZEDTIME_set_string = Module.findExportByName("libcrypto.dll", "ASN1_GENERALIZEDTIME_set_string")
Interceptor.attach(ASN1_GENERALIZEDTIME_set_string, {onLeave: function (args) {send("ASN1_GENERALIZEDTIME_set_string");}});

var ASN1_GENERALSTRING_free = Module.findExportByName("libcrypto.dll", "ASN1_GENERALSTRING_free")
Interceptor.attach(ASN1_GENERALSTRING_free, {onLeave: function (args) {send("ASN1_GENERALSTRING_free");}});

var ASN1_GENERALSTRING_it = Module.findExportByName("libcrypto.dll", "ASN1_GENERALSTRING_it")
Interceptor.attach(ASN1_GENERALSTRING_it, {onLeave: function (args) {send("ASN1_GENERALSTRING_it");}});

var ASN1_GENERALSTRING_new = Module.findExportByName("libcrypto.dll", "ASN1_GENERALSTRING_new")
Interceptor.attach(ASN1_GENERALSTRING_new, {onLeave: function (args) {send("ASN1_GENERALSTRING_new");}});

var ASN1_IA5STRING_free = Module.findExportByName("libcrypto.dll", "ASN1_IA5STRING_free")
Interceptor.attach(ASN1_IA5STRING_free, {onLeave: function (args) {send("ASN1_IA5STRING_free");}});

var ASN1_IA5STRING_it = Module.findExportByName("libcrypto.dll", "ASN1_IA5STRING_it")
Interceptor.attach(ASN1_IA5STRING_it, {onLeave: function (args) {send("ASN1_IA5STRING_it");}});

var ASN1_IA5STRING_new = Module.findExportByName("libcrypto.dll", "ASN1_IA5STRING_new")
Interceptor.attach(ASN1_IA5STRING_new, {onLeave: function (args) {send("ASN1_IA5STRING_new");}});

var ASN1_INTEGER_cmp = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_cmp")
Interceptor.attach(ASN1_INTEGER_cmp, {onLeave: function (args) {send("ASN1_INTEGER_cmp");}});

var ASN1_INTEGER_dup = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_dup")
Interceptor.attach(ASN1_INTEGER_dup, {onLeave: function (args) {send("ASN1_INTEGER_dup");}});

var ASN1_INTEGER_free = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_free")
Interceptor.attach(ASN1_INTEGER_free, {onLeave: function (args) {send("ASN1_INTEGER_free");}});

var ASN1_INTEGER_get = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_get")
Interceptor.attach(ASN1_INTEGER_get, {onLeave: function (args) {send("ASN1_INTEGER_get");}});

var ASN1_INTEGER_it = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_it")
Interceptor.attach(ASN1_INTEGER_it, {onLeave: function (args) {send("ASN1_INTEGER_it");}});

var ASN1_INTEGER_new = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_new")
Interceptor.attach(ASN1_INTEGER_new, {onLeave: function (args) {send("ASN1_INTEGER_new");}});

var ASN1_INTEGER_set = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_set")
Interceptor.attach(ASN1_INTEGER_set, {onLeave: function (args) {send("ASN1_INTEGER_set");}});

var ASN1_INTEGER_to_BN = Module.findExportByName("libcrypto.dll", "ASN1_INTEGER_to_BN")
Interceptor.attach(ASN1_INTEGER_to_BN, {onLeave: function (args) {send("ASN1_INTEGER_to_BN");}});

var ASN1_NULL_free = Module.findExportByName("libcrypto.dll", "ASN1_NULL_free")
Interceptor.attach(ASN1_NULL_free, {onLeave: function (args) {send("ASN1_NULL_free");}});

var ASN1_NULL_it = Module.findExportByName("libcrypto.dll", "ASN1_NULL_it")
Interceptor.attach(ASN1_NULL_it, {onLeave: function (args) {send("ASN1_NULL_it");}});

var ASN1_NULL_new = Module.findExportByName("libcrypto.dll", "ASN1_NULL_new")
Interceptor.attach(ASN1_NULL_new, {onLeave: function (args) {send("ASN1_NULL_new");}});

var ASN1_OBJECT_create = Module.findExportByName("libcrypto.dll", "ASN1_OBJECT_create")
Interceptor.attach(ASN1_OBJECT_create, {onLeave: function (args) {send("ASN1_OBJECT_create");}});

var ASN1_OBJECT_free = Module.findExportByName("libcrypto.dll", "ASN1_OBJECT_free")
Interceptor.attach(ASN1_OBJECT_free, {onLeave: function (args) {send("ASN1_OBJECT_free");}});

var ASN1_OBJECT_it = Module.findExportByName("libcrypto.dll", "ASN1_OBJECT_it")
Interceptor.attach(ASN1_OBJECT_it, {onLeave: function (args) {send("ASN1_OBJECT_it");}});

var ASN1_OBJECT_new = Module.findExportByName("libcrypto.dll", "ASN1_OBJECT_new")
Interceptor.attach(ASN1_OBJECT_new, {onLeave: function (args) {send("ASN1_OBJECT_new");}});

var ASN1_OCTET_STRING_NDEF_it = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_NDEF_it")
Interceptor.attach(ASN1_OCTET_STRING_NDEF_it, {onLeave: function (args) {send("ASN1_OCTET_STRING_NDEF_it");}});

var ASN1_OCTET_STRING_cmp = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_cmp")
Interceptor.attach(ASN1_OCTET_STRING_cmp, {onLeave: function (args) {send("ASN1_OCTET_STRING_cmp");}});

var ASN1_OCTET_STRING_dup = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_dup")
Interceptor.attach(ASN1_OCTET_STRING_dup, {onLeave: function (args) {send("ASN1_OCTET_STRING_dup");}});

var ASN1_OCTET_STRING_free = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_free")
Interceptor.attach(ASN1_OCTET_STRING_free, {onLeave: function (args) {send("ASN1_OCTET_STRING_free");}});

var ASN1_OCTET_STRING_it = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_it")
Interceptor.attach(ASN1_OCTET_STRING_it, {onLeave: function (args) {send("ASN1_OCTET_STRING_it");}});

var ASN1_OCTET_STRING_new = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_new")
Interceptor.attach(ASN1_OCTET_STRING_new, {onLeave: function (args) {send("ASN1_OCTET_STRING_new");}});

var ASN1_OCTET_STRING_set = Module.findExportByName("libcrypto.dll", "ASN1_OCTET_STRING_set")
Interceptor.attach(ASN1_OCTET_STRING_set, {onLeave: function (args) {send("ASN1_OCTET_STRING_set");}});

var ASN1_PCTX_free = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_free")
Interceptor.attach(ASN1_PCTX_free, {onLeave: function (args) {send("ASN1_PCTX_free");}});

var ASN1_PCTX_get_cert_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_get_cert_flags")
Interceptor.attach(ASN1_PCTX_get_cert_flags, {onLeave: function (args) {send("ASN1_PCTX_get_cert_flags");}});

var ASN1_PCTX_get_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_get_flags")
Interceptor.attach(ASN1_PCTX_get_flags, {onLeave: function (args) {send("ASN1_PCTX_get_flags");}});

var ASN1_PCTX_get_nm_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_get_nm_flags")
Interceptor.attach(ASN1_PCTX_get_nm_flags, {onLeave: function (args) {send("ASN1_PCTX_get_nm_flags");}});

var ASN1_PCTX_get_oid_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_get_oid_flags")
Interceptor.attach(ASN1_PCTX_get_oid_flags, {onLeave: function (args) {send("ASN1_PCTX_get_oid_flags");}});

var ASN1_PCTX_get_str_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_get_str_flags")
Interceptor.attach(ASN1_PCTX_get_str_flags, {onLeave: function (args) {send("ASN1_PCTX_get_str_flags");}});

var ASN1_PCTX_new = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_new")
Interceptor.attach(ASN1_PCTX_new, {onLeave: function (args) {send("ASN1_PCTX_new");}});

var ASN1_PCTX_set_cert_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_set_cert_flags")
Interceptor.attach(ASN1_PCTX_set_cert_flags, {onLeave: function (args) {send("ASN1_PCTX_set_cert_flags");}});

var ASN1_PCTX_set_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_set_flags")
Interceptor.attach(ASN1_PCTX_set_flags, {onLeave: function (args) {send("ASN1_PCTX_set_flags");}});

var ASN1_PCTX_set_nm_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_set_nm_flags")
Interceptor.attach(ASN1_PCTX_set_nm_flags, {onLeave: function (args) {send("ASN1_PCTX_set_nm_flags");}});

var ASN1_PCTX_set_oid_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_set_oid_flags")
Interceptor.attach(ASN1_PCTX_set_oid_flags, {onLeave: function (args) {send("ASN1_PCTX_set_oid_flags");}});

var ASN1_PCTX_set_str_flags = Module.findExportByName("libcrypto.dll", "ASN1_PCTX_set_str_flags")
Interceptor.attach(ASN1_PCTX_set_str_flags, {onLeave: function (args) {send("ASN1_PCTX_set_str_flags");}});

var ASN1_PRINTABLESTRING_free = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLESTRING_free")
Interceptor.attach(ASN1_PRINTABLESTRING_free, {onLeave: function (args) {send("ASN1_PRINTABLESTRING_free");}});

var ASN1_PRINTABLESTRING_it = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLESTRING_it")
Interceptor.attach(ASN1_PRINTABLESTRING_it, {onLeave: function (args) {send("ASN1_PRINTABLESTRING_it");}});

var ASN1_PRINTABLESTRING_new = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLESTRING_new")
Interceptor.attach(ASN1_PRINTABLESTRING_new, {onLeave: function (args) {send("ASN1_PRINTABLESTRING_new");}});

var ASN1_PRINTABLE_free = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLE_free")
Interceptor.attach(ASN1_PRINTABLE_free, {onLeave: function (args) {send("ASN1_PRINTABLE_free");}});

var ASN1_PRINTABLE_it = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLE_it")
Interceptor.attach(ASN1_PRINTABLE_it, {onLeave: function (args) {send("ASN1_PRINTABLE_it");}});

var ASN1_PRINTABLE_new = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLE_new")
Interceptor.attach(ASN1_PRINTABLE_new, {onLeave: function (args) {send("ASN1_PRINTABLE_new");}});

var ASN1_PRINTABLE_type = Module.findExportByName("libcrypto.dll", "ASN1_PRINTABLE_type")
Interceptor.attach(ASN1_PRINTABLE_type, {onLeave: function (args) {send("ASN1_PRINTABLE_type");}});

var ASN1_SEQUENCE_ANY_it = Module.findExportByName("libcrypto.dll", "ASN1_SEQUENCE_ANY_it")
Interceptor.attach(ASN1_SEQUENCE_ANY_it, {onLeave: function (args) {send("ASN1_SEQUENCE_ANY_it");}});

var ASN1_SEQUENCE_it = Module.findExportByName("libcrypto.dll", "ASN1_SEQUENCE_it")
Interceptor.attach(ASN1_SEQUENCE_it, {onLeave: function (args) {send("ASN1_SEQUENCE_it");}});

var ASN1_SET_ANY_it = Module.findExportByName("libcrypto.dll", "ASN1_SET_ANY_it")
Interceptor.attach(ASN1_SET_ANY_it, {onLeave: function (args) {send("ASN1_SET_ANY_it");}});

var ASN1_STRING_TABLE_add = Module.findExportByName("libcrypto.dll", "ASN1_STRING_TABLE_add")
Interceptor.attach(ASN1_STRING_TABLE_add, {onLeave: function (args) {send("ASN1_STRING_TABLE_add");}});

var ASN1_STRING_TABLE_cleanup = Module.findExportByName("libcrypto.dll", "ASN1_STRING_TABLE_cleanup")
Interceptor.attach(ASN1_STRING_TABLE_cleanup, {onLeave: function (args) {send("ASN1_STRING_TABLE_cleanup");}});

var ASN1_STRING_TABLE_get = Module.findExportByName("libcrypto.dll", "ASN1_STRING_TABLE_get")
Interceptor.attach(ASN1_STRING_TABLE_get, {onLeave: function (args) {send("ASN1_STRING_TABLE_get");}});

var ASN1_STRING_cmp = Module.findExportByName("libcrypto.dll", "ASN1_STRING_cmp")
Interceptor.attach(ASN1_STRING_cmp, {onLeave: function (args) {send("ASN1_STRING_cmp");}});

var ASN1_STRING_copy = Module.findExportByName("libcrypto.dll", "ASN1_STRING_copy")
Interceptor.attach(ASN1_STRING_copy, {onLeave: function (args) {send("ASN1_STRING_copy");}});

var ASN1_STRING_data = Module.findExportByName("libcrypto.dll", "ASN1_STRING_data")
Interceptor.attach(ASN1_STRING_data, {onLeave: function (args) {send("ASN1_STRING_data");}});

var ASN1_STRING_dup = Module.findExportByName("libcrypto.dll", "ASN1_STRING_dup")
Interceptor.attach(ASN1_STRING_dup, {onLeave: function (args) {send("ASN1_STRING_dup");}});

var ASN1_STRING_free = Module.findExportByName("libcrypto.dll", "ASN1_STRING_free")
Interceptor.attach(ASN1_STRING_free, {onLeave: function (args) {send("ASN1_STRING_free");}});

var ASN1_STRING_get0_data = Module.findExportByName("libcrypto.dll", "ASN1_STRING_get0_data")
Interceptor.attach(ASN1_STRING_get0_data, {onLeave: function (args) {send("ASN1_STRING_get0_data");}});

var ASN1_STRING_get_default_mask = Module.findExportByName("libcrypto.dll", "ASN1_STRING_get_default_mask")
Interceptor.attach(ASN1_STRING_get_default_mask, {onLeave: function (args) {send("ASN1_STRING_get_default_mask");}});

var ASN1_STRING_length = Module.findExportByName("libcrypto.dll", "ASN1_STRING_length")
Interceptor.attach(ASN1_STRING_length, {onLeave: function (args) {send("ASN1_STRING_length");}});

var ASN1_STRING_length_set = Module.findExportByName("libcrypto.dll", "ASN1_STRING_length_set")
Interceptor.attach(ASN1_STRING_length_set, {onLeave: function (args) {send("ASN1_STRING_length_set");}});

var ASN1_STRING_new = Module.findExportByName("libcrypto.dll", "ASN1_STRING_new")
Interceptor.attach(ASN1_STRING_new, {onLeave: function (args) {send("ASN1_STRING_new");}});

var ASN1_STRING_print = Module.findExportByName("libcrypto.dll", "ASN1_STRING_print")
Interceptor.attach(ASN1_STRING_print, {onLeave: function (args) {send("ASN1_STRING_print");}});

var ASN1_STRING_print_ex = Module.findExportByName("libcrypto.dll", "ASN1_STRING_print_ex")
Interceptor.attach(ASN1_STRING_print_ex, {onLeave: function (args) {send("ASN1_STRING_print_ex");}});

var ASN1_STRING_print_ex_fp = Module.findExportByName("libcrypto.dll", "ASN1_STRING_print_ex_fp")
Interceptor.attach(ASN1_STRING_print_ex_fp, {onLeave: function (args) {send("ASN1_STRING_print_ex_fp");}});

var ASN1_STRING_set = Module.findExportByName("libcrypto.dll", "ASN1_STRING_set")
Interceptor.attach(ASN1_STRING_set, {onLeave: function (args) {send("ASN1_STRING_set");}});

var ASN1_STRING_set0 = Module.findExportByName("libcrypto.dll", "ASN1_STRING_set0")
Interceptor.attach(ASN1_STRING_set0, {onLeave: function (args) {send("ASN1_STRING_set0");}});

var ASN1_STRING_set_by_NID = Module.findExportByName("libcrypto.dll", "ASN1_STRING_set_by_NID")
Interceptor.attach(ASN1_STRING_set_by_NID, {onLeave: function (args) {send("ASN1_STRING_set_by_NID");}});

var ASN1_STRING_set_default_mask = Module.findExportByName("libcrypto.dll", "ASN1_STRING_set_default_mask")
Interceptor.attach(ASN1_STRING_set_default_mask, {onLeave: function (args) {send("ASN1_STRING_set_default_mask");}});

var ASN1_STRING_set_default_mask_asc = Module.findExportByName("libcrypto.dll", "ASN1_STRING_set_default_mask_asc")
Interceptor.attach(ASN1_STRING_set_default_mask_asc, {onLeave: function (args) {send("ASN1_STRING_set_default_mask_asc");}});

var ASN1_STRING_to_UTF8 = Module.findExportByName("libcrypto.dll", "ASN1_STRING_to_UTF8")
Interceptor.attach(ASN1_STRING_to_UTF8, {onLeave: function (args) {send("ASN1_STRING_to_UTF8");}});

var ASN1_STRING_type = Module.findExportByName("libcrypto.dll", "ASN1_STRING_type")
Interceptor.attach(ASN1_STRING_type, {onLeave: function (args) {send("ASN1_STRING_type");}});

var ASN1_STRING_type_new = Module.findExportByName("libcrypto.dll", "ASN1_STRING_type_new")
Interceptor.attach(ASN1_STRING_type_new, {onLeave: function (args) {send("ASN1_STRING_type_new");}});

var ASN1_T61STRING_free = Module.findExportByName("libcrypto.dll", "ASN1_T61STRING_free")
Interceptor.attach(ASN1_T61STRING_free, {onLeave: function (args) {send("ASN1_T61STRING_free");}});

var ASN1_T61STRING_it = Module.findExportByName("libcrypto.dll", "ASN1_T61STRING_it")
Interceptor.attach(ASN1_T61STRING_it, {onLeave: function (args) {send("ASN1_T61STRING_it");}});

var ASN1_T61STRING_new = Module.findExportByName("libcrypto.dll", "ASN1_T61STRING_new")
Interceptor.attach(ASN1_T61STRING_new, {onLeave: function (args) {send("ASN1_T61STRING_new");}});

var ASN1_TBOOLEAN_it = Module.findExportByName("libcrypto.dll", "ASN1_TBOOLEAN_it")
Interceptor.attach(ASN1_TBOOLEAN_it, {onLeave: function (args) {send("ASN1_TBOOLEAN_it");}});

var ASN1_TIME_adj = Module.findExportByName("libcrypto.dll", "ASN1_TIME_adj")
Interceptor.attach(ASN1_TIME_adj, {onLeave: function (args) {send("ASN1_TIME_adj");}});

var ASN1_TIME_check = Module.findExportByName("libcrypto.dll", "ASN1_TIME_check")
Interceptor.attach(ASN1_TIME_check, {onLeave: function (args) {send("ASN1_TIME_check");}});

var ASN1_TIME_free = Module.findExportByName("libcrypto.dll", "ASN1_TIME_free")
Interceptor.attach(ASN1_TIME_free, {onLeave: function (args) {send("ASN1_TIME_free");}});

var ASN1_TIME_it = Module.findExportByName("libcrypto.dll", "ASN1_TIME_it")
Interceptor.attach(ASN1_TIME_it, {onLeave: function (args) {send("ASN1_TIME_it");}});

var ASN1_TIME_new = Module.findExportByName("libcrypto.dll", "ASN1_TIME_new")
Interceptor.attach(ASN1_TIME_new, {onLeave: function (args) {send("ASN1_TIME_new");}});

var ASN1_TIME_print = Module.findExportByName("libcrypto.dll", "ASN1_TIME_print")
Interceptor.attach(ASN1_TIME_print, {onLeave: function (args) {send("ASN1_TIME_print");}});

var ASN1_TIME_set = Module.findExportByName("libcrypto.dll", "ASN1_TIME_set")
Interceptor.attach(ASN1_TIME_set, {onLeave: function (args) {send("ASN1_TIME_set");}});

var ASN1_TIME_set_string = Module.findExportByName("libcrypto.dll", "ASN1_TIME_set_string")
Interceptor.attach(ASN1_TIME_set_string, {onLeave: function (args) {send("ASN1_TIME_set_string");}});

var ASN1_TIME_set_tm = Module.findExportByName("libcrypto.dll", "ASN1_TIME_set_tm")
Interceptor.attach(ASN1_TIME_set_tm, {onLeave: function (args) {send("ASN1_TIME_set_tm");}});

var ASN1_TIME_to_generalizedtime = Module.findExportByName("libcrypto.dll", "ASN1_TIME_to_generalizedtime")
Interceptor.attach(ASN1_TIME_to_generalizedtime, {onLeave: function (args) {send("ASN1_TIME_to_generalizedtime");}});

var ASN1_TYPE_cmp = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_cmp")
Interceptor.attach(ASN1_TYPE_cmp, {onLeave: function (args) {send("ASN1_TYPE_cmp");}});

var ASN1_TYPE_free = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_free")
Interceptor.attach(ASN1_TYPE_free, {onLeave: function (args) {send("ASN1_TYPE_free");}});

var ASN1_TYPE_get = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_get")
Interceptor.attach(ASN1_TYPE_get, {onLeave: function (args) {send("ASN1_TYPE_get");}});

var ASN1_TYPE_get_int_octetstring = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_get_int_octetstring")
Interceptor.attach(ASN1_TYPE_get_int_octetstring, {onLeave: function (args) {send("ASN1_TYPE_get_int_octetstring");}});

var ASN1_TYPE_get_octetstring = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_get_octetstring")
Interceptor.attach(ASN1_TYPE_get_octetstring, {onLeave: function (args) {send("ASN1_TYPE_get_octetstring");}});

var ASN1_TYPE_new = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_new")
Interceptor.attach(ASN1_TYPE_new, {onLeave: function (args) {send("ASN1_TYPE_new");}});

var ASN1_TYPE_set = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_set")
Interceptor.attach(ASN1_TYPE_set, {onLeave: function (args) {send("ASN1_TYPE_set");}});

var ASN1_TYPE_set1 = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_set1")
Interceptor.attach(ASN1_TYPE_set1, {onLeave: function (args) {send("ASN1_TYPE_set1");}});

var ASN1_TYPE_set_int_octetstring = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_set_int_octetstring")
Interceptor.attach(ASN1_TYPE_set_int_octetstring, {onLeave: function (args) {send("ASN1_TYPE_set_int_octetstring");}});

var ASN1_TYPE_set_octetstring = Module.findExportByName("libcrypto.dll", "ASN1_TYPE_set_octetstring")
Interceptor.attach(ASN1_TYPE_set_octetstring, {onLeave: function (args) {send("ASN1_TYPE_set_octetstring");}});

var ASN1_UNIVERSALSTRING_free = Module.findExportByName("libcrypto.dll", "ASN1_UNIVERSALSTRING_free")
Interceptor.attach(ASN1_UNIVERSALSTRING_free, {onLeave: function (args) {send("ASN1_UNIVERSALSTRING_free");}});

var ASN1_UNIVERSALSTRING_it = Module.findExportByName("libcrypto.dll", "ASN1_UNIVERSALSTRING_it")
Interceptor.attach(ASN1_UNIVERSALSTRING_it, {onLeave: function (args) {send("ASN1_UNIVERSALSTRING_it");}});

var ASN1_UNIVERSALSTRING_new = Module.findExportByName("libcrypto.dll", "ASN1_UNIVERSALSTRING_new")
Interceptor.attach(ASN1_UNIVERSALSTRING_new, {onLeave: function (args) {send("ASN1_UNIVERSALSTRING_new");}});

var ASN1_UNIVERSALSTRING_to_string = Module.findExportByName("libcrypto.dll", "ASN1_UNIVERSALSTRING_to_string")
Interceptor.attach(ASN1_UNIVERSALSTRING_to_string, {onLeave: function (args) {send("ASN1_UNIVERSALSTRING_to_string");}});

var ASN1_UTCTIME_adj = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_adj")
Interceptor.attach(ASN1_UTCTIME_adj, {onLeave: function (args) {send("ASN1_UTCTIME_adj");}});

var ASN1_UTCTIME_check = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_check")
Interceptor.attach(ASN1_UTCTIME_check, {onLeave: function (args) {send("ASN1_UTCTIME_check");}});

var ASN1_UTCTIME_cmp_time_t = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_cmp_time_t")
Interceptor.attach(ASN1_UTCTIME_cmp_time_t, {onLeave: function (args) {send("ASN1_UTCTIME_cmp_time_t");}});

var ASN1_UTCTIME_free = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_free")
Interceptor.attach(ASN1_UTCTIME_free, {onLeave: function (args) {send("ASN1_UTCTIME_free");}});

var ASN1_UTCTIME_it = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_it")
Interceptor.attach(ASN1_UTCTIME_it, {onLeave: function (args) {send("ASN1_UTCTIME_it");}});

var ASN1_UTCTIME_new = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_new")
Interceptor.attach(ASN1_UTCTIME_new, {onLeave: function (args) {send("ASN1_UTCTIME_new");}});

var ASN1_UTCTIME_print = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_print")
Interceptor.attach(ASN1_UTCTIME_print, {onLeave: function (args) {send("ASN1_UTCTIME_print");}});

var ASN1_UTCTIME_set = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_set")
Interceptor.attach(ASN1_UTCTIME_set, {onLeave: function (args) {send("ASN1_UTCTIME_set");}});

var ASN1_UTCTIME_set_string = Module.findExportByName("libcrypto.dll", "ASN1_UTCTIME_set_string")
Interceptor.attach(ASN1_UTCTIME_set_string, {onLeave: function (args) {send("ASN1_UTCTIME_set_string");}});

var ASN1_UTF8STRING_free = Module.findExportByName("libcrypto.dll", "ASN1_UTF8STRING_free")
Interceptor.attach(ASN1_UTF8STRING_free, {onLeave: function (args) {send("ASN1_UTF8STRING_free");}});

var ASN1_UTF8STRING_it = Module.findExportByName("libcrypto.dll", "ASN1_UTF8STRING_it")
Interceptor.attach(ASN1_UTF8STRING_it, {onLeave: function (args) {send("ASN1_UTF8STRING_it");}});

var ASN1_UTF8STRING_new = Module.findExportByName("libcrypto.dll", "ASN1_UTF8STRING_new")
Interceptor.attach(ASN1_UTF8STRING_new, {onLeave: function (args) {send("ASN1_UTF8STRING_new");}});

var ASN1_VISIBLESTRING_free = Module.findExportByName("libcrypto.dll", "ASN1_VISIBLESTRING_free")
Interceptor.attach(ASN1_VISIBLESTRING_free, {onLeave: function (args) {send("ASN1_VISIBLESTRING_free");}});

var ASN1_VISIBLESTRING_it = Module.findExportByName("libcrypto.dll", "ASN1_VISIBLESTRING_it")
Interceptor.attach(ASN1_VISIBLESTRING_it, {onLeave: function (args) {send("ASN1_VISIBLESTRING_it");}});

var ASN1_VISIBLESTRING_new = Module.findExportByName("libcrypto.dll", "ASN1_VISIBLESTRING_new")
Interceptor.attach(ASN1_VISIBLESTRING_new, {onLeave: function (args) {send("ASN1_VISIBLESTRING_new");}});

var ASN1_add_oid_module = Module.findExportByName("libcrypto.dll", "ASN1_add_oid_module")
Interceptor.attach(ASN1_add_oid_module, {onLeave: function (args) {send("ASN1_add_oid_module");}});

var ASN1_bn_print = Module.findExportByName("libcrypto.dll", "ASN1_bn_print")
Interceptor.attach(ASN1_bn_print, {onLeave: function (args) {send("ASN1_bn_print");}});

var ASN1_check_infinite_end = Module.findExportByName("libcrypto.dll", "ASN1_check_infinite_end")
Interceptor.attach(ASN1_check_infinite_end, {onLeave: function (args) {send("ASN1_check_infinite_end");}});

var ASN1_const_check_infinite_end = Module.findExportByName("libcrypto.dll", "ASN1_const_check_infinite_end")
Interceptor.attach(ASN1_const_check_infinite_end, {onLeave: function (args) {send("ASN1_const_check_infinite_end");}});

var ASN1_d2i_bio = Module.findExportByName("libcrypto.dll", "ASN1_d2i_bio")
Interceptor.attach(ASN1_d2i_bio, {onLeave: function (args) {send("ASN1_d2i_bio");}});

var ASN1_d2i_fp = Module.findExportByName("libcrypto.dll", "ASN1_d2i_fp")
Interceptor.attach(ASN1_d2i_fp, {onLeave: function (args) {send("ASN1_d2i_fp");}});

var ASN1_dup = Module.findExportByName("libcrypto.dll", "ASN1_dup")
Interceptor.attach(ASN1_dup, {onLeave: function (args) {send("ASN1_dup");}});

var ASN1_generate_nconf = Module.findExportByName("libcrypto.dll", "ASN1_generate_nconf")
Interceptor.attach(ASN1_generate_nconf, {onLeave: function (args) {send("ASN1_generate_nconf");}});

var ASN1_generate_v3 = Module.findExportByName("libcrypto.dll", "ASN1_generate_v3")
Interceptor.attach(ASN1_generate_v3, {onLeave: function (args) {send("ASN1_generate_v3");}});

var ASN1_get_object = Module.findExportByName("libcrypto.dll", "ASN1_get_object")
Interceptor.attach(ASN1_get_object, {onLeave: function (args) {send("ASN1_get_object");}});

var ASN1_i2d_bio = Module.findExportByName("libcrypto.dll", "ASN1_i2d_bio")
Interceptor.attach(ASN1_i2d_bio, {onLeave: function (args) {send("ASN1_i2d_bio");}});

var ASN1_i2d_fp = Module.findExportByName("libcrypto.dll", "ASN1_i2d_fp")
Interceptor.attach(ASN1_i2d_fp, {onLeave: function (args) {send("ASN1_i2d_fp");}});

var ASN1_item_d2i = Module.findExportByName("libcrypto.dll", "ASN1_item_d2i")
Interceptor.attach(ASN1_item_d2i, {onLeave: function (args) {send("ASN1_item_d2i");}});

var ASN1_item_d2i_bio = Module.findExportByName("libcrypto.dll", "ASN1_item_d2i_bio")
Interceptor.attach(ASN1_item_d2i_bio, {onLeave: function (args) {send("ASN1_item_d2i_bio");}});

var ASN1_item_d2i_fp = Module.findExportByName("libcrypto.dll", "ASN1_item_d2i_fp")
Interceptor.attach(ASN1_item_d2i_fp, {onLeave: function (args) {send("ASN1_item_d2i_fp");}});

var ASN1_item_digest = Module.findExportByName("libcrypto.dll", "ASN1_item_digest")
Interceptor.attach(ASN1_item_digest, {onLeave: function (args) {send("ASN1_item_digest");}});

var ASN1_item_dup = Module.findExportByName("libcrypto.dll", "ASN1_item_dup")
Interceptor.attach(ASN1_item_dup, {onLeave: function (args) {send("ASN1_item_dup");}});

var ASN1_item_ex_d2i = Module.findExportByName("libcrypto.dll", "ASN1_item_ex_d2i")
Interceptor.attach(ASN1_item_ex_d2i, {onLeave: function (args) {send("ASN1_item_ex_d2i");}});

var ASN1_item_ex_free = Module.findExportByName("libcrypto.dll", "ASN1_item_ex_free")
Interceptor.attach(ASN1_item_ex_free, {onLeave: function (args) {send("ASN1_item_ex_free");}});

var ASN1_item_ex_i2d = Module.findExportByName("libcrypto.dll", "ASN1_item_ex_i2d")
Interceptor.attach(ASN1_item_ex_i2d, {onLeave: function (args) {send("ASN1_item_ex_i2d");}});

var ASN1_item_ex_new = Module.findExportByName("libcrypto.dll", "ASN1_item_ex_new")
Interceptor.attach(ASN1_item_ex_new, {onLeave: function (args) {send("ASN1_item_ex_new");}});

var ASN1_item_free = Module.findExportByName("libcrypto.dll", "ASN1_item_free")
Interceptor.attach(ASN1_item_free, {onLeave: function (args) {send("ASN1_item_free");}});

var ASN1_item_i2d = Module.findExportByName("libcrypto.dll", "ASN1_item_i2d")
Interceptor.attach(ASN1_item_i2d, {onLeave: function (args) {send("ASN1_item_i2d");}});

var ASN1_item_i2d_bio = Module.findExportByName("libcrypto.dll", "ASN1_item_i2d_bio")
Interceptor.attach(ASN1_item_i2d_bio, {onLeave: function (args) {send("ASN1_item_i2d_bio");}});

var ASN1_item_i2d_fp = Module.findExportByName("libcrypto.dll", "ASN1_item_i2d_fp")
Interceptor.attach(ASN1_item_i2d_fp, {onLeave: function (args) {send("ASN1_item_i2d_fp");}});

var ASN1_item_ndef_i2d = Module.findExportByName("libcrypto.dll", "ASN1_item_ndef_i2d")
Interceptor.attach(ASN1_item_ndef_i2d, {onLeave: function (args) {send("ASN1_item_ndef_i2d");}});

var ASN1_item_new = Module.findExportByName("libcrypto.dll", "ASN1_item_new")
Interceptor.attach(ASN1_item_new, {onLeave: function (args) {send("ASN1_item_new");}});

var ASN1_item_pack = Module.findExportByName("libcrypto.dll", "ASN1_item_pack")
Interceptor.attach(ASN1_item_pack, {onLeave: function (args) {send("ASN1_item_pack");}});

var ASN1_item_print = Module.findExportByName("libcrypto.dll", "ASN1_item_print")
Interceptor.attach(ASN1_item_print, {onLeave: function (args) {send("ASN1_item_print");}});

var ASN1_item_sign = Module.findExportByName("libcrypto.dll", "ASN1_item_sign")
Interceptor.attach(ASN1_item_sign, {onLeave: function (args) {send("ASN1_item_sign");}});

var ASN1_item_sign_ctx = Module.findExportByName("libcrypto.dll", "ASN1_item_sign_ctx")
Interceptor.attach(ASN1_item_sign_ctx, {onLeave: function (args) {send("ASN1_item_sign_ctx");}});

var ASN1_item_unpack = Module.findExportByName("libcrypto.dll", "ASN1_item_unpack")
Interceptor.attach(ASN1_item_unpack, {onLeave: function (args) {send("ASN1_item_unpack");}});

var ASN1_item_verify = Module.findExportByName("libcrypto.dll", "ASN1_item_verify")
Interceptor.attach(ASN1_item_verify, {onLeave: function (args) {send("ASN1_item_verify");}});

var ASN1_mbstring_copy = Module.findExportByName("libcrypto.dll", "ASN1_mbstring_copy")
Interceptor.attach(ASN1_mbstring_copy, {onLeave: function (args) {send("ASN1_mbstring_copy");}});

var ASN1_mbstring_ncopy = Module.findExportByName("libcrypto.dll", "ASN1_mbstring_ncopy")
Interceptor.attach(ASN1_mbstring_ncopy, {onLeave: function (args) {send("ASN1_mbstring_ncopy");}});

var ASN1_object_size = Module.findExportByName("libcrypto.dll", "ASN1_object_size")
Interceptor.attach(ASN1_object_size, {onLeave: function (args) {send("ASN1_object_size");}});

var ASN1_parse = Module.findExportByName("libcrypto.dll", "ASN1_parse")
Interceptor.attach(ASN1_parse, {onLeave: function (args) {send("ASN1_parse");}});

var ASN1_parse_dump = Module.findExportByName("libcrypto.dll", "ASN1_parse_dump")
Interceptor.attach(ASN1_parse_dump, {onLeave: function (args) {send("ASN1_parse_dump");}});

var ASN1_primitive_free = Module.findExportByName("libcrypto.dll", "ASN1_primitive_free")
Interceptor.attach(ASN1_primitive_free, {onLeave: function (args) {send("ASN1_primitive_free");}});

var ASN1_primitive_new = Module.findExportByName("libcrypto.dll", "ASN1_primitive_new")
Interceptor.attach(ASN1_primitive_new, {onLeave: function (args) {send("ASN1_primitive_new");}});

var ASN1_put_eoc = Module.findExportByName("libcrypto.dll", "ASN1_put_eoc")
Interceptor.attach(ASN1_put_eoc, {onLeave: function (args) {send("ASN1_put_eoc");}});

var ASN1_put_object = Module.findExportByName("libcrypto.dll", "ASN1_put_object")
Interceptor.attach(ASN1_put_object, {onLeave: function (args) {send("ASN1_put_object");}});

var ASN1_tag2bit = Module.findExportByName("libcrypto.dll", "ASN1_tag2bit")
Interceptor.attach(ASN1_tag2bit, {onLeave: function (args) {send("ASN1_tag2bit");}});

var ASN1_tag2str = Module.findExportByName("libcrypto.dll", "ASN1_tag2str")
Interceptor.attach(ASN1_tag2str, {onLeave: function (args) {send("ASN1_tag2str");}});

var ASN1_template_d2i = Module.findExportByName("libcrypto.dll", "ASN1_template_d2i")
Interceptor.attach(ASN1_template_d2i, {onLeave: function (args) {send("ASN1_template_d2i");}});

var ASN1_template_free = Module.findExportByName("libcrypto.dll", "ASN1_template_free")
Interceptor.attach(ASN1_template_free, {onLeave: function (args) {send("ASN1_template_free");}});

var ASN1_template_i2d = Module.findExportByName("libcrypto.dll", "ASN1_template_i2d")
Interceptor.attach(ASN1_template_i2d, {onLeave: function (args) {send("ASN1_template_i2d");}});

var ASN1_template_new = Module.findExportByName("libcrypto.dll", "ASN1_template_new")
Interceptor.attach(ASN1_template_new, {onLeave: function (args) {send("ASN1_template_new");}});

var ASN1_time_parse = Module.findExportByName("libcrypto.dll", "ASN1_time_parse")
Interceptor.attach(ASN1_time_parse, {onLeave: function (args) {send("ASN1_time_parse");}});

var ASN1_time_tm_clamp_notafter = Module.findExportByName("libcrypto.dll", "ASN1_time_tm_clamp_notafter")
Interceptor.attach(ASN1_time_tm_clamp_notafter, {onLeave: function (args) {send("ASN1_time_tm_clamp_notafter");}});

var ASN1_time_tm_cmp = Module.findExportByName("libcrypto.dll", "ASN1_time_tm_cmp")
Interceptor.attach(ASN1_time_tm_cmp, {onLeave: function (args) {send("ASN1_time_tm_cmp");}});

var AUTHORITY_INFO_ACCESS_free = Module.findExportByName("libcrypto.dll", "AUTHORITY_INFO_ACCESS_free")
Interceptor.attach(AUTHORITY_INFO_ACCESS_free, {onLeave: function (args) {send("AUTHORITY_INFO_ACCESS_free");}});

var AUTHORITY_INFO_ACCESS_it = Module.findExportByName("libcrypto.dll", "AUTHORITY_INFO_ACCESS_it")
Interceptor.attach(AUTHORITY_INFO_ACCESS_it, {onLeave: function (args) {send("AUTHORITY_INFO_ACCESS_it");}});

var AUTHORITY_INFO_ACCESS_new = Module.findExportByName("libcrypto.dll", "AUTHORITY_INFO_ACCESS_new")
Interceptor.attach(AUTHORITY_INFO_ACCESS_new, {onLeave: function (args) {send("AUTHORITY_INFO_ACCESS_new");}});

var AUTHORITY_KEYID_free = Module.findExportByName("libcrypto.dll", "AUTHORITY_KEYID_free")
Interceptor.attach(AUTHORITY_KEYID_free, {onLeave: function (args) {send("AUTHORITY_KEYID_free");}});

var AUTHORITY_KEYID_it = Module.findExportByName("libcrypto.dll", "AUTHORITY_KEYID_it")
Interceptor.attach(AUTHORITY_KEYID_it, {onLeave: function (args) {send("AUTHORITY_KEYID_it");}});

var AUTHORITY_KEYID_new = Module.findExportByName("libcrypto.dll", "AUTHORITY_KEYID_new")
Interceptor.attach(AUTHORITY_KEYID_new, {onLeave: function (args) {send("AUTHORITY_KEYID_new");}});

var BASIC_CONSTRAINTS_free = Module.findExportByName("libcrypto.dll", "BASIC_CONSTRAINTS_free")
Interceptor.attach(BASIC_CONSTRAINTS_free, {onLeave: function (args) {send("BASIC_CONSTRAINTS_free");}});

var BASIC_CONSTRAINTS_it = Module.findExportByName("libcrypto.dll", "BASIC_CONSTRAINTS_it")
Interceptor.attach(BASIC_CONSTRAINTS_it, {onLeave: function (args) {send("BASIC_CONSTRAINTS_it");}});

var BASIC_CONSTRAINTS_new = Module.findExportByName("libcrypto.dll", "BASIC_CONSTRAINTS_new")
Interceptor.attach(BASIC_CONSTRAINTS_new, {onLeave: function (args) {send("BASIC_CONSTRAINTS_new");}});

var BF_cbc_encrypt = Module.findExportByName("libcrypto.dll", "BF_cbc_encrypt")
Interceptor.attach(BF_cbc_encrypt, {onLeave: function (args) {send("BF_cbc_encrypt");}});

var BF_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "BF_cfb64_encrypt")
Interceptor.attach(BF_cfb64_encrypt, {onLeave: function (args) {send("BF_cfb64_encrypt");}});

var BF_decrypt = Module.findExportByName("libcrypto.dll", "BF_decrypt")
Interceptor.attach(BF_decrypt, {onLeave: function (args) {send("BF_decrypt");}});

var BF_ecb_encrypt = Module.findExportByName("libcrypto.dll", "BF_ecb_encrypt")
Interceptor.attach(BF_ecb_encrypt, {onLeave: function (args) {send("BF_ecb_encrypt");}});

var BF_encrypt = Module.findExportByName("libcrypto.dll", "BF_encrypt")
Interceptor.attach(BF_encrypt, {onLeave: function (args) {send("BF_encrypt");}});

var BF_ofb64_encrypt = Module.findExportByName("libcrypto.dll", "BF_ofb64_encrypt")
Interceptor.attach(BF_ofb64_encrypt, {onLeave: function (args) {send("BF_ofb64_encrypt");}});

var BF_options = Module.findExportByName("libcrypto.dll", "BF_options")
Interceptor.attach(BF_options, {onLeave: function (args) {send("BF_options");}});

var BF_set_key = Module.findExportByName("libcrypto.dll", "BF_set_key")
Interceptor.attach(BF_set_key, {onLeave: function (args) {send("BF_set_key");}});

var BIGNUM_it = Module.findExportByName("libcrypto.dll", "BIGNUM_it")
Interceptor.attach(BIGNUM_it, {onLeave: function (args) {send("BIGNUM_it");}});

var BIO_CONNECT_free = Module.findExportByName("libcrypto.dll", "BIO_CONNECT_free")
Interceptor.attach(BIO_CONNECT_free, {onLeave: function (args) {send("BIO_CONNECT_free");}});

var BIO_CONNECT_new = Module.findExportByName("libcrypto.dll", "BIO_CONNECT_new")
Interceptor.attach(BIO_CONNECT_new, {onLeave: function (args) {send("BIO_CONNECT_new");}});

var BIO_accept = Module.findExportByName("libcrypto.dll", "BIO_accept")
Interceptor.attach(BIO_accept, {onLeave: function (args) {send("BIO_accept");}});

var BIO_asn1_get_prefix = Module.findExportByName("libcrypto.dll", "BIO_asn1_get_prefix")
Interceptor.attach(BIO_asn1_get_prefix, {onLeave: function (args) {send("BIO_asn1_get_prefix");}});

var BIO_asn1_get_suffix = Module.findExportByName("libcrypto.dll", "BIO_asn1_get_suffix")
Interceptor.attach(BIO_asn1_get_suffix, {onLeave: function (args) {send("BIO_asn1_get_suffix");}});

var BIO_asn1_set_prefix = Module.findExportByName("libcrypto.dll", "BIO_asn1_set_prefix")
Interceptor.attach(BIO_asn1_set_prefix, {onLeave: function (args) {send("BIO_asn1_set_prefix");}});

var BIO_asn1_set_suffix = Module.findExportByName("libcrypto.dll", "BIO_asn1_set_suffix")
Interceptor.attach(BIO_asn1_set_suffix, {onLeave: function (args) {send("BIO_asn1_set_suffix");}});

var BIO_callback_ctrl = Module.findExportByName("libcrypto.dll", "BIO_callback_ctrl")
Interceptor.attach(BIO_callback_ctrl, {onLeave: function (args) {send("BIO_callback_ctrl");}});

var BIO_clear_flags = Module.findExportByName("libcrypto.dll", "BIO_clear_flags")
Interceptor.attach(BIO_clear_flags, {onLeave: function (args) {send("BIO_clear_flags");}});

var BIO_copy_next_retry = Module.findExportByName("libcrypto.dll", "BIO_copy_next_retry")
Interceptor.attach(BIO_copy_next_retry, {onLeave: function (args) {send("BIO_copy_next_retry");}});

var BIO_ctrl = Module.findExportByName("libcrypto.dll", "BIO_ctrl")
Interceptor.attach(BIO_ctrl, {onLeave: function (args) {send("BIO_ctrl");}});

var BIO_ctrl_get_read_request = Module.findExportByName("libcrypto.dll", "BIO_ctrl_get_read_request")
Interceptor.attach(BIO_ctrl_get_read_request, {onLeave: function (args) {send("BIO_ctrl_get_read_request");}});

var BIO_ctrl_get_write_guarantee = Module.findExportByName("libcrypto.dll", "BIO_ctrl_get_write_guarantee")
Interceptor.attach(BIO_ctrl_get_write_guarantee, {onLeave: function (args) {send("BIO_ctrl_get_write_guarantee");}});

var BIO_ctrl_pending = Module.findExportByName("libcrypto.dll", "BIO_ctrl_pending")
Interceptor.attach(BIO_ctrl_pending, {onLeave: function (args) {send("BIO_ctrl_pending");}});

var BIO_ctrl_reset_read_request = Module.findExportByName("libcrypto.dll", "BIO_ctrl_reset_read_request")
Interceptor.attach(BIO_ctrl_reset_read_request, {onLeave: function (args) {send("BIO_ctrl_reset_read_request");}});

var BIO_ctrl_wpending = Module.findExportByName("libcrypto.dll", "BIO_ctrl_wpending")
Interceptor.attach(BIO_ctrl_wpending, {onLeave: function (args) {send("BIO_ctrl_wpending");}});

var BIO_debug_callback = Module.findExportByName("libcrypto.dll", "BIO_debug_callback")
Interceptor.attach(BIO_debug_callback, {onLeave: function (args) {send("BIO_debug_callback");}});

var BIO_dgram_non_fatal_error = Module.findExportByName("libcrypto.dll", "BIO_dgram_non_fatal_error")
Interceptor.attach(BIO_dgram_non_fatal_error, {onLeave: function (args) {send("BIO_dgram_non_fatal_error");}});

var BIO_dump = Module.findExportByName("libcrypto.dll", "BIO_dump")
Interceptor.attach(BIO_dump, {onLeave: function (args) {send("BIO_dump");}});

var BIO_dump_cb = Module.findExportByName("libcrypto.dll", "BIO_dump_cb")
Interceptor.attach(BIO_dump_cb, {onLeave: function (args) {send("BIO_dump_cb");}});

var BIO_dump_fp = Module.findExportByName("libcrypto.dll", "BIO_dump_fp")
Interceptor.attach(BIO_dump_fp, {onLeave: function (args) {send("BIO_dump_fp");}});

var BIO_dump_indent = Module.findExportByName("libcrypto.dll", "BIO_dump_indent")
Interceptor.attach(BIO_dump_indent, {onLeave: function (args) {send("BIO_dump_indent");}});

var BIO_dump_indent_cb = Module.findExportByName("libcrypto.dll", "BIO_dump_indent_cb")
Interceptor.attach(BIO_dump_indent_cb, {onLeave: function (args) {send("BIO_dump_indent_cb");}});

var BIO_dump_indent_fp = Module.findExportByName("libcrypto.dll", "BIO_dump_indent_fp")
Interceptor.attach(BIO_dump_indent_fp, {onLeave: function (args) {send("BIO_dump_indent_fp");}});

var BIO_dup_chain = Module.findExportByName("libcrypto.dll", "BIO_dup_chain")
Interceptor.attach(BIO_dup_chain, {onLeave: function (args) {send("BIO_dup_chain");}});

var BIO_f_asn1 = Module.findExportByName("libcrypto.dll", "BIO_f_asn1")
Interceptor.attach(BIO_f_asn1, {onLeave: function (args) {send("BIO_f_asn1");}});

var BIO_f_base64 = Module.findExportByName("libcrypto.dll", "BIO_f_base64")
Interceptor.attach(BIO_f_base64, {onLeave: function (args) {send("BIO_f_base64");}});

var BIO_f_buffer = Module.findExportByName("libcrypto.dll", "BIO_f_buffer")
Interceptor.attach(BIO_f_buffer, {onLeave: function (args) {send("BIO_f_buffer");}});

var BIO_f_cipher = Module.findExportByName("libcrypto.dll", "BIO_f_cipher")
Interceptor.attach(BIO_f_cipher, {onLeave: function (args) {send("BIO_f_cipher");}});

var BIO_f_md = Module.findExportByName("libcrypto.dll", "BIO_f_md")
Interceptor.attach(BIO_f_md, {onLeave: function (args) {send("BIO_f_md");}});

var BIO_f_nbio_test = Module.findExportByName("libcrypto.dll", "BIO_f_nbio_test")
Interceptor.attach(BIO_f_nbio_test, {onLeave: function (args) {send("BIO_f_nbio_test");}});

var BIO_f_null = Module.findExportByName("libcrypto.dll", "BIO_f_null")
Interceptor.attach(BIO_f_null, {onLeave: function (args) {send("BIO_f_null");}});

var BIO_fd_non_fatal_error = Module.findExportByName("libcrypto.dll", "BIO_fd_non_fatal_error")
Interceptor.attach(BIO_fd_non_fatal_error, {onLeave: function (args) {send("BIO_fd_non_fatal_error");}});

var BIO_fd_should_retry = Module.findExportByName("libcrypto.dll", "BIO_fd_should_retry")
Interceptor.attach(BIO_fd_should_retry, {onLeave: function (args) {send("BIO_fd_should_retry");}});

var BIO_find_type = Module.findExportByName("libcrypto.dll", "BIO_find_type")
Interceptor.attach(BIO_find_type, {onLeave: function (args) {send("BIO_find_type");}});

var BIO_free = Module.findExportByName("libcrypto.dll", "BIO_free")
Interceptor.attach(BIO_free, {onLeave: function (args) {send("BIO_free");}});

var BIO_free_all = Module.findExportByName("libcrypto.dll", "BIO_free_all")
Interceptor.attach(BIO_free_all, {onLeave: function (args) {send("BIO_free_all");}});

var BIO_get_accept_socket = Module.findExportByName("libcrypto.dll", "BIO_get_accept_socket")
Interceptor.attach(BIO_get_accept_socket, {onLeave: function (args) {send("BIO_get_accept_socket");}});

var BIO_get_callback = Module.findExportByName("libcrypto.dll", "BIO_get_callback")
Interceptor.attach(BIO_get_callback, {onLeave: function (args) {send("BIO_get_callback");}});

var BIO_get_callback_arg = Module.findExportByName("libcrypto.dll", "BIO_get_callback_arg")
Interceptor.attach(BIO_get_callback_arg, {onLeave: function (args) {send("BIO_get_callback_arg");}});

var BIO_get_data = Module.findExportByName("libcrypto.dll", "BIO_get_data")
Interceptor.attach(BIO_get_data, {onLeave: function (args) {send("BIO_get_data");}});

var BIO_get_ex_data = Module.findExportByName("libcrypto.dll", "BIO_get_ex_data")
Interceptor.attach(BIO_get_ex_data, {onLeave: function (args) {send("BIO_get_ex_data");}});

var BIO_get_ex_new_index = Module.findExportByName("libcrypto.dll", "BIO_get_ex_new_index")
Interceptor.attach(BIO_get_ex_new_index, {onLeave: function (args) {send("BIO_get_ex_new_index");}});

var BIO_get_host_ip = Module.findExportByName("libcrypto.dll", "BIO_get_host_ip")
Interceptor.attach(BIO_get_host_ip, {onLeave: function (args) {send("BIO_get_host_ip");}});

var BIO_get_new_index = Module.findExportByName("libcrypto.dll", "BIO_get_new_index")
Interceptor.attach(BIO_get_new_index, {onLeave: function (args) {send("BIO_get_new_index");}});

var BIO_get_port = Module.findExportByName("libcrypto.dll", "BIO_get_port")
Interceptor.attach(BIO_get_port, {onLeave: function (args) {send("BIO_get_port");}});

var BIO_get_retry_BIO = Module.findExportByName("libcrypto.dll", "BIO_get_retry_BIO")
Interceptor.attach(BIO_get_retry_BIO, {onLeave: function (args) {send("BIO_get_retry_BIO");}});

var BIO_get_retry_reason = Module.findExportByName("libcrypto.dll", "BIO_get_retry_reason")
Interceptor.attach(BIO_get_retry_reason, {onLeave: function (args) {send("BIO_get_retry_reason");}});

var BIO_get_shutdown = Module.findExportByName("libcrypto.dll", "BIO_get_shutdown")
Interceptor.attach(BIO_get_shutdown, {onLeave: function (args) {send("BIO_get_shutdown");}});

var BIO_gethostbyname = Module.findExportByName("libcrypto.dll", "BIO_gethostbyname")
Interceptor.attach(BIO_gethostbyname, {onLeave: function (args) {send("BIO_gethostbyname");}});

var BIO_gets = Module.findExportByName("libcrypto.dll", "BIO_gets")
Interceptor.attach(BIO_gets, {onLeave: function (args) {send("BIO_gets");}});

var BIO_indent = Module.findExportByName("libcrypto.dll", "BIO_indent")
Interceptor.attach(BIO_indent, {onLeave: function (args) {send("BIO_indent");}});

var BIO_int_ctrl = Module.findExportByName("libcrypto.dll", "BIO_int_ctrl")
Interceptor.attach(BIO_int_ctrl, {onLeave: function (args) {send("BIO_int_ctrl");}});

var BIO_meth_free = Module.findExportByName("libcrypto.dll", "BIO_meth_free")
Interceptor.attach(BIO_meth_free, {onLeave: function (args) {send("BIO_meth_free");}});

var BIO_meth_get_callback_ctrl = Module.findExportByName("libcrypto.dll", "BIO_meth_get_callback_ctrl")
Interceptor.attach(BIO_meth_get_callback_ctrl, {onLeave: function (args) {send("BIO_meth_get_callback_ctrl");}});

var BIO_meth_get_create = Module.findExportByName("libcrypto.dll", "BIO_meth_get_create")
Interceptor.attach(BIO_meth_get_create, {onLeave: function (args) {send("BIO_meth_get_create");}});

var BIO_meth_get_ctrl = Module.findExportByName("libcrypto.dll", "BIO_meth_get_ctrl")
Interceptor.attach(BIO_meth_get_ctrl, {onLeave: function (args) {send("BIO_meth_get_ctrl");}});

var BIO_meth_get_destroy = Module.findExportByName("libcrypto.dll", "BIO_meth_get_destroy")
Interceptor.attach(BIO_meth_get_destroy, {onLeave: function (args) {send("BIO_meth_get_destroy");}});

var BIO_meth_get_gets = Module.findExportByName("libcrypto.dll", "BIO_meth_get_gets")
Interceptor.attach(BIO_meth_get_gets, {onLeave: function (args) {send("BIO_meth_get_gets");}});

var BIO_meth_get_puts = Module.findExportByName("libcrypto.dll", "BIO_meth_get_puts")
Interceptor.attach(BIO_meth_get_puts, {onLeave: function (args) {send("BIO_meth_get_puts");}});

var BIO_meth_get_read = Module.findExportByName("libcrypto.dll", "BIO_meth_get_read")
Interceptor.attach(BIO_meth_get_read, {onLeave: function (args) {send("BIO_meth_get_read");}});

var BIO_meth_get_write = Module.findExportByName("libcrypto.dll", "BIO_meth_get_write")
Interceptor.attach(BIO_meth_get_write, {onLeave: function (args) {send("BIO_meth_get_write");}});

var BIO_meth_new = Module.findExportByName("libcrypto.dll", "BIO_meth_new")
Interceptor.attach(BIO_meth_new, {onLeave: function (args) {send("BIO_meth_new");}});

var BIO_meth_set_callback_ctrl = Module.findExportByName("libcrypto.dll", "BIO_meth_set_callback_ctrl")
Interceptor.attach(BIO_meth_set_callback_ctrl, {onLeave: function (args) {send("BIO_meth_set_callback_ctrl");}});

var BIO_meth_set_create = Module.findExportByName("libcrypto.dll", "BIO_meth_set_create")
Interceptor.attach(BIO_meth_set_create, {onLeave: function (args) {send("BIO_meth_set_create");}});

var BIO_meth_set_ctrl = Module.findExportByName("libcrypto.dll", "BIO_meth_set_ctrl")
Interceptor.attach(BIO_meth_set_ctrl, {onLeave: function (args) {send("BIO_meth_set_ctrl");}});

var BIO_meth_set_destroy = Module.findExportByName("libcrypto.dll", "BIO_meth_set_destroy")
Interceptor.attach(BIO_meth_set_destroy, {onLeave: function (args) {send("BIO_meth_set_destroy");}});

var BIO_meth_set_gets = Module.findExportByName("libcrypto.dll", "BIO_meth_set_gets")
Interceptor.attach(BIO_meth_set_gets, {onLeave: function (args) {send("BIO_meth_set_gets");}});

var BIO_meth_set_puts = Module.findExportByName("libcrypto.dll", "BIO_meth_set_puts")
Interceptor.attach(BIO_meth_set_puts, {onLeave: function (args) {send("BIO_meth_set_puts");}});

var BIO_meth_set_read = Module.findExportByName("libcrypto.dll", "BIO_meth_set_read")
Interceptor.attach(BIO_meth_set_read, {onLeave: function (args) {send("BIO_meth_set_read");}});

var BIO_meth_set_write = Module.findExportByName("libcrypto.dll", "BIO_meth_set_write")
Interceptor.attach(BIO_meth_set_write, {onLeave: function (args) {send("BIO_meth_set_write");}});

var BIO_method_name = Module.findExportByName("libcrypto.dll", "BIO_method_name")
Interceptor.attach(BIO_method_name, {onLeave: function (args) {send("BIO_method_name");}});

var BIO_method_type = Module.findExportByName("libcrypto.dll", "BIO_method_type")
Interceptor.attach(BIO_method_type, {onLeave: function (args) {send("BIO_method_type");}});

var BIO_new = Module.findExportByName("libcrypto.dll", "BIO_new")
Interceptor.attach(BIO_new, {onLeave: function (args) {send("BIO_new");}});

var BIO_new_CMS = Module.findExportByName("libcrypto.dll", "BIO_new_CMS")
Interceptor.attach(BIO_new_CMS, {onLeave: function (args) {send("BIO_new_CMS");}});

var BIO_new_NDEF = Module.findExportByName("libcrypto.dll", "BIO_new_NDEF")
Interceptor.attach(BIO_new_NDEF, {onLeave: function (args) {send("BIO_new_NDEF");}});

var BIO_new_PKCS7 = Module.findExportByName("libcrypto.dll", "BIO_new_PKCS7")
Interceptor.attach(BIO_new_PKCS7, {onLeave: function (args) {send("BIO_new_PKCS7");}});

var BIO_new_accept = Module.findExportByName("libcrypto.dll", "BIO_new_accept")
Interceptor.attach(BIO_new_accept, {onLeave: function (args) {send("BIO_new_accept");}});

var BIO_new_bio_pair = Module.findExportByName("libcrypto.dll", "BIO_new_bio_pair")
Interceptor.attach(BIO_new_bio_pair, {onLeave: function (args) {send("BIO_new_bio_pair");}});

var BIO_new_connect = Module.findExportByName("libcrypto.dll", "BIO_new_connect")
Interceptor.attach(BIO_new_connect, {onLeave: function (args) {send("BIO_new_connect");}});

var BIO_new_dgram = Module.findExportByName("libcrypto.dll", "BIO_new_dgram")
Interceptor.attach(BIO_new_dgram, {onLeave: function (args) {send("BIO_new_dgram");}});

var BIO_new_fd = Module.findExportByName("libcrypto.dll", "BIO_new_fd")
Interceptor.attach(BIO_new_fd, {onLeave: function (args) {send("BIO_new_fd");}});

var BIO_new_file = Module.findExportByName("libcrypto.dll", "BIO_new_file")
Interceptor.attach(BIO_new_file, {onLeave: function (args) {send("BIO_new_file");}});

var BIO_new_fp = Module.findExportByName("libcrypto.dll", "BIO_new_fp")
Interceptor.attach(BIO_new_fp, {onLeave: function (args) {send("BIO_new_fp");}});

var BIO_new_mem_buf = Module.findExportByName("libcrypto.dll", "BIO_new_mem_buf")
Interceptor.attach(BIO_new_mem_buf, {onLeave: function (args) {send("BIO_new_mem_buf");}});

var BIO_new_socket = Module.findExportByName("libcrypto.dll", "BIO_new_socket")
Interceptor.attach(BIO_new_socket, {onLeave: function (args) {send("BIO_new_socket");}});

var BIO_next = Module.findExportByName("libcrypto.dll", "BIO_next")
Interceptor.attach(BIO_next, {onLeave: function (args) {send("BIO_next");}});

var BIO_nread = Module.findExportByName("libcrypto.dll", "BIO_nread")
Interceptor.attach(BIO_nread, {onLeave: function (args) {send("BIO_nread");}});

var BIO_nread0 = Module.findExportByName("libcrypto.dll", "BIO_nread0")
Interceptor.attach(BIO_nread0, {onLeave: function (args) {send("BIO_nread0");}});

var BIO_number_read = Module.findExportByName("libcrypto.dll", "BIO_number_read")
Interceptor.attach(BIO_number_read, {onLeave: function (args) {send("BIO_number_read");}});

var BIO_number_written = Module.findExportByName("libcrypto.dll", "BIO_number_written")
Interceptor.attach(BIO_number_written, {onLeave: function (args) {send("BIO_number_written");}});

var BIO_nwrite = Module.findExportByName("libcrypto.dll", "BIO_nwrite")
Interceptor.attach(BIO_nwrite, {onLeave: function (args) {send("BIO_nwrite");}});

var BIO_nwrite0 = Module.findExportByName("libcrypto.dll", "BIO_nwrite0")
Interceptor.attach(BIO_nwrite0, {onLeave: function (args) {send("BIO_nwrite0");}});

var BIO_pop = Module.findExportByName("libcrypto.dll", "BIO_pop")
Interceptor.attach(BIO_pop, {onLeave: function (args) {send("BIO_pop");}});

var BIO_printf = Module.findExportByName("libcrypto.dll", "BIO_printf")
Interceptor.attach(BIO_printf, {onLeave: function (args) {send("BIO_printf");}});

var BIO_ptr_ctrl = Module.findExportByName("libcrypto.dll", "BIO_ptr_ctrl")
Interceptor.attach(BIO_ptr_ctrl, {onLeave: function (args) {send("BIO_ptr_ctrl");}});

var BIO_push = Module.findExportByName("libcrypto.dll", "BIO_push")
Interceptor.attach(BIO_push, {onLeave: function (args) {send("BIO_push");}});

var BIO_puts = Module.findExportByName("libcrypto.dll", "BIO_puts")
Interceptor.attach(BIO_puts, {onLeave: function (args) {send("BIO_puts");}});

var BIO_read = Module.findExportByName("libcrypto.dll", "BIO_read")
Interceptor.attach(BIO_read, {onLeave: function (args) {send("BIO_read");}});

var BIO_s_accept = Module.findExportByName("libcrypto.dll", "BIO_s_accept")
Interceptor.attach(BIO_s_accept, {onLeave: function (args) {send("BIO_s_accept");}});

var BIO_s_bio = Module.findExportByName("libcrypto.dll", "BIO_s_bio")
Interceptor.attach(BIO_s_bio, {onLeave: function (args) {send("BIO_s_bio");}});

var BIO_s_connect = Module.findExportByName("libcrypto.dll", "BIO_s_connect")
Interceptor.attach(BIO_s_connect, {onLeave: function (args) {send("BIO_s_connect");}});

var BIO_s_datagram = Module.findExportByName("libcrypto.dll", "BIO_s_datagram")
Interceptor.attach(BIO_s_datagram, {onLeave: function (args) {send("BIO_s_datagram");}});

var BIO_s_fd = Module.findExportByName("libcrypto.dll", "BIO_s_fd")
Interceptor.attach(BIO_s_fd, {onLeave: function (args) {send("BIO_s_fd");}});

var BIO_s_file = Module.findExportByName("libcrypto.dll", "BIO_s_file")
Interceptor.attach(BIO_s_file, {onLeave: function (args) {send("BIO_s_file");}});

var BIO_s_mem = Module.findExportByName("libcrypto.dll", "BIO_s_mem")
Interceptor.attach(BIO_s_mem, {onLeave: function (args) {send("BIO_s_mem");}});

var BIO_s_null = Module.findExportByName("libcrypto.dll", "BIO_s_null")
Interceptor.attach(BIO_s_null, {onLeave: function (args) {send("BIO_s_null");}});

var BIO_s_socket = Module.findExportByName("libcrypto.dll", "BIO_s_socket")
Interceptor.attach(BIO_s_socket, {onLeave: function (args) {send("BIO_s_socket");}});

var BIO_set = Module.findExportByName("libcrypto.dll", "BIO_set")
Interceptor.attach(BIO_set, {onLeave: function (args) {send("BIO_set");}});

var BIO_set_callback = Module.findExportByName("libcrypto.dll", "BIO_set_callback")
Interceptor.attach(BIO_set_callback, {onLeave: function (args) {send("BIO_set_callback");}});

var BIO_set_callback_arg = Module.findExportByName("libcrypto.dll", "BIO_set_callback_arg")
Interceptor.attach(BIO_set_callback_arg, {onLeave: function (args) {send("BIO_set_callback_arg");}});

var BIO_set_cipher = Module.findExportByName("libcrypto.dll", "BIO_set_cipher")
Interceptor.attach(BIO_set_cipher, {onLeave: function (args) {send("BIO_set_cipher");}});

var BIO_set_data = Module.findExportByName("libcrypto.dll", "BIO_set_data")
Interceptor.attach(BIO_set_data, {onLeave: function (args) {send("BIO_set_data");}});

var BIO_set_ex_data = Module.findExportByName("libcrypto.dll", "BIO_set_ex_data")
Interceptor.attach(BIO_set_ex_data, {onLeave: function (args) {send("BIO_set_ex_data");}});

var BIO_set_flags = Module.findExportByName("libcrypto.dll", "BIO_set_flags")
Interceptor.attach(BIO_set_flags, {onLeave: function (args) {send("BIO_set_flags");}});

var BIO_set_init = Module.findExportByName("libcrypto.dll", "BIO_set_init")
Interceptor.attach(BIO_set_init, {onLeave: function (args) {send("BIO_set_init");}});

var BIO_set_shutdown = Module.findExportByName("libcrypto.dll", "BIO_set_shutdown")
Interceptor.attach(BIO_set_shutdown, {onLeave: function (args) {send("BIO_set_shutdown");}});

var BIO_set_tcp_ndelay = Module.findExportByName("libcrypto.dll", "BIO_set_tcp_ndelay")
Interceptor.attach(BIO_set_tcp_ndelay, {onLeave: function (args) {send("BIO_set_tcp_ndelay");}});

var BIO_snprintf = Module.findExportByName("libcrypto.dll", "BIO_snprintf")
Interceptor.attach(BIO_snprintf, {onLeave: function (args) {send("BIO_snprintf");}});

var BIO_sock_cleanup = Module.findExportByName("libcrypto.dll", "BIO_sock_cleanup")
Interceptor.attach(BIO_sock_cleanup, {onLeave: function (args) {send("BIO_sock_cleanup");}});

var BIO_sock_error = Module.findExportByName("libcrypto.dll", "BIO_sock_error")
Interceptor.attach(BIO_sock_error, {onLeave: function (args) {send("BIO_sock_error");}});

var BIO_sock_init = Module.findExportByName("libcrypto.dll", "BIO_sock_init")
Interceptor.attach(BIO_sock_init, {onLeave: function (args) {send("BIO_sock_init");}});

var BIO_sock_non_fatal_error = Module.findExportByName("libcrypto.dll", "BIO_sock_non_fatal_error")
Interceptor.attach(BIO_sock_non_fatal_error, {onLeave: function (args) {send("BIO_sock_non_fatal_error");}});

var BIO_sock_should_retry = Module.findExportByName("libcrypto.dll", "BIO_sock_should_retry")
Interceptor.attach(BIO_sock_should_retry, {onLeave: function (args) {send("BIO_sock_should_retry");}});

var BIO_socket_ioctl = Module.findExportByName("libcrypto.dll", "BIO_socket_ioctl")
Interceptor.attach(BIO_socket_ioctl, {onLeave: function (args) {send("BIO_socket_ioctl");}});

var BIO_socket_nbio = Module.findExportByName("libcrypto.dll", "BIO_socket_nbio")
Interceptor.attach(BIO_socket_nbio, {onLeave: function (args) {send("BIO_socket_nbio");}});

var BIO_test_flags = Module.findExportByName("libcrypto.dll", "BIO_test_flags")
Interceptor.attach(BIO_test_flags, {onLeave: function (args) {send("BIO_test_flags");}});

var BIO_up_ref = Module.findExportByName("libcrypto.dll", "BIO_up_ref")
Interceptor.attach(BIO_up_ref, {onLeave: function (args) {send("BIO_up_ref");}});

var BIO_vfree = Module.findExportByName("libcrypto.dll", "BIO_vfree")
Interceptor.attach(BIO_vfree, {onLeave: function (args) {send("BIO_vfree");}});

var BIO_vprintf = Module.findExportByName("libcrypto.dll", "BIO_vprintf")
Interceptor.attach(BIO_vprintf, {onLeave: function (args) {send("BIO_vprintf");}});

var BIO_vsnprintf = Module.findExportByName("libcrypto.dll", "BIO_vsnprintf")
Interceptor.attach(BIO_vsnprintf, {onLeave: function (args) {send("BIO_vsnprintf");}});

var BIO_write = Module.findExportByName("libcrypto.dll", "BIO_write")
Interceptor.attach(BIO_write, {onLeave: function (args) {send("BIO_write");}});

var BN_BLINDING_convert = Module.findExportByName("libcrypto.dll", "BN_BLINDING_convert")
Interceptor.attach(BN_BLINDING_convert, {onLeave: function (args) {send("BN_BLINDING_convert");}});

var BN_BLINDING_convert_ex = Module.findExportByName("libcrypto.dll", "BN_BLINDING_convert_ex")
Interceptor.attach(BN_BLINDING_convert_ex, {onLeave: function (args) {send("BN_BLINDING_convert_ex");}});

var BN_BLINDING_create_param = Module.findExportByName("libcrypto.dll", "BN_BLINDING_create_param")
Interceptor.attach(BN_BLINDING_create_param, {onLeave: function (args) {send("BN_BLINDING_create_param");}});

var BN_BLINDING_free = Module.findExportByName("libcrypto.dll", "BN_BLINDING_free")
Interceptor.attach(BN_BLINDING_free, {onLeave: function (args) {send("BN_BLINDING_free");}});

var BN_BLINDING_get_flags = Module.findExportByName("libcrypto.dll", "BN_BLINDING_get_flags")
Interceptor.attach(BN_BLINDING_get_flags, {onLeave: function (args) {send("BN_BLINDING_get_flags");}});

var BN_BLINDING_get_thread_id = Module.findExportByName("libcrypto.dll", "BN_BLINDING_get_thread_id")
Interceptor.attach(BN_BLINDING_get_thread_id, {onLeave: function (args) {send("BN_BLINDING_get_thread_id");}});

var BN_BLINDING_invert = Module.findExportByName("libcrypto.dll", "BN_BLINDING_invert")
Interceptor.attach(BN_BLINDING_invert, {onLeave: function (args) {send("BN_BLINDING_invert");}});

var BN_BLINDING_invert_ex = Module.findExportByName("libcrypto.dll", "BN_BLINDING_invert_ex")
Interceptor.attach(BN_BLINDING_invert_ex, {onLeave: function (args) {send("BN_BLINDING_invert_ex");}});

var BN_BLINDING_new = Module.findExportByName("libcrypto.dll", "BN_BLINDING_new")
Interceptor.attach(BN_BLINDING_new, {onLeave: function (args) {send("BN_BLINDING_new");}});

var BN_BLINDING_set_flags = Module.findExportByName("libcrypto.dll", "BN_BLINDING_set_flags")
Interceptor.attach(BN_BLINDING_set_flags, {onLeave: function (args) {send("BN_BLINDING_set_flags");}});

var BN_BLINDING_set_thread_id = Module.findExportByName("libcrypto.dll", "BN_BLINDING_set_thread_id")
Interceptor.attach(BN_BLINDING_set_thread_id, {onLeave: function (args) {send("BN_BLINDING_set_thread_id");}});

var BN_BLINDING_thread_id = Module.findExportByName("libcrypto.dll", "BN_BLINDING_thread_id")
Interceptor.attach(BN_BLINDING_thread_id, {onLeave: function (args) {send("BN_BLINDING_thread_id");}});

var BN_BLINDING_update = Module.findExportByName("libcrypto.dll", "BN_BLINDING_update")
Interceptor.attach(BN_BLINDING_update, {onLeave: function (args) {send("BN_BLINDING_update");}});

var BN_CTX_end = Module.findExportByName("libcrypto.dll", "BN_CTX_end")
Interceptor.attach(BN_CTX_end, {onLeave: function (args) {send("BN_CTX_end");}});

var BN_CTX_free = Module.findExportByName("libcrypto.dll", "BN_CTX_free")
Interceptor.attach(BN_CTX_free, {onLeave: function (args) {send("BN_CTX_free");}});

var BN_CTX_get = Module.findExportByName("libcrypto.dll", "BN_CTX_get")
Interceptor.attach(BN_CTX_get, {onLeave: function (args) {send("BN_CTX_get");}});

var BN_CTX_init = Module.findExportByName("libcrypto.dll", "BN_CTX_init")
Interceptor.attach(BN_CTX_init, {onLeave: function (args) {send("BN_CTX_init");}});

var BN_CTX_new = Module.findExportByName("libcrypto.dll", "BN_CTX_new")
Interceptor.attach(BN_CTX_new, {onLeave: function (args) {send("BN_CTX_new");}});

var BN_CTX_start = Module.findExportByName("libcrypto.dll", "BN_CTX_start")
Interceptor.attach(BN_CTX_start, {onLeave: function (args) {send("BN_CTX_start");}});

var BN_GENCB_call = Module.findExportByName("libcrypto.dll", "BN_GENCB_call")
Interceptor.attach(BN_GENCB_call, {onLeave: function (args) {send("BN_GENCB_call");}});

var BN_GENCB_free = Module.findExportByName("libcrypto.dll", "BN_GENCB_free")
Interceptor.attach(BN_GENCB_free, {onLeave: function (args) {send("BN_GENCB_free");}});

var BN_GENCB_get_arg = Module.findExportByName("libcrypto.dll", "BN_GENCB_get_arg")
Interceptor.attach(BN_GENCB_get_arg, {onLeave: function (args) {send("BN_GENCB_get_arg");}});

var BN_GENCB_new = Module.findExportByName("libcrypto.dll", "BN_GENCB_new")
Interceptor.attach(BN_GENCB_new, {onLeave: function (args) {send("BN_GENCB_new");}});

var BN_GF2m_add = Module.findExportByName("libcrypto.dll", "BN_GF2m_add")
Interceptor.attach(BN_GF2m_add, {onLeave: function (args) {send("BN_GF2m_add");}});

var BN_GF2m_arr2poly = Module.findExportByName("libcrypto.dll", "BN_GF2m_arr2poly")
Interceptor.attach(BN_GF2m_arr2poly, {onLeave: function (args) {send("BN_GF2m_arr2poly");}});

var BN_GF2m_mod = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod")
Interceptor.attach(BN_GF2m_mod, {onLeave: function (args) {send("BN_GF2m_mod");}});

var BN_GF2m_mod_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_arr")
Interceptor.attach(BN_GF2m_mod_arr, {onLeave: function (args) {send("BN_GF2m_mod_arr");}});

var BN_GF2m_mod_div = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_div")
Interceptor.attach(BN_GF2m_mod_div, {onLeave: function (args) {send("BN_GF2m_mod_div");}});

var BN_GF2m_mod_div_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_div_arr")
Interceptor.attach(BN_GF2m_mod_div_arr, {onLeave: function (args) {send("BN_GF2m_mod_div_arr");}});

var BN_GF2m_mod_exp = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_exp")
Interceptor.attach(BN_GF2m_mod_exp, {onLeave: function (args) {send("BN_GF2m_mod_exp");}});

var BN_GF2m_mod_exp_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_exp_arr")
Interceptor.attach(BN_GF2m_mod_exp_arr, {onLeave: function (args) {send("BN_GF2m_mod_exp_arr");}});

var BN_GF2m_mod_inv = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_inv")
Interceptor.attach(BN_GF2m_mod_inv, {onLeave: function (args) {send("BN_GF2m_mod_inv");}});

var BN_GF2m_mod_inv_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_inv_arr")
Interceptor.attach(BN_GF2m_mod_inv_arr, {onLeave: function (args) {send("BN_GF2m_mod_inv_arr");}});

var BN_GF2m_mod_mul = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_mul")
Interceptor.attach(BN_GF2m_mod_mul, {onLeave: function (args) {send("BN_GF2m_mod_mul");}});

var BN_GF2m_mod_mul_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_mul_arr")
Interceptor.attach(BN_GF2m_mod_mul_arr, {onLeave: function (args) {send("BN_GF2m_mod_mul_arr");}});

var BN_GF2m_mod_solve_quad = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_solve_quad")
Interceptor.attach(BN_GF2m_mod_solve_quad, {onLeave: function (args) {send("BN_GF2m_mod_solve_quad");}});

var BN_GF2m_mod_solve_quad_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_solve_quad_arr")
Interceptor.attach(BN_GF2m_mod_solve_quad_arr, {onLeave: function (args) {send("BN_GF2m_mod_solve_quad_arr");}});

var BN_GF2m_mod_sqr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_sqr")
Interceptor.attach(BN_GF2m_mod_sqr, {onLeave: function (args) {send("BN_GF2m_mod_sqr");}});

var BN_GF2m_mod_sqr_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_sqr_arr")
Interceptor.attach(BN_GF2m_mod_sqr_arr, {onLeave: function (args) {send("BN_GF2m_mod_sqr_arr");}});

var BN_GF2m_mod_sqrt = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_sqrt")
Interceptor.attach(BN_GF2m_mod_sqrt, {onLeave: function (args) {send("BN_GF2m_mod_sqrt");}});

var BN_GF2m_mod_sqrt_arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_mod_sqrt_arr")
Interceptor.attach(BN_GF2m_mod_sqrt_arr, {onLeave: function (args) {send("BN_GF2m_mod_sqrt_arr");}});

var BN_GF2m_poly2arr = Module.findExportByName("libcrypto.dll", "BN_GF2m_poly2arr")
Interceptor.attach(BN_GF2m_poly2arr, {onLeave: function (args) {send("BN_GF2m_poly2arr");}});

var BN_MONT_CTX_copy = Module.findExportByName("libcrypto.dll", "BN_MONT_CTX_copy")
Interceptor.attach(BN_MONT_CTX_copy, {onLeave: function (args) {send("BN_MONT_CTX_copy");}});

var BN_MONT_CTX_free = Module.findExportByName("libcrypto.dll", "BN_MONT_CTX_free")
Interceptor.attach(BN_MONT_CTX_free, {onLeave: function (args) {send("BN_MONT_CTX_free");}});

var BN_MONT_CTX_init = Module.findExportByName("libcrypto.dll", "BN_MONT_CTX_init")
Interceptor.attach(BN_MONT_CTX_init, {onLeave: function (args) {send("BN_MONT_CTX_init");}});

var BN_MONT_CTX_new = Module.findExportByName("libcrypto.dll", "BN_MONT_CTX_new")
Interceptor.attach(BN_MONT_CTX_new, {onLeave: function (args) {send("BN_MONT_CTX_new");}});

var BN_MONT_CTX_set = Module.findExportByName("libcrypto.dll", "BN_MONT_CTX_set")
Interceptor.attach(BN_MONT_CTX_set, {onLeave: function (args) {send("BN_MONT_CTX_set");}});

var BN_MONT_CTX_set_locked = Module.findExportByName("libcrypto.dll", "BN_MONT_CTX_set_locked")
Interceptor.attach(BN_MONT_CTX_set_locked, {onLeave: function (args) {send("BN_MONT_CTX_set_locked");}});

var BN_RECP_CTX_free = Module.findExportByName("libcrypto.dll", "BN_RECP_CTX_free")
Interceptor.attach(BN_RECP_CTX_free, {onLeave: function (args) {send("BN_RECP_CTX_free");}});

var BN_RECP_CTX_init = Module.findExportByName("libcrypto.dll", "BN_RECP_CTX_init")
Interceptor.attach(BN_RECP_CTX_init, {onLeave: function (args) {send("BN_RECP_CTX_init");}});

var BN_RECP_CTX_new = Module.findExportByName("libcrypto.dll", "BN_RECP_CTX_new")
Interceptor.attach(BN_RECP_CTX_new, {onLeave: function (args) {send("BN_RECP_CTX_new");}});

var BN_RECP_CTX_set = Module.findExportByName("libcrypto.dll", "BN_RECP_CTX_set")
Interceptor.attach(BN_RECP_CTX_set, {onLeave: function (args) {send("BN_RECP_CTX_set");}});

var BN_X931_derive_prime_ex = Module.findExportByName("libcrypto.dll", "BN_X931_derive_prime_ex")
Interceptor.attach(BN_X931_derive_prime_ex, {onLeave: function (args) {send("BN_X931_derive_prime_ex");}});

var BN_X931_generate_Xpq = Module.findExportByName("libcrypto.dll", "BN_X931_generate_Xpq")
Interceptor.attach(BN_X931_generate_Xpq, {onLeave: function (args) {send("BN_X931_generate_Xpq");}});

var BN_X931_generate_prime_ex = Module.findExportByName("libcrypto.dll", "BN_X931_generate_prime_ex")
Interceptor.attach(BN_X931_generate_prime_ex, {onLeave: function (args) {send("BN_X931_generate_prime_ex");}});

var BN_add = Module.findExportByName("libcrypto.dll", "BN_add")
Interceptor.attach(BN_add, {onLeave: function (args) {send("BN_add");}});

var BN_add_word = Module.findExportByName("libcrypto.dll", "BN_add_word")
Interceptor.attach(BN_add_word, {onLeave: function (args) {send("BN_add_word");}});

var BN_asc2bn = Module.findExportByName("libcrypto.dll", "BN_asc2bn")
Interceptor.attach(BN_asc2bn, {onLeave: function (args) {send("BN_asc2bn");}});

var BN_bin2bn = Module.findExportByName("libcrypto.dll", "BN_bin2bn")
Interceptor.attach(BN_bin2bn, {onLeave: function (args) {send("BN_bin2bn");}});

var BN_bn2bin = Module.findExportByName("libcrypto.dll", "BN_bn2bin")
Interceptor.attach(BN_bn2bin, {onLeave: function (args) {send("BN_bn2bin");}});

var BN_bn2binpad = Module.findExportByName("libcrypto.dll", "BN_bn2binpad")
Interceptor.attach(BN_bn2binpad, {onLeave: function (args) {send("BN_bn2binpad");}});

var BN_bn2dec = Module.findExportByName("libcrypto.dll", "BN_bn2dec")
Interceptor.attach(BN_bn2dec, {onLeave: function (args) {send("BN_bn2dec");}});

var BN_bn2hex = Module.findExportByName("libcrypto.dll", "BN_bn2hex")
Interceptor.attach(BN_bn2hex, {onLeave: function (args) {send("BN_bn2hex");}});

var BN_bn2lebinpad = Module.findExportByName("libcrypto.dll", "BN_bn2lebinpad")
Interceptor.attach(BN_bn2lebinpad, {onLeave: function (args) {send("BN_bn2lebinpad");}});

var BN_bn2mpi = Module.findExportByName("libcrypto.dll", "BN_bn2mpi")
Interceptor.attach(BN_bn2mpi, {onLeave: function (args) {send("BN_bn2mpi");}});

var BN_clear = Module.findExportByName("libcrypto.dll", "BN_clear")
Interceptor.attach(BN_clear, {onLeave: function (args) {send("BN_clear");}});

var BN_clear_bit = Module.findExportByName("libcrypto.dll", "BN_clear_bit")
Interceptor.attach(BN_clear_bit, {onLeave: function (args) {send("BN_clear_bit");}});

var BN_clear_free = Module.findExportByName("libcrypto.dll", "BN_clear_free")
Interceptor.attach(BN_clear_free, {onLeave: function (args) {send("BN_clear_free");}});

var BN_cmp = Module.findExportByName("libcrypto.dll", "BN_cmp")
Interceptor.attach(BN_cmp, {onLeave: function (args) {send("BN_cmp");}});

var BN_consttime_swap = Module.findExportByName("libcrypto.dll", "BN_consttime_swap")
Interceptor.attach(BN_consttime_swap, {onLeave: function (args) {send("BN_consttime_swap");}});

var BN_copy = Module.findExportByName("libcrypto.dll", "BN_copy")
Interceptor.attach(BN_copy, {onLeave: function (args) {send("BN_copy");}});

var BN_dec2bn = Module.findExportByName("libcrypto.dll", "BN_dec2bn")
Interceptor.attach(BN_dec2bn, {onLeave: function (args) {send("BN_dec2bn");}});

var BN_div = Module.findExportByName("libcrypto.dll", "BN_div")
Interceptor.attach(BN_div, {onLeave: function (args) {send("BN_div");}});

var BN_div_recp = Module.findExportByName("libcrypto.dll", "BN_div_recp")
Interceptor.attach(BN_div_recp, {onLeave: function (args) {send("BN_div_recp");}});

var BN_div_word = Module.findExportByName("libcrypto.dll", "BN_div_word")
Interceptor.attach(BN_div_word, {onLeave: function (args) {send("BN_div_word");}});

var BN_dup = Module.findExportByName("libcrypto.dll", "BN_dup")
Interceptor.attach(BN_dup, {onLeave: function (args) {send("BN_dup");}});

var BN_exp = Module.findExportByName("libcrypto.dll", "BN_exp")
Interceptor.attach(BN_exp, {onLeave: function (args) {send("BN_exp");}});

var BN_free = Module.findExportByName("libcrypto.dll", "BN_free")
Interceptor.attach(BN_free, {onLeave: function (args) {send("BN_free");}});

var BN_from_montgomery = Module.findExportByName("libcrypto.dll", "BN_from_montgomery")
Interceptor.attach(BN_from_montgomery, {onLeave: function (args) {send("BN_from_montgomery");}});

var BN_gcd = Module.findExportByName("libcrypto.dll", "BN_gcd")
Interceptor.attach(BN_gcd, {onLeave: function (args) {send("BN_gcd");}});

var BN_generate_prime = Module.findExportByName("libcrypto.dll", "BN_generate_prime")
Interceptor.attach(BN_generate_prime, {onLeave: function (args) {send("BN_generate_prime");}});

var BN_generate_prime_ex = Module.findExportByName("libcrypto.dll", "BN_generate_prime_ex")
Interceptor.attach(BN_generate_prime_ex, {onLeave: function (args) {send("BN_generate_prime_ex");}});

var BN_get0_nist_prime_192 = Module.findExportByName("libcrypto.dll", "BN_get0_nist_prime_192")
Interceptor.attach(BN_get0_nist_prime_192, {onLeave: function (args) {send("BN_get0_nist_prime_192");}});

var BN_get0_nist_prime_224 = Module.findExportByName("libcrypto.dll", "BN_get0_nist_prime_224")
Interceptor.attach(BN_get0_nist_prime_224, {onLeave: function (args) {send("BN_get0_nist_prime_224");}});

var BN_get0_nist_prime_256 = Module.findExportByName("libcrypto.dll", "BN_get0_nist_prime_256")
Interceptor.attach(BN_get0_nist_prime_256, {onLeave: function (args) {send("BN_get0_nist_prime_256");}});

var BN_get0_nist_prime_384 = Module.findExportByName("libcrypto.dll", "BN_get0_nist_prime_384")
Interceptor.attach(BN_get0_nist_prime_384, {onLeave: function (args) {send("BN_get0_nist_prime_384");}});

var BN_get0_nist_prime_521 = Module.findExportByName("libcrypto.dll", "BN_get0_nist_prime_521")
Interceptor.attach(BN_get0_nist_prime_521, {onLeave: function (args) {send("BN_get0_nist_prime_521");}});

var BN_get_params = Module.findExportByName("libcrypto.dll", "BN_get_params")
Interceptor.attach(BN_get_params, {onLeave: function (args) {send("BN_get_params");}});

var BN_get_rfc2409_prime_1024 = Module.findExportByName("libcrypto.dll", "BN_get_rfc2409_prime_1024")
Interceptor.attach(BN_get_rfc2409_prime_1024, {onLeave: function (args) {send("BN_get_rfc2409_prime_1024");}});

var BN_get_rfc2409_prime_768 = Module.findExportByName("libcrypto.dll", "BN_get_rfc2409_prime_768")
Interceptor.attach(BN_get_rfc2409_prime_768, {onLeave: function (args) {send("BN_get_rfc2409_prime_768");}});

var BN_get_rfc3526_prime_1536 = Module.findExportByName("libcrypto.dll", "BN_get_rfc3526_prime_1536")
Interceptor.attach(BN_get_rfc3526_prime_1536, {onLeave: function (args) {send("BN_get_rfc3526_prime_1536");}});

var BN_get_rfc3526_prime_2048 = Module.findExportByName("libcrypto.dll", "BN_get_rfc3526_prime_2048")
Interceptor.attach(BN_get_rfc3526_prime_2048, {onLeave: function (args) {send("BN_get_rfc3526_prime_2048");}});

var BN_get_rfc3526_prime_3072 = Module.findExportByName("libcrypto.dll", "BN_get_rfc3526_prime_3072")
Interceptor.attach(BN_get_rfc3526_prime_3072, {onLeave: function (args) {send("BN_get_rfc3526_prime_3072");}});

var BN_get_rfc3526_prime_4096 = Module.findExportByName("libcrypto.dll", "BN_get_rfc3526_prime_4096")
Interceptor.attach(BN_get_rfc3526_prime_4096, {onLeave: function (args) {send("BN_get_rfc3526_prime_4096");}});

var BN_get_rfc3526_prime_6144 = Module.findExportByName("libcrypto.dll", "BN_get_rfc3526_prime_6144")
Interceptor.attach(BN_get_rfc3526_prime_6144, {onLeave: function (args) {send("BN_get_rfc3526_prime_6144");}});

var BN_get_rfc3526_prime_8192 = Module.findExportByName("libcrypto.dll", "BN_get_rfc3526_prime_8192")
Interceptor.attach(BN_get_rfc3526_prime_8192, {onLeave: function (args) {send("BN_get_rfc3526_prime_8192");}});

var BN_get_word = Module.findExportByName("libcrypto.dll", "BN_get_word")
Interceptor.attach(BN_get_word, {onLeave: function (args) {send("BN_get_word");}});

var BN_hex2bn = Module.findExportByName("libcrypto.dll", "BN_hex2bn")
Interceptor.attach(BN_hex2bn, {onLeave: function (args) {send("BN_hex2bn");}});

var BN_init = Module.findExportByName("libcrypto.dll", "BN_init")
Interceptor.attach(BN_init, {onLeave: function (args) {send("BN_init");}});

var BN_is_bit_set = Module.findExportByName("libcrypto.dll", "BN_is_bit_set")
Interceptor.attach(BN_is_bit_set, {onLeave: function (args) {send("BN_is_bit_set");}});

var BN_is_prime = Module.findExportByName("libcrypto.dll", "BN_is_prime")
Interceptor.attach(BN_is_prime, {onLeave: function (args) {send("BN_is_prime");}});

var BN_is_prime_ex = Module.findExportByName("libcrypto.dll", "BN_is_prime_ex")
Interceptor.attach(BN_is_prime_ex, {onLeave: function (args) {send("BN_is_prime_ex");}});

var BN_is_prime_fasttest = Module.findExportByName("libcrypto.dll", "BN_is_prime_fasttest")
Interceptor.attach(BN_is_prime_fasttest, {onLeave: function (args) {send("BN_is_prime_fasttest");}});

var BN_is_prime_fasttest_ex = Module.findExportByName("libcrypto.dll", "BN_is_prime_fasttest_ex")
Interceptor.attach(BN_is_prime_fasttest_ex, {onLeave: function (args) {send("BN_is_prime_fasttest_ex");}});

var BN_kronecker = Module.findExportByName("libcrypto.dll", "BN_kronecker")
Interceptor.attach(BN_kronecker, {onLeave: function (args) {send("BN_kronecker");}});

var BN_lebin2bn = Module.findExportByName("libcrypto.dll", "BN_lebin2bn")
Interceptor.attach(BN_lebin2bn, {onLeave: function (args) {send("BN_lebin2bn");}});

var BN_lshift = Module.findExportByName("libcrypto.dll", "BN_lshift")
Interceptor.attach(BN_lshift, {onLeave: function (args) {send("BN_lshift");}});

var BN_lshift1 = Module.findExportByName("libcrypto.dll", "BN_lshift1")
Interceptor.attach(BN_lshift1, {onLeave: function (args) {send("BN_lshift1");}});

var BN_mask_bits = Module.findExportByName("libcrypto.dll", "BN_mask_bits")
Interceptor.attach(BN_mask_bits, {onLeave: function (args) {send("BN_mask_bits");}});

var BN_mod_add = Module.findExportByName("libcrypto.dll", "BN_mod_add")
Interceptor.attach(BN_mod_add, {onLeave: function (args) {send("BN_mod_add");}});

var BN_mod_add_quick = Module.findExportByName("libcrypto.dll", "BN_mod_add_quick")
Interceptor.attach(BN_mod_add_quick, {onLeave: function (args) {send("BN_mod_add_quick");}});

var BN_mod_exp = Module.findExportByName("libcrypto.dll", "BN_mod_exp")
Interceptor.attach(BN_mod_exp, {onLeave: function (args) {send("BN_mod_exp");}});

var BN_mod_exp2_mont = Module.findExportByName("libcrypto.dll", "BN_mod_exp2_mont")
Interceptor.attach(BN_mod_exp2_mont, {onLeave: function (args) {send("BN_mod_exp2_mont");}});

var BN_mod_exp_mont = Module.findExportByName("libcrypto.dll", "BN_mod_exp_mont")
Interceptor.attach(BN_mod_exp_mont, {onLeave: function (args) {send("BN_mod_exp_mont");}});

var BN_mod_exp_mont_consttime = Module.findExportByName("libcrypto.dll", "BN_mod_exp_mont_consttime")
Interceptor.attach(BN_mod_exp_mont_consttime, {onLeave: function (args) {send("BN_mod_exp_mont_consttime");}});

var BN_mod_exp_mont_word = Module.findExportByName("libcrypto.dll", "BN_mod_exp_mont_word")
Interceptor.attach(BN_mod_exp_mont_word, {onLeave: function (args) {send("BN_mod_exp_mont_word");}});

var BN_mod_exp_recp = Module.findExportByName("libcrypto.dll", "BN_mod_exp_recp")
Interceptor.attach(BN_mod_exp_recp, {onLeave: function (args) {send("BN_mod_exp_recp");}});

var BN_mod_exp_simple = Module.findExportByName("libcrypto.dll", "BN_mod_exp_simple")
Interceptor.attach(BN_mod_exp_simple, {onLeave: function (args) {send("BN_mod_exp_simple");}});

var BN_mod_inverse = Module.findExportByName("libcrypto.dll", "BN_mod_inverse")
Interceptor.attach(BN_mod_inverse, {onLeave: function (args) {send("BN_mod_inverse");}});

var BN_mod_lshift = Module.findExportByName("libcrypto.dll", "BN_mod_lshift")
Interceptor.attach(BN_mod_lshift, {onLeave: function (args) {send("BN_mod_lshift");}});

var BN_mod_lshift1 = Module.findExportByName("libcrypto.dll", "BN_mod_lshift1")
Interceptor.attach(BN_mod_lshift1, {onLeave: function (args) {send("BN_mod_lshift1");}});

var BN_mod_lshift1_quick = Module.findExportByName("libcrypto.dll", "BN_mod_lshift1_quick")
Interceptor.attach(BN_mod_lshift1_quick, {onLeave: function (args) {send("BN_mod_lshift1_quick");}});

var BN_mod_lshift_quick = Module.findExportByName("libcrypto.dll", "BN_mod_lshift_quick")
Interceptor.attach(BN_mod_lshift_quick, {onLeave: function (args) {send("BN_mod_lshift_quick");}});

var BN_mod_mul = Module.findExportByName("libcrypto.dll", "BN_mod_mul")
Interceptor.attach(BN_mod_mul, {onLeave: function (args) {send("BN_mod_mul");}});

var BN_mod_mul_montgomery = Module.findExportByName("libcrypto.dll", "BN_mod_mul_montgomery")
Interceptor.attach(BN_mod_mul_montgomery, {onLeave: function (args) {send("BN_mod_mul_montgomery");}});

var BN_mod_mul_reciprocal = Module.findExportByName("libcrypto.dll", "BN_mod_mul_reciprocal")
Interceptor.attach(BN_mod_mul_reciprocal, {onLeave: function (args) {send("BN_mod_mul_reciprocal");}});

var BN_mod_sqr = Module.findExportByName("libcrypto.dll", "BN_mod_sqr")
Interceptor.attach(BN_mod_sqr, {onLeave: function (args) {send("BN_mod_sqr");}});

var BN_mod_sqrt = Module.findExportByName("libcrypto.dll", "BN_mod_sqrt")
Interceptor.attach(BN_mod_sqrt, {onLeave: function (args) {send("BN_mod_sqrt");}});

var BN_mod_sub = Module.findExportByName("libcrypto.dll", "BN_mod_sub")
Interceptor.attach(BN_mod_sub, {onLeave: function (args) {send("BN_mod_sub");}});

var BN_mod_sub_quick = Module.findExportByName("libcrypto.dll", "BN_mod_sub_quick")
Interceptor.attach(BN_mod_sub_quick, {onLeave: function (args) {send("BN_mod_sub_quick");}});

var BN_mod_word = Module.findExportByName("libcrypto.dll", "BN_mod_word")
Interceptor.attach(BN_mod_word, {onLeave: function (args) {send("BN_mod_word");}});

var BN_mpi2bn = Module.findExportByName("libcrypto.dll", "BN_mpi2bn")
Interceptor.attach(BN_mpi2bn, {onLeave: function (args) {send("BN_mpi2bn");}});

var BN_mul = Module.findExportByName("libcrypto.dll", "BN_mul")
Interceptor.attach(BN_mul, {onLeave: function (args) {send("BN_mul");}});

var BN_mul_word = Module.findExportByName("libcrypto.dll", "BN_mul_word")
Interceptor.attach(BN_mul_word, {onLeave: function (args) {send("BN_mul_word");}});

var BN_new = Module.findExportByName("libcrypto.dll", "BN_new")
Interceptor.attach(BN_new, {onLeave: function (args) {send("BN_new");}});

var BN_nist_mod_192 = Module.findExportByName("libcrypto.dll", "BN_nist_mod_192")
Interceptor.attach(BN_nist_mod_192, {onLeave: function (args) {send("BN_nist_mod_192");}});

var BN_nist_mod_224 = Module.findExportByName("libcrypto.dll", "BN_nist_mod_224")
Interceptor.attach(BN_nist_mod_224, {onLeave: function (args) {send("BN_nist_mod_224");}});

var BN_nist_mod_256 = Module.findExportByName("libcrypto.dll", "BN_nist_mod_256")
Interceptor.attach(BN_nist_mod_256, {onLeave: function (args) {send("BN_nist_mod_256");}});

var BN_nist_mod_384 = Module.findExportByName("libcrypto.dll", "BN_nist_mod_384")
Interceptor.attach(BN_nist_mod_384, {onLeave: function (args) {send("BN_nist_mod_384");}});

var BN_nist_mod_521 = Module.findExportByName("libcrypto.dll", "BN_nist_mod_521")
Interceptor.attach(BN_nist_mod_521, {onLeave: function (args) {send("BN_nist_mod_521");}});

var BN_nnmod = Module.findExportByName("libcrypto.dll", "BN_nnmod")
Interceptor.attach(BN_nnmod, {onLeave: function (args) {send("BN_nnmod");}});

var BN_num_bits = Module.findExportByName("libcrypto.dll", "BN_num_bits")
Interceptor.attach(BN_num_bits, {onLeave: function (args) {send("BN_num_bits");}});

var BN_num_bits_word = Module.findExportByName("libcrypto.dll", "BN_num_bits_word")
Interceptor.attach(BN_num_bits_word, {onLeave: function (args) {send("BN_num_bits_word");}});

var BN_options = Module.findExportByName("libcrypto.dll", "BN_options")
Interceptor.attach(BN_options, {onLeave: function (args) {send("BN_options");}});

var BN_print = Module.findExportByName("libcrypto.dll", "BN_print")
Interceptor.attach(BN_print, {onLeave: function (args) {send("BN_print");}});

var BN_print_fp = Module.findExportByName("libcrypto.dll", "BN_print_fp")
Interceptor.attach(BN_print_fp, {onLeave: function (args) {send("BN_print_fp");}});

var BN_pseudo_rand = Module.findExportByName("libcrypto.dll", "BN_pseudo_rand")
Interceptor.attach(BN_pseudo_rand, {onLeave: function (args) {send("BN_pseudo_rand");}});

var BN_pseudo_rand_range = Module.findExportByName("libcrypto.dll", "BN_pseudo_rand_range")
Interceptor.attach(BN_pseudo_rand_range, {onLeave: function (args) {send("BN_pseudo_rand_range");}});

var BN_rand = Module.findExportByName("libcrypto.dll", "BN_rand")
Interceptor.attach(BN_rand, {onLeave: function (args) {send("BN_rand");}});

var BN_rand_range = Module.findExportByName("libcrypto.dll", "BN_rand_range")
Interceptor.attach(BN_rand_range, {onLeave: function (args) {send("BN_rand_range");}});

var BN_reciprocal = Module.findExportByName("libcrypto.dll", "BN_reciprocal")
Interceptor.attach(BN_reciprocal, {onLeave: function (args) {send("BN_reciprocal");}});

var BN_rshift = Module.findExportByName("libcrypto.dll", "BN_rshift")
Interceptor.attach(BN_rshift, {onLeave: function (args) {send("BN_rshift");}});

var BN_rshift1 = Module.findExportByName("libcrypto.dll", "BN_rshift1")
Interceptor.attach(BN_rshift1, {onLeave: function (args) {send("BN_rshift1");}});

var BN_set_bit = Module.findExportByName("libcrypto.dll", "BN_set_bit")
Interceptor.attach(BN_set_bit, {onLeave: function (args) {send("BN_set_bit");}});

var BN_set_negative = Module.findExportByName("libcrypto.dll", "BN_set_negative")
Interceptor.attach(BN_set_negative, {onLeave: function (args) {send("BN_set_negative");}});

var BN_set_params = Module.findExportByName("libcrypto.dll", "BN_set_params")
Interceptor.attach(BN_set_params, {onLeave: function (args) {send("BN_set_params");}});

var BN_set_word = Module.findExportByName("libcrypto.dll", "BN_set_word")
Interceptor.attach(BN_set_word, {onLeave: function (args) {send("BN_set_word");}});

var BN_sqr = Module.findExportByName("libcrypto.dll", "BN_sqr")
Interceptor.attach(BN_sqr, {onLeave: function (args) {send("BN_sqr");}});

var BN_sub = Module.findExportByName("libcrypto.dll", "BN_sub")
Interceptor.attach(BN_sub, {onLeave: function (args) {send("BN_sub");}});

var BN_sub_word = Module.findExportByName("libcrypto.dll", "BN_sub_word")
Interceptor.attach(BN_sub_word, {onLeave: function (args) {send("BN_sub_word");}});

var BN_swap = Module.findExportByName("libcrypto.dll", "BN_swap")
Interceptor.attach(BN_swap, {onLeave: function (args) {send("BN_swap");}});

var BN_to_ASN1_ENUMERATED = Module.findExportByName("libcrypto.dll", "BN_to_ASN1_ENUMERATED")
Interceptor.attach(BN_to_ASN1_ENUMERATED, {onLeave: function (args) {send("BN_to_ASN1_ENUMERATED");}});

var BN_to_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "BN_to_ASN1_INTEGER")
Interceptor.attach(BN_to_ASN1_INTEGER, {onLeave: function (args) {send("BN_to_ASN1_INTEGER");}});

var BN_uadd = Module.findExportByName("libcrypto.dll", "BN_uadd")
Interceptor.attach(BN_uadd, {onLeave: function (args) {send("BN_uadd");}});

var BN_ucmp = Module.findExportByName("libcrypto.dll", "BN_ucmp")
Interceptor.attach(BN_ucmp, {onLeave: function (args) {send("BN_ucmp");}});

var BN_usub = Module.findExportByName("libcrypto.dll", "BN_usub")
Interceptor.attach(BN_usub, {onLeave: function (args) {send("BN_usub");}});

var BN_value_one = Module.findExportByName("libcrypto.dll", "BN_value_one")
Interceptor.attach(BN_value_one, {onLeave: function (args) {send("BN_value_one");}});

var BUF_MEM_free = Module.findExportByName("libcrypto.dll", "BUF_MEM_free")
Interceptor.attach(BUF_MEM_free, {onLeave: function (args) {send("BUF_MEM_free");}});

var BUF_MEM_grow = Module.findExportByName("libcrypto.dll", "BUF_MEM_grow")
Interceptor.attach(BUF_MEM_grow, {onLeave: function (args) {send("BUF_MEM_grow");}});

var BUF_MEM_grow_clean = Module.findExportByName("libcrypto.dll", "BUF_MEM_grow_clean")
Interceptor.attach(BUF_MEM_grow_clean, {onLeave: function (args) {send("BUF_MEM_grow_clean");}});

var BUF_MEM_new = Module.findExportByName("libcrypto.dll", "BUF_MEM_new")
Interceptor.attach(BUF_MEM_new, {onLeave: function (args) {send("BUF_MEM_new");}});

var BUF_memdup = Module.findExportByName("libcrypto.dll", "BUF_memdup")
Interceptor.attach(BUF_memdup, {onLeave: function (args) {send("BUF_memdup");}});

var BUF_reverse = Module.findExportByName("libcrypto.dll", "BUF_reverse")
Interceptor.attach(BUF_reverse, {onLeave: function (args) {send("BUF_reverse");}});

var BUF_strdup = Module.findExportByName("libcrypto.dll", "BUF_strdup")
Interceptor.attach(BUF_strdup, {onLeave: function (args) {send("BUF_strdup");}});

var BUF_strlcat = Module.findExportByName("libcrypto.dll", "BUF_strlcat")
Interceptor.attach(BUF_strlcat, {onLeave: function (args) {send("BUF_strlcat");}});

var BUF_strlcpy = Module.findExportByName("libcrypto.dll", "BUF_strlcpy")
Interceptor.attach(BUF_strlcpy, {onLeave: function (args) {send("BUF_strlcpy");}});

var BUF_strndup = Module.findExportByName("libcrypto.dll", "BUF_strndup")
Interceptor.attach(BUF_strndup, {onLeave: function (args) {send("BUF_strndup");}});

var CAST_cbc_encrypt = Module.findExportByName("libcrypto.dll", "CAST_cbc_encrypt")
Interceptor.attach(CAST_cbc_encrypt, {onLeave: function (args) {send("CAST_cbc_encrypt");}});

var CAST_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "CAST_cfb64_encrypt")
Interceptor.attach(CAST_cfb64_encrypt, {onLeave: function (args) {send("CAST_cfb64_encrypt");}});

var CAST_decrypt = Module.findExportByName("libcrypto.dll", "CAST_decrypt")
Interceptor.attach(CAST_decrypt, {onLeave: function (args) {send("CAST_decrypt");}});

var CAST_ecb_encrypt = Module.findExportByName("libcrypto.dll", "CAST_ecb_encrypt")
Interceptor.attach(CAST_ecb_encrypt, {onLeave: function (args) {send("CAST_ecb_encrypt");}});

var CAST_encrypt = Module.findExportByName("libcrypto.dll", "CAST_encrypt")
Interceptor.attach(CAST_encrypt, {onLeave: function (args) {send("CAST_encrypt");}});

var CAST_ofb64_encrypt = Module.findExportByName("libcrypto.dll", "CAST_ofb64_encrypt")
Interceptor.attach(CAST_ofb64_encrypt, {onLeave: function (args) {send("CAST_ofb64_encrypt");}});

var CAST_set_key = Module.findExportByName("libcrypto.dll", "CAST_set_key")
Interceptor.attach(CAST_set_key, {onLeave: function (args) {send("CAST_set_key");}});

var CBIGNUM_it = Module.findExportByName("libcrypto.dll", "CBIGNUM_it")
Interceptor.attach(CBIGNUM_it, {onLeave: function (args) {send("CBIGNUM_it");}});

var CERTIFICATEPOLICIES_free = Module.findExportByName("libcrypto.dll", "CERTIFICATEPOLICIES_free")
Interceptor.attach(CERTIFICATEPOLICIES_free, {onLeave: function (args) {send("CERTIFICATEPOLICIES_free");}});

var CERTIFICATEPOLICIES_it = Module.findExportByName("libcrypto.dll", "CERTIFICATEPOLICIES_it")
Interceptor.attach(CERTIFICATEPOLICIES_it, {onLeave: function (args) {send("CERTIFICATEPOLICIES_it");}});

var CERTIFICATEPOLICIES_new = Module.findExportByName("libcrypto.dll", "CERTIFICATEPOLICIES_new")
Interceptor.attach(CERTIFICATEPOLICIES_new, {onLeave: function (args) {send("CERTIFICATEPOLICIES_new");}});

var CMAC_CTX_cleanup = Module.findExportByName("libcrypto.dll", "CMAC_CTX_cleanup")
Interceptor.attach(CMAC_CTX_cleanup, {onLeave: function (args) {send("CMAC_CTX_cleanup");}});

var CMAC_CTX_copy = Module.findExportByName("libcrypto.dll", "CMAC_CTX_copy")
Interceptor.attach(CMAC_CTX_copy, {onLeave: function (args) {send("CMAC_CTX_copy");}});

var CMAC_CTX_free = Module.findExportByName("libcrypto.dll", "CMAC_CTX_free")
Interceptor.attach(CMAC_CTX_free, {onLeave: function (args) {send("CMAC_CTX_free");}});

var CMAC_CTX_get0_cipher_ctx = Module.findExportByName("libcrypto.dll", "CMAC_CTX_get0_cipher_ctx")
Interceptor.attach(CMAC_CTX_get0_cipher_ctx, {onLeave: function (args) {send("CMAC_CTX_get0_cipher_ctx");}});

var CMAC_CTX_new = Module.findExportByName("libcrypto.dll", "CMAC_CTX_new")
Interceptor.attach(CMAC_CTX_new, {onLeave: function (args) {send("CMAC_CTX_new");}});

var CMAC_Final = Module.findExportByName("libcrypto.dll", "CMAC_Final")
Interceptor.attach(CMAC_Final, {onLeave: function (args) {send("CMAC_Final");}});

var CMAC_Init = Module.findExportByName("libcrypto.dll", "CMAC_Init")
Interceptor.attach(CMAC_Init, {onLeave: function (args) {send("CMAC_Init");}});

var CMAC_Update = Module.findExportByName("libcrypto.dll", "CMAC_Update")
Interceptor.attach(CMAC_Update, {onLeave: function (args) {send("CMAC_Update");}});

var CMAC_resume = Module.findExportByName("libcrypto.dll", "CMAC_resume")
Interceptor.attach(CMAC_resume, {onLeave: function (args) {send("CMAC_resume");}});

var CMS_ContentInfo_free = Module.findExportByName("libcrypto.dll", "CMS_ContentInfo_free")
Interceptor.attach(CMS_ContentInfo_free, {onLeave: function (args) {send("CMS_ContentInfo_free");}});

var CMS_ContentInfo_it = Module.findExportByName("libcrypto.dll", "CMS_ContentInfo_it")
Interceptor.attach(CMS_ContentInfo_it, {onLeave: function (args) {send("CMS_ContentInfo_it");}});

var CMS_ContentInfo_new = Module.findExportByName("libcrypto.dll", "CMS_ContentInfo_new")
Interceptor.attach(CMS_ContentInfo_new, {onLeave: function (args) {send("CMS_ContentInfo_new");}});

var CMS_ContentInfo_print_ctx = Module.findExportByName("libcrypto.dll", "CMS_ContentInfo_print_ctx")
Interceptor.attach(CMS_ContentInfo_print_ctx, {onLeave: function (args) {send("CMS_ContentInfo_print_ctx");}});

var CMS_EncryptedData_decrypt = Module.findExportByName("libcrypto.dll", "CMS_EncryptedData_decrypt")
Interceptor.attach(CMS_EncryptedData_decrypt, {onLeave: function (args) {send("CMS_EncryptedData_decrypt");}});

var CMS_EncryptedData_encrypt = Module.findExportByName("libcrypto.dll", "CMS_EncryptedData_encrypt")
Interceptor.attach(CMS_EncryptedData_encrypt, {onLeave: function (args) {send("CMS_EncryptedData_encrypt");}});

var CMS_EncryptedData_set1_key = Module.findExportByName("libcrypto.dll", "CMS_EncryptedData_set1_key")
Interceptor.attach(CMS_EncryptedData_set1_key, {onLeave: function (args) {send("CMS_EncryptedData_set1_key");}});

var CMS_EnvelopedData_create = Module.findExportByName("libcrypto.dll", "CMS_EnvelopedData_create")
Interceptor.attach(CMS_EnvelopedData_create, {onLeave: function (args) {send("CMS_EnvelopedData_create");}});

var CMS_ReceiptRequest_create0 = Module.findExportByName("libcrypto.dll", "CMS_ReceiptRequest_create0")
Interceptor.attach(CMS_ReceiptRequest_create0, {onLeave: function (args) {send("CMS_ReceiptRequest_create0");}});

var CMS_ReceiptRequest_free = Module.findExportByName("libcrypto.dll", "CMS_ReceiptRequest_free")
Interceptor.attach(CMS_ReceiptRequest_free, {onLeave: function (args) {send("CMS_ReceiptRequest_free");}});

var CMS_ReceiptRequest_get0_values = Module.findExportByName("libcrypto.dll", "CMS_ReceiptRequest_get0_values")
Interceptor.attach(CMS_ReceiptRequest_get0_values, {onLeave: function (args) {send("CMS_ReceiptRequest_get0_values");}});

var CMS_ReceiptRequest_it = Module.findExportByName("libcrypto.dll", "CMS_ReceiptRequest_it")
Interceptor.attach(CMS_ReceiptRequest_it, {onLeave: function (args) {send("CMS_ReceiptRequest_it");}});

var CMS_ReceiptRequest_new = Module.findExportByName("libcrypto.dll", "CMS_ReceiptRequest_new")
Interceptor.attach(CMS_ReceiptRequest_new, {onLeave: function (args) {send("CMS_ReceiptRequest_new");}});

var CMS_RecipientEncryptedKey_cert_cmp = Module.findExportByName("libcrypto.dll", "CMS_RecipientEncryptedKey_cert_cmp")
Interceptor.attach(CMS_RecipientEncryptedKey_cert_cmp, {onLeave: function (args) {send("CMS_RecipientEncryptedKey_cert_cmp");}});

var CMS_RecipientEncryptedKey_get0_id = Module.findExportByName("libcrypto.dll", "CMS_RecipientEncryptedKey_get0_id")
Interceptor.attach(CMS_RecipientEncryptedKey_get0_id, {onLeave: function (args) {send("CMS_RecipientEncryptedKey_get0_id");}});

var CMS_RecipientInfo_decrypt = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_decrypt")
Interceptor.attach(CMS_RecipientInfo_decrypt, {onLeave: function (args) {send("CMS_RecipientInfo_decrypt");}});

var CMS_RecipientInfo_encrypt = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_encrypt")
Interceptor.attach(CMS_RecipientInfo_encrypt, {onLeave: function (args) {send("CMS_RecipientInfo_encrypt");}});

var CMS_RecipientInfo_get0_pkey_ctx = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_get0_pkey_ctx")
Interceptor.attach(CMS_RecipientInfo_get0_pkey_ctx, {onLeave: function (args) {send("CMS_RecipientInfo_get0_pkey_ctx");}});

var CMS_RecipientInfo_kari_decrypt = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_decrypt")
Interceptor.attach(CMS_RecipientInfo_kari_decrypt, {onLeave: function (args) {send("CMS_RecipientInfo_kari_decrypt");}});

var CMS_RecipientInfo_kari_get0_alg = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_get0_alg")
Interceptor.attach(CMS_RecipientInfo_kari_get0_alg, {onLeave: function (args) {send("CMS_RecipientInfo_kari_get0_alg");}});

var CMS_RecipientInfo_kari_get0_ctx = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_get0_ctx")
Interceptor.attach(CMS_RecipientInfo_kari_get0_ctx, {onLeave: function (args) {send("CMS_RecipientInfo_kari_get0_ctx");}});

var CMS_RecipientInfo_kari_get0_orig_id = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_get0_orig_id")
Interceptor.attach(CMS_RecipientInfo_kari_get0_orig_id, {onLeave: function (args) {send("CMS_RecipientInfo_kari_get0_orig_id");}});

var CMS_RecipientInfo_kari_get0_reks = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_get0_reks")
Interceptor.attach(CMS_RecipientInfo_kari_get0_reks, {onLeave: function (args) {send("CMS_RecipientInfo_kari_get0_reks");}});

var CMS_RecipientInfo_kari_orig_id_cmp = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_orig_id_cmp")
Interceptor.attach(CMS_RecipientInfo_kari_orig_id_cmp, {onLeave: function (args) {send("CMS_RecipientInfo_kari_orig_id_cmp");}});

var CMS_RecipientInfo_kari_set0_pkey = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kari_set0_pkey")
Interceptor.attach(CMS_RecipientInfo_kari_set0_pkey, {onLeave: function (args) {send("CMS_RecipientInfo_kari_set0_pkey");}});

var CMS_RecipientInfo_kekri_get0_id = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kekri_get0_id")
Interceptor.attach(CMS_RecipientInfo_kekri_get0_id, {onLeave: function (args) {send("CMS_RecipientInfo_kekri_get0_id");}});

var CMS_RecipientInfo_kekri_id_cmp = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_kekri_id_cmp")
Interceptor.attach(CMS_RecipientInfo_kekri_id_cmp, {onLeave: function (args) {send("CMS_RecipientInfo_kekri_id_cmp");}});

var CMS_RecipientInfo_ktri_cert_cmp = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_ktri_cert_cmp")
Interceptor.attach(CMS_RecipientInfo_ktri_cert_cmp, {onLeave: function (args) {send("CMS_RecipientInfo_ktri_cert_cmp");}});

var CMS_RecipientInfo_ktri_get0_algs = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_ktri_get0_algs")
Interceptor.attach(CMS_RecipientInfo_ktri_get0_algs, {onLeave: function (args) {send("CMS_RecipientInfo_ktri_get0_algs");}});

var CMS_RecipientInfo_ktri_get0_signer_id = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_ktri_get0_signer_id")
Interceptor.attach(CMS_RecipientInfo_ktri_get0_signer_id, {onLeave: function (args) {send("CMS_RecipientInfo_ktri_get0_signer_id");}});

var CMS_RecipientInfo_set0_key = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_set0_key")
Interceptor.attach(CMS_RecipientInfo_set0_key, {onLeave: function (args) {send("CMS_RecipientInfo_set0_key");}});

var CMS_RecipientInfo_set0_password = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_set0_password")
Interceptor.attach(CMS_RecipientInfo_set0_password, {onLeave: function (args) {send("CMS_RecipientInfo_set0_password");}});

var CMS_RecipientInfo_set0_pkey = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_set0_pkey")
Interceptor.attach(CMS_RecipientInfo_set0_pkey, {onLeave: function (args) {send("CMS_RecipientInfo_set0_pkey");}});

var CMS_RecipientInfo_type = Module.findExportByName("libcrypto.dll", "CMS_RecipientInfo_type")
Interceptor.attach(CMS_RecipientInfo_type, {onLeave: function (args) {send("CMS_RecipientInfo_type");}});

var CMS_SharedInfo_encode = Module.findExportByName("libcrypto.dll", "CMS_SharedInfo_encode")
Interceptor.attach(CMS_SharedInfo_encode, {onLeave: function (args) {send("CMS_SharedInfo_encode");}});

var CMS_SignedData_init = Module.findExportByName("libcrypto.dll", "CMS_SignedData_init")
Interceptor.attach(CMS_SignedData_init, {onLeave: function (args) {send("CMS_SignedData_init");}});

var CMS_SignerInfo_cert_cmp = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_cert_cmp")
Interceptor.attach(CMS_SignerInfo_cert_cmp, {onLeave: function (args) {send("CMS_SignerInfo_cert_cmp");}});

var CMS_SignerInfo_get0_algs = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_get0_algs")
Interceptor.attach(CMS_SignerInfo_get0_algs, {onLeave: function (args) {send("CMS_SignerInfo_get0_algs");}});

var CMS_SignerInfo_get0_md_ctx = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_get0_md_ctx")
Interceptor.attach(CMS_SignerInfo_get0_md_ctx, {onLeave: function (args) {send("CMS_SignerInfo_get0_md_ctx");}});

var CMS_SignerInfo_get0_pkey_ctx = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_get0_pkey_ctx")
Interceptor.attach(CMS_SignerInfo_get0_pkey_ctx, {onLeave: function (args) {send("CMS_SignerInfo_get0_pkey_ctx");}});

var CMS_SignerInfo_get0_signature = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_get0_signature")
Interceptor.attach(CMS_SignerInfo_get0_signature, {onLeave: function (args) {send("CMS_SignerInfo_get0_signature");}});

var CMS_SignerInfo_get0_signer_id = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_get0_signer_id")
Interceptor.attach(CMS_SignerInfo_get0_signer_id, {onLeave: function (args) {send("CMS_SignerInfo_get0_signer_id");}});

var CMS_SignerInfo_set1_signer_cert = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_set1_signer_cert")
Interceptor.attach(CMS_SignerInfo_set1_signer_cert, {onLeave: function (args) {send("CMS_SignerInfo_set1_signer_cert");}});

var CMS_SignerInfo_sign = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_sign")
Interceptor.attach(CMS_SignerInfo_sign, {onLeave: function (args) {send("CMS_SignerInfo_sign");}});

var CMS_SignerInfo_verify = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_verify")
Interceptor.attach(CMS_SignerInfo_verify, {onLeave: function (args) {send("CMS_SignerInfo_verify");}});

var CMS_SignerInfo_verify_content = Module.findExportByName("libcrypto.dll", "CMS_SignerInfo_verify_content")
Interceptor.attach(CMS_SignerInfo_verify_content, {onLeave: function (args) {send("CMS_SignerInfo_verify_content");}});

var CMS_add0_CertificateChoices = Module.findExportByName("libcrypto.dll", "CMS_add0_CertificateChoices")
Interceptor.attach(CMS_add0_CertificateChoices, {onLeave: function (args) {send("CMS_add0_CertificateChoices");}});

var CMS_add0_RevocationInfoChoice = Module.findExportByName("libcrypto.dll", "CMS_add0_RevocationInfoChoice")
Interceptor.attach(CMS_add0_RevocationInfoChoice, {onLeave: function (args) {send("CMS_add0_RevocationInfoChoice");}});

var CMS_add0_cert = Module.findExportByName("libcrypto.dll", "CMS_add0_cert")
Interceptor.attach(CMS_add0_cert, {onLeave: function (args) {send("CMS_add0_cert");}});

var CMS_add0_crl = Module.findExportByName("libcrypto.dll", "CMS_add0_crl")
Interceptor.attach(CMS_add0_crl, {onLeave: function (args) {send("CMS_add0_crl");}});

var CMS_add0_recipient_key = Module.findExportByName("libcrypto.dll", "CMS_add0_recipient_key")
Interceptor.attach(CMS_add0_recipient_key, {onLeave: function (args) {send("CMS_add0_recipient_key");}});

var CMS_add0_recipient_password = Module.findExportByName("libcrypto.dll", "CMS_add0_recipient_password")
Interceptor.attach(CMS_add0_recipient_password, {onLeave: function (args) {send("CMS_add0_recipient_password");}});

var CMS_add1_ReceiptRequest = Module.findExportByName("libcrypto.dll", "CMS_add1_ReceiptRequest")
Interceptor.attach(CMS_add1_ReceiptRequest, {onLeave: function (args) {send("CMS_add1_ReceiptRequest");}});

var CMS_add1_cert = Module.findExportByName("libcrypto.dll", "CMS_add1_cert")
Interceptor.attach(CMS_add1_cert, {onLeave: function (args) {send("CMS_add1_cert");}});

var CMS_add1_crl = Module.findExportByName("libcrypto.dll", "CMS_add1_crl")
Interceptor.attach(CMS_add1_crl, {onLeave: function (args) {send("CMS_add1_crl");}});

var CMS_add1_recipient_cert = Module.findExportByName("libcrypto.dll", "CMS_add1_recipient_cert")
Interceptor.attach(CMS_add1_recipient_cert, {onLeave: function (args) {send("CMS_add1_recipient_cert");}});

var CMS_add1_signer = Module.findExportByName("libcrypto.dll", "CMS_add1_signer")
Interceptor.attach(CMS_add1_signer, {onLeave: function (args) {send("CMS_add1_signer");}});

var CMS_add_simple_smimecap = Module.findExportByName("libcrypto.dll", "CMS_add_simple_smimecap")
Interceptor.attach(CMS_add_simple_smimecap, {onLeave: function (args) {send("CMS_add_simple_smimecap");}});

var CMS_add_smimecap = Module.findExportByName("libcrypto.dll", "CMS_add_smimecap")
Interceptor.attach(CMS_add_smimecap, {onLeave: function (args) {send("CMS_add_smimecap");}});

var CMS_add_standard_smimecap = Module.findExportByName("libcrypto.dll", "CMS_add_standard_smimecap")
Interceptor.attach(CMS_add_standard_smimecap, {onLeave: function (args) {send("CMS_add_standard_smimecap");}});

var CMS_compress = Module.findExportByName("libcrypto.dll", "CMS_compress")
Interceptor.attach(CMS_compress, {onLeave: function (args) {send("CMS_compress");}});

var CMS_data = Module.findExportByName("libcrypto.dll", "CMS_data")
Interceptor.attach(CMS_data, {onLeave: function (args) {send("CMS_data");}});

var CMS_dataFinal = Module.findExportByName("libcrypto.dll", "CMS_dataFinal")
Interceptor.attach(CMS_dataFinal, {onLeave: function (args) {send("CMS_dataFinal");}});

var CMS_dataInit = Module.findExportByName("libcrypto.dll", "CMS_dataInit")
Interceptor.attach(CMS_dataInit, {onLeave: function (args) {send("CMS_dataInit");}});

var CMS_data_create = Module.findExportByName("libcrypto.dll", "CMS_data_create")
Interceptor.attach(CMS_data_create, {onLeave: function (args) {send("CMS_data_create");}});

var CMS_decrypt = Module.findExportByName("libcrypto.dll", "CMS_decrypt")
Interceptor.attach(CMS_decrypt, {onLeave: function (args) {send("CMS_decrypt");}});

var CMS_decrypt_set1_key = Module.findExportByName("libcrypto.dll", "CMS_decrypt_set1_key")
Interceptor.attach(CMS_decrypt_set1_key, {onLeave: function (args) {send("CMS_decrypt_set1_key");}});

var CMS_decrypt_set1_password = Module.findExportByName("libcrypto.dll", "CMS_decrypt_set1_password")
Interceptor.attach(CMS_decrypt_set1_password, {onLeave: function (args) {send("CMS_decrypt_set1_password");}});

var CMS_decrypt_set1_pkey = Module.findExportByName("libcrypto.dll", "CMS_decrypt_set1_pkey")
Interceptor.attach(CMS_decrypt_set1_pkey, {onLeave: function (args) {send("CMS_decrypt_set1_pkey");}});

var CMS_digest_create = Module.findExportByName("libcrypto.dll", "CMS_digest_create")
Interceptor.attach(CMS_digest_create, {onLeave: function (args) {send("CMS_digest_create");}});

var CMS_digest_verify = Module.findExportByName("libcrypto.dll", "CMS_digest_verify")
Interceptor.attach(CMS_digest_verify, {onLeave: function (args) {send("CMS_digest_verify");}});

var CMS_encrypt = Module.findExportByName("libcrypto.dll", "CMS_encrypt")
Interceptor.attach(CMS_encrypt, {onLeave: function (args) {send("CMS_encrypt");}});

var CMS_final = Module.findExportByName("libcrypto.dll", "CMS_final")
Interceptor.attach(CMS_final, {onLeave: function (args) {send("CMS_final");}});

var CMS_get0_RecipientInfos = Module.findExportByName("libcrypto.dll", "CMS_get0_RecipientInfos")
Interceptor.attach(CMS_get0_RecipientInfos, {onLeave: function (args) {send("CMS_get0_RecipientInfos");}});

var CMS_get0_SignerInfos = Module.findExportByName("libcrypto.dll", "CMS_get0_SignerInfos")
Interceptor.attach(CMS_get0_SignerInfos, {onLeave: function (args) {send("CMS_get0_SignerInfos");}});

var CMS_get0_content = Module.findExportByName("libcrypto.dll", "CMS_get0_content")
Interceptor.attach(CMS_get0_content, {onLeave: function (args) {send("CMS_get0_content");}});

var CMS_get0_eContentType = Module.findExportByName("libcrypto.dll", "CMS_get0_eContentType")
Interceptor.attach(CMS_get0_eContentType, {onLeave: function (args) {send("CMS_get0_eContentType");}});

var CMS_get0_signers = Module.findExportByName("libcrypto.dll", "CMS_get0_signers")
Interceptor.attach(CMS_get0_signers, {onLeave: function (args) {send("CMS_get0_signers");}});

var CMS_get0_type = Module.findExportByName("libcrypto.dll", "CMS_get0_type")
Interceptor.attach(CMS_get0_type, {onLeave: function (args) {send("CMS_get0_type");}});

var CMS_get1_ReceiptRequest = Module.findExportByName("libcrypto.dll", "CMS_get1_ReceiptRequest")
Interceptor.attach(CMS_get1_ReceiptRequest, {onLeave: function (args) {send("CMS_get1_ReceiptRequest");}});

var CMS_get1_certs = Module.findExportByName("libcrypto.dll", "CMS_get1_certs")
Interceptor.attach(CMS_get1_certs, {onLeave: function (args) {send("CMS_get1_certs");}});

var CMS_get1_crls = Module.findExportByName("libcrypto.dll", "CMS_get1_crls")
Interceptor.attach(CMS_get1_crls, {onLeave: function (args) {send("CMS_get1_crls");}});

var CMS_is_detached = Module.findExportByName("libcrypto.dll", "CMS_is_detached")
Interceptor.attach(CMS_is_detached, {onLeave: function (args) {send("CMS_is_detached");}});

var CMS_set1_eContentType = Module.findExportByName("libcrypto.dll", "CMS_set1_eContentType")
Interceptor.attach(CMS_set1_eContentType, {onLeave: function (args) {send("CMS_set1_eContentType");}});

var CMS_set1_signers_certs = Module.findExportByName("libcrypto.dll", "CMS_set1_signers_certs")
Interceptor.attach(CMS_set1_signers_certs, {onLeave: function (args) {send("CMS_set1_signers_certs");}});

var CMS_set_detached = Module.findExportByName("libcrypto.dll", "CMS_set_detached")
Interceptor.attach(CMS_set_detached, {onLeave: function (args) {send("CMS_set_detached");}});

var CMS_sign = Module.findExportByName("libcrypto.dll", "CMS_sign")
Interceptor.attach(CMS_sign, {onLeave: function (args) {send("CMS_sign");}});

var CMS_sign_receipt = Module.findExportByName("libcrypto.dll", "CMS_sign_receipt")
Interceptor.attach(CMS_sign_receipt, {onLeave: function (args) {send("CMS_sign_receipt");}});

var CMS_signed_add1_attr = Module.findExportByName("libcrypto.dll", "CMS_signed_add1_attr")
Interceptor.attach(CMS_signed_add1_attr, {onLeave: function (args) {send("CMS_signed_add1_attr");}});

var CMS_signed_add1_attr_by_NID = Module.findExportByName("libcrypto.dll", "CMS_signed_add1_attr_by_NID")
Interceptor.attach(CMS_signed_add1_attr_by_NID, {onLeave: function (args) {send("CMS_signed_add1_attr_by_NID");}});

var CMS_signed_add1_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "CMS_signed_add1_attr_by_OBJ")
Interceptor.attach(CMS_signed_add1_attr_by_OBJ, {onLeave: function (args) {send("CMS_signed_add1_attr_by_OBJ");}});

var CMS_signed_add1_attr_by_txt = Module.findExportByName("libcrypto.dll", "CMS_signed_add1_attr_by_txt")
Interceptor.attach(CMS_signed_add1_attr_by_txt, {onLeave: function (args) {send("CMS_signed_add1_attr_by_txt");}});

var CMS_signed_delete_attr = Module.findExportByName("libcrypto.dll", "CMS_signed_delete_attr")
Interceptor.attach(CMS_signed_delete_attr, {onLeave: function (args) {send("CMS_signed_delete_attr");}});

var CMS_signed_get0_data_by_OBJ = Module.findExportByName("libcrypto.dll", "CMS_signed_get0_data_by_OBJ")
Interceptor.attach(CMS_signed_get0_data_by_OBJ, {onLeave: function (args) {send("CMS_signed_get0_data_by_OBJ");}});

var CMS_signed_get_attr = Module.findExportByName("libcrypto.dll", "CMS_signed_get_attr")
Interceptor.attach(CMS_signed_get_attr, {onLeave: function (args) {send("CMS_signed_get_attr");}});

var CMS_signed_get_attr_by_NID = Module.findExportByName("libcrypto.dll", "CMS_signed_get_attr_by_NID")
Interceptor.attach(CMS_signed_get_attr_by_NID, {onLeave: function (args) {send("CMS_signed_get_attr_by_NID");}});

var CMS_signed_get_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "CMS_signed_get_attr_by_OBJ")
Interceptor.attach(CMS_signed_get_attr_by_OBJ, {onLeave: function (args) {send("CMS_signed_get_attr_by_OBJ");}});

var CMS_signed_get_attr_count = Module.findExportByName("libcrypto.dll", "CMS_signed_get_attr_count")
Interceptor.attach(CMS_signed_get_attr_count, {onLeave: function (args) {send("CMS_signed_get_attr_count");}});

var CMS_stream = Module.findExportByName("libcrypto.dll", "CMS_stream")
Interceptor.attach(CMS_stream, {onLeave: function (args) {send("CMS_stream");}});

var CMS_uncompress = Module.findExportByName("libcrypto.dll", "CMS_uncompress")
Interceptor.attach(CMS_uncompress, {onLeave: function (args) {send("CMS_uncompress");}});

var CMS_unsigned_add1_attr = Module.findExportByName("libcrypto.dll", "CMS_unsigned_add1_attr")
Interceptor.attach(CMS_unsigned_add1_attr, {onLeave: function (args) {send("CMS_unsigned_add1_attr");}});

var CMS_unsigned_add1_attr_by_NID = Module.findExportByName("libcrypto.dll", "CMS_unsigned_add1_attr_by_NID")
Interceptor.attach(CMS_unsigned_add1_attr_by_NID, {onLeave: function (args) {send("CMS_unsigned_add1_attr_by_NID");}});

var CMS_unsigned_add1_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "CMS_unsigned_add1_attr_by_OBJ")
Interceptor.attach(CMS_unsigned_add1_attr_by_OBJ, {onLeave: function (args) {send("CMS_unsigned_add1_attr_by_OBJ");}});

var CMS_unsigned_add1_attr_by_txt = Module.findExportByName("libcrypto.dll", "CMS_unsigned_add1_attr_by_txt")
Interceptor.attach(CMS_unsigned_add1_attr_by_txt, {onLeave: function (args) {send("CMS_unsigned_add1_attr_by_txt");}});

var CMS_unsigned_delete_attr = Module.findExportByName("libcrypto.dll", "CMS_unsigned_delete_attr")
Interceptor.attach(CMS_unsigned_delete_attr, {onLeave: function (args) {send("CMS_unsigned_delete_attr");}});

var CMS_unsigned_get0_data_by_OBJ = Module.findExportByName("libcrypto.dll", "CMS_unsigned_get0_data_by_OBJ")
Interceptor.attach(CMS_unsigned_get0_data_by_OBJ, {onLeave: function (args) {send("CMS_unsigned_get0_data_by_OBJ");}});

var CMS_unsigned_get_attr = Module.findExportByName("libcrypto.dll", "CMS_unsigned_get_attr")
Interceptor.attach(CMS_unsigned_get_attr, {onLeave: function (args) {send("CMS_unsigned_get_attr");}});

var CMS_unsigned_get_attr_by_NID = Module.findExportByName("libcrypto.dll", "CMS_unsigned_get_attr_by_NID")
Interceptor.attach(CMS_unsigned_get_attr_by_NID, {onLeave: function (args) {send("CMS_unsigned_get_attr_by_NID");}});

var CMS_unsigned_get_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "CMS_unsigned_get_attr_by_OBJ")
Interceptor.attach(CMS_unsigned_get_attr_by_OBJ, {onLeave: function (args) {send("CMS_unsigned_get_attr_by_OBJ");}});

var CMS_unsigned_get_attr_count = Module.findExportByName("libcrypto.dll", "CMS_unsigned_get_attr_count")
Interceptor.attach(CMS_unsigned_get_attr_count, {onLeave: function (args) {send("CMS_unsigned_get_attr_count");}});

var CMS_verify = Module.findExportByName("libcrypto.dll", "CMS_verify")
Interceptor.attach(CMS_verify, {onLeave: function (args) {send("CMS_verify");}});

var CMS_verify_receipt = Module.findExportByName("libcrypto.dll", "CMS_verify_receipt")
Interceptor.attach(CMS_verify_receipt, {onLeave: function (args) {send("CMS_verify_receipt");}});

var COMP_CTX_free = Module.findExportByName("libcrypto.dll", "COMP_CTX_free")
Interceptor.attach(COMP_CTX_free, {onLeave: function (args) {send("COMP_CTX_free");}});

var COMP_CTX_new = Module.findExportByName("libcrypto.dll", "COMP_CTX_new")
Interceptor.attach(COMP_CTX_new, {onLeave: function (args) {send("COMP_CTX_new");}});

var COMP_compress_block = Module.findExportByName("libcrypto.dll", "COMP_compress_block")
Interceptor.attach(COMP_compress_block, {onLeave: function (args) {send("COMP_compress_block");}});

var COMP_expand_block = Module.findExportByName("libcrypto.dll", "COMP_expand_block")
Interceptor.attach(COMP_expand_block, {onLeave: function (args) {send("COMP_expand_block");}});

var COMP_rle = Module.findExportByName("libcrypto.dll", "COMP_rle")
Interceptor.attach(COMP_rle, {onLeave: function (args) {send("COMP_rle");}});

var COMP_zlib = Module.findExportByName("libcrypto.dll", "COMP_zlib")
Interceptor.attach(COMP_zlib, {onLeave: function (args) {send("COMP_zlib");}});

var COMP_zlib_cleanup = Module.findExportByName("libcrypto.dll", "COMP_zlib_cleanup")
Interceptor.attach(COMP_zlib_cleanup, {onLeave: function (args) {send("COMP_zlib_cleanup");}});

var CONF_dump_bio = Module.findExportByName("libcrypto.dll", "CONF_dump_bio")
Interceptor.attach(CONF_dump_bio, {onLeave: function (args) {send("CONF_dump_bio");}});

var CONF_dump_fp = Module.findExportByName("libcrypto.dll", "CONF_dump_fp")
Interceptor.attach(CONF_dump_fp, {onLeave: function (args) {send("CONF_dump_fp");}});

var CONF_free = Module.findExportByName("libcrypto.dll", "CONF_free")
Interceptor.attach(CONF_free, {onLeave: function (args) {send("CONF_free");}});

var CONF_get1_default_config_file = Module.findExportByName("libcrypto.dll", "CONF_get1_default_config_file")
Interceptor.attach(CONF_get1_default_config_file, {onLeave: function (args) {send("CONF_get1_default_config_file");}});

var CONF_get_number = Module.findExportByName("libcrypto.dll", "CONF_get_number")
Interceptor.attach(CONF_get_number, {onLeave: function (args) {send("CONF_get_number");}});

var CONF_get_section = Module.findExportByName("libcrypto.dll", "CONF_get_section")
Interceptor.attach(CONF_get_section, {onLeave: function (args) {send("CONF_get_section");}});

var CONF_get_string = Module.findExportByName("libcrypto.dll", "CONF_get_string")
Interceptor.attach(CONF_get_string, {onLeave: function (args) {send("CONF_get_string");}});

var CONF_imodule_get_flags = Module.findExportByName("libcrypto.dll", "CONF_imodule_get_flags")
Interceptor.attach(CONF_imodule_get_flags, {onLeave: function (args) {send("CONF_imodule_get_flags");}});

var CONF_imodule_get_module = Module.findExportByName("libcrypto.dll", "CONF_imodule_get_module")
Interceptor.attach(CONF_imodule_get_module, {onLeave: function (args) {send("CONF_imodule_get_module");}});

var CONF_imodule_get_name = Module.findExportByName("libcrypto.dll", "CONF_imodule_get_name")
Interceptor.attach(CONF_imodule_get_name, {onLeave: function (args) {send("CONF_imodule_get_name");}});

var CONF_imodule_get_usr_data = Module.findExportByName("libcrypto.dll", "CONF_imodule_get_usr_data")
Interceptor.attach(CONF_imodule_get_usr_data, {onLeave: function (args) {send("CONF_imodule_get_usr_data");}});

var CONF_imodule_get_value = Module.findExportByName("libcrypto.dll", "CONF_imodule_get_value")
Interceptor.attach(CONF_imodule_get_value, {onLeave: function (args) {send("CONF_imodule_get_value");}});

var CONF_imodule_set_flags = Module.findExportByName("libcrypto.dll", "CONF_imodule_set_flags")
Interceptor.attach(CONF_imodule_set_flags, {onLeave: function (args) {send("CONF_imodule_set_flags");}});

var CONF_imodule_set_usr_data = Module.findExportByName("libcrypto.dll", "CONF_imodule_set_usr_data")
Interceptor.attach(CONF_imodule_set_usr_data, {onLeave: function (args) {send("CONF_imodule_set_usr_data");}});

var CONF_load = Module.findExportByName("libcrypto.dll", "CONF_load")
Interceptor.attach(CONF_load, {onLeave: function (args) {send("CONF_load");}});

var CONF_load_bio = Module.findExportByName("libcrypto.dll", "CONF_load_bio")
Interceptor.attach(CONF_load_bio, {onLeave: function (args) {send("CONF_load_bio");}});

var CONF_load_fp = Module.findExportByName("libcrypto.dll", "CONF_load_fp")
Interceptor.attach(CONF_load_fp, {onLeave: function (args) {send("CONF_load_fp");}});

var CONF_module_add = Module.findExportByName("libcrypto.dll", "CONF_module_add")
Interceptor.attach(CONF_module_add, {onLeave: function (args) {send("CONF_module_add");}});

var CONF_module_get_usr_data = Module.findExportByName("libcrypto.dll", "CONF_module_get_usr_data")
Interceptor.attach(CONF_module_get_usr_data, {onLeave: function (args) {send("CONF_module_get_usr_data");}});

var CONF_module_set_usr_data = Module.findExportByName("libcrypto.dll", "CONF_module_set_usr_data")
Interceptor.attach(CONF_module_set_usr_data, {onLeave: function (args) {send("CONF_module_set_usr_data");}});

var CONF_modules_finish = Module.findExportByName("libcrypto.dll", "CONF_modules_finish")
Interceptor.attach(CONF_modules_finish, {onLeave: function (args) {send("CONF_modules_finish");}});

var CONF_modules_free = Module.findExportByName("libcrypto.dll", "CONF_modules_free")
Interceptor.attach(CONF_modules_free, {onLeave: function (args) {send("CONF_modules_free");}});

var CONF_modules_load = Module.findExportByName("libcrypto.dll", "CONF_modules_load")
Interceptor.attach(CONF_modules_load, {onLeave: function (args) {send("CONF_modules_load");}});

var CONF_modules_load_file = Module.findExportByName("libcrypto.dll", "CONF_modules_load_file")
Interceptor.attach(CONF_modules_load_file, {onLeave: function (args) {send("CONF_modules_load_file");}});

var CONF_modules_unload = Module.findExportByName("libcrypto.dll", "CONF_modules_unload")
Interceptor.attach(CONF_modules_unload, {onLeave: function (args) {send("CONF_modules_unload");}});

var CONF_parse_list = Module.findExportByName("libcrypto.dll", "CONF_parse_list")
Interceptor.attach(CONF_parse_list, {onLeave: function (args) {send("CONF_parse_list");}});

var CONF_set_default_method = Module.findExportByName("libcrypto.dll", "CONF_set_default_method")
Interceptor.attach(CONF_set_default_method, {onLeave: function (args) {send("CONF_set_default_method");}});

var CONF_set_nconf = Module.findExportByName("libcrypto.dll", "CONF_set_nconf")
Interceptor.attach(CONF_set_nconf, {onLeave: function (args) {send("CONF_set_nconf");}});

var CRL_DIST_POINTS_free = Module.findExportByName("libcrypto.dll", "CRL_DIST_POINTS_free")
Interceptor.attach(CRL_DIST_POINTS_free, {onLeave: function (args) {send("CRL_DIST_POINTS_free");}});

var CRL_DIST_POINTS_it = Module.findExportByName("libcrypto.dll", "CRL_DIST_POINTS_it")
Interceptor.attach(CRL_DIST_POINTS_it, {onLeave: function (args) {send("CRL_DIST_POINTS_it");}});

var CRL_DIST_POINTS_new = Module.findExportByName("libcrypto.dll", "CRL_DIST_POINTS_new")
Interceptor.attach(CRL_DIST_POINTS_new, {onLeave: function (args) {send("CRL_DIST_POINTS_new");}});

var CRYPTO_THREADID_cmp = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_cmp")
Interceptor.attach(CRYPTO_THREADID_cmp, {onLeave: function (args) {send("CRYPTO_THREADID_cmp");}});

var CRYPTO_THREADID_cpy = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_cpy")
Interceptor.attach(CRYPTO_THREADID_cpy, {onLeave: function (args) {send("CRYPTO_THREADID_cpy");}});

var CRYPTO_THREADID_current = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_current")
Interceptor.attach(CRYPTO_THREADID_current, {onLeave: function (args) {send("CRYPTO_THREADID_current");}});

var CRYPTO_THREADID_get_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_get_callback")
Interceptor.attach(CRYPTO_THREADID_get_callback, {onLeave: function (args) {send("CRYPTO_THREADID_get_callback");}});

var CRYPTO_THREADID_hash = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_hash")
Interceptor.attach(CRYPTO_THREADID_hash, {onLeave: function (args) {send("CRYPTO_THREADID_hash");}});

var CRYPTO_THREADID_set_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_set_callback")
Interceptor.attach(CRYPTO_THREADID_set_callback, {onLeave: function (args) {send("CRYPTO_THREADID_set_callback");}});

var CRYPTO_THREADID_set_numeric = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_set_numeric")
Interceptor.attach(CRYPTO_THREADID_set_numeric, {onLeave: function (args) {send("CRYPTO_THREADID_set_numeric");}});

var CRYPTO_THREADID_set_pointer = Module.findExportByName("libcrypto.dll", "CRYPTO_THREADID_set_pointer")
Interceptor.attach(CRYPTO_THREADID_set_pointer, {onLeave: function (args) {send("CRYPTO_THREADID_set_pointer");}});

var CRYPTO_add_lock = Module.findExportByName("libcrypto.dll", "CRYPTO_add_lock")
Interceptor.attach(CRYPTO_add_lock, {onLeave: function (args) {send("CRYPTO_add_lock");}});

var CRYPTO_cbc128_decrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cbc128_decrypt")
Interceptor.attach(CRYPTO_cbc128_decrypt, {onLeave: function (args) {send("CRYPTO_cbc128_decrypt");}});

var CRYPTO_cbc128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cbc128_encrypt")
Interceptor.attach(CRYPTO_cbc128_encrypt, {onLeave: function (args) {send("CRYPTO_cbc128_encrypt");}});

var CRYPTO_ccm128_aad = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_aad")
Interceptor.attach(CRYPTO_ccm128_aad, {onLeave: function (args) {send("CRYPTO_ccm128_aad");}});

var CRYPTO_ccm128_decrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_decrypt")
Interceptor.attach(CRYPTO_ccm128_decrypt, {onLeave: function (args) {send("CRYPTO_ccm128_decrypt");}});

var CRYPTO_ccm128_decrypt_ccm64 = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_decrypt_ccm64")
Interceptor.attach(CRYPTO_ccm128_decrypt_ccm64, {onLeave: function (args) {send("CRYPTO_ccm128_decrypt_ccm64");}});

var CRYPTO_ccm128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_encrypt")
Interceptor.attach(CRYPTO_ccm128_encrypt, {onLeave: function (args) {send("CRYPTO_ccm128_encrypt");}});

var CRYPTO_ccm128_encrypt_ccm64 = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_encrypt_ccm64")
Interceptor.attach(CRYPTO_ccm128_encrypt_ccm64, {onLeave: function (args) {send("CRYPTO_ccm128_encrypt_ccm64");}});

var CRYPTO_ccm128_init = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_init")
Interceptor.attach(CRYPTO_ccm128_init, {onLeave: function (args) {send("CRYPTO_ccm128_init");}});

var CRYPTO_ccm128_setiv = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_setiv")
Interceptor.attach(CRYPTO_ccm128_setiv, {onLeave: function (args) {send("CRYPTO_ccm128_setiv");}});

var CRYPTO_ccm128_tag = Module.findExportByName("libcrypto.dll", "CRYPTO_ccm128_tag")
Interceptor.attach(CRYPTO_ccm128_tag, {onLeave: function (args) {send("CRYPTO_ccm128_tag");}});

var CRYPTO_cfb128_1_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cfb128_1_encrypt")
Interceptor.attach(CRYPTO_cfb128_1_encrypt, {onLeave: function (args) {send("CRYPTO_cfb128_1_encrypt");}});

var CRYPTO_cfb128_8_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cfb128_8_encrypt")
Interceptor.attach(CRYPTO_cfb128_8_encrypt, {onLeave: function (args) {send("CRYPTO_cfb128_8_encrypt");}});

var CRYPTO_cfb128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cfb128_encrypt")
Interceptor.attach(CRYPTO_cfb128_encrypt, {onLeave: function (args) {send("CRYPTO_cfb128_encrypt");}});

var CRYPTO_chacha_20 = Module.findExportByName("libcrypto.dll", "CRYPTO_chacha_20")
Interceptor.attach(CRYPTO_chacha_20, {onLeave: function (args) {send("CRYPTO_chacha_20");}});

var CRYPTO_cleanup_all_ex_data = Module.findExportByName("libcrypto.dll", "CRYPTO_cleanup_all_ex_data")
Interceptor.attach(CRYPTO_cleanup_all_ex_data, {onLeave: function (args) {send("CRYPTO_cleanup_all_ex_data");}});

var CRYPTO_ctr128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_ctr128_encrypt")
Interceptor.attach(CRYPTO_ctr128_encrypt, {onLeave: function (args) {send("CRYPTO_ctr128_encrypt");}});

var CRYPTO_ctr128_encrypt_ctr32 = Module.findExportByName("libcrypto.dll", "CRYPTO_ctr128_encrypt_ctr32")
Interceptor.attach(CRYPTO_ctr128_encrypt_ctr32, {onLeave: function (args) {send("CRYPTO_ctr128_encrypt_ctr32");}});

var CRYPTO_cts128_decrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cts128_decrypt")
Interceptor.attach(CRYPTO_cts128_decrypt, {onLeave: function (args) {send("CRYPTO_cts128_decrypt");}});

var CRYPTO_cts128_decrypt_block = Module.findExportByName("libcrypto.dll", "CRYPTO_cts128_decrypt_block")
Interceptor.attach(CRYPTO_cts128_decrypt_block, {onLeave: function (args) {send("CRYPTO_cts128_decrypt_block");}});

var CRYPTO_cts128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_cts128_encrypt")
Interceptor.attach(CRYPTO_cts128_encrypt, {onLeave: function (args) {send("CRYPTO_cts128_encrypt");}});

var CRYPTO_cts128_encrypt_block = Module.findExportByName("libcrypto.dll", "CRYPTO_cts128_encrypt_block")
Interceptor.attach(CRYPTO_cts128_encrypt_block, {onLeave: function (args) {send("CRYPTO_cts128_encrypt_block");}});

var CRYPTO_dbg_free = Module.findExportByName("libcrypto.dll", "CRYPTO_dbg_free")
Interceptor.attach(CRYPTO_dbg_free, {onLeave: function (args) {send("CRYPTO_dbg_free");}});

var CRYPTO_dbg_get_options = Module.findExportByName("libcrypto.dll", "CRYPTO_dbg_get_options")
Interceptor.attach(CRYPTO_dbg_get_options, {onLeave: function (args) {send("CRYPTO_dbg_get_options");}});

var CRYPTO_dbg_malloc = Module.findExportByName("libcrypto.dll", "CRYPTO_dbg_malloc")
Interceptor.attach(CRYPTO_dbg_malloc, {onLeave: function (args) {send("CRYPTO_dbg_malloc");}});

var CRYPTO_dbg_realloc = Module.findExportByName("libcrypto.dll", "CRYPTO_dbg_realloc")
Interceptor.attach(CRYPTO_dbg_realloc, {onLeave: function (args) {send("CRYPTO_dbg_realloc");}});

var CRYPTO_dbg_set_options = Module.findExportByName("libcrypto.dll", "CRYPTO_dbg_set_options")
Interceptor.attach(CRYPTO_dbg_set_options, {onLeave: function (args) {send("CRYPTO_dbg_set_options");}});

var CRYPTO_destroy_dynlockid = Module.findExportByName("libcrypto.dll", "CRYPTO_destroy_dynlockid")
Interceptor.attach(CRYPTO_destroy_dynlockid, {onLeave: function (args) {send("CRYPTO_destroy_dynlockid");}});

var CRYPTO_dup_ex_data = Module.findExportByName("libcrypto.dll", "CRYPTO_dup_ex_data")
Interceptor.attach(CRYPTO_dup_ex_data, {onLeave: function (args) {send("CRYPTO_dup_ex_data");}});

var CRYPTO_ex_data_new_class = Module.findExportByName("libcrypto.dll", "CRYPTO_ex_data_new_class")
Interceptor.attach(CRYPTO_ex_data_new_class, {onLeave: function (args) {send("CRYPTO_ex_data_new_class");}});

var CRYPTO_free = Module.findExportByName("libcrypto.dll", "CRYPTO_free")
Interceptor.attach(CRYPTO_free, {onLeave: function (args) {send("CRYPTO_free");}});

var CRYPTO_free_ex_data = Module.findExportByName("libcrypto.dll", "CRYPTO_free_ex_data")
Interceptor.attach(CRYPTO_free_ex_data, {onLeave: function (args) {send("CRYPTO_free_ex_data");}});

var CRYPTO_free_locked = Module.findExportByName("libcrypto.dll", "CRYPTO_free_locked")
Interceptor.attach(CRYPTO_free_locked, {onLeave: function (args) {send("CRYPTO_free_locked");}});

var CRYPTO_gcm128_aad = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_aad")
Interceptor.attach(CRYPTO_gcm128_aad, {onLeave: function (args) {send("CRYPTO_gcm128_aad");}});

var CRYPTO_gcm128_decrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_decrypt")
Interceptor.attach(CRYPTO_gcm128_decrypt, {onLeave: function (args) {send("CRYPTO_gcm128_decrypt");}});

var CRYPTO_gcm128_decrypt_ctr32 = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_decrypt_ctr32")
Interceptor.attach(CRYPTO_gcm128_decrypt_ctr32, {onLeave: function (args) {send("CRYPTO_gcm128_decrypt_ctr32");}});

var CRYPTO_gcm128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_encrypt")
Interceptor.attach(CRYPTO_gcm128_encrypt, {onLeave: function (args) {send("CRYPTO_gcm128_encrypt");}});

var CRYPTO_gcm128_encrypt_ctr32 = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_encrypt_ctr32")
Interceptor.attach(CRYPTO_gcm128_encrypt_ctr32, {onLeave: function (args) {send("CRYPTO_gcm128_encrypt_ctr32");}});

var CRYPTO_gcm128_finish = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_finish")
Interceptor.attach(CRYPTO_gcm128_finish, {onLeave: function (args) {send("CRYPTO_gcm128_finish");}});

var CRYPTO_gcm128_init = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_init")
Interceptor.attach(CRYPTO_gcm128_init, {onLeave: function (args) {send("CRYPTO_gcm128_init");}});

var CRYPTO_gcm128_new = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_new")
Interceptor.attach(CRYPTO_gcm128_new, {onLeave: function (args) {send("CRYPTO_gcm128_new");}});

var CRYPTO_gcm128_release = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_release")
Interceptor.attach(CRYPTO_gcm128_release, {onLeave: function (args) {send("CRYPTO_gcm128_release");}});

var CRYPTO_gcm128_setiv = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_setiv")
Interceptor.attach(CRYPTO_gcm128_setiv, {onLeave: function (args) {send("CRYPTO_gcm128_setiv");}});

var CRYPTO_gcm128_tag = Module.findExportByName("libcrypto.dll", "CRYPTO_gcm128_tag")
Interceptor.attach(CRYPTO_gcm128_tag, {onLeave: function (args) {send("CRYPTO_gcm128_tag");}});

var CRYPTO_get_add_lock_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_get_add_lock_callback")
Interceptor.attach(CRYPTO_get_add_lock_callback, {onLeave: function (args) {send("CRYPTO_get_add_lock_callback");}});

var CRYPTO_get_dynlock_create_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_get_dynlock_create_callback")
Interceptor.attach(CRYPTO_get_dynlock_create_callback, {onLeave: function (args) {send("CRYPTO_get_dynlock_create_callback");}});

var CRYPTO_get_dynlock_destroy_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_get_dynlock_destroy_callback")
Interceptor.attach(CRYPTO_get_dynlock_destroy_callback, {onLeave: function (args) {send("CRYPTO_get_dynlock_destroy_callback");}});

var CRYPTO_get_dynlock_lock_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_get_dynlock_lock_callback")
Interceptor.attach(CRYPTO_get_dynlock_lock_callback, {onLeave: function (args) {send("CRYPTO_get_dynlock_lock_callback");}});

var CRYPTO_get_dynlock_value = Module.findExportByName("libcrypto.dll", "CRYPTO_get_dynlock_value")
Interceptor.attach(CRYPTO_get_dynlock_value, {onLeave: function (args) {send("CRYPTO_get_dynlock_value");}});

var CRYPTO_get_ex_data = Module.findExportByName("libcrypto.dll", "CRYPTO_get_ex_data")
Interceptor.attach(CRYPTO_get_ex_data, {onLeave: function (args) {send("CRYPTO_get_ex_data");}});

var CRYPTO_get_ex_data_implementation = Module.findExportByName("libcrypto.dll", "CRYPTO_get_ex_data_implementation")
Interceptor.attach(CRYPTO_get_ex_data_implementation, {onLeave: function (args) {send("CRYPTO_get_ex_data_implementation");}});

var CRYPTO_get_ex_new_index = Module.findExportByName("libcrypto.dll", "CRYPTO_get_ex_new_index")
Interceptor.attach(CRYPTO_get_ex_new_index, {onLeave: function (args) {send("CRYPTO_get_ex_new_index");}});

var CRYPTO_get_id_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_get_id_callback")
Interceptor.attach(CRYPTO_get_id_callback, {onLeave: function (args) {send("CRYPTO_get_id_callback");}});

var CRYPTO_get_lock_name = Module.findExportByName("libcrypto.dll", "CRYPTO_get_lock_name")
Interceptor.attach(CRYPTO_get_lock_name, {onLeave: function (args) {send("CRYPTO_get_lock_name");}});

var CRYPTO_get_locked_mem_ex_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_get_locked_mem_ex_functions")
Interceptor.attach(CRYPTO_get_locked_mem_ex_functions, {onLeave: function (args) {send("CRYPTO_get_locked_mem_ex_functions");}});

var CRYPTO_get_locked_mem_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_get_locked_mem_functions")
Interceptor.attach(CRYPTO_get_locked_mem_functions, {onLeave: function (args) {send("CRYPTO_get_locked_mem_functions");}});

var CRYPTO_get_locking_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_get_locking_callback")
Interceptor.attach(CRYPTO_get_locking_callback, {onLeave: function (args) {send("CRYPTO_get_locking_callback");}});

var CRYPTO_get_mem_debug_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_get_mem_debug_functions")
Interceptor.attach(CRYPTO_get_mem_debug_functions, {onLeave: function (args) {send("CRYPTO_get_mem_debug_functions");}});

var CRYPTO_get_mem_debug_options = Module.findExportByName("libcrypto.dll", "CRYPTO_get_mem_debug_options")
Interceptor.attach(CRYPTO_get_mem_debug_options, {onLeave: function (args) {send("CRYPTO_get_mem_debug_options");}});

var CRYPTO_get_mem_ex_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_get_mem_ex_functions")
Interceptor.attach(CRYPTO_get_mem_ex_functions, {onLeave: function (args) {send("CRYPTO_get_mem_ex_functions");}});

var CRYPTO_get_mem_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_get_mem_functions")
Interceptor.attach(CRYPTO_get_mem_functions, {onLeave: function (args) {send("CRYPTO_get_mem_functions");}});

var CRYPTO_get_new_dynlockid = Module.findExportByName("libcrypto.dll", "CRYPTO_get_new_dynlockid")
Interceptor.attach(CRYPTO_get_new_dynlockid, {onLeave: function (args) {send("CRYPTO_get_new_dynlockid");}});

var CRYPTO_get_new_lockid = Module.findExportByName("libcrypto.dll", "CRYPTO_get_new_lockid")
Interceptor.attach(CRYPTO_get_new_lockid, {onLeave: function (args) {send("CRYPTO_get_new_lockid");}});

var CRYPTO_hchacha_20 = Module.findExportByName("libcrypto.dll", "CRYPTO_hchacha_20")
Interceptor.attach(CRYPTO_hchacha_20, {onLeave: function (args) {send("CRYPTO_hchacha_20");}});

var CRYPTO_is_mem_check_on = Module.findExportByName("libcrypto.dll", "CRYPTO_is_mem_check_on")
Interceptor.attach(CRYPTO_is_mem_check_on, {onLeave: function (args) {send("CRYPTO_is_mem_check_on");}});

var CRYPTO_lock = Module.findExportByName("libcrypto.dll", "CRYPTO_lock")
Interceptor.attach(CRYPTO_lock, {onLeave: function (args) {send("CRYPTO_lock");}});

var CRYPTO_malloc = Module.findExportByName("libcrypto.dll", "CRYPTO_malloc")
Interceptor.attach(CRYPTO_malloc, {onLeave: function (args) {send("CRYPTO_malloc");}});

var CRYPTO_malloc_locked = Module.findExportByName("libcrypto.dll", "CRYPTO_malloc_locked")
Interceptor.attach(CRYPTO_malloc_locked, {onLeave: function (args) {send("CRYPTO_malloc_locked");}});

var CRYPTO_mem_ctrl = Module.findExportByName("libcrypto.dll", "CRYPTO_mem_ctrl")
Interceptor.attach(CRYPTO_mem_ctrl, {onLeave: function (args) {send("CRYPTO_mem_ctrl");}});

var CRYPTO_mem_leaks = Module.findExportByName("libcrypto.dll", "CRYPTO_mem_leaks")
Interceptor.attach(CRYPTO_mem_leaks, {onLeave: function (args) {send("CRYPTO_mem_leaks");}});

var CRYPTO_mem_leaks_cb = Module.findExportByName("libcrypto.dll", "CRYPTO_mem_leaks_cb")
Interceptor.attach(CRYPTO_mem_leaks_cb, {onLeave: function (args) {send("CRYPTO_mem_leaks_cb");}});

var CRYPTO_mem_leaks_fp = Module.findExportByName("libcrypto.dll", "CRYPTO_mem_leaks_fp")
Interceptor.attach(CRYPTO_mem_leaks_fp, {onLeave: function (args) {send("CRYPTO_mem_leaks_fp");}});

var CRYPTO_memcmp = Module.findExportByName("libcrypto.dll", "CRYPTO_memcmp")
Interceptor.attach(CRYPTO_memcmp, {onLeave: function (args) {send("CRYPTO_memcmp");}});

var CRYPTO_new_ex_data = Module.findExportByName("libcrypto.dll", "CRYPTO_new_ex_data")
Interceptor.attach(CRYPTO_new_ex_data, {onLeave: function (args) {send("CRYPTO_new_ex_data");}});

var CRYPTO_nistcts128_decrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_nistcts128_decrypt")
Interceptor.attach(CRYPTO_nistcts128_decrypt, {onLeave: function (args) {send("CRYPTO_nistcts128_decrypt");}});

var CRYPTO_nistcts128_decrypt_block = Module.findExportByName("libcrypto.dll", "CRYPTO_nistcts128_decrypt_block")
Interceptor.attach(CRYPTO_nistcts128_decrypt_block, {onLeave: function (args) {send("CRYPTO_nistcts128_decrypt_block");}});

var CRYPTO_nistcts128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_nistcts128_encrypt")
Interceptor.attach(CRYPTO_nistcts128_encrypt, {onLeave: function (args) {send("CRYPTO_nistcts128_encrypt");}});

var CRYPTO_nistcts128_encrypt_block = Module.findExportByName("libcrypto.dll", "CRYPTO_nistcts128_encrypt_block")
Interceptor.attach(CRYPTO_nistcts128_encrypt_block, {onLeave: function (args) {send("CRYPTO_nistcts128_encrypt_block");}});

var CRYPTO_num_locks = Module.findExportByName("libcrypto.dll", "CRYPTO_num_locks")
Interceptor.attach(CRYPTO_num_locks, {onLeave: function (args) {send("CRYPTO_num_locks");}});

var CRYPTO_ofb128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_ofb128_encrypt")
Interceptor.attach(CRYPTO_ofb128_encrypt, {onLeave: function (args) {send("CRYPTO_ofb128_encrypt");}});

var CRYPTO_poly1305_finish = Module.findExportByName("libcrypto.dll", "CRYPTO_poly1305_finish")
Interceptor.attach(CRYPTO_poly1305_finish, {onLeave: function (args) {send("CRYPTO_poly1305_finish");}});

var CRYPTO_poly1305_init = Module.findExportByName("libcrypto.dll", "CRYPTO_poly1305_init")
Interceptor.attach(CRYPTO_poly1305_init, {onLeave: function (args) {send("CRYPTO_poly1305_init");}});

var CRYPTO_poly1305_update = Module.findExportByName("libcrypto.dll", "CRYPTO_poly1305_update")
Interceptor.attach(CRYPTO_poly1305_update, {onLeave: function (args) {send("CRYPTO_poly1305_update");}});

var CRYPTO_pop_info = Module.findExportByName("libcrypto.dll", "CRYPTO_pop_info")
Interceptor.attach(CRYPTO_pop_info, {onLeave: function (args) {send("CRYPTO_pop_info");}});

var CRYPTO_push_info_ = Module.findExportByName("libcrypto.dll", "CRYPTO_push_info_")
Interceptor.attach(CRYPTO_push_info_, {onLeave: function (args) {send("CRYPTO_push_info_");}});

var CRYPTO_realloc = Module.findExportByName("libcrypto.dll", "CRYPTO_realloc")
Interceptor.attach(CRYPTO_realloc, {onLeave: function (args) {send("CRYPTO_realloc");}});

var CRYPTO_realloc_clean = Module.findExportByName("libcrypto.dll", "CRYPTO_realloc_clean")
Interceptor.attach(CRYPTO_realloc_clean, {onLeave: function (args) {send("CRYPTO_realloc_clean");}});

var CRYPTO_remalloc = Module.findExportByName("libcrypto.dll", "CRYPTO_remalloc")
Interceptor.attach(CRYPTO_remalloc, {onLeave: function (args) {send("CRYPTO_remalloc");}});

var CRYPTO_remove_all_info = Module.findExportByName("libcrypto.dll", "CRYPTO_remove_all_info")
Interceptor.attach(CRYPTO_remove_all_info, {onLeave: function (args) {send("CRYPTO_remove_all_info");}});

var CRYPTO_set_add_lock_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_set_add_lock_callback")
Interceptor.attach(CRYPTO_set_add_lock_callback, {onLeave: function (args) {send("CRYPTO_set_add_lock_callback");}});

var CRYPTO_set_dynlock_create_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_set_dynlock_create_callback")
Interceptor.attach(CRYPTO_set_dynlock_create_callback, {onLeave: function (args) {send("CRYPTO_set_dynlock_create_callback");}});

var CRYPTO_set_dynlock_destroy_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_set_dynlock_destroy_callback")
Interceptor.attach(CRYPTO_set_dynlock_destroy_callback, {onLeave: function (args) {send("CRYPTO_set_dynlock_destroy_callback");}});

var CRYPTO_set_dynlock_lock_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_set_dynlock_lock_callback")
Interceptor.attach(CRYPTO_set_dynlock_lock_callback, {onLeave: function (args) {send("CRYPTO_set_dynlock_lock_callback");}});

var CRYPTO_set_ex_data = Module.findExportByName("libcrypto.dll", "CRYPTO_set_ex_data")
Interceptor.attach(CRYPTO_set_ex_data, {onLeave: function (args) {send("CRYPTO_set_ex_data");}});

var CRYPTO_set_ex_data_implementation = Module.findExportByName("libcrypto.dll", "CRYPTO_set_ex_data_implementation")
Interceptor.attach(CRYPTO_set_ex_data_implementation, {onLeave: function (args) {send("CRYPTO_set_ex_data_implementation");}});

var CRYPTO_set_id_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_set_id_callback")
Interceptor.attach(CRYPTO_set_id_callback, {onLeave: function (args) {send("CRYPTO_set_id_callback");}});

var CRYPTO_set_locked_mem_ex_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_set_locked_mem_ex_functions")
Interceptor.attach(CRYPTO_set_locked_mem_ex_functions, {onLeave: function (args) {send("CRYPTO_set_locked_mem_ex_functions");}});

var CRYPTO_set_locked_mem_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_set_locked_mem_functions")
Interceptor.attach(CRYPTO_set_locked_mem_functions, {onLeave: function (args) {send("CRYPTO_set_locked_mem_functions");}});

var CRYPTO_set_locking_callback = Module.findExportByName("libcrypto.dll", "CRYPTO_set_locking_callback")
Interceptor.attach(CRYPTO_set_locking_callback, {onLeave: function (args) {send("CRYPTO_set_locking_callback");}});

var CRYPTO_set_mem_debug_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_set_mem_debug_functions")
Interceptor.attach(CRYPTO_set_mem_debug_functions, {onLeave: function (args) {send("CRYPTO_set_mem_debug_functions");}});

var CRYPTO_set_mem_debug_options = Module.findExportByName("libcrypto.dll", "CRYPTO_set_mem_debug_options")
Interceptor.attach(CRYPTO_set_mem_debug_options, {onLeave: function (args) {send("CRYPTO_set_mem_debug_options");}});

var CRYPTO_set_mem_ex_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_set_mem_ex_functions")
Interceptor.attach(CRYPTO_set_mem_ex_functions, {onLeave: function (args) {send("CRYPTO_set_mem_ex_functions");}});

var CRYPTO_set_mem_functions = Module.findExportByName("libcrypto.dll", "CRYPTO_set_mem_functions")
Interceptor.attach(CRYPTO_set_mem_functions, {onLeave: function (args) {send("CRYPTO_set_mem_functions");}});

var CRYPTO_strdup = Module.findExportByName("libcrypto.dll", "CRYPTO_strdup")
Interceptor.attach(CRYPTO_strdup, {onLeave: function (args) {send("CRYPTO_strdup");}});

var CRYPTO_thread_id = Module.findExportByName("libcrypto.dll", "CRYPTO_thread_id")
Interceptor.attach(CRYPTO_thread_id, {onLeave: function (args) {send("CRYPTO_thread_id");}});

var CRYPTO_xchacha_20 = Module.findExportByName("libcrypto.dll", "CRYPTO_xchacha_20")
Interceptor.attach(CRYPTO_xchacha_20, {onLeave: function (args) {send("CRYPTO_xchacha_20");}});

var CRYPTO_xts128_encrypt = Module.findExportByName("libcrypto.dll", "CRYPTO_xts128_encrypt")
Interceptor.attach(CRYPTO_xts128_encrypt, {onLeave: function (args) {send("CRYPTO_xts128_encrypt");}});

var Camellia_cbc_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_cbc_encrypt")
Interceptor.attach(Camellia_cbc_encrypt, {onLeave: function (args) {send("Camellia_cbc_encrypt");}});

var Camellia_cfb128_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_cfb128_encrypt")
Interceptor.attach(Camellia_cfb128_encrypt, {onLeave: function (args) {send("Camellia_cfb128_encrypt");}});

var Camellia_cfb1_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_cfb1_encrypt")
Interceptor.attach(Camellia_cfb1_encrypt, {onLeave: function (args) {send("Camellia_cfb1_encrypt");}});

var Camellia_cfb8_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_cfb8_encrypt")
Interceptor.attach(Camellia_cfb8_encrypt, {onLeave: function (args) {send("Camellia_cfb8_encrypt");}});

var Camellia_ctr128_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_ctr128_encrypt")
Interceptor.attach(Camellia_ctr128_encrypt, {onLeave: function (args) {send("Camellia_ctr128_encrypt");}});

var Camellia_decrypt = Module.findExportByName("libcrypto.dll", "Camellia_decrypt")
Interceptor.attach(Camellia_decrypt, {onLeave: function (args) {send("Camellia_decrypt");}});

var Camellia_ecb_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_ecb_encrypt")
Interceptor.attach(Camellia_ecb_encrypt, {onLeave: function (args) {send("Camellia_ecb_encrypt");}});

var Camellia_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_encrypt")
Interceptor.attach(Camellia_encrypt, {onLeave: function (args) {send("Camellia_encrypt");}});

var Camellia_ofb128_encrypt = Module.findExportByName("libcrypto.dll", "Camellia_ofb128_encrypt")
Interceptor.attach(Camellia_ofb128_encrypt, {onLeave: function (args) {send("Camellia_ofb128_encrypt");}});

var Camellia_set_key = Module.findExportByName("libcrypto.dll", "Camellia_set_key")
Interceptor.attach(Camellia_set_key, {onLeave: function (args) {send("Camellia_set_key");}});

var ChaCha = Module.findExportByName("libcrypto.dll", "ChaCha")
Interceptor.attach(ChaCha, {onLeave: function (args) {send("ChaCha");}});

var ChaCha_set_iv = Module.findExportByName("libcrypto.dll", "ChaCha_set_iv")
Interceptor.attach(ChaCha_set_iv, {onLeave: function (args) {send("ChaCha_set_iv");}});

var ChaCha_set_key = Module.findExportByName("libcrypto.dll", "ChaCha_set_key")
Interceptor.attach(ChaCha_set_key, {onLeave: function (args) {send("ChaCha_set_key");}});

var DES_cbc_cksum = Module.findExportByName("libcrypto.dll", "DES_cbc_cksum")
Interceptor.attach(DES_cbc_cksum, {onLeave: function (args) {send("DES_cbc_cksum");}});

var DES_cbc_encrypt = Module.findExportByName("libcrypto.dll", "DES_cbc_encrypt")
Interceptor.attach(DES_cbc_encrypt, {onLeave: function (args) {send("DES_cbc_encrypt");}});

var DES_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "DES_cfb64_encrypt")
Interceptor.attach(DES_cfb64_encrypt, {onLeave: function (args) {send("DES_cfb64_encrypt");}});

var DES_cfb_encrypt = Module.findExportByName("libcrypto.dll", "DES_cfb_encrypt")
Interceptor.attach(DES_cfb_encrypt, {onLeave: function (args) {send("DES_cfb_encrypt");}});

var DES_check_key = Module.findExportByName("libcrypto.dll", "DES_check_key")
Interceptor.attach(DES_check_key, {onLeave: function (args) {send("DES_check_key");}});

var DES_check_key_parity = Module.findExportByName("libcrypto.dll", "DES_check_key_parity")
Interceptor.attach(DES_check_key_parity, {onLeave: function (args) {send("DES_check_key_parity");}});

var DES_crypt = Module.findExportByName("libcrypto.dll", "DES_crypt")
Interceptor.attach(DES_crypt, {onLeave: function (args) {send("DES_crypt");}});

var DES_decrypt3 = Module.findExportByName("libcrypto.dll", "DES_decrypt3")
Interceptor.attach(DES_decrypt3, {onLeave: function (args) {send("DES_decrypt3");}});

var DES_ecb3_encrypt = Module.findExportByName("libcrypto.dll", "DES_ecb3_encrypt")
Interceptor.attach(DES_ecb3_encrypt, {onLeave: function (args) {send("DES_ecb3_encrypt");}});

var DES_ecb_encrypt = Module.findExportByName("libcrypto.dll", "DES_ecb_encrypt")
Interceptor.attach(DES_ecb_encrypt, {onLeave: function (args) {send("DES_ecb_encrypt");}});

var DES_ede3_cbc_encrypt = Module.findExportByName("libcrypto.dll", "DES_ede3_cbc_encrypt")
Interceptor.attach(DES_ede3_cbc_encrypt, {onLeave: function (args) {send("DES_ede3_cbc_encrypt");}});

var DES_ede3_cbcm_encrypt = Module.findExportByName("libcrypto.dll", "DES_ede3_cbcm_encrypt")
Interceptor.attach(DES_ede3_cbcm_encrypt, {onLeave: function (args) {send("DES_ede3_cbcm_encrypt");}});

var DES_ede3_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "DES_ede3_cfb64_encrypt")
Interceptor.attach(DES_ede3_cfb64_encrypt, {onLeave: function (args) {send("DES_ede3_cfb64_encrypt");}});

var DES_ede3_cfb_encrypt = Module.findExportByName("libcrypto.dll", "DES_ede3_cfb_encrypt")
Interceptor.attach(DES_ede3_cfb_encrypt, {onLeave: function (args) {send("DES_ede3_cfb_encrypt");}});

var DES_ede3_ofb64_encrypt = Module.findExportByName("libcrypto.dll", "DES_ede3_ofb64_encrypt")
Interceptor.attach(DES_ede3_ofb64_encrypt, {onLeave: function (args) {send("DES_ede3_ofb64_encrypt");}});

var DES_enc_read = Module.findExportByName("libcrypto.dll", "DES_enc_read")
Interceptor.attach(DES_enc_read, {onLeave: function (args) {send("DES_enc_read");}});

var DES_enc_write = Module.findExportByName("libcrypto.dll", "DES_enc_write")
Interceptor.attach(DES_enc_write, {onLeave: function (args) {send("DES_enc_write");}});

var DES_encrypt1 = Module.findExportByName("libcrypto.dll", "DES_encrypt1")
Interceptor.attach(DES_encrypt1, {onLeave: function (args) {send("DES_encrypt1");}});

var DES_encrypt2 = Module.findExportByName("libcrypto.dll", "DES_encrypt2")
Interceptor.attach(DES_encrypt2, {onLeave: function (args) {send("DES_encrypt2");}});

var DES_encrypt3 = Module.findExportByName("libcrypto.dll", "DES_encrypt3")
Interceptor.attach(DES_encrypt3, {onLeave: function (args) {send("DES_encrypt3");}});

var DES_fcrypt = Module.findExportByName("libcrypto.dll", "DES_fcrypt")
Interceptor.attach(DES_fcrypt, {onLeave: function (args) {send("DES_fcrypt");}});

var DES_is_weak_key = Module.findExportByName("libcrypto.dll", "DES_is_weak_key")
Interceptor.attach(DES_is_weak_key, {onLeave: function (args) {send("DES_is_weak_key");}});

var DES_key_sched = Module.findExportByName("libcrypto.dll", "DES_key_sched")
Interceptor.attach(DES_key_sched, {onLeave: function (args) {send("DES_key_sched");}});

var DES_ncbc_encrypt = Module.findExportByName("libcrypto.dll", "DES_ncbc_encrypt")
Interceptor.attach(DES_ncbc_encrypt, {onLeave: function (args) {send("DES_ncbc_encrypt");}});

var DES_ofb64_encrypt = Module.findExportByName("libcrypto.dll", "DES_ofb64_encrypt")
Interceptor.attach(DES_ofb64_encrypt, {onLeave: function (args) {send("DES_ofb64_encrypt");}});

var DES_ofb_encrypt = Module.findExportByName("libcrypto.dll", "DES_ofb_encrypt")
Interceptor.attach(DES_ofb_encrypt, {onLeave: function (args) {send("DES_ofb_encrypt");}});

var DES_options = Module.findExportByName("libcrypto.dll", "DES_options")
Interceptor.attach(DES_options, {onLeave: function (args) {send("DES_options");}});

var DES_pcbc_encrypt = Module.findExportByName("libcrypto.dll", "DES_pcbc_encrypt")
Interceptor.attach(DES_pcbc_encrypt, {onLeave: function (args) {send("DES_pcbc_encrypt");}});

var DES_quad_cksum = Module.findExportByName("libcrypto.dll", "DES_quad_cksum")
Interceptor.attach(DES_quad_cksum, {onLeave: function (args) {send("DES_quad_cksum");}});

var DES_random_key = Module.findExportByName("libcrypto.dll", "DES_random_key")
Interceptor.attach(DES_random_key, {onLeave: function (args) {send("DES_random_key");}});

var DES_rw_mode = Module.findExportByName("libcrypto.dll", "DES_rw_mode")
Interceptor.attach(DES_rw_mode, {onLeave: function (args) {send("DES_rw_mode");}});

var DES_set_key = Module.findExportByName("libcrypto.dll", "DES_set_key")
Interceptor.attach(DES_set_key, {onLeave: function (args) {send("DES_set_key");}});

var DES_set_key_checked = Module.findExportByName("libcrypto.dll", "DES_set_key_checked")
Interceptor.attach(DES_set_key_checked, {onLeave: function (args) {send("DES_set_key_checked");}});

var DES_set_key_unchecked = Module.findExportByName("libcrypto.dll", "DES_set_key_unchecked")
Interceptor.attach(DES_set_key_unchecked, {onLeave: function (args) {send("DES_set_key_unchecked");}});

var DES_set_odd_parity = Module.findExportByName("libcrypto.dll", "DES_set_odd_parity")
Interceptor.attach(DES_set_odd_parity, {onLeave: function (args) {send("DES_set_odd_parity");}});

var DES_string_to_2keys = Module.findExportByName("libcrypto.dll", "DES_string_to_2keys")
Interceptor.attach(DES_string_to_2keys, {onLeave: function (args) {send("DES_string_to_2keys");}});

var DES_string_to_key = Module.findExportByName("libcrypto.dll", "DES_string_to_key")
Interceptor.attach(DES_string_to_key, {onLeave: function (args) {send("DES_string_to_key");}});

var DES_xcbc_encrypt = Module.findExportByName("libcrypto.dll", "DES_xcbc_encrypt")
Interceptor.attach(DES_xcbc_encrypt, {onLeave: function (args) {send("DES_xcbc_encrypt");}});

var DH_OpenSSL = Module.findExportByName("libcrypto.dll", "DH_OpenSSL")
Interceptor.attach(DH_OpenSSL, {onLeave: function (args) {send("DH_OpenSSL");}});

var DH_bits = Module.findExportByName("libcrypto.dll", "DH_bits")
Interceptor.attach(DH_bits, {onLeave: function (args) {send("DH_bits");}});

var DH_check = Module.findExportByName("libcrypto.dll", "DH_check")
Interceptor.attach(DH_check, {onLeave: function (args) {send("DH_check");}});

var DH_check_pub_key = Module.findExportByName("libcrypto.dll", "DH_check_pub_key")
Interceptor.attach(DH_check_pub_key, {onLeave: function (args) {send("DH_check_pub_key");}});

var DH_clear_flags = Module.findExportByName("libcrypto.dll", "DH_clear_flags")
Interceptor.attach(DH_clear_flags, {onLeave: function (args) {send("DH_clear_flags");}});

var DH_compute_key = Module.findExportByName("libcrypto.dll", "DH_compute_key")
Interceptor.attach(DH_compute_key, {onLeave: function (args) {send("DH_compute_key");}});

var DH_free = Module.findExportByName("libcrypto.dll", "DH_free")
Interceptor.attach(DH_free, {onLeave: function (args) {send("DH_free");}});

var DH_generate_key = Module.findExportByName("libcrypto.dll", "DH_generate_key")
Interceptor.attach(DH_generate_key, {onLeave: function (args) {send("DH_generate_key");}});

var DH_generate_parameters = Module.findExportByName("libcrypto.dll", "DH_generate_parameters")
Interceptor.attach(DH_generate_parameters, {onLeave: function (args) {send("DH_generate_parameters");}});

var DH_generate_parameters_ex = Module.findExportByName("libcrypto.dll", "DH_generate_parameters_ex")
Interceptor.attach(DH_generate_parameters_ex, {onLeave: function (args) {send("DH_generate_parameters_ex");}});

var DH_get0_engine = Module.findExportByName("libcrypto.dll", "DH_get0_engine")
Interceptor.attach(DH_get0_engine, {onLeave: function (args) {send("DH_get0_engine");}});

var DH_get0_key = Module.findExportByName("libcrypto.dll", "DH_get0_key")
Interceptor.attach(DH_get0_key, {onLeave: function (args) {send("DH_get0_key");}});

var DH_get0_pqg = Module.findExportByName("libcrypto.dll", "DH_get0_pqg")
Interceptor.attach(DH_get0_pqg, {onLeave: function (args) {send("DH_get0_pqg");}});

var DH_get_default_method = Module.findExportByName("libcrypto.dll", "DH_get_default_method")
Interceptor.attach(DH_get_default_method, {onLeave: function (args) {send("DH_get_default_method");}});

var DH_get_ex_data = Module.findExportByName("libcrypto.dll", "DH_get_ex_data")
Interceptor.attach(DH_get_ex_data, {onLeave: function (args) {send("DH_get_ex_data");}});

var DH_get_ex_new_index = Module.findExportByName("libcrypto.dll", "DH_get_ex_new_index")
Interceptor.attach(DH_get_ex_new_index, {onLeave: function (args) {send("DH_get_ex_new_index");}});

var DH_new = Module.findExportByName("libcrypto.dll", "DH_new")
Interceptor.attach(DH_new, {onLeave: function (args) {send("DH_new");}});

var DH_new_method = Module.findExportByName("libcrypto.dll", "DH_new_method")
Interceptor.attach(DH_new_method, {onLeave: function (args) {send("DH_new_method");}});

var DH_set0_key = Module.findExportByName("libcrypto.dll", "DH_set0_key")
Interceptor.attach(DH_set0_key, {onLeave: function (args) {send("DH_set0_key");}});

var DH_set0_pqg = Module.findExportByName("libcrypto.dll", "DH_set0_pqg")
Interceptor.attach(DH_set0_pqg, {onLeave: function (args) {send("DH_set0_pqg");}});

var DH_set_default_method = Module.findExportByName("libcrypto.dll", "DH_set_default_method")
Interceptor.attach(DH_set_default_method, {onLeave: function (args) {send("DH_set_default_method");}});

var DH_set_ex_data = Module.findExportByName("libcrypto.dll", "DH_set_ex_data")
Interceptor.attach(DH_set_ex_data, {onLeave: function (args) {send("DH_set_ex_data");}});

var DH_set_flags = Module.findExportByName("libcrypto.dll", "DH_set_flags")
Interceptor.attach(DH_set_flags, {onLeave: function (args) {send("DH_set_flags");}});

var DH_set_length = Module.findExportByName("libcrypto.dll", "DH_set_length")
Interceptor.attach(DH_set_length, {onLeave: function (args) {send("DH_set_length");}});

var DH_set_method = Module.findExportByName("libcrypto.dll", "DH_set_method")
Interceptor.attach(DH_set_method, {onLeave: function (args) {send("DH_set_method");}});

var DH_size = Module.findExportByName("libcrypto.dll", "DH_size")
Interceptor.attach(DH_size, {onLeave: function (args) {send("DH_size");}});

var DH_test_flags = Module.findExportByName("libcrypto.dll", "DH_test_flags")
Interceptor.attach(DH_test_flags, {onLeave: function (args) {send("DH_test_flags");}});

var DH_up_ref = Module.findExportByName("libcrypto.dll", "DH_up_ref")
Interceptor.attach(DH_up_ref, {onLeave: function (args) {send("DH_up_ref");}});

var DHparams_dup = Module.findExportByName("libcrypto.dll", "DHparams_dup")
Interceptor.attach(DHparams_dup, {onLeave: function (args) {send("DHparams_dup");}});

var DHparams_it = Module.findExportByName("libcrypto.dll", "DHparams_it")
Interceptor.attach(DHparams_it, {onLeave: function (args) {send("DHparams_it");}});

var DHparams_print = Module.findExportByName("libcrypto.dll", "DHparams_print")
Interceptor.attach(DHparams_print, {onLeave: function (args) {send("DHparams_print");}});

var DHparams_print_fp = Module.findExportByName("libcrypto.dll", "DHparams_print_fp")
Interceptor.attach(DHparams_print_fp, {onLeave: function (args) {send("DHparams_print_fp");}});

var DIRECTORYSTRING_free = Module.findExportByName("libcrypto.dll", "DIRECTORYSTRING_free")
Interceptor.attach(DIRECTORYSTRING_free, {onLeave: function (args) {send("DIRECTORYSTRING_free");}});

var DIRECTORYSTRING_it = Module.findExportByName("libcrypto.dll", "DIRECTORYSTRING_it")
Interceptor.attach(DIRECTORYSTRING_it, {onLeave: function (args) {send("DIRECTORYSTRING_it");}});

var DIRECTORYSTRING_new = Module.findExportByName("libcrypto.dll", "DIRECTORYSTRING_new")
Interceptor.attach(DIRECTORYSTRING_new, {onLeave: function (args) {send("DIRECTORYSTRING_new");}});

var DISPLAYTEXT_free = Module.findExportByName("libcrypto.dll", "DISPLAYTEXT_free")
Interceptor.attach(DISPLAYTEXT_free, {onLeave: function (args) {send("DISPLAYTEXT_free");}});

var DISPLAYTEXT_it = Module.findExportByName("libcrypto.dll", "DISPLAYTEXT_it")
Interceptor.attach(DISPLAYTEXT_it, {onLeave: function (args) {send("DISPLAYTEXT_it");}});

var DISPLAYTEXT_new = Module.findExportByName("libcrypto.dll", "DISPLAYTEXT_new")
Interceptor.attach(DISPLAYTEXT_new, {onLeave: function (args) {send("DISPLAYTEXT_new");}});

var DIST_POINT_NAME_free = Module.findExportByName("libcrypto.dll", "DIST_POINT_NAME_free")
Interceptor.attach(DIST_POINT_NAME_free, {onLeave: function (args) {send("DIST_POINT_NAME_free");}});

var DIST_POINT_NAME_it = Module.findExportByName("libcrypto.dll", "DIST_POINT_NAME_it")
Interceptor.attach(DIST_POINT_NAME_it, {onLeave: function (args) {send("DIST_POINT_NAME_it");}});

var DIST_POINT_NAME_new = Module.findExportByName("libcrypto.dll", "DIST_POINT_NAME_new")
Interceptor.attach(DIST_POINT_NAME_new, {onLeave: function (args) {send("DIST_POINT_NAME_new");}});

var DIST_POINT_free = Module.findExportByName("libcrypto.dll", "DIST_POINT_free")
Interceptor.attach(DIST_POINT_free, {onLeave: function (args) {send("DIST_POINT_free");}});

var DIST_POINT_it = Module.findExportByName("libcrypto.dll", "DIST_POINT_it")
Interceptor.attach(DIST_POINT_it, {onLeave: function (args) {send("DIST_POINT_it");}});

var DIST_POINT_new = Module.findExportByName("libcrypto.dll", "DIST_POINT_new")
Interceptor.attach(DIST_POINT_new, {onLeave: function (args) {send("DIST_POINT_new");}});

var DIST_POINT_set_dpname = Module.findExportByName("libcrypto.dll", "DIST_POINT_set_dpname")
Interceptor.attach(DIST_POINT_set_dpname, {onLeave: function (args) {send("DIST_POINT_set_dpname");}});

var DSAPrivateKey_it = Module.findExportByName("libcrypto.dll", "DSAPrivateKey_it")
Interceptor.attach(DSAPrivateKey_it, {onLeave: function (args) {send("DSAPrivateKey_it");}});

var DSAPublicKey_it = Module.findExportByName("libcrypto.dll", "DSAPublicKey_it")
Interceptor.attach(DSAPublicKey_it, {onLeave: function (args) {send("DSAPublicKey_it");}});

var DSA_OpenSSL = Module.findExportByName("libcrypto.dll", "DSA_OpenSSL")
Interceptor.attach(DSA_OpenSSL, {onLeave: function (args) {send("DSA_OpenSSL");}});

var DSA_SIG_free = Module.findExportByName("libcrypto.dll", "DSA_SIG_free")
Interceptor.attach(DSA_SIG_free, {onLeave: function (args) {send("DSA_SIG_free");}});

var DSA_SIG_get0 = Module.findExportByName("libcrypto.dll", "DSA_SIG_get0")
Interceptor.attach(DSA_SIG_get0, {onLeave: function (args) {send("DSA_SIG_get0");}});

var DSA_SIG_it = Module.findExportByName("libcrypto.dll", "DSA_SIG_it")
Interceptor.attach(DSA_SIG_it, {onLeave: function (args) {send("DSA_SIG_it");}});

var DSA_SIG_new = Module.findExportByName("libcrypto.dll", "DSA_SIG_new")
Interceptor.attach(DSA_SIG_new, {onLeave: function (args) {send("DSA_SIG_new");}});

var DSA_SIG_set0 = Module.findExportByName("libcrypto.dll", "DSA_SIG_set0")
Interceptor.attach(DSA_SIG_set0, {onLeave: function (args) {send("DSA_SIG_set0");}});

var DSA_clear_flags = Module.findExportByName("libcrypto.dll", "DSA_clear_flags")
Interceptor.attach(DSA_clear_flags, {onLeave: function (args) {send("DSA_clear_flags");}});

var DSA_do_sign = Module.findExportByName("libcrypto.dll", "DSA_do_sign")
Interceptor.attach(DSA_do_sign, {onLeave: function (args) {send("DSA_do_sign");}});

var DSA_do_verify = Module.findExportByName("libcrypto.dll", "DSA_do_verify")
Interceptor.attach(DSA_do_verify, {onLeave: function (args) {send("DSA_do_verify");}});

var DSA_dup_DH = Module.findExportByName("libcrypto.dll", "DSA_dup_DH")
Interceptor.attach(DSA_dup_DH, {onLeave: function (args) {send("DSA_dup_DH");}});

var DSA_free = Module.findExportByName("libcrypto.dll", "DSA_free")
Interceptor.attach(DSA_free, {onLeave: function (args) {send("DSA_free");}});

var DSA_generate_key = Module.findExportByName("libcrypto.dll", "DSA_generate_key")
Interceptor.attach(DSA_generate_key, {onLeave: function (args) {send("DSA_generate_key");}});

var DSA_generate_parameters = Module.findExportByName("libcrypto.dll", "DSA_generate_parameters")
Interceptor.attach(DSA_generate_parameters, {onLeave: function (args) {send("DSA_generate_parameters");}});

var DSA_generate_parameters_ex = Module.findExportByName("libcrypto.dll", "DSA_generate_parameters_ex")
Interceptor.attach(DSA_generate_parameters_ex, {onLeave: function (args) {send("DSA_generate_parameters_ex");}});

var DSA_get0_engine = Module.findExportByName("libcrypto.dll", "DSA_get0_engine")
Interceptor.attach(DSA_get0_engine, {onLeave: function (args) {send("DSA_get0_engine");}});

var DSA_get0_key = Module.findExportByName("libcrypto.dll", "DSA_get0_key")
Interceptor.attach(DSA_get0_key, {onLeave: function (args) {send("DSA_get0_key");}});

var DSA_get0_pqg = Module.findExportByName("libcrypto.dll", "DSA_get0_pqg")
Interceptor.attach(DSA_get0_pqg, {onLeave: function (args) {send("DSA_get0_pqg");}});

var DSA_get_default_method = Module.findExportByName("libcrypto.dll", "DSA_get_default_method")
Interceptor.attach(DSA_get_default_method, {onLeave: function (args) {send("DSA_get_default_method");}});

var DSA_get_ex_data = Module.findExportByName("libcrypto.dll", "DSA_get_ex_data")
Interceptor.attach(DSA_get_ex_data, {onLeave: function (args) {send("DSA_get_ex_data");}});

var DSA_get_ex_new_index = Module.findExportByName("libcrypto.dll", "DSA_get_ex_new_index")
Interceptor.attach(DSA_get_ex_new_index, {onLeave: function (args) {send("DSA_get_ex_new_index");}});

var DSA_meth_dup = Module.findExportByName("libcrypto.dll", "DSA_meth_dup")
Interceptor.attach(DSA_meth_dup, {onLeave: function (args) {send("DSA_meth_dup");}});

var DSA_meth_free = Module.findExportByName("libcrypto.dll", "DSA_meth_free")
Interceptor.attach(DSA_meth_free, {onLeave: function (args) {send("DSA_meth_free");}});

var DSA_meth_new = Module.findExportByName("libcrypto.dll", "DSA_meth_new")
Interceptor.attach(DSA_meth_new, {onLeave: function (args) {send("DSA_meth_new");}});

var DSA_meth_set_finish = Module.findExportByName("libcrypto.dll", "DSA_meth_set_finish")
Interceptor.attach(DSA_meth_set_finish, {onLeave: function (args) {send("DSA_meth_set_finish");}});

var DSA_meth_set_sign = Module.findExportByName("libcrypto.dll", "DSA_meth_set_sign")
Interceptor.attach(DSA_meth_set_sign, {onLeave: function (args) {send("DSA_meth_set_sign");}});

var DSA_new = Module.findExportByName("libcrypto.dll", "DSA_new")
Interceptor.attach(DSA_new, {onLeave: function (args) {send("DSA_new");}});

var DSA_new_method = Module.findExportByName("libcrypto.dll", "DSA_new_method")
Interceptor.attach(DSA_new_method, {onLeave: function (args) {send("DSA_new_method");}});

var DSA_print = Module.findExportByName("libcrypto.dll", "DSA_print")
Interceptor.attach(DSA_print, {onLeave: function (args) {send("DSA_print");}});

var DSA_print_fp = Module.findExportByName("libcrypto.dll", "DSA_print_fp")
Interceptor.attach(DSA_print_fp, {onLeave: function (args) {send("DSA_print_fp");}});

var DSA_set0_key = Module.findExportByName("libcrypto.dll", "DSA_set0_key")
Interceptor.attach(DSA_set0_key, {onLeave: function (args) {send("DSA_set0_key");}});

var DSA_set0_pqg = Module.findExportByName("libcrypto.dll", "DSA_set0_pqg")
Interceptor.attach(DSA_set0_pqg, {onLeave: function (args) {send("DSA_set0_pqg");}});

var DSA_set_default_method = Module.findExportByName("libcrypto.dll", "DSA_set_default_method")
Interceptor.attach(DSA_set_default_method, {onLeave: function (args) {send("DSA_set_default_method");}});

var DSA_set_ex_data = Module.findExportByName("libcrypto.dll", "DSA_set_ex_data")
Interceptor.attach(DSA_set_ex_data, {onLeave: function (args) {send("DSA_set_ex_data");}});

var DSA_set_flags = Module.findExportByName("libcrypto.dll", "DSA_set_flags")
Interceptor.attach(DSA_set_flags, {onLeave: function (args) {send("DSA_set_flags");}});

var DSA_set_method = Module.findExportByName("libcrypto.dll", "DSA_set_method")
Interceptor.attach(DSA_set_method, {onLeave: function (args) {send("DSA_set_method");}});

var DSA_sign = Module.findExportByName("libcrypto.dll", "DSA_sign")
Interceptor.attach(DSA_sign, {onLeave: function (args) {send("DSA_sign");}});

var DSA_sign_setup = Module.findExportByName("libcrypto.dll", "DSA_sign_setup")
Interceptor.attach(DSA_sign_setup, {onLeave: function (args) {send("DSA_sign_setup");}});

var DSA_size = Module.findExportByName("libcrypto.dll", "DSA_size")
Interceptor.attach(DSA_size, {onLeave: function (args) {send("DSA_size");}});

var DSA_test_flags = Module.findExportByName("libcrypto.dll", "DSA_test_flags")
Interceptor.attach(DSA_test_flags, {onLeave: function (args) {send("DSA_test_flags");}});

var DSA_up_ref = Module.findExportByName("libcrypto.dll", "DSA_up_ref")
Interceptor.attach(DSA_up_ref, {onLeave: function (args) {send("DSA_up_ref");}});

var DSA_verify = Module.findExportByName("libcrypto.dll", "DSA_verify")
Interceptor.attach(DSA_verify, {onLeave: function (args) {send("DSA_verify");}});

var DSAparams_dup = Module.findExportByName("libcrypto.dll", "DSAparams_dup")
Interceptor.attach(DSAparams_dup, {onLeave: function (args) {send("DSAparams_dup");}});

var DSAparams_it = Module.findExportByName("libcrypto.dll", "DSAparams_it")
Interceptor.attach(DSAparams_it, {onLeave: function (args) {send("DSAparams_it");}});

var DSAparams_print = Module.findExportByName("libcrypto.dll", "DSAparams_print")
Interceptor.attach(DSAparams_print, {onLeave: function (args) {send("DSAparams_print");}});

var DSAparams_print_fp = Module.findExportByName("libcrypto.dll", "DSAparams_print_fp")
Interceptor.attach(DSAparams_print_fp, {onLeave: function (args) {send("DSAparams_print_fp");}});

var DSO_METHOD_dlfcn = Module.findExportByName("libcrypto.dll", "DSO_METHOD_dlfcn")
Interceptor.attach(DSO_METHOD_dlfcn, {onLeave: function (args) {send("DSO_METHOD_dlfcn");}});

var DSO_METHOD_null = Module.findExportByName("libcrypto.dll", "DSO_METHOD_null")
Interceptor.attach(DSO_METHOD_null, {onLeave: function (args) {send("DSO_METHOD_null");}});

var DSO_METHOD_openssl = Module.findExportByName("libcrypto.dll", "DSO_METHOD_openssl")
Interceptor.attach(DSO_METHOD_openssl, {onLeave: function (args) {send("DSO_METHOD_openssl");}});

var DSO_bind_func = Module.findExportByName("libcrypto.dll", "DSO_bind_func")
Interceptor.attach(DSO_bind_func, {onLeave: function (args) {send("DSO_bind_func");}});

var DSO_bind_var = Module.findExportByName("libcrypto.dll", "DSO_bind_var")
Interceptor.attach(DSO_bind_var, {onLeave: function (args) {send("DSO_bind_var");}});

var DSO_convert_filename = Module.findExportByName("libcrypto.dll", "DSO_convert_filename")
Interceptor.attach(DSO_convert_filename, {onLeave: function (args) {send("DSO_convert_filename");}});

var DSO_ctrl = Module.findExportByName("libcrypto.dll", "DSO_ctrl")
Interceptor.attach(DSO_ctrl, {onLeave: function (args) {send("DSO_ctrl");}});

var DSO_flags = Module.findExportByName("libcrypto.dll", "DSO_flags")
Interceptor.attach(DSO_flags, {onLeave: function (args) {send("DSO_flags");}});

var DSO_free = Module.findExportByName("libcrypto.dll", "DSO_free")
Interceptor.attach(DSO_free, {onLeave: function (args) {send("DSO_free");}});

var DSO_get_default_method = Module.findExportByName("libcrypto.dll", "DSO_get_default_method")
Interceptor.attach(DSO_get_default_method, {onLeave: function (args) {send("DSO_get_default_method");}});

var DSO_get_filename = Module.findExportByName("libcrypto.dll", "DSO_get_filename")
Interceptor.attach(DSO_get_filename, {onLeave: function (args) {send("DSO_get_filename");}});

var DSO_get_loaded_filename = Module.findExportByName("libcrypto.dll", "DSO_get_loaded_filename")
Interceptor.attach(DSO_get_loaded_filename, {onLeave: function (args) {send("DSO_get_loaded_filename");}});

var DSO_get_method = Module.findExportByName("libcrypto.dll", "DSO_get_method")
Interceptor.attach(DSO_get_method, {onLeave: function (args) {send("DSO_get_method");}});

var DSO_global_lookup = Module.findExportByName("libcrypto.dll", "DSO_global_lookup")
Interceptor.attach(DSO_global_lookup, {onLeave: function (args) {send("DSO_global_lookup");}});

var DSO_load = Module.findExportByName("libcrypto.dll", "DSO_load")
Interceptor.attach(DSO_load, {onLeave: function (args) {send("DSO_load");}});

var DSO_merge = Module.findExportByName("libcrypto.dll", "DSO_merge")
Interceptor.attach(DSO_merge, {onLeave: function (args) {send("DSO_merge");}});

var DSO_new = Module.findExportByName("libcrypto.dll", "DSO_new")
Interceptor.attach(DSO_new, {onLeave: function (args) {send("DSO_new");}});

var DSO_new_method = Module.findExportByName("libcrypto.dll", "DSO_new_method")
Interceptor.attach(DSO_new_method, {onLeave: function (args) {send("DSO_new_method");}});

var DSO_pathbyaddr = Module.findExportByName("libcrypto.dll", "DSO_pathbyaddr")
Interceptor.attach(DSO_pathbyaddr, {onLeave: function (args) {send("DSO_pathbyaddr");}});

var DSO_set_default_method = Module.findExportByName("libcrypto.dll", "DSO_set_default_method")
Interceptor.attach(DSO_set_default_method, {onLeave: function (args) {send("DSO_set_default_method");}});

var DSO_set_filename = Module.findExportByName("libcrypto.dll", "DSO_set_filename")
Interceptor.attach(DSO_set_filename, {onLeave: function (args) {send("DSO_set_filename");}});

var DSO_set_method = Module.findExportByName("libcrypto.dll", "DSO_set_method")
Interceptor.attach(DSO_set_method, {onLeave: function (args) {send("DSO_set_method");}});

var DSO_set_name_converter = Module.findExportByName("libcrypto.dll", "DSO_set_name_converter")
Interceptor.attach(DSO_set_name_converter, {onLeave: function (args) {send("DSO_set_name_converter");}});

var DSO_up_ref = Module.findExportByName("libcrypto.dll", "DSO_up_ref")
Interceptor.attach(DSO_up_ref, {onLeave: function (args) {send("DSO_up_ref");}});

var ECDH_OpenSSL = Module.findExportByName("libcrypto.dll", "ECDH_OpenSSL")
Interceptor.attach(ECDH_OpenSSL, {onLeave: function (args) {send("ECDH_OpenSSL");}});

var ECDH_compute_key = Module.findExportByName("libcrypto.dll", "ECDH_compute_key")
Interceptor.attach(ECDH_compute_key, {onLeave: function (args) {send("ECDH_compute_key");}});

var ECDH_get_default_method = Module.findExportByName("libcrypto.dll", "ECDH_get_default_method")
Interceptor.attach(ECDH_get_default_method, {onLeave: function (args) {send("ECDH_get_default_method");}});

var ECDH_get_ex_data = Module.findExportByName("libcrypto.dll", "ECDH_get_ex_data")
Interceptor.attach(ECDH_get_ex_data, {onLeave: function (args) {send("ECDH_get_ex_data");}});

var ECDH_get_ex_new_index = Module.findExportByName("libcrypto.dll", "ECDH_get_ex_new_index")
Interceptor.attach(ECDH_get_ex_new_index, {onLeave: function (args) {send("ECDH_get_ex_new_index");}});

var ECDH_set_default_method = Module.findExportByName("libcrypto.dll", "ECDH_set_default_method")
Interceptor.attach(ECDH_set_default_method, {onLeave: function (args) {send("ECDH_set_default_method");}});

var ECDH_set_ex_data = Module.findExportByName("libcrypto.dll", "ECDH_set_ex_data")
Interceptor.attach(ECDH_set_ex_data, {onLeave: function (args) {send("ECDH_set_ex_data");}});

var ECDH_set_method = Module.findExportByName("libcrypto.dll", "ECDH_set_method")
Interceptor.attach(ECDH_set_method, {onLeave: function (args) {send("ECDH_set_method");}});

var ECDH_size = Module.findExportByName("libcrypto.dll", "ECDH_size")
Interceptor.attach(ECDH_size, {onLeave: function (args) {send("ECDH_size");}});

var ECDSA_OpenSSL = Module.findExportByName("libcrypto.dll", "ECDSA_OpenSSL")
Interceptor.attach(ECDSA_OpenSSL, {onLeave: function (args) {send("ECDSA_OpenSSL");}});

var ECDSA_SIG_free = Module.findExportByName("libcrypto.dll", "ECDSA_SIG_free")
Interceptor.attach(ECDSA_SIG_free, {onLeave: function (args) {send("ECDSA_SIG_free");}});

var ECDSA_SIG_get0 = Module.findExportByName("libcrypto.dll", "ECDSA_SIG_get0")
Interceptor.attach(ECDSA_SIG_get0, {onLeave: function (args) {send("ECDSA_SIG_get0");}});

var ECDSA_SIG_it = Module.findExportByName("libcrypto.dll", "ECDSA_SIG_it")
Interceptor.attach(ECDSA_SIG_it, {onLeave: function (args) {send("ECDSA_SIG_it");}});

var ECDSA_SIG_new = Module.findExportByName("libcrypto.dll", "ECDSA_SIG_new")
Interceptor.attach(ECDSA_SIG_new, {onLeave: function (args) {send("ECDSA_SIG_new");}});

var ECDSA_SIG_set0 = Module.findExportByName("libcrypto.dll", "ECDSA_SIG_set0")
Interceptor.attach(ECDSA_SIG_set0, {onLeave: function (args) {send("ECDSA_SIG_set0");}});

var ECDSA_do_sign = Module.findExportByName("libcrypto.dll", "ECDSA_do_sign")
Interceptor.attach(ECDSA_do_sign, {onLeave: function (args) {send("ECDSA_do_sign");}});

var ECDSA_do_sign_ex = Module.findExportByName("libcrypto.dll", "ECDSA_do_sign_ex")
Interceptor.attach(ECDSA_do_sign_ex, {onLeave: function (args) {send("ECDSA_do_sign_ex");}});

var ECDSA_do_verify = Module.findExportByName("libcrypto.dll", "ECDSA_do_verify")
Interceptor.attach(ECDSA_do_verify, {onLeave: function (args) {send("ECDSA_do_verify");}});

var ECDSA_get_default_method = Module.findExportByName("libcrypto.dll", "ECDSA_get_default_method")
Interceptor.attach(ECDSA_get_default_method, {onLeave: function (args) {send("ECDSA_get_default_method");}});

var ECDSA_get_ex_data = Module.findExportByName("libcrypto.dll", "ECDSA_get_ex_data")
Interceptor.attach(ECDSA_get_ex_data, {onLeave: function (args) {send("ECDSA_get_ex_data");}});

var ECDSA_get_ex_new_index = Module.findExportByName("libcrypto.dll", "ECDSA_get_ex_new_index")
Interceptor.attach(ECDSA_get_ex_new_index, {onLeave: function (args) {send("ECDSA_get_ex_new_index");}});

var ECDSA_set_default_method = Module.findExportByName("libcrypto.dll", "ECDSA_set_default_method")
Interceptor.attach(ECDSA_set_default_method, {onLeave: function (args) {send("ECDSA_set_default_method");}});

var ECDSA_set_ex_data = Module.findExportByName("libcrypto.dll", "ECDSA_set_ex_data")
Interceptor.attach(ECDSA_set_ex_data, {onLeave: function (args) {send("ECDSA_set_ex_data");}});

var ECDSA_set_method = Module.findExportByName("libcrypto.dll", "ECDSA_set_method")
Interceptor.attach(ECDSA_set_method, {onLeave: function (args) {send("ECDSA_set_method");}});

var ECDSA_sign = Module.findExportByName("libcrypto.dll", "ECDSA_sign")
Interceptor.attach(ECDSA_sign, {onLeave: function (args) {send("ECDSA_sign");}});

var ECDSA_sign_ex = Module.findExportByName("libcrypto.dll", "ECDSA_sign_ex")
Interceptor.attach(ECDSA_sign_ex, {onLeave: function (args) {send("ECDSA_sign_ex");}});

var ECDSA_sign_setup = Module.findExportByName("libcrypto.dll", "ECDSA_sign_setup")
Interceptor.attach(ECDSA_sign_setup, {onLeave: function (args) {send("ECDSA_sign_setup");}});

var ECDSA_size = Module.findExportByName("libcrypto.dll", "ECDSA_size")
Interceptor.attach(ECDSA_size, {onLeave: function (args) {send("ECDSA_size");}});

var ECDSA_verify = Module.findExportByName("libcrypto.dll", "ECDSA_verify")
Interceptor.attach(ECDSA_verify, {onLeave: function (args) {send("ECDSA_verify");}});

var ECPARAMETERS_free = Module.findExportByName("libcrypto.dll", "ECPARAMETERS_free")
Interceptor.attach(ECPARAMETERS_free, {onLeave: function (args) {send("ECPARAMETERS_free");}});

var ECPARAMETERS_it = Module.findExportByName("libcrypto.dll", "ECPARAMETERS_it")
Interceptor.attach(ECPARAMETERS_it, {onLeave: function (args) {send("ECPARAMETERS_it");}});

var ECPARAMETERS_new = Module.findExportByName("libcrypto.dll", "ECPARAMETERS_new")
Interceptor.attach(ECPARAMETERS_new, {onLeave: function (args) {send("ECPARAMETERS_new");}});

var ECPKPARAMETERS_free = Module.findExportByName("libcrypto.dll", "ECPKPARAMETERS_free")
Interceptor.attach(ECPKPARAMETERS_free, {onLeave: function (args) {send("ECPKPARAMETERS_free");}});

var ECPKPARAMETERS_it = Module.findExportByName("libcrypto.dll", "ECPKPARAMETERS_it")
Interceptor.attach(ECPKPARAMETERS_it, {onLeave: function (args) {send("ECPKPARAMETERS_it");}});

var ECPKPARAMETERS_new = Module.findExportByName("libcrypto.dll", "ECPKPARAMETERS_new")
Interceptor.attach(ECPKPARAMETERS_new, {onLeave: function (args) {send("ECPKPARAMETERS_new");}});

var ECPKParameters_print = Module.findExportByName("libcrypto.dll", "ECPKParameters_print")
Interceptor.attach(ECPKParameters_print, {onLeave: function (args) {send("ECPKParameters_print");}});

var ECPKParameters_print_fp = Module.findExportByName("libcrypto.dll", "ECPKParameters_print_fp")
Interceptor.attach(ECPKParameters_print_fp, {onLeave: function (args) {send("ECPKParameters_print_fp");}});

var ECParameters_dup = Module.findExportByName("libcrypto.dll", "ECParameters_dup")
Interceptor.attach(ECParameters_dup, {onLeave: function (args) {send("ECParameters_dup");}});

var ECParameters_print = Module.findExportByName("libcrypto.dll", "ECParameters_print")
Interceptor.attach(ECParameters_print, {onLeave: function (args) {send("ECParameters_print");}});

var ECParameters_print_fp = Module.findExportByName("libcrypto.dll", "ECParameters_print_fp")
Interceptor.attach(ECParameters_print_fp, {onLeave: function (args) {send("ECParameters_print_fp");}});

var EC_GF2m_simple_method = Module.findExportByName("libcrypto.dll", "EC_GF2m_simple_method")
Interceptor.attach(EC_GF2m_simple_method, {onLeave: function (args) {send("EC_GF2m_simple_method");}});

var EC_GFp_mont_method = Module.findExportByName("libcrypto.dll", "EC_GFp_mont_method")
Interceptor.attach(EC_GFp_mont_method, {onLeave: function (args) {send("EC_GFp_mont_method");}});

var EC_GFp_nist_method = Module.findExportByName("libcrypto.dll", "EC_GFp_nist_method")
Interceptor.attach(EC_GFp_nist_method, {onLeave: function (args) {send("EC_GFp_nist_method");}});

var EC_GFp_simple_method = Module.findExportByName("libcrypto.dll", "EC_GFp_simple_method")
Interceptor.attach(EC_GFp_simple_method, {onLeave: function (args) {send("EC_GFp_simple_method");}});

var EC_GROUP_check = Module.findExportByName("libcrypto.dll", "EC_GROUP_check")
Interceptor.attach(EC_GROUP_check, {onLeave: function (args) {send("EC_GROUP_check");}});

var EC_GROUP_check_discriminant = Module.findExportByName("libcrypto.dll", "EC_GROUP_check_discriminant")
Interceptor.attach(EC_GROUP_check_discriminant, {onLeave: function (args) {send("EC_GROUP_check_discriminant");}});

var EC_GROUP_clear_free = Module.findExportByName("libcrypto.dll", "EC_GROUP_clear_free")
Interceptor.attach(EC_GROUP_clear_free, {onLeave: function (args) {send("EC_GROUP_clear_free");}});

var EC_GROUP_cmp = Module.findExportByName("libcrypto.dll", "EC_GROUP_cmp")
Interceptor.attach(EC_GROUP_cmp, {onLeave: function (args) {send("EC_GROUP_cmp");}});

var EC_GROUP_copy = Module.findExportByName("libcrypto.dll", "EC_GROUP_copy")
Interceptor.attach(EC_GROUP_copy, {onLeave: function (args) {send("EC_GROUP_copy");}});

var EC_GROUP_dup = Module.findExportByName("libcrypto.dll", "EC_GROUP_dup")
Interceptor.attach(EC_GROUP_dup, {onLeave: function (args) {send("EC_GROUP_dup");}});

var EC_GROUP_free = Module.findExportByName("libcrypto.dll", "EC_GROUP_free")
Interceptor.attach(EC_GROUP_free, {onLeave: function (args) {send("EC_GROUP_free");}});

var EC_GROUP_get0_generator = Module.findExportByName("libcrypto.dll", "EC_GROUP_get0_generator")
Interceptor.attach(EC_GROUP_get0_generator, {onLeave: function (args) {send("EC_GROUP_get0_generator");}});

var EC_GROUP_get0_seed = Module.findExportByName("libcrypto.dll", "EC_GROUP_get0_seed")
Interceptor.attach(EC_GROUP_get0_seed, {onLeave: function (args) {send("EC_GROUP_get0_seed");}});

var EC_GROUP_get_asn1_flag = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_asn1_flag")
Interceptor.attach(EC_GROUP_get_asn1_flag, {onLeave: function (args) {send("EC_GROUP_get_asn1_flag");}});

var EC_GROUP_get_basis_type = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_basis_type")
Interceptor.attach(EC_GROUP_get_basis_type, {onLeave: function (args) {send("EC_GROUP_get_basis_type");}});

var EC_GROUP_get_cofactor = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_cofactor")
Interceptor.attach(EC_GROUP_get_cofactor, {onLeave: function (args) {send("EC_GROUP_get_cofactor");}});

var EC_GROUP_get_curve = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_curve")
Interceptor.attach(EC_GROUP_get_curve, {onLeave: function (args) {send("EC_GROUP_get_curve");}});

var EC_GROUP_get_curve_GF2m = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_curve_GF2m")
Interceptor.attach(EC_GROUP_get_curve_GF2m, {onLeave: function (args) {send("EC_GROUP_get_curve_GF2m");}});

var EC_GROUP_get_curve_GFp = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_curve_GFp")
Interceptor.attach(EC_GROUP_get_curve_GFp, {onLeave: function (args) {send("EC_GROUP_get_curve_GFp");}});

var EC_GROUP_get_curve_name = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_curve_name")
Interceptor.attach(EC_GROUP_get_curve_name, {onLeave: function (args) {send("EC_GROUP_get_curve_name");}});

var EC_GROUP_get_degree = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_degree")
Interceptor.attach(EC_GROUP_get_degree, {onLeave: function (args) {send("EC_GROUP_get_degree");}});

var EC_GROUP_get_order = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_order")
Interceptor.attach(EC_GROUP_get_order, {onLeave: function (args) {send("EC_GROUP_get_order");}});

var EC_GROUP_get_pentanomial_basis = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_pentanomial_basis")
Interceptor.attach(EC_GROUP_get_pentanomial_basis, {onLeave: function (args) {send("EC_GROUP_get_pentanomial_basis");}});

var EC_GROUP_get_point_conversion_form = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_point_conversion_form")
Interceptor.attach(EC_GROUP_get_point_conversion_form, {onLeave: function (args) {send("EC_GROUP_get_point_conversion_form");}});

var EC_GROUP_get_seed_len = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_seed_len")
Interceptor.attach(EC_GROUP_get_seed_len, {onLeave: function (args) {send("EC_GROUP_get_seed_len");}});

var EC_GROUP_get_trinomial_basis = Module.findExportByName("libcrypto.dll", "EC_GROUP_get_trinomial_basis")
Interceptor.attach(EC_GROUP_get_trinomial_basis, {onLeave: function (args) {send("EC_GROUP_get_trinomial_basis");}});

var EC_GROUP_have_precompute_mult = Module.findExportByName("libcrypto.dll", "EC_GROUP_have_precompute_mult")
Interceptor.attach(EC_GROUP_have_precompute_mult, {onLeave: function (args) {send("EC_GROUP_have_precompute_mult");}});

var EC_GROUP_method_of = Module.findExportByName("libcrypto.dll", "EC_GROUP_method_of")
Interceptor.attach(EC_GROUP_method_of, {onLeave: function (args) {send("EC_GROUP_method_of");}});

var EC_GROUP_new = Module.findExportByName("libcrypto.dll", "EC_GROUP_new")
Interceptor.attach(EC_GROUP_new, {onLeave: function (args) {send("EC_GROUP_new");}});

var EC_GROUP_new_by_curve_name = Module.findExportByName("libcrypto.dll", "EC_GROUP_new_by_curve_name")
Interceptor.attach(EC_GROUP_new_by_curve_name, {onLeave: function (args) {send("EC_GROUP_new_by_curve_name");}});

var EC_GROUP_new_curve_GF2m = Module.findExportByName("libcrypto.dll", "EC_GROUP_new_curve_GF2m")
Interceptor.attach(EC_GROUP_new_curve_GF2m, {onLeave: function (args) {send("EC_GROUP_new_curve_GF2m");}});

var EC_GROUP_new_curve_GFp = Module.findExportByName("libcrypto.dll", "EC_GROUP_new_curve_GFp")
Interceptor.attach(EC_GROUP_new_curve_GFp, {onLeave: function (args) {send("EC_GROUP_new_curve_GFp");}});

var EC_GROUP_order_bits = Module.findExportByName("libcrypto.dll", "EC_GROUP_order_bits")
Interceptor.attach(EC_GROUP_order_bits, {onLeave: function (args) {send("EC_GROUP_order_bits");}});

var EC_GROUP_precompute_mult = Module.findExportByName("libcrypto.dll", "EC_GROUP_precompute_mult")
Interceptor.attach(EC_GROUP_precompute_mult, {onLeave: function (args) {send("EC_GROUP_precompute_mult");}});

var EC_GROUP_set_asn1_flag = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_asn1_flag")
Interceptor.attach(EC_GROUP_set_asn1_flag, {onLeave: function (args) {send("EC_GROUP_set_asn1_flag");}});

var EC_GROUP_set_curve = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_curve")
Interceptor.attach(EC_GROUP_set_curve, {onLeave: function (args) {send("EC_GROUP_set_curve");}});

var EC_GROUP_set_curve_GF2m = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_curve_GF2m")
Interceptor.attach(EC_GROUP_set_curve_GF2m, {onLeave: function (args) {send("EC_GROUP_set_curve_GF2m");}});

var EC_GROUP_set_curve_GFp = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_curve_GFp")
Interceptor.attach(EC_GROUP_set_curve_GFp, {onLeave: function (args) {send("EC_GROUP_set_curve_GFp");}});

var EC_GROUP_set_curve_name = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_curve_name")
Interceptor.attach(EC_GROUP_set_curve_name, {onLeave: function (args) {send("EC_GROUP_set_curve_name");}});

var EC_GROUP_set_generator = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_generator")
Interceptor.attach(EC_GROUP_set_generator, {onLeave: function (args) {send("EC_GROUP_set_generator");}});

var EC_GROUP_set_point_conversion_form = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_point_conversion_form")
Interceptor.attach(EC_GROUP_set_point_conversion_form, {onLeave: function (args) {send("EC_GROUP_set_point_conversion_form");}});

var EC_GROUP_set_seed = Module.findExportByName("libcrypto.dll", "EC_GROUP_set_seed")
Interceptor.attach(EC_GROUP_set_seed, {onLeave: function (args) {send("EC_GROUP_set_seed");}});

var EC_KEY_METHOD_free = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_free")
Interceptor.attach(EC_KEY_METHOD_free, {onLeave: function (args) {send("EC_KEY_METHOD_free");}});

var EC_KEY_METHOD_get_compute_key = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_get_compute_key")
Interceptor.attach(EC_KEY_METHOD_get_compute_key, {onLeave: function (args) {send("EC_KEY_METHOD_get_compute_key");}});

var EC_KEY_METHOD_get_init = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_get_init")
Interceptor.attach(EC_KEY_METHOD_get_init, {onLeave: function (args) {send("EC_KEY_METHOD_get_init");}});

var EC_KEY_METHOD_get_keygen = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_get_keygen")
Interceptor.attach(EC_KEY_METHOD_get_keygen, {onLeave: function (args) {send("EC_KEY_METHOD_get_keygen");}});

var EC_KEY_METHOD_get_sign = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_get_sign")
Interceptor.attach(EC_KEY_METHOD_get_sign, {onLeave: function (args) {send("EC_KEY_METHOD_get_sign");}});

var EC_KEY_METHOD_get_verify = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_get_verify")
Interceptor.attach(EC_KEY_METHOD_get_verify, {onLeave: function (args) {send("EC_KEY_METHOD_get_verify");}});

var EC_KEY_METHOD_new = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_new")
Interceptor.attach(EC_KEY_METHOD_new, {onLeave: function (args) {send("EC_KEY_METHOD_new");}});

var EC_KEY_METHOD_set_compute_key = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_set_compute_key")
Interceptor.attach(EC_KEY_METHOD_set_compute_key, {onLeave: function (args) {send("EC_KEY_METHOD_set_compute_key");}});

var EC_KEY_METHOD_set_init = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_set_init")
Interceptor.attach(EC_KEY_METHOD_set_init, {onLeave: function (args) {send("EC_KEY_METHOD_set_init");}});

var EC_KEY_METHOD_set_keygen = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_set_keygen")
Interceptor.attach(EC_KEY_METHOD_set_keygen, {onLeave: function (args) {send("EC_KEY_METHOD_set_keygen");}});

var EC_KEY_METHOD_set_sign = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_set_sign")
Interceptor.attach(EC_KEY_METHOD_set_sign, {onLeave: function (args) {send("EC_KEY_METHOD_set_sign");}});

var EC_KEY_METHOD_set_verify = Module.findExportByName("libcrypto.dll", "EC_KEY_METHOD_set_verify")
Interceptor.attach(EC_KEY_METHOD_set_verify, {onLeave: function (args) {send("EC_KEY_METHOD_set_verify");}});

var EC_KEY_OpenSSL = Module.findExportByName("libcrypto.dll", "EC_KEY_OpenSSL")
Interceptor.attach(EC_KEY_OpenSSL, {onLeave: function (args) {send("EC_KEY_OpenSSL");}});

var EC_KEY_check_key = Module.findExportByName("libcrypto.dll", "EC_KEY_check_key")
Interceptor.attach(EC_KEY_check_key, {onLeave: function (args) {send("EC_KEY_check_key");}});

var EC_KEY_clear_flags = Module.findExportByName("libcrypto.dll", "EC_KEY_clear_flags")
Interceptor.attach(EC_KEY_clear_flags, {onLeave: function (args) {send("EC_KEY_clear_flags");}});

var EC_KEY_copy = Module.findExportByName("libcrypto.dll", "EC_KEY_copy")
Interceptor.attach(EC_KEY_copy, {onLeave: function (args) {send("EC_KEY_copy");}});

var EC_KEY_dup = Module.findExportByName("libcrypto.dll", "EC_KEY_dup")
Interceptor.attach(EC_KEY_dup, {onLeave: function (args) {send("EC_KEY_dup");}});

var EC_KEY_free = Module.findExportByName("libcrypto.dll", "EC_KEY_free")
Interceptor.attach(EC_KEY_free, {onLeave: function (args) {send("EC_KEY_free");}});

var EC_KEY_generate_key = Module.findExportByName("libcrypto.dll", "EC_KEY_generate_key")
Interceptor.attach(EC_KEY_generate_key, {onLeave: function (args) {send("EC_KEY_generate_key");}});

var EC_KEY_get0_group = Module.findExportByName("libcrypto.dll", "EC_KEY_get0_group")
Interceptor.attach(EC_KEY_get0_group, {onLeave: function (args) {send("EC_KEY_get0_group");}});

var EC_KEY_get0_private_key = Module.findExportByName("libcrypto.dll", "EC_KEY_get0_private_key")
Interceptor.attach(EC_KEY_get0_private_key, {onLeave: function (args) {send("EC_KEY_get0_private_key");}});

var EC_KEY_get0_public_key = Module.findExportByName("libcrypto.dll", "EC_KEY_get0_public_key")
Interceptor.attach(EC_KEY_get0_public_key, {onLeave: function (args) {send("EC_KEY_get0_public_key");}});

var EC_KEY_get_conv_form = Module.findExportByName("libcrypto.dll", "EC_KEY_get_conv_form")
Interceptor.attach(EC_KEY_get_conv_form, {onLeave: function (args) {send("EC_KEY_get_conv_form");}});

var EC_KEY_get_default_method = Module.findExportByName("libcrypto.dll", "EC_KEY_get_default_method")
Interceptor.attach(EC_KEY_get_default_method, {onLeave: function (args) {send("EC_KEY_get_default_method");}});

var EC_KEY_get_enc_flags = Module.findExportByName("libcrypto.dll", "EC_KEY_get_enc_flags")
Interceptor.attach(EC_KEY_get_enc_flags, {onLeave: function (args) {send("EC_KEY_get_enc_flags");}});

var EC_KEY_get_ex_data = Module.findExportByName("libcrypto.dll", "EC_KEY_get_ex_data")
Interceptor.attach(EC_KEY_get_ex_data, {onLeave: function (args) {send("EC_KEY_get_ex_data");}});

var EC_KEY_get_flags = Module.findExportByName("libcrypto.dll", "EC_KEY_get_flags")
Interceptor.attach(EC_KEY_get_flags, {onLeave: function (args) {send("EC_KEY_get_flags");}});

var EC_KEY_get_key_method_data = Module.findExportByName("libcrypto.dll", "EC_KEY_get_key_method_data")
Interceptor.attach(EC_KEY_get_key_method_data, {onLeave: function (args) {send("EC_KEY_get_key_method_data");}});

var EC_KEY_get_method = Module.findExportByName("libcrypto.dll", "EC_KEY_get_method")
Interceptor.attach(EC_KEY_get_method, {onLeave: function (args) {send("EC_KEY_get_method");}});

var EC_KEY_insert_key_method_data = Module.findExportByName("libcrypto.dll", "EC_KEY_insert_key_method_data")
Interceptor.attach(EC_KEY_insert_key_method_data, {onLeave: function (args) {send("EC_KEY_insert_key_method_data");}});

var EC_KEY_new = Module.findExportByName("libcrypto.dll", "EC_KEY_new")
Interceptor.attach(EC_KEY_new, {onLeave: function (args) {send("EC_KEY_new");}});

var EC_KEY_new_by_curve_name = Module.findExportByName("libcrypto.dll", "EC_KEY_new_by_curve_name")
Interceptor.attach(EC_KEY_new_by_curve_name, {onLeave: function (args) {send("EC_KEY_new_by_curve_name");}});

var EC_KEY_new_method = Module.findExportByName("libcrypto.dll", "EC_KEY_new_method")
Interceptor.attach(EC_KEY_new_method, {onLeave: function (args) {send("EC_KEY_new_method");}});

var EC_KEY_precompute_mult = Module.findExportByName("libcrypto.dll", "EC_KEY_precompute_mult")
Interceptor.attach(EC_KEY_precompute_mult, {onLeave: function (args) {send("EC_KEY_precompute_mult");}});

var EC_KEY_print = Module.findExportByName("libcrypto.dll", "EC_KEY_print")
Interceptor.attach(EC_KEY_print, {onLeave: function (args) {send("EC_KEY_print");}});

var EC_KEY_print_fp = Module.findExportByName("libcrypto.dll", "EC_KEY_print_fp")
Interceptor.attach(EC_KEY_print_fp, {onLeave: function (args) {send("EC_KEY_print_fp");}});

var EC_KEY_set_asn1_flag = Module.findExportByName("libcrypto.dll", "EC_KEY_set_asn1_flag")
Interceptor.attach(EC_KEY_set_asn1_flag, {onLeave: function (args) {send("EC_KEY_set_asn1_flag");}});

var EC_KEY_set_conv_form = Module.findExportByName("libcrypto.dll", "EC_KEY_set_conv_form")
Interceptor.attach(EC_KEY_set_conv_form, {onLeave: function (args) {send("EC_KEY_set_conv_form");}});

var EC_KEY_set_default_method = Module.findExportByName("libcrypto.dll", "EC_KEY_set_default_method")
Interceptor.attach(EC_KEY_set_default_method, {onLeave: function (args) {send("EC_KEY_set_default_method");}});

var EC_KEY_set_enc_flags = Module.findExportByName("libcrypto.dll", "EC_KEY_set_enc_flags")
Interceptor.attach(EC_KEY_set_enc_flags, {onLeave: function (args) {send("EC_KEY_set_enc_flags");}});

var EC_KEY_set_ex_data = Module.findExportByName("libcrypto.dll", "EC_KEY_set_ex_data")
Interceptor.attach(EC_KEY_set_ex_data, {onLeave: function (args) {send("EC_KEY_set_ex_data");}});

var EC_KEY_set_flags = Module.findExportByName("libcrypto.dll", "EC_KEY_set_flags")
Interceptor.attach(EC_KEY_set_flags, {onLeave: function (args) {send("EC_KEY_set_flags");}});

var EC_KEY_set_group = Module.findExportByName("libcrypto.dll", "EC_KEY_set_group")
Interceptor.attach(EC_KEY_set_group, {onLeave: function (args) {send("EC_KEY_set_group");}});

var EC_KEY_set_method = Module.findExportByName("libcrypto.dll", "EC_KEY_set_method")
Interceptor.attach(EC_KEY_set_method, {onLeave: function (args) {send("EC_KEY_set_method");}});

var EC_KEY_set_private_key = Module.findExportByName("libcrypto.dll", "EC_KEY_set_private_key")
Interceptor.attach(EC_KEY_set_private_key, {onLeave: function (args) {send("EC_KEY_set_private_key");}});

var EC_KEY_set_public_key = Module.findExportByName("libcrypto.dll", "EC_KEY_set_public_key")
Interceptor.attach(EC_KEY_set_public_key, {onLeave: function (args) {send("EC_KEY_set_public_key");}});

var EC_KEY_set_public_key_affine_coordinates = Module.findExportByName("libcrypto.dll", "EC_KEY_set_public_key_affine_coordinates")
Interceptor.attach(EC_KEY_set_public_key_affine_coordinates, {onLeave: function (args) {send("EC_KEY_set_public_key_affine_coordinates");}});

var EC_KEY_up_ref = Module.findExportByName("libcrypto.dll", "EC_KEY_up_ref")
Interceptor.attach(EC_KEY_up_ref, {onLeave: function (args) {send("EC_KEY_up_ref");}});

var EC_METHOD_get_field_type = Module.findExportByName("libcrypto.dll", "EC_METHOD_get_field_type")
Interceptor.attach(EC_METHOD_get_field_type, {onLeave: function (args) {send("EC_METHOD_get_field_type");}});

var EC_POINT_add = Module.findExportByName("libcrypto.dll", "EC_POINT_add")
Interceptor.attach(EC_POINT_add, {onLeave: function (args) {send("EC_POINT_add");}});

var EC_POINT_bn2point = Module.findExportByName("libcrypto.dll", "EC_POINT_bn2point")
Interceptor.attach(EC_POINT_bn2point, {onLeave: function (args) {send("EC_POINT_bn2point");}});

var EC_POINT_clear_free = Module.findExportByName("libcrypto.dll", "EC_POINT_clear_free")
Interceptor.attach(EC_POINT_clear_free, {onLeave: function (args) {send("EC_POINT_clear_free");}});

var EC_POINT_cmp = Module.findExportByName("libcrypto.dll", "EC_POINT_cmp")
Interceptor.attach(EC_POINT_cmp, {onLeave: function (args) {send("EC_POINT_cmp");}});

var EC_POINT_copy = Module.findExportByName("libcrypto.dll", "EC_POINT_copy")
Interceptor.attach(EC_POINT_copy, {onLeave: function (args) {send("EC_POINT_copy");}});

var EC_POINT_dbl = Module.findExportByName("libcrypto.dll", "EC_POINT_dbl")
Interceptor.attach(EC_POINT_dbl, {onLeave: function (args) {send("EC_POINT_dbl");}});

var EC_POINT_dup = Module.findExportByName("libcrypto.dll", "EC_POINT_dup")
Interceptor.attach(EC_POINT_dup, {onLeave: function (args) {send("EC_POINT_dup");}});

var EC_POINT_free = Module.findExportByName("libcrypto.dll", "EC_POINT_free")
Interceptor.attach(EC_POINT_free, {onLeave: function (args) {send("EC_POINT_free");}});

var EC_POINT_get_Jprojective_coordinates_GFp = Module.findExportByName("libcrypto.dll", "EC_POINT_get_Jprojective_coordinates_GFp")
Interceptor.attach(EC_POINT_get_Jprojective_coordinates_GFp, {onLeave: function (args) {send("EC_POINT_get_Jprojective_coordinates_GFp");}});

var EC_POINT_get_affine_coordinates = Module.findExportByName("libcrypto.dll", "EC_POINT_get_affine_coordinates")
Interceptor.attach(EC_POINT_get_affine_coordinates, {onLeave: function (args) {send("EC_POINT_get_affine_coordinates");}});

var EC_POINT_get_affine_coordinates_GF2m = Module.findExportByName("libcrypto.dll", "EC_POINT_get_affine_coordinates_GF2m")
Interceptor.attach(EC_POINT_get_affine_coordinates_GF2m, {onLeave: function (args) {send("EC_POINT_get_affine_coordinates_GF2m");}});

var EC_POINT_get_affine_coordinates_GFp = Module.findExportByName("libcrypto.dll", "EC_POINT_get_affine_coordinates_GFp")
Interceptor.attach(EC_POINT_get_affine_coordinates_GFp, {onLeave: function (args) {send("EC_POINT_get_affine_coordinates_GFp");}});

var EC_POINT_hex2point = Module.findExportByName("libcrypto.dll", "EC_POINT_hex2point")
Interceptor.attach(EC_POINT_hex2point, {onLeave: function (args) {send("EC_POINT_hex2point");}});

var EC_POINT_invert = Module.findExportByName("libcrypto.dll", "EC_POINT_invert")
Interceptor.attach(EC_POINT_invert, {onLeave: function (args) {send("EC_POINT_invert");}});

var EC_POINT_is_at_infinity = Module.findExportByName("libcrypto.dll", "EC_POINT_is_at_infinity")
Interceptor.attach(EC_POINT_is_at_infinity, {onLeave: function (args) {send("EC_POINT_is_at_infinity");}});

var EC_POINT_is_on_curve = Module.findExportByName("libcrypto.dll", "EC_POINT_is_on_curve")
Interceptor.attach(EC_POINT_is_on_curve, {onLeave: function (args) {send("EC_POINT_is_on_curve");}});

var EC_POINT_make_affine = Module.findExportByName("libcrypto.dll", "EC_POINT_make_affine")
Interceptor.attach(EC_POINT_make_affine, {onLeave: function (args) {send("EC_POINT_make_affine");}});

var EC_POINT_method_of = Module.findExportByName("libcrypto.dll", "EC_POINT_method_of")
Interceptor.attach(EC_POINT_method_of, {onLeave: function (args) {send("EC_POINT_method_of");}});

var EC_POINT_mul = Module.findExportByName("libcrypto.dll", "EC_POINT_mul")
Interceptor.attach(EC_POINT_mul, {onLeave: function (args) {send("EC_POINT_mul");}});

var EC_POINT_new = Module.findExportByName("libcrypto.dll", "EC_POINT_new")
Interceptor.attach(EC_POINT_new, {onLeave: function (args) {send("EC_POINT_new");}});

var EC_POINT_oct2point = Module.findExportByName("libcrypto.dll", "EC_POINT_oct2point")
Interceptor.attach(EC_POINT_oct2point, {onLeave: function (args) {send("EC_POINT_oct2point");}});

var EC_POINT_point2bn = Module.findExportByName("libcrypto.dll", "EC_POINT_point2bn")
Interceptor.attach(EC_POINT_point2bn, {onLeave: function (args) {send("EC_POINT_point2bn");}});

var EC_POINT_point2hex = Module.findExportByName("libcrypto.dll", "EC_POINT_point2hex")
Interceptor.attach(EC_POINT_point2hex, {onLeave: function (args) {send("EC_POINT_point2hex");}});

var EC_POINT_point2oct = Module.findExportByName("libcrypto.dll", "EC_POINT_point2oct")
Interceptor.attach(EC_POINT_point2oct, {onLeave: function (args) {send("EC_POINT_point2oct");}});

var EC_POINT_set_Jprojective_coordinates_GFp = Module.findExportByName("libcrypto.dll", "EC_POINT_set_Jprojective_coordinates_GFp")
Interceptor.attach(EC_POINT_set_Jprojective_coordinates_GFp, {onLeave: function (args) {send("EC_POINT_set_Jprojective_coordinates_GFp");}});

var EC_POINT_set_affine_coordinates = Module.findExportByName("libcrypto.dll", "EC_POINT_set_affine_coordinates")
Interceptor.attach(EC_POINT_set_affine_coordinates, {onLeave: function (args) {send("EC_POINT_set_affine_coordinates");}});

var EC_POINT_set_affine_coordinates_GF2m = Module.findExportByName("libcrypto.dll", "EC_POINT_set_affine_coordinates_GF2m")
Interceptor.attach(EC_POINT_set_affine_coordinates_GF2m, {onLeave: function (args) {send("EC_POINT_set_affine_coordinates_GF2m");}});

var EC_POINT_set_affine_coordinates_GFp = Module.findExportByName("libcrypto.dll", "EC_POINT_set_affine_coordinates_GFp")
Interceptor.attach(EC_POINT_set_affine_coordinates_GFp, {onLeave: function (args) {send("EC_POINT_set_affine_coordinates_GFp");}});

var EC_POINT_set_compressed_coordinates = Module.findExportByName("libcrypto.dll", "EC_POINT_set_compressed_coordinates")
Interceptor.attach(EC_POINT_set_compressed_coordinates, {onLeave: function (args) {send("EC_POINT_set_compressed_coordinates");}});

var EC_POINT_set_compressed_coordinates_GF2m = Module.findExportByName("libcrypto.dll", "EC_POINT_set_compressed_coordinates_GF2m")
Interceptor.attach(EC_POINT_set_compressed_coordinates_GF2m, {onLeave: function (args) {send("EC_POINT_set_compressed_coordinates_GF2m");}});

var EC_POINT_set_compressed_coordinates_GFp = Module.findExportByName("libcrypto.dll", "EC_POINT_set_compressed_coordinates_GFp")
Interceptor.attach(EC_POINT_set_compressed_coordinates_GFp, {onLeave: function (args) {send("EC_POINT_set_compressed_coordinates_GFp");}});

var EC_POINT_set_to_infinity = Module.findExportByName("libcrypto.dll", "EC_POINT_set_to_infinity")
Interceptor.attach(EC_POINT_set_to_infinity, {onLeave: function (args) {send("EC_POINT_set_to_infinity");}});

var EC_POINTs_make_affine = Module.findExportByName("libcrypto.dll", "EC_POINTs_make_affine")
Interceptor.attach(EC_POINTs_make_affine, {onLeave: function (args) {send("EC_POINTs_make_affine");}});

var EC_POINTs_mul = Module.findExportByName("libcrypto.dll", "EC_POINTs_mul")
Interceptor.attach(EC_POINTs_mul, {onLeave: function (args) {send("EC_POINTs_mul");}});

var EC_PRIVATEKEY_free = Module.findExportByName("libcrypto.dll", "EC_PRIVATEKEY_free")
Interceptor.attach(EC_PRIVATEKEY_free, {onLeave: function (args) {send("EC_PRIVATEKEY_free");}});

var EC_PRIVATEKEY_it = Module.findExportByName("libcrypto.dll", "EC_PRIVATEKEY_it")
Interceptor.attach(EC_PRIVATEKEY_it, {onLeave: function (args) {send("EC_PRIVATEKEY_it");}});

var EC_PRIVATEKEY_new = Module.findExportByName("libcrypto.dll", "EC_PRIVATEKEY_new")
Interceptor.attach(EC_PRIVATEKEY_new, {onLeave: function (args) {send("EC_PRIVATEKEY_new");}});

var EC_curve_nid2nist = Module.findExportByName("libcrypto.dll", "EC_curve_nid2nist")
Interceptor.attach(EC_curve_nid2nist, {onLeave: function (args) {send("EC_curve_nid2nist");}});

var EC_curve_nist2nid = Module.findExportByName("libcrypto.dll", "EC_curve_nist2nid")
Interceptor.attach(EC_curve_nist2nid, {onLeave: function (args) {send("EC_curve_nist2nid");}});

var EC_get_builtin_curves = Module.findExportByName("libcrypto.dll", "EC_get_builtin_curves")
Interceptor.attach(EC_get_builtin_curves, {onLeave: function (args) {send("EC_get_builtin_curves");}});

var EDIPARTYNAME_free = Module.findExportByName("libcrypto.dll", "EDIPARTYNAME_free")
Interceptor.attach(EDIPARTYNAME_free, {onLeave: function (args) {send("EDIPARTYNAME_free");}});

var EDIPARTYNAME_it = Module.findExportByName("libcrypto.dll", "EDIPARTYNAME_it")
Interceptor.attach(EDIPARTYNAME_it, {onLeave: function (args) {send("EDIPARTYNAME_it");}});

var EDIPARTYNAME_new = Module.findExportByName("libcrypto.dll", "EDIPARTYNAME_new")
Interceptor.attach(EDIPARTYNAME_new, {onLeave: function (args) {send("EDIPARTYNAME_new");}});

var ENGINE_add = Module.findExportByName("libcrypto.dll", "ENGINE_add")
Interceptor.attach(ENGINE_add, {onLeave: function (args) {send("ENGINE_add");}});

var ENGINE_add_conf_module = Module.findExportByName("libcrypto.dll", "ENGINE_add_conf_module")
Interceptor.attach(ENGINE_add_conf_module, {onLeave: function (args) {send("ENGINE_add_conf_module");}});

var ENGINE_by_id = Module.findExportByName("libcrypto.dll", "ENGINE_by_id")
Interceptor.attach(ENGINE_by_id, {onLeave: function (args) {send("ENGINE_by_id");}});

var ENGINE_cleanup = Module.findExportByName("libcrypto.dll", "ENGINE_cleanup")
Interceptor.attach(ENGINE_cleanup, {onLeave: function (args) {send("ENGINE_cleanup");}});

var ENGINE_cmd_is_executable = Module.findExportByName("libcrypto.dll", "ENGINE_cmd_is_executable")
Interceptor.attach(ENGINE_cmd_is_executable, {onLeave: function (args) {send("ENGINE_cmd_is_executable");}});

var ENGINE_ctrl = Module.findExportByName("libcrypto.dll", "ENGINE_ctrl")
Interceptor.attach(ENGINE_ctrl, {onLeave: function (args) {send("ENGINE_ctrl");}});

var ENGINE_ctrl_cmd = Module.findExportByName("libcrypto.dll", "ENGINE_ctrl_cmd")
Interceptor.attach(ENGINE_ctrl_cmd, {onLeave: function (args) {send("ENGINE_ctrl_cmd");}});

var ENGINE_ctrl_cmd_string = Module.findExportByName("libcrypto.dll", "ENGINE_ctrl_cmd_string")
Interceptor.attach(ENGINE_ctrl_cmd_string, {onLeave: function (args) {send("ENGINE_ctrl_cmd_string");}});

var ENGINE_finish = Module.findExportByName("libcrypto.dll", "ENGINE_finish")
Interceptor.attach(ENGINE_finish, {onLeave: function (args) {send("ENGINE_finish");}});

var ENGINE_free = Module.findExportByName("libcrypto.dll", "ENGINE_free")
Interceptor.attach(ENGINE_free, {onLeave: function (args) {send("ENGINE_free");}});

var ENGINE_get_DH = Module.findExportByName("libcrypto.dll", "ENGINE_get_DH")
Interceptor.attach(ENGINE_get_DH, {onLeave: function (args) {send("ENGINE_get_DH");}});

var ENGINE_get_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_get_DSA")
Interceptor.attach(ENGINE_get_DSA, {onLeave: function (args) {send("ENGINE_get_DSA");}});

var ENGINE_get_EC = Module.findExportByName("libcrypto.dll", "ENGINE_get_EC")
Interceptor.attach(ENGINE_get_EC, {onLeave: function (args) {send("ENGINE_get_EC");}});

var ENGINE_get_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_get_ECDH")
Interceptor.attach(ENGINE_get_ECDH, {onLeave: function (args) {send("ENGINE_get_ECDH");}});

var ENGINE_get_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_get_ECDSA")
Interceptor.attach(ENGINE_get_ECDSA, {onLeave: function (args) {send("ENGINE_get_ECDSA");}});

var ENGINE_get_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_get_RAND")
Interceptor.attach(ENGINE_get_RAND, {onLeave: function (args) {send("ENGINE_get_RAND");}});

var ENGINE_get_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_get_RSA")
Interceptor.attach(ENGINE_get_RSA, {onLeave: function (args) {send("ENGINE_get_RSA");}});

var ENGINE_get_STORE = Module.findExportByName("libcrypto.dll", "ENGINE_get_STORE")
Interceptor.attach(ENGINE_get_STORE, {onLeave: function (args) {send("ENGINE_get_STORE");}});

var ENGINE_get_cipher = Module.findExportByName("libcrypto.dll", "ENGINE_get_cipher")
Interceptor.attach(ENGINE_get_cipher, {onLeave: function (args) {send("ENGINE_get_cipher");}});

var ENGINE_get_cipher_engine = Module.findExportByName("libcrypto.dll", "ENGINE_get_cipher_engine")
Interceptor.attach(ENGINE_get_cipher_engine, {onLeave: function (args) {send("ENGINE_get_cipher_engine");}});

var ENGINE_get_ciphers = Module.findExportByName("libcrypto.dll", "ENGINE_get_ciphers")
Interceptor.attach(ENGINE_get_ciphers, {onLeave: function (args) {send("ENGINE_get_ciphers");}});

var ENGINE_get_cmd_defns = Module.findExportByName("libcrypto.dll", "ENGINE_get_cmd_defns")
Interceptor.attach(ENGINE_get_cmd_defns, {onLeave: function (args) {send("ENGINE_get_cmd_defns");}});

var ENGINE_get_ctrl_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_ctrl_function")
Interceptor.attach(ENGINE_get_ctrl_function, {onLeave: function (args) {send("ENGINE_get_ctrl_function");}});

var ENGINE_get_default_DH = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_DH")
Interceptor.attach(ENGINE_get_default_DH, {onLeave: function (args) {send("ENGINE_get_default_DH");}});

var ENGINE_get_default_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_DSA")
Interceptor.attach(ENGINE_get_default_DSA, {onLeave: function (args) {send("ENGINE_get_default_DSA");}});

var ENGINE_get_default_EC = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_EC")
Interceptor.attach(ENGINE_get_default_EC, {onLeave: function (args) {send("ENGINE_get_default_EC");}});

var ENGINE_get_default_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_ECDH")
Interceptor.attach(ENGINE_get_default_ECDH, {onLeave: function (args) {send("ENGINE_get_default_ECDH");}});

var ENGINE_get_default_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_ECDSA")
Interceptor.attach(ENGINE_get_default_ECDSA, {onLeave: function (args) {send("ENGINE_get_default_ECDSA");}});

var ENGINE_get_default_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_RAND")
Interceptor.attach(ENGINE_get_default_RAND, {onLeave: function (args) {send("ENGINE_get_default_RAND");}});

var ENGINE_get_default_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_get_default_RSA")
Interceptor.attach(ENGINE_get_default_RSA, {onLeave: function (args) {send("ENGINE_get_default_RSA");}});

var ENGINE_get_destroy_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_destroy_function")
Interceptor.attach(ENGINE_get_destroy_function, {onLeave: function (args) {send("ENGINE_get_destroy_function");}});

var ENGINE_get_digest = Module.findExportByName("libcrypto.dll", "ENGINE_get_digest")
Interceptor.attach(ENGINE_get_digest, {onLeave: function (args) {send("ENGINE_get_digest");}});

var ENGINE_get_digest_engine = Module.findExportByName("libcrypto.dll", "ENGINE_get_digest_engine")
Interceptor.attach(ENGINE_get_digest_engine, {onLeave: function (args) {send("ENGINE_get_digest_engine");}});

var ENGINE_get_digests = Module.findExportByName("libcrypto.dll", "ENGINE_get_digests")
Interceptor.attach(ENGINE_get_digests, {onLeave: function (args) {send("ENGINE_get_digests");}});

var ENGINE_get_ex_data = Module.findExportByName("libcrypto.dll", "ENGINE_get_ex_data")
Interceptor.attach(ENGINE_get_ex_data, {onLeave: function (args) {send("ENGINE_get_ex_data");}});

var ENGINE_get_ex_new_index = Module.findExportByName("libcrypto.dll", "ENGINE_get_ex_new_index")
Interceptor.attach(ENGINE_get_ex_new_index, {onLeave: function (args) {send("ENGINE_get_ex_new_index");}});

var ENGINE_get_finish_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_finish_function")
Interceptor.attach(ENGINE_get_finish_function, {onLeave: function (args) {send("ENGINE_get_finish_function");}});

var ENGINE_get_first = Module.findExportByName("libcrypto.dll", "ENGINE_get_first")
Interceptor.attach(ENGINE_get_first, {onLeave: function (args) {send("ENGINE_get_first");}});

var ENGINE_get_flags = Module.findExportByName("libcrypto.dll", "ENGINE_get_flags")
Interceptor.attach(ENGINE_get_flags, {onLeave: function (args) {send("ENGINE_get_flags");}});

var ENGINE_get_id = Module.findExportByName("libcrypto.dll", "ENGINE_get_id")
Interceptor.attach(ENGINE_get_id, {onLeave: function (args) {send("ENGINE_get_id");}});

var ENGINE_get_init_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_init_function")
Interceptor.attach(ENGINE_get_init_function, {onLeave: function (args) {send("ENGINE_get_init_function");}});

var ENGINE_get_last = Module.findExportByName("libcrypto.dll", "ENGINE_get_last")
Interceptor.attach(ENGINE_get_last, {onLeave: function (args) {send("ENGINE_get_last");}});

var ENGINE_get_load_privkey_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_load_privkey_function")
Interceptor.attach(ENGINE_get_load_privkey_function, {onLeave: function (args) {send("ENGINE_get_load_privkey_function");}});

var ENGINE_get_load_pubkey_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_load_pubkey_function")
Interceptor.attach(ENGINE_get_load_pubkey_function, {onLeave: function (args) {send("ENGINE_get_load_pubkey_function");}});

var ENGINE_get_name = Module.findExportByName("libcrypto.dll", "ENGINE_get_name")
Interceptor.attach(ENGINE_get_name, {onLeave: function (args) {send("ENGINE_get_name");}});

var ENGINE_get_next = Module.findExportByName("libcrypto.dll", "ENGINE_get_next")
Interceptor.attach(ENGINE_get_next, {onLeave: function (args) {send("ENGINE_get_next");}});

var ENGINE_get_pkey_asn1_meth = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_asn1_meth")
Interceptor.attach(ENGINE_get_pkey_asn1_meth, {onLeave: function (args) {send("ENGINE_get_pkey_asn1_meth");}});

var ENGINE_get_pkey_asn1_meth_engine = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_asn1_meth_engine")
Interceptor.attach(ENGINE_get_pkey_asn1_meth_engine, {onLeave: function (args) {send("ENGINE_get_pkey_asn1_meth_engine");}});

var ENGINE_get_pkey_asn1_meth_str = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_asn1_meth_str")
Interceptor.attach(ENGINE_get_pkey_asn1_meth_str, {onLeave: function (args) {send("ENGINE_get_pkey_asn1_meth_str");}});

var ENGINE_get_pkey_asn1_meths = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_asn1_meths")
Interceptor.attach(ENGINE_get_pkey_asn1_meths, {onLeave: function (args) {send("ENGINE_get_pkey_asn1_meths");}});

var ENGINE_get_pkey_meth = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_meth")
Interceptor.attach(ENGINE_get_pkey_meth, {onLeave: function (args) {send("ENGINE_get_pkey_meth");}});

var ENGINE_get_pkey_meth_engine = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_meth_engine")
Interceptor.attach(ENGINE_get_pkey_meth_engine, {onLeave: function (args) {send("ENGINE_get_pkey_meth_engine");}});

var ENGINE_get_pkey_meths = Module.findExportByName("libcrypto.dll", "ENGINE_get_pkey_meths")
Interceptor.attach(ENGINE_get_pkey_meths, {onLeave: function (args) {send("ENGINE_get_pkey_meths");}});

var ENGINE_get_prev = Module.findExportByName("libcrypto.dll", "ENGINE_get_prev")
Interceptor.attach(ENGINE_get_prev, {onLeave: function (args) {send("ENGINE_get_prev");}});

var ENGINE_get_ssl_client_cert_function = Module.findExportByName("libcrypto.dll", "ENGINE_get_ssl_client_cert_function")
Interceptor.attach(ENGINE_get_ssl_client_cert_function, {onLeave: function (args) {send("ENGINE_get_ssl_client_cert_function");}});

var ENGINE_get_static_state = Module.findExportByName("libcrypto.dll", "ENGINE_get_static_state")
Interceptor.attach(ENGINE_get_static_state, {onLeave: function (args) {send("ENGINE_get_static_state");}});

var ENGINE_get_table_flags = Module.findExportByName("libcrypto.dll", "ENGINE_get_table_flags")
Interceptor.attach(ENGINE_get_table_flags, {onLeave: function (args) {send("ENGINE_get_table_flags");}});

var ENGINE_init = Module.findExportByName("libcrypto.dll", "ENGINE_init")
Interceptor.attach(ENGINE_init, {onLeave: function (args) {send("ENGINE_init");}});

var ENGINE_load_builtin_engines = Module.findExportByName("libcrypto.dll", "ENGINE_load_builtin_engines")
Interceptor.attach(ENGINE_load_builtin_engines, {onLeave: function (args) {send("ENGINE_load_builtin_engines");}});

var ENGINE_load_dynamic = Module.findExportByName("libcrypto.dll", "ENGINE_load_dynamic")
Interceptor.attach(ENGINE_load_dynamic, {onLeave: function (args) {send("ENGINE_load_dynamic");}});

var ENGINE_load_openssl = Module.findExportByName("libcrypto.dll", "ENGINE_load_openssl")
Interceptor.attach(ENGINE_load_openssl, {onLeave: function (args) {send("ENGINE_load_openssl");}});

var ENGINE_load_private_key = Module.findExportByName("libcrypto.dll", "ENGINE_load_private_key")
Interceptor.attach(ENGINE_load_private_key, {onLeave: function (args) {send("ENGINE_load_private_key");}});

var ENGINE_load_public_key = Module.findExportByName("libcrypto.dll", "ENGINE_load_public_key")
Interceptor.attach(ENGINE_load_public_key, {onLeave: function (args) {send("ENGINE_load_public_key");}});

var ENGINE_load_ssl_client_cert = Module.findExportByName("libcrypto.dll", "ENGINE_load_ssl_client_cert")
Interceptor.attach(ENGINE_load_ssl_client_cert, {onLeave: function (args) {send("ENGINE_load_ssl_client_cert");}});

var ENGINE_new = Module.findExportByName("libcrypto.dll", "ENGINE_new")
Interceptor.attach(ENGINE_new, {onLeave: function (args) {send("ENGINE_new");}});

var ENGINE_pkey_asn1_find_str = Module.findExportByName("libcrypto.dll", "ENGINE_pkey_asn1_find_str")
Interceptor.attach(ENGINE_pkey_asn1_find_str, {onLeave: function (args) {send("ENGINE_pkey_asn1_find_str");}});

var ENGINE_register_DH = Module.findExportByName("libcrypto.dll", "ENGINE_register_DH")
Interceptor.attach(ENGINE_register_DH, {onLeave: function (args) {send("ENGINE_register_DH");}});

var ENGINE_register_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_register_DSA")
Interceptor.attach(ENGINE_register_DSA, {onLeave: function (args) {send("ENGINE_register_DSA");}});

var ENGINE_register_EC = Module.findExportByName("libcrypto.dll", "ENGINE_register_EC")
Interceptor.attach(ENGINE_register_EC, {onLeave: function (args) {send("ENGINE_register_EC");}});

var ENGINE_register_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_register_ECDH")
Interceptor.attach(ENGINE_register_ECDH, {onLeave: function (args) {send("ENGINE_register_ECDH");}});

var ENGINE_register_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_register_ECDSA")
Interceptor.attach(ENGINE_register_ECDSA, {onLeave: function (args) {send("ENGINE_register_ECDSA");}});

var ENGINE_register_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_register_RAND")
Interceptor.attach(ENGINE_register_RAND, {onLeave: function (args) {send("ENGINE_register_RAND");}});

var ENGINE_register_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_register_RSA")
Interceptor.attach(ENGINE_register_RSA, {onLeave: function (args) {send("ENGINE_register_RSA");}});

var ENGINE_register_STORE = Module.findExportByName("libcrypto.dll", "ENGINE_register_STORE")
Interceptor.attach(ENGINE_register_STORE, {onLeave: function (args) {send("ENGINE_register_STORE");}});

var ENGINE_register_all_DH = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_DH")
Interceptor.attach(ENGINE_register_all_DH, {onLeave: function (args) {send("ENGINE_register_all_DH");}});

var ENGINE_register_all_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_DSA")
Interceptor.attach(ENGINE_register_all_DSA, {onLeave: function (args) {send("ENGINE_register_all_DSA");}});

var ENGINE_register_all_EC = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_EC")
Interceptor.attach(ENGINE_register_all_EC, {onLeave: function (args) {send("ENGINE_register_all_EC");}});

var ENGINE_register_all_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_ECDH")
Interceptor.attach(ENGINE_register_all_ECDH, {onLeave: function (args) {send("ENGINE_register_all_ECDH");}});

var ENGINE_register_all_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_ECDSA")
Interceptor.attach(ENGINE_register_all_ECDSA, {onLeave: function (args) {send("ENGINE_register_all_ECDSA");}});

var ENGINE_register_all_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_RAND")
Interceptor.attach(ENGINE_register_all_RAND, {onLeave: function (args) {send("ENGINE_register_all_RAND");}});

var ENGINE_register_all_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_RSA")
Interceptor.attach(ENGINE_register_all_RSA, {onLeave: function (args) {send("ENGINE_register_all_RSA");}});

var ENGINE_register_all_STORE = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_STORE")
Interceptor.attach(ENGINE_register_all_STORE, {onLeave: function (args) {send("ENGINE_register_all_STORE");}});

var ENGINE_register_all_ciphers = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_ciphers")
Interceptor.attach(ENGINE_register_all_ciphers, {onLeave: function (args) {send("ENGINE_register_all_ciphers");}});

var ENGINE_register_all_complete = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_complete")
Interceptor.attach(ENGINE_register_all_complete, {onLeave: function (args) {send("ENGINE_register_all_complete");}});

var ENGINE_register_all_digests = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_digests")
Interceptor.attach(ENGINE_register_all_digests, {onLeave: function (args) {send("ENGINE_register_all_digests");}});

var ENGINE_register_all_pkey_asn1_meths = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_pkey_asn1_meths")
Interceptor.attach(ENGINE_register_all_pkey_asn1_meths, {onLeave: function (args) {send("ENGINE_register_all_pkey_asn1_meths");}});

var ENGINE_register_all_pkey_meths = Module.findExportByName("libcrypto.dll", "ENGINE_register_all_pkey_meths")
Interceptor.attach(ENGINE_register_all_pkey_meths, {onLeave: function (args) {send("ENGINE_register_all_pkey_meths");}});

var ENGINE_register_ciphers = Module.findExportByName("libcrypto.dll", "ENGINE_register_ciphers")
Interceptor.attach(ENGINE_register_ciphers, {onLeave: function (args) {send("ENGINE_register_ciphers");}});

var ENGINE_register_complete = Module.findExportByName("libcrypto.dll", "ENGINE_register_complete")
Interceptor.attach(ENGINE_register_complete, {onLeave: function (args) {send("ENGINE_register_complete");}});

var ENGINE_register_digests = Module.findExportByName("libcrypto.dll", "ENGINE_register_digests")
Interceptor.attach(ENGINE_register_digests, {onLeave: function (args) {send("ENGINE_register_digests");}});

var ENGINE_register_pkey_asn1_meths = Module.findExportByName("libcrypto.dll", "ENGINE_register_pkey_asn1_meths")
Interceptor.attach(ENGINE_register_pkey_asn1_meths, {onLeave: function (args) {send("ENGINE_register_pkey_asn1_meths");}});

var ENGINE_register_pkey_meths = Module.findExportByName("libcrypto.dll", "ENGINE_register_pkey_meths")
Interceptor.attach(ENGINE_register_pkey_meths, {onLeave: function (args) {send("ENGINE_register_pkey_meths");}});

var ENGINE_remove = Module.findExportByName("libcrypto.dll", "ENGINE_remove")
Interceptor.attach(ENGINE_remove, {onLeave: function (args) {send("ENGINE_remove");}});

var ENGINE_set_DH = Module.findExportByName("libcrypto.dll", "ENGINE_set_DH")
Interceptor.attach(ENGINE_set_DH, {onLeave: function (args) {send("ENGINE_set_DH");}});

var ENGINE_set_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_set_DSA")
Interceptor.attach(ENGINE_set_DSA, {onLeave: function (args) {send("ENGINE_set_DSA");}});

var ENGINE_set_EC = Module.findExportByName("libcrypto.dll", "ENGINE_set_EC")
Interceptor.attach(ENGINE_set_EC, {onLeave: function (args) {send("ENGINE_set_EC");}});

var ENGINE_set_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_set_ECDH")
Interceptor.attach(ENGINE_set_ECDH, {onLeave: function (args) {send("ENGINE_set_ECDH");}});

var ENGINE_set_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_set_ECDSA")
Interceptor.attach(ENGINE_set_ECDSA, {onLeave: function (args) {send("ENGINE_set_ECDSA");}});

var ENGINE_set_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_set_RAND")
Interceptor.attach(ENGINE_set_RAND, {onLeave: function (args) {send("ENGINE_set_RAND");}});

var ENGINE_set_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_set_RSA")
Interceptor.attach(ENGINE_set_RSA, {onLeave: function (args) {send("ENGINE_set_RSA");}});

var ENGINE_set_STORE = Module.findExportByName("libcrypto.dll", "ENGINE_set_STORE")
Interceptor.attach(ENGINE_set_STORE, {onLeave: function (args) {send("ENGINE_set_STORE");}});

var ENGINE_set_ciphers = Module.findExportByName("libcrypto.dll", "ENGINE_set_ciphers")
Interceptor.attach(ENGINE_set_ciphers, {onLeave: function (args) {send("ENGINE_set_ciphers");}});

var ENGINE_set_cmd_defns = Module.findExportByName("libcrypto.dll", "ENGINE_set_cmd_defns")
Interceptor.attach(ENGINE_set_cmd_defns, {onLeave: function (args) {send("ENGINE_set_cmd_defns");}});

var ENGINE_set_ctrl_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_ctrl_function")
Interceptor.attach(ENGINE_set_ctrl_function, {onLeave: function (args) {send("ENGINE_set_ctrl_function");}});

var ENGINE_set_default = Module.findExportByName("libcrypto.dll", "ENGINE_set_default")
Interceptor.attach(ENGINE_set_default, {onLeave: function (args) {send("ENGINE_set_default");}});

var ENGINE_set_default_DH = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_DH")
Interceptor.attach(ENGINE_set_default_DH, {onLeave: function (args) {send("ENGINE_set_default_DH");}});

var ENGINE_set_default_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_DSA")
Interceptor.attach(ENGINE_set_default_DSA, {onLeave: function (args) {send("ENGINE_set_default_DSA");}});

var ENGINE_set_default_EC = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_EC")
Interceptor.attach(ENGINE_set_default_EC, {onLeave: function (args) {send("ENGINE_set_default_EC");}});

var ENGINE_set_default_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_ECDH")
Interceptor.attach(ENGINE_set_default_ECDH, {onLeave: function (args) {send("ENGINE_set_default_ECDH");}});

var ENGINE_set_default_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_ECDSA")
Interceptor.attach(ENGINE_set_default_ECDSA, {onLeave: function (args) {send("ENGINE_set_default_ECDSA");}});

var ENGINE_set_default_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_RAND")
Interceptor.attach(ENGINE_set_default_RAND, {onLeave: function (args) {send("ENGINE_set_default_RAND");}});

var ENGINE_set_default_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_RSA")
Interceptor.attach(ENGINE_set_default_RSA, {onLeave: function (args) {send("ENGINE_set_default_RSA");}});

var ENGINE_set_default_ciphers = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_ciphers")
Interceptor.attach(ENGINE_set_default_ciphers, {onLeave: function (args) {send("ENGINE_set_default_ciphers");}});

var ENGINE_set_default_digests = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_digests")
Interceptor.attach(ENGINE_set_default_digests, {onLeave: function (args) {send("ENGINE_set_default_digests");}});

var ENGINE_set_default_pkey_asn1_meths = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_pkey_asn1_meths")
Interceptor.attach(ENGINE_set_default_pkey_asn1_meths, {onLeave: function (args) {send("ENGINE_set_default_pkey_asn1_meths");}});

var ENGINE_set_default_pkey_meths = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_pkey_meths")
Interceptor.attach(ENGINE_set_default_pkey_meths, {onLeave: function (args) {send("ENGINE_set_default_pkey_meths");}});

var ENGINE_set_default_string = Module.findExportByName("libcrypto.dll", "ENGINE_set_default_string")
Interceptor.attach(ENGINE_set_default_string, {onLeave: function (args) {send("ENGINE_set_default_string");}});

var ENGINE_set_destroy_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_destroy_function")
Interceptor.attach(ENGINE_set_destroy_function, {onLeave: function (args) {send("ENGINE_set_destroy_function");}});

var ENGINE_set_digests = Module.findExportByName("libcrypto.dll", "ENGINE_set_digests")
Interceptor.attach(ENGINE_set_digests, {onLeave: function (args) {send("ENGINE_set_digests");}});

var ENGINE_set_ex_data = Module.findExportByName("libcrypto.dll", "ENGINE_set_ex_data")
Interceptor.attach(ENGINE_set_ex_data, {onLeave: function (args) {send("ENGINE_set_ex_data");}});

var ENGINE_set_finish_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_finish_function")
Interceptor.attach(ENGINE_set_finish_function, {onLeave: function (args) {send("ENGINE_set_finish_function");}});

var ENGINE_set_flags = Module.findExportByName("libcrypto.dll", "ENGINE_set_flags")
Interceptor.attach(ENGINE_set_flags, {onLeave: function (args) {send("ENGINE_set_flags");}});

var ENGINE_set_id = Module.findExportByName("libcrypto.dll", "ENGINE_set_id")
Interceptor.attach(ENGINE_set_id, {onLeave: function (args) {send("ENGINE_set_id");}});

var ENGINE_set_init_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_init_function")
Interceptor.attach(ENGINE_set_init_function, {onLeave: function (args) {send("ENGINE_set_init_function");}});

var ENGINE_set_load_privkey_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_load_privkey_function")
Interceptor.attach(ENGINE_set_load_privkey_function, {onLeave: function (args) {send("ENGINE_set_load_privkey_function");}});

var ENGINE_set_load_pubkey_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_load_pubkey_function")
Interceptor.attach(ENGINE_set_load_pubkey_function, {onLeave: function (args) {send("ENGINE_set_load_pubkey_function");}});

var ENGINE_set_load_ssl_client_cert_function = Module.findExportByName("libcrypto.dll", "ENGINE_set_load_ssl_client_cert_function")
Interceptor.attach(ENGINE_set_load_ssl_client_cert_function, {onLeave: function (args) {send("ENGINE_set_load_ssl_client_cert_function");}});

var ENGINE_set_name = Module.findExportByName("libcrypto.dll", "ENGINE_set_name")
Interceptor.attach(ENGINE_set_name, {onLeave: function (args) {send("ENGINE_set_name");}});

var ENGINE_set_pkey_asn1_meths = Module.findExportByName("libcrypto.dll", "ENGINE_set_pkey_asn1_meths")
Interceptor.attach(ENGINE_set_pkey_asn1_meths, {onLeave: function (args) {send("ENGINE_set_pkey_asn1_meths");}});

var ENGINE_set_pkey_meths = Module.findExportByName("libcrypto.dll", "ENGINE_set_pkey_meths")
Interceptor.attach(ENGINE_set_pkey_meths, {onLeave: function (args) {send("ENGINE_set_pkey_meths");}});

var ENGINE_set_table_flags = Module.findExportByName("libcrypto.dll", "ENGINE_set_table_flags")
Interceptor.attach(ENGINE_set_table_flags, {onLeave: function (args) {send("ENGINE_set_table_flags");}});

var ENGINE_unregister_DH = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_DH")
Interceptor.attach(ENGINE_unregister_DH, {onLeave: function (args) {send("ENGINE_unregister_DH");}});

var ENGINE_unregister_DSA = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_DSA")
Interceptor.attach(ENGINE_unregister_DSA, {onLeave: function (args) {send("ENGINE_unregister_DSA");}});

var ENGINE_unregister_EC = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_EC")
Interceptor.attach(ENGINE_unregister_EC, {onLeave: function (args) {send("ENGINE_unregister_EC");}});

var ENGINE_unregister_ECDH = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_ECDH")
Interceptor.attach(ENGINE_unregister_ECDH, {onLeave: function (args) {send("ENGINE_unregister_ECDH");}});

var ENGINE_unregister_ECDSA = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_ECDSA")
Interceptor.attach(ENGINE_unregister_ECDSA, {onLeave: function (args) {send("ENGINE_unregister_ECDSA");}});

var ENGINE_unregister_RAND = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_RAND")
Interceptor.attach(ENGINE_unregister_RAND, {onLeave: function (args) {send("ENGINE_unregister_RAND");}});

var ENGINE_unregister_RSA = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_RSA")
Interceptor.attach(ENGINE_unregister_RSA, {onLeave: function (args) {send("ENGINE_unregister_RSA");}});

var ENGINE_unregister_STORE = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_STORE")
Interceptor.attach(ENGINE_unregister_STORE, {onLeave: function (args) {send("ENGINE_unregister_STORE");}});

var ENGINE_unregister_ciphers = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_ciphers")
Interceptor.attach(ENGINE_unregister_ciphers, {onLeave: function (args) {send("ENGINE_unregister_ciphers");}});

var ENGINE_unregister_digests = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_digests")
Interceptor.attach(ENGINE_unregister_digests, {onLeave: function (args) {send("ENGINE_unregister_digests");}});

var ENGINE_unregister_pkey_asn1_meths = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_pkey_asn1_meths")
Interceptor.attach(ENGINE_unregister_pkey_asn1_meths, {onLeave: function (args) {send("ENGINE_unregister_pkey_asn1_meths");}});

var ENGINE_unregister_pkey_meths = Module.findExportByName("libcrypto.dll", "ENGINE_unregister_pkey_meths")
Interceptor.attach(ENGINE_unregister_pkey_meths, {onLeave: function (args) {send("ENGINE_unregister_pkey_meths");}});

var ENGINE_up_ref = Module.findExportByName("libcrypto.dll", "ENGINE_up_ref")
Interceptor.attach(ENGINE_up_ref, {onLeave: function (args) {send("ENGINE_up_ref");}});

var ERR_add_error_data = Module.findExportByName("libcrypto.dll", "ERR_add_error_data")
Interceptor.attach(ERR_add_error_data, {onLeave: function (args) {send("ERR_add_error_data");}});

var ERR_add_error_vdata = Module.findExportByName("libcrypto.dll", "ERR_add_error_vdata")
Interceptor.attach(ERR_add_error_vdata, {onLeave: function (args) {send("ERR_add_error_vdata");}});

var ERR_asprintf_error_data = Module.findExportByName("libcrypto.dll", "ERR_asprintf_error_data")
Interceptor.attach(ERR_asprintf_error_data, {onLeave: function (args) {send("ERR_asprintf_error_data");}});

var ERR_clear_error = Module.findExportByName("libcrypto.dll", "ERR_clear_error")
Interceptor.attach(ERR_clear_error, {onLeave: function (args) {send("ERR_clear_error");}});

var ERR_error_string = Module.findExportByName("libcrypto.dll", "ERR_error_string")
Interceptor.attach(ERR_error_string, {onLeave: function (args) {send("ERR_error_string");}});

var ERR_error_string_n = Module.findExportByName("libcrypto.dll", "ERR_error_string_n")
Interceptor.attach(ERR_error_string_n, {onLeave: function (args) {send("ERR_error_string_n");}});

var ERR_free_strings = Module.findExportByName("libcrypto.dll", "ERR_free_strings")
Interceptor.attach(ERR_free_strings, {onLeave: function (args) {send("ERR_free_strings");}});

var ERR_func_error_string = Module.findExportByName("libcrypto.dll", "ERR_func_error_string")
Interceptor.attach(ERR_func_error_string, {onLeave: function (args) {send("ERR_func_error_string");}});

var ERR_get_err_state_table = Module.findExportByName("libcrypto.dll", "ERR_get_err_state_table")
Interceptor.attach(ERR_get_err_state_table, {onLeave: function (args) {send("ERR_get_err_state_table");}});

var ERR_get_error = Module.findExportByName("libcrypto.dll", "ERR_get_error")
Interceptor.attach(ERR_get_error, {onLeave: function (args) {send("ERR_get_error");}});

var ERR_get_error_line = Module.findExportByName("libcrypto.dll", "ERR_get_error_line")
Interceptor.attach(ERR_get_error_line, {onLeave: function (args) {send("ERR_get_error_line");}});

var ERR_get_error_line_data = Module.findExportByName("libcrypto.dll", "ERR_get_error_line_data")
Interceptor.attach(ERR_get_error_line_data, {onLeave: function (args) {send("ERR_get_error_line_data");}});

var ERR_get_implementation = Module.findExportByName("libcrypto.dll", "ERR_get_implementation")
Interceptor.attach(ERR_get_implementation, {onLeave: function (args) {send("ERR_get_implementation");}});

var ERR_get_next_error_library = Module.findExportByName("libcrypto.dll", "ERR_get_next_error_library")
Interceptor.attach(ERR_get_next_error_library, {onLeave: function (args) {send("ERR_get_next_error_library");}});

var ERR_get_state = Module.findExportByName("libcrypto.dll", "ERR_get_state")
Interceptor.attach(ERR_get_state, {onLeave: function (args) {send("ERR_get_state");}});

var ERR_get_string_table = Module.findExportByName("libcrypto.dll", "ERR_get_string_table")
Interceptor.attach(ERR_get_string_table, {onLeave: function (args) {send("ERR_get_string_table");}});

var ERR_lib_error_string = Module.findExportByName("libcrypto.dll", "ERR_lib_error_string")
Interceptor.attach(ERR_lib_error_string, {onLeave: function (args) {send("ERR_lib_error_string");}});

var ERR_load_ASN1_strings = Module.findExportByName("libcrypto.dll", "ERR_load_ASN1_strings")
Interceptor.attach(ERR_load_ASN1_strings, {onLeave: function (args) {send("ERR_load_ASN1_strings");}});

var ERR_load_BIO_strings = Module.findExportByName("libcrypto.dll", "ERR_load_BIO_strings")
Interceptor.attach(ERR_load_BIO_strings, {onLeave: function (args) {send("ERR_load_BIO_strings");}});

var ERR_load_BN_strings = Module.findExportByName("libcrypto.dll", "ERR_load_BN_strings")
Interceptor.attach(ERR_load_BN_strings, {onLeave: function (args) {send("ERR_load_BN_strings");}});

var ERR_load_BUF_strings = Module.findExportByName("libcrypto.dll", "ERR_load_BUF_strings")
Interceptor.attach(ERR_load_BUF_strings, {onLeave: function (args) {send("ERR_load_BUF_strings");}});

var ERR_load_CMS_strings = Module.findExportByName("libcrypto.dll", "ERR_load_CMS_strings")
Interceptor.attach(ERR_load_CMS_strings, {onLeave: function (args) {send("ERR_load_CMS_strings");}});

var ERR_load_COMP_strings = Module.findExportByName("libcrypto.dll", "ERR_load_COMP_strings")
Interceptor.attach(ERR_load_COMP_strings, {onLeave: function (args) {send("ERR_load_COMP_strings");}});

var ERR_load_CONF_strings = Module.findExportByName("libcrypto.dll", "ERR_load_CONF_strings")
Interceptor.attach(ERR_load_CONF_strings, {onLeave: function (args) {send("ERR_load_CONF_strings");}});

var ERR_load_CRYPTO_strings = Module.findExportByName("libcrypto.dll", "ERR_load_CRYPTO_strings")
Interceptor.attach(ERR_load_CRYPTO_strings, {onLeave: function (args) {send("ERR_load_CRYPTO_strings");}});

var ERR_load_DH_strings = Module.findExportByName("libcrypto.dll", "ERR_load_DH_strings")
Interceptor.attach(ERR_load_DH_strings, {onLeave: function (args) {send("ERR_load_DH_strings");}});

var ERR_load_DSA_strings = Module.findExportByName("libcrypto.dll", "ERR_load_DSA_strings")
Interceptor.attach(ERR_load_DSA_strings, {onLeave: function (args) {send("ERR_load_DSA_strings");}});

var ERR_load_DSO_strings = Module.findExportByName("libcrypto.dll", "ERR_load_DSO_strings")
Interceptor.attach(ERR_load_DSO_strings, {onLeave: function (args) {send("ERR_load_DSO_strings");}});

var ERR_load_ECDH_strings = Module.findExportByName("libcrypto.dll", "ERR_load_ECDH_strings")
Interceptor.attach(ERR_load_ECDH_strings, {onLeave: function (args) {send("ERR_load_ECDH_strings");}});

var ERR_load_ECDSA_strings = Module.findExportByName("libcrypto.dll", "ERR_load_ECDSA_strings")
Interceptor.attach(ERR_load_ECDSA_strings, {onLeave: function (args) {send("ERR_load_ECDSA_strings");}});

var ERR_load_EC_strings = Module.findExportByName("libcrypto.dll", "ERR_load_EC_strings")
Interceptor.attach(ERR_load_EC_strings, {onLeave: function (args) {send("ERR_load_EC_strings");}});

var ERR_load_ENGINE_strings = Module.findExportByName("libcrypto.dll", "ERR_load_ENGINE_strings")
Interceptor.attach(ERR_load_ENGINE_strings, {onLeave: function (args) {send("ERR_load_ENGINE_strings");}});

var ERR_load_ERR_strings = Module.findExportByName("libcrypto.dll", "ERR_load_ERR_strings")
Interceptor.attach(ERR_load_ERR_strings, {onLeave: function (args) {send("ERR_load_ERR_strings");}});

var ERR_load_EVP_strings = Module.findExportByName("libcrypto.dll", "ERR_load_EVP_strings")
Interceptor.attach(ERR_load_EVP_strings, {onLeave: function (args) {send("ERR_load_EVP_strings");}});

var ERR_load_GOST_strings = Module.findExportByName("libcrypto.dll", "ERR_load_GOST_strings")
Interceptor.attach(ERR_load_GOST_strings, {onLeave: function (args) {send("ERR_load_GOST_strings");}});

var ERR_load_OBJ_strings = Module.findExportByName("libcrypto.dll", "ERR_load_OBJ_strings")
Interceptor.attach(ERR_load_OBJ_strings, {onLeave: function (args) {send("ERR_load_OBJ_strings");}});

var ERR_load_OCSP_strings = Module.findExportByName("libcrypto.dll", "ERR_load_OCSP_strings")
Interceptor.attach(ERR_load_OCSP_strings, {onLeave: function (args) {send("ERR_load_OCSP_strings");}});

var ERR_load_PEM_strings = Module.findExportByName("libcrypto.dll", "ERR_load_PEM_strings")
Interceptor.attach(ERR_load_PEM_strings, {onLeave: function (args) {send("ERR_load_PEM_strings");}});

var ERR_load_PKCS12_strings = Module.findExportByName("libcrypto.dll", "ERR_load_PKCS12_strings")
Interceptor.attach(ERR_load_PKCS12_strings, {onLeave: function (args) {send("ERR_load_PKCS12_strings");}});

var ERR_load_PKCS7_strings = Module.findExportByName("libcrypto.dll", "ERR_load_PKCS7_strings")
Interceptor.attach(ERR_load_PKCS7_strings, {onLeave: function (args) {send("ERR_load_PKCS7_strings");}});

var ERR_load_RAND_strings = Module.findExportByName("libcrypto.dll", "ERR_load_RAND_strings")
Interceptor.attach(ERR_load_RAND_strings, {onLeave: function (args) {send("ERR_load_RAND_strings");}});

var ERR_load_RSA_strings = Module.findExportByName("libcrypto.dll", "ERR_load_RSA_strings")
Interceptor.attach(ERR_load_RSA_strings, {onLeave: function (args) {send("ERR_load_RSA_strings");}});

var ERR_load_TS_strings = Module.findExportByName("libcrypto.dll", "ERR_load_TS_strings")
Interceptor.attach(ERR_load_TS_strings, {onLeave: function (args) {send("ERR_load_TS_strings");}});

var ERR_load_UI_strings = Module.findExportByName("libcrypto.dll", "ERR_load_UI_strings")
Interceptor.attach(ERR_load_UI_strings, {onLeave: function (args) {send("ERR_load_UI_strings");}});

var ERR_load_X509V3_strings = Module.findExportByName("libcrypto.dll", "ERR_load_X509V3_strings")
Interceptor.attach(ERR_load_X509V3_strings, {onLeave: function (args) {send("ERR_load_X509V3_strings");}});

var ERR_load_X509_strings = Module.findExportByName("libcrypto.dll", "ERR_load_X509_strings")
Interceptor.attach(ERR_load_X509_strings, {onLeave: function (args) {send("ERR_load_X509_strings");}});

var ERR_load_crypto_strings = Module.findExportByName("libcrypto.dll", "ERR_load_crypto_strings")
Interceptor.attach(ERR_load_crypto_strings, {onLeave: function (args) {send("ERR_load_crypto_strings");}});

var ERR_load_strings = Module.findExportByName("libcrypto.dll", "ERR_load_strings")
Interceptor.attach(ERR_load_strings, {onLeave: function (args) {send("ERR_load_strings");}});

var ERR_peek_error = Module.findExportByName("libcrypto.dll", "ERR_peek_error")
Interceptor.attach(ERR_peek_error, {onLeave: function (args) {send("ERR_peek_error");}});

var ERR_peek_error_line = Module.findExportByName("libcrypto.dll", "ERR_peek_error_line")
Interceptor.attach(ERR_peek_error_line, {onLeave: function (args) {send("ERR_peek_error_line");}});

var ERR_peek_error_line_data = Module.findExportByName("libcrypto.dll", "ERR_peek_error_line_data")
Interceptor.attach(ERR_peek_error_line_data, {onLeave: function (args) {send("ERR_peek_error_line_data");}});

var ERR_peek_last_error = Module.findExportByName("libcrypto.dll", "ERR_peek_last_error")
Interceptor.attach(ERR_peek_last_error, {onLeave: function (args) {send("ERR_peek_last_error");}});

var ERR_peek_last_error_line = Module.findExportByName("libcrypto.dll", "ERR_peek_last_error_line")
Interceptor.attach(ERR_peek_last_error_line, {onLeave: function (args) {send("ERR_peek_last_error_line");}});

var ERR_peek_last_error_line_data = Module.findExportByName("libcrypto.dll", "ERR_peek_last_error_line_data")
Interceptor.attach(ERR_peek_last_error_line_data, {onLeave: function (args) {send("ERR_peek_last_error_line_data");}});

var ERR_pop_to_mark = Module.findExportByName("libcrypto.dll", "ERR_pop_to_mark")
Interceptor.attach(ERR_pop_to_mark, {onLeave: function (args) {send("ERR_pop_to_mark");}});

var ERR_print_errors = Module.findExportByName("libcrypto.dll", "ERR_print_errors")
Interceptor.attach(ERR_print_errors, {onLeave: function (args) {send("ERR_print_errors");}});

var ERR_print_errors_cb = Module.findExportByName("libcrypto.dll", "ERR_print_errors_cb")
Interceptor.attach(ERR_print_errors_cb, {onLeave: function (args) {send("ERR_print_errors_cb");}});

var ERR_print_errors_fp = Module.findExportByName("libcrypto.dll", "ERR_print_errors_fp")
Interceptor.attach(ERR_print_errors_fp, {onLeave: function (args) {send("ERR_print_errors_fp");}});

var ERR_put_error = Module.findExportByName("libcrypto.dll", "ERR_put_error")
Interceptor.attach(ERR_put_error, {onLeave: function (args) {send("ERR_put_error");}});

var ERR_reason_error_string = Module.findExportByName("libcrypto.dll", "ERR_reason_error_string")
Interceptor.attach(ERR_reason_error_string, {onLeave: function (args) {send("ERR_reason_error_string");}});

var ERR_release_err_state_table = Module.findExportByName("libcrypto.dll", "ERR_release_err_state_table")
Interceptor.attach(ERR_release_err_state_table, {onLeave: function (args) {send("ERR_release_err_state_table");}});

var ERR_remove_state = Module.findExportByName("libcrypto.dll", "ERR_remove_state")
Interceptor.attach(ERR_remove_state, {onLeave: function (args) {send("ERR_remove_state");}});

var ERR_remove_thread_state = Module.findExportByName("libcrypto.dll", "ERR_remove_thread_state")
Interceptor.attach(ERR_remove_thread_state, {onLeave: function (args) {send("ERR_remove_thread_state");}});

var ERR_set_error_data = Module.findExportByName("libcrypto.dll", "ERR_set_error_data")
Interceptor.attach(ERR_set_error_data, {onLeave: function (args) {send("ERR_set_error_data");}});

var ERR_set_implementation = Module.findExportByName("libcrypto.dll", "ERR_set_implementation")
Interceptor.attach(ERR_set_implementation, {onLeave: function (args) {send("ERR_set_implementation");}});

var ERR_set_mark = Module.findExportByName("libcrypto.dll", "ERR_set_mark")
Interceptor.attach(ERR_set_mark, {onLeave: function (args) {send("ERR_set_mark");}});

var ERR_unload_strings = Module.findExportByName("libcrypto.dll", "ERR_unload_strings")
Interceptor.attach(ERR_unload_strings, {onLeave: function (args) {send("ERR_unload_strings");}});

var ESS_CERT_ID_dup = Module.findExportByName("libcrypto.dll", "ESS_CERT_ID_dup")
Interceptor.attach(ESS_CERT_ID_dup, {onLeave: function (args) {send("ESS_CERT_ID_dup");}});

var ESS_CERT_ID_free = Module.findExportByName("libcrypto.dll", "ESS_CERT_ID_free")
Interceptor.attach(ESS_CERT_ID_free, {onLeave: function (args) {send("ESS_CERT_ID_free");}});

var ESS_CERT_ID_it = Module.findExportByName("libcrypto.dll", "ESS_CERT_ID_it")
Interceptor.attach(ESS_CERT_ID_it, {onLeave: function (args) {send("ESS_CERT_ID_it");}});

var ESS_CERT_ID_new = Module.findExportByName("libcrypto.dll", "ESS_CERT_ID_new")
Interceptor.attach(ESS_CERT_ID_new, {onLeave: function (args) {send("ESS_CERT_ID_new");}});

var ESS_ISSUER_SERIAL_dup = Module.findExportByName("libcrypto.dll", "ESS_ISSUER_SERIAL_dup")
Interceptor.attach(ESS_ISSUER_SERIAL_dup, {onLeave: function (args) {send("ESS_ISSUER_SERIAL_dup");}});

var ESS_ISSUER_SERIAL_free = Module.findExportByName("libcrypto.dll", "ESS_ISSUER_SERIAL_free")
Interceptor.attach(ESS_ISSUER_SERIAL_free, {onLeave: function (args) {send("ESS_ISSUER_SERIAL_free");}});

var ESS_ISSUER_SERIAL_it = Module.findExportByName("libcrypto.dll", "ESS_ISSUER_SERIAL_it")
Interceptor.attach(ESS_ISSUER_SERIAL_it, {onLeave: function (args) {send("ESS_ISSUER_SERIAL_it");}});

var ESS_ISSUER_SERIAL_new = Module.findExportByName("libcrypto.dll", "ESS_ISSUER_SERIAL_new")
Interceptor.attach(ESS_ISSUER_SERIAL_new, {onLeave: function (args) {send("ESS_ISSUER_SERIAL_new");}});

var ESS_SIGNING_CERT_dup = Module.findExportByName("libcrypto.dll", "ESS_SIGNING_CERT_dup")
Interceptor.attach(ESS_SIGNING_CERT_dup, {onLeave: function (args) {send("ESS_SIGNING_CERT_dup");}});

var ESS_SIGNING_CERT_free = Module.findExportByName("libcrypto.dll", "ESS_SIGNING_CERT_free")
Interceptor.attach(ESS_SIGNING_CERT_free, {onLeave: function (args) {send("ESS_SIGNING_CERT_free");}});

var ESS_SIGNING_CERT_it = Module.findExportByName("libcrypto.dll", "ESS_SIGNING_CERT_it")
Interceptor.attach(ESS_SIGNING_CERT_it, {onLeave: function (args) {send("ESS_SIGNING_CERT_it");}});

var ESS_SIGNING_CERT_new = Module.findExportByName("libcrypto.dll", "ESS_SIGNING_CERT_new")
Interceptor.attach(ESS_SIGNING_CERT_new, {onLeave: function (args) {send("ESS_SIGNING_CERT_new");}});

var EVP_AEAD_CTX_cleanup = Module.findExportByName("libcrypto.dll", "EVP_AEAD_CTX_cleanup")
Interceptor.attach(EVP_AEAD_CTX_cleanup, {onLeave: function (args) {send("EVP_AEAD_CTX_cleanup");}});

var EVP_AEAD_CTX_init = Module.findExportByName("libcrypto.dll", "EVP_AEAD_CTX_init")
Interceptor.attach(EVP_AEAD_CTX_init, {onLeave: function (args) {send("EVP_AEAD_CTX_init");}});

var EVP_AEAD_CTX_open = Module.findExportByName("libcrypto.dll", "EVP_AEAD_CTX_open")
Interceptor.attach(EVP_AEAD_CTX_open, {onLeave: function (args) {send("EVP_AEAD_CTX_open");}});

var EVP_AEAD_CTX_seal = Module.findExportByName("libcrypto.dll", "EVP_AEAD_CTX_seal")
Interceptor.attach(EVP_AEAD_CTX_seal, {onLeave: function (args) {send("EVP_AEAD_CTX_seal");}});

var EVP_AEAD_key_length = Module.findExportByName("libcrypto.dll", "EVP_AEAD_key_length")
Interceptor.attach(EVP_AEAD_key_length, {onLeave: function (args) {send("EVP_AEAD_key_length");}});

var EVP_AEAD_max_overhead = Module.findExportByName("libcrypto.dll", "EVP_AEAD_max_overhead")
Interceptor.attach(EVP_AEAD_max_overhead, {onLeave: function (args) {send("EVP_AEAD_max_overhead");}});

var EVP_AEAD_max_tag_len = Module.findExportByName("libcrypto.dll", "EVP_AEAD_max_tag_len")
Interceptor.attach(EVP_AEAD_max_tag_len, {onLeave: function (args) {send("EVP_AEAD_max_tag_len");}});

var EVP_AEAD_nonce_length = Module.findExportByName("libcrypto.dll", "EVP_AEAD_nonce_length")
Interceptor.attach(EVP_AEAD_nonce_length, {onLeave: function (args) {send("EVP_AEAD_nonce_length");}});

var EVP_BytesToKey = Module.findExportByName("libcrypto.dll", "EVP_BytesToKey")
Interceptor.attach(EVP_BytesToKey, {onLeave: function (args) {send("EVP_BytesToKey");}});

var EVP_CIPHER_CTX_block_size = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_block_size")
Interceptor.attach(EVP_CIPHER_CTX_block_size, {onLeave: function (args) {send("EVP_CIPHER_CTX_block_size");}});

var EVP_CIPHER_CTX_cipher = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_cipher")
Interceptor.attach(EVP_CIPHER_CTX_cipher, {onLeave: function (args) {send("EVP_CIPHER_CTX_cipher");}});

var EVP_CIPHER_CTX_cleanup = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_cleanup")
Interceptor.attach(EVP_CIPHER_CTX_cleanup, {onLeave: function (args) {send("EVP_CIPHER_CTX_cleanup");}});

var EVP_CIPHER_CTX_clear_flags = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_clear_flags")
Interceptor.attach(EVP_CIPHER_CTX_clear_flags, {onLeave: function (args) {send("EVP_CIPHER_CTX_clear_flags");}});

var EVP_CIPHER_CTX_copy = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_copy")
Interceptor.attach(EVP_CIPHER_CTX_copy, {onLeave: function (args) {send("EVP_CIPHER_CTX_copy");}});

var EVP_CIPHER_CTX_ctrl = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_ctrl")
Interceptor.attach(EVP_CIPHER_CTX_ctrl, {onLeave: function (args) {send("EVP_CIPHER_CTX_ctrl");}});

var EVP_CIPHER_CTX_encrypting = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_encrypting")
Interceptor.attach(EVP_CIPHER_CTX_encrypting, {onLeave: function (args) {send("EVP_CIPHER_CTX_encrypting");}});

var EVP_CIPHER_CTX_flags = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_flags")
Interceptor.attach(EVP_CIPHER_CTX_flags, {onLeave: function (args) {send("EVP_CIPHER_CTX_flags");}});

var EVP_CIPHER_CTX_free = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_free")
Interceptor.attach(EVP_CIPHER_CTX_free, {onLeave: function (args) {send("EVP_CIPHER_CTX_free");}});

var EVP_CIPHER_CTX_get_app_data = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_get_app_data")
Interceptor.attach(EVP_CIPHER_CTX_get_app_data, {onLeave: function (args) {send("EVP_CIPHER_CTX_get_app_data");}});

var EVP_CIPHER_CTX_get_iv = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_get_iv")
Interceptor.attach(EVP_CIPHER_CTX_get_iv, {onLeave: function (args) {send("EVP_CIPHER_CTX_get_iv");}});

var EVP_CIPHER_CTX_init = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_init")
Interceptor.attach(EVP_CIPHER_CTX_init, {onLeave: function (args) {send("EVP_CIPHER_CTX_init");}});

var EVP_CIPHER_CTX_iv_length = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_iv_length")
Interceptor.attach(EVP_CIPHER_CTX_iv_length, {onLeave: function (args) {send("EVP_CIPHER_CTX_iv_length");}});

var EVP_CIPHER_CTX_key_length = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_key_length")
Interceptor.attach(EVP_CIPHER_CTX_key_length, {onLeave: function (args) {send("EVP_CIPHER_CTX_key_length");}});

var EVP_CIPHER_CTX_new = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_new")
Interceptor.attach(EVP_CIPHER_CTX_new, {onLeave: function (args) {send("EVP_CIPHER_CTX_new");}});

var EVP_CIPHER_CTX_nid = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_nid")
Interceptor.attach(EVP_CIPHER_CTX_nid, {onLeave: function (args) {send("EVP_CIPHER_CTX_nid");}});

var EVP_CIPHER_CTX_rand_key = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_rand_key")
Interceptor.attach(EVP_CIPHER_CTX_rand_key, {onLeave: function (args) {send("EVP_CIPHER_CTX_rand_key");}});

var EVP_CIPHER_CTX_reset = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_reset")
Interceptor.attach(EVP_CIPHER_CTX_reset, {onLeave: function (args) {send("EVP_CIPHER_CTX_reset");}});

var EVP_CIPHER_CTX_set_app_data = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_set_app_data")
Interceptor.attach(EVP_CIPHER_CTX_set_app_data, {onLeave: function (args) {send("EVP_CIPHER_CTX_set_app_data");}});

var EVP_CIPHER_CTX_set_flags = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_set_flags")
Interceptor.attach(EVP_CIPHER_CTX_set_flags, {onLeave: function (args) {send("EVP_CIPHER_CTX_set_flags");}});

var EVP_CIPHER_CTX_set_iv = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_set_iv")
Interceptor.attach(EVP_CIPHER_CTX_set_iv, {onLeave: function (args) {send("EVP_CIPHER_CTX_set_iv");}});

var EVP_CIPHER_CTX_set_key_length = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_set_key_length")
Interceptor.attach(EVP_CIPHER_CTX_set_key_length, {onLeave: function (args) {send("EVP_CIPHER_CTX_set_key_length");}});

var EVP_CIPHER_CTX_set_padding = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_set_padding")
Interceptor.attach(EVP_CIPHER_CTX_set_padding, {onLeave: function (args) {send("EVP_CIPHER_CTX_set_padding");}});

var EVP_CIPHER_CTX_test_flags = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_CTX_test_flags")
Interceptor.attach(EVP_CIPHER_CTX_test_flags, {onLeave: function (args) {send("EVP_CIPHER_CTX_test_flags");}});

var EVP_CIPHER_asn1_to_param = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_asn1_to_param")
Interceptor.attach(EVP_CIPHER_asn1_to_param, {onLeave: function (args) {send("EVP_CIPHER_asn1_to_param");}});

var EVP_CIPHER_block_size = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_block_size")
Interceptor.attach(EVP_CIPHER_block_size, {onLeave: function (args) {send("EVP_CIPHER_block_size");}});

var EVP_CIPHER_do_all = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_do_all")
Interceptor.attach(EVP_CIPHER_do_all, {onLeave: function (args) {send("EVP_CIPHER_do_all");}});

var EVP_CIPHER_do_all_sorted = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_do_all_sorted")
Interceptor.attach(EVP_CIPHER_do_all_sorted, {onLeave: function (args) {send("EVP_CIPHER_do_all_sorted");}});

var EVP_CIPHER_flags = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_flags")
Interceptor.attach(EVP_CIPHER_flags, {onLeave: function (args) {send("EVP_CIPHER_flags");}});

var EVP_CIPHER_get_asn1_iv = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_get_asn1_iv")
Interceptor.attach(EVP_CIPHER_get_asn1_iv, {onLeave: function (args) {send("EVP_CIPHER_get_asn1_iv");}});

var EVP_CIPHER_iv_length = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_iv_length")
Interceptor.attach(EVP_CIPHER_iv_length, {onLeave: function (args) {send("EVP_CIPHER_iv_length");}});

var EVP_CIPHER_key_length = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_key_length")
Interceptor.attach(EVP_CIPHER_key_length, {onLeave: function (args) {send("EVP_CIPHER_key_length");}});

var EVP_CIPHER_nid = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_nid")
Interceptor.attach(EVP_CIPHER_nid, {onLeave: function (args) {send("EVP_CIPHER_nid");}});

var EVP_CIPHER_param_to_asn1 = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_param_to_asn1")
Interceptor.attach(EVP_CIPHER_param_to_asn1, {onLeave: function (args) {send("EVP_CIPHER_param_to_asn1");}});

var EVP_CIPHER_set_asn1_iv = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_set_asn1_iv")
Interceptor.attach(EVP_CIPHER_set_asn1_iv, {onLeave: function (args) {send("EVP_CIPHER_set_asn1_iv");}});

var EVP_CIPHER_type = Module.findExportByName("libcrypto.dll", "EVP_CIPHER_type")
Interceptor.attach(EVP_CIPHER_type, {onLeave: function (args) {send("EVP_CIPHER_type");}});

var EVP_Cipher = Module.findExportByName("libcrypto.dll", "EVP_Cipher")
Interceptor.attach(EVP_Cipher, {onLeave: function (args) {send("EVP_Cipher");}});

var EVP_CipherFinal = Module.findExportByName("libcrypto.dll", "EVP_CipherFinal")
Interceptor.attach(EVP_CipherFinal, {onLeave: function (args) {send("EVP_CipherFinal");}});

var EVP_CipherFinal_ex = Module.findExportByName("libcrypto.dll", "EVP_CipherFinal_ex")
Interceptor.attach(EVP_CipherFinal_ex, {onLeave: function (args) {send("EVP_CipherFinal_ex");}});

var EVP_CipherInit = Module.findExportByName("libcrypto.dll", "EVP_CipherInit")
Interceptor.attach(EVP_CipherInit, {onLeave: function (args) {send("EVP_CipherInit");}});

var EVP_CipherInit_ex = Module.findExportByName("libcrypto.dll", "EVP_CipherInit_ex")
Interceptor.attach(EVP_CipherInit_ex, {onLeave: function (args) {send("EVP_CipherInit_ex");}});

var EVP_CipherUpdate = Module.findExportByName("libcrypto.dll", "EVP_CipherUpdate")
Interceptor.attach(EVP_CipherUpdate, {onLeave: function (args) {send("EVP_CipherUpdate");}});

var EVP_DecodeBlock = Module.findExportByName("libcrypto.dll", "EVP_DecodeBlock")
Interceptor.attach(EVP_DecodeBlock, {onLeave: function (args) {send("EVP_DecodeBlock");}});

var EVP_DecodeFinal = Module.findExportByName("libcrypto.dll", "EVP_DecodeFinal")
Interceptor.attach(EVP_DecodeFinal, {onLeave: function (args) {send("EVP_DecodeFinal");}});

var EVP_DecodeInit = Module.findExportByName("libcrypto.dll", "EVP_DecodeInit")
Interceptor.attach(EVP_DecodeInit, {onLeave: function (args) {send("EVP_DecodeInit");}});

var EVP_DecodeUpdate = Module.findExportByName("libcrypto.dll", "EVP_DecodeUpdate")
Interceptor.attach(EVP_DecodeUpdate, {onLeave: function (args) {send("EVP_DecodeUpdate");}});

var EVP_DecryptFinal = Module.findExportByName("libcrypto.dll", "EVP_DecryptFinal")
Interceptor.attach(EVP_DecryptFinal, {onLeave: function (args) {send("EVP_DecryptFinal");}});

var EVP_DecryptFinal_ex = Module.findExportByName("libcrypto.dll", "EVP_DecryptFinal_ex")
Interceptor.attach(EVP_DecryptFinal_ex, {onLeave: function (args) {send("EVP_DecryptFinal_ex");}});

var EVP_DecryptInit = Module.findExportByName("libcrypto.dll", "EVP_DecryptInit")
Interceptor.attach(EVP_DecryptInit, {onLeave: function (args) {send("EVP_DecryptInit");}});

var EVP_DecryptInit_ex = Module.findExportByName("libcrypto.dll", "EVP_DecryptInit_ex")
Interceptor.attach(EVP_DecryptInit_ex, {onLeave: function (args) {send("EVP_DecryptInit_ex");}});

var EVP_DecryptUpdate = Module.findExportByName("libcrypto.dll", "EVP_DecryptUpdate")
Interceptor.attach(EVP_DecryptUpdate, {onLeave: function (args) {send("EVP_DecryptUpdate");}});

var EVP_Digest = Module.findExportByName("libcrypto.dll", "EVP_Digest")
Interceptor.attach(EVP_Digest, {onLeave: function (args) {send("EVP_Digest");}});

var EVP_DigestFinal = Module.findExportByName("libcrypto.dll", "EVP_DigestFinal")
Interceptor.attach(EVP_DigestFinal, {onLeave: function (args) {send("EVP_DigestFinal");}});

var EVP_DigestFinal_ex = Module.findExportByName("libcrypto.dll", "EVP_DigestFinal_ex")
Interceptor.attach(EVP_DigestFinal_ex, {onLeave: function (args) {send("EVP_DigestFinal_ex");}});

var EVP_DigestInit = Module.findExportByName("libcrypto.dll", "EVP_DigestInit")
Interceptor.attach(EVP_DigestInit, {onLeave: function (args) {send("EVP_DigestInit");}});

var EVP_DigestInit_ex = Module.findExportByName("libcrypto.dll", "EVP_DigestInit_ex")
Interceptor.attach(EVP_DigestInit_ex, {onLeave: function (args) {send("EVP_DigestInit_ex");}});

var EVP_DigestSign = Module.findExportByName("libcrypto.dll", "EVP_DigestSign")
Interceptor.attach(EVP_DigestSign, {onLeave: function (args) {send("EVP_DigestSign");}});

var EVP_DigestSignFinal = Module.findExportByName("libcrypto.dll", "EVP_DigestSignFinal")
Interceptor.attach(EVP_DigestSignFinal, {onLeave: function (args) {send("EVP_DigestSignFinal");}});

var EVP_DigestSignInit = Module.findExportByName("libcrypto.dll", "EVP_DigestSignInit")
Interceptor.attach(EVP_DigestSignInit, {onLeave: function (args) {send("EVP_DigestSignInit");}});

var EVP_DigestUpdate = Module.findExportByName("libcrypto.dll", "EVP_DigestUpdate")
Interceptor.attach(EVP_DigestUpdate, {onLeave: function (args) {send("EVP_DigestUpdate");}});

var EVP_DigestVerify = Module.findExportByName("libcrypto.dll", "EVP_DigestVerify")
Interceptor.attach(EVP_DigestVerify, {onLeave: function (args) {send("EVP_DigestVerify");}});

var EVP_DigestVerifyFinal = Module.findExportByName("libcrypto.dll", "EVP_DigestVerifyFinal")
Interceptor.attach(EVP_DigestVerifyFinal, {onLeave: function (args) {send("EVP_DigestVerifyFinal");}});

var EVP_DigestVerifyInit = Module.findExportByName("libcrypto.dll", "EVP_DigestVerifyInit")
Interceptor.attach(EVP_DigestVerifyInit, {onLeave: function (args) {send("EVP_DigestVerifyInit");}});

var EVP_ENCODE_CTX_free = Module.findExportByName("libcrypto.dll", "EVP_ENCODE_CTX_free")
Interceptor.attach(EVP_ENCODE_CTX_free, {onLeave: function (args) {send("EVP_ENCODE_CTX_free");}});

var EVP_ENCODE_CTX_new = Module.findExportByName("libcrypto.dll", "EVP_ENCODE_CTX_new")
Interceptor.attach(EVP_ENCODE_CTX_new, {onLeave: function (args) {send("EVP_ENCODE_CTX_new");}});

var EVP_EncodeBlock = Module.findExportByName("libcrypto.dll", "EVP_EncodeBlock")
Interceptor.attach(EVP_EncodeBlock, {onLeave: function (args) {send("EVP_EncodeBlock");}});

var EVP_EncodeFinal = Module.findExportByName("libcrypto.dll", "EVP_EncodeFinal")
Interceptor.attach(EVP_EncodeFinal, {onLeave: function (args) {send("EVP_EncodeFinal");}});

var EVP_EncodeInit = Module.findExportByName("libcrypto.dll", "EVP_EncodeInit")
Interceptor.attach(EVP_EncodeInit, {onLeave: function (args) {send("EVP_EncodeInit");}});

var EVP_EncodeUpdate = Module.findExportByName("libcrypto.dll", "EVP_EncodeUpdate")
Interceptor.attach(EVP_EncodeUpdate, {onLeave: function (args) {send("EVP_EncodeUpdate");}});

var EVP_EncryptFinal = Module.findExportByName("libcrypto.dll", "EVP_EncryptFinal")
Interceptor.attach(EVP_EncryptFinal, {onLeave: function (args) {send("EVP_EncryptFinal");}});

var EVP_EncryptFinal_ex = Module.findExportByName("libcrypto.dll", "EVP_EncryptFinal_ex")
Interceptor.attach(EVP_EncryptFinal_ex, {onLeave: function (args) {send("EVP_EncryptFinal_ex");}});

var EVP_EncryptInit = Module.findExportByName("libcrypto.dll", "EVP_EncryptInit")
Interceptor.attach(EVP_EncryptInit, {onLeave: function (args) {send("EVP_EncryptInit");}});

var EVP_EncryptInit_ex = Module.findExportByName("libcrypto.dll", "EVP_EncryptInit_ex")
Interceptor.attach(EVP_EncryptInit_ex, {onLeave: function (args) {send("EVP_EncryptInit_ex");}});

var EVP_EncryptUpdate = Module.findExportByName("libcrypto.dll", "EVP_EncryptUpdate")
Interceptor.attach(EVP_EncryptUpdate, {onLeave: function (args) {send("EVP_EncryptUpdate");}});

var EVP_MD_CTX_cleanup = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_cleanup")
Interceptor.attach(EVP_MD_CTX_cleanup, {onLeave: function (args) {send("EVP_MD_CTX_cleanup");}});

var EVP_MD_CTX_clear_flags = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_clear_flags")
Interceptor.attach(EVP_MD_CTX_clear_flags, {onLeave: function (args) {send("EVP_MD_CTX_clear_flags");}});

var EVP_MD_CTX_copy = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_copy")
Interceptor.attach(EVP_MD_CTX_copy, {onLeave: function (args) {send("EVP_MD_CTX_copy");}});

var EVP_MD_CTX_copy_ex = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_copy_ex")
Interceptor.attach(EVP_MD_CTX_copy_ex, {onLeave: function (args) {send("EVP_MD_CTX_copy_ex");}});

var EVP_MD_CTX_create = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_create")
Interceptor.attach(EVP_MD_CTX_create, {onLeave: function (args) {send("EVP_MD_CTX_create");}});

var EVP_MD_CTX_ctrl = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_ctrl")
Interceptor.attach(EVP_MD_CTX_ctrl, {onLeave: function (args) {send("EVP_MD_CTX_ctrl");}});

var EVP_MD_CTX_destroy = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_destroy")
Interceptor.attach(EVP_MD_CTX_destroy, {onLeave: function (args) {send("EVP_MD_CTX_destroy");}});

var EVP_MD_CTX_free = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_free")
Interceptor.attach(EVP_MD_CTX_free, {onLeave: function (args) {send("EVP_MD_CTX_free");}});

var EVP_MD_CTX_init = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_init")
Interceptor.attach(EVP_MD_CTX_init, {onLeave: function (args) {send("EVP_MD_CTX_init");}});

var EVP_MD_CTX_md = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_md")
Interceptor.attach(EVP_MD_CTX_md, {onLeave: function (args) {send("EVP_MD_CTX_md");}});

var EVP_MD_CTX_new = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_new")
Interceptor.attach(EVP_MD_CTX_new, {onLeave: function (args) {send("EVP_MD_CTX_new");}});

var EVP_MD_CTX_reset = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_reset")
Interceptor.attach(EVP_MD_CTX_reset, {onLeave: function (args) {send("EVP_MD_CTX_reset");}});

var EVP_MD_CTX_set_flags = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_set_flags")
Interceptor.attach(EVP_MD_CTX_set_flags, {onLeave: function (args) {send("EVP_MD_CTX_set_flags");}});

var EVP_MD_CTX_test_flags = Module.findExportByName("libcrypto.dll", "EVP_MD_CTX_test_flags")
Interceptor.attach(EVP_MD_CTX_test_flags, {onLeave: function (args) {send("EVP_MD_CTX_test_flags");}});

var EVP_MD_block_size = Module.findExportByName("libcrypto.dll", "EVP_MD_block_size")
Interceptor.attach(EVP_MD_block_size, {onLeave: function (args) {send("EVP_MD_block_size");}});

var EVP_MD_do_all = Module.findExportByName("libcrypto.dll", "EVP_MD_do_all")
Interceptor.attach(EVP_MD_do_all, {onLeave: function (args) {send("EVP_MD_do_all");}});

var EVP_MD_do_all_sorted = Module.findExportByName("libcrypto.dll", "EVP_MD_do_all_sorted")
Interceptor.attach(EVP_MD_do_all_sorted, {onLeave: function (args) {send("EVP_MD_do_all_sorted");}});

var EVP_MD_flags = Module.findExportByName("libcrypto.dll", "EVP_MD_flags")
Interceptor.attach(EVP_MD_flags, {onLeave: function (args) {send("EVP_MD_flags");}});

var EVP_MD_pkey_type = Module.findExportByName("libcrypto.dll", "EVP_MD_pkey_type")
Interceptor.attach(EVP_MD_pkey_type, {onLeave: function (args) {send("EVP_MD_pkey_type");}});

var EVP_MD_size = Module.findExportByName("libcrypto.dll", "EVP_MD_size")
Interceptor.attach(EVP_MD_size, {onLeave: function (args) {send("EVP_MD_size");}});

var EVP_MD_type = Module.findExportByName("libcrypto.dll", "EVP_MD_type")
Interceptor.attach(EVP_MD_type, {onLeave: function (args) {send("EVP_MD_type");}});

var EVP_OpenFinal = Module.findExportByName("libcrypto.dll", "EVP_OpenFinal")
Interceptor.attach(EVP_OpenFinal, {onLeave: function (args) {send("EVP_OpenFinal");}});

var EVP_OpenInit = Module.findExportByName("libcrypto.dll", "EVP_OpenInit")
Interceptor.attach(EVP_OpenInit, {onLeave: function (args) {send("EVP_OpenInit");}});

var EVP_PBE_CipherInit = Module.findExportByName("libcrypto.dll", "EVP_PBE_CipherInit")
Interceptor.attach(EVP_PBE_CipherInit, {onLeave: function (args) {send("EVP_PBE_CipherInit");}});

var EVP_PBE_alg_add = Module.findExportByName("libcrypto.dll", "EVP_PBE_alg_add")
Interceptor.attach(EVP_PBE_alg_add, {onLeave: function (args) {send("EVP_PBE_alg_add");}});

var EVP_PBE_alg_add_type = Module.findExportByName("libcrypto.dll", "EVP_PBE_alg_add_type")
Interceptor.attach(EVP_PBE_alg_add_type, {onLeave: function (args) {send("EVP_PBE_alg_add_type");}});

var EVP_PBE_cleanup = Module.findExportByName("libcrypto.dll", "EVP_PBE_cleanup")
Interceptor.attach(EVP_PBE_cleanup, {onLeave: function (args) {send("EVP_PBE_cleanup");}});

var EVP_PBE_find = Module.findExportByName("libcrypto.dll", "EVP_PBE_find")
Interceptor.attach(EVP_PBE_find, {onLeave: function (args) {send("EVP_PBE_find");}});

var EVP_PKCS82PKEY = Module.findExportByName("libcrypto.dll", "EVP_PKCS82PKEY")
Interceptor.attach(EVP_PKCS82PKEY, {onLeave: function (args) {send("EVP_PKCS82PKEY");}});

var EVP_PKEY2PKCS8 = Module.findExportByName("libcrypto.dll", "EVP_PKEY2PKCS8")
Interceptor.attach(EVP_PKEY2PKCS8, {onLeave: function (args) {send("EVP_PKEY2PKCS8");}});

var EVP_PKEY_CTX_ctrl = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_ctrl")
Interceptor.attach(EVP_PKEY_CTX_ctrl, {onLeave: function (args) {send("EVP_PKEY_CTX_ctrl");}});

var EVP_PKEY_CTX_ctrl_str = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_ctrl_str")
Interceptor.attach(EVP_PKEY_CTX_ctrl_str, {onLeave: function (args) {send("EVP_PKEY_CTX_ctrl_str");}});

var EVP_PKEY_CTX_dup = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_dup")
Interceptor.attach(EVP_PKEY_CTX_dup, {onLeave: function (args) {send("EVP_PKEY_CTX_dup");}});

var EVP_PKEY_CTX_free = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_free")
Interceptor.attach(EVP_PKEY_CTX_free, {onLeave: function (args) {send("EVP_PKEY_CTX_free");}});

var EVP_PKEY_CTX_get0_peerkey = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get0_peerkey")
Interceptor.attach(EVP_PKEY_CTX_get0_peerkey, {onLeave: function (args) {send("EVP_PKEY_CTX_get0_peerkey");}});

var EVP_PKEY_CTX_get0_pkey = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get0_pkey")
Interceptor.attach(EVP_PKEY_CTX_get0_pkey, {onLeave: function (args) {send("EVP_PKEY_CTX_get0_pkey");}});

var EVP_PKEY_CTX_get_app_data = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get_app_data")
Interceptor.attach(EVP_PKEY_CTX_get_app_data, {onLeave: function (args) {send("EVP_PKEY_CTX_get_app_data");}});

var EVP_PKEY_CTX_get_cb = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get_cb")
Interceptor.attach(EVP_PKEY_CTX_get_cb, {onLeave: function (args) {send("EVP_PKEY_CTX_get_cb");}});

var EVP_PKEY_CTX_get_data = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get_data")
Interceptor.attach(EVP_PKEY_CTX_get_data, {onLeave: function (args) {send("EVP_PKEY_CTX_get_data");}});

var EVP_PKEY_CTX_get_keygen_info = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get_keygen_info")
Interceptor.attach(EVP_PKEY_CTX_get_keygen_info, {onLeave: function (args) {send("EVP_PKEY_CTX_get_keygen_info");}});

var EVP_PKEY_CTX_get_operation = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_get_operation")
Interceptor.attach(EVP_PKEY_CTX_get_operation, {onLeave: function (args) {send("EVP_PKEY_CTX_get_operation");}});

var EVP_PKEY_CTX_new = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_new")
Interceptor.attach(EVP_PKEY_CTX_new, {onLeave: function (args) {send("EVP_PKEY_CTX_new");}});

var EVP_PKEY_CTX_new_id = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_new_id")
Interceptor.attach(EVP_PKEY_CTX_new_id, {onLeave: function (args) {send("EVP_PKEY_CTX_new_id");}});

var EVP_PKEY_CTX_set0_keygen_info = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_set0_keygen_info")
Interceptor.attach(EVP_PKEY_CTX_set0_keygen_info, {onLeave: function (args) {send("EVP_PKEY_CTX_set0_keygen_info");}});

var EVP_PKEY_CTX_set_app_data = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_set_app_data")
Interceptor.attach(EVP_PKEY_CTX_set_app_data, {onLeave: function (args) {send("EVP_PKEY_CTX_set_app_data");}});

var EVP_PKEY_CTX_set_cb = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_set_cb")
Interceptor.attach(EVP_PKEY_CTX_set_cb, {onLeave: function (args) {send("EVP_PKEY_CTX_set_cb");}});

var EVP_PKEY_CTX_set_data = Module.findExportByName("libcrypto.dll", "EVP_PKEY_CTX_set_data")
Interceptor.attach(EVP_PKEY_CTX_set_data, {onLeave: function (args) {send("EVP_PKEY_CTX_set_data");}});

var EVP_PKEY_add1_attr = Module.findExportByName("libcrypto.dll", "EVP_PKEY_add1_attr")
Interceptor.attach(EVP_PKEY_add1_attr, {onLeave: function (args) {send("EVP_PKEY_add1_attr");}});

var EVP_PKEY_add1_attr_by_NID = Module.findExportByName("libcrypto.dll", "EVP_PKEY_add1_attr_by_NID")
Interceptor.attach(EVP_PKEY_add1_attr_by_NID, {onLeave: function (args) {send("EVP_PKEY_add1_attr_by_NID");}});

var EVP_PKEY_add1_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "EVP_PKEY_add1_attr_by_OBJ")
Interceptor.attach(EVP_PKEY_add1_attr_by_OBJ, {onLeave: function (args) {send("EVP_PKEY_add1_attr_by_OBJ");}});

var EVP_PKEY_add1_attr_by_txt = Module.findExportByName("libcrypto.dll", "EVP_PKEY_add1_attr_by_txt")
Interceptor.attach(EVP_PKEY_add1_attr_by_txt, {onLeave: function (args) {send("EVP_PKEY_add1_attr_by_txt");}});

var EVP_PKEY_asn1_add0 = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_add0")
Interceptor.attach(EVP_PKEY_asn1_add0, {onLeave: function (args) {send("EVP_PKEY_asn1_add0");}});

var EVP_PKEY_asn1_add_alias = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_add_alias")
Interceptor.attach(EVP_PKEY_asn1_add_alias, {onLeave: function (args) {send("EVP_PKEY_asn1_add_alias");}});

var EVP_PKEY_asn1_copy = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_copy")
Interceptor.attach(EVP_PKEY_asn1_copy, {onLeave: function (args) {send("EVP_PKEY_asn1_copy");}});

var EVP_PKEY_asn1_find = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_find")
Interceptor.attach(EVP_PKEY_asn1_find, {onLeave: function (args) {send("EVP_PKEY_asn1_find");}});

var EVP_PKEY_asn1_find_str = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_find_str")
Interceptor.attach(EVP_PKEY_asn1_find_str, {onLeave: function (args) {send("EVP_PKEY_asn1_find_str");}});

var EVP_PKEY_asn1_free = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_free")
Interceptor.attach(EVP_PKEY_asn1_free, {onLeave: function (args) {send("EVP_PKEY_asn1_free");}});

var EVP_PKEY_asn1_get0 = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_get0")
Interceptor.attach(EVP_PKEY_asn1_get0, {onLeave: function (args) {send("EVP_PKEY_asn1_get0");}});

var EVP_PKEY_asn1_get0_info = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_get0_info")
Interceptor.attach(EVP_PKEY_asn1_get0_info, {onLeave: function (args) {send("EVP_PKEY_asn1_get0_info");}});

var EVP_PKEY_asn1_get_count = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_get_count")
Interceptor.attach(EVP_PKEY_asn1_get_count, {onLeave: function (args) {send("EVP_PKEY_asn1_get_count");}});

var EVP_PKEY_asn1_new = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_new")
Interceptor.attach(EVP_PKEY_asn1_new, {onLeave: function (args) {send("EVP_PKEY_asn1_new");}});

var EVP_PKEY_asn1_set_ctrl = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_set_ctrl")
Interceptor.attach(EVP_PKEY_asn1_set_ctrl, {onLeave: function (args) {send("EVP_PKEY_asn1_set_ctrl");}});

var EVP_PKEY_asn1_set_free = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_set_free")
Interceptor.attach(EVP_PKEY_asn1_set_free, {onLeave: function (args) {send("EVP_PKEY_asn1_set_free");}});

var EVP_PKEY_asn1_set_param = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_set_param")
Interceptor.attach(EVP_PKEY_asn1_set_param, {onLeave: function (args) {send("EVP_PKEY_asn1_set_param");}});

var EVP_PKEY_asn1_set_private = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_set_private")
Interceptor.attach(EVP_PKEY_asn1_set_private, {onLeave: function (args) {send("EVP_PKEY_asn1_set_private");}});

var EVP_PKEY_asn1_set_public = Module.findExportByName("libcrypto.dll", "EVP_PKEY_asn1_set_public")
Interceptor.attach(EVP_PKEY_asn1_set_public, {onLeave: function (args) {send("EVP_PKEY_asn1_set_public");}});

var EVP_PKEY_assign = Module.findExportByName("libcrypto.dll", "EVP_PKEY_assign")
Interceptor.attach(EVP_PKEY_assign, {onLeave: function (args) {send("EVP_PKEY_assign");}});

var EVP_PKEY_base_id = Module.findExportByName("libcrypto.dll", "EVP_PKEY_base_id")
Interceptor.attach(EVP_PKEY_base_id, {onLeave: function (args) {send("EVP_PKEY_base_id");}});

var EVP_PKEY_bits = Module.findExportByName("libcrypto.dll", "EVP_PKEY_bits")
Interceptor.attach(EVP_PKEY_bits, {onLeave: function (args) {send("EVP_PKEY_bits");}});

var EVP_PKEY_cmp = Module.findExportByName("libcrypto.dll", "EVP_PKEY_cmp")
Interceptor.attach(EVP_PKEY_cmp, {onLeave: function (args) {send("EVP_PKEY_cmp");}});

var EVP_PKEY_cmp_parameters = Module.findExportByName("libcrypto.dll", "EVP_PKEY_cmp_parameters")
Interceptor.attach(EVP_PKEY_cmp_parameters, {onLeave: function (args) {send("EVP_PKEY_cmp_parameters");}});

var EVP_PKEY_copy_parameters = Module.findExportByName("libcrypto.dll", "EVP_PKEY_copy_parameters")
Interceptor.attach(EVP_PKEY_copy_parameters, {onLeave: function (args) {send("EVP_PKEY_copy_parameters");}});

var EVP_PKEY_decrypt = Module.findExportByName("libcrypto.dll", "EVP_PKEY_decrypt")
Interceptor.attach(EVP_PKEY_decrypt, {onLeave: function (args) {send("EVP_PKEY_decrypt");}});

var EVP_PKEY_decrypt_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_decrypt_init")
Interceptor.attach(EVP_PKEY_decrypt_init, {onLeave: function (args) {send("EVP_PKEY_decrypt_init");}});

var EVP_PKEY_decrypt_old = Module.findExportByName("libcrypto.dll", "EVP_PKEY_decrypt_old")
Interceptor.attach(EVP_PKEY_decrypt_old, {onLeave: function (args) {send("EVP_PKEY_decrypt_old");}});

var EVP_PKEY_delete_attr = Module.findExportByName("libcrypto.dll", "EVP_PKEY_delete_attr")
Interceptor.attach(EVP_PKEY_delete_attr, {onLeave: function (args) {send("EVP_PKEY_delete_attr");}});

var EVP_PKEY_derive = Module.findExportByName("libcrypto.dll", "EVP_PKEY_derive")
Interceptor.attach(EVP_PKEY_derive, {onLeave: function (args) {send("EVP_PKEY_derive");}});

var EVP_PKEY_derive_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_derive_init")
Interceptor.attach(EVP_PKEY_derive_init, {onLeave: function (args) {send("EVP_PKEY_derive_init");}});

var EVP_PKEY_derive_set_peer = Module.findExportByName("libcrypto.dll", "EVP_PKEY_derive_set_peer")
Interceptor.attach(EVP_PKEY_derive_set_peer, {onLeave: function (args) {send("EVP_PKEY_derive_set_peer");}});

var EVP_PKEY_encrypt = Module.findExportByName("libcrypto.dll", "EVP_PKEY_encrypt")
Interceptor.attach(EVP_PKEY_encrypt, {onLeave: function (args) {send("EVP_PKEY_encrypt");}});

var EVP_PKEY_encrypt_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_encrypt_init")
Interceptor.attach(EVP_PKEY_encrypt_init, {onLeave: function (args) {send("EVP_PKEY_encrypt_init");}});

var EVP_PKEY_encrypt_old = Module.findExportByName("libcrypto.dll", "EVP_PKEY_encrypt_old")
Interceptor.attach(EVP_PKEY_encrypt_old, {onLeave: function (args) {send("EVP_PKEY_encrypt_old");}});

var EVP_PKEY_free = Module.findExportByName("libcrypto.dll", "EVP_PKEY_free")
Interceptor.attach(EVP_PKEY_free, {onLeave: function (args) {send("EVP_PKEY_free");}});

var EVP_PKEY_get0 = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0")
Interceptor.attach(EVP_PKEY_get0, {onLeave: function (args) {send("EVP_PKEY_get0");}});

var EVP_PKEY_get0_DH = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0_DH")
Interceptor.attach(EVP_PKEY_get0_DH, {onLeave: function (args) {send("EVP_PKEY_get0_DH");}});

var EVP_PKEY_get0_DSA = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0_DSA")
Interceptor.attach(EVP_PKEY_get0_DSA, {onLeave: function (args) {send("EVP_PKEY_get0_DSA");}});

var EVP_PKEY_get0_EC_KEY = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0_EC_KEY")
Interceptor.attach(EVP_PKEY_get0_EC_KEY, {onLeave: function (args) {send("EVP_PKEY_get0_EC_KEY");}});

var EVP_PKEY_get0_RSA = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0_RSA")
Interceptor.attach(EVP_PKEY_get0_RSA, {onLeave: function (args) {send("EVP_PKEY_get0_RSA");}});

var EVP_PKEY_get0_asn1 = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0_asn1")
Interceptor.attach(EVP_PKEY_get0_asn1, {onLeave: function (args) {send("EVP_PKEY_get0_asn1");}});

var EVP_PKEY_get0_hmac = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get0_hmac")
Interceptor.attach(EVP_PKEY_get0_hmac, {onLeave: function (args) {send("EVP_PKEY_get0_hmac");}});

var EVP_PKEY_get1_DH = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get1_DH")
Interceptor.attach(EVP_PKEY_get1_DH, {onLeave: function (args) {send("EVP_PKEY_get1_DH");}});

var EVP_PKEY_get1_DSA = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get1_DSA")
Interceptor.attach(EVP_PKEY_get1_DSA, {onLeave: function (args) {send("EVP_PKEY_get1_DSA");}});

var EVP_PKEY_get1_EC_KEY = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get1_EC_KEY")
Interceptor.attach(EVP_PKEY_get1_EC_KEY, {onLeave: function (args) {send("EVP_PKEY_get1_EC_KEY");}});

var EVP_PKEY_get1_RSA = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get1_RSA")
Interceptor.attach(EVP_PKEY_get1_RSA, {onLeave: function (args) {send("EVP_PKEY_get1_RSA");}});

var EVP_PKEY_get_attr = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get_attr")
Interceptor.attach(EVP_PKEY_get_attr, {onLeave: function (args) {send("EVP_PKEY_get_attr");}});

var EVP_PKEY_get_attr_by_NID = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get_attr_by_NID")
Interceptor.attach(EVP_PKEY_get_attr_by_NID, {onLeave: function (args) {send("EVP_PKEY_get_attr_by_NID");}});

var EVP_PKEY_get_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get_attr_by_OBJ")
Interceptor.attach(EVP_PKEY_get_attr_by_OBJ, {onLeave: function (args) {send("EVP_PKEY_get_attr_by_OBJ");}});

var EVP_PKEY_get_attr_count = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get_attr_count")
Interceptor.attach(EVP_PKEY_get_attr_count, {onLeave: function (args) {send("EVP_PKEY_get_attr_count");}});

var EVP_PKEY_get_default_digest_nid = Module.findExportByName("libcrypto.dll", "EVP_PKEY_get_default_digest_nid")
Interceptor.attach(EVP_PKEY_get_default_digest_nid, {onLeave: function (args) {send("EVP_PKEY_get_default_digest_nid");}});

var EVP_PKEY_id = Module.findExportByName("libcrypto.dll", "EVP_PKEY_id")
Interceptor.attach(EVP_PKEY_id, {onLeave: function (args) {send("EVP_PKEY_id");}});

var EVP_PKEY_keygen = Module.findExportByName("libcrypto.dll", "EVP_PKEY_keygen")
Interceptor.attach(EVP_PKEY_keygen, {onLeave: function (args) {send("EVP_PKEY_keygen");}});

var EVP_PKEY_keygen_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_keygen_init")
Interceptor.attach(EVP_PKEY_keygen_init, {onLeave: function (args) {send("EVP_PKEY_keygen_init");}});

var EVP_PKEY_meth_add0 = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_add0")
Interceptor.attach(EVP_PKEY_meth_add0, {onLeave: function (args) {send("EVP_PKEY_meth_add0");}});

var EVP_PKEY_meth_copy = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_copy")
Interceptor.attach(EVP_PKEY_meth_copy, {onLeave: function (args) {send("EVP_PKEY_meth_copy");}});

var EVP_PKEY_meth_find = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_find")
Interceptor.attach(EVP_PKEY_meth_find, {onLeave: function (args) {send("EVP_PKEY_meth_find");}});

var EVP_PKEY_meth_free = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_free")
Interceptor.attach(EVP_PKEY_meth_free, {onLeave: function (args) {send("EVP_PKEY_meth_free");}});

var EVP_PKEY_meth_get0_info = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_get0_info")
Interceptor.attach(EVP_PKEY_meth_get0_info, {onLeave: function (args) {send("EVP_PKEY_meth_get0_info");}});

var EVP_PKEY_meth_new = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_new")
Interceptor.attach(EVP_PKEY_meth_new, {onLeave: function (args) {send("EVP_PKEY_meth_new");}});

var EVP_PKEY_meth_set_cleanup = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_cleanup")
Interceptor.attach(EVP_PKEY_meth_set_cleanup, {onLeave: function (args) {send("EVP_PKEY_meth_set_cleanup");}});

var EVP_PKEY_meth_set_copy = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_copy")
Interceptor.attach(EVP_PKEY_meth_set_copy, {onLeave: function (args) {send("EVP_PKEY_meth_set_copy");}});

var EVP_PKEY_meth_set_ctrl = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_ctrl")
Interceptor.attach(EVP_PKEY_meth_set_ctrl, {onLeave: function (args) {send("EVP_PKEY_meth_set_ctrl");}});

var EVP_PKEY_meth_set_decrypt = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_decrypt")
Interceptor.attach(EVP_PKEY_meth_set_decrypt, {onLeave: function (args) {send("EVP_PKEY_meth_set_decrypt");}});

var EVP_PKEY_meth_set_derive = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_derive")
Interceptor.attach(EVP_PKEY_meth_set_derive, {onLeave: function (args) {send("EVP_PKEY_meth_set_derive");}});

var EVP_PKEY_meth_set_encrypt = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_encrypt")
Interceptor.attach(EVP_PKEY_meth_set_encrypt, {onLeave: function (args) {send("EVP_PKEY_meth_set_encrypt");}});

var EVP_PKEY_meth_set_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_init")
Interceptor.attach(EVP_PKEY_meth_set_init, {onLeave: function (args) {send("EVP_PKEY_meth_set_init");}});

var EVP_PKEY_meth_set_keygen = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_keygen")
Interceptor.attach(EVP_PKEY_meth_set_keygen, {onLeave: function (args) {send("EVP_PKEY_meth_set_keygen");}});

var EVP_PKEY_meth_set_paramgen = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_paramgen")
Interceptor.attach(EVP_PKEY_meth_set_paramgen, {onLeave: function (args) {send("EVP_PKEY_meth_set_paramgen");}});

var EVP_PKEY_meth_set_sign = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_sign")
Interceptor.attach(EVP_PKEY_meth_set_sign, {onLeave: function (args) {send("EVP_PKEY_meth_set_sign");}});

var EVP_PKEY_meth_set_signctx = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_signctx")
Interceptor.attach(EVP_PKEY_meth_set_signctx, {onLeave: function (args) {send("EVP_PKEY_meth_set_signctx");}});

var EVP_PKEY_meth_set_verify = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_verify")
Interceptor.attach(EVP_PKEY_meth_set_verify, {onLeave: function (args) {send("EVP_PKEY_meth_set_verify");}});

var EVP_PKEY_meth_set_verify_recover = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_verify_recover")
Interceptor.attach(EVP_PKEY_meth_set_verify_recover, {onLeave: function (args) {send("EVP_PKEY_meth_set_verify_recover");}});

var EVP_PKEY_meth_set_verifyctx = Module.findExportByName("libcrypto.dll", "EVP_PKEY_meth_set_verifyctx")
Interceptor.attach(EVP_PKEY_meth_set_verifyctx, {onLeave: function (args) {send("EVP_PKEY_meth_set_verifyctx");}});

var EVP_PKEY_missing_parameters = Module.findExportByName("libcrypto.dll", "EVP_PKEY_missing_parameters")
Interceptor.attach(EVP_PKEY_missing_parameters, {onLeave: function (args) {send("EVP_PKEY_missing_parameters");}});

var EVP_PKEY_new = Module.findExportByName("libcrypto.dll", "EVP_PKEY_new")
Interceptor.attach(EVP_PKEY_new, {onLeave: function (args) {send("EVP_PKEY_new");}});

var EVP_PKEY_new_CMAC_key = Module.findExportByName("libcrypto.dll", "EVP_PKEY_new_CMAC_key")
Interceptor.attach(EVP_PKEY_new_CMAC_key, {onLeave: function (args) {send("EVP_PKEY_new_CMAC_key");}});

var EVP_PKEY_new_mac_key = Module.findExportByName("libcrypto.dll", "EVP_PKEY_new_mac_key")
Interceptor.attach(EVP_PKEY_new_mac_key, {onLeave: function (args) {send("EVP_PKEY_new_mac_key");}});

var EVP_PKEY_paramgen = Module.findExportByName("libcrypto.dll", "EVP_PKEY_paramgen")
Interceptor.attach(EVP_PKEY_paramgen, {onLeave: function (args) {send("EVP_PKEY_paramgen");}});

var EVP_PKEY_paramgen_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_paramgen_init")
Interceptor.attach(EVP_PKEY_paramgen_init, {onLeave: function (args) {send("EVP_PKEY_paramgen_init");}});

var EVP_PKEY_print_params = Module.findExportByName("libcrypto.dll", "EVP_PKEY_print_params")
Interceptor.attach(EVP_PKEY_print_params, {onLeave: function (args) {send("EVP_PKEY_print_params");}});

var EVP_PKEY_print_private = Module.findExportByName("libcrypto.dll", "EVP_PKEY_print_private")
Interceptor.attach(EVP_PKEY_print_private, {onLeave: function (args) {send("EVP_PKEY_print_private");}});

var EVP_PKEY_print_public = Module.findExportByName("libcrypto.dll", "EVP_PKEY_print_public")
Interceptor.attach(EVP_PKEY_print_public, {onLeave: function (args) {send("EVP_PKEY_print_public");}});

var EVP_PKEY_save_parameters = Module.findExportByName("libcrypto.dll", "EVP_PKEY_save_parameters")
Interceptor.attach(EVP_PKEY_save_parameters, {onLeave: function (args) {send("EVP_PKEY_save_parameters");}});

var EVP_PKEY_set1_DH = Module.findExportByName("libcrypto.dll", "EVP_PKEY_set1_DH")
Interceptor.attach(EVP_PKEY_set1_DH, {onLeave: function (args) {send("EVP_PKEY_set1_DH");}});

var EVP_PKEY_set1_DSA = Module.findExportByName("libcrypto.dll", "EVP_PKEY_set1_DSA")
Interceptor.attach(EVP_PKEY_set1_DSA, {onLeave: function (args) {send("EVP_PKEY_set1_DSA");}});

var EVP_PKEY_set1_EC_KEY = Module.findExportByName("libcrypto.dll", "EVP_PKEY_set1_EC_KEY")
Interceptor.attach(EVP_PKEY_set1_EC_KEY, {onLeave: function (args) {send("EVP_PKEY_set1_EC_KEY");}});

var EVP_PKEY_set1_RSA = Module.findExportByName("libcrypto.dll", "EVP_PKEY_set1_RSA")
Interceptor.attach(EVP_PKEY_set1_RSA, {onLeave: function (args) {send("EVP_PKEY_set1_RSA");}});

var EVP_PKEY_set_type = Module.findExportByName("libcrypto.dll", "EVP_PKEY_set_type")
Interceptor.attach(EVP_PKEY_set_type, {onLeave: function (args) {send("EVP_PKEY_set_type");}});

var EVP_PKEY_set_type_str = Module.findExportByName("libcrypto.dll", "EVP_PKEY_set_type_str")
Interceptor.attach(EVP_PKEY_set_type_str, {onLeave: function (args) {send("EVP_PKEY_set_type_str");}});

var EVP_PKEY_sign = Module.findExportByName("libcrypto.dll", "EVP_PKEY_sign")
Interceptor.attach(EVP_PKEY_sign, {onLeave: function (args) {send("EVP_PKEY_sign");}});

var EVP_PKEY_sign_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_sign_init")
Interceptor.attach(EVP_PKEY_sign_init, {onLeave: function (args) {send("EVP_PKEY_sign_init");}});

var EVP_PKEY_size = Module.findExportByName("libcrypto.dll", "EVP_PKEY_size")
Interceptor.attach(EVP_PKEY_size, {onLeave: function (args) {send("EVP_PKEY_size");}});

var EVP_PKEY_type = Module.findExportByName("libcrypto.dll", "EVP_PKEY_type")
Interceptor.attach(EVP_PKEY_type, {onLeave: function (args) {send("EVP_PKEY_type");}});

var EVP_PKEY_up_ref = Module.findExportByName("libcrypto.dll", "EVP_PKEY_up_ref")
Interceptor.attach(EVP_PKEY_up_ref, {onLeave: function (args) {send("EVP_PKEY_up_ref");}});

var EVP_PKEY_verify = Module.findExportByName("libcrypto.dll", "EVP_PKEY_verify")
Interceptor.attach(EVP_PKEY_verify, {onLeave: function (args) {send("EVP_PKEY_verify");}});

var EVP_PKEY_verify_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_verify_init")
Interceptor.attach(EVP_PKEY_verify_init, {onLeave: function (args) {send("EVP_PKEY_verify_init");}});

var EVP_PKEY_verify_recover = Module.findExportByName("libcrypto.dll", "EVP_PKEY_verify_recover")
Interceptor.attach(EVP_PKEY_verify_recover, {onLeave: function (args) {send("EVP_PKEY_verify_recover");}});

var EVP_PKEY_verify_recover_init = Module.findExportByName("libcrypto.dll", "EVP_PKEY_verify_recover_init")
Interceptor.attach(EVP_PKEY_verify_recover_init, {onLeave: function (args) {send("EVP_PKEY_verify_recover_init");}});

var EVP_SealFinal = Module.findExportByName("libcrypto.dll", "EVP_SealFinal")
Interceptor.attach(EVP_SealFinal, {onLeave: function (args) {send("EVP_SealFinal");}});

var EVP_SealInit = Module.findExportByName("libcrypto.dll", "EVP_SealInit")
Interceptor.attach(EVP_SealInit, {onLeave: function (args) {send("EVP_SealInit");}});

var EVP_SignFinal = Module.findExportByName("libcrypto.dll", "EVP_SignFinal")
Interceptor.attach(EVP_SignFinal, {onLeave: function (args) {send("EVP_SignFinal");}});

var EVP_VerifyFinal = Module.findExportByName("libcrypto.dll", "EVP_VerifyFinal")
Interceptor.attach(EVP_VerifyFinal, {onLeave: function (args) {send("EVP_VerifyFinal");}});

var EVP_add_cipher = Module.findExportByName("libcrypto.dll", "EVP_add_cipher")
Interceptor.attach(EVP_add_cipher, {onLeave: function (args) {send("EVP_add_cipher");}});

var EVP_add_digest = Module.findExportByName("libcrypto.dll", "EVP_add_digest")
Interceptor.attach(EVP_add_digest, {onLeave: function (args) {send("EVP_add_digest");}});

var EVP_aead_aes_128_gcm = Module.findExportByName("libcrypto.dll", "EVP_aead_aes_128_gcm")
Interceptor.attach(EVP_aead_aes_128_gcm, {onLeave: function (args) {send("EVP_aead_aes_128_gcm");}});

var EVP_aead_aes_256_gcm = Module.findExportByName("libcrypto.dll", "EVP_aead_aes_256_gcm")
Interceptor.attach(EVP_aead_aes_256_gcm, {onLeave: function (args) {send("EVP_aead_aes_256_gcm");}});

var EVP_aead_chacha20_poly1305 = Module.findExportByName("libcrypto.dll", "EVP_aead_chacha20_poly1305")
Interceptor.attach(EVP_aead_chacha20_poly1305, {onLeave: function (args) {send("EVP_aead_chacha20_poly1305");}});

var EVP_aead_xchacha20_poly1305 = Module.findExportByName("libcrypto.dll", "EVP_aead_xchacha20_poly1305")
Interceptor.attach(EVP_aead_xchacha20_poly1305, {onLeave: function (args) {send("EVP_aead_xchacha20_poly1305");}});

var EVP_aes_128_cbc = Module.findExportByName("libcrypto.dll", "EVP_aes_128_cbc")
Interceptor.attach(EVP_aes_128_cbc, {onLeave: function (args) {send("EVP_aes_128_cbc");}});

var EVP_aes_128_cbc_hmac_sha1 = Module.findExportByName("libcrypto.dll", "EVP_aes_128_cbc_hmac_sha1")
Interceptor.attach(EVP_aes_128_cbc_hmac_sha1, {onLeave: function (args) {send("EVP_aes_128_cbc_hmac_sha1");}});

var EVP_aes_128_ccm = Module.findExportByName("libcrypto.dll", "EVP_aes_128_ccm")
Interceptor.attach(EVP_aes_128_ccm, {onLeave: function (args) {send("EVP_aes_128_ccm");}});

var EVP_aes_128_cfb = Module.findExportByName("libcrypto.dll", "EVP_aes_128_cfb")
Interceptor.attach(EVP_aes_128_cfb, {onLeave: function (args) {send("EVP_aes_128_cfb");}});

var EVP_aes_128_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_aes_128_cfb1")
Interceptor.attach(EVP_aes_128_cfb1, {onLeave: function (args) {send("EVP_aes_128_cfb1");}});

var EVP_aes_128_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_aes_128_cfb128")
Interceptor.attach(EVP_aes_128_cfb128, {onLeave: function (args) {send("EVP_aes_128_cfb128");}});

var EVP_aes_128_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_aes_128_cfb8")
Interceptor.attach(EVP_aes_128_cfb8, {onLeave: function (args) {send("EVP_aes_128_cfb8");}});

var EVP_aes_128_ctr = Module.findExportByName("libcrypto.dll", "EVP_aes_128_ctr")
Interceptor.attach(EVP_aes_128_ctr, {onLeave: function (args) {send("EVP_aes_128_ctr");}});

var EVP_aes_128_ecb = Module.findExportByName("libcrypto.dll", "EVP_aes_128_ecb")
Interceptor.attach(EVP_aes_128_ecb, {onLeave: function (args) {send("EVP_aes_128_ecb");}});

var EVP_aes_128_gcm = Module.findExportByName("libcrypto.dll", "EVP_aes_128_gcm")
Interceptor.attach(EVP_aes_128_gcm, {onLeave: function (args) {send("EVP_aes_128_gcm");}});

var EVP_aes_128_ofb = Module.findExportByName("libcrypto.dll", "EVP_aes_128_ofb")
Interceptor.attach(EVP_aes_128_ofb, {onLeave: function (args) {send("EVP_aes_128_ofb");}});

var EVP_aes_128_wrap = Module.findExportByName("libcrypto.dll", "EVP_aes_128_wrap")
Interceptor.attach(EVP_aes_128_wrap, {onLeave: function (args) {send("EVP_aes_128_wrap");}});

var EVP_aes_128_xts = Module.findExportByName("libcrypto.dll", "EVP_aes_128_xts")
Interceptor.attach(EVP_aes_128_xts, {onLeave: function (args) {send("EVP_aes_128_xts");}});

var EVP_aes_192_cbc = Module.findExportByName("libcrypto.dll", "EVP_aes_192_cbc")
Interceptor.attach(EVP_aes_192_cbc, {onLeave: function (args) {send("EVP_aes_192_cbc");}});

var EVP_aes_192_ccm = Module.findExportByName("libcrypto.dll", "EVP_aes_192_ccm")
Interceptor.attach(EVP_aes_192_ccm, {onLeave: function (args) {send("EVP_aes_192_ccm");}});

var EVP_aes_192_cfb = Module.findExportByName("libcrypto.dll", "EVP_aes_192_cfb")
Interceptor.attach(EVP_aes_192_cfb, {onLeave: function (args) {send("EVP_aes_192_cfb");}});

var EVP_aes_192_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_aes_192_cfb1")
Interceptor.attach(EVP_aes_192_cfb1, {onLeave: function (args) {send("EVP_aes_192_cfb1");}});

var EVP_aes_192_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_aes_192_cfb128")
Interceptor.attach(EVP_aes_192_cfb128, {onLeave: function (args) {send("EVP_aes_192_cfb128");}});

var EVP_aes_192_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_aes_192_cfb8")
Interceptor.attach(EVP_aes_192_cfb8, {onLeave: function (args) {send("EVP_aes_192_cfb8");}});

var EVP_aes_192_ctr = Module.findExportByName("libcrypto.dll", "EVP_aes_192_ctr")
Interceptor.attach(EVP_aes_192_ctr, {onLeave: function (args) {send("EVP_aes_192_ctr");}});

var EVP_aes_192_ecb = Module.findExportByName("libcrypto.dll", "EVP_aes_192_ecb")
Interceptor.attach(EVP_aes_192_ecb, {onLeave: function (args) {send("EVP_aes_192_ecb");}});

var EVP_aes_192_gcm = Module.findExportByName("libcrypto.dll", "EVP_aes_192_gcm")
Interceptor.attach(EVP_aes_192_gcm, {onLeave: function (args) {send("EVP_aes_192_gcm");}});

var EVP_aes_192_ofb = Module.findExportByName("libcrypto.dll", "EVP_aes_192_ofb")
Interceptor.attach(EVP_aes_192_ofb, {onLeave: function (args) {send("EVP_aes_192_ofb");}});

var EVP_aes_192_wrap = Module.findExportByName("libcrypto.dll", "EVP_aes_192_wrap")
Interceptor.attach(EVP_aes_192_wrap, {onLeave: function (args) {send("EVP_aes_192_wrap");}});

var EVP_aes_256_cbc = Module.findExportByName("libcrypto.dll", "EVP_aes_256_cbc")
Interceptor.attach(EVP_aes_256_cbc, {onLeave: function (args) {send("EVP_aes_256_cbc");}});

var EVP_aes_256_cbc_hmac_sha1 = Module.findExportByName("libcrypto.dll", "EVP_aes_256_cbc_hmac_sha1")
Interceptor.attach(EVP_aes_256_cbc_hmac_sha1, {onLeave: function (args) {send("EVP_aes_256_cbc_hmac_sha1");}});

var EVP_aes_256_ccm = Module.findExportByName("libcrypto.dll", "EVP_aes_256_ccm")
Interceptor.attach(EVP_aes_256_ccm, {onLeave: function (args) {send("EVP_aes_256_ccm");}});

var EVP_aes_256_cfb = Module.findExportByName("libcrypto.dll", "EVP_aes_256_cfb")
Interceptor.attach(EVP_aes_256_cfb, {onLeave: function (args) {send("EVP_aes_256_cfb");}});

var EVP_aes_256_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_aes_256_cfb1")
Interceptor.attach(EVP_aes_256_cfb1, {onLeave: function (args) {send("EVP_aes_256_cfb1");}});

var EVP_aes_256_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_aes_256_cfb128")
Interceptor.attach(EVP_aes_256_cfb128, {onLeave: function (args) {send("EVP_aes_256_cfb128");}});

var EVP_aes_256_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_aes_256_cfb8")
Interceptor.attach(EVP_aes_256_cfb8, {onLeave: function (args) {send("EVP_aes_256_cfb8");}});

var EVP_aes_256_ctr = Module.findExportByName("libcrypto.dll", "EVP_aes_256_ctr")
Interceptor.attach(EVP_aes_256_ctr, {onLeave: function (args) {send("EVP_aes_256_ctr");}});

var EVP_aes_256_ecb = Module.findExportByName("libcrypto.dll", "EVP_aes_256_ecb")
Interceptor.attach(EVP_aes_256_ecb, {onLeave: function (args) {send("EVP_aes_256_ecb");}});

var EVP_aes_256_gcm = Module.findExportByName("libcrypto.dll", "EVP_aes_256_gcm")
Interceptor.attach(EVP_aes_256_gcm, {onLeave: function (args) {send("EVP_aes_256_gcm");}});

var EVP_aes_256_ofb = Module.findExportByName("libcrypto.dll", "EVP_aes_256_ofb")
Interceptor.attach(EVP_aes_256_ofb, {onLeave: function (args) {send("EVP_aes_256_ofb");}});

var EVP_aes_256_wrap = Module.findExportByName("libcrypto.dll", "EVP_aes_256_wrap")
Interceptor.attach(EVP_aes_256_wrap, {onLeave: function (args) {send("EVP_aes_256_wrap");}});

var EVP_aes_256_xts = Module.findExportByName("libcrypto.dll", "EVP_aes_256_xts")
Interceptor.attach(EVP_aes_256_xts, {onLeave: function (args) {send("EVP_aes_256_xts");}});

var EVP_bf_cbc = Module.findExportByName("libcrypto.dll", "EVP_bf_cbc")
Interceptor.attach(EVP_bf_cbc, {onLeave: function (args) {send("EVP_bf_cbc");}});

var EVP_bf_cfb = Module.findExportByName("libcrypto.dll", "EVP_bf_cfb")
Interceptor.attach(EVP_bf_cfb, {onLeave: function (args) {send("EVP_bf_cfb");}});

var EVP_bf_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_bf_cfb64")
Interceptor.attach(EVP_bf_cfb64, {onLeave: function (args) {send("EVP_bf_cfb64");}});

var EVP_bf_ecb = Module.findExportByName("libcrypto.dll", "EVP_bf_ecb")
Interceptor.attach(EVP_bf_ecb, {onLeave: function (args) {send("EVP_bf_ecb");}});

var EVP_bf_ofb = Module.findExportByName("libcrypto.dll", "EVP_bf_ofb")
Interceptor.attach(EVP_bf_ofb, {onLeave: function (args) {send("EVP_bf_ofb");}});

var EVP_camellia_128_cbc = Module.findExportByName("libcrypto.dll", "EVP_camellia_128_cbc")
Interceptor.attach(EVP_camellia_128_cbc, {onLeave: function (args) {send("EVP_camellia_128_cbc");}});

var EVP_camellia_128_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_camellia_128_cfb1")
Interceptor.attach(EVP_camellia_128_cfb1, {onLeave: function (args) {send("EVP_camellia_128_cfb1");}});

var EVP_camellia_128_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_camellia_128_cfb128")
Interceptor.attach(EVP_camellia_128_cfb128, {onLeave: function (args) {send("EVP_camellia_128_cfb128");}});

var EVP_camellia_128_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_camellia_128_cfb8")
Interceptor.attach(EVP_camellia_128_cfb8, {onLeave: function (args) {send("EVP_camellia_128_cfb8");}});

var EVP_camellia_128_ecb = Module.findExportByName("libcrypto.dll", "EVP_camellia_128_ecb")
Interceptor.attach(EVP_camellia_128_ecb, {onLeave: function (args) {send("EVP_camellia_128_ecb");}});

var EVP_camellia_128_ofb = Module.findExportByName("libcrypto.dll", "EVP_camellia_128_ofb")
Interceptor.attach(EVP_camellia_128_ofb, {onLeave: function (args) {send("EVP_camellia_128_ofb");}});

var EVP_camellia_192_cbc = Module.findExportByName("libcrypto.dll", "EVP_camellia_192_cbc")
Interceptor.attach(EVP_camellia_192_cbc, {onLeave: function (args) {send("EVP_camellia_192_cbc");}});

var EVP_camellia_192_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_camellia_192_cfb1")
Interceptor.attach(EVP_camellia_192_cfb1, {onLeave: function (args) {send("EVP_camellia_192_cfb1");}});

var EVP_camellia_192_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_camellia_192_cfb128")
Interceptor.attach(EVP_camellia_192_cfb128, {onLeave: function (args) {send("EVP_camellia_192_cfb128");}});

var EVP_camellia_192_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_camellia_192_cfb8")
Interceptor.attach(EVP_camellia_192_cfb8, {onLeave: function (args) {send("EVP_camellia_192_cfb8");}});

var EVP_camellia_192_ecb = Module.findExportByName("libcrypto.dll", "EVP_camellia_192_ecb")
Interceptor.attach(EVP_camellia_192_ecb, {onLeave: function (args) {send("EVP_camellia_192_ecb");}});

var EVP_camellia_192_ofb = Module.findExportByName("libcrypto.dll", "EVP_camellia_192_ofb")
Interceptor.attach(EVP_camellia_192_ofb, {onLeave: function (args) {send("EVP_camellia_192_ofb");}});

var EVP_camellia_256_cbc = Module.findExportByName("libcrypto.dll", "EVP_camellia_256_cbc")
Interceptor.attach(EVP_camellia_256_cbc, {onLeave: function (args) {send("EVP_camellia_256_cbc");}});

var EVP_camellia_256_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_camellia_256_cfb1")
Interceptor.attach(EVP_camellia_256_cfb1, {onLeave: function (args) {send("EVP_camellia_256_cfb1");}});

var EVP_camellia_256_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_camellia_256_cfb128")
Interceptor.attach(EVP_camellia_256_cfb128, {onLeave: function (args) {send("EVP_camellia_256_cfb128");}});

var EVP_camellia_256_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_camellia_256_cfb8")
Interceptor.attach(EVP_camellia_256_cfb8, {onLeave: function (args) {send("EVP_camellia_256_cfb8");}});

var EVP_camellia_256_ecb = Module.findExportByName("libcrypto.dll", "EVP_camellia_256_ecb")
Interceptor.attach(EVP_camellia_256_ecb, {onLeave: function (args) {send("EVP_camellia_256_ecb");}});

var EVP_camellia_256_ofb = Module.findExportByName("libcrypto.dll", "EVP_camellia_256_ofb")
Interceptor.attach(EVP_camellia_256_ofb, {onLeave: function (args) {send("EVP_camellia_256_ofb");}});

var EVP_cast5_cbc = Module.findExportByName("libcrypto.dll", "EVP_cast5_cbc")
Interceptor.attach(EVP_cast5_cbc, {onLeave: function (args) {send("EVP_cast5_cbc");}});

var EVP_cast5_cfb = Module.findExportByName("libcrypto.dll", "EVP_cast5_cfb")
Interceptor.attach(EVP_cast5_cfb, {onLeave: function (args) {send("EVP_cast5_cfb");}});

var EVP_cast5_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_cast5_cfb64")
Interceptor.attach(EVP_cast5_cfb64, {onLeave: function (args) {send("EVP_cast5_cfb64");}});

var EVP_cast5_ecb = Module.findExportByName("libcrypto.dll", "EVP_cast5_ecb")
Interceptor.attach(EVP_cast5_ecb, {onLeave: function (args) {send("EVP_cast5_ecb");}});

var EVP_cast5_ofb = Module.findExportByName("libcrypto.dll", "EVP_cast5_ofb")
Interceptor.attach(EVP_cast5_ofb, {onLeave: function (args) {send("EVP_cast5_ofb");}});

var EVP_chacha20 = Module.findExportByName("libcrypto.dll", "EVP_chacha20")
Interceptor.attach(EVP_chacha20, {onLeave: function (args) {send("EVP_chacha20");}});

var EVP_cleanup = Module.findExportByName("libcrypto.dll", "EVP_cleanup")
Interceptor.attach(EVP_cleanup, {onLeave: function (args) {send("EVP_cleanup");}});

var EVP_des_cbc = Module.findExportByName("libcrypto.dll", "EVP_des_cbc")
Interceptor.attach(EVP_des_cbc, {onLeave: function (args) {send("EVP_des_cbc");}});

var EVP_des_cfb = Module.findExportByName("libcrypto.dll", "EVP_des_cfb")
Interceptor.attach(EVP_des_cfb, {onLeave: function (args) {send("EVP_des_cfb");}});

var EVP_des_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_des_cfb1")
Interceptor.attach(EVP_des_cfb1, {onLeave: function (args) {send("EVP_des_cfb1");}});

var EVP_des_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_des_cfb64")
Interceptor.attach(EVP_des_cfb64, {onLeave: function (args) {send("EVP_des_cfb64");}});

var EVP_des_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_des_cfb8")
Interceptor.attach(EVP_des_cfb8, {onLeave: function (args) {send("EVP_des_cfb8");}});

var EVP_des_ecb = Module.findExportByName("libcrypto.dll", "EVP_des_ecb")
Interceptor.attach(EVP_des_ecb, {onLeave: function (args) {send("EVP_des_ecb");}});

var EVP_des_ede = Module.findExportByName("libcrypto.dll", "EVP_des_ede")
Interceptor.attach(EVP_des_ede, {onLeave: function (args) {send("EVP_des_ede");}});

var EVP_des_ede3 = Module.findExportByName("libcrypto.dll", "EVP_des_ede3")
Interceptor.attach(EVP_des_ede3, {onLeave: function (args) {send("EVP_des_ede3");}});

var EVP_des_ede3_cbc = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_cbc")
Interceptor.attach(EVP_des_ede3_cbc, {onLeave: function (args) {send("EVP_des_ede3_cbc");}});

var EVP_des_ede3_cfb = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_cfb")
Interceptor.attach(EVP_des_ede3_cfb, {onLeave: function (args) {send("EVP_des_ede3_cfb");}});

var EVP_des_ede3_cfb1 = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_cfb1")
Interceptor.attach(EVP_des_ede3_cfb1, {onLeave: function (args) {send("EVP_des_ede3_cfb1");}});

var EVP_des_ede3_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_cfb64")
Interceptor.attach(EVP_des_ede3_cfb64, {onLeave: function (args) {send("EVP_des_ede3_cfb64");}});

var EVP_des_ede3_cfb8 = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_cfb8")
Interceptor.attach(EVP_des_ede3_cfb8, {onLeave: function (args) {send("EVP_des_ede3_cfb8");}});

var EVP_des_ede3_ecb = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_ecb")
Interceptor.attach(EVP_des_ede3_ecb, {onLeave: function (args) {send("EVP_des_ede3_ecb");}});

var EVP_des_ede3_ofb = Module.findExportByName("libcrypto.dll", "EVP_des_ede3_ofb")
Interceptor.attach(EVP_des_ede3_ofb, {onLeave: function (args) {send("EVP_des_ede3_ofb");}});

var EVP_des_ede_cbc = Module.findExportByName("libcrypto.dll", "EVP_des_ede_cbc")
Interceptor.attach(EVP_des_ede_cbc, {onLeave: function (args) {send("EVP_des_ede_cbc");}});

var EVP_des_ede_cfb = Module.findExportByName("libcrypto.dll", "EVP_des_ede_cfb")
Interceptor.attach(EVP_des_ede_cfb, {onLeave: function (args) {send("EVP_des_ede_cfb");}});

var EVP_des_ede_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_des_ede_cfb64")
Interceptor.attach(EVP_des_ede_cfb64, {onLeave: function (args) {send("EVP_des_ede_cfb64");}});

var EVP_des_ede_ecb = Module.findExportByName("libcrypto.dll", "EVP_des_ede_ecb")
Interceptor.attach(EVP_des_ede_ecb, {onLeave: function (args) {send("EVP_des_ede_ecb");}});

var EVP_des_ede_ofb = Module.findExportByName("libcrypto.dll", "EVP_des_ede_ofb")
Interceptor.attach(EVP_des_ede_ofb, {onLeave: function (args) {send("EVP_des_ede_ofb");}});

var EVP_des_ofb = Module.findExportByName("libcrypto.dll", "EVP_des_ofb")
Interceptor.attach(EVP_des_ofb, {onLeave: function (args) {send("EVP_des_ofb");}});

var EVP_desx_cbc = Module.findExportByName("libcrypto.dll", "EVP_desx_cbc")
Interceptor.attach(EVP_desx_cbc, {onLeave: function (args) {send("EVP_desx_cbc");}});

var EVP_dss = Module.findExportByName("libcrypto.dll", "EVP_dss")
Interceptor.attach(EVP_dss, {onLeave: function (args) {send("EVP_dss");}});

var EVP_dss1 = Module.findExportByName("libcrypto.dll", "EVP_dss1")
Interceptor.attach(EVP_dss1, {onLeave: function (args) {send("EVP_dss1");}});

var EVP_ecdsa = Module.findExportByName("libcrypto.dll", "EVP_ecdsa")
Interceptor.attach(EVP_ecdsa, {onLeave: function (args) {send("EVP_ecdsa");}});

var EVP_enc_null = Module.findExportByName("libcrypto.dll", "EVP_enc_null")
Interceptor.attach(EVP_enc_null, {onLeave: function (args) {send("EVP_enc_null");}});

var EVP_get_cipherbyname = Module.findExportByName("libcrypto.dll", "EVP_get_cipherbyname")
Interceptor.attach(EVP_get_cipherbyname, {onLeave: function (args) {send("EVP_get_cipherbyname");}});

var EVP_get_digestbyname = Module.findExportByName("libcrypto.dll", "EVP_get_digestbyname")
Interceptor.attach(EVP_get_digestbyname, {onLeave: function (args) {send("EVP_get_digestbyname");}});

var EVP_get_pw_prompt = Module.findExportByName("libcrypto.dll", "EVP_get_pw_prompt")
Interceptor.attach(EVP_get_pw_prompt, {onLeave: function (args) {send("EVP_get_pw_prompt");}});

var EVP_gost2814789_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_gost2814789_cfb64")
Interceptor.attach(EVP_gost2814789_cfb64, {onLeave: function (args) {send("EVP_gost2814789_cfb64");}});

var EVP_gost2814789_cnt = Module.findExportByName("libcrypto.dll", "EVP_gost2814789_cnt")
Interceptor.attach(EVP_gost2814789_cnt, {onLeave: function (args) {send("EVP_gost2814789_cnt");}});

var EVP_gost2814789_ecb = Module.findExportByName("libcrypto.dll", "EVP_gost2814789_ecb")
Interceptor.attach(EVP_gost2814789_ecb, {onLeave: function (args) {send("EVP_gost2814789_ecb");}});

var EVP_gost2814789imit = Module.findExportByName("libcrypto.dll", "EVP_gost2814789imit")
Interceptor.attach(EVP_gost2814789imit, {onLeave: function (args) {send("EVP_gost2814789imit");}});

var EVP_gostr341194 = Module.findExportByName("libcrypto.dll", "EVP_gostr341194")
Interceptor.attach(EVP_gostr341194, {onLeave: function (args) {send("EVP_gostr341194");}});

var EVP_idea_cbc = Module.findExportByName("libcrypto.dll", "EVP_idea_cbc")
Interceptor.attach(EVP_idea_cbc, {onLeave: function (args) {send("EVP_idea_cbc");}});

var EVP_idea_cfb = Module.findExportByName("libcrypto.dll", "EVP_idea_cfb")
Interceptor.attach(EVP_idea_cfb, {onLeave: function (args) {send("EVP_idea_cfb");}});

var EVP_idea_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_idea_cfb64")
Interceptor.attach(EVP_idea_cfb64, {onLeave: function (args) {send("EVP_idea_cfb64");}});

var EVP_idea_ecb = Module.findExportByName("libcrypto.dll", "EVP_idea_ecb")
Interceptor.attach(EVP_idea_ecb, {onLeave: function (args) {send("EVP_idea_ecb");}});

var EVP_idea_ofb = Module.findExportByName("libcrypto.dll", "EVP_idea_ofb")
Interceptor.attach(EVP_idea_ofb, {onLeave: function (args) {send("EVP_idea_ofb");}});

var EVP_md4 = Module.findExportByName("libcrypto.dll", "EVP_md4")
Interceptor.attach(EVP_md4, {onLeave: function (args) {send("EVP_md4");}});

var EVP_md5 = Module.findExportByName("libcrypto.dll", "EVP_md5")
Interceptor.attach(EVP_md5, {onLeave: function (args) {send("EVP_md5");}});

var EVP_md5_sha1 = Module.findExportByName("libcrypto.dll", "EVP_md5_sha1")
Interceptor.attach(EVP_md5_sha1, {onLeave: function (args) {send("EVP_md5_sha1");}});

var EVP_md_null = Module.findExportByName("libcrypto.dll", "EVP_md_null")
Interceptor.attach(EVP_md_null, {onLeave: function (args) {send("EVP_md_null");}});

var EVP_rc2_40_cbc = Module.findExportByName("libcrypto.dll", "EVP_rc2_40_cbc")
Interceptor.attach(EVP_rc2_40_cbc, {onLeave: function (args) {send("EVP_rc2_40_cbc");}});

var EVP_rc2_64_cbc = Module.findExportByName("libcrypto.dll", "EVP_rc2_64_cbc")
Interceptor.attach(EVP_rc2_64_cbc, {onLeave: function (args) {send("EVP_rc2_64_cbc");}});

var EVP_rc2_cbc = Module.findExportByName("libcrypto.dll", "EVP_rc2_cbc")
Interceptor.attach(EVP_rc2_cbc, {onLeave: function (args) {send("EVP_rc2_cbc");}});

var EVP_rc2_cfb = Module.findExportByName("libcrypto.dll", "EVP_rc2_cfb")
Interceptor.attach(EVP_rc2_cfb, {onLeave: function (args) {send("EVP_rc2_cfb");}});

var EVP_rc2_cfb64 = Module.findExportByName("libcrypto.dll", "EVP_rc2_cfb64")
Interceptor.attach(EVP_rc2_cfb64, {onLeave: function (args) {send("EVP_rc2_cfb64");}});

var EVP_rc2_ecb = Module.findExportByName("libcrypto.dll", "EVP_rc2_ecb")
Interceptor.attach(EVP_rc2_ecb, {onLeave: function (args) {send("EVP_rc2_ecb");}});

var EVP_rc2_ofb = Module.findExportByName("libcrypto.dll", "EVP_rc2_ofb")
Interceptor.attach(EVP_rc2_ofb, {onLeave: function (args) {send("EVP_rc2_ofb");}});

var EVP_rc4 = Module.findExportByName("libcrypto.dll", "EVP_rc4")
Interceptor.attach(EVP_rc4, {onLeave: function (args) {send("EVP_rc4");}});

var EVP_rc4_40 = Module.findExportByName("libcrypto.dll", "EVP_rc4_40")
Interceptor.attach(EVP_rc4_40, {onLeave: function (args) {send("EVP_rc4_40");}});

var EVP_rc4_hmac_md5 = Module.findExportByName("libcrypto.dll", "EVP_rc4_hmac_md5")
Interceptor.attach(EVP_rc4_hmac_md5, {onLeave: function (args) {send("EVP_rc4_hmac_md5");}});

var EVP_read_pw_string = Module.findExportByName("libcrypto.dll", "EVP_read_pw_string")
Interceptor.attach(EVP_read_pw_string, {onLeave: function (args) {send("EVP_read_pw_string");}});

var EVP_read_pw_string_min = Module.findExportByName("libcrypto.dll", "EVP_read_pw_string_min")
Interceptor.attach(EVP_read_pw_string_min, {onLeave: function (args) {send("EVP_read_pw_string_min");}});

var EVP_ripemd160 = Module.findExportByName("libcrypto.dll", "EVP_ripemd160")
Interceptor.attach(EVP_ripemd160, {onLeave: function (args) {send("EVP_ripemd160");}});

var EVP_set_pw_prompt = Module.findExportByName("libcrypto.dll", "EVP_set_pw_prompt")
Interceptor.attach(EVP_set_pw_prompt, {onLeave: function (args) {send("EVP_set_pw_prompt");}});

var EVP_sha1 = Module.findExportByName("libcrypto.dll", "EVP_sha1")
Interceptor.attach(EVP_sha1, {onLeave: function (args) {send("EVP_sha1");}});

var EVP_sha224 = Module.findExportByName("libcrypto.dll", "EVP_sha224")
Interceptor.attach(EVP_sha224, {onLeave: function (args) {send("EVP_sha224");}});

var EVP_sha256 = Module.findExportByName("libcrypto.dll", "EVP_sha256")
Interceptor.attach(EVP_sha256, {onLeave: function (args) {send("EVP_sha256");}});

var EVP_sha384 = Module.findExportByName("libcrypto.dll", "EVP_sha384")
Interceptor.attach(EVP_sha384, {onLeave: function (args) {send("EVP_sha384");}});

var EVP_sha512 = Module.findExportByName("libcrypto.dll", "EVP_sha512")
Interceptor.attach(EVP_sha512, {onLeave: function (args) {send("EVP_sha512");}});

var EVP_sm3 = Module.findExportByName("libcrypto.dll", "EVP_sm3")
Interceptor.attach(EVP_sm3, {onLeave: function (args) {send("EVP_sm3");}});

var EVP_sm4_cbc = Module.findExportByName("libcrypto.dll", "EVP_sm4_cbc")
Interceptor.attach(EVP_sm4_cbc, {onLeave: function (args) {send("EVP_sm4_cbc");}});

var EVP_sm4_cfb128 = Module.findExportByName("libcrypto.dll", "EVP_sm4_cfb128")
Interceptor.attach(EVP_sm4_cfb128, {onLeave: function (args) {send("EVP_sm4_cfb128");}});

var EVP_sm4_ctr = Module.findExportByName("libcrypto.dll", "EVP_sm4_ctr")
Interceptor.attach(EVP_sm4_ctr, {onLeave: function (args) {send("EVP_sm4_ctr");}});

var EVP_sm4_ecb = Module.findExportByName("libcrypto.dll", "EVP_sm4_ecb")
Interceptor.attach(EVP_sm4_ecb, {onLeave: function (args) {send("EVP_sm4_ecb");}});

var EVP_sm4_ofb = Module.findExportByName("libcrypto.dll", "EVP_sm4_ofb")
Interceptor.attach(EVP_sm4_ofb, {onLeave: function (args) {send("EVP_sm4_ofb");}});

var EVP_streebog256 = Module.findExportByName("libcrypto.dll", "EVP_streebog256")
Interceptor.attach(EVP_streebog256, {onLeave: function (args) {send("EVP_streebog256");}});

var EVP_streebog512 = Module.findExportByName("libcrypto.dll", "EVP_streebog512")
Interceptor.attach(EVP_streebog512, {onLeave: function (args) {send("EVP_streebog512");}});

var EVP_whirlpool = Module.findExportByName("libcrypto.dll", "EVP_whirlpool")
Interceptor.attach(EVP_whirlpool, {onLeave: function (args) {send("EVP_whirlpool");}});

var EXTENDED_KEY_USAGE_free = Module.findExportByName("libcrypto.dll", "EXTENDED_KEY_USAGE_free")
Interceptor.attach(EXTENDED_KEY_USAGE_free, {onLeave: function (args) {send("EXTENDED_KEY_USAGE_free");}});

var EXTENDED_KEY_USAGE_it = Module.findExportByName("libcrypto.dll", "EXTENDED_KEY_USAGE_it")
Interceptor.attach(EXTENDED_KEY_USAGE_it, {onLeave: function (args) {send("EXTENDED_KEY_USAGE_it");}});

var EXTENDED_KEY_USAGE_new = Module.findExportByName("libcrypto.dll", "EXTENDED_KEY_USAGE_new")
Interceptor.attach(EXTENDED_KEY_USAGE_new, {onLeave: function (args) {send("EXTENDED_KEY_USAGE_new");}});

var GENERAL_NAMES_free = Module.findExportByName("libcrypto.dll", "GENERAL_NAMES_free")
Interceptor.attach(GENERAL_NAMES_free, {onLeave: function (args) {send("GENERAL_NAMES_free");}});

var GENERAL_NAMES_it = Module.findExportByName("libcrypto.dll", "GENERAL_NAMES_it")
Interceptor.attach(GENERAL_NAMES_it, {onLeave: function (args) {send("GENERAL_NAMES_it");}});

var GENERAL_NAMES_new = Module.findExportByName("libcrypto.dll", "GENERAL_NAMES_new")
Interceptor.attach(GENERAL_NAMES_new, {onLeave: function (args) {send("GENERAL_NAMES_new");}});

var GENERAL_NAME_cmp = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_cmp")
Interceptor.attach(GENERAL_NAME_cmp, {onLeave: function (args) {send("GENERAL_NAME_cmp");}});

var GENERAL_NAME_dup = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_dup")
Interceptor.attach(GENERAL_NAME_dup, {onLeave: function (args) {send("GENERAL_NAME_dup");}});

var GENERAL_NAME_free = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_free")
Interceptor.attach(GENERAL_NAME_free, {onLeave: function (args) {send("GENERAL_NAME_free");}});

var GENERAL_NAME_get0_otherName = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_get0_otherName")
Interceptor.attach(GENERAL_NAME_get0_otherName, {onLeave: function (args) {send("GENERAL_NAME_get0_otherName");}});

var GENERAL_NAME_get0_value = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_get0_value")
Interceptor.attach(GENERAL_NAME_get0_value, {onLeave: function (args) {send("GENERAL_NAME_get0_value");}});

var GENERAL_NAME_it = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_it")
Interceptor.attach(GENERAL_NAME_it, {onLeave: function (args) {send("GENERAL_NAME_it");}});

var GENERAL_NAME_new = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_new")
Interceptor.attach(GENERAL_NAME_new, {onLeave: function (args) {send("GENERAL_NAME_new");}});

var GENERAL_NAME_print = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_print")
Interceptor.attach(GENERAL_NAME_print, {onLeave: function (args) {send("GENERAL_NAME_print");}});

var GENERAL_NAME_set0_othername = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_set0_othername")
Interceptor.attach(GENERAL_NAME_set0_othername, {onLeave: function (args) {send("GENERAL_NAME_set0_othername");}});

var GENERAL_NAME_set0_value = Module.findExportByName("libcrypto.dll", "GENERAL_NAME_set0_value")
Interceptor.attach(GENERAL_NAME_set0_value, {onLeave: function (args) {send("GENERAL_NAME_set0_value");}});

var GENERAL_SUBTREE_free = Module.findExportByName("libcrypto.dll", "GENERAL_SUBTREE_free")
Interceptor.attach(GENERAL_SUBTREE_free, {onLeave: function (args) {send("GENERAL_SUBTREE_free");}});

var GENERAL_SUBTREE_it = Module.findExportByName("libcrypto.dll", "GENERAL_SUBTREE_it")
Interceptor.attach(GENERAL_SUBTREE_it, {onLeave: function (args) {send("GENERAL_SUBTREE_it");}});

var GENERAL_SUBTREE_new = Module.findExportByName("libcrypto.dll", "GENERAL_SUBTREE_new")
Interceptor.attach(GENERAL_SUBTREE_new, {onLeave: function (args) {send("GENERAL_SUBTREE_new");}});

var GOST2814789IMIT = Module.findExportByName("libcrypto.dll", "GOST2814789IMIT")
Interceptor.attach(GOST2814789IMIT, {onLeave: function (args) {send("GOST2814789IMIT");}});

var GOST2814789IMIT_Final = Module.findExportByName("libcrypto.dll", "GOST2814789IMIT_Final")
Interceptor.attach(GOST2814789IMIT_Final, {onLeave: function (args) {send("GOST2814789IMIT_Final");}});

var GOST2814789IMIT_Init = Module.findExportByName("libcrypto.dll", "GOST2814789IMIT_Init")
Interceptor.attach(GOST2814789IMIT_Init, {onLeave: function (args) {send("GOST2814789IMIT_Init");}});

var GOST2814789IMIT_Transform = Module.findExportByName("libcrypto.dll", "GOST2814789IMIT_Transform")
Interceptor.attach(GOST2814789IMIT_Transform, {onLeave: function (args) {send("GOST2814789IMIT_Transform");}});

var GOST2814789IMIT_Update = Module.findExportByName("libcrypto.dll", "GOST2814789IMIT_Update")
Interceptor.attach(GOST2814789IMIT_Update, {onLeave: function (args) {send("GOST2814789IMIT_Update");}});

var GOSTR341194 = Module.findExportByName("libcrypto.dll", "GOSTR341194")
Interceptor.attach(GOSTR341194, {onLeave: function (args) {send("GOSTR341194");}});

var GOSTR341194_Final = Module.findExportByName("libcrypto.dll", "GOSTR341194_Final")
Interceptor.attach(GOSTR341194_Final, {onLeave: function (args) {send("GOSTR341194_Final");}});

var GOSTR341194_Init = Module.findExportByName("libcrypto.dll", "GOSTR341194_Init")
Interceptor.attach(GOSTR341194_Init, {onLeave: function (args) {send("GOSTR341194_Init");}});

var GOSTR341194_Transform = Module.findExportByName("libcrypto.dll", "GOSTR341194_Transform")
Interceptor.attach(GOSTR341194_Transform, {onLeave: function (args) {send("GOSTR341194_Transform");}});

var GOSTR341194_Update = Module.findExportByName("libcrypto.dll", "GOSTR341194_Update")
Interceptor.attach(GOSTR341194_Update, {onLeave: function (args) {send("GOSTR341194_Update");}});

var GOST_CIPHER_PARAMS_free = Module.findExportByName("libcrypto.dll", "GOST_CIPHER_PARAMS_free")
Interceptor.attach(GOST_CIPHER_PARAMS_free, {onLeave: function (args) {send("GOST_CIPHER_PARAMS_free");}});

var GOST_CIPHER_PARAMS_it = Module.findExportByName("libcrypto.dll", "GOST_CIPHER_PARAMS_it")
Interceptor.attach(GOST_CIPHER_PARAMS_it, {onLeave: function (args) {send("GOST_CIPHER_PARAMS_it");}});

var GOST_CIPHER_PARAMS_new = Module.findExportByName("libcrypto.dll", "GOST_CIPHER_PARAMS_new")
Interceptor.attach(GOST_CIPHER_PARAMS_new, {onLeave: function (args) {send("GOST_CIPHER_PARAMS_new");}});

var GOST_KEY_check_key = Module.findExportByName("libcrypto.dll", "GOST_KEY_check_key")
Interceptor.attach(GOST_KEY_check_key, {onLeave: function (args) {send("GOST_KEY_check_key");}});

var GOST_KEY_free = Module.findExportByName("libcrypto.dll", "GOST_KEY_free")
Interceptor.attach(GOST_KEY_free, {onLeave: function (args) {send("GOST_KEY_free");}});

var GOST_KEY_get0_group = Module.findExportByName("libcrypto.dll", "GOST_KEY_get0_group")
Interceptor.attach(GOST_KEY_get0_group, {onLeave: function (args) {send("GOST_KEY_get0_group");}});

var GOST_KEY_get0_private_key = Module.findExportByName("libcrypto.dll", "GOST_KEY_get0_private_key")
Interceptor.attach(GOST_KEY_get0_private_key, {onLeave: function (args) {send("GOST_KEY_get0_private_key");}});

var GOST_KEY_get0_public_key = Module.findExportByName("libcrypto.dll", "GOST_KEY_get0_public_key")
Interceptor.attach(GOST_KEY_get0_public_key, {onLeave: function (args) {send("GOST_KEY_get0_public_key");}});

var GOST_KEY_get_digest = Module.findExportByName("libcrypto.dll", "GOST_KEY_get_digest")
Interceptor.attach(GOST_KEY_get_digest, {onLeave: function (args) {send("GOST_KEY_get_digest");}});

var GOST_KEY_get_size = Module.findExportByName("libcrypto.dll", "GOST_KEY_get_size")
Interceptor.attach(GOST_KEY_get_size, {onLeave: function (args) {send("GOST_KEY_get_size");}});

var GOST_KEY_new = Module.findExportByName("libcrypto.dll", "GOST_KEY_new")
Interceptor.attach(GOST_KEY_new, {onLeave: function (args) {send("GOST_KEY_new");}});

var GOST_KEY_set_digest = Module.findExportByName("libcrypto.dll", "GOST_KEY_set_digest")
Interceptor.attach(GOST_KEY_set_digest, {onLeave: function (args) {send("GOST_KEY_set_digest");}});

var GOST_KEY_set_group = Module.findExportByName("libcrypto.dll", "GOST_KEY_set_group")
Interceptor.attach(GOST_KEY_set_group, {onLeave: function (args) {send("GOST_KEY_set_group");}});

var GOST_KEY_set_private_key = Module.findExportByName("libcrypto.dll", "GOST_KEY_set_private_key")
Interceptor.attach(GOST_KEY_set_private_key, {onLeave: function (args) {send("GOST_KEY_set_private_key");}});

var GOST_KEY_set_public_key = Module.findExportByName("libcrypto.dll", "GOST_KEY_set_public_key")
Interceptor.attach(GOST_KEY_set_public_key, {onLeave: function (args) {send("GOST_KEY_set_public_key");}});

var GOST_KEY_set_public_key_affine_coordinates = Module.findExportByName("libcrypto.dll", "GOST_KEY_set_public_key_affine_coordinates")
Interceptor.attach(GOST_KEY_set_public_key_affine_coordinates, {onLeave: function (args) {send("GOST_KEY_set_public_key_affine_coordinates");}});

var Gost2814789_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "Gost2814789_cfb64_encrypt")
Interceptor.attach(Gost2814789_cfb64_encrypt, {onLeave: function (args) {send("Gost2814789_cfb64_encrypt");}});

var Gost2814789_cnt_encrypt = Module.findExportByName("libcrypto.dll", "Gost2814789_cnt_encrypt")
Interceptor.attach(Gost2814789_cnt_encrypt, {onLeave: function (args) {send("Gost2814789_cnt_encrypt");}});

var Gost2814789_ecb_encrypt = Module.findExportByName("libcrypto.dll", "Gost2814789_ecb_encrypt")
Interceptor.attach(Gost2814789_ecb_encrypt, {onLeave: function (args) {send("Gost2814789_ecb_encrypt");}});

var Gost2814789_set_key = Module.findExportByName("libcrypto.dll", "Gost2814789_set_key")
Interceptor.attach(Gost2814789_set_key, {onLeave: function (args) {send("Gost2814789_set_key");}});

var Gost2814789_set_sbox = Module.findExportByName("libcrypto.dll", "Gost2814789_set_sbox")
Interceptor.attach(Gost2814789_set_sbox, {onLeave: function (args) {send("Gost2814789_set_sbox");}});

var HKDF = Module.findExportByName("libcrypto.dll", "HKDF")
Interceptor.attach(HKDF, {onLeave: function (args) {send("HKDF");}});

var HKDF_expand = Module.findExportByName("libcrypto.dll", "HKDF_expand")
Interceptor.attach(HKDF_expand, {onLeave: function (args) {send("HKDF_expand");}});

var HKDF_extract = Module.findExportByName("libcrypto.dll", "HKDF_extract")
Interceptor.attach(HKDF_extract, {onLeave: function (args) {send("HKDF_extract");}});

var HMAC = Module.findExportByName("libcrypto.dll", "HMAC")
Interceptor.attach(HMAC, {onLeave: function (args) {send("HMAC");}});

var HMAC_CTX_cleanup = Module.findExportByName("libcrypto.dll", "HMAC_CTX_cleanup")
Interceptor.attach(HMAC_CTX_cleanup, {onLeave: function (args) {send("HMAC_CTX_cleanup");}});

var HMAC_CTX_copy = Module.findExportByName("libcrypto.dll", "HMAC_CTX_copy")
Interceptor.attach(HMAC_CTX_copy, {onLeave: function (args) {send("HMAC_CTX_copy");}});

var HMAC_CTX_free = Module.findExportByName("libcrypto.dll", "HMAC_CTX_free")
Interceptor.attach(HMAC_CTX_free, {onLeave: function (args) {send("HMAC_CTX_free");}});

var HMAC_CTX_get_md = Module.findExportByName("libcrypto.dll", "HMAC_CTX_get_md")
Interceptor.attach(HMAC_CTX_get_md, {onLeave: function (args) {send("HMAC_CTX_get_md");}});

var HMAC_CTX_init = Module.findExportByName("libcrypto.dll", "HMAC_CTX_init")
Interceptor.attach(HMAC_CTX_init, {onLeave: function (args) {send("HMAC_CTX_init");}});

var HMAC_CTX_new = Module.findExportByName("libcrypto.dll", "HMAC_CTX_new")
Interceptor.attach(HMAC_CTX_new, {onLeave: function (args) {send("HMAC_CTX_new");}});

var HMAC_CTX_reset = Module.findExportByName("libcrypto.dll", "HMAC_CTX_reset")
Interceptor.attach(HMAC_CTX_reset, {onLeave: function (args) {send("HMAC_CTX_reset");}});

var HMAC_CTX_set_flags = Module.findExportByName("libcrypto.dll", "HMAC_CTX_set_flags")
Interceptor.attach(HMAC_CTX_set_flags, {onLeave: function (args) {send("HMAC_CTX_set_flags");}});

var HMAC_Final = Module.findExportByName("libcrypto.dll", "HMAC_Final")
Interceptor.attach(HMAC_Final, {onLeave: function (args) {send("HMAC_Final");}});

var HMAC_Init = Module.findExportByName("libcrypto.dll", "HMAC_Init")
Interceptor.attach(HMAC_Init, {onLeave: function (args) {send("HMAC_Init");}});

var HMAC_Init_ex = Module.findExportByName("libcrypto.dll", "HMAC_Init_ex")
Interceptor.attach(HMAC_Init_ex, {onLeave: function (args) {send("HMAC_Init_ex");}});

var HMAC_Update = Module.findExportByName("libcrypto.dll", "HMAC_Update")
Interceptor.attach(HMAC_Update, {onLeave: function (args) {send("HMAC_Update");}});

var ISSUING_DIST_POINT_free = Module.findExportByName("libcrypto.dll", "ISSUING_DIST_POINT_free")
Interceptor.attach(ISSUING_DIST_POINT_free, {onLeave: function (args) {send("ISSUING_DIST_POINT_free");}});

var ISSUING_DIST_POINT_it = Module.findExportByName("libcrypto.dll", "ISSUING_DIST_POINT_it")
Interceptor.attach(ISSUING_DIST_POINT_it, {onLeave: function (args) {send("ISSUING_DIST_POINT_it");}});

var ISSUING_DIST_POINT_new = Module.findExportByName("libcrypto.dll", "ISSUING_DIST_POINT_new")
Interceptor.attach(ISSUING_DIST_POINT_new, {onLeave: function (args) {send("ISSUING_DIST_POINT_new");}});

var LONG_it = Module.findExportByName("libcrypto.dll", "LONG_it")
Interceptor.attach(LONG_it, {onLeave: function (args) {send("LONG_it");}});

var MD4 = Module.findExportByName("libcrypto.dll", "MD4")
Interceptor.attach(MD4, {onLeave: function (args) {send("MD4");}});

var MD4_Final = Module.findExportByName("libcrypto.dll", "MD4_Final")
Interceptor.attach(MD4_Final, {onLeave: function (args) {send("MD4_Final");}});

var MD4_Init = Module.findExportByName("libcrypto.dll", "MD4_Init")
Interceptor.attach(MD4_Init, {onLeave: function (args) {send("MD4_Init");}});

var MD4_Transform = Module.findExportByName("libcrypto.dll", "MD4_Transform")
Interceptor.attach(MD4_Transform, {onLeave: function (args) {send("MD4_Transform");}});

var MD4_Update = Module.findExportByName("libcrypto.dll", "MD4_Update")
Interceptor.attach(MD4_Update, {onLeave: function (args) {send("MD4_Update");}});

var MD5 = Module.findExportByName("libcrypto.dll", "MD5")
Interceptor.attach(MD5, {onLeave: function (args) {send("MD5");}});

var MD5_Final = Module.findExportByName("libcrypto.dll", "MD5_Final")
Interceptor.attach(MD5_Final, {onLeave: function (args) {send("MD5_Final");}});

var MD5_Init = Module.findExportByName("libcrypto.dll", "MD5_Init")
Interceptor.attach(MD5_Init, {onLeave: function (args) {send("MD5_Init");}});

var MD5_Transform = Module.findExportByName("libcrypto.dll", "MD5_Transform")
Interceptor.attach(MD5_Transform, {onLeave: function (args) {send("MD5_Transform");}});

var MD5_Update = Module.findExportByName("libcrypto.dll", "MD5_Update")
Interceptor.attach(MD5_Update, {onLeave: function (args) {send("MD5_Update");}});

var NAME_CONSTRAINTS_check = Module.findExportByName("libcrypto.dll", "NAME_CONSTRAINTS_check")
Interceptor.attach(NAME_CONSTRAINTS_check, {onLeave: function (args) {send("NAME_CONSTRAINTS_check");}});

var NAME_CONSTRAINTS_free = Module.findExportByName("libcrypto.dll", "NAME_CONSTRAINTS_free")
Interceptor.attach(NAME_CONSTRAINTS_free, {onLeave: function (args) {send("NAME_CONSTRAINTS_free");}});

var NAME_CONSTRAINTS_it = Module.findExportByName("libcrypto.dll", "NAME_CONSTRAINTS_it")
Interceptor.attach(NAME_CONSTRAINTS_it, {onLeave: function (args) {send("NAME_CONSTRAINTS_it");}});

var NAME_CONSTRAINTS_new = Module.findExportByName("libcrypto.dll", "NAME_CONSTRAINTS_new")
Interceptor.attach(NAME_CONSTRAINTS_new, {onLeave: function (args) {send("NAME_CONSTRAINTS_new");}});

var NCONF_WIN32 = Module.findExportByName("libcrypto.dll", "NCONF_WIN32")
Interceptor.attach(NCONF_WIN32, {onLeave: function (args) {send("NCONF_WIN32");}});

var NCONF_default = Module.findExportByName("libcrypto.dll", "NCONF_default")
Interceptor.attach(NCONF_default, {onLeave: function (args) {send("NCONF_default");}});

var NCONF_dump_bio = Module.findExportByName("libcrypto.dll", "NCONF_dump_bio")
Interceptor.attach(NCONF_dump_bio, {onLeave: function (args) {send("NCONF_dump_bio");}});

var NCONF_dump_fp = Module.findExportByName("libcrypto.dll", "NCONF_dump_fp")
Interceptor.attach(NCONF_dump_fp, {onLeave: function (args) {send("NCONF_dump_fp");}});

var NCONF_free = Module.findExportByName("libcrypto.dll", "NCONF_free")
Interceptor.attach(NCONF_free, {onLeave: function (args) {send("NCONF_free");}});

var NCONF_free_data = Module.findExportByName("libcrypto.dll", "NCONF_free_data")
Interceptor.attach(NCONF_free_data, {onLeave: function (args) {send("NCONF_free_data");}});

var NCONF_get_number_e = Module.findExportByName("libcrypto.dll", "NCONF_get_number_e")
Interceptor.attach(NCONF_get_number_e, {onLeave: function (args) {send("NCONF_get_number_e");}});

var NCONF_get_section = Module.findExportByName("libcrypto.dll", "NCONF_get_section")
Interceptor.attach(NCONF_get_section, {onLeave: function (args) {send("NCONF_get_section");}});

var NCONF_get_string = Module.findExportByName("libcrypto.dll", "NCONF_get_string")
Interceptor.attach(NCONF_get_string, {onLeave: function (args) {send("NCONF_get_string");}});

var NCONF_load = Module.findExportByName("libcrypto.dll", "NCONF_load")
Interceptor.attach(NCONF_load, {onLeave: function (args) {send("NCONF_load");}});

var NCONF_load_bio = Module.findExportByName("libcrypto.dll", "NCONF_load_bio")
Interceptor.attach(NCONF_load_bio, {onLeave: function (args) {send("NCONF_load_bio");}});

var NCONF_load_fp = Module.findExportByName("libcrypto.dll", "NCONF_load_fp")
Interceptor.attach(NCONF_load_fp, {onLeave: function (args) {send("NCONF_load_fp");}});

var NCONF_new = Module.findExportByName("libcrypto.dll", "NCONF_new")
Interceptor.attach(NCONF_new, {onLeave: function (args) {send("NCONF_new");}});

var NETSCAPE_CERT_SEQUENCE_free = Module.findExportByName("libcrypto.dll", "NETSCAPE_CERT_SEQUENCE_free")
Interceptor.attach(NETSCAPE_CERT_SEQUENCE_free, {onLeave: function (args) {send("NETSCAPE_CERT_SEQUENCE_free");}});

var NETSCAPE_CERT_SEQUENCE_it = Module.findExportByName("libcrypto.dll", "NETSCAPE_CERT_SEQUENCE_it")
Interceptor.attach(NETSCAPE_CERT_SEQUENCE_it, {onLeave: function (args) {send("NETSCAPE_CERT_SEQUENCE_it");}});

var NETSCAPE_CERT_SEQUENCE_new = Module.findExportByName("libcrypto.dll", "NETSCAPE_CERT_SEQUENCE_new")
Interceptor.attach(NETSCAPE_CERT_SEQUENCE_new, {onLeave: function (args) {send("NETSCAPE_CERT_SEQUENCE_new");}});

var NETSCAPE_ENCRYPTED_PKEY_free = Module.findExportByName("libcrypto.dll", "NETSCAPE_ENCRYPTED_PKEY_free")
Interceptor.attach(NETSCAPE_ENCRYPTED_PKEY_free, {onLeave: function (args) {send("NETSCAPE_ENCRYPTED_PKEY_free");}});

var NETSCAPE_ENCRYPTED_PKEY_it = Module.findExportByName("libcrypto.dll", "NETSCAPE_ENCRYPTED_PKEY_it")
Interceptor.attach(NETSCAPE_ENCRYPTED_PKEY_it, {onLeave: function (args) {send("NETSCAPE_ENCRYPTED_PKEY_it");}});

var NETSCAPE_ENCRYPTED_PKEY_new = Module.findExportByName("libcrypto.dll", "NETSCAPE_ENCRYPTED_PKEY_new")
Interceptor.attach(NETSCAPE_ENCRYPTED_PKEY_new, {onLeave: function (args) {send("NETSCAPE_ENCRYPTED_PKEY_new");}});

var NETSCAPE_PKEY_free = Module.findExportByName("libcrypto.dll", "NETSCAPE_PKEY_free")
Interceptor.attach(NETSCAPE_PKEY_free, {onLeave: function (args) {send("NETSCAPE_PKEY_free");}});

var NETSCAPE_PKEY_it = Module.findExportByName("libcrypto.dll", "NETSCAPE_PKEY_it")
Interceptor.attach(NETSCAPE_PKEY_it, {onLeave: function (args) {send("NETSCAPE_PKEY_it");}});

var NETSCAPE_PKEY_new = Module.findExportByName("libcrypto.dll", "NETSCAPE_PKEY_new")
Interceptor.attach(NETSCAPE_PKEY_new, {onLeave: function (args) {send("NETSCAPE_PKEY_new");}});

var NETSCAPE_SPKAC_free = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKAC_free")
Interceptor.attach(NETSCAPE_SPKAC_free, {onLeave: function (args) {send("NETSCAPE_SPKAC_free");}});

var NETSCAPE_SPKAC_it = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKAC_it")
Interceptor.attach(NETSCAPE_SPKAC_it, {onLeave: function (args) {send("NETSCAPE_SPKAC_it");}});

var NETSCAPE_SPKAC_new = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKAC_new")
Interceptor.attach(NETSCAPE_SPKAC_new, {onLeave: function (args) {send("NETSCAPE_SPKAC_new");}});

var NETSCAPE_SPKI_b64_decode = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_b64_decode")
Interceptor.attach(NETSCAPE_SPKI_b64_decode, {onLeave: function (args) {send("NETSCAPE_SPKI_b64_decode");}});

var NETSCAPE_SPKI_b64_encode = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_b64_encode")
Interceptor.attach(NETSCAPE_SPKI_b64_encode, {onLeave: function (args) {send("NETSCAPE_SPKI_b64_encode");}});

var NETSCAPE_SPKI_free = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_free")
Interceptor.attach(NETSCAPE_SPKI_free, {onLeave: function (args) {send("NETSCAPE_SPKI_free");}});

var NETSCAPE_SPKI_get_pubkey = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_get_pubkey")
Interceptor.attach(NETSCAPE_SPKI_get_pubkey, {onLeave: function (args) {send("NETSCAPE_SPKI_get_pubkey");}});

var NETSCAPE_SPKI_it = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_it")
Interceptor.attach(NETSCAPE_SPKI_it, {onLeave: function (args) {send("NETSCAPE_SPKI_it");}});

var NETSCAPE_SPKI_new = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_new")
Interceptor.attach(NETSCAPE_SPKI_new, {onLeave: function (args) {send("NETSCAPE_SPKI_new");}});

var NETSCAPE_SPKI_print = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_print")
Interceptor.attach(NETSCAPE_SPKI_print, {onLeave: function (args) {send("NETSCAPE_SPKI_print");}});

var NETSCAPE_SPKI_set_pubkey = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_set_pubkey")
Interceptor.attach(NETSCAPE_SPKI_set_pubkey, {onLeave: function (args) {send("NETSCAPE_SPKI_set_pubkey");}});

var NETSCAPE_SPKI_sign = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_sign")
Interceptor.attach(NETSCAPE_SPKI_sign, {onLeave: function (args) {send("NETSCAPE_SPKI_sign");}});

var NETSCAPE_SPKI_verify = Module.findExportByName("libcrypto.dll", "NETSCAPE_SPKI_verify")
Interceptor.attach(NETSCAPE_SPKI_verify, {onLeave: function (args) {send("NETSCAPE_SPKI_verify");}});

var NETSCAPE_X509_free = Module.findExportByName("libcrypto.dll", "NETSCAPE_X509_free")
Interceptor.attach(NETSCAPE_X509_free, {onLeave: function (args) {send("NETSCAPE_X509_free");}});

var NETSCAPE_X509_it = Module.findExportByName("libcrypto.dll", "NETSCAPE_X509_it")
Interceptor.attach(NETSCAPE_X509_it, {onLeave: function (args) {send("NETSCAPE_X509_it");}});

var NETSCAPE_X509_new = Module.findExportByName("libcrypto.dll", "NETSCAPE_X509_new")
Interceptor.attach(NETSCAPE_X509_new, {onLeave: function (args) {send("NETSCAPE_X509_new");}});

var NOTICEREF_free = Module.findExportByName("libcrypto.dll", "NOTICEREF_free")
Interceptor.attach(NOTICEREF_free, {onLeave: function (args) {send("NOTICEREF_free");}});

var NOTICEREF_it = Module.findExportByName("libcrypto.dll", "NOTICEREF_it")
Interceptor.attach(NOTICEREF_it, {onLeave: function (args) {send("NOTICEREF_it");}});

var NOTICEREF_new = Module.findExportByName("libcrypto.dll", "NOTICEREF_new")
Interceptor.attach(NOTICEREF_new, {onLeave: function (args) {send("NOTICEREF_new");}});

var OBJ_NAME_add = Module.findExportByName("libcrypto.dll", "OBJ_NAME_add")
Interceptor.attach(OBJ_NAME_add, {onLeave: function (args) {send("OBJ_NAME_add");}});

var OBJ_NAME_cleanup = Module.findExportByName("libcrypto.dll", "OBJ_NAME_cleanup")
Interceptor.attach(OBJ_NAME_cleanup, {onLeave: function (args) {send("OBJ_NAME_cleanup");}});

var OBJ_NAME_do_all = Module.findExportByName("libcrypto.dll", "OBJ_NAME_do_all")
Interceptor.attach(OBJ_NAME_do_all, {onLeave: function (args) {send("OBJ_NAME_do_all");}});

var OBJ_NAME_do_all_sorted = Module.findExportByName("libcrypto.dll", "OBJ_NAME_do_all_sorted")
Interceptor.attach(OBJ_NAME_do_all_sorted, {onLeave: function (args) {send("OBJ_NAME_do_all_sorted");}});

var OBJ_NAME_get = Module.findExportByName("libcrypto.dll", "OBJ_NAME_get")
Interceptor.attach(OBJ_NAME_get, {onLeave: function (args) {send("OBJ_NAME_get");}});

var OBJ_NAME_init = Module.findExportByName("libcrypto.dll", "OBJ_NAME_init")
Interceptor.attach(OBJ_NAME_init, {onLeave: function (args) {send("OBJ_NAME_init");}});

var OBJ_NAME_new_index = Module.findExportByName("libcrypto.dll", "OBJ_NAME_new_index")
Interceptor.attach(OBJ_NAME_new_index, {onLeave: function (args) {send("OBJ_NAME_new_index");}});

var OBJ_NAME_remove = Module.findExportByName("libcrypto.dll", "OBJ_NAME_remove")
Interceptor.attach(OBJ_NAME_remove, {onLeave: function (args) {send("OBJ_NAME_remove");}});

var OBJ_add_object = Module.findExportByName("libcrypto.dll", "OBJ_add_object")
Interceptor.attach(OBJ_add_object, {onLeave: function (args) {send("OBJ_add_object");}});

var OBJ_add_sigid = Module.findExportByName("libcrypto.dll", "OBJ_add_sigid")
Interceptor.attach(OBJ_add_sigid, {onLeave: function (args) {send("OBJ_add_sigid");}});

var OBJ_bsearch_ = Module.findExportByName("libcrypto.dll", "OBJ_bsearch_")
Interceptor.attach(OBJ_bsearch_, {onLeave: function (args) {send("OBJ_bsearch_");}});

var OBJ_bsearch_ex_ = Module.findExportByName("libcrypto.dll", "OBJ_bsearch_ex_")
Interceptor.attach(OBJ_bsearch_ex_, {onLeave: function (args) {send("OBJ_bsearch_ex_");}});

var OBJ_cleanup = Module.findExportByName("libcrypto.dll", "OBJ_cleanup")
Interceptor.attach(OBJ_cleanup, {onLeave: function (args) {send("OBJ_cleanup");}});

var OBJ_cmp = Module.findExportByName("libcrypto.dll", "OBJ_cmp")
Interceptor.attach(OBJ_cmp, {onLeave: function (args) {send("OBJ_cmp");}});

var OBJ_create = Module.findExportByName("libcrypto.dll", "OBJ_create")
Interceptor.attach(OBJ_create, {onLeave: function (args) {send("OBJ_create");}});

var OBJ_create_objects = Module.findExportByName("libcrypto.dll", "OBJ_create_objects")
Interceptor.attach(OBJ_create_objects, {onLeave: function (args) {send("OBJ_create_objects");}});

var OBJ_dup = Module.findExportByName("libcrypto.dll", "OBJ_dup")
Interceptor.attach(OBJ_dup, {onLeave: function (args) {send("OBJ_dup");}});

var OBJ_find_sigid_algs = Module.findExportByName("libcrypto.dll", "OBJ_find_sigid_algs")
Interceptor.attach(OBJ_find_sigid_algs, {onLeave: function (args) {send("OBJ_find_sigid_algs");}});

var OBJ_find_sigid_by_algs = Module.findExportByName("libcrypto.dll", "OBJ_find_sigid_by_algs")
Interceptor.attach(OBJ_find_sigid_by_algs, {onLeave: function (args) {send("OBJ_find_sigid_by_algs");}});

var OBJ_ln2nid = Module.findExportByName("libcrypto.dll", "OBJ_ln2nid")
Interceptor.attach(OBJ_ln2nid, {onLeave: function (args) {send("OBJ_ln2nid");}});

var OBJ_new_nid = Module.findExportByName("libcrypto.dll", "OBJ_new_nid")
Interceptor.attach(OBJ_new_nid, {onLeave: function (args) {send("OBJ_new_nid");}});

var OBJ_nid2ln = Module.findExportByName("libcrypto.dll", "OBJ_nid2ln")
Interceptor.attach(OBJ_nid2ln, {onLeave: function (args) {send("OBJ_nid2ln");}});

var OBJ_nid2obj = Module.findExportByName("libcrypto.dll", "OBJ_nid2obj")
Interceptor.attach(OBJ_nid2obj, {onLeave: function (args) {send("OBJ_nid2obj");}});

var OBJ_nid2sn = Module.findExportByName("libcrypto.dll", "OBJ_nid2sn")
Interceptor.attach(OBJ_nid2sn, {onLeave: function (args) {send("OBJ_nid2sn");}});

var OBJ_obj2nid = Module.findExportByName("libcrypto.dll", "OBJ_obj2nid")
Interceptor.attach(OBJ_obj2nid, {onLeave: function (args) {send("OBJ_obj2nid");}});

var OBJ_obj2txt = Module.findExportByName("libcrypto.dll", "OBJ_obj2txt")
Interceptor.attach(OBJ_obj2txt, {onLeave: function (args) {send("OBJ_obj2txt");}});

var OBJ_sigid_free = Module.findExportByName("libcrypto.dll", "OBJ_sigid_free")
Interceptor.attach(OBJ_sigid_free, {onLeave: function (args) {send("OBJ_sigid_free");}});

var OBJ_sn2nid = Module.findExportByName("libcrypto.dll", "OBJ_sn2nid")
Interceptor.attach(OBJ_sn2nid, {onLeave: function (args) {send("OBJ_sn2nid");}});

var OBJ_txt2nid = Module.findExportByName("libcrypto.dll", "OBJ_txt2nid")
Interceptor.attach(OBJ_txt2nid, {onLeave: function (args) {send("OBJ_txt2nid");}});

var OBJ_txt2obj = Module.findExportByName("libcrypto.dll", "OBJ_txt2obj")
Interceptor.attach(OBJ_txt2obj, {onLeave: function (args) {send("OBJ_txt2obj");}});

var OCSP_BASICRESP_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_add1_ext_i2d")
Interceptor.attach(OCSP_BASICRESP_add1_ext_i2d, {onLeave: function (args) {send("OCSP_BASICRESP_add1_ext_i2d");}});

var OCSP_BASICRESP_add_ext = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_add_ext")
Interceptor.attach(OCSP_BASICRESP_add_ext, {onLeave: function (args) {send("OCSP_BASICRESP_add_ext");}});

var OCSP_BASICRESP_delete_ext = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_delete_ext")
Interceptor.attach(OCSP_BASICRESP_delete_ext, {onLeave: function (args) {send("OCSP_BASICRESP_delete_ext");}});

var OCSP_BASICRESP_free = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_free")
Interceptor.attach(OCSP_BASICRESP_free, {onLeave: function (args) {send("OCSP_BASICRESP_free");}});

var OCSP_BASICRESP_get1_ext_d2i = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_get1_ext_d2i")
Interceptor.attach(OCSP_BASICRESP_get1_ext_d2i, {onLeave: function (args) {send("OCSP_BASICRESP_get1_ext_d2i");}});

var OCSP_BASICRESP_get_ext = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_get_ext")
Interceptor.attach(OCSP_BASICRESP_get_ext, {onLeave: function (args) {send("OCSP_BASICRESP_get_ext");}});

var OCSP_BASICRESP_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_get_ext_by_NID")
Interceptor.attach(OCSP_BASICRESP_get_ext_by_NID, {onLeave: function (args) {send("OCSP_BASICRESP_get_ext_by_NID");}});

var OCSP_BASICRESP_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_get_ext_by_OBJ")
Interceptor.attach(OCSP_BASICRESP_get_ext_by_OBJ, {onLeave: function (args) {send("OCSP_BASICRESP_get_ext_by_OBJ");}});

var OCSP_BASICRESP_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_get_ext_by_critical")
Interceptor.attach(OCSP_BASICRESP_get_ext_by_critical, {onLeave: function (args) {send("OCSP_BASICRESP_get_ext_by_critical");}});

var OCSP_BASICRESP_get_ext_count = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_get_ext_count")
Interceptor.attach(OCSP_BASICRESP_get_ext_count, {onLeave: function (args) {send("OCSP_BASICRESP_get_ext_count");}});

var OCSP_BASICRESP_it = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_it")
Interceptor.attach(OCSP_BASICRESP_it, {onLeave: function (args) {send("OCSP_BASICRESP_it");}});

var OCSP_BASICRESP_new = Module.findExportByName("libcrypto.dll", "OCSP_BASICRESP_new")
Interceptor.attach(OCSP_BASICRESP_new, {onLeave: function (args) {send("OCSP_BASICRESP_new");}});

var OCSP_CERTID_dup = Module.findExportByName("libcrypto.dll", "OCSP_CERTID_dup")
Interceptor.attach(OCSP_CERTID_dup, {onLeave: function (args) {send("OCSP_CERTID_dup");}});

var OCSP_CERTID_free = Module.findExportByName("libcrypto.dll", "OCSP_CERTID_free")
Interceptor.attach(OCSP_CERTID_free, {onLeave: function (args) {send("OCSP_CERTID_free");}});

var OCSP_CERTID_it = Module.findExportByName("libcrypto.dll", "OCSP_CERTID_it")
Interceptor.attach(OCSP_CERTID_it, {onLeave: function (args) {send("OCSP_CERTID_it");}});

var OCSP_CERTID_new = Module.findExportByName("libcrypto.dll", "OCSP_CERTID_new")
Interceptor.attach(OCSP_CERTID_new, {onLeave: function (args) {send("OCSP_CERTID_new");}});

var OCSP_CERTSTATUS_free = Module.findExportByName("libcrypto.dll", "OCSP_CERTSTATUS_free")
Interceptor.attach(OCSP_CERTSTATUS_free, {onLeave: function (args) {send("OCSP_CERTSTATUS_free");}});

var OCSP_CERTSTATUS_it = Module.findExportByName("libcrypto.dll", "OCSP_CERTSTATUS_it")
Interceptor.attach(OCSP_CERTSTATUS_it, {onLeave: function (args) {send("OCSP_CERTSTATUS_it");}});

var OCSP_CERTSTATUS_new = Module.findExportByName("libcrypto.dll", "OCSP_CERTSTATUS_new")
Interceptor.attach(OCSP_CERTSTATUS_new, {onLeave: function (args) {send("OCSP_CERTSTATUS_new");}});

var OCSP_CRLID_free = Module.findExportByName("libcrypto.dll", "OCSP_CRLID_free")
Interceptor.attach(OCSP_CRLID_free, {onLeave: function (args) {send("OCSP_CRLID_free");}});

var OCSP_CRLID_it = Module.findExportByName("libcrypto.dll", "OCSP_CRLID_it")
Interceptor.attach(OCSP_CRLID_it, {onLeave: function (args) {send("OCSP_CRLID_it");}});

var OCSP_CRLID_new = Module.findExportByName("libcrypto.dll", "OCSP_CRLID_new")
Interceptor.attach(OCSP_CRLID_new, {onLeave: function (args) {send("OCSP_CRLID_new");}});

var OCSP_ONEREQ_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_add1_ext_i2d")
Interceptor.attach(OCSP_ONEREQ_add1_ext_i2d, {onLeave: function (args) {send("OCSP_ONEREQ_add1_ext_i2d");}});

var OCSP_ONEREQ_add_ext = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_add_ext")
Interceptor.attach(OCSP_ONEREQ_add_ext, {onLeave: function (args) {send("OCSP_ONEREQ_add_ext");}});

var OCSP_ONEREQ_delete_ext = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_delete_ext")
Interceptor.attach(OCSP_ONEREQ_delete_ext, {onLeave: function (args) {send("OCSP_ONEREQ_delete_ext");}});

var OCSP_ONEREQ_free = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_free")
Interceptor.attach(OCSP_ONEREQ_free, {onLeave: function (args) {send("OCSP_ONEREQ_free");}});

var OCSP_ONEREQ_get1_ext_d2i = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_get1_ext_d2i")
Interceptor.attach(OCSP_ONEREQ_get1_ext_d2i, {onLeave: function (args) {send("OCSP_ONEREQ_get1_ext_d2i");}});

var OCSP_ONEREQ_get_ext = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_get_ext")
Interceptor.attach(OCSP_ONEREQ_get_ext, {onLeave: function (args) {send("OCSP_ONEREQ_get_ext");}});

var OCSP_ONEREQ_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_get_ext_by_NID")
Interceptor.attach(OCSP_ONEREQ_get_ext_by_NID, {onLeave: function (args) {send("OCSP_ONEREQ_get_ext_by_NID");}});

var OCSP_ONEREQ_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_get_ext_by_OBJ")
Interceptor.attach(OCSP_ONEREQ_get_ext_by_OBJ, {onLeave: function (args) {send("OCSP_ONEREQ_get_ext_by_OBJ");}});

var OCSP_ONEREQ_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_get_ext_by_critical")
Interceptor.attach(OCSP_ONEREQ_get_ext_by_critical, {onLeave: function (args) {send("OCSP_ONEREQ_get_ext_by_critical");}});

var OCSP_ONEREQ_get_ext_count = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_get_ext_count")
Interceptor.attach(OCSP_ONEREQ_get_ext_count, {onLeave: function (args) {send("OCSP_ONEREQ_get_ext_count");}});

var OCSP_ONEREQ_it = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_it")
Interceptor.attach(OCSP_ONEREQ_it, {onLeave: function (args) {send("OCSP_ONEREQ_it");}});

var OCSP_ONEREQ_new = Module.findExportByName("libcrypto.dll", "OCSP_ONEREQ_new")
Interceptor.attach(OCSP_ONEREQ_new, {onLeave: function (args) {send("OCSP_ONEREQ_new");}});

var OCSP_REQINFO_free = Module.findExportByName("libcrypto.dll", "OCSP_REQINFO_free")
Interceptor.attach(OCSP_REQINFO_free, {onLeave: function (args) {send("OCSP_REQINFO_free");}});

var OCSP_REQINFO_it = Module.findExportByName("libcrypto.dll", "OCSP_REQINFO_it")
Interceptor.attach(OCSP_REQINFO_it, {onLeave: function (args) {send("OCSP_REQINFO_it");}});

var OCSP_REQINFO_new = Module.findExportByName("libcrypto.dll", "OCSP_REQINFO_new")
Interceptor.attach(OCSP_REQINFO_new, {onLeave: function (args) {send("OCSP_REQINFO_new");}});

var OCSP_REQUEST_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_add1_ext_i2d")
Interceptor.attach(OCSP_REQUEST_add1_ext_i2d, {onLeave: function (args) {send("OCSP_REQUEST_add1_ext_i2d");}});

var OCSP_REQUEST_add_ext = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_add_ext")
Interceptor.attach(OCSP_REQUEST_add_ext, {onLeave: function (args) {send("OCSP_REQUEST_add_ext");}});

var OCSP_REQUEST_delete_ext = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_delete_ext")
Interceptor.attach(OCSP_REQUEST_delete_ext, {onLeave: function (args) {send("OCSP_REQUEST_delete_ext");}});

var OCSP_REQUEST_free = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_free")
Interceptor.attach(OCSP_REQUEST_free, {onLeave: function (args) {send("OCSP_REQUEST_free");}});

var OCSP_REQUEST_get1_ext_d2i = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_get1_ext_d2i")
Interceptor.attach(OCSP_REQUEST_get1_ext_d2i, {onLeave: function (args) {send("OCSP_REQUEST_get1_ext_d2i");}});

var OCSP_REQUEST_get_ext = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_get_ext")
Interceptor.attach(OCSP_REQUEST_get_ext, {onLeave: function (args) {send("OCSP_REQUEST_get_ext");}});

var OCSP_REQUEST_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_get_ext_by_NID")
Interceptor.attach(OCSP_REQUEST_get_ext_by_NID, {onLeave: function (args) {send("OCSP_REQUEST_get_ext_by_NID");}});

var OCSP_REQUEST_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_get_ext_by_OBJ")
Interceptor.attach(OCSP_REQUEST_get_ext_by_OBJ, {onLeave: function (args) {send("OCSP_REQUEST_get_ext_by_OBJ");}});

var OCSP_REQUEST_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_get_ext_by_critical")
Interceptor.attach(OCSP_REQUEST_get_ext_by_critical, {onLeave: function (args) {send("OCSP_REQUEST_get_ext_by_critical");}});

var OCSP_REQUEST_get_ext_count = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_get_ext_count")
Interceptor.attach(OCSP_REQUEST_get_ext_count, {onLeave: function (args) {send("OCSP_REQUEST_get_ext_count");}});

var OCSP_REQUEST_it = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_it")
Interceptor.attach(OCSP_REQUEST_it, {onLeave: function (args) {send("OCSP_REQUEST_it");}});

var OCSP_REQUEST_new = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_new")
Interceptor.attach(OCSP_REQUEST_new, {onLeave: function (args) {send("OCSP_REQUEST_new");}});

var OCSP_REQUEST_print = Module.findExportByName("libcrypto.dll", "OCSP_REQUEST_print")
Interceptor.attach(OCSP_REQUEST_print, {onLeave: function (args) {send("OCSP_REQUEST_print");}});

var OCSP_REQ_CTX_add1_header = Module.findExportByName("libcrypto.dll", "OCSP_REQ_CTX_add1_header")
Interceptor.attach(OCSP_REQ_CTX_add1_header, {onLeave: function (args) {send("OCSP_REQ_CTX_add1_header");}});

var OCSP_REQ_CTX_free = Module.findExportByName("libcrypto.dll", "OCSP_REQ_CTX_free")
Interceptor.attach(OCSP_REQ_CTX_free, {onLeave: function (args) {send("OCSP_REQ_CTX_free");}});

var OCSP_REQ_CTX_set1_req = Module.findExportByName("libcrypto.dll", "OCSP_REQ_CTX_set1_req")
Interceptor.attach(OCSP_REQ_CTX_set1_req, {onLeave: function (args) {send("OCSP_REQ_CTX_set1_req");}});

var OCSP_RESPBYTES_free = Module.findExportByName("libcrypto.dll", "OCSP_RESPBYTES_free")
Interceptor.attach(OCSP_RESPBYTES_free, {onLeave: function (args) {send("OCSP_RESPBYTES_free");}});

var OCSP_RESPBYTES_it = Module.findExportByName("libcrypto.dll", "OCSP_RESPBYTES_it")
Interceptor.attach(OCSP_RESPBYTES_it, {onLeave: function (args) {send("OCSP_RESPBYTES_it");}});

var OCSP_RESPBYTES_new = Module.findExportByName("libcrypto.dll", "OCSP_RESPBYTES_new")
Interceptor.attach(OCSP_RESPBYTES_new, {onLeave: function (args) {send("OCSP_RESPBYTES_new");}});

var OCSP_RESPDATA_free = Module.findExportByName("libcrypto.dll", "OCSP_RESPDATA_free")
Interceptor.attach(OCSP_RESPDATA_free, {onLeave: function (args) {send("OCSP_RESPDATA_free");}});

var OCSP_RESPDATA_it = Module.findExportByName("libcrypto.dll", "OCSP_RESPDATA_it")
Interceptor.attach(OCSP_RESPDATA_it, {onLeave: function (args) {send("OCSP_RESPDATA_it");}});

var OCSP_RESPDATA_new = Module.findExportByName("libcrypto.dll", "OCSP_RESPDATA_new")
Interceptor.attach(OCSP_RESPDATA_new, {onLeave: function (args) {send("OCSP_RESPDATA_new");}});

var OCSP_RESPID_free = Module.findExportByName("libcrypto.dll", "OCSP_RESPID_free")
Interceptor.attach(OCSP_RESPID_free, {onLeave: function (args) {send("OCSP_RESPID_free");}});

var OCSP_RESPID_it = Module.findExportByName("libcrypto.dll", "OCSP_RESPID_it")
Interceptor.attach(OCSP_RESPID_it, {onLeave: function (args) {send("OCSP_RESPID_it");}});

var OCSP_RESPID_new = Module.findExportByName("libcrypto.dll", "OCSP_RESPID_new")
Interceptor.attach(OCSP_RESPID_new, {onLeave: function (args) {send("OCSP_RESPID_new");}});

var OCSP_RESPONSE_free = Module.findExportByName("libcrypto.dll", "OCSP_RESPONSE_free")
Interceptor.attach(OCSP_RESPONSE_free, {onLeave: function (args) {send("OCSP_RESPONSE_free");}});

var OCSP_RESPONSE_it = Module.findExportByName("libcrypto.dll", "OCSP_RESPONSE_it")
Interceptor.attach(OCSP_RESPONSE_it, {onLeave: function (args) {send("OCSP_RESPONSE_it");}});

var OCSP_RESPONSE_new = Module.findExportByName("libcrypto.dll", "OCSP_RESPONSE_new")
Interceptor.attach(OCSP_RESPONSE_new, {onLeave: function (args) {send("OCSP_RESPONSE_new");}});

var OCSP_RESPONSE_print = Module.findExportByName("libcrypto.dll", "OCSP_RESPONSE_print")
Interceptor.attach(OCSP_RESPONSE_print, {onLeave: function (args) {send("OCSP_RESPONSE_print");}});

var OCSP_REVOKEDINFO_free = Module.findExportByName("libcrypto.dll", "OCSP_REVOKEDINFO_free")
Interceptor.attach(OCSP_REVOKEDINFO_free, {onLeave: function (args) {send("OCSP_REVOKEDINFO_free");}});

var OCSP_REVOKEDINFO_it = Module.findExportByName("libcrypto.dll", "OCSP_REVOKEDINFO_it")
Interceptor.attach(OCSP_REVOKEDINFO_it, {onLeave: function (args) {send("OCSP_REVOKEDINFO_it");}});

var OCSP_REVOKEDINFO_new = Module.findExportByName("libcrypto.dll", "OCSP_REVOKEDINFO_new")
Interceptor.attach(OCSP_REVOKEDINFO_new, {onLeave: function (args) {send("OCSP_REVOKEDINFO_new");}});

var OCSP_SERVICELOC_free = Module.findExportByName("libcrypto.dll", "OCSP_SERVICELOC_free")
Interceptor.attach(OCSP_SERVICELOC_free, {onLeave: function (args) {send("OCSP_SERVICELOC_free");}});

var OCSP_SERVICELOC_it = Module.findExportByName("libcrypto.dll", "OCSP_SERVICELOC_it")
Interceptor.attach(OCSP_SERVICELOC_it, {onLeave: function (args) {send("OCSP_SERVICELOC_it");}});

var OCSP_SERVICELOC_new = Module.findExportByName("libcrypto.dll", "OCSP_SERVICELOC_new")
Interceptor.attach(OCSP_SERVICELOC_new, {onLeave: function (args) {send("OCSP_SERVICELOC_new");}});

var OCSP_SIGNATURE_free = Module.findExportByName("libcrypto.dll", "OCSP_SIGNATURE_free")
Interceptor.attach(OCSP_SIGNATURE_free, {onLeave: function (args) {send("OCSP_SIGNATURE_free");}});

var OCSP_SIGNATURE_it = Module.findExportByName("libcrypto.dll", "OCSP_SIGNATURE_it")
Interceptor.attach(OCSP_SIGNATURE_it, {onLeave: function (args) {send("OCSP_SIGNATURE_it");}});

var OCSP_SIGNATURE_new = Module.findExportByName("libcrypto.dll", "OCSP_SIGNATURE_new")
Interceptor.attach(OCSP_SIGNATURE_new, {onLeave: function (args) {send("OCSP_SIGNATURE_new");}});

var OCSP_SINGLERESP_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_add1_ext_i2d")
Interceptor.attach(OCSP_SINGLERESP_add1_ext_i2d, {onLeave: function (args) {send("OCSP_SINGLERESP_add1_ext_i2d");}});

var OCSP_SINGLERESP_add_ext = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_add_ext")
Interceptor.attach(OCSP_SINGLERESP_add_ext, {onLeave: function (args) {send("OCSP_SINGLERESP_add_ext");}});

var OCSP_SINGLERESP_delete_ext = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_delete_ext")
Interceptor.attach(OCSP_SINGLERESP_delete_ext, {onLeave: function (args) {send("OCSP_SINGLERESP_delete_ext");}});

var OCSP_SINGLERESP_free = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_free")
Interceptor.attach(OCSP_SINGLERESP_free, {onLeave: function (args) {send("OCSP_SINGLERESP_free");}});

var OCSP_SINGLERESP_get0_id = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get0_id")
Interceptor.attach(OCSP_SINGLERESP_get0_id, {onLeave: function (args) {send("OCSP_SINGLERESP_get0_id");}});

var OCSP_SINGLERESP_get1_ext_d2i = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get1_ext_d2i")
Interceptor.attach(OCSP_SINGLERESP_get1_ext_d2i, {onLeave: function (args) {send("OCSP_SINGLERESP_get1_ext_d2i");}});

var OCSP_SINGLERESP_get_ext = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get_ext")
Interceptor.attach(OCSP_SINGLERESP_get_ext, {onLeave: function (args) {send("OCSP_SINGLERESP_get_ext");}});

var OCSP_SINGLERESP_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get_ext_by_NID")
Interceptor.attach(OCSP_SINGLERESP_get_ext_by_NID, {onLeave: function (args) {send("OCSP_SINGLERESP_get_ext_by_NID");}});

var OCSP_SINGLERESP_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get_ext_by_OBJ")
Interceptor.attach(OCSP_SINGLERESP_get_ext_by_OBJ, {onLeave: function (args) {send("OCSP_SINGLERESP_get_ext_by_OBJ");}});

var OCSP_SINGLERESP_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get_ext_by_critical")
Interceptor.attach(OCSP_SINGLERESP_get_ext_by_critical, {onLeave: function (args) {send("OCSP_SINGLERESP_get_ext_by_critical");}});

var OCSP_SINGLERESP_get_ext_count = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_get_ext_count")
Interceptor.attach(OCSP_SINGLERESP_get_ext_count, {onLeave: function (args) {send("OCSP_SINGLERESP_get_ext_count");}});

var OCSP_SINGLERESP_it = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_it")
Interceptor.attach(OCSP_SINGLERESP_it, {onLeave: function (args) {send("OCSP_SINGLERESP_it");}});

var OCSP_SINGLERESP_new = Module.findExportByName("libcrypto.dll", "OCSP_SINGLERESP_new")
Interceptor.attach(OCSP_SINGLERESP_new, {onLeave: function (args) {send("OCSP_SINGLERESP_new");}});

var OCSP_accept_responses_new = Module.findExportByName("libcrypto.dll", "OCSP_accept_responses_new")
Interceptor.attach(OCSP_accept_responses_new, {onLeave: function (args) {send("OCSP_accept_responses_new");}});

var OCSP_archive_cutoff_new = Module.findExportByName("libcrypto.dll", "OCSP_archive_cutoff_new")
Interceptor.attach(OCSP_archive_cutoff_new, {onLeave: function (args) {send("OCSP_archive_cutoff_new");}});

var OCSP_basic_add1_cert = Module.findExportByName("libcrypto.dll", "OCSP_basic_add1_cert")
Interceptor.attach(OCSP_basic_add1_cert, {onLeave: function (args) {send("OCSP_basic_add1_cert");}});

var OCSP_basic_add1_nonce = Module.findExportByName("libcrypto.dll", "OCSP_basic_add1_nonce")
Interceptor.attach(OCSP_basic_add1_nonce, {onLeave: function (args) {send("OCSP_basic_add1_nonce");}});

var OCSP_basic_add1_status = Module.findExportByName("libcrypto.dll", "OCSP_basic_add1_status")
Interceptor.attach(OCSP_basic_add1_status, {onLeave: function (args) {send("OCSP_basic_add1_status");}});

var OCSP_basic_sign = Module.findExportByName("libcrypto.dll", "OCSP_basic_sign")
Interceptor.attach(OCSP_basic_sign, {onLeave: function (args) {send("OCSP_basic_sign");}});

var OCSP_basic_verify = Module.findExportByName("libcrypto.dll", "OCSP_basic_verify")
Interceptor.attach(OCSP_basic_verify, {onLeave: function (args) {send("OCSP_basic_verify");}});

var OCSP_cert_id_new = Module.findExportByName("libcrypto.dll", "OCSP_cert_id_new")
Interceptor.attach(OCSP_cert_id_new, {onLeave: function (args) {send("OCSP_cert_id_new");}});

var OCSP_cert_status_str = Module.findExportByName("libcrypto.dll", "OCSP_cert_status_str")
Interceptor.attach(OCSP_cert_status_str, {onLeave: function (args) {send("OCSP_cert_status_str");}});

var OCSP_cert_to_id = Module.findExportByName("libcrypto.dll", "OCSP_cert_to_id")
Interceptor.attach(OCSP_cert_to_id, {onLeave: function (args) {send("OCSP_cert_to_id");}});

var OCSP_check_nonce = Module.findExportByName("libcrypto.dll", "OCSP_check_nonce")
Interceptor.attach(OCSP_check_nonce, {onLeave: function (args) {send("OCSP_check_nonce");}});

var OCSP_check_validity = Module.findExportByName("libcrypto.dll", "OCSP_check_validity")
Interceptor.attach(OCSP_check_validity, {onLeave: function (args) {send("OCSP_check_validity");}});

var OCSP_copy_nonce = Module.findExportByName("libcrypto.dll", "OCSP_copy_nonce")
Interceptor.attach(OCSP_copy_nonce, {onLeave: function (args) {send("OCSP_copy_nonce");}});

var OCSP_crlID_new = Module.findExportByName("libcrypto.dll", "OCSP_crlID_new")
Interceptor.attach(OCSP_crlID_new, {onLeave: function (args) {send("OCSP_crlID_new");}});

var OCSP_crl_reason_str = Module.findExportByName("libcrypto.dll", "OCSP_crl_reason_str")
Interceptor.attach(OCSP_crl_reason_str, {onLeave: function (args) {send("OCSP_crl_reason_str");}});

var OCSP_id_cmp = Module.findExportByName("libcrypto.dll", "OCSP_id_cmp")
Interceptor.attach(OCSP_id_cmp, {onLeave: function (args) {send("OCSP_id_cmp");}});

var OCSP_id_get0_info = Module.findExportByName("libcrypto.dll", "OCSP_id_get0_info")
Interceptor.attach(OCSP_id_get0_info, {onLeave: function (args) {send("OCSP_id_get0_info");}});

var OCSP_id_issuer_cmp = Module.findExportByName("libcrypto.dll", "OCSP_id_issuer_cmp")
Interceptor.attach(OCSP_id_issuer_cmp, {onLeave: function (args) {send("OCSP_id_issuer_cmp");}});

var OCSP_onereq_get0_id = Module.findExportByName("libcrypto.dll", "OCSP_onereq_get0_id")
Interceptor.attach(OCSP_onereq_get0_id, {onLeave: function (args) {send("OCSP_onereq_get0_id");}});

var OCSP_parse_url = Module.findExportByName("libcrypto.dll", "OCSP_parse_url")
Interceptor.attach(OCSP_parse_url, {onLeave: function (args) {send("OCSP_parse_url");}});

var OCSP_request_add0_id = Module.findExportByName("libcrypto.dll", "OCSP_request_add0_id")
Interceptor.attach(OCSP_request_add0_id, {onLeave: function (args) {send("OCSP_request_add0_id");}});

var OCSP_request_add1_cert = Module.findExportByName("libcrypto.dll", "OCSP_request_add1_cert")
Interceptor.attach(OCSP_request_add1_cert, {onLeave: function (args) {send("OCSP_request_add1_cert");}});

var OCSP_request_add1_nonce = Module.findExportByName("libcrypto.dll", "OCSP_request_add1_nonce")
Interceptor.attach(OCSP_request_add1_nonce, {onLeave: function (args) {send("OCSP_request_add1_nonce");}});

var OCSP_request_is_signed = Module.findExportByName("libcrypto.dll", "OCSP_request_is_signed")
Interceptor.attach(OCSP_request_is_signed, {onLeave: function (args) {send("OCSP_request_is_signed");}});

var OCSP_request_onereq_count = Module.findExportByName("libcrypto.dll", "OCSP_request_onereq_count")
Interceptor.attach(OCSP_request_onereq_count, {onLeave: function (args) {send("OCSP_request_onereq_count");}});

var OCSP_request_onereq_get0 = Module.findExportByName("libcrypto.dll", "OCSP_request_onereq_get0")
Interceptor.attach(OCSP_request_onereq_get0, {onLeave: function (args) {send("OCSP_request_onereq_get0");}});

var OCSP_request_set1_name = Module.findExportByName("libcrypto.dll", "OCSP_request_set1_name")
Interceptor.attach(OCSP_request_set1_name, {onLeave: function (args) {send("OCSP_request_set1_name");}});

var OCSP_request_sign = Module.findExportByName("libcrypto.dll", "OCSP_request_sign")
Interceptor.attach(OCSP_request_sign, {onLeave: function (args) {send("OCSP_request_sign");}});

var OCSP_request_verify = Module.findExportByName("libcrypto.dll", "OCSP_request_verify")
Interceptor.attach(OCSP_request_verify, {onLeave: function (args) {send("OCSP_request_verify");}});

var OCSP_resp_count = Module.findExportByName("libcrypto.dll", "OCSP_resp_count")
Interceptor.attach(OCSP_resp_count, {onLeave: function (args) {send("OCSP_resp_count");}});

var OCSP_resp_find = Module.findExportByName("libcrypto.dll", "OCSP_resp_find")
Interceptor.attach(OCSP_resp_find, {onLeave: function (args) {send("OCSP_resp_find");}});

var OCSP_resp_find_status = Module.findExportByName("libcrypto.dll", "OCSP_resp_find_status")
Interceptor.attach(OCSP_resp_find_status, {onLeave: function (args) {send("OCSP_resp_find_status");}});

var OCSP_resp_get0 = Module.findExportByName("libcrypto.dll", "OCSP_resp_get0")
Interceptor.attach(OCSP_resp_get0, {onLeave: function (args) {send("OCSP_resp_get0");}});

var OCSP_response_create = Module.findExportByName("libcrypto.dll", "OCSP_response_create")
Interceptor.attach(OCSP_response_create, {onLeave: function (args) {send("OCSP_response_create");}});

var OCSP_response_get1_basic = Module.findExportByName("libcrypto.dll", "OCSP_response_get1_basic")
Interceptor.attach(OCSP_response_get1_basic, {onLeave: function (args) {send("OCSP_response_get1_basic");}});

var OCSP_response_status = Module.findExportByName("libcrypto.dll", "OCSP_response_status")
Interceptor.attach(OCSP_response_status, {onLeave: function (args) {send("OCSP_response_status");}});

var OCSP_response_status_str = Module.findExportByName("libcrypto.dll", "OCSP_response_status_str")
Interceptor.attach(OCSP_response_status_str, {onLeave: function (args) {send("OCSP_response_status_str");}});

var OCSP_sendreq_bio = Module.findExportByName("libcrypto.dll", "OCSP_sendreq_bio")
Interceptor.attach(OCSP_sendreq_bio, {onLeave: function (args) {send("OCSP_sendreq_bio");}});

var OCSP_sendreq_nbio = Module.findExportByName("libcrypto.dll", "OCSP_sendreq_nbio")
Interceptor.attach(OCSP_sendreq_nbio, {onLeave: function (args) {send("OCSP_sendreq_nbio");}});

var OCSP_sendreq_new = Module.findExportByName("libcrypto.dll", "OCSP_sendreq_new")
Interceptor.attach(OCSP_sendreq_new, {onLeave: function (args) {send("OCSP_sendreq_new");}});

var OCSP_single_get0_status = Module.findExportByName("libcrypto.dll", "OCSP_single_get0_status")
Interceptor.attach(OCSP_single_get0_status, {onLeave: function (args) {send("OCSP_single_get0_status");}});

var OCSP_url_svcloc_new = Module.findExportByName("libcrypto.dll", "OCSP_url_svcloc_new")
Interceptor.attach(OCSP_url_svcloc_new, {onLeave: function (args) {send("OCSP_url_svcloc_new");}});

var OPENSSL_add_all_algorithms_conf = Module.findExportByName("libcrypto.dll", "OPENSSL_add_all_algorithms_conf")
Interceptor.attach(OPENSSL_add_all_algorithms_conf, {onLeave: function (args) {send("OPENSSL_add_all_algorithms_conf");}});

var OPENSSL_add_all_algorithms_noconf = Module.findExportByName("libcrypto.dll", "OPENSSL_add_all_algorithms_noconf")
Interceptor.attach(OPENSSL_add_all_algorithms_noconf, {onLeave: function (args) {send("OPENSSL_add_all_algorithms_noconf");}});

var OPENSSL_asc2uni = Module.findExportByName("libcrypto.dll", "OPENSSL_asc2uni")
Interceptor.attach(OPENSSL_asc2uni, {onLeave: function (args) {send("OPENSSL_asc2uni");}});

var OPENSSL_cleanse = Module.findExportByName("libcrypto.dll", "OPENSSL_cleanse")
Interceptor.attach(OPENSSL_cleanse, {onLeave: function (args) {send("OPENSSL_cleanse");}});

var OPENSSL_config = Module.findExportByName("libcrypto.dll", "OPENSSL_config")
Interceptor.attach(OPENSSL_config, {onLeave: function (args) {send("OPENSSL_config");}});

var OPENSSL_cpu_caps = Module.findExportByName("libcrypto.dll", "OPENSSL_cpu_caps")
Interceptor.attach(OPENSSL_cpu_caps, {onLeave: function (args) {send("OPENSSL_cpu_caps");}});

var OPENSSL_cpuid_setup = Module.findExportByName("libcrypto.dll", "OPENSSL_cpuid_setup")
Interceptor.attach(OPENSSL_cpuid_setup, {onLeave: function (args) {send("OPENSSL_cpuid_setup");}});

var OPENSSL_init = Module.findExportByName("libcrypto.dll", "OPENSSL_init")
Interceptor.attach(OPENSSL_init, {onLeave: function (args) {send("OPENSSL_init");}});

var OPENSSL_init_crypto = Module.findExportByName("libcrypto.dll", "OPENSSL_init_crypto")
Interceptor.attach(OPENSSL_init_crypto, {onLeave: function (args) {send("OPENSSL_init_crypto");}});

var OPENSSL_load_builtin_modules = Module.findExportByName("libcrypto.dll", "OPENSSL_load_builtin_modules")
Interceptor.attach(OPENSSL_load_builtin_modules, {onLeave: function (args) {send("OPENSSL_load_builtin_modules");}});

var OPENSSL_no_config = Module.findExportByName("libcrypto.dll", "OPENSSL_no_config")
Interceptor.attach(OPENSSL_no_config, {onLeave: function (args) {send("OPENSSL_no_config");}});

var OPENSSL_strcasecmp = Module.findExportByName("libcrypto.dll", "OPENSSL_strcasecmp")
Interceptor.attach(OPENSSL_strcasecmp, {onLeave: function (args) {send("OPENSSL_strcasecmp");}});

var OPENSSL_strncasecmp = Module.findExportByName("libcrypto.dll", "OPENSSL_strncasecmp")
Interceptor.attach(OPENSSL_strncasecmp, {onLeave: function (args) {send("OPENSSL_strncasecmp");}});

var OPENSSL_uni2asc = Module.findExportByName("libcrypto.dll", "OPENSSL_uni2asc")
Interceptor.attach(OPENSSL_uni2asc, {onLeave: function (args) {send("OPENSSL_uni2asc");}});

var OTHERNAME_cmp = Module.findExportByName("libcrypto.dll", "OTHERNAME_cmp")
Interceptor.attach(OTHERNAME_cmp, {onLeave: function (args) {send("OTHERNAME_cmp");}});

var OTHERNAME_free = Module.findExportByName("libcrypto.dll", "OTHERNAME_free")
Interceptor.attach(OTHERNAME_free, {onLeave: function (args) {send("OTHERNAME_free");}});

var OTHERNAME_it = Module.findExportByName("libcrypto.dll", "OTHERNAME_it")
Interceptor.attach(OTHERNAME_it, {onLeave: function (args) {send("OTHERNAME_it");}});

var OTHERNAME_new = Module.findExportByName("libcrypto.dll", "OTHERNAME_new")
Interceptor.attach(OTHERNAME_new, {onLeave: function (args) {send("OTHERNAME_new");}});

var OpenSSLDie = Module.findExportByName("libcrypto.dll", "OpenSSLDie")
Interceptor.attach(OpenSSLDie, {onLeave: function (args) {send("OpenSSLDie");}});

var OpenSSL_add_all_ciphers = Module.findExportByName("libcrypto.dll", "OpenSSL_add_all_ciphers")
Interceptor.attach(OpenSSL_add_all_ciphers, {onLeave: function (args) {send("OpenSSL_add_all_ciphers");}});

var OpenSSL_add_all_digests = Module.findExportByName("libcrypto.dll", "OpenSSL_add_all_digests")
Interceptor.attach(OpenSSL_add_all_digests, {onLeave: function (args) {send("OpenSSL_add_all_digests");}});

var OpenSSL_version = Module.findExportByName("libcrypto.dll", "OpenSSL_version")
Interceptor.attach(OpenSSL_version, {onLeave: function (args) {send("OpenSSL_version");}});

var OpenSSL_version_num = Module.findExportByName("libcrypto.dll", "OpenSSL_version_num")
Interceptor.attach(OpenSSL_version_num, {onLeave: function (args) {send("OpenSSL_version_num");}});

var PBE2PARAM_free = Module.findExportByName("libcrypto.dll", "PBE2PARAM_free")
Interceptor.attach(PBE2PARAM_free, {onLeave: function (args) {send("PBE2PARAM_free");}});

var PBE2PARAM_it = Module.findExportByName("libcrypto.dll", "PBE2PARAM_it")
Interceptor.attach(PBE2PARAM_it, {onLeave: function (args) {send("PBE2PARAM_it");}});

var PBE2PARAM_new = Module.findExportByName("libcrypto.dll", "PBE2PARAM_new")
Interceptor.attach(PBE2PARAM_new, {onLeave: function (args) {send("PBE2PARAM_new");}});

var PBEPARAM_free = Module.findExportByName("libcrypto.dll", "PBEPARAM_free")
Interceptor.attach(PBEPARAM_free, {onLeave: function (args) {send("PBEPARAM_free");}});

var PBEPARAM_it = Module.findExportByName("libcrypto.dll", "PBEPARAM_it")
Interceptor.attach(PBEPARAM_it, {onLeave: function (args) {send("PBEPARAM_it");}});

var PBEPARAM_new = Module.findExportByName("libcrypto.dll", "PBEPARAM_new")
Interceptor.attach(PBEPARAM_new, {onLeave: function (args) {send("PBEPARAM_new");}});

var PBKDF2PARAM_free = Module.findExportByName("libcrypto.dll", "PBKDF2PARAM_free")
Interceptor.attach(PBKDF2PARAM_free, {onLeave: function (args) {send("PBKDF2PARAM_free");}});

var PBKDF2PARAM_it = Module.findExportByName("libcrypto.dll", "PBKDF2PARAM_it")
Interceptor.attach(PBKDF2PARAM_it, {onLeave: function (args) {send("PBKDF2PARAM_it");}});

var PBKDF2PARAM_new = Module.findExportByName("libcrypto.dll", "PBKDF2PARAM_new")
Interceptor.attach(PBKDF2PARAM_new, {onLeave: function (args) {send("PBKDF2PARAM_new");}});

var PEM_ASN1_read = Module.findExportByName("libcrypto.dll", "PEM_ASN1_read")
Interceptor.attach(PEM_ASN1_read, {onLeave: function (args) {send("PEM_ASN1_read");}});

var PEM_ASN1_read_bio = Module.findExportByName("libcrypto.dll", "PEM_ASN1_read_bio")
Interceptor.attach(PEM_ASN1_read_bio, {onLeave: function (args) {send("PEM_ASN1_read_bio");}});

var PEM_ASN1_write = Module.findExportByName("libcrypto.dll", "PEM_ASN1_write")
Interceptor.attach(PEM_ASN1_write, {onLeave: function (args) {send("PEM_ASN1_write");}});

var PEM_ASN1_write_bio = Module.findExportByName("libcrypto.dll", "PEM_ASN1_write_bio")
Interceptor.attach(PEM_ASN1_write_bio, {onLeave: function (args) {send("PEM_ASN1_write_bio");}});

var PEM_SealFinal = Module.findExportByName("libcrypto.dll", "PEM_SealFinal")
Interceptor.attach(PEM_SealFinal, {onLeave: function (args) {send("PEM_SealFinal");}});

var PEM_SealInit = Module.findExportByName("libcrypto.dll", "PEM_SealInit")
Interceptor.attach(PEM_SealInit, {onLeave: function (args) {send("PEM_SealInit");}});

var PEM_SealUpdate = Module.findExportByName("libcrypto.dll", "PEM_SealUpdate")
Interceptor.attach(PEM_SealUpdate, {onLeave: function (args) {send("PEM_SealUpdate");}});

var PEM_SignFinal = Module.findExportByName("libcrypto.dll", "PEM_SignFinal")
Interceptor.attach(PEM_SignFinal, {onLeave: function (args) {send("PEM_SignFinal");}});

var PEM_SignInit = Module.findExportByName("libcrypto.dll", "PEM_SignInit")
Interceptor.attach(PEM_SignInit, {onLeave: function (args) {send("PEM_SignInit");}});

var PEM_SignUpdate = Module.findExportByName("libcrypto.dll", "PEM_SignUpdate")
Interceptor.attach(PEM_SignUpdate, {onLeave: function (args) {send("PEM_SignUpdate");}});

var PEM_X509_INFO_read = Module.findExportByName("libcrypto.dll", "PEM_X509_INFO_read")
Interceptor.attach(PEM_X509_INFO_read, {onLeave: function (args) {send("PEM_X509_INFO_read");}});

var PEM_X509_INFO_read_bio = Module.findExportByName("libcrypto.dll", "PEM_X509_INFO_read_bio")
Interceptor.attach(PEM_X509_INFO_read_bio, {onLeave: function (args) {send("PEM_X509_INFO_read_bio");}});

var PEM_X509_INFO_write_bio = Module.findExportByName("libcrypto.dll", "PEM_X509_INFO_write_bio")
Interceptor.attach(PEM_X509_INFO_write_bio, {onLeave: function (args) {send("PEM_X509_INFO_write_bio");}});

var PEM_bytes_read_bio = Module.findExportByName("libcrypto.dll", "PEM_bytes_read_bio")
Interceptor.attach(PEM_bytes_read_bio, {onLeave: function (args) {send("PEM_bytes_read_bio");}});

var PEM_def_callback = Module.findExportByName("libcrypto.dll", "PEM_def_callback")
Interceptor.attach(PEM_def_callback, {onLeave: function (args) {send("PEM_def_callback");}});

var PEM_dek_info = Module.findExportByName("libcrypto.dll", "PEM_dek_info")
Interceptor.attach(PEM_dek_info, {onLeave: function (args) {send("PEM_dek_info");}});

var PEM_do_header = Module.findExportByName("libcrypto.dll", "PEM_do_header")
Interceptor.attach(PEM_do_header, {onLeave: function (args) {send("PEM_do_header");}});

var PEM_get_EVP_CIPHER_INFO = Module.findExportByName("libcrypto.dll", "PEM_get_EVP_CIPHER_INFO")
Interceptor.attach(PEM_get_EVP_CIPHER_INFO, {onLeave: function (args) {send("PEM_get_EVP_CIPHER_INFO");}});

var PEM_proc_type = Module.findExportByName("libcrypto.dll", "PEM_proc_type")
Interceptor.attach(PEM_proc_type, {onLeave: function (args) {send("PEM_proc_type");}});

var PEM_read = Module.findExportByName("libcrypto.dll", "PEM_read")
Interceptor.attach(PEM_read, {onLeave: function (args) {send("PEM_read");}});

var PEM_read_CMS = Module.findExportByName("libcrypto.dll", "PEM_read_CMS")
Interceptor.attach(PEM_read_CMS, {onLeave: function (args) {send("PEM_read_CMS");}});

var PEM_read_DHparams = Module.findExportByName("libcrypto.dll", "PEM_read_DHparams")
Interceptor.attach(PEM_read_DHparams, {onLeave: function (args) {send("PEM_read_DHparams");}});

var PEM_read_DSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_DSAPrivateKey")
Interceptor.attach(PEM_read_DSAPrivateKey, {onLeave: function (args) {send("PEM_read_DSAPrivateKey");}});

var PEM_read_DSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_DSA_PUBKEY")
Interceptor.attach(PEM_read_DSA_PUBKEY, {onLeave: function (args) {send("PEM_read_DSA_PUBKEY");}});

var PEM_read_DSAparams = Module.findExportByName("libcrypto.dll", "PEM_read_DSAparams")
Interceptor.attach(PEM_read_DSAparams, {onLeave: function (args) {send("PEM_read_DSAparams");}});

var PEM_read_ECPKParameters = Module.findExportByName("libcrypto.dll", "PEM_read_ECPKParameters")
Interceptor.attach(PEM_read_ECPKParameters, {onLeave: function (args) {send("PEM_read_ECPKParameters");}});

var PEM_read_ECPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_ECPrivateKey")
Interceptor.attach(PEM_read_ECPrivateKey, {onLeave: function (args) {send("PEM_read_ECPrivateKey");}});

var PEM_read_EC_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_EC_PUBKEY")
Interceptor.attach(PEM_read_EC_PUBKEY, {onLeave: function (args) {send("PEM_read_EC_PUBKEY");}});

var PEM_read_NETSCAPE_CERT_SEQUENCE = Module.findExportByName("libcrypto.dll", "PEM_read_NETSCAPE_CERT_SEQUENCE")
Interceptor.attach(PEM_read_NETSCAPE_CERT_SEQUENCE, {onLeave: function (args) {send("PEM_read_NETSCAPE_CERT_SEQUENCE");}});

var PEM_read_PKCS7 = Module.findExportByName("libcrypto.dll", "PEM_read_PKCS7")
Interceptor.attach(PEM_read_PKCS7, {onLeave: function (args) {send("PEM_read_PKCS7");}});

var PEM_read_PKCS8 = Module.findExportByName("libcrypto.dll", "PEM_read_PKCS8")
Interceptor.attach(PEM_read_PKCS8, {onLeave: function (args) {send("PEM_read_PKCS8");}});

var PEM_read_PKCS8_PRIV_KEY_INFO = Module.findExportByName("libcrypto.dll", "PEM_read_PKCS8_PRIV_KEY_INFO")
Interceptor.attach(PEM_read_PKCS8_PRIV_KEY_INFO, {onLeave: function (args) {send("PEM_read_PKCS8_PRIV_KEY_INFO");}});

var PEM_read_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_PUBKEY")
Interceptor.attach(PEM_read_PUBKEY, {onLeave: function (args) {send("PEM_read_PUBKEY");}});

var PEM_read_PrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_PrivateKey")
Interceptor.attach(PEM_read_PrivateKey, {onLeave: function (args) {send("PEM_read_PrivateKey");}});

var PEM_read_RSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_RSAPrivateKey")
Interceptor.attach(PEM_read_RSAPrivateKey, {onLeave: function (args) {send("PEM_read_RSAPrivateKey");}});

var PEM_read_RSAPublicKey = Module.findExportByName("libcrypto.dll", "PEM_read_RSAPublicKey")
Interceptor.attach(PEM_read_RSAPublicKey, {onLeave: function (args) {send("PEM_read_RSAPublicKey");}});

var PEM_read_RSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_RSA_PUBKEY")
Interceptor.attach(PEM_read_RSA_PUBKEY, {onLeave: function (args) {send("PEM_read_RSA_PUBKEY");}});

var PEM_read_X509 = Module.findExportByName("libcrypto.dll", "PEM_read_X509")
Interceptor.attach(PEM_read_X509, {onLeave: function (args) {send("PEM_read_X509");}});

var PEM_read_X509_AUX = Module.findExportByName("libcrypto.dll", "PEM_read_X509_AUX")
Interceptor.attach(PEM_read_X509_AUX, {onLeave: function (args) {send("PEM_read_X509_AUX");}});

var PEM_read_X509_CERT_PAIR = Module.findExportByName("libcrypto.dll", "PEM_read_X509_CERT_PAIR")
Interceptor.attach(PEM_read_X509_CERT_PAIR, {onLeave: function (args) {send("PEM_read_X509_CERT_PAIR");}});

var PEM_read_X509_CRL = Module.findExportByName("libcrypto.dll", "PEM_read_X509_CRL")
Interceptor.attach(PEM_read_X509_CRL, {onLeave: function (args) {send("PEM_read_X509_CRL");}});

var PEM_read_X509_REQ = Module.findExportByName("libcrypto.dll", "PEM_read_X509_REQ")
Interceptor.attach(PEM_read_X509_REQ, {onLeave: function (args) {send("PEM_read_X509_REQ");}});

var PEM_read_bio = Module.findExportByName("libcrypto.dll", "PEM_read_bio")
Interceptor.attach(PEM_read_bio, {onLeave: function (args) {send("PEM_read_bio");}});

var PEM_read_bio_CMS = Module.findExportByName("libcrypto.dll", "PEM_read_bio_CMS")
Interceptor.attach(PEM_read_bio_CMS, {onLeave: function (args) {send("PEM_read_bio_CMS");}});

var PEM_read_bio_DHparams = Module.findExportByName("libcrypto.dll", "PEM_read_bio_DHparams")
Interceptor.attach(PEM_read_bio_DHparams, {onLeave: function (args) {send("PEM_read_bio_DHparams");}});

var PEM_read_bio_DSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_bio_DSAPrivateKey")
Interceptor.attach(PEM_read_bio_DSAPrivateKey, {onLeave: function (args) {send("PEM_read_bio_DSAPrivateKey");}});

var PEM_read_bio_DSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_bio_DSA_PUBKEY")
Interceptor.attach(PEM_read_bio_DSA_PUBKEY, {onLeave: function (args) {send("PEM_read_bio_DSA_PUBKEY");}});

var PEM_read_bio_DSAparams = Module.findExportByName("libcrypto.dll", "PEM_read_bio_DSAparams")
Interceptor.attach(PEM_read_bio_DSAparams, {onLeave: function (args) {send("PEM_read_bio_DSAparams");}});

var PEM_read_bio_ECPKParameters = Module.findExportByName("libcrypto.dll", "PEM_read_bio_ECPKParameters")
Interceptor.attach(PEM_read_bio_ECPKParameters, {onLeave: function (args) {send("PEM_read_bio_ECPKParameters");}});

var PEM_read_bio_ECPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_bio_ECPrivateKey")
Interceptor.attach(PEM_read_bio_ECPrivateKey, {onLeave: function (args) {send("PEM_read_bio_ECPrivateKey");}});

var PEM_read_bio_EC_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_bio_EC_PUBKEY")
Interceptor.attach(PEM_read_bio_EC_PUBKEY, {onLeave: function (args) {send("PEM_read_bio_EC_PUBKEY");}});

var PEM_read_bio_NETSCAPE_CERT_SEQUENCE = Module.findExportByName("libcrypto.dll", "PEM_read_bio_NETSCAPE_CERT_SEQUENCE")
Interceptor.attach(PEM_read_bio_NETSCAPE_CERT_SEQUENCE, {onLeave: function (args) {send("PEM_read_bio_NETSCAPE_CERT_SEQUENCE");}});

var PEM_read_bio_PKCS7 = Module.findExportByName("libcrypto.dll", "PEM_read_bio_PKCS7")
Interceptor.attach(PEM_read_bio_PKCS7, {onLeave: function (args) {send("PEM_read_bio_PKCS7");}});

var PEM_read_bio_PKCS8 = Module.findExportByName("libcrypto.dll", "PEM_read_bio_PKCS8")
Interceptor.attach(PEM_read_bio_PKCS8, {onLeave: function (args) {send("PEM_read_bio_PKCS8");}});

var PEM_read_bio_PKCS8_PRIV_KEY_INFO = Module.findExportByName("libcrypto.dll", "PEM_read_bio_PKCS8_PRIV_KEY_INFO")
Interceptor.attach(PEM_read_bio_PKCS8_PRIV_KEY_INFO, {onLeave: function (args) {send("PEM_read_bio_PKCS8_PRIV_KEY_INFO");}});

var PEM_read_bio_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_bio_PUBKEY")
Interceptor.attach(PEM_read_bio_PUBKEY, {onLeave: function (args) {send("PEM_read_bio_PUBKEY");}});

var PEM_read_bio_Parameters = Module.findExportByName("libcrypto.dll", "PEM_read_bio_Parameters")
Interceptor.attach(PEM_read_bio_Parameters, {onLeave: function (args) {send("PEM_read_bio_Parameters");}});

var PEM_read_bio_PrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_bio_PrivateKey")
Interceptor.attach(PEM_read_bio_PrivateKey, {onLeave: function (args) {send("PEM_read_bio_PrivateKey");}});

var PEM_read_bio_RSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_read_bio_RSAPrivateKey")
Interceptor.attach(PEM_read_bio_RSAPrivateKey, {onLeave: function (args) {send("PEM_read_bio_RSAPrivateKey");}});

var PEM_read_bio_RSAPublicKey = Module.findExportByName("libcrypto.dll", "PEM_read_bio_RSAPublicKey")
Interceptor.attach(PEM_read_bio_RSAPublicKey, {onLeave: function (args) {send("PEM_read_bio_RSAPublicKey");}});

var PEM_read_bio_RSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_read_bio_RSA_PUBKEY")
Interceptor.attach(PEM_read_bio_RSA_PUBKEY, {onLeave: function (args) {send("PEM_read_bio_RSA_PUBKEY");}});

var PEM_read_bio_X509 = Module.findExportByName("libcrypto.dll", "PEM_read_bio_X509")
Interceptor.attach(PEM_read_bio_X509, {onLeave: function (args) {send("PEM_read_bio_X509");}});

var PEM_read_bio_X509_AUX = Module.findExportByName("libcrypto.dll", "PEM_read_bio_X509_AUX")
Interceptor.attach(PEM_read_bio_X509_AUX, {onLeave: function (args) {send("PEM_read_bio_X509_AUX");}});

var PEM_read_bio_X509_CERT_PAIR = Module.findExportByName("libcrypto.dll", "PEM_read_bio_X509_CERT_PAIR")
Interceptor.attach(PEM_read_bio_X509_CERT_PAIR, {onLeave: function (args) {send("PEM_read_bio_X509_CERT_PAIR");}});

var PEM_read_bio_X509_CRL = Module.findExportByName("libcrypto.dll", "PEM_read_bio_X509_CRL")
Interceptor.attach(PEM_read_bio_X509_CRL, {onLeave: function (args) {send("PEM_read_bio_X509_CRL");}});

var PEM_read_bio_X509_REQ = Module.findExportByName("libcrypto.dll", "PEM_read_bio_X509_REQ")
Interceptor.attach(PEM_read_bio_X509_REQ, {onLeave: function (args) {send("PEM_read_bio_X509_REQ");}});

var PEM_write = Module.findExportByName("libcrypto.dll", "PEM_write")
Interceptor.attach(PEM_write, {onLeave: function (args) {send("PEM_write");}});

var PEM_write_CMS = Module.findExportByName("libcrypto.dll", "PEM_write_CMS")
Interceptor.attach(PEM_write_CMS, {onLeave: function (args) {send("PEM_write_CMS");}});

var PEM_write_DHparams = Module.findExportByName("libcrypto.dll", "PEM_write_DHparams")
Interceptor.attach(PEM_write_DHparams, {onLeave: function (args) {send("PEM_write_DHparams");}});

var PEM_write_DSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_DSAPrivateKey")
Interceptor.attach(PEM_write_DSAPrivateKey, {onLeave: function (args) {send("PEM_write_DSAPrivateKey");}});

var PEM_write_DSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_DSA_PUBKEY")
Interceptor.attach(PEM_write_DSA_PUBKEY, {onLeave: function (args) {send("PEM_write_DSA_PUBKEY");}});

var PEM_write_DSAparams = Module.findExportByName("libcrypto.dll", "PEM_write_DSAparams")
Interceptor.attach(PEM_write_DSAparams, {onLeave: function (args) {send("PEM_write_DSAparams");}});

var PEM_write_ECPKParameters = Module.findExportByName("libcrypto.dll", "PEM_write_ECPKParameters")
Interceptor.attach(PEM_write_ECPKParameters, {onLeave: function (args) {send("PEM_write_ECPKParameters");}});

var PEM_write_ECPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_ECPrivateKey")
Interceptor.attach(PEM_write_ECPrivateKey, {onLeave: function (args) {send("PEM_write_ECPrivateKey");}});

var PEM_write_EC_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_EC_PUBKEY")
Interceptor.attach(PEM_write_EC_PUBKEY, {onLeave: function (args) {send("PEM_write_EC_PUBKEY");}});

var PEM_write_NETSCAPE_CERT_SEQUENCE = Module.findExportByName("libcrypto.dll", "PEM_write_NETSCAPE_CERT_SEQUENCE")
Interceptor.attach(PEM_write_NETSCAPE_CERT_SEQUENCE, {onLeave: function (args) {send("PEM_write_NETSCAPE_CERT_SEQUENCE");}});

var PEM_write_PKCS7 = Module.findExportByName("libcrypto.dll", "PEM_write_PKCS7")
Interceptor.attach(PEM_write_PKCS7, {onLeave: function (args) {send("PEM_write_PKCS7");}});

var PEM_write_PKCS8 = Module.findExportByName("libcrypto.dll", "PEM_write_PKCS8")
Interceptor.attach(PEM_write_PKCS8, {onLeave: function (args) {send("PEM_write_PKCS8");}});

var PEM_write_PKCS8PrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_PKCS8PrivateKey")
Interceptor.attach(PEM_write_PKCS8PrivateKey, {onLeave: function (args) {send("PEM_write_PKCS8PrivateKey");}});

var PEM_write_PKCS8PrivateKey_nid = Module.findExportByName("libcrypto.dll", "PEM_write_PKCS8PrivateKey_nid")
Interceptor.attach(PEM_write_PKCS8PrivateKey_nid, {onLeave: function (args) {send("PEM_write_PKCS8PrivateKey_nid");}});

var PEM_write_PKCS8_PRIV_KEY_INFO = Module.findExportByName("libcrypto.dll", "PEM_write_PKCS8_PRIV_KEY_INFO")
Interceptor.attach(PEM_write_PKCS8_PRIV_KEY_INFO, {onLeave: function (args) {send("PEM_write_PKCS8_PRIV_KEY_INFO");}});

var PEM_write_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_PUBKEY")
Interceptor.attach(PEM_write_PUBKEY, {onLeave: function (args) {send("PEM_write_PUBKEY");}});

var PEM_write_PrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_PrivateKey")
Interceptor.attach(PEM_write_PrivateKey, {onLeave: function (args) {send("PEM_write_PrivateKey");}});

var PEM_write_RSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_RSAPrivateKey")
Interceptor.attach(PEM_write_RSAPrivateKey, {onLeave: function (args) {send("PEM_write_RSAPrivateKey");}});

var PEM_write_RSAPublicKey = Module.findExportByName("libcrypto.dll", "PEM_write_RSAPublicKey")
Interceptor.attach(PEM_write_RSAPublicKey, {onLeave: function (args) {send("PEM_write_RSAPublicKey");}});

var PEM_write_RSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_RSA_PUBKEY")
Interceptor.attach(PEM_write_RSA_PUBKEY, {onLeave: function (args) {send("PEM_write_RSA_PUBKEY");}});

var PEM_write_X509 = Module.findExportByName("libcrypto.dll", "PEM_write_X509")
Interceptor.attach(PEM_write_X509, {onLeave: function (args) {send("PEM_write_X509");}});

var PEM_write_X509_AUX = Module.findExportByName("libcrypto.dll", "PEM_write_X509_AUX")
Interceptor.attach(PEM_write_X509_AUX, {onLeave: function (args) {send("PEM_write_X509_AUX");}});

var PEM_write_X509_CERT_PAIR = Module.findExportByName("libcrypto.dll", "PEM_write_X509_CERT_PAIR")
Interceptor.attach(PEM_write_X509_CERT_PAIR, {onLeave: function (args) {send("PEM_write_X509_CERT_PAIR");}});

var PEM_write_X509_CRL = Module.findExportByName("libcrypto.dll", "PEM_write_X509_CRL")
Interceptor.attach(PEM_write_X509_CRL, {onLeave: function (args) {send("PEM_write_X509_CRL");}});

var PEM_write_X509_REQ = Module.findExportByName("libcrypto.dll", "PEM_write_X509_REQ")
Interceptor.attach(PEM_write_X509_REQ, {onLeave: function (args) {send("PEM_write_X509_REQ");}});

var PEM_write_X509_REQ_NEW = Module.findExportByName("libcrypto.dll", "PEM_write_X509_REQ_NEW")
Interceptor.attach(PEM_write_X509_REQ_NEW, {onLeave: function (args) {send("PEM_write_X509_REQ_NEW");}});

var PEM_write_bio = Module.findExportByName("libcrypto.dll", "PEM_write_bio")
Interceptor.attach(PEM_write_bio, {onLeave: function (args) {send("PEM_write_bio");}});

var PEM_write_bio_ASN1_stream = Module.findExportByName("libcrypto.dll", "PEM_write_bio_ASN1_stream")
Interceptor.attach(PEM_write_bio_ASN1_stream, {onLeave: function (args) {send("PEM_write_bio_ASN1_stream");}});

var PEM_write_bio_CMS = Module.findExportByName("libcrypto.dll", "PEM_write_bio_CMS")
Interceptor.attach(PEM_write_bio_CMS, {onLeave: function (args) {send("PEM_write_bio_CMS");}});

var PEM_write_bio_CMS_stream = Module.findExportByName("libcrypto.dll", "PEM_write_bio_CMS_stream")
Interceptor.attach(PEM_write_bio_CMS_stream, {onLeave: function (args) {send("PEM_write_bio_CMS_stream");}});

var PEM_write_bio_DHparams = Module.findExportByName("libcrypto.dll", "PEM_write_bio_DHparams")
Interceptor.attach(PEM_write_bio_DHparams, {onLeave: function (args) {send("PEM_write_bio_DHparams");}});

var PEM_write_bio_DSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_bio_DSAPrivateKey")
Interceptor.attach(PEM_write_bio_DSAPrivateKey, {onLeave: function (args) {send("PEM_write_bio_DSAPrivateKey");}});

var PEM_write_bio_DSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_bio_DSA_PUBKEY")
Interceptor.attach(PEM_write_bio_DSA_PUBKEY, {onLeave: function (args) {send("PEM_write_bio_DSA_PUBKEY");}});

var PEM_write_bio_DSAparams = Module.findExportByName("libcrypto.dll", "PEM_write_bio_DSAparams")
Interceptor.attach(PEM_write_bio_DSAparams, {onLeave: function (args) {send("PEM_write_bio_DSAparams");}});

var PEM_write_bio_ECPKParameters = Module.findExportByName("libcrypto.dll", "PEM_write_bio_ECPKParameters")
Interceptor.attach(PEM_write_bio_ECPKParameters, {onLeave: function (args) {send("PEM_write_bio_ECPKParameters");}});

var PEM_write_bio_ECPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_bio_ECPrivateKey")
Interceptor.attach(PEM_write_bio_ECPrivateKey, {onLeave: function (args) {send("PEM_write_bio_ECPrivateKey");}});

var PEM_write_bio_EC_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_bio_EC_PUBKEY")
Interceptor.attach(PEM_write_bio_EC_PUBKEY, {onLeave: function (args) {send("PEM_write_bio_EC_PUBKEY");}});

var PEM_write_bio_NETSCAPE_CERT_SEQUENCE = Module.findExportByName("libcrypto.dll", "PEM_write_bio_NETSCAPE_CERT_SEQUENCE")
Interceptor.attach(PEM_write_bio_NETSCAPE_CERT_SEQUENCE, {onLeave: function (args) {send("PEM_write_bio_NETSCAPE_CERT_SEQUENCE");}});

var PEM_write_bio_PKCS7 = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PKCS7")
Interceptor.attach(PEM_write_bio_PKCS7, {onLeave: function (args) {send("PEM_write_bio_PKCS7");}});

var PEM_write_bio_PKCS7_stream = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PKCS7_stream")
Interceptor.attach(PEM_write_bio_PKCS7_stream, {onLeave: function (args) {send("PEM_write_bio_PKCS7_stream");}});

var PEM_write_bio_PKCS8 = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PKCS8")
Interceptor.attach(PEM_write_bio_PKCS8, {onLeave: function (args) {send("PEM_write_bio_PKCS8");}});

var PEM_write_bio_PKCS8PrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PKCS8PrivateKey")
Interceptor.attach(PEM_write_bio_PKCS8PrivateKey, {onLeave: function (args) {send("PEM_write_bio_PKCS8PrivateKey");}});

var PEM_write_bio_PKCS8PrivateKey_nid = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PKCS8PrivateKey_nid")
Interceptor.attach(PEM_write_bio_PKCS8PrivateKey_nid, {onLeave: function (args) {send("PEM_write_bio_PKCS8PrivateKey_nid");}});

var PEM_write_bio_PKCS8_PRIV_KEY_INFO = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PKCS8_PRIV_KEY_INFO")
Interceptor.attach(PEM_write_bio_PKCS8_PRIV_KEY_INFO, {onLeave: function (args) {send("PEM_write_bio_PKCS8_PRIV_KEY_INFO");}});

var PEM_write_bio_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PUBKEY")
Interceptor.attach(PEM_write_bio_PUBKEY, {onLeave: function (args) {send("PEM_write_bio_PUBKEY");}});

var PEM_write_bio_Parameters = Module.findExportByName("libcrypto.dll", "PEM_write_bio_Parameters")
Interceptor.attach(PEM_write_bio_Parameters, {onLeave: function (args) {send("PEM_write_bio_Parameters");}});

var PEM_write_bio_PrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_bio_PrivateKey")
Interceptor.attach(PEM_write_bio_PrivateKey, {onLeave: function (args) {send("PEM_write_bio_PrivateKey");}});

var PEM_write_bio_RSAPrivateKey = Module.findExportByName("libcrypto.dll", "PEM_write_bio_RSAPrivateKey")
Interceptor.attach(PEM_write_bio_RSAPrivateKey, {onLeave: function (args) {send("PEM_write_bio_RSAPrivateKey");}});

var PEM_write_bio_RSAPublicKey = Module.findExportByName("libcrypto.dll", "PEM_write_bio_RSAPublicKey")
Interceptor.attach(PEM_write_bio_RSAPublicKey, {onLeave: function (args) {send("PEM_write_bio_RSAPublicKey");}});

var PEM_write_bio_RSA_PUBKEY = Module.findExportByName("libcrypto.dll", "PEM_write_bio_RSA_PUBKEY")
Interceptor.attach(PEM_write_bio_RSA_PUBKEY, {onLeave: function (args) {send("PEM_write_bio_RSA_PUBKEY");}});

var PEM_write_bio_X509 = Module.findExportByName("libcrypto.dll", "PEM_write_bio_X509")
Interceptor.attach(PEM_write_bio_X509, {onLeave: function (args) {send("PEM_write_bio_X509");}});

var PEM_write_bio_X509_AUX = Module.findExportByName("libcrypto.dll", "PEM_write_bio_X509_AUX")
Interceptor.attach(PEM_write_bio_X509_AUX, {onLeave: function (args) {send("PEM_write_bio_X509_AUX");}});

var PEM_write_bio_X509_CERT_PAIR = Module.findExportByName("libcrypto.dll", "PEM_write_bio_X509_CERT_PAIR")
Interceptor.attach(PEM_write_bio_X509_CERT_PAIR, {onLeave: function (args) {send("PEM_write_bio_X509_CERT_PAIR");}});

var PEM_write_bio_X509_CRL = Module.findExportByName("libcrypto.dll", "PEM_write_bio_X509_CRL")
Interceptor.attach(PEM_write_bio_X509_CRL, {onLeave: function (args) {send("PEM_write_bio_X509_CRL");}});

var PEM_write_bio_X509_REQ = Module.findExportByName("libcrypto.dll", "PEM_write_bio_X509_REQ")
Interceptor.attach(PEM_write_bio_X509_REQ, {onLeave: function (args) {send("PEM_write_bio_X509_REQ");}});

var PEM_write_bio_X509_REQ_NEW = Module.findExportByName("libcrypto.dll", "PEM_write_bio_X509_REQ_NEW")
Interceptor.attach(PEM_write_bio_X509_REQ_NEW, {onLeave: function (args) {send("PEM_write_bio_X509_REQ_NEW");}});

var PKCS12_AUTHSAFES_it = Module.findExportByName("libcrypto.dll", "PKCS12_AUTHSAFES_it")
Interceptor.attach(PKCS12_AUTHSAFES_it, {onLeave: function (args) {send("PKCS12_AUTHSAFES_it");}});

var PKCS12_BAGS_free = Module.findExportByName("libcrypto.dll", "PKCS12_BAGS_free")
Interceptor.attach(PKCS12_BAGS_free, {onLeave: function (args) {send("PKCS12_BAGS_free");}});

var PKCS12_BAGS_it = Module.findExportByName("libcrypto.dll", "PKCS12_BAGS_it")
Interceptor.attach(PKCS12_BAGS_it, {onLeave: function (args) {send("PKCS12_BAGS_it");}});

var PKCS12_BAGS_new = Module.findExportByName("libcrypto.dll", "PKCS12_BAGS_new")
Interceptor.attach(PKCS12_BAGS_new, {onLeave: function (args) {send("PKCS12_BAGS_new");}});

var PKCS12_MAC_DATA_free = Module.findExportByName("libcrypto.dll", "PKCS12_MAC_DATA_free")
Interceptor.attach(PKCS12_MAC_DATA_free, {onLeave: function (args) {send("PKCS12_MAC_DATA_free");}});

var PKCS12_MAC_DATA_it = Module.findExportByName("libcrypto.dll", "PKCS12_MAC_DATA_it")
Interceptor.attach(PKCS12_MAC_DATA_it, {onLeave: function (args) {send("PKCS12_MAC_DATA_it");}});

var PKCS12_MAC_DATA_new = Module.findExportByName("libcrypto.dll", "PKCS12_MAC_DATA_new")
Interceptor.attach(PKCS12_MAC_DATA_new, {onLeave: function (args) {send("PKCS12_MAC_DATA_new");}});

var PKCS12_MAKE_KEYBAG = Module.findExportByName("libcrypto.dll", "PKCS12_MAKE_KEYBAG")
Interceptor.attach(PKCS12_MAKE_KEYBAG, {onLeave: function (args) {send("PKCS12_MAKE_KEYBAG");}});

var PKCS12_MAKE_SHKEYBAG = Module.findExportByName("libcrypto.dll", "PKCS12_MAKE_SHKEYBAG")
Interceptor.attach(PKCS12_MAKE_SHKEYBAG, {onLeave: function (args) {send("PKCS12_MAKE_SHKEYBAG");}});

var PKCS12_PBE_add = Module.findExportByName("libcrypto.dll", "PKCS12_PBE_add")
Interceptor.attach(PKCS12_PBE_add, {onLeave: function (args) {send("PKCS12_PBE_add");}});

var PKCS12_PBE_keyivgen = Module.findExportByName("libcrypto.dll", "PKCS12_PBE_keyivgen")
Interceptor.attach(PKCS12_PBE_keyivgen, {onLeave: function (args) {send("PKCS12_PBE_keyivgen");}});

var PKCS12_SAFEBAGS_it = Module.findExportByName("libcrypto.dll", "PKCS12_SAFEBAGS_it")
Interceptor.attach(PKCS12_SAFEBAGS_it, {onLeave: function (args) {send("PKCS12_SAFEBAGS_it");}});

var PKCS12_SAFEBAG_free = Module.findExportByName("libcrypto.dll", "PKCS12_SAFEBAG_free")
Interceptor.attach(PKCS12_SAFEBAG_free, {onLeave: function (args) {send("PKCS12_SAFEBAG_free");}});

var PKCS12_SAFEBAG_it = Module.findExportByName("libcrypto.dll", "PKCS12_SAFEBAG_it")
Interceptor.attach(PKCS12_SAFEBAG_it, {onLeave: function (args) {send("PKCS12_SAFEBAG_it");}});

var PKCS12_SAFEBAG_new = Module.findExportByName("libcrypto.dll", "PKCS12_SAFEBAG_new")
Interceptor.attach(PKCS12_SAFEBAG_new, {onLeave: function (args) {send("PKCS12_SAFEBAG_new");}});

var PKCS12_add_CSPName_asc = Module.findExportByName("libcrypto.dll", "PKCS12_add_CSPName_asc")
Interceptor.attach(PKCS12_add_CSPName_asc, {onLeave: function (args) {send("PKCS12_add_CSPName_asc");}});

var PKCS12_add_cert = Module.findExportByName("libcrypto.dll", "PKCS12_add_cert")
Interceptor.attach(PKCS12_add_cert, {onLeave: function (args) {send("PKCS12_add_cert");}});

var PKCS12_add_friendlyname_asc = Module.findExportByName("libcrypto.dll", "PKCS12_add_friendlyname_asc")
Interceptor.attach(PKCS12_add_friendlyname_asc, {onLeave: function (args) {send("PKCS12_add_friendlyname_asc");}});

var PKCS12_add_friendlyname_uni = Module.findExportByName("libcrypto.dll", "PKCS12_add_friendlyname_uni")
Interceptor.attach(PKCS12_add_friendlyname_uni, {onLeave: function (args) {send("PKCS12_add_friendlyname_uni");}});

var PKCS12_add_key = Module.findExportByName("libcrypto.dll", "PKCS12_add_key")
Interceptor.attach(PKCS12_add_key, {onLeave: function (args) {send("PKCS12_add_key");}});

var PKCS12_add_localkeyid = Module.findExportByName("libcrypto.dll", "PKCS12_add_localkeyid")
Interceptor.attach(PKCS12_add_localkeyid, {onLeave: function (args) {send("PKCS12_add_localkeyid");}});

var PKCS12_add_safe = Module.findExportByName("libcrypto.dll", "PKCS12_add_safe")
Interceptor.attach(PKCS12_add_safe, {onLeave: function (args) {send("PKCS12_add_safe");}});

var PKCS12_add_safes = Module.findExportByName("libcrypto.dll", "PKCS12_add_safes")
Interceptor.attach(PKCS12_add_safes, {onLeave: function (args) {send("PKCS12_add_safes");}});

var PKCS12_certbag2x509 = Module.findExportByName("libcrypto.dll", "PKCS12_certbag2x509")
Interceptor.attach(PKCS12_certbag2x509, {onLeave: function (args) {send("PKCS12_certbag2x509");}});

var PKCS12_certbag2x509crl = Module.findExportByName("libcrypto.dll", "PKCS12_certbag2x509crl")
Interceptor.attach(PKCS12_certbag2x509crl, {onLeave: function (args) {send("PKCS12_certbag2x509crl");}});

var PKCS12_create = Module.findExportByName("libcrypto.dll", "PKCS12_create")
Interceptor.attach(PKCS12_create, {onLeave: function (args) {send("PKCS12_create");}});

var PKCS12_decrypt_skey = Module.findExportByName("libcrypto.dll", "PKCS12_decrypt_skey")
Interceptor.attach(PKCS12_decrypt_skey, {onLeave: function (args) {send("PKCS12_decrypt_skey");}});

var PKCS12_free = Module.findExportByName("libcrypto.dll", "PKCS12_free")
Interceptor.attach(PKCS12_free, {onLeave: function (args) {send("PKCS12_free");}});

var PKCS12_gen_mac = Module.findExportByName("libcrypto.dll", "PKCS12_gen_mac")
Interceptor.attach(PKCS12_gen_mac, {onLeave: function (args) {send("PKCS12_gen_mac");}});

var PKCS12_get_attr_gen = Module.findExportByName("libcrypto.dll", "PKCS12_get_attr_gen")
Interceptor.attach(PKCS12_get_attr_gen, {onLeave: function (args) {send("PKCS12_get_attr_gen");}});

var PKCS12_get_friendlyname = Module.findExportByName("libcrypto.dll", "PKCS12_get_friendlyname")
Interceptor.attach(PKCS12_get_friendlyname, {onLeave: function (args) {send("PKCS12_get_friendlyname");}});

var PKCS12_init = Module.findExportByName("libcrypto.dll", "PKCS12_init")
Interceptor.attach(PKCS12_init, {onLeave: function (args) {send("PKCS12_init");}});

var PKCS12_it = Module.findExportByName("libcrypto.dll", "PKCS12_it")
Interceptor.attach(PKCS12_it, {onLeave: function (args) {send("PKCS12_it");}});

var PKCS12_item_decrypt_d2i = Module.findExportByName("libcrypto.dll", "PKCS12_item_decrypt_d2i")
Interceptor.attach(PKCS12_item_decrypt_d2i, {onLeave: function (args) {send("PKCS12_item_decrypt_d2i");}});

var PKCS12_item_i2d_encrypt = Module.findExportByName("libcrypto.dll", "PKCS12_item_i2d_encrypt")
Interceptor.attach(PKCS12_item_i2d_encrypt, {onLeave: function (args) {send("PKCS12_item_i2d_encrypt");}});

var PKCS12_item_pack_safebag = Module.findExportByName("libcrypto.dll", "PKCS12_item_pack_safebag")
Interceptor.attach(PKCS12_item_pack_safebag, {onLeave: function (args) {send("PKCS12_item_pack_safebag");}});

var PKCS12_key_gen_asc = Module.findExportByName("libcrypto.dll", "PKCS12_key_gen_asc")
Interceptor.attach(PKCS12_key_gen_asc, {onLeave: function (args) {send("PKCS12_key_gen_asc");}});

var PKCS12_key_gen_uni = Module.findExportByName("libcrypto.dll", "PKCS12_key_gen_uni")
Interceptor.attach(PKCS12_key_gen_uni, {onLeave: function (args) {send("PKCS12_key_gen_uni");}});

var PKCS12_new = Module.findExportByName("libcrypto.dll", "PKCS12_new")
Interceptor.attach(PKCS12_new, {onLeave: function (args) {send("PKCS12_new");}});

var PKCS12_newpass = Module.findExportByName("libcrypto.dll", "PKCS12_newpass")
Interceptor.attach(PKCS12_newpass, {onLeave: function (args) {send("PKCS12_newpass");}});

var PKCS12_pack_authsafes = Module.findExportByName("libcrypto.dll", "PKCS12_pack_authsafes")
Interceptor.attach(PKCS12_pack_authsafes, {onLeave: function (args) {send("PKCS12_pack_authsafes");}});

var PKCS12_pack_p7data = Module.findExportByName("libcrypto.dll", "PKCS12_pack_p7data")
Interceptor.attach(PKCS12_pack_p7data, {onLeave: function (args) {send("PKCS12_pack_p7data");}});

var PKCS12_pack_p7encdata = Module.findExportByName("libcrypto.dll", "PKCS12_pack_p7encdata")
Interceptor.attach(PKCS12_pack_p7encdata, {onLeave: function (args) {send("PKCS12_pack_p7encdata");}});

var PKCS12_parse = Module.findExportByName("libcrypto.dll", "PKCS12_parse")
Interceptor.attach(PKCS12_parse, {onLeave: function (args) {send("PKCS12_parse");}});

var PKCS12_pbe_crypt = Module.findExportByName("libcrypto.dll", "PKCS12_pbe_crypt")
Interceptor.attach(PKCS12_pbe_crypt, {onLeave: function (args) {send("PKCS12_pbe_crypt");}});

var PKCS12_set_mac = Module.findExportByName("libcrypto.dll", "PKCS12_set_mac")
Interceptor.attach(PKCS12_set_mac, {onLeave: function (args) {send("PKCS12_set_mac");}});

var PKCS12_setup_mac = Module.findExportByName("libcrypto.dll", "PKCS12_setup_mac")
Interceptor.attach(PKCS12_setup_mac, {onLeave: function (args) {send("PKCS12_setup_mac");}});

var PKCS12_unpack_authsafes = Module.findExportByName("libcrypto.dll", "PKCS12_unpack_authsafes")
Interceptor.attach(PKCS12_unpack_authsafes, {onLeave: function (args) {send("PKCS12_unpack_authsafes");}});

var PKCS12_unpack_p7data = Module.findExportByName("libcrypto.dll", "PKCS12_unpack_p7data")
Interceptor.attach(PKCS12_unpack_p7data, {onLeave: function (args) {send("PKCS12_unpack_p7data");}});

var PKCS12_unpack_p7encdata = Module.findExportByName("libcrypto.dll", "PKCS12_unpack_p7encdata")
Interceptor.attach(PKCS12_unpack_p7encdata, {onLeave: function (args) {send("PKCS12_unpack_p7encdata");}});

var PKCS12_verify_mac = Module.findExportByName("libcrypto.dll", "PKCS12_verify_mac")
Interceptor.attach(PKCS12_verify_mac, {onLeave: function (args) {send("PKCS12_verify_mac");}});

var PKCS12_x5092certbag = Module.findExportByName("libcrypto.dll", "PKCS12_x5092certbag")
Interceptor.attach(PKCS12_x5092certbag, {onLeave: function (args) {send("PKCS12_x5092certbag");}});

var PKCS12_x509crl2certbag = Module.findExportByName("libcrypto.dll", "PKCS12_x509crl2certbag")
Interceptor.attach(PKCS12_x509crl2certbag, {onLeave: function (args) {send("PKCS12_x509crl2certbag");}});

var PKCS1_MGF1 = Module.findExportByName("libcrypto.dll", "PKCS1_MGF1")
Interceptor.attach(PKCS1_MGF1, {onLeave: function (args) {send("PKCS1_MGF1");}});

var PKCS5_PBE_add = Module.findExportByName("libcrypto.dll", "PKCS5_PBE_add")
Interceptor.attach(PKCS5_PBE_add, {onLeave: function (args) {send("PKCS5_PBE_add");}});

var PKCS5_PBE_keyivgen = Module.findExportByName("libcrypto.dll", "PKCS5_PBE_keyivgen")
Interceptor.attach(PKCS5_PBE_keyivgen, {onLeave: function (args) {send("PKCS5_PBE_keyivgen");}});

var PKCS5_PBKDF2_HMAC = Module.findExportByName("libcrypto.dll", "PKCS5_PBKDF2_HMAC")
Interceptor.attach(PKCS5_PBKDF2_HMAC, {onLeave: function (args) {send("PKCS5_PBKDF2_HMAC");}});

var PKCS5_PBKDF2_HMAC_SHA1 = Module.findExportByName("libcrypto.dll", "PKCS5_PBKDF2_HMAC_SHA1")
Interceptor.attach(PKCS5_PBKDF2_HMAC_SHA1, {onLeave: function (args) {send("PKCS5_PBKDF2_HMAC_SHA1");}});

var PKCS5_pbe2_set = Module.findExportByName("libcrypto.dll", "PKCS5_pbe2_set")
Interceptor.attach(PKCS5_pbe2_set, {onLeave: function (args) {send("PKCS5_pbe2_set");}});

var PKCS5_pbe2_set_iv = Module.findExportByName("libcrypto.dll", "PKCS5_pbe2_set_iv")
Interceptor.attach(PKCS5_pbe2_set_iv, {onLeave: function (args) {send("PKCS5_pbe2_set_iv");}});

var PKCS5_pbe_set = Module.findExportByName("libcrypto.dll", "PKCS5_pbe_set")
Interceptor.attach(PKCS5_pbe_set, {onLeave: function (args) {send("PKCS5_pbe_set");}});

var PKCS5_pbe_set0_algor = Module.findExportByName("libcrypto.dll", "PKCS5_pbe_set0_algor")
Interceptor.attach(PKCS5_pbe_set0_algor, {onLeave: function (args) {send("PKCS5_pbe_set0_algor");}});

var PKCS5_pbkdf2_set = Module.findExportByName("libcrypto.dll", "PKCS5_pbkdf2_set")
Interceptor.attach(PKCS5_pbkdf2_set, {onLeave: function (args) {send("PKCS5_pbkdf2_set");}});

var PKCS5_v2_PBE_keyivgen = Module.findExportByName("libcrypto.dll", "PKCS5_v2_PBE_keyivgen")
Interceptor.attach(PKCS5_v2_PBE_keyivgen, {onLeave: function (args) {send("PKCS5_v2_PBE_keyivgen");}});

var PKCS7_ATTR_SIGN_it = Module.findExportByName("libcrypto.dll", "PKCS7_ATTR_SIGN_it")
Interceptor.attach(PKCS7_ATTR_SIGN_it, {onLeave: function (args) {send("PKCS7_ATTR_SIGN_it");}});

var PKCS7_ATTR_VERIFY_it = Module.findExportByName("libcrypto.dll", "PKCS7_ATTR_VERIFY_it")
Interceptor.attach(PKCS7_ATTR_VERIFY_it, {onLeave: function (args) {send("PKCS7_ATTR_VERIFY_it");}});

var PKCS7_DIGEST_free = Module.findExportByName("libcrypto.dll", "PKCS7_DIGEST_free")
Interceptor.attach(PKCS7_DIGEST_free, {onLeave: function (args) {send("PKCS7_DIGEST_free");}});

var PKCS7_DIGEST_it = Module.findExportByName("libcrypto.dll", "PKCS7_DIGEST_it")
Interceptor.attach(PKCS7_DIGEST_it, {onLeave: function (args) {send("PKCS7_DIGEST_it");}});

var PKCS7_DIGEST_new = Module.findExportByName("libcrypto.dll", "PKCS7_DIGEST_new")
Interceptor.attach(PKCS7_DIGEST_new, {onLeave: function (args) {send("PKCS7_DIGEST_new");}});

var PKCS7_ENCRYPT_free = Module.findExportByName("libcrypto.dll", "PKCS7_ENCRYPT_free")
Interceptor.attach(PKCS7_ENCRYPT_free, {onLeave: function (args) {send("PKCS7_ENCRYPT_free");}});

var PKCS7_ENCRYPT_it = Module.findExportByName("libcrypto.dll", "PKCS7_ENCRYPT_it")
Interceptor.attach(PKCS7_ENCRYPT_it, {onLeave: function (args) {send("PKCS7_ENCRYPT_it");}});

var PKCS7_ENCRYPT_new = Module.findExportByName("libcrypto.dll", "PKCS7_ENCRYPT_new")
Interceptor.attach(PKCS7_ENCRYPT_new, {onLeave: function (args) {send("PKCS7_ENCRYPT_new");}});

var PKCS7_ENC_CONTENT_free = Module.findExportByName("libcrypto.dll", "PKCS7_ENC_CONTENT_free")
Interceptor.attach(PKCS7_ENC_CONTENT_free, {onLeave: function (args) {send("PKCS7_ENC_CONTENT_free");}});

var PKCS7_ENC_CONTENT_it = Module.findExportByName("libcrypto.dll", "PKCS7_ENC_CONTENT_it")
Interceptor.attach(PKCS7_ENC_CONTENT_it, {onLeave: function (args) {send("PKCS7_ENC_CONTENT_it");}});

var PKCS7_ENC_CONTENT_new = Module.findExportByName("libcrypto.dll", "PKCS7_ENC_CONTENT_new")
Interceptor.attach(PKCS7_ENC_CONTENT_new, {onLeave: function (args) {send("PKCS7_ENC_CONTENT_new");}});

var PKCS7_ENVELOPE_free = Module.findExportByName("libcrypto.dll", "PKCS7_ENVELOPE_free")
Interceptor.attach(PKCS7_ENVELOPE_free, {onLeave: function (args) {send("PKCS7_ENVELOPE_free");}});

var PKCS7_ENVELOPE_it = Module.findExportByName("libcrypto.dll", "PKCS7_ENVELOPE_it")
Interceptor.attach(PKCS7_ENVELOPE_it, {onLeave: function (args) {send("PKCS7_ENVELOPE_it");}});

var PKCS7_ENVELOPE_new = Module.findExportByName("libcrypto.dll", "PKCS7_ENVELOPE_new")
Interceptor.attach(PKCS7_ENVELOPE_new, {onLeave: function (args) {send("PKCS7_ENVELOPE_new");}});

var PKCS7_ISSUER_AND_SERIAL_digest = Module.findExportByName("libcrypto.dll", "PKCS7_ISSUER_AND_SERIAL_digest")
Interceptor.attach(PKCS7_ISSUER_AND_SERIAL_digest, {onLeave: function (args) {send("PKCS7_ISSUER_AND_SERIAL_digest");}});

var PKCS7_ISSUER_AND_SERIAL_free = Module.findExportByName("libcrypto.dll", "PKCS7_ISSUER_AND_SERIAL_free")
Interceptor.attach(PKCS7_ISSUER_AND_SERIAL_free, {onLeave: function (args) {send("PKCS7_ISSUER_AND_SERIAL_free");}});

var PKCS7_ISSUER_AND_SERIAL_it = Module.findExportByName("libcrypto.dll", "PKCS7_ISSUER_AND_SERIAL_it")
Interceptor.attach(PKCS7_ISSUER_AND_SERIAL_it, {onLeave: function (args) {send("PKCS7_ISSUER_AND_SERIAL_it");}});

var PKCS7_ISSUER_AND_SERIAL_new = Module.findExportByName("libcrypto.dll", "PKCS7_ISSUER_AND_SERIAL_new")
Interceptor.attach(PKCS7_ISSUER_AND_SERIAL_new, {onLeave: function (args) {send("PKCS7_ISSUER_AND_SERIAL_new");}});

var PKCS7_RECIP_INFO_free = Module.findExportByName("libcrypto.dll", "PKCS7_RECIP_INFO_free")
Interceptor.attach(PKCS7_RECIP_INFO_free, {onLeave: function (args) {send("PKCS7_RECIP_INFO_free");}});

var PKCS7_RECIP_INFO_get0_alg = Module.findExportByName("libcrypto.dll", "PKCS7_RECIP_INFO_get0_alg")
Interceptor.attach(PKCS7_RECIP_INFO_get0_alg, {onLeave: function (args) {send("PKCS7_RECIP_INFO_get0_alg");}});

var PKCS7_RECIP_INFO_it = Module.findExportByName("libcrypto.dll", "PKCS7_RECIP_INFO_it")
Interceptor.attach(PKCS7_RECIP_INFO_it, {onLeave: function (args) {send("PKCS7_RECIP_INFO_it");}});

var PKCS7_RECIP_INFO_new = Module.findExportByName("libcrypto.dll", "PKCS7_RECIP_INFO_new")
Interceptor.attach(PKCS7_RECIP_INFO_new, {onLeave: function (args) {send("PKCS7_RECIP_INFO_new");}});

var PKCS7_RECIP_INFO_set = Module.findExportByName("libcrypto.dll", "PKCS7_RECIP_INFO_set")
Interceptor.attach(PKCS7_RECIP_INFO_set, {onLeave: function (args) {send("PKCS7_RECIP_INFO_set");}});

var PKCS7_SIGNED_free = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNED_free")
Interceptor.attach(PKCS7_SIGNED_free, {onLeave: function (args) {send("PKCS7_SIGNED_free");}});

var PKCS7_SIGNED_it = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNED_it")
Interceptor.attach(PKCS7_SIGNED_it, {onLeave: function (args) {send("PKCS7_SIGNED_it");}});

var PKCS7_SIGNED_new = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNED_new")
Interceptor.attach(PKCS7_SIGNED_new, {onLeave: function (args) {send("PKCS7_SIGNED_new");}});

var PKCS7_SIGNER_INFO_free = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNER_INFO_free")
Interceptor.attach(PKCS7_SIGNER_INFO_free, {onLeave: function (args) {send("PKCS7_SIGNER_INFO_free");}});

var PKCS7_SIGNER_INFO_get0_algs = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNER_INFO_get0_algs")
Interceptor.attach(PKCS7_SIGNER_INFO_get0_algs, {onLeave: function (args) {send("PKCS7_SIGNER_INFO_get0_algs");}});

var PKCS7_SIGNER_INFO_it = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNER_INFO_it")
Interceptor.attach(PKCS7_SIGNER_INFO_it, {onLeave: function (args) {send("PKCS7_SIGNER_INFO_it");}});

var PKCS7_SIGNER_INFO_new = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNER_INFO_new")
Interceptor.attach(PKCS7_SIGNER_INFO_new, {onLeave: function (args) {send("PKCS7_SIGNER_INFO_new");}});

var PKCS7_SIGNER_INFO_set = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNER_INFO_set")
Interceptor.attach(PKCS7_SIGNER_INFO_set, {onLeave: function (args) {send("PKCS7_SIGNER_INFO_set");}});

var PKCS7_SIGNER_INFO_sign = Module.findExportByName("libcrypto.dll", "PKCS7_SIGNER_INFO_sign")
Interceptor.attach(PKCS7_SIGNER_INFO_sign, {onLeave: function (args) {send("PKCS7_SIGNER_INFO_sign");}});

var PKCS7_SIGN_ENVELOPE_free = Module.findExportByName("libcrypto.dll", "PKCS7_SIGN_ENVELOPE_free")
Interceptor.attach(PKCS7_SIGN_ENVELOPE_free, {onLeave: function (args) {send("PKCS7_SIGN_ENVELOPE_free");}});

var PKCS7_SIGN_ENVELOPE_it = Module.findExportByName("libcrypto.dll", "PKCS7_SIGN_ENVELOPE_it")
Interceptor.attach(PKCS7_SIGN_ENVELOPE_it, {onLeave: function (args) {send("PKCS7_SIGN_ENVELOPE_it");}});

var PKCS7_SIGN_ENVELOPE_new = Module.findExportByName("libcrypto.dll", "PKCS7_SIGN_ENVELOPE_new")
Interceptor.attach(PKCS7_SIGN_ENVELOPE_new, {onLeave: function (args) {send("PKCS7_SIGN_ENVELOPE_new");}});

var PKCS7_add0_attrib_signing_time = Module.findExportByName("libcrypto.dll", "PKCS7_add0_attrib_signing_time")
Interceptor.attach(PKCS7_add0_attrib_signing_time, {onLeave: function (args) {send("PKCS7_add0_attrib_signing_time");}});

var PKCS7_add1_attrib_digest = Module.findExportByName("libcrypto.dll", "PKCS7_add1_attrib_digest")
Interceptor.attach(PKCS7_add1_attrib_digest, {onLeave: function (args) {send("PKCS7_add1_attrib_digest");}});

var PKCS7_add_attrib_content_type = Module.findExportByName("libcrypto.dll", "PKCS7_add_attrib_content_type")
Interceptor.attach(PKCS7_add_attrib_content_type, {onLeave: function (args) {send("PKCS7_add_attrib_content_type");}});

var PKCS7_add_attrib_smimecap = Module.findExportByName("libcrypto.dll", "PKCS7_add_attrib_smimecap")
Interceptor.attach(PKCS7_add_attrib_smimecap, {onLeave: function (args) {send("PKCS7_add_attrib_smimecap");}});

var PKCS7_add_attribute = Module.findExportByName("libcrypto.dll", "PKCS7_add_attribute")
Interceptor.attach(PKCS7_add_attribute, {onLeave: function (args) {send("PKCS7_add_attribute");}});

var PKCS7_add_certificate = Module.findExportByName("libcrypto.dll", "PKCS7_add_certificate")
Interceptor.attach(PKCS7_add_certificate, {onLeave: function (args) {send("PKCS7_add_certificate");}});

var PKCS7_add_crl = Module.findExportByName("libcrypto.dll", "PKCS7_add_crl")
Interceptor.attach(PKCS7_add_crl, {onLeave: function (args) {send("PKCS7_add_crl");}});

var PKCS7_add_recipient = Module.findExportByName("libcrypto.dll", "PKCS7_add_recipient")
Interceptor.attach(PKCS7_add_recipient, {onLeave: function (args) {send("PKCS7_add_recipient");}});

var PKCS7_add_recipient_info = Module.findExportByName("libcrypto.dll", "PKCS7_add_recipient_info")
Interceptor.attach(PKCS7_add_recipient_info, {onLeave: function (args) {send("PKCS7_add_recipient_info");}});

var PKCS7_add_signature = Module.findExportByName("libcrypto.dll", "PKCS7_add_signature")
Interceptor.attach(PKCS7_add_signature, {onLeave: function (args) {send("PKCS7_add_signature");}});

var PKCS7_add_signed_attribute = Module.findExportByName("libcrypto.dll", "PKCS7_add_signed_attribute")
Interceptor.attach(PKCS7_add_signed_attribute, {onLeave: function (args) {send("PKCS7_add_signed_attribute");}});

var PKCS7_add_signer = Module.findExportByName("libcrypto.dll", "PKCS7_add_signer")
Interceptor.attach(PKCS7_add_signer, {onLeave: function (args) {send("PKCS7_add_signer");}});

var PKCS7_cert_from_signer_info = Module.findExportByName("libcrypto.dll", "PKCS7_cert_from_signer_info")
Interceptor.attach(PKCS7_cert_from_signer_info, {onLeave: function (args) {send("PKCS7_cert_from_signer_info");}});

var PKCS7_content_new = Module.findExportByName("libcrypto.dll", "PKCS7_content_new")
Interceptor.attach(PKCS7_content_new, {onLeave: function (args) {send("PKCS7_content_new");}});

var PKCS7_ctrl = Module.findExportByName("libcrypto.dll", "PKCS7_ctrl")
Interceptor.attach(PKCS7_ctrl, {onLeave: function (args) {send("PKCS7_ctrl");}});

var PKCS7_dataDecode = Module.findExportByName("libcrypto.dll", "PKCS7_dataDecode")
Interceptor.attach(PKCS7_dataDecode, {onLeave: function (args) {send("PKCS7_dataDecode");}});

var PKCS7_dataFinal = Module.findExportByName("libcrypto.dll", "PKCS7_dataFinal")
Interceptor.attach(PKCS7_dataFinal, {onLeave: function (args) {send("PKCS7_dataFinal");}});

var PKCS7_dataInit = Module.findExportByName("libcrypto.dll", "PKCS7_dataInit")
Interceptor.attach(PKCS7_dataInit, {onLeave: function (args) {send("PKCS7_dataInit");}});

var PKCS7_dataVerify = Module.findExportByName("libcrypto.dll", "PKCS7_dataVerify")
Interceptor.attach(PKCS7_dataVerify, {onLeave: function (args) {send("PKCS7_dataVerify");}});

var PKCS7_decrypt = Module.findExportByName("libcrypto.dll", "PKCS7_decrypt")
Interceptor.attach(PKCS7_decrypt, {onLeave: function (args) {send("PKCS7_decrypt");}});

var PKCS7_digest_from_attributes = Module.findExportByName("libcrypto.dll", "PKCS7_digest_from_attributes")
Interceptor.attach(PKCS7_digest_from_attributes, {onLeave: function (args) {send("PKCS7_digest_from_attributes");}});

var PKCS7_dup = Module.findExportByName("libcrypto.dll", "PKCS7_dup")
Interceptor.attach(PKCS7_dup, {onLeave: function (args) {send("PKCS7_dup");}});

var PKCS7_encrypt = Module.findExportByName("libcrypto.dll", "PKCS7_encrypt")
Interceptor.attach(PKCS7_encrypt, {onLeave: function (args) {send("PKCS7_encrypt");}});

var PKCS7_final = Module.findExportByName("libcrypto.dll", "PKCS7_final")
Interceptor.attach(PKCS7_final, {onLeave: function (args) {send("PKCS7_final");}});

var PKCS7_free = Module.findExportByName("libcrypto.dll", "PKCS7_free")
Interceptor.attach(PKCS7_free, {onLeave: function (args) {send("PKCS7_free");}});

var PKCS7_get0_signers = Module.findExportByName("libcrypto.dll", "PKCS7_get0_signers")
Interceptor.attach(PKCS7_get0_signers, {onLeave: function (args) {send("PKCS7_get0_signers");}});

var PKCS7_get_attribute = Module.findExportByName("libcrypto.dll", "PKCS7_get_attribute")
Interceptor.attach(PKCS7_get_attribute, {onLeave: function (args) {send("PKCS7_get_attribute");}});

var PKCS7_get_issuer_and_serial = Module.findExportByName("libcrypto.dll", "PKCS7_get_issuer_and_serial")
Interceptor.attach(PKCS7_get_issuer_and_serial, {onLeave: function (args) {send("PKCS7_get_issuer_and_serial");}});

var PKCS7_get_signed_attribute = Module.findExportByName("libcrypto.dll", "PKCS7_get_signed_attribute")
Interceptor.attach(PKCS7_get_signed_attribute, {onLeave: function (args) {send("PKCS7_get_signed_attribute");}});

var PKCS7_get_signer_info = Module.findExportByName("libcrypto.dll", "PKCS7_get_signer_info")
Interceptor.attach(PKCS7_get_signer_info, {onLeave: function (args) {send("PKCS7_get_signer_info");}});

var PKCS7_get_smimecap = Module.findExportByName("libcrypto.dll", "PKCS7_get_smimecap")
Interceptor.attach(PKCS7_get_smimecap, {onLeave: function (args) {send("PKCS7_get_smimecap");}});

var PKCS7_it = Module.findExportByName("libcrypto.dll", "PKCS7_it")
Interceptor.attach(PKCS7_it, {onLeave: function (args) {send("PKCS7_it");}});

var PKCS7_new = Module.findExportByName("libcrypto.dll", "PKCS7_new")
Interceptor.attach(PKCS7_new, {onLeave: function (args) {send("PKCS7_new");}});

var PKCS7_print_ctx = Module.findExportByName("libcrypto.dll", "PKCS7_print_ctx")
Interceptor.attach(PKCS7_print_ctx, {onLeave: function (args) {send("PKCS7_print_ctx");}});

var PKCS7_set0_type_other = Module.findExportByName("libcrypto.dll", "PKCS7_set0_type_other")
Interceptor.attach(PKCS7_set0_type_other, {onLeave: function (args) {send("PKCS7_set0_type_other");}});

var PKCS7_set_attributes = Module.findExportByName("libcrypto.dll", "PKCS7_set_attributes")
Interceptor.attach(PKCS7_set_attributes, {onLeave: function (args) {send("PKCS7_set_attributes");}});

var PKCS7_set_cipher = Module.findExportByName("libcrypto.dll", "PKCS7_set_cipher")
Interceptor.attach(PKCS7_set_cipher, {onLeave: function (args) {send("PKCS7_set_cipher");}});

var PKCS7_set_content = Module.findExportByName("libcrypto.dll", "PKCS7_set_content")
Interceptor.attach(PKCS7_set_content, {onLeave: function (args) {send("PKCS7_set_content");}});

var PKCS7_set_digest = Module.findExportByName("libcrypto.dll", "PKCS7_set_digest")
Interceptor.attach(PKCS7_set_digest, {onLeave: function (args) {send("PKCS7_set_digest");}});

var PKCS7_set_signed_attributes = Module.findExportByName("libcrypto.dll", "PKCS7_set_signed_attributes")
Interceptor.attach(PKCS7_set_signed_attributes, {onLeave: function (args) {send("PKCS7_set_signed_attributes");}});

var PKCS7_set_type = Module.findExportByName("libcrypto.dll", "PKCS7_set_type")
Interceptor.attach(PKCS7_set_type, {onLeave: function (args) {send("PKCS7_set_type");}});

var PKCS7_sign = Module.findExportByName("libcrypto.dll", "PKCS7_sign")
Interceptor.attach(PKCS7_sign, {onLeave: function (args) {send("PKCS7_sign");}});

var PKCS7_sign_add_signer = Module.findExportByName("libcrypto.dll", "PKCS7_sign_add_signer")
Interceptor.attach(PKCS7_sign_add_signer, {onLeave: function (args) {send("PKCS7_sign_add_signer");}});

var PKCS7_signatureVerify = Module.findExportByName("libcrypto.dll", "PKCS7_signatureVerify")
Interceptor.attach(PKCS7_signatureVerify, {onLeave: function (args) {send("PKCS7_signatureVerify");}});

var PKCS7_simple_smimecap = Module.findExportByName("libcrypto.dll", "PKCS7_simple_smimecap")
Interceptor.attach(PKCS7_simple_smimecap, {onLeave: function (args) {send("PKCS7_simple_smimecap");}});

var PKCS7_stream = Module.findExportByName("libcrypto.dll", "PKCS7_stream")
Interceptor.attach(PKCS7_stream, {onLeave: function (args) {send("PKCS7_stream");}});

var PKCS7_to_TS_TST_INFO = Module.findExportByName("libcrypto.dll", "PKCS7_to_TS_TST_INFO")
Interceptor.attach(PKCS7_to_TS_TST_INFO, {onLeave: function (args) {send("PKCS7_to_TS_TST_INFO");}});

var PKCS7_verify = Module.findExportByName("libcrypto.dll", "PKCS7_verify")
Interceptor.attach(PKCS7_verify, {onLeave: function (args) {send("PKCS7_verify");}});

var PKCS8_PRIV_KEY_INFO_free = Module.findExportByName("libcrypto.dll", "PKCS8_PRIV_KEY_INFO_free")
Interceptor.attach(PKCS8_PRIV_KEY_INFO_free, {onLeave: function (args) {send("PKCS8_PRIV_KEY_INFO_free");}});

var PKCS8_PRIV_KEY_INFO_it = Module.findExportByName("libcrypto.dll", "PKCS8_PRIV_KEY_INFO_it")
Interceptor.attach(PKCS8_PRIV_KEY_INFO_it, {onLeave: function (args) {send("PKCS8_PRIV_KEY_INFO_it");}});

var PKCS8_PRIV_KEY_INFO_new = Module.findExportByName("libcrypto.dll", "PKCS8_PRIV_KEY_INFO_new")
Interceptor.attach(PKCS8_PRIV_KEY_INFO_new, {onLeave: function (args) {send("PKCS8_PRIV_KEY_INFO_new");}});

var PKCS8_add_keyusage = Module.findExportByName("libcrypto.dll", "PKCS8_add_keyusage")
Interceptor.attach(PKCS8_add_keyusage, {onLeave: function (args) {send("PKCS8_add_keyusage");}});

var PKCS8_decrypt = Module.findExportByName("libcrypto.dll", "PKCS8_decrypt")
Interceptor.attach(PKCS8_decrypt, {onLeave: function (args) {send("PKCS8_decrypt");}});

var PKCS8_encrypt = Module.findExportByName("libcrypto.dll", "PKCS8_encrypt")
Interceptor.attach(PKCS8_encrypt, {onLeave: function (args) {send("PKCS8_encrypt");}});

var PKCS8_pkey_add1_attr_by_NID = Module.findExportByName("libcrypto.dll", "PKCS8_pkey_add1_attr_by_NID")
Interceptor.attach(PKCS8_pkey_add1_attr_by_NID, {onLeave: function (args) {send("PKCS8_pkey_add1_attr_by_NID");}});

var PKCS8_pkey_get0 = Module.findExportByName("libcrypto.dll", "PKCS8_pkey_get0")
Interceptor.attach(PKCS8_pkey_get0, {onLeave: function (args) {send("PKCS8_pkey_get0");}});

var PKCS8_pkey_get0_attrs = Module.findExportByName("libcrypto.dll", "PKCS8_pkey_get0_attrs")
Interceptor.attach(PKCS8_pkey_get0_attrs, {onLeave: function (args) {send("PKCS8_pkey_get0_attrs");}});

var PKCS8_pkey_set0 = Module.findExportByName("libcrypto.dll", "PKCS8_pkey_set0")
Interceptor.attach(PKCS8_pkey_set0, {onLeave: function (args) {send("PKCS8_pkey_set0");}});

var PKEY_USAGE_PERIOD_free = Module.findExportByName("libcrypto.dll", "PKEY_USAGE_PERIOD_free")
Interceptor.attach(PKEY_USAGE_PERIOD_free, {onLeave: function (args) {send("PKEY_USAGE_PERIOD_free");}});

var PKEY_USAGE_PERIOD_it = Module.findExportByName("libcrypto.dll", "PKEY_USAGE_PERIOD_it")
Interceptor.attach(PKEY_USAGE_PERIOD_it, {onLeave: function (args) {send("PKEY_USAGE_PERIOD_it");}});

var PKEY_USAGE_PERIOD_new = Module.findExportByName("libcrypto.dll", "PKEY_USAGE_PERIOD_new")
Interceptor.attach(PKEY_USAGE_PERIOD_new, {onLeave: function (args) {send("PKEY_USAGE_PERIOD_new");}});

var POLICYINFO_free = Module.findExportByName("libcrypto.dll", "POLICYINFO_free")
Interceptor.attach(POLICYINFO_free, {onLeave: function (args) {send("POLICYINFO_free");}});

var POLICYINFO_it = Module.findExportByName("libcrypto.dll", "POLICYINFO_it")
Interceptor.attach(POLICYINFO_it, {onLeave: function (args) {send("POLICYINFO_it");}});

var POLICYINFO_new = Module.findExportByName("libcrypto.dll", "POLICYINFO_new")
Interceptor.attach(POLICYINFO_new, {onLeave: function (args) {send("POLICYINFO_new");}});

var POLICYQUALINFO_free = Module.findExportByName("libcrypto.dll", "POLICYQUALINFO_free")
Interceptor.attach(POLICYQUALINFO_free, {onLeave: function (args) {send("POLICYQUALINFO_free");}});

var POLICYQUALINFO_it = Module.findExportByName("libcrypto.dll", "POLICYQUALINFO_it")
Interceptor.attach(POLICYQUALINFO_it, {onLeave: function (args) {send("POLICYQUALINFO_it");}});

var POLICYQUALINFO_new = Module.findExportByName("libcrypto.dll", "POLICYQUALINFO_new")
Interceptor.attach(POLICYQUALINFO_new, {onLeave: function (args) {send("POLICYQUALINFO_new");}});

var POLICY_CONSTRAINTS_free = Module.findExportByName("libcrypto.dll", "POLICY_CONSTRAINTS_free")
Interceptor.attach(POLICY_CONSTRAINTS_free, {onLeave: function (args) {send("POLICY_CONSTRAINTS_free");}});

var POLICY_CONSTRAINTS_it = Module.findExportByName("libcrypto.dll", "POLICY_CONSTRAINTS_it")
Interceptor.attach(POLICY_CONSTRAINTS_it, {onLeave: function (args) {send("POLICY_CONSTRAINTS_it");}});

var POLICY_CONSTRAINTS_new = Module.findExportByName("libcrypto.dll", "POLICY_CONSTRAINTS_new")
Interceptor.attach(POLICY_CONSTRAINTS_new, {onLeave: function (args) {send("POLICY_CONSTRAINTS_new");}});

var POLICY_MAPPINGS_it = Module.findExportByName("libcrypto.dll", "POLICY_MAPPINGS_it")
Interceptor.attach(POLICY_MAPPINGS_it, {onLeave: function (args) {send("POLICY_MAPPINGS_it");}});

var POLICY_MAPPING_free = Module.findExportByName("libcrypto.dll", "POLICY_MAPPING_free")
Interceptor.attach(POLICY_MAPPING_free, {onLeave: function (args) {send("POLICY_MAPPING_free");}});

var POLICY_MAPPING_it = Module.findExportByName("libcrypto.dll", "POLICY_MAPPING_it")
Interceptor.attach(POLICY_MAPPING_it, {onLeave: function (args) {send("POLICY_MAPPING_it");}});

var POLICY_MAPPING_new = Module.findExportByName("libcrypto.dll", "POLICY_MAPPING_new")
Interceptor.attach(POLICY_MAPPING_new, {onLeave: function (args) {send("POLICY_MAPPING_new");}});

var PROXY_CERT_INFO_EXTENSION_free = Module.findExportByName("libcrypto.dll", "PROXY_CERT_INFO_EXTENSION_free")
Interceptor.attach(PROXY_CERT_INFO_EXTENSION_free, {onLeave: function (args) {send("PROXY_CERT_INFO_EXTENSION_free");}});

var PROXY_CERT_INFO_EXTENSION_it = Module.findExportByName("libcrypto.dll", "PROXY_CERT_INFO_EXTENSION_it")
Interceptor.attach(PROXY_CERT_INFO_EXTENSION_it, {onLeave: function (args) {send("PROXY_CERT_INFO_EXTENSION_it");}});

var PROXY_CERT_INFO_EXTENSION_new = Module.findExportByName("libcrypto.dll", "PROXY_CERT_INFO_EXTENSION_new")
Interceptor.attach(PROXY_CERT_INFO_EXTENSION_new, {onLeave: function (args) {send("PROXY_CERT_INFO_EXTENSION_new");}});

var PROXY_POLICY_free = Module.findExportByName("libcrypto.dll", "PROXY_POLICY_free")
Interceptor.attach(PROXY_POLICY_free, {onLeave: function (args) {send("PROXY_POLICY_free");}});

var PROXY_POLICY_it = Module.findExportByName("libcrypto.dll", "PROXY_POLICY_it")
Interceptor.attach(PROXY_POLICY_it, {onLeave: function (args) {send("PROXY_POLICY_it");}});

var PROXY_POLICY_new = Module.findExportByName("libcrypto.dll", "PROXY_POLICY_new")
Interceptor.attach(PROXY_POLICY_new, {onLeave: function (args) {send("PROXY_POLICY_new");}});

var RAND_SSLeay = Module.findExportByName("libcrypto.dll", "RAND_SSLeay")
Interceptor.attach(RAND_SSLeay, {onLeave: function (args) {send("RAND_SSLeay");}});

var RAND_add = Module.findExportByName("libcrypto.dll", "RAND_add")
Interceptor.attach(RAND_add, {onLeave: function (args) {send("RAND_add");}});

var RAND_bytes = Module.findExportByName("libcrypto.dll", "RAND_bytes")
Interceptor.attach(RAND_bytes, {onLeave: function (args) {send("RAND_bytes");}});

var RAND_cleanup = Module.findExportByName("libcrypto.dll", "RAND_cleanup")
Interceptor.attach(RAND_cleanup, {onLeave: function (args) {send("RAND_cleanup");}});

var RAND_file_name = Module.findExportByName("libcrypto.dll", "RAND_file_name")
Interceptor.attach(RAND_file_name, {onLeave: function (args) {send("RAND_file_name");}});

var RAND_get_rand_method = Module.findExportByName("libcrypto.dll", "RAND_get_rand_method")
Interceptor.attach(RAND_get_rand_method, {onLeave: function (args) {send("RAND_get_rand_method");}});

var RAND_load_file = Module.findExportByName("libcrypto.dll", "RAND_load_file")
Interceptor.attach(RAND_load_file, {onLeave: function (args) {send("RAND_load_file");}});

var RAND_poll = Module.findExportByName("libcrypto.dll", "RAND_poll")
Interceptor.attach(RAND_poll, {onLeave: function (args) {send("RAND_poll");}});

var RAND_pseudo_bytes = Module.findExportByName("libcrypto.dll", "RAND_pseudo_bytes")
Interceptor.attach(RAND_pseudo_bytes, {onLeave: function (args) {send("RAND_pseudo_bytes");}});

var RAND_seed = Module.findExportByName("libcrypto.dll", "RAND_seed")
Interceptor.attach(RAND_seed, {onLeave: function (args) {send("RAND_seed");}});

var RAND_set_rand_engine = Module.findExportByName("libcrypto.dll", "RAND_set_rand_engine")
Interceptor.attach(RAND_set_rand_engine, {onLeave: function (args) {send("RAND_set_rand_engine");}});

var RAND_set_rand_method = Module.findExportByName("libcrypto.dll", "RAND_set_rand_method")
Interceptor.attach(RAND_set_rand_method, {onLeave: function (args) {send("RAND_set_rand_method");}});

var RAND_status = Module.findExportByName("libcrypto.dll", "RAND_status")
Interceptor.attach(RAND_status, {onLeave: function (args) {send("RAND_status");}});

var RAND_write_file = Module.findExportByName("libcrypto.dll", "RAND_write_file")
Interceptor.attach(RAND_write_file, {onLeave: function (args) {send("RAND_write_file");}});

var RC2_cbc_encrypt = Module.findExportByName("libcrypto.dll", "RC2_cbc_encrypt")
Interceptor.attach(RC2_cbc_encrypt, {onLeave: function (args) {send("RC2_cbc_encrypt");}});

var RC2_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "RC2_cfb64_encrypt")
Interceptor.attach(RC2_cfb64_encrypt, {onLeave: function (args) {send("RC2_cfb64_encrypt");}});

var RC2_decrypt = Module.findExportByName("libcrypto.dll", "RC2_decrypt")
Interceptor.attach(RC2_decrypt, {onLeave: function (args) {send("RC2_decrypt");}});

var RC2_ecb_encrypt = Module.findExportByName("libcrypto.dll", "RC2_ecb_encrypt")
Interceptor.attach(RC2_ecb_encrypt, {onLeave: function (args) {send("RC2_ecb_encrypt");}});

var RC2_encrypt = Module.findExportByName("libcrypto.dll", "RC2_encrypt")
Interceptor.attach(RC2_encrypt, {onLeave: function (args) {send("RC2_encrypt");}});

var RC2_ofb64_encrypt = Module.findExportByName("libcrypto.dll", "RC2_ofb64_encrypt")
Interceptor.attach(RC2_ofb64_encrypt, {onLeave: function (args) {send("RC2_ofb64_encrypt");}});

var RC2_set_key = Module.findExportByName("libcrypto.dll", "RC2_set_key")
Interceptor.attach(RC2_set_key, {onLeave: function (args) {send("RC2_set_key");}});

var RC4 = Module.findExportByName("libcrypto.dll", "RC4")
Interceptor.attach(RC4, {onLeave: function (args) {send("RC4");}});

var RC4_options = Module.findExportByName("libcrypto.dll", "RC4_options")
Interceptor.attach(RC4_options, {onLeave: function (args) {send("RC4_options");}});

var RC4_set_key = Module.findExportByName("libcrypto.dll", "RC4_set_key")
Interceptor.attach(RC4_set_key, {onLeave: function (args) {send("RC4_set_key");}});

var RIPEMD160 = Module.findExportByName("libcrypto.dll", "RIPEMD160")
Interceptor.attach(RIPEMD160, {onLeave: function (args) {send("RIPEMD160");}});

var RIPEMD160_Final = Module.findExportByName("libcrypto.dll", "RIPEMD160_Final")
Interceptor.attach(RIPEMD160_Final, {onLeave: function (args) {send("RIPEMD160_Final");}});

var RIPEMD160_Init = Module.findExportByName("libcrypto.dll", "RIPEMD160_Init")
Interceptor.attach(RIPEMD160_Init, {onLeave: function (args) {send("RIPEMD160_Init");}});

var RIPEMD160_Transform = Module.findExportByName("libcrypto.dll", "RIPEMD160_Transform")
Interceptor.attach(RIPEMD160_Transform, {onLeave: function (args) {send("RIPEMD160_Transform");}});

var RIPEMD160_Update = Module.findExportByName("libcrypto.dll", "RIPEMD160_Update")
Interceptor.attach(RIPEMD160_Update, {onLeave: function (args) {send("RIPEMD160_Update");}});

var RSAPrivateKey_dup = Module.findExportByName("libcrypto.dll", "RSAPrivateKey_dup")
Interceptor.attach(RSAPrivateKey_dup, {onLeave: function (args) {send("RSAPrivateKey_dup");}});

var RSAPrivateKey_it = Module.findExportByName("libcrypto.dll", "RSAPrivateKey_it")
Interceptor.attach(RSAPrivateKey_it, {onLeave: function (args) {send("RSAPrivateKey_it");}});

var RSAPublicKey_dup = Module.findExportByName("libcrypto.dll", "RSAPublicKey_dup")
Interceptor.attach(RSAPublicKey_dup, {onLeave: function (args) {send("RSAPublicKey_dup");}});

var RSAPublicKey_it = Module.findExportByName("libcrypto.dll", "RSAPublicKey_it")
Interceptor.attach(RSAPublicKey_it, {onLeave: function (args) {send("RSAPublicKey_it");}});

var RSA_OAEP_PARAMS_free = Module.findExportByName("libcrypto.dll", "RSA_OAEP_PARAMS_free")
Interceptor.attach(RSA_OAEP_PARAMS_free, {onLeave: function (args) {send("RSA_OAEP_PARAMS_free");}});

var RSA_OAEP_PARAMS_it = Module.findExportByName("libcrypto.dll", "RSA_OAEP_PARAMS_it")
Interceptor.attach(RSA_OAEP_PARAMS_it, {onLeave: function (args) {send("RSA_OAEP_PARAMS_it");}});

var RSA_OAEP_PARAMS_new = Module.findExportByName("libcrypto.dll", "RSA_OAEP_PARAMS_new")
Interceptor.attach(RSA_OAEP_PARAMS_new, {onLeave: function (args) {send("RSA_OAEP_PARAMS_new");}});

var RSA_PKCS1_OpenSSL = Module.findExportByName("libcrypto.dll", "RSA_PKCS1_OpenSSL")
Interceptor.attach(RSA_PKCS1_OpenSSL, {onLeave: function (args) {send("RSA_PKCS1_OpenSSL");}});

var RSA_PKCS1_SSLeay = Module.findExportByName("libcrypto.dll", "RSA_PKCS1_SSLeay")
Interceptor.attach(RSA_PKCS1_SSLeay, {onLeave: function (args) {send("RSA_PKCS1_SSLeay");}});

var RSA_PSS_PARAMS_free = Module.findExportByName("libcrypto.dll", "RSA_PSS_PARAMS_free")
Interceptor.attach(RSA_PSS_PARAMS_free, {onLeave: function (args) {send("RSA_PSS_PARAMS_free");}});

var RSA_PSS_PARAMS_it = Module.findExportByName("libcrypto.dll", "RSA_PSS_PARAMS_it")
Interceptor.attach(RSA_PSS_PARAMS_it, {onLeave: function (args) {send("RSA_PSS_PARAMS_it");}});

var RSA_PSS_PARAMS_new = Module.findExportByName("libcrypto.dll", "RSA_PSS_PARAMS_new")
Interceptor.attach(RSA_PSS_PARAMS_new, {onLeave: function (args) {send("RSA_PSS_PARAMS_new");}});

var RSA_X931_hash_id = Module.findExportByName("libcrypto.dll", "RSA_X931_hash_id")
Interceptor.attach(RSA_X931_hash_id, {onLeave: function (args) {send("RSA_X931_hash_id");}});

var RSA_bits = Module.findExportByName("libcrypto.dll", "RSA_bits")
Interceptor.attach(RSA_bits, {onLeave: function (args) {send("RSA_bits");}});

var RSA_blinding_off = Module.findExportByName("libcrypto.dll", "RSA_blinding_off")
Interceptor.attach(RSA_blinding_off, {onLeave: function (args) {send("RSA_blinding_off");}});

var RSA_blinding_on = Module.findExportByName("libcrypto.dll", "RSA_blinding_on")
Interceptor.attach(RSA_blinding_on, {onLeave: function (args) {send("RSA_blinding_on");}});

var RSA_check_key = Module.findExportByName("libcrypto.dll", "RSA_check_key")
Interceptor.attach(RSA_check_key, {onLeave: function (args) {send("RSA_check_key");}});

var RSA_clear_flags = Module.findExportByName("libcrypto.dll", "RSA_clear_flags")
Interceptor.attach(RSA_clear_flags, {onLeave: function (args) {send("RSA_clear_flags");}});

var RSA_flags = Module.findExportByName("libcrypto.dll", "RSA_flags")
Interceptor.attach(RSA_flags, {onLeave: function (args) {send("RSA_flags");}});

var RSA_free = Module.findExportByName("libcrypto.dll", "RSA_free")
Interceptor.attach(RSA_free, {onLeave: function (args) {send("RSA_free");}});

var RSA_generate_key = Module.findExportByName("libcrypto.dll", "RSA_generate_key")
Interceptor.attach(RSA_generate_key, {onLeave: function (args) {send("RSA_generate_key");}});

var RSA_generate_key_ex = Module.findExportByName("libcrypto.dll", "RSA_generate_key_ex")
Interceptor.attach(RSA_generate_key_ex, {onLeave: function (args) {send("RSA_generate_key_ex");}});

var RSA_get0_crt_params = Module.findExportByName("libcrypto.dll", "RSA_get0_crt_params")
Interceptor.attach(RSA_get0_crt_params, {onLeave: function (args) {send("RSA_get0_crt_params");}});

var RSA_get0_factors = Module.findExportByName("libcrypto.dll", "RSA_get0_factors")
Interceptor.attach(RSA_get0_factors, {onLeave: function (args) {send("RSA_get0_factors");}});

var RSA_get0_key = Module.findExportByName("libcrypto.dll", "RSA_get0_key")
Interceptor.attach(RSA_get0_key, {onLeave: function (args) {send("RSA_get0_key");}});

var RSA_get_default_method = Module.findExportByName("libcrypto.dll", "RSA_get_default_method")
Interceptor.attach(RSA_get_default_method, {onLeave: function (args) {send("RSA_get_default_method");}});

var RSA_get_ex_data = Module.findExportByName("libcrypto.dll", "RSA_get_ex_data")
Interceptor.attach(RSA_get_ex_data, {onLeave: function (args) {send("RSA_get_ex_data");}});

var RSA_get_ex_new_index = Module.findExportByName("libcrypto.dll", "RSA_get_ex_new_index")
Interceptor.attach(RSA_get_ex_new_index, {onLeave: function (args) {send("RSA_get_ex_new_index");}});

var RSA_get_method = Module.findExportByName("libcrypto.dll", "RSA_get_method")
Interceptor.attach(RSA_get_method, {onLeave: function (args) {send("RSA_get_method");}});

var RSA_meth_dup = Module.findExportByName("libcrypto.dll", "RSA_meth_dup")
Interceptor.attach(RSA_meth_dup, {onLeave: function (args) {send("RSA_meth_dup");}});

var RSA_meth_free = Module.findExportByName("libcrypto.dll", "RSA_meth_free")
Interceptor.attach(RSA_meth_free, {onLeave: function (args) {send("RSA_meth_free");}});

var RSA_meth_get0_app_data = Module.findExportByName("libcrypto.dll", "RSA_meth_get0_app_data")
Interceptor.attach(RSA_meth_get0_app_data, {onLeave: function (args) {send("RSA_meth_get0_app_data");}});

var RSA_meth_get0_name = Module.findExportByName("libcrypto.dll", "RSA_meth_get0_name")
Interceptor.attach(RSA_meth_get0_name, {onLeave: function (args) {send("RSA_meth_get0_name");}});

var RSA_meth_get_bn_mod_exp = Module.findExportByName("libcrypto.dll", "RSA_meth_get_bn_mod_exp")
Interceptor.attach(RSA_meth_get_bn_mod_exp, {onLeave: function (args) {send("RSA_meth_get_bn_mod_exp");}});

var RSA_meth_get_finish = Module.findExportByName("libcrypto.dll", "RSA_meth_get_finish")
Interceptor.attach(RSA_meth_get_finish, {onLeave: function (args) {send("RSA_meth_get_finish");}});

var RSA_meth_get_flags = Module.findExportByName("libcrypto.dll", "RSA_meth_get_flags")
Interceptor.attach(RSA_meth_get_flags, {onLeave: function (args) {send("RSA_meth_get_flags");}});

var RSA_meth_get_init = Module.findExportByName("libcrypto.dll", "RSA_meth_get_init")
Interceptor.attach(RSA_meth_get_init, {onLeave: function (args) {send("RSA_meth_get_init");}});

var RSA_meth_get_keygen = Module.findExportByName("libcrypto.dll", "RSA_meth_get_keygen")
Interceptor.attach(RSA_meth_get_keygen, {onLeave: function (args) {send("RSA_meth_get_keygen");}});

var RSA_meth_get_mod_exp = Module.findExportByName("libcrypto.dll", "RSA_meth_get_mod_exp")
Interceptor.attach(RSA_meth_get_mod_exp, {onLeave: function (args) {send("RSA_meth_get_mod_exp");}});

var RSA_meth_get_priv_dec = Module.findExportByName("libcrypto.dll", "RSA_meth_get_priv_dec")
Interceptor.attach(RSA_meth_get_priv_dec, {onLeave: function (args) {send("RSA_meth_get_priv_dec");}});

var RSA_meth_get_priv_enc = Module.findExportByName("libcrypto.dll", "RSA_meth_get_priv_enc")
Interceptor.attach(RSA_meth_get_priv_enc, {onLeave: function (args) {send("RSA_meth_get_priv_enc");}});

var RSA_meth_get_pub_dec = Module.findExportByName("libcrypto.dll", "RSA_meth_get_pub_dec")
Interceptor.attach(RSA_meth_get_pub_dec, {onLeave: function (args) {send("RSA_meth_get_pub_dec");}});

var RSA_meth_get_pub_enc = Module.findExportByName("libcrypto.dll", "RSA_meth_get_pub_enc")
Interceptor.attach(RSA_meth_get_pub_enc, {onLeave: function (args) {send("RSA_meth_get_pub_enc");}});

var RSA_meth_get_sign = Module.findExportByName("libcrypto.dll", "RSA_meth_get_sign")
Interceptor.attach(RSA_meth_get_sign, {onLeave: function (args) {send("RSA_meth_get_sign");}});

var RSA_meth_get_verify = Module.findExportByName("libcrypto.dll", "RSA_meth_get_verify")
Interceptor.attach(RSA_meth_get_verify, {onLeave: function (args) {send("RSA_meth_get_verify");}});

var RSA_meth_new = Module.findExportByName("libcrypto.dll", "RSA_meth_new")
Interceptor.attach(RSA_meth_new, {onLeave: function (args) {send("RSA_meth_new");}});

var RSA_meth_set0_app_data = Module.findExportByName("libcrypto.dll", "RSA_meth_set0_app_data")
Interceptor.attach(RSA_meth_set0_app_data, {onLeave: function (args) {send("RSA_meth_set0_app_data");}});

var RSA_meth_set1_name = Module.findExportByName("libcrypto.dll", "RSA_meth_set1_name")
Interceptor.attach(RSA_meth_set1_name, {onLeave: function (args) {send("RSA_meth_set1_name");}});

var RSA_meth_set_bn_mod_exp = Module.findExportByName("libcrypto.dll", "RSA_meth_set_bn_mod_exp")
Interceptor.attach(RSA_meth_set_bn_mod_exp, {onLeave: function (args) {send("RSA_meth_set_bn_mod_exp");}});

var RSA_meth_set_finish = Module.findExportByName("libcrypto.dll", "RSA_meth_set_finish")
Interceptor.attach(RSA_meth_set_finish, {onLeave: function (args) {send("RSA_meth_set_finish");}});

var RSA_meth_set_flags = Module.findExportByName("libcrypto.dll", "RSA_meth_set_flags")
Interceptor.attach(RSA_meth_set_flags, {onLeave: function (args) {send("RSA_meth_set_flags");}});

var RSA_meth_set_init = Module.findExportByName("libcrypto.dll", "RSA_meth_set_init")
Interceptor.attach(RSA_meth_set_init, {onLeave: function (args) {send("RSA_meth_set_init");}});

var RSA_meth_set_keygen = Module.findExportByName("libcrypto.dll", "RSA_meth_set_keygen")
Interceptor.attach(RSA_meth_set_keygen, {onLeave: function (args) {send("RSA_meth_set_keygen");}});

var RSA_meth_set_mod_exp = Module.findExportByName("libcrypto.dll", "RSA_meth_set_mod_exp")
Interceptor.attach(RSA_meth_set_mod_exp, {onLeave: function (args) {send("RSA_meth_set_mod_exp");}});

var RSA_meth_set_priv_dec = Module.findExportByName("libcrypto.dll", "RSA_meth_set_priv_dec")
Interceptor.attach(RSA_meth_set_priv_dec, {onLeave: function (args) {send("RSA_meth_set_priv_dec");}});

var RSA_meth_set_priv_enc = Module.findExportByName("libcrypto.dll", "RSA_meth_set_priv_enc")
Interceptor.attach(RSA_meth_set_priv_enc, {onLeave: function (args) {send("RSA_meth_set_priv_enc");}});

var RSA_meth_set_pub_dec = Module.findExportByName("libcrypto.dll", "RSA_meth_set_pub_dec")
Interceptor.attach(RSA_meth_set_pub_dec, {onLeave: function (args) {send("RSA_meth_set_pub_dec");}});

var RSA_meth_set_pub_enc = Module.findExportByName("libcrypto.dll", "RSA_meth_set_pub_enc")
Interceptor.attach(RSA_meth_set_pub_enc, {onLeave: function (args) {send("RSA_meth_set_pub_enc");}});

var RSA_meth_set_sign = Module.findExportByName("libcrypto.dll", "RSA_meth_set_sign")
Interceptor.attach(RSA_meth_set_sign, {onLeave: function (args) {send("RSA_meth_set_sign");}});

var RSA_meth_set_verify = Module.findExportByName("libcrypto.dll", "RSA_meth_set_verify")
Interceptor.attach(RSA_meth_set_verify, {onLeave: function (args) {send("RSA_meth_set_verify");}});

var RSA_new = Module.findExportByName("libcrypto.dll", "RSA_new")
Interceptor.attach(RSA_new, {onLeave: function (args) {send("RSA_new");}});

var RSA_new_method = Module.findExportByName("libcrypto.dll", "RSA_new_method")
Interceptor.attach(RSA_new_method, {onLeave: function (args) {send("RSA_new_method");}});

var RSA_padding_add_PKCS1_OAEP = Module.findExportByName("libcrypto.dll", "RSA_padding_add_PKCS1_OAEP")
Interceptor.attach(RSA_padding_add_PKCS1_OAEP, {onLeave: function (args) {send("RSA_padding_add_PKCS1_OAEP");}});

var RSA_padding_add_PKCS1_OAEP_mgf1 = Module.findExportByName("libcrypto.dll", "RSA_padding_add_PKCS1_OAEP_mgf1")
Interceptor.attach(RSA_padding_add_PKCS1_OAEP_mgf1, {onLeave: function (args) {send("RSA_padding_add_PKCS1_OAEP_mgf1");}});

var RSA_padding_add_PKCS1_PSS = Module.findExportByName("libcrypto.dll", "RSA_padding_add_PKCS1_PSS")
Interceptor.attach(RSA_padding_add_PKCS1_PSS, {onLeave: function (args) {send("RSA_padding_add_PKCS1_PSS");}});

var RSA_padding_add_PKCS1_PSS_mgf1 = Module.findExportByName("libcrypto.dll", "RSA_padding_add_PKCS1_PSS_mgf1")
Interceptor.attach(RSA_padding_add_PKCS1_PSS_mgf1, {onLeave: function (args) {send("RSA_padding_add_PKCS1_PSS_mgf1");}});

var RSA_padding_add_PKCS1_type_1 = Module.findExportByName("libcrypto.dll", "RSA_padding_add_PKCS1_type_1")
Interceptor.attach(RSA_padding_add_PKCS1_type_1, {onLeave: function (args) {send("RSA_padding_add_PKCS1_type_1");}});

var RSA_padding_add_PKCS1_type_2 = Module.findExportByName("libcrypto.dll", "RSA_padding_add_PKCS1_type_2")
Interceptor.attach(RSA_padding_add_PKCS1_type_2, {onLeave: function (args) {send("RSA_padding_add_PKCS1_type_2");}});

var RSA_padding_add_X931 = Module.findExportByName("libcrypto.dll", "RSA_padding_add_X931")
Interceptor.attach(RSA_padding_add_X931, {onLeave: function (args) {send("RSA_padding_add_X931");}});

var RSA_padding_add_none = Module.findExportByName("libcrypto.dll", "RSA_padding_add_none")
Interceptor.attach(RSA_padding_add_none, {onLeave: function (args) {send("RSA_padding_add_none");}});

var RSA_padding_check_PKCS1_OAEP = Module.findExportByName("libcrypto.dll", "RSA_padding_check_PKCS1_OAEP")
Interceptor.attach(RSA_padding_check_PKCS1_OAEP, {onLeave: function (args) {send("RSA_padding_check_PKCS1_OAEP");}});

var RSA_padding_check_PKCS1_OAEP_mgf1 = Module.findExportByName("libcrypto.dll", "RSA_padding_check_PKCS1_OAEP_mgf1")
Interceptor.attach(RSA_padding_check_PKCS1_OAEP_mgf1, {onLeave: function (args) {send("RSA_padding_check_PKCS1_OAEP_mgf1");}});

var RSA_padding_check_PKCS1_type_1 = Module.findExportByName("libcrypto.dll", "RSA_padding_check_PKCS1_type_1")
Interceptor.attach(RSA_padding_check_PKCS1_type_1, {onLeave: function (args) {send("RSA_padding_check_PKCS1_type_1");}});

var RSA_padding_check_PKCS1_type_2 = Module.findExportByName("libcrypto.dll", "RSA_padding_check_PKCS1_type_2")
Interceptor.attach(RSA_padding_check_PKCS1_type_2, {onLeave: function (args) {send("RSA_padding_check_PKCS1_type_2");}});

var RSA_padding_check_X931 = Module.findExportByName("libcrypto.dll", "RSA_padding_check_X931")
Interceptor.attach(RSA_padding_check_X931, {onLeave: function (args) {send("RSA_padding_check_X931");}});

var RSA_padding_check_none = Module.findExportByName("libcrypto.dll", "RSA_padding_check_none")
Interceptor.attach(RSA_padding_check_none, {onLeave: function (args) {send("RSA_padding_check_none");}});

var RSA_pkey_ctx_ctrl = Module.findExportByName("libcrypto.dll", "RSA_pkey_ctx_ctrl")
Interceptor.attach(RSA_pkey_ctx_ctrl, {onLeave: function (args) {send("RSA_pkey_ctx_ctrl");}});

var RSA_print = Module.findExportByName("libcrypto.dll", "RSA_print")
Interceptor.attach(RSA_print, {onLeave: function (args) {send("RSA_print");}});

var RSA_print_fp = Module.findExportByName("libcrypto.dll", "RSA_print_fp")
Interceptor.attach(RSA_print_fp, {onLeave: function (args) {send("RSA_print_fp");}});

var RSA_private_decrypt = Module.findExportByName("libcrypto.dll", "RSA_private_decrypt")
Interceptor.attach(RSA_private_decrypt, {onLeave: function (args) {send("RSA_private_decrypt");}});

var RSA_private_encrypt = Module.findExportByName("libcrypto.dll", "RSA_private_encrypt")
Interceptor.attach(RSA_private_encrypt, {onLeave: function (args) {send("RSA_private_encrypt");}});

var RSA_public_decrypt = Module.findExportByName("libcrypto.dll", "RSA_public_decrypt")
Interceptor.attach(RSA_public_decrypt, {onLeave: function (args) {send("RSA_public_decrypt");}});

var RSA_public_encrypt = Module.findExportByName("libcrypto.dll", "RSA_public_encrypt")
Interceptor.attach(RSA_public_encrypt, {onLeave: function (args) {send("RSA_public_encrypt");}});

var RSA_set0_crt_params = Module.findExportByName("libcrypto.dll", "RSA_set0_crt_params")
Interceptor.attach(RSA_set0_crt_params, {onLeave: function (args) {send("RSA_set0_crt_params");}});

var RSA_set0_factors = Module.findExportByName("libcrypto.dll", "RSA_set0_factors")
Interceptor.attach(RSA_set0_factors, {onLeave: function (args) {send("RSA_set0_factors");}});

var RSA_set0_key = Module.findExportByName("libcrypto.dll", "RSA_set0_key")
Interceptor.attach(RSA_set0_key, {onLeave: function (args) {send("RSA_set0_key");}});

var RSA_set_default_method = Module.findExportByName("libcrypto.dll", "RSA_set_default_method")
Interceptor.attach(RSA_set_default_method, {onLeave: function (args) {send("RSA_set_default_method");}});

var RSA_set_ex_data = Module.findExportByName("libcrypto.dll", "RSA_set_ex_data")
Interceptor.attach(RSA_set_ex_data, {onLeave: function (args) {send("RSA_set_ex_data");}});

var RSA_set_flags = Module.findExportByName("libcrypto.dll", "RSA_set_flags")
Interceptor.attach(RSA_set_flags, {onLeave: function (args) {send("RSA_set_flags");}});

var RSA_set_method = Module.findExportByName("libcrypto.dll", "RSA_set_method")
Interceptor.attach(RSA_set_method, {onLeave: function (args) {send("RSA_set_method");}});

var RSA_setup_blinding = Module.findExportByName("libcrypto.dll", "RSA_setup_blinding")
Interceptor.attach(RSA_setup_blinding, {onLeave: function (args) {send("RSA_setup_blinding");}});

var RSA_sign = Module.findExportByName("libcrypto.dll", "RSA_sign")
Interceptor.attach(RSA_sign, {onLeave: function (args) {send("RSA_sign");}});

var RSA_sign_ASN1_OCTET_STRING = Module.findExportByName("libcrypto.dll", "RSA_sign_ASN1_OCTET_STRING")
Interceptor.attach(RSA_sign_ASN1_OCTET_STRING, {onLeave: function (args) {send("RSA_sign_ASN1_OCTET_STRING");}});

var RSA_size = Module.findExportByName("libcrypto.dll", "RSA_size")
Interceptor.attach(RSA_size, {onLeave: function (args) {send("RSA_size");}});

var RSA_test_flags = Module.findExportByName("libcrypto.dll", "RSA_test_flags")
Interceptor.attach(RSA_test_flags, {onLeave: function (args) {send("RSA_test_flags");}});

var RSA_up_ref = Module.findExportByName("libcrypto.dll", "RSA_up_ref")
Interceptor.attach(RSA_up_ref, {onLeave: function (args) {send("RSA_up_ref");}});

var RSA_verify = Module.findExportByName("libcrypto.dll", "RSA_verify")
Interceptor.attach(RSA_verify, {onLeave: function (args) {send("RSA_verify");}});

var RSA_verify_ASN1_OCTET_STRING = Module.findExportByName("libcrypto.dll", "RSA_verify_ASN1_OCTET_STRING")
Interceptor.attach(RSA_verify_ASN1_OCTET_STRING, {onLeave: function (args) {send("RSA_verify_ASN1_OCTET_STRING");}});

var RSA_verify_PKCS1_PSS = Module.findExportByName("libcrypto.dll", "RSA_verify_PKCS1_PSS")
Interceptor.attach(RSA_verify_PKCS1_PSS, {onLeave: function (args) {send("RSA_verify_PKCS1_PSS");}});

var RSA_verify_PKCS1_PSS_mgf1 = Module.findExportByName("libcrypto.dll", "RSA_verify_PKCS1_PSS_mgf1")
Interceptor.attach(RSA_verify_PKCS1_PSS_mgf1, {onLeave: function (args) {send("RSA_verify_PKCS1_PSS_mgf1");}});

var SHA1 = Module.findExportByName("libcrypto.dll", "SHA1")
Interceptor.attach(SHA1, {onLeave: function (args) {send("SHA1");}});

var SHA1_Final = Module.findExportByName("libcrypto.dll", "SHA1_Final")
Interceptor.attach(SHA1_Final, {onLeave: function (args) {send("SHA1_Final");}});

var SHA1_Init = Module.findExportByName("libcrypto.dll", "SHA1_Init")
Interceptor.attach(SHA1_Init, {onLeave: function (args) {send("SHA1_Init");}});

var SHA1_Transform = Module.findExportByName("libcrypto.dll", "SHA1_Transform")
Interceptor.attach(SHA1_Transform, {onLeave: function (args) {send("SHA1_Transform");}});

var SHA1_Update = Module.findExportByName("libcrypto.dll", "SHA1_Update")
Interceptor.attach(SHA1_Update, {onLeave: function (args) {send("SHA1_Update");}});

var SHA224 = Module.findExportByName("libcrypto.dll", "SHA224")
Interceptor.attach(SHA224, {onLeave: function (args) {send("SHA224");}});

var SHA224_Final = Module.findExportByName("libcrypto.dll", "SHA224_Final")
Interceptor.attach(SHA224_Final, {onLeave: function (args) {send("SHA224_Final");}});

var SHA224_Init = Module.findExportByName("libcrypto.dll", "SHA224_Init")
Interceptor.attach(SHA224_Init, {onLeave: function (args) {send("SHA224_Init");}});

var SHA224_Update = Module.findExportByName("libcrypto.dll", "SHA224_Update")
Interceptor.attach(SHA224_Update, {onLeave: function (args) {send("SHA224_Update");}});

var SHA256 = Module.findExportByName("libcrypto.dll", "SHA256")
Interceptor.attach(SHA256, {onLeave: function (args) {send("SHA256");}});

var SHA256_Final = Module.findExportByName("libcrypto.dll", "SHA256_Final")
Interceptor.attach(SHA256_Final, {onLeave: function (args) {send("SHA256_Final");}});

var SHA256_Init = Module.findExportByName("libcrypto.dll", "SHA256_Init")
Interceptor.attach(SHA256_Init, {onLeave: function (args) {send("SHA256_Init");}});

var SHA256_Transform = Module.findExportByName("libcrypto.dll", "SHA256_Transform")
Interceptor.attach(SHA256_Transform, {onLeave: function (args) {send("SHA256_Transform");}});

var SHA256_Update = Module.findExportByName("libcrypto.dll", "SHA256_Update")
Interceptor.attach(SHA256_Update, {onLeave: function (args) {send("SHA256_Update");}});

var SHA384 = Module.findExportByName("libcrypto.dll", "SHA384")
Interceptor.attach(SHA384, {onLeave: function (args) {send("SHA384");}});

var SHA384_Final = Module.findExportByName("libcrypto.dll", "SHA384_Final")
Interceptor.attach(SHA384_Final, {onLeave: function (args) {send("SHA384_Final");}});

var SHA384_Init = Module.findExportByName("libcrypto.dll", "SHA384_Init")
Interceptor.attach(SHA384_Init, {onLeave: function (args) {send("SHA384_Init");}});

var SHA384_Update = Module.findExportByName("libcrypto.dll", "SHA384_Update")
Interceptor.attach(SHA384_Update, {onLeave: function (args) {send("SHA384_Update");}});

var SHA512 = Module.findExportByName("libcrypto.dll", "SHA512")
Interceptor.attach(SHA512, {onLeave: function (args) {send("SHA512");}});

var SHA512_Final = Module.findExportByName("libcrypto.dll", "SHA512_Final")
Interceptor.attach(SHA512_Final, {onLeave: function (args) {send("SHA512_Final");}});

var SHA512_Init = Module.findExportByName("libcrypto.dll", "SHA512_Init")
Interceptor.attach(SHA512_Init, {onLeave: function (args) {send("SHA512_Init");}});

var SHA512_Transform = Module.findExportByName("libcrypto.dll", "SHA512_Transform")
Interceptor.attach(SHA512_Transform, {onLeave: function (args) {send("SHA512_Transform");}});

var SHA512_Update = Module.findExportByName("libcrypto.dll", "SHA512_Update")
Interceptor.attach(SHA512_Update, {onLeave: function (args) {send("SHA512_Update");}});

var SM3_Final = Module.findExportByName("libcrypto.dll", "SM3_Final")
Interceptor.attach(SM3_Final, {onLeave: function (args) {send("SM3_Final");}});

var SM3_Init = Module.findExportByName("libcrypto.dll", "SM3_Init")
Interceptor.attach(SM3_Init, {onLeave: function (args) {send("SM3_Init");}});

var SM3_Update = Module.findExportByName("libcrypto.dll", "SM3_Update")
Interceptor.attach(SM3_Update, {onLeave: function (args) {send("SM3_Update");}});

var SM4_decrypt = Module.findExportByName("libcrypto.dll", "SM4_decrypt")
Interceptor.attach(SM4_decrypt, {onLeave: function (args) {send("SM4_decrypt");}});

var SM4_encrypt = Module.findExportByName("libcrypto.dll", "SM4_encrypt")
Interceptor.attach(SM4_encrypt, {onLeave: function (args) {send("SM4_encrypt");}});

var SM4_set_key = Module.findExportByName("libcrypto.dll", "SM4_set_key")
Interceptor.attach(SM4_set_key, {onLeave: function (args) {send("SM4_set_key");}});

var SMIME_crlf_copy = Module.findExportByName("libcrypto.dll", "SMIME_crlf_copy")
Interceptor.attach(SMIME_crlf_copy, {onLeave: function (args) {send("SMIME_crlf_copy");}});

var SMIME_read_ASN1 = Module.findExportByName("libcrypto.dll", "SMIME_read_ASN1")
Interceptor.attach(SMIME_read_ASN1, {onLeave: function (args) {send("SMIME_read_ASN1");}});

var SMIME_read_CMS = Module.findExportByName("libcrypto.dll", "SMIME_read_CMS")
Interceptor.attach(SMIME_read_CMS, {onLeave: function (args) {send("SMIME_read_CMS");}});

var SMIME_read_PKCS7 = Module.findExportByName("libcrypto.dll", "SMIME_read_PKCS7")
Interceptor.attach(SMIME_read_PKCS7, {onLeave: function (args) {send("SMIME_read_PKCS7");}});

var SMIME_text = Module.findExportByName("libcrypto.dll", "SMIME_text")
Interceptor.attach(SMIME_text, {onLeave: function (args) {send("SMIME_text");}});

var SMIME_write_ASN1 = Module.findExportByName("libcrypto.dll", "SMIME_write_ASN1")
Interceptor.attach(SMIME_write_ASN1, {onLeave: function (args) {send("SMIME_write_ASN1");}});

var SMIME_write_CMS = Module.findExportByName("libcrypto.dll", "SMIME_write_CMS")
Interceptor.attach(SMIME_write_CMS, {onLeave: function (args) {send("SMIME_write_CMS");}});

var SMIME_write_PKCS7 = Module.findExportByName("libcrypto.dll", "SMIME_write_PKCS7")
Interceptor.attach(SMIME_write_PKCS7, {onLeave: function (args) {send("SMIME_write_PKCS7");}});

var SSLeay = Module.findExportByName("libcrypto.dll", "SSLeay")
Interceptor.attach(SSLeay, {onLeave: function (args) {send("SSLeay");}});

var SSLeay_version = Module.findExportByName("libcrypto.dll", "SSLeay_version")
Interceptor.attach(SSLeay_version, {onLeave: function (args) {send("SSLeay_version");}});

var STREEBOG256 = Module.findExportByName("libcrypto.dll", "STREEBOG256")
Interceptor.attach(STREEBOG256, {onLeave: function (args) {send("STREEBOG256");}});

var STREEBOG256_Final = Module.findExportByName("libcrypto.dll", "STREEBOG256_Final")
Interceptor.attach(STREEBOG256_Final, {onLeave: function (args) {send("STREEBOG256_Final");}});

var STREEBOG256_Init = Module.findExportByName("libcrypto.dll", "STREEBOG256_Init")
Interceptor.attach(STREEBOG256_Init, {onLeave: function (args) {send("STREEBOG256_Init");}});

var STREEBOG256_Update = Module.findExportByName("libcrypto.dll", "STREEBOG256_Update")
Interceptor.attach(STREEBOG256_Update, {onLeave: function (args) {send("STREEBOG256_Update");}});

var STREEBOG512 = Module.findExportByName("libcrypto.dll", "STREEBOG512")
Interceptor.attach(STREEBOG512, {onLeave: function (args) {send("STREEBOG512");}});

var STREEBOG512_Final = Module.findExportByName("libcrypto.dll", "STREEBOG512_Final")
Interceptor.attach(STREEBOG512_Final, {onLeave: function (args) {send("STREEBOG512_Final");}});

var STREEBOG512_Init = Module.findExportByName("libcrypto.dll", "STREEBOG512_Init")
Interceptor.attach(STREEBOG512_Init, {onLeave: function (args) {send("STREEBOG512_Init");}});

var STREEBOG512_Transform = Module.findExportByName("libcrypto.dll", "STREEBOG512_Transform")
Interceptor.attach(STREEBOG512_Transform, {onLeave: function (args) {send("STREEBOG512_Transform");}});

var STREEBOG512_Update = Module.findExportByName("libcrypto.dll", "STREEBOG512_Update")
Interceptor.attach(STREEBOG512_Update, {onLeave: function (args) {send("STREEBOG512_Update");}});

var SXNETID_free = Module.findExportByName("libcrypto.dll", "SXNETID_free")
Interceptor.attach(SXNETID_free, {onLeave: function (args) {send("SXNETID_free");}});

var SXNETID_it = Module.findExportByName("libcrypto.dll", "SXNETID_it")
Interceptor.attach(SXNETID_it, {onLeave: function (args) {send("SXNETID_it");}});

var SXNETID_new = Module.findExportByName("libcrypto.dll", "SXNETID_new")
Interceptor.attach(SXNETID_new, {onLeave: function (args) {send("SXNETID_new");}});

var SXNET_add_id_INTEGER = Module.findExportByName("libcrypto.dll", "SXNET_add_id_INTEGER")
Interceptor.attach(SXNET_add_id_INTEGER, {onLeave: function (args) {send("SXNET_add_id_INTEGER");}});

var SXNET_add_id_asc = Module.findExportByName("libcrypto.dll", "SXNET_add_id_asc")
Interceptor.attach(SXNET_add_id_asc, {onLeave: function (args) {send("SXNET_add_id_asc");}});

var SXNET_add_id_ulong = Module.findExportByName("libcrypto.dll", "SXNET_add_id_ulong")
Interceptor.attach(SXNET_add_id_ulong, {onLeave: function (args) {send("SXNET_add_id_ulong");}});

var SXNET_free = Module.findExportByName("libcrypto.dll", "SXNET_free")
Interceptor.attach(SXNET_free, {onLeave: function (args) {send("SXNET_free");}});

var SXNET_get_id_INTEGER = Module.findExportByName("libcrypto.dll", "SXNET_get_id_INTEGER")
Interceptor.attach(SXNET_get_id_INTEGER, {onLeave: function (args) {send("SXNET_get_id_INTEGER");}});

var SXNET_get_id_asc = Module.findExportByName("libcrypto.dll", "SXNET_get_id_asc")
Interceptor.attach(SXNET_get_id_asc, {onLeave: function (args) {send("SXNET_get_id_asc");}});

var SXNET_get_id_ulong = Module.findExportByName("libcrypto.dll", "SXNET_get_id_ulong")
Interceptor.attach(SXNET_get_id_ulong, {onLeave: function (args) {send("SXNET_get_id_ulong");}});

var SXNET_it = Module.findExportByName("libcrypto.dll", "SXNET_it")
Interceptor.attach(SXNET_it, {onLeave: function (args) {send("SXNET_it");}});

var SXNET_new = Module.findExportByName("libcrypto.dll", "SXNET_new")
Interceptor.attach(SXNET_new, {onLeave: function (args) {send("SXNET_new");}});

var TS_ACCURACY_dup = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_dup")
Interceptor.attach(TS_ACCURACY_dup, {onLeave: function (args) {send("TS_ACCURACY_dup");}});

var TS_ACCURACY_free = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_free")
Interceptor.attach(TS_ACCURACY_free, {onLeave: function (args) {send("TS_ACCURACY_free");}});

var TS_ACCURACY_get_micros = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_get_micros")
Interceptor.attach(TS_ACCURACY_get_micros, {onLeave: function (args) {send("TS_ACCURACY_get_micros");}});

var TS_ACCURACY_get_millis = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_get_millis")
Interceptor.attach(TS_ACCURACY_get_millis, {onLeave: function (args) {send("TS_ACCURACY_get_millis");}});

var TS_ACCURACY_get_seconds = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_get_seconds")
Interceptor.attach(TS_ACCURACY_get_seconds, {onLeave: function (args) {send("TS_ACCURACY_get_seconds");}});

var TS_ACCURACY_it = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_it")
Interceptor.attach(TS_ACCURACY_it, {onLeave: function (args) {send("TS_ACCURACY_it");}});

var TS_ACCURACY_new = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_new")
Interceptor.attach(TS_ACCURACY_new, {onLeave: function (args) {send("TS_ACCURACY_new");}});

var TS_ACCURACY_set_micros = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_set_micros")
Interceptor.attach(TS_ACCURACY_set_micros, {onLeave: function (args) {send("TS_ACCURACY_set_micros");}});

var TS_ACCURACY_set_millis = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_set_millis")
Interceptor.attach(TS_ACCURACY_set_millis, {onLeave: function (args) {send("TS_ACCURACY_set_millis");}});

var TS_ACCURACY_set_seconds = Module.findExportByName("libcrypto.dll", "TS_ACCURACY_set_seconds")
Interceptor.attach(TS_ACCURACY_set_seconds, {onLeave: function (args) {send("TS_ACCURACY_set_seconds");}});

var TS_ASN1_INTEGER_print_bio = Module.findExportByName("libcrypto.dll", "TS_ASN1_INTEGER_print_bio")
Interceptor.attach(TS_ASN1_INTEGER_print_bio, {onLeave: function (args) {send("TS_ASN1_INTEGER_print_bio");}});

var TS_CONF_get_tsa_section = Module.findExportByName("libcrypto.dll", "TS_CONF_get_tsa_section")
Interceptor.attach(TS_CONF_get_tsa_section, {onLeave: function (args) {send("TS_CONF_get_tsa_section");}});

var TS_CONF_load_cert = Module.findExportByName("libcrypto.dll", "TS_CONF_load_cert")
Interceptor.attach(TS_CONF_load_cert, {onLeave: function (args) {send("TS_CONF_load_cert");}});

var TS_CONF_load_certs = Module.findExportByName("libcrypto.dll", "TS_CONF_load_certs")
Interceptor.attach(TS_CONF_load_certs, {onLeave: function (args) {send("TS_CONF_load_certs");}});

var TS_CONF_load_key = Module.findExportByName("libcrypto.dll", "TS_CONF_load_key")
Interceptor.attach(TS_CONF_load_key, {onLeave: function (args) {send("TS_CONF_load_key");}});

var TS_CONF_set_accuracy = Module.findExportByName("libcrypto.dll", "TS_CONF_set_accuracy")
Interceptor.attach(TS_CONF_set_accuracy, {onLeave: function (args) {send("TS_CONF_set_accuracy");}});

var TS_CONF_set_certs = Module.findExportByName("libcrypto.dll", "TS_CONF_set_certs")
Interceptor.attach(TS_CONF_set_certs, {onLeave: function (args) {send("TS_CONF_set_certs");}});

var TS_CONF_set_clock_precision_digits = Module.findExportByName("libcrypto.dll", "TS_CONF_set_clock_precision_digits")
Interceptor.attach(TS_CONF_set_clock_precision_digits, {onLeave: function (args) {send("TS_CONF_set_clock_precision_digits");}});

var TS_CONF_set_crypto_device = Module.findExportByName("libcrypto.dll", "TS_CONF_set_crypto_device")
Interceptor.attach(TS_CONF_set_crypto_device, {onLeave: function (args) {send("TS_CONF_set_crypto_device");}});

var TS_CONF_set_def_policy = Module.findExportByName("libcrypto.dll", "TS_CONF_set_def_policy")
Interceptor.attach(TS_CONF_set_def_policy, {onLeave: function (args) {send("TS_CONF_set_def_policy");}});

var TS_CONF_set_default_engine = Module.findExportByName("libcrypto.dll", "TS_CONF_set_default_engine")
Interceptor.attach(TS_CONF_set_default_engine, {onLeave: function (args) {send("TS_CONF_set_default_engine");}});

var TS_CONF_set_digests = Module.findExportByName("libcrypto.dll", "TS_CONF_set_digests")
Interceptor.attach(TS_CONF_set_digests, {onLeave: function (args) {send("TS_CONF_set_digests");}});

var TS_CONF_set_ess_cert_id_chain = Module.findExportByName("libcrypto.dll", "TS_CONF_set_ess_cert_id_chain")
Interceptor.attach(TS_CONF_set_ess_cert_id_chain, {onLeave: function (args) {send("TS_CONF_set_ess_cert_id_chain");}});

var TS_CONF_set_ordering = Module.findExportByName("libcrypto.dll", "TS_CONF_set_ordering")
Interceptor.attach(TS_CONF_set_ordering, {onLeave: function (args) {send("TS_CONF_set_ordering");}});

var TS_CONF_set_policies = Module.findExportByName("libcrypto.dll", "TS_CONF_set_policies")
Interceptor.attach(TS_CONF_set_policies, {onLeave: function (args) {send("TS_CONF_set_policies");}});

var TS_CONF_set_serial = Module.findExportByName("libcrypto.dll", "TS_CONF_set_serial")
Interceptor.attach(TS_CONF_set_serial, {onLeave: function (args) {send("TS_CONF_set_serial");}});

var TS_CONF_set_signer_cert = Module.findExportByName("libcrypto.dll", "TS_CONF_set_signer_cert")
Interceptor.attach(TS_CONF_set_signer_cert, {onLeave: function (args) {send("TS_CONF_set_signer_cert");}});

var TS_CONF_set_signer_key = Module.findExportByName("libcrypto.dll", "TS_CONF_set_signer_key")
Interceptor.attach(TS_CONF_set_signer_key, {onLeave: function (args) {send("TS_CONF_set_signer_key");}});

var TS_CONF_set_tsa_name = Module.findExportByName("libcrypto.dll", "TS_CONF_set_tsa_name")
Interceptor.attach(TS_CONF_set_tsa_name, {onLeave: function (args) {send("TS_CONF_set_tsa_name");}});

var TS_MSG_IMPRINT_dup = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_dup")
Interceptor.attach(TS_MSG_IMPRINT_dup, {onLeave: function (args) {send("TS_MSG_IMPRINT_dup");}});

var TS_MSG_IMPRINT_free = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_free")
Interceptor.attach(TS_MSG_IMPRINT_free, {onLeave: function (args) {send("TS_MSG_IMPRINT_free");}});

var TS_MSG_IMPRINT_get_algo = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_get_algo")
Interceptor.attach(TS_MSG_IMPRINT_get_algo, {onLeave: function (args) {send("TS_MSG_IMPRINT_get_algo");}});

var TS_MSG_IMPRINT_get_msg = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_get_msg")
Interceptor.attach(TS_MSG_IMPRINT_get_msg, {onLeave: function (args) {send("TS_MSG_IMPRINT_get_msg");}});

var TS_MSG_IMPRINT_it = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_it")
Interceptor.attach(TS_MSG_IMPRINT_it, {onLeave: function (args) {send("TS_MSG_IMPRINT_it");}});

var TS_MSG_IMPRINT_new = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_new")
Interceptor.attach(TS_MSG_IMPRINT_new, {onLeave: function (args) {send("TS_MSG_IMPRINT_new");}});

var TS_MSG_IMPRINT_print_bio = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_print_bio")
Interceptor.attach(TS_MSG_IMPRINT_print_bio, {onLeave: function (args) {send("TS_MSG_IMPRINT_print_bio");}});

var TS_MSG_IMPRINT_set_algo = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_set_algo")
Interceptor.attach(TS_MSG_IMPRINT_set_algo, {onLeave: function (args) {send("TS_MSG_IMPRINT_set_algo");}});

var TS_MSG_IMPRINT_set_msg = Module.findExportByName("libcrypto.dll", "TS_MSG_IMPRINT_set_msg")
Interceptor.attach(TS_MSG_IMPRINT_set_msg, {onLeave: function (args) {send("TS_MSG_IMPRINT_set_msg");}});

var TS_OBJ_print_bio = Module.findExportByName("libcrypto.dll", "TS_OBJ_print_bio")
Interceptor.attach(TS_OBJ_print_bio, {onLeave: function (args) {send("TS_OBJ_print_bio");}});

var TS_REQ_add_ext = Module.findExportByName("libcrypto.dll", "TS_REQ_add_ext")
Interceptor.attach(TS_REQ_add_ext, {onLeave: function (args) {send("TS_REQ_add_ext");}});

var TS_REQ_delete_ext = Module.findExportByName("libcrypto.dll", "TS_REQ_delete_ext")
Interceptor.attach(TS_REQ_delete_ext, {onLeave: function (args) {send("TS_REQ_delete_ext");}});

var TS_REQ_dup = Module.findExportByName("libcrypto.dll", "TS_REQ_dup")
Interceptor.attach(TS_REQ_dup, {onLeave: function (args) {send("TS_REQ_dup");}});

var TS_REQ_ext_free = Module.findExportByName("libcrypto.dll", "TS_REQ_ext_free")
Interceptor.attach(TS_REQ_ext_free, {onLeave: function (args) {send("TS_REQ_ext_free");}});

var TS_REQ_free = Module.findExportByName("libcrypto.dll", "TS_REQ_free")
Interceptor.attach(TS_REQ_free, {onLeave: function (args) {send("TS_REQ_free");}});

var TS_REQ_get_cert_req = Module.findExportByName("libcrypto.dll", "TS_REQ_get_cert_req")
Interceptor.attach(TS_REQ_get_cert_req, {onLeave: function (args) {send("TS_REQ_get_cert_req");}});

var TS_REQ_get_ext = Module.findExportByName("libcrypto.dll", "TS_REQ_get_ext")
Interceptor.attach(TS_REQ_get_ext, {onLeave: function (args) {send("TS_REQ_get_ext");}});

var TS_REQ_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "TS_REQ_get_ext_by_NID")
Interceptor.attach(TS_REQ_get_ext_by_NID, {onLeave: function (args) {send("TS_REQ_get_ext_by_NID");}});

var TS_REQ_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "TS_REQ_get_ext_by_OBJ")
Interceptor.attach(TS_REQ_get_ext_by_OBJ, {onLeave: function (args) {send("TS_REQ_get_ext_by_OBJ");}});

var TS_REQ_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "TS_REQ_get_ext_by_critical")
Interceptor.attach(TS_REQ_get_ext_by_critical, {onLeave: function (args) {send("TS_REQ_get_ext_by_critical");}});

var TS_REQ_get_ext_count = Module.findExportByName("libcrypto.dll", "TS_REQ_get_ext_count")
Interceptor.attach(TS_REQ_get_ext_count, {onLeave: function (args) {send("TS_REQ_get_ext_count");}});

var TS_REQ_get_ext_d2i = Module.findExportByName("libcrypto.dll", "TS_REQ_get_ext_d2i")
Interceptor.attach(TS_REQ_get_ext_d2i, {onLeave: function (args) {send("TS_REQ_get_ext_d2i");}});

var TS_REQ_get_exts = Module.findExportByName("libcrypto.dll", "TS_REQ_get_exts")
Interceptor.attach(TS_REQ_get_exts, {onLeave: function (args) {send("TS_REQ_get_exts");}});

var TS_REQ_get_msg_imprint = Module.findExportByName("libcrypto.dll", "TS_REQ_get_msg_imprint")
Interceptor.attach(TS_REQ_get_msg_imprint, {onLeave: function (args) {send("TS_REQ_get_msg_imprint");}});

var TS_REQ_get_nonce = Module.findExportByName("libcrypto.dll", "TS_REQ_get_nonce")
Interceptor.attach(TS_REQ_get_nonce, {onLeave: function (args) {send("TS_REQ_get_nonce");}});

var TS_REQ_get_policy_id = Module.findExportByName("libcrypto.dll", "TS_REQ_get_policy_id")
Interceptor.attach(TS_REQ_get_policy_id, {onLeave: function (args) {send("TS_REQ_get_policy_id");}});

var TS_REQ_get_version = Module.findExportByName("libcrypto.dll", "TS_REQ_get_version")
Interceptor.attach(TS_REQ_get_version, {onLeave: function (args) {send("TS_REQ_get_version");}});

var TS_REQ_it = Module.findExportByName("libcrypto.dll", "TS_REQ_it")
Interceptor.attach(TS_REQ_it, {onLeave: function (args) {send("TS_REQ_it");}});

var TS_REQ_new = Module.findExportByName("libcrypto.dll", "TS_REQ_new")
Interceptor.attach(TS_REQ_new, {onLeave: function (args) {send("TS_REQ_new");}});

var TS_REQ_print_bio = Module.findExportByName("libcrypto.dll", "TS_REQ_print_bio")
Interceptor.attach(TS_REQ_print_bio, {onLeave: function (args) {send("TS_REQ_print_bio");}});

var TS_REQ_set_cert_req = Module.findExportByName("libcrypto.dll", "TS_REQ_set_cert_req")
Interceptor.attach(TS_REQ_set_cert_req, {onLeave: function (args) {send("TS_REQ_set_cert_req");}});

var TS_REQ_set_msg_imprint = Module.findExportByName("libcrypto.dll", "TS_REQ_set_msg_imprint")
Interceptor.attach(TS_REQ_set_msg_imprint, {onLeave: function (args) {send("TS_REQ_set_msg_imprint");}});

var TS_REQ_set_nonce = Module.findExportByName("libcrypto.dll", "TS_REQ_set_nonce")
Interceptor.attach(TS_REQ_set_nonce, {onLeave: function (args) {send("TS_REQ_set_nonce");}});

var TS_REQ_set_policy_id = Module.findExportByName("libcrypto.dll", "TS_REQ_set_policy_id")
Interceptor.attach(TS_REQ_set_policy_id, {onLeave: function (args) {send("TS_REQ_set_policy_id");}});

var TS_REQ_set_version = Module.findExportByName("libcrypto.dll", "TS_REQ_set_version")
Interceptor.attach(TS_REQ_set_version, {onLeave: function (args) {send("TS_REQ_set_version");}});

var TS_REQ_to_TS_VERIFY_CTX = Module.findExportByName("libcrypto.dll", "TS_REQ_to_TS_VERIFY_CTX")
Interceptor.attach(TS_REQ_to_TS_VERIFY_CTX, {onLeave: function (args) {send("TS_REQ_to_TS_VERIFY_CTX");}});

var TS_RESP_CTX_add_failure_info = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_add_failure_info")
Interceptor.attach(TS_RESP_CTX_add_failure_info, {onLeave: function (args) {send("TS_RESP_CTX_add_failure_info");}});

var TS_RESP_CTX_add_flags = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_add_flags")
Interceptor.attach(TS_RESP_CTX_add_flags, {onLeave: function (args) {send("TS_RESP_CTX_add_flags");}});

var TS_RESP_CTX_add_md = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_add_md")
Interceptor.attach(TS_RESP_CTX_add_md, {onLeave: function (args) {send("TS_RESP_CTX_add_md");}});

var TS_RESP_CTX_add_policy = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_add_policy")
Interceptor.attach(TS_RESP_CTX_add_policy, {onLeave: function (args) {send("TS_RESP_CTX_add_policy");}});

var TS_RESP_CTX_free = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_free")
Interceptor.attach(TS_RESP_CTX_free, {onLeave: function (args) {send("TS_RESP_CTX_free");}});

var TS_RESP_CTX_get_request = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_get_request")
Interceptor.attach(TS_RESP_CTX_get_request, {onLeave: function (args) {send("TS_RESP_CTX_get_request");}});

var TS_RESP_CTX_get_tst_info = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_get_tst_info")
Interceptor.attach(TS_RESP_CTX_get_tst_info, {onLeave: function (args) {send("TS_RESP_CTX_get_tst_info");}});

var TS_RESP_CTX_new = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_new")
Interceptor.attach(TS_RESP_CTX_new, {onLeave: function (args) {send("TS_RESP_CTX_new");}});

var TS_RESP_CTX_set_accuracy = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_accuracy")
Interceptor.attach(TS_RESP_CTX_set_accuracy, {onLeave: function (args) {send("TS_RESP_CTX_set_accuracy");}});

var TS_RESP_CTX_set_certs = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_certs")
Interceptor.attach(TS_RESP_CTX_set_certs, {onLeave: function (args) {send("TS_RESP_CTX_set_certs");}});

var TS_RESP_CTX_set_clock_precision_digits = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_clock_precision_digits")
Interceptor.attach(TS_RESP_CTX_set_clock_precision_digits, {onLeave: function (args) {send("TS_RESP_CTX_set_clock_precision_digits");}});

var TS_RESP_CTX_set_def_policy = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_def_policy")
Interceptor.attach(TS_RESP_CTX_set_def_policy, {onLeave: function (args) {send("TS_RESP_CTX_set_def_policy");}});

var TS_RESP_CTX_set_extension_cb = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_extension_cb")
Interceptor.attach(TS_RESP_CTX_set_extension_cb, {onLeave: function (args) {send("TS_RESP_CTX_set_extension_cb");}});

var TS_RESP_CTX_set_serial_cb = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_serial_cb")
Interceptor.attach(TS_RESP_CTX_set_serial_cb, {onLeave: function (args) {send("TS_RESP_CTX_set_serial_cb");}});

var TS_RESP_CTX_set_signer_cert = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_signer_cert")
Interceptor.attach(TS_RESP_CTX_set_signer_cert, {onLeave: function (args) {send("TS_RESP_CTX_set_signer_cert");}});

var TS_RESP_CTX_set_signer_key = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_signer_key")
Interceptor.attach(TS_RESP_CTX_set_signer_key, {onLeave: function (args) {send("TS_RESP_CTX_set_signer_key");}});

var TS_RESP_CTX_set_status_info = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_status_info")
Interceptor.attach(TS_RESP_CTX_set_status_info, {onLeave: function (args) {send("TS_RESP_CTX_set_status_info");}});

var TS_RESP_CTX_set_status_info_cond = Module.findExportByName("libcrypto.dll", "TS_RESP_CTX_set_status_info_cond")
Interceptor.attach(TS_RESP_CTX_set_status_info_cond, {onLeave: function (args) {send("TS_RESP_CTX_set_status_info_cond");}});

var TS_RESP_create_response = Module.findExportByName("libcrypto.dll", "TS_RESP_create_response")
Interceptor.attach(TS_RESP_create_response, {onLeave: function (args) {send("TS_RESP_create_response");}});

var TS_RESP_dup = Module.findExportByName("libcrypto.dll", "TS_RESP_dup")
Interceptor.attach(TS_RESP_dup, {onLeave: function (args) {send("TS_RESP_dup");}});

var TS_RESP_free = Module.findExportByName("libcrypto.dll", "TS_RESP_free")
Interceptor.attach(TS_RESP_free, {onLeave: function (args) {send("TS_RESP_free");}});

var TS_RESP_get_status_info = Module.findExportByName("libcrypto.dll", "TS_RESP_get_status_info")
Interceptor.attach(TS_RESP_get_status_info, {onLeave: function (args) {send("TS_RESP_get_status_info");}});

var TS_RESP_get_token = Module.findExportByName("libcrypto.dll", "TS_RESP_get_token")
Interceptor.attach(TS_RESP_get_token, {onLeave: function (args) {send("TS_RESP_get_token");}});

var TS_RESP_get_tst_info = Module.findExportByName("libcrypto.dll", "TS_RESP_get_tst_info")
Interceptor.attach(TS_RESP_get_tst_info, {onLeave: function (args) {send("TS_RESP_get_tst_info");}});

var TS_RESP_it = Module.findExportByName("libcrypto.dll", "TS_RESP_it")
Interceptor.attach(TS_RESP_it, {onLeave: function (args) {send("TS_RESP_it");}});

var TS_RESP_new = Module.findExportByName("libcrypto.dll", "TS_RESP_new")
Interceptor.attach(TS_RESP_new, {onLeave: function (args) {send("TS_RESP_new");}});

var TS_RESP_print_bio = Module.findExportByName("libcrypto.dll", "TS_RESP_print_bio")
Interceptor.attach(TS_RESP_print_bio, {onLeave: function (args) {send("TS_RESP_print_bio");}});

var TS_RESP_set_status_info = Module.findExportByName("libcrypto.dll", "TS_RESP_set_status_info")
Interceptor.attach(TS_RESP_set_status_info, {onLeave: function (args) {send("TS_RESP_set_status_info");}});

var TS_RESP_set_tst_info = Module.findExportByName("libcrypto.dll", "TS_RESP_set_tst_info")
Interceptor.attach(TS_RESP_set_tst_info, {onLeave: function (args) {send("TS_RESP_set_tst_info");}});

var TS_RESP_verify_response = Module.findExportByName("libcrypto.dll", "TS_RESP_verify_response")
Interceptor.attach(TS_RESP_verify_response, {onLeave: function (args) {send("TS_RESP_verify_response");}});

var TS_RESP_verify_signature = Module.findExportByName("libcrypto.dll", "TS_RESP_verify_signature")
Interceptor.attach(TS_RESP_verify_signature, {onLeave: function (args) {send("TS_RESP_verify_signature");}});

var TS_RESP_verify_token = Module.findExportByName("libcrypto.dll", "TS_RESP_verify_token")
Interceptor.attach(TS_RESP_verify_token, {onLeave: function (args) {send("TS_RESP_verify_token");}});

var TS_STATUS_INFO_dup = Module.findExportByName("libcrypto.dll", "TS_STATUS_INFO_dup")
Interceptor.attach(TS_STATUS_INFO_dup, {onLeave: function (args) {send("TS_STATUS_INFO_dup");}});

var TS_STATUS_INFO_free = Module.findExportByName("libcrypto.dll", "TS_STATUS_INFO_free")
Interceptor.attach(TS_STATUS_INFO_free, {onLeave: function (args) {send("TS_STATUS_INFO_free");}});

var TS_STATUS_INFO_it = Module.findExportByName("libcrypto.dll", "TS_STATUS_INFO_it")
Interceptor.attach(TS_STATUS_INFO_it, {onLeave: function (args) {send("TS_STATUS_INFO_it");}});

var TS_STATUS_INFO_new = Module.findExportByName("libcrypto.dll", "TS_STATUS_INFO_new")
Interceptor.attach(TS_STATUS_INFO_new, {onLeave: function (args) {send("TS_STATUS_INFO_new");}});

var TS_STATUS_INFO_print_bio = Module.findExportByName("libcrypto.dll", "TS_STATUS_INFO_print_bio")
Interceptor.attach(TS_STATUS_INFO_print_bio, {onLeave: function (args) {send("TS_STATUS_INFO_print_bio");}});

var TS_TST_INFO_add_ext = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_add_ext")
Interceptor.attach(TS_TST_INFO_add_ext, {onLeave: function (args) {send("TS_TST_INFO_add_ext");}});

var TS_TST_INFO_delete_ext = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_delete_ext")
Interceptor.attach(TS_TST_INFO_delete_ext, {onLeave: function (args) {send("TS_TST_INFO_delete_ext");}});

var TS_TST_INFO_dup = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_dup")
Interceptor.attach(TS_TST_INFO_dup, {onLeave: function (args) {send("TS_TST_INFO_dup");}});

var TS_TST_INFO_ext_free = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_ext_free")
Interceptor.attach(TS_TST_INFO_ext_free, {onLeave: function (args) {send("TS_TST_INFO_ext_free");}});

var TS_TST_INFO_free = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_free")
Interceptor.attach(TS_TST_INFO_free, {onLeave: function (args) {send("TS_TST_INFO_free");}});

var TS_TST_INFO_get_accuracy = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_accuracy")
Interceptor.attach(TS_TST_INFO_get_accuracy, {onLeave: function (args) {send("TS_TST_INFO_get_accuracy");}});

var TS_TST_INFO_get_ext = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ext")
Interceptor.attach(TS_TST_INFO_get_ext, {onLeave: function (args) {send("TS_TST_INFO_get_ext");}});

var TS_TST_INFO_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ext_by_NID")
Interceptor.attach(TS_TST_INFO_get_ext_by_NID, {onLeave: function (args) {send("TS_TST_INFO_get_ext_by_NID");}});

var TS_TST_INFO_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ext_by_OBJ")
Interceptor.attach(TS_TST_INFO_get_ext_by_OBJ, {onLeave: function (args) {send("TS_TST_INFO_get_ext_by_OBJ");}});

var TS_TST_INFO_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ext_by_critical")
Interceptor.attach(TS_TST_INFO_get_ext_by_critical, {onLeave: function (args) {send("TS_TST_INFO_get_ext_by_critical");}});

var TS_TST_INFO_get_ext_count = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ext_count")
Interceptor.attach(TS_TST_INFO_get_ext_count, {onLeave: function (args) {send("TS_TST_INFO_get_ext_count");}});

var TS_TST_INFO_get_ext_d2i = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ext_d2i")
Interceptor.attach(TS_TST_INFO_get_ext_d2i, {onLeave: function (args) {send("TS_TST_INFO_get_ext_d2i");}});

var TS_TST_INFO_get_exts = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_exts")
Interceptor.attach(TS_TST_INFO_get_exts, {onLeave: function (args) {send("TS_TST_INFO_get_exts");}});

var TS_TST_INFO_get_msg_imprint = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_msg_imprint")
Interceptor.attach(TS_TST_INFO_get_msg_imprint, {onLeave: function (args) {send("TS_TST_INFO_get_msg_imprint");}});

var TS_TST_INFO_get_nonce = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_nonce")
Interceptor.attach(TS_TST_INFO_get_nonce, {onLeave: function (args) {send("TS_TST_INFO_get_nonce");}});

var TS_TST_INFO_get_ordering = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_ordering")
Interceptor.attach(TS_TST_INFO_get_ordering, {onLeave: function (args) {send("TS_TST_INFO_get_ordering");}});

var TS_TST_INFO_get_policy_id = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_policy_id")
Interceptor.attach(TS_TST_INFO_get_policy_id, {onLeave: function (args) {send("TS_TST_INFO_get_policy_id");}});

var TS_TST_INFO_get_serial = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_serial")
Interceptor.attach(TS_TST_INFO_get_serial, {onLeave: function (args) {send("TS_TST_INFO_get_serial");}});

var TS_TST_INFO_get_time = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_time")
Interceptor.attach(TS_TST_INFO_get_time, {onLeave: function (args) {send("TS_TST_INFO_get_time");}});

var TS_TST_INFO_get_tsa = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_tsa")
Interceptor.attach(TS_TST_INFO_get_tsa, {onLeave: function (args) {send("TS_TST_INFO_get_tsa");}});

var TS_TST_INFO_get_version = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_get_version")
Interceptor.attach(TS_TST_INFO_get_version, {onLeave: function (args) {send("TS_TST_INFO_get_version");}});

var TS_TST_INFO_it = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_it")
Interceptor.attach(TS_TST_INFO_it, {onLeave: function (args) {send("TS_TST_INFO_it");}});

var TS_TST_INFO_new = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_new")
Interceptor.attach(TS_TST_INFO_new, {onLeave: function (args) {send("TS_TST_INFO_new");}});

var TS_TST_INFO_print_bio = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_print_bio")
Interceptor.attach(TS_TST_INFO_print_bio, {onLeave: function (args) {send("TS_TST_INFO_print_bio");}});

var TS_TST_INFO_set_accuracy = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_accuracy")
Interceptor.attach(TS_TST_INFO_set_accuracy, {onLeave: function (args) {send("TS_TST_INFO_set_accuracy");}});

var TS_TST_INFO_set_msg_imprint = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_msg_imprint")
Interceptor.attach(TS_TST_INFO_set_msg_imprint, {onLeave: function (args) {send("TS_TST_INFO_set_msg_imprint");}});

var TS_TST_INFO_set_nonce = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_nonce")
Interceptor.attach(TS_TST_INFO_set_nonce, {onLeave: function (args) {send("TS_TST_INFO_set_nonce");}});

var TS_TST_INFO_set_ordering = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_ordering")
Interceptor.attach(TS_TST_INFO_set_ordering, {onLeave: function (args) {send("TS_TST_INFO_set_ordering");}});

var TS_TST_INFO_set_policy_id = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_policy_id")
Interceptor.attach(TS_TST_INFO_set_policy_id, {onLeave: function (args) {send("TS_TST_INFO_set_policy_id");}});

var TS_TST_INFO_set_serial = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_serial")
Interceptor.attach(TS_TST_INFO_set_serial, {onLeave: function (args) {send("TS_TST_INFO_set_serial");}});

var TS_TST_INFO_set_time = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_time")
Interceptor.attach(TS_TST_INFO_set_time, {onLeave: function (args) {send("TS_TST_INFO_set_time");}});

var TS_TST_INFO_set_tsa = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_tsa")
Interceptor.attach(TS_TST_INFO_set_tsa, {onLeave: function (args) {send("TS_TST_INFO_set_tsa");}});

var TS_TST_INFO_set_version = Module.findExportByName("libcrypto.dll", "TS_TST_INFO_set_version")
Interceptor.attach(TS_TST_INFO_set_version, {onLeave: function (args) {send("TS_TST_INFO_set_version");}});

var TS_VERIFY_CTX_cleanup = Module.findExportByName("libcrypto.dll", "TS_VERIFY_CTX_cleanup")
Interceptor.attach(TS_VERIFY_CTX_cleanup, {onLeave: function (args) {send("TS_VERIFY_CTX_cleanup");}});

var TS_VERIFY_CTX_free = Module.findExportByName("libcrypto.dll", "TS_VERIFY_CTX_free")
Interceptor.attach(TS_VERIFY_CTX_free, {onLeave: function (args) {send("TS_VERIFY_CTX_free");}});

var TS_VERIFY_CTX_init = Module.findExportByName("libcrypto.dll", "TS_VERIFY_CTX_init")
Interceptor.attach(TS_VERIFY_CTX_init, {onLeave: function (args) {send("TS_VERIFY_CTX_init");}});

var TS_VERIFY_CTX_new = Module.findExportByName("libcrypto.dll", "TS_VERIFY_CTX_new")
Interceptor.attach(TS_VERIFY_CTX_new, {onLeave: function (args) {send("TS_VERIFY_CTX_new");}});

var TS_X509_ALGOR_print_bio = Module.findExportByName("libcrypto.dll", "TS_X509_ALGOR_print_bio")
Interceptor.attach(TS_X509_ALGOR_print_bio, {onLeave: function (args) {send("TS_X509_ALGOR_print_bio");}});

var TS_ext_print_bio = Module.findExportByName("libcrypto.dll", "TS_ext_print_bio")
Interceptor.attach(TS_ext_print_bio, {onLeave: function (args) {send("TS_ext_print_bio");}});

var TXT_DB_create_index = Module.findExportByName("libcrypto.dll", "TXT_DB_create_index")
Interceptor.attach(TXT_DB_create_index, {onLeave: function (args) {send("TXT_DB_create_index");}});

var TXT_DB_free = Module.findExportByName("libcrypto.dll", "TXT_DB_free")
Interceptor.attach(TXT_DB_free, {onLeave: function (args) {send("TXT_DB_free");}});

var TXT_DB_get_by_index = Module.findExportByName("libcrypto.dll", "TXT_DB_get_by_index")
Interceptor.attach(TXT_DB_get_by_index, {onLeave: function (args) {send("TXT_DB_get_by_index");}});

var TXT_DB_insert = Module.findExportByName("libcrypto.dll", "TXT_DB_insert")
Interceptor.attach(TXT_DB_insert, {onLeave: function (args) {send("TXT_DB_insert");}});

var TXT_DB_read = Module.findExportByName("libcrypto.dll", "TXT_DB_read")
Interceptor.attach(TXT_DB_read, {onLeave: function (args) {send("TXT_DB_read");}});

var TXT_DB_write = Module.findExportByName("libcrypto.dll", "TXT_DB_write")
Interceptor.attach(TXT_DB_write, {onLeave: function (args) {send("TXT_DB_write");}});

var UI_OpenSSL = Module.findExportByName("libcrypto.dll", "UI_OpenSSL")
Interceptor.attach(UI_OpenSSL, {onLeave: function (args) {send("UI_OpenSSL");}});

var UI_UTIL_read_pw = Module.findExportByName("libcrypto.dll", "UI_UTIL_read_pw")
Interceptor.attach(UI_UTIL_read_pw, {onLeave: function (args) {send("UI_UTIL_read_pw");}});

var UI_UTIL_read_pw_string = Module.findExportByName("libcrypto.dll", "UI_UTIL_read_pw_string")
Interceptor.attach(UI_UTIL_read_pw_string, {onLeave: function (args) {send("UI_UTIL_read_pw_string");}});

var UI_add_error_string = Module.findExportByName("libcrypto.dll", "UI_add_error_string")
Interceptor.attach(UI_add_error_string, {onLeave: function (args) {send("UI_add_error_string");}});

var UI_add_info_string = Module.findExportByName("libcrypto.dll", "UI_add_info_string")
Interceptor.attach(UI_add_info_string, {onLeave: function (args) {send("UI_add_info_string");}});

var UI_add_input_boolean = Module.findExportByName("libcrypto.dll", "UI_add_input_boolean")
Interceptor.attach(UI_add_input_boolean, {onLeave: function (args) {send("UI_add_input_boolean");}});

var UI_add_input_string = Module.findExportByName("libcrypto.dll", "UI_add_input_string")
Interceptor.attach(UI_add_input_string, {onLeave: function (args) {send("UI_add_input_string");}});

var UI_add_user_data = Module.findExportByName("libcrypto.dll", "UI_add_user_data")
Interceptor.attach(UI_add_user_data, {onLeave: function (args) {send("UI_add_user_data");}});

var UI_add_verify_string = Module.findExportByName("libcrypto.dll", "UI_add_verify_string")
Interceptor.attach(UI_add_verify_string, {onLeave: function (args) {send("UI_add_verify_string");}});

var UI_construct_prompt = Module.findExportByName("libcrypto.dll", "UI_construct_prompt")
Interceptor.attach(UI_construct_prompt, {onLeave: function (args) {send("UI_construct_prompt");}});

var UI_create_method = Module.findExportByName("libcrypto.dll", "UI_create_method")
Interceptor.attach(UI_create_method, {onLeave: function (args) {send("UI_create_method");}});

var UI_ctrl = Module.findExportByName("libcrypto.dll", "UI_ctrl")
Interceptor.attach(UI_ctrl, {onLeave: function (args) {send("UI_ctrl");}});

var UI_destroy_method = Module.findExportByName("libcrypto.dll", "UI_destroy_method")
Interceptor.attach(UI_destroy_method, {onLeave: function (args) {send("UI_destroy_method");}});

var UI_dup_error_string = Module.findExportByName("libcrypto.dll", "UI_dup_error_string")
Interceptor.attach(UI_dup_error_string, {onLeave: function (args) {send("UI_dup_error_string");}});

var UI_dup_info_string = Module.findExportByName("libcrypto.dll", "UI_dup_info_string")
Interceptor.attach(UI_dup_info_string, {onLeave: function (args) {send("UI_dup_info_string");}});

var UI_dup_input_boolean = Module.findExportByName("libcrypto.dll", "UI_dup_input_boolean")
Interceptor.attach(UI_dup_input_boolean, {onLeave: function (args) {send("UI_dup_input_boolean");}});

var UI_dup_input_string = Module.findExportByName("libcrypto.dll", "UI_dup_input_string")
Interceptor.attach(UI_dup_input_string, {onLeave: function (args) {send("UI_dup_input_string");}});

var UI_dup_verify_string = Module.findExportByName("libcrypto.dll", "UI_dup_verify_string")
Interceptor.attach(UI_dup_verify_string, {onLeave: function (args) {send("UI_dup_verify_string");}});

var UI_free = Module.findExportByName("libcrypto.dll", "UI_free")
Interceptor.attach(UI_free, {onLeave: function (args) {send("UI_free");}});

var UI_get0_action_string = Module.findExportByName("libcrypto.dll", "UI_get0_action_string")
Interceptor.attach(UI_get0_action_string, {onLeave: function (args) {send("UI_get0_action_string");}});

var UI_get0_output_string = Module.findExportByName("libcrypto.dll", "UI_get0_output_string")
Interceptor.attach(UI_get0_output_string, {onLeave: function (args) {send("UI_get0_output_string");}});

var UI_get0_result = Module.findExportByName("libcrypto.dll", "UI_get0_result")
Interceptor.attach(UI_get0_result, {onLeave: function (args) {send("UI_get0_result");}});

var UI_get0_result_string = Module.findExportByName("libcrypto.dll", "UI_get0_result_string")
Interceptor.attach(UI_get0_result_string, {onLeave: function (args) {send("UI_get0_result_string");}});

var UI_get0_test_string = Module.findExportByName("libcrypto.dll", "UI_get0_test_string")
Interceptor.attach(UI_get0_test_string, {onLeave: function (args) {send("UI_get0_test_string");}});

var UI_get0_user_data = Module.findExportByName("libcrypto.dll", "UI_get0_user_data")
Interceptor.attach(UI_get0_user_data, {onLeave: function (args) {send("UI_get0_user_data");}});

var UI_get_default_method = Module.findExportByName("libcrypto.dll", "UI_get_default_method")
Interceptor.attach(UI_get_default_method, {onLeave: function (args) {send("UI_get_default_method");}});

var UI_get_ex_data = Module.findExportByName("libcrypto.dll", "UI_get_ex_data")
Interceptor.attach(UI_get_ex_data, {onLeave: function (args) {send("UI_get_ex_data");}});

var UI_get_ex_new_index = Module.findExportByName("libcrypto.dll", "UI_get_ex_new_index")
Interceptor.attach(UI_get_ex_new_index, {onLeave: function (args) {send("UI_get_ex_new_index");}});

var UI_get_input_flags = Module.findExportByName("libcrypto.dll", "UI_get_input_flags")
Interceptor.attach(UI_get_input_flags, {onLeave: function (args) {send("UI_get_input_flags");}});

var UI_get_method = Module.findExportByName("libcrypto.dll", "UI_get_method")
Interceptor.attach(UI_get_method, {onLeave: function (args) {send("UI_get_method");}});

var UI_get_result_maxsize = Module.findExportByName("libcrypto.dll", "UI_get_result_maxsize")
Interceptor.attach(UI_get_result_maxsize, {onLeave: function (args) {send("UI_get_result_maxsize");}});

var UI_get_result_minsize = Module.findExportByName("libcrypto.dll", "UI_get_result_minsize")
Interceptor.attach(UI_get_result_minsize, {onLeave: function (args) {send("UI_get_result_minsize");}});

var UI_get_string_type = Module.findExportByName("libcrypto.dll", "UI_get_string_type")
Interceptor.attach(UI_get_string_type, {onLeave: function (args) {send("UI_get_string_type");}});

var UI_method_get_closer = Module.findExportByName("libcrypto.dll", "UI_method_get_closer")
Interceptor.attach(UI_method_get_closer, {onLeave: function (args) {send("UI_method_get_closer");}});

var UI_method_get_flusher = Module.findExportByName("libcrypto.dll", "UI_method_get_flusher")
Interceptor.attach(UI_method_get_flusher, {onLeave: function (args) {send("UI_method_get_flusher");}});

var UI_method_get_opener = Module.findExportByName("libcrypto.dll", "UI_method_get_opener")
Interceptor.attach(UI_method_get_opener, {onLeave: function (args) {send("UI_method_get_opener");}});

var UI_method_get_prompt_constructor = Module.findExportByName("libcrypto.dll", "UI_method_get_prompt_constructor")
Interceptor.attach(UI_method_get_prompt_constructor, {onLeave: function (args) {send("UI_method_get_prompt_constructor");}});

var UI_method_get_reader = Module.findExportByName("libcrypto.dll", "UI_method_get_reader")
Interceptor.attach(UI_method_get_reader, {onLeave: function (args) {send("UI_method_get_reader");}});

var UI_method_get_writer = Module.findExportByName("libcrypto.dll", "UI_method_get_writer")
Interceptor.attach(UI_method_get_writer, {onLeave: function (args) {send("UI_method_get_writer");}});

var UI_method_set_closer = Module.findExportByName("libcrypto.dll", "UI_method_set_closer")
Interceptor.attach(UI_method_set_closer, {onLeave: function (args) {send("UI_method_set_closer");}});

var UI_method_set_flusher = Module.findExportByName("libcrypto.dll", "UI_method_set_flusher")
Interceptor.attach(UI_method_set_flusher, {onLeave: function (args) {send("UI_method_set_flusher");}});

var UI_method_set_opener = Module.findExportByName("libcrypto.dll", "UI_method_set_opener")
Interceptor.attach(UI_method_set_opener, {onLeave: function (args) {send("UI_method_set_opener");}});

var UI_method_set_prompt_constructor = Module.findExportByName("libcrypto.dll", "UI_method_set_prompt_constructor")
Interceptor.attach(UI_method_set_prompt_constructor, {onLeave: function (args) {send("UI_method_set_prompt_constructor");}});

var UI_method_set_reader = Module.findExportByName("libcrypto.dll", "UI_method_set_reader")
Interceptor.attach(UI_method_set_reader, {onLeave: function (args) {send("UI_method_set_reader");}});

var UI_method_set_writer = Module.findExportByName("libcrypto.dll", "UI_method_set_writer")
Interceptor.attach(UI_method_set_writer, {onLeave: function (args) {send("UI_method_set_writer");}});

var UI_new = Module.findExportByName("libcrypto.dll", "UI_new")
Interceptor.attach(UI_new, {onLeave: function (args) {send("UI_new");}});

var UI_new_method = Module.findExportByName("libcrypto.dll", "UI_new_method")
Interceptor.attach(UI_new_method, {onLeave: function (args) {send("UI_new_method");}});

var UI_process = Module.findExportByName("libcrypto.dll", "UI_process")
Interceptor.attach(UI_process, {onLeave: function (args) {send("UI_process");}});

var UI_set_default_method = Module.findExportByName("libcrypto.dll", "UI_set_default_method")
Interceptor.attach(UI_set_default_method, {onLeave: function (args) {send("UI_set_default_method");}});

var UI_set_ex_data = Module.findExportByName("libcrypto.dll", "UI_set_ex_data")
Interceptor.attach(UI_set_ex_data, {onLeave: function (args) {send("UI_set_ex_data");}});

var UI_set_method = Module.findExportByName("libcrypto.dll", "UI_set_method")
Interceptor.attach(UI_set_method, {onLeave: function (args) {send("UI_set_method");}});

var UI_set_result = Module.findExportByName("libcrypto.dll", "UI_set_result")
Interceptor.attach(UI_set_result, {onLeave: function (args) {send("UI_set_result");}});

var USERNOTICE_free = Module.findExportByName("libcrypto.dll", "USERNOTICE_free")
Interceptor.attach(USERNOTICE_free, {onLeave: function (args) {send("USERNOTICE_free");}});

var USERNOTICE_it = Module.findExportByName("libcrypto.dll", "USERNOTICE_it")
Interceptor.attach(USERNOTICE_it, {onLeave: function (args) {send("USERNOTICE_it");}});

var USERNOTICE_new = Module.findExportByName("libcrypto.dll", "USERNOTICE_new")
Interceptor.attach(USERNOTICE_new, {onLeave: function (args) {send("USERNOTICE_new");}});

var WHIRLPOOL = Module.findExportByName("libcrypto.dll", "WHIRLPOOL")
Interceptor.attach(WHIRLPOOL, {onLeave: function (args) {send("WHIRLPOOL");}});

var WHIRLPOOL_BitUpdate = Module.findExportByName("libcrypto.dll", "WHIRLPOOL_BitUpdate")
Interceptor.attach(WHIRLPOOL_BitUpdate, {onLeave: function (args) {send("WHIRLPOOL_BitUpdate");}});

var WHIRLPOOL_Final = Module.findExportByName("libcrypto.dll", "WHIRLPOOL_Final")
Interceptor.attach(WHIRLPOOL_Final, {onLeave: function (args) {send("WHIRLPOOL_Final");}});

var WHIRLPOOL_Init = Module.findExportByName("libcrypto.dll", "WHIRLPOOL_Init")
Interceptor.attach(WHIRLPOOL_Init, {onLeave: function (args) {send("WHIRLPOOL_Init");}});

var WHIRLPOOL_Update = Module.findExportByName("libcrypto.dll", "WHIRLPOOL_Update")
Interceptor.attach(WHIRLPOOL_Update, {onLeave: function (args) {send("WHIRLPOOL_Update");}});

var X25519 = Module.findExportByName("libcrypto.dll", "X25519")
Interceptor.attach(X25519, {onLeave: function (args) {send("X25519");}});

var X25519_keypair = Module.findExportByName("libcrypto.dll", "X25519_keypair")
Interceptor.attach(X25519_keypair, {onLeave: function (args) {send("X25519_keypair");}});

var X509V3_EXT_CRL_add_conf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_CRL_add_conf")
Interceptor.attach(X509V3_EXT_CRL_add_conf, {onLeave: function (args) {send("X509V3_EXT_CRL_add_conf");}});

var X509V3_EXT_CRL_add_nconf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_CRL_add_nconf")
Interceptor.attach(X509V3_EXT_CRL_add_nconf, {onLeave: function (args) {send("X509V3_EXT_CRL_add_nconf");}});

var X509V3_EXT_REQ_add_conf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_REQ_add_conf")
Interceptor.attach(X509V3_EXT_REQ_add_conf, {onLeave: function (args) {send("X509V3_EXT_REQ_add_conf");}});

var X509V3_EXT_REQ_add_nconf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_REQ_add_nconf")
Interceptor.attach(X509V3_EXT_REQ_add_nconf, {onLeave: function (args) {send("X509V3_EXT_REQ_add_nconf");}});

var X509V3_EXT_add = Module.findExportByName("libcrypto.dll", "X509V3_EXT_add")
Interceptor.attach(X509V3_EXT_add, {onLeave: function (args) {send("X509V3_EXT_add");}});

var X509V3_EXT_add_alias = Module.findExportByName("libcrypto.dll", "X509V3_EXT_add_alias")
Interceptor.attach(X509V3_EXT_add_alias, {onLeave: function (args) {send("X509V3_EXT_add_alias");}});

var X509V3_EXT_add_conf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_add_conf")
Interceptor.attach(X509V3_EXT_add_conf, {onLeave: function (args) {send("X509V3_EXT_add_conf");}});

var X509V3_EXT_add_list = Module.findExportByName("libcrypto.dll", "X509V3_EXT_add_list")
Interceptor.attach(X509V3_EXT_add_list, {onLeave: function (args) {send("X509V3_EXT_add_list");}});

var X509V3_EXT_add_nconf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_add_nconf")
Interceptor.attach(X509V3_EXT_add_nconf, {onLeave: function (args) {send("X509V3_EXT_add_nconf");}});

var X509V3_EXT_add_nconf_sk = Module.findExportByName("libcrypto.dll", "X509V3_EXT_add_nconf_sk")
Interceptor.attach(X509V3_EXT_add_nconf_sk, {onLeave: function (args) {send("X509V3_EXT_add_nconf_sk");}});

var X509V3_EXT_cleanup = Module.findExportByName("libcrypto.dll", "X509V3_EXT_cleanup")
Interceptor.attach(X509V3_EXT_cleanup, {onLeave: function (args) {send("X509V3_EXT_cleanup");}});

var X509V3_EXT_conf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_conf")
Interceptor.attach(X509V3_EXT_conf, {onLeave: function (args) {send("X509V3_EXT_conf");}});

var X509V3_EXT_conf_nid = Module.findExportByName("libcrypto.dll", "X509V3_EXT_conf_nid")
Interceptor.attach(X509V3_EXT_conf_nid, {onLeave: function (args) {send("X509V3_EXT_conf_nid");}});

var X509V3_EXT_d2i = Module.findExportByName("libcrypto.dll", "X509V3_EXT_d2i")
Interceptor.attach(X509V3_EXT_d2i, {onLeave: function (args) {send("X509V3_EXT_d2i");}});

var X509V3_EXT_get = Module.findExportByName("libcrypto.dll", "X509V3_EXT_get")
Interceptor.attach(X509V3_EXT_get, {onLeave: function (args) {send("X509V3_EXT_get");}});

var X509V3_EXT_get_nid = Module.findExportByName("libcrypto.dll", "X509V3_EXT_get_nid")
Interceptor.attach(X509V3_EXT_get_nid, {onLeave: function (args) {send("X509V3_EXT_get_nid");}});

var X509V3_EXT_i2d = Module.findExportByName("libcrypto.dll", "X509V3_EXT_i2d")
Interceptor.attach(X509V3_EXT_i2d, {onLeave: function (args) {send("X509V3_EXT_i2d");}});

var X509V3_EXT_nconf = Module.findExportByName("libcrypto.dll", "X509V3_EXT_nconf")
Interceptor.attach(X509V3_EXT_nconf, {onLeave: function (args) {send("X509V3_EXT_nconf");}});

var X509V3_EXT_nconf_nid = Module.findExportByName("libcrypto.dll", "X509V3_EXT_nconf_nid")
Interceptor.attach(X509V3_EXT_nconf_nid, {onLeave: function (args) {send("X509V3_EXT_nconf_nid");}});

var X509V3_EXT_print = Module.findExportByName("libcrypto.dll", "X509V3_EXT_print")
Interceptor.attach(X509V3_EXT_print, {onLeave: function (args) {send("X509V3_EXT_print");}});

var X509V3_EXT_print_fp = Module.findExportByName("libcrypto.dll", "X509V3_EXT_print_fp")
Interceptor.attach(X509V3_EXT_print_fp, {onLeave: function (args) {send("X509V3_EXT_print_fp");}});

var X509V3_EXT_val_prn = Module.findExportByName("libcrypto.dll", "X509V3_EXT_val_prn")
Interceptor.attach(X509V3_EXT_val_prn, {onLeave: function (args) {send("X509V3_EXT_val_prn");}});

var X509V3_NAME_from_section = Module.findExportByName("libcrypto.dll", "X509V3_NAME_from_section")
Interceptor.attach(X509V3_NAME_from_section, {onLeave: function (args) {send("X509V3_NAME_from_section");}});

var X509V3_add1_i2d = Module.findExportByName("libcrypto.dll", "X509V3_add1_i2d")
Interceptor.attach(X509V3_add1_i2d, {onLeave: function (args) {send("X509V3_add1_i2d");}});

var X509V3_add_standard_extensions = Module.findExportByName("libcrypto.dll", "X509V3_add_standard_extensions")
Interceptor.attach(X509V3_add_standard_extensions, {onLeave: function (args) {send("X509V3_add_standard_extensions");}});

var X509V3_add_value = Module.findExportByName("libcrypto.dll", "X509V3_add_value")
Interceptor.attach(X509V3_add_value, {onLeave: function (args) {send("X509V3_add_value");}});

var X509V3_add_value_bool = Module.findExportByName("libcrypto.dll", "X509V3_add_value_bool")
Interceptor.attach(X509V3_add_value_bool, {onLeave: function (args) {send("X509V3_add_value_bool");}});

var X509V3_add_value_bool_nf = Module.findExportByName("libcrypto.dll", "X509V3_add_value_bool_nf")
Interceptor.attach(X509V3_add_value_bool_nf, {onLeave: function (args) {send("X509V3_add_value_bool_nf");}});

var X509V3_add_value_int = Module.findExportByName("libcrypto.dll", "X509V3_add_value_int")
Interceptor.attach(X509V3_add_value_int, {onLeave: function (args) {send("X509V3_add_value_int");}});

var X509V3_add_value_uchar = Module.findExportByName("libcrypto.dll", "X509V3_add_value_uchar")
Interceptor.attach(X509V3_add_value_uchar, {onLeave: function (args) {send("X509V3_add_value_uchar");}});

var X509V3_conf_free = Module.findExportByName("libcrypto.dll", "X509V3_conf_free")
Interceptor.attach(X509V3_conf_free, {onLeave: function (args) {send("X509V3_conf_free");}});

var X509V3_extensions_print = Module.findExportByName("libcrypto.dll", "X509V3_extensions_print")
Interceptor.attach(X509V3_extensions_print, {onLeave: function (args) {send("X509V3_extensions_print");}});

var X509V3_get_d2i = Module.findExportByName("libcrypto.dll", "X509V3_get_d2i")
Interceptor.attach(X509V3_get_d2i, {onLeave: function (args) {send("X509V3_get_d2i");}});

var X509V3_get_section = Module.findExportByName("libcrypto.dll", "X509V3_get_section")
Interceptor.attach(X509V3_get_section, {onLeave: function (args) {send("X509V3_get_section");}});

var X509V3_get_string = Module.findExportByName("libcrypto.dll", "X509V3_get_string")
Interceptor.attach(X509V3_get_string, {onLeave: function (args) {send("X509V3_get_string");}});

var X509V3_get_value_bool = Module.findExportByName("libcrypto.dll", "X509V3_get_value_bool")
Interceptor.attach(X509V3_get_value_bool, {onLeave: function (args) {send("X509V3_get_value_bool");}});

var X509V3_get_value_int = Module.findExportByName("libcrypto.dll", "X509V3_get_value_int")
Interceptor.attach(X509V3_get_value_int, {onLeave: function (args) {send("X509V3_get_value_int");}});

var X509V3_parse_list = Module.findExportByName("libcrypto.dll", "X509V3_parse_list")
Interceptor.attach(X509V3_parse_list, {onLeave: function (args) {send("X509V3_parse_list");}});

var X509V3_section_free = Module.findExportByName("libcrypto.dll", "X509V3_section_free")
Interceptor.attach(X509V3_section_free, {onLeave: function (args) {send("X509V3_section_free");}});

var X509V3_set_conf_lhash = Module.findExportByName("libcrypto.dll", "X509V3_set_conf_lhash")
Interceptor.attach(X509V3_set_conf_lhash, {onLeave: function (args) {send("X509V3_set_conf_lhash");}});

var X509V3_set_ctx = Module.findExportByName("libcrypto.dll", "X509V3_set_ctx")
Interceptor.attach(X509V3_set_ctx, {onLeave: function (args) {send("X509V3_set_ctx");}});

var X509V3_set_nconf = Module.findExportByName("libcrypto.dll", "X509V3_set_nconf")
Interceptor.attach(X509V3_set_nconf, {onLeave: function (args) {send("X509V3_set_nconf");}});

var X509V3_string_free = Module.findExportByName("libcrypto.dll", "X509V3_string_free")
Interceptor.attach(X509V3_string_free, {onLeave: function (args) {send("X509V3_string_free");}});

var X509_ALGORS_it = Module.findExportByName("libcrypto.dll", "X509_ALGORS_it")
Interceptor.attach(X509_ALGORS_it, {onLeave: function (args) {send("X509_ALGORS_it");}});

var X509_ALGOR_cmp = Module.findExportByName("libcrypto.dll", "X509_ALGOR_cmp")
Interceptor.attach(X509_ALGOR_cmp, {onLeave: function (args) {send("X509_ALGOR_cmp");}});

var X509_ALGOR_dup = Module.findExportByName("libcrypto.dll", "X509_ALGOR_dup")
Interceptor.attach(X509_ALGOR_dup, {onLeave: function (args) {send("X509_ALGOR_dup");}});

var X509_ALGOR_free = Module.findExportByName("libcrypto.dll", "X509_ALGOR_free")
Interceptor.attach(X509_ALGOR_free, {onLeave: function (args) {send("X509_ALGOR_free");}});

var X509_ALGOR_get0 = Module.findExportByName("libcrypto.dll", "X509_ALGOR_get0")
Interceptor.attach(X509_ALGOR_get0, {onLeave: function (args) {send("X509_ALGOR_get0");}});

var X509_ALGOR_it = Module.findExportByName("libcrypto.dll", "X509_ALGOR_it")
Interceptor.attach(X509_ALGOR_it, {onLeave: function (args) {send("X509_ALGOR_it");}});

var X509_ALGOR_new = Module.findExportByName("libcrypto.dll", "X509_ALGOR_new")
Interceptor.attach(X509_ALGOR_new, {onLeave: function (args) {send("X509_ALGOR_new");}});

var X509_ALGOR_set0 = Module.findExportByName("libcrypto.dll", "X509_ALGOR_set0")
Interceptor.attach(X509_ALGOR_set0, {onLeave: function (args) {send("X509_ALGOR_set0");}});

var X509_ALGOR_set_md = Module.findExportByName("libcrypto.dll", "X509_ALGOR_set_md")
Interceptor.attach(X509_ALGOR_set_md, {onLeave: function (args) {send("X509_ALGOR_set_md");}});

var X509_ATTRIBUTE_SET_it = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_SET_it")
Interceptor.attach(X509_ATTRIBUTE_SET_it, {onLeave: function (args) {send("X509_ATTRIBUTE_SET_it");}});

var X509_ATTRIBUTE_count = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_count")
Interceptor.attach(X509_ATTRIBUTE_count, {onLeave: function (args) {send("X509_ATTRIBUTE_count");}});

var X509_ATTRIBUTE_create = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_create")
Interceptor.attach(X509_ATTRIBUTE_create, {onLeave: function (args) {send("X509_ATTRIBUTE_create");}});

var X509_ATTRIBUTE_create_by_NID = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_create_by_NID")
Interceptor.attach(X509_ATTRIBUTE_create_by_NID, {onLeave: function (args) {send("X509_ATTRIBUTE_create_by_NID");}});

var X509_ATTRIBUTE_create_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_create_by_OBJ")
Interceptor.attach(X509_ATTRIBUTE_create_by_OBJ, {onLeave: function (args) {send("X509_ATTRIBUTE_create_by_OBJ");}});

var X509_ATTRIBUTE_create_by_txt = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_create_by_txt")
Interceptor.attach(X509_ATTRIBUTE_create_by_txt, {onLeave: function (args) {send("X509_ATTRIBUTE_create_by_txt");}});

var X509_ATTRIBUTE_dup = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_dup")
Interceptor.attach(X509_ATTRIBUTE_dup, {onLeave: function (args) {send("X509_ATTRIBUTE_dup");}});

var X509_ATTRIBUTE_free = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_free")
Interceptor.attach(X509_ATTRIBUTE_free, {onLeave: function (args) {send("X509_ATTRIBUTE_free");}});

var X509_ATTRIBUTE_get0_data = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_get0_data")
Interceptor.attach(X509_ATTRIBUTE_get0_data, {onLeave: function (args) {send("X509_ATTRIBUTE_get0_data");}});

var X509_ATTRIBUTE_get0_object = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_get0_object")
Interceptor.attach(X509_ATTRIBUTE_get0_object, {onLeave: function (args) {send("X509_ATTRIBUTE_get0_object");}});

var X509_ATTRIBUTE_get0_type = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_get0_type")
Interceptor.attach(X509_ATTRIBUTE_get0_type, {onLeave: function (args) {send("X509_ATTRIBUTE_get0_type");}});

var X509_ATTRIBUTE_it = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_it")
Interceptor.attach(X509_ATTRIBUTE_it, {onLeave: function (args) {send("X509_ATTRIBUTE_it");}});

var X509_ATTRIBUTE_new = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_new")
Interceptor.attach(X509_ATTRIBUTE_new, {onLeave: function (args) {send("X509_ATTRIBUTE_new");}});

var X509_ATTRIBUTE_set1_data = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_set1_data")
Interceptor.attach(X509_ATTRIBUTE_set1_data, {onLeave: function (args) {send("X509_ATTRIBUTE_set1_data");}});

var X509_ATTRIBUTE_set1_object = Module.findExportByName("libcrypto.dll", "X509_ATTRIBUTE_set1_object")
Interceptor.attach(X509_ATTRIBUTE_set1_object, {onLeave: function (args) {send("X509_ATTRIBUTE_set1_object");}});

var X509_CERT_AUX_free = Module.findExportByName("libcrypto.dll", "X509_CERT_AUX_free")
Interceptor.attach(X509_CERT_AUX_free, {onLeave: function (args) {send("X509_CERT_AUX_free");}});

var X509_CERT_AUX_it = Module.findExportByName("libcrypto.dll", "X509_CERT_AUX_it")
Interceptor.attach(X509_CERT_AUX_it, {onLeave: function (args) {send("X509_CERT_AUX_it");}});

var X509_CERT_AUX_new = Module.findExportByName("libcrypto.dll", "X509_CERT_AUX_new")
Interceptor.attach(X509_CERT_AUX_new, {onLeave: function (args) {send("X509_CERT_AUX_new");}});

var X509_CERT_AUX_print = Module.findExportByName("libcrypto.dll", "X509_CERT_AUX_print")
Interceptor.attach(X509_CERT_AUX_print, {onLeave: function (args) {send("X509_CERT_AUX_print");}});

var X509_CERT_PAIR_free = Module.findExportByName("libcrypto.dll", "X509_CERT_PAIR_free")
Interceptor.attach(X509_CERT_PAIR_free, {onLeave: function (args) {send("X509_CERT_PAIR_free");}});

var X509_CERT_PAIR_it = Module.findExportByName("libcrypto.dll", "X509_CERT_PAIR_it")
Interceptor.attach(X509_CERT_PAIR_it, {onLeave: function (args) {send("X509_CERT_PAIR_it");}});

var X509_CERT_PAIR_new = Module.findExportByName("libcrypto.dll", "X509_CERT_PAIR_new")
Interceptor.attach(X509_CERT_PAIR_new, {onLeave: function (args) {send("X509_CERT_PAIR_new");}});

var X509_CINF_free = Module.findExportByName("libcrypto.dll", "X509_CINF_free")
Interceptor.attach(X509_CINF_free, {onLeave: function (args) {send("X509_CINF_free");}});

var X509_CINF_it = Module.findExportByName("libcrypto.dll", "X509_CINF_it")
Interceptor.attach(X509_CINF_it, {onLeave: function (args) {send("X509_CINF_it");}});

var X509_CINF_new = Module.findExportByName("libcrypto.dll", "X509_CINF_new")
Interceptor.attach(X509_CINF_new, {onLeave: function (args) {send("X509_CINF_new");}});

var X509_CRL_INFO_free = Module.findExportByName("libcrypto.dll", "X509_CRL_INFO_free")
Interceptor.attach(X509_CRL_INFO_free, {onLeave: function (args) {send("X509_CRL_INFO_free");}});

var X509_CRL_INFO_it = Module.findExportByName("libcrypto.dll", "X509_CRL_INFO_it")
Interceptor.attach(X509_CRL_INFO_it, {onLeave: function (args) {send("X509_CRL_INFO_it");}});

var X509_CRL_INFO_new = Module.findExportByName("libcrypto.dll", "X509_CRL_INFO_new")
Interceptor.attach(X509_CRL_INFO_new, {onLeave: function (args) {send("X509_CRL_INFO_new");}});

var X509_CRL_METHOD_free = Module.findExportByName("libcrypto.dll", "X509_CRL_METHOD_free")
Interceptor.attach(X509_CRL_METHOD_free, {onLeave: function (args) {send("X509_CRL_METHOD_free");}});

var X509_CRL_METHOD_new = Module.findExportByName("libcrypto.dll", "X509_CRL_METHOD_new")
Interceptor.attach(X509_CRL_METHOD_new, {onLeave: function (args) {send("X509_CRL_METHOD_new");}});

var X509_CRL_add0_revoked = Module.findExportByName("libcrypto.dll", "X509_CRL_add0_revoked")
Interceptor.attach(X509_CRL_add0_revoked, {onLeave: function (args) {send("X509_CRL_add0_revoked");}});

var X509_CRL_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "X509_CRL_add1_ext_i2d")
Interceptor.attach(X509_CRL_add1_ext_i2d, {onLeave: function (args) {send("X509_CRL_add1_ext_i2d");}});

var X509_CRL_add_ext = Module.findExportByName("libcrypto.dll", "X509_CRL_add_ext")
Interceptor.attach(X509_CRL_add_ext, {onLeave: function (args) {send("X509_CRL_add_ext");}});

var X509_CRL_cmp = Module.findExportByName("libcrypto.dll", "X509_CRL_cmp")
Interceptor.attach(X509_CRL_cmp, {onLeave: function (args) {send("X509_CRL_cmp");}});

var X509_CRL_delete_ext = Module.findExportByName("libcrypto.dll", "X509_CRL_delete_ext")
Interceptor.attach(X509_CRL_delete_ext, {onLeave: function (args) {send("X509_CRL_delete_ext");}});

var X509_CRL_digest = Module.findExportByName("libcrypto.dll", "X509_CRL_digest")
Interceptor.attach(X509_CRL_digest, {onLeave: function (args) {send("X509_CRL_digest");}});

var X509_CRL_dup = Module.findExportByName("libcrypto.dll", "X509_CRL_dup")
Interceptor.attach(X509_CRL_dup, {onLeave: function (args) {send("X509_CRL_dup");}});

var X509_CRL_free = Module.findExportByName("libcrypto.dll", "X509_CRL_free")
Interceptor.attach(X509_CRL_free, {onLeave: function (args) {send("X509_CRL_free");}});

var X509_CRL_get0_by_cert = Module.findExportByName("libcrypto.dll", "X509_CRL_get0_by_cert")
Interceptor.attach(X509_CRL_get0_by_cert, {onLeave: function (args) {send("X509_CRL_get0_by_cert");}});

var X509_CRL_get0_by_serial = Module.findExportByName("libcrypto.dll", "X509_CRL_get0_by_serial")
Interceptor.attach(X509_CRL_get0_by_serial, {onLeave: function (args) {send("X509_CRL_get0_by_serial");}});

var X509_CRL_get0_extensions = Module.findExportByName("libcrypto.dll", "X509_CRL_get0_extensions")
Interceptor.attach(X509_CRL_get0_extensions, {onLeave: function (args) {send("X509_CRL_get0_extensions");}});

var X509_CRL_get0_lastUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_get0_lastUpdate")
Interceptor.attach(X509_CRL_get0_lastUpdate, {onLeave: function (args) {send("X509_CRL_get0_lastUpdate");}});

var X509_CRL_get0_nextUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_get0_nextUpdate")
Interceptor.attach(X509_CRL_get0_nextUpdate, {onLeave: function (args) {send("X509_CRL_get0_nextUpdate");}});

var X509_CRL_get0_signature = Module.findExportByName("libcrypto.dll", "X509_CRL_get0_signature")
Interceptor.attach(X509_CRL_get0_signature, {onLeave: function (args) {send("X509_CRL_get0_signature");}});

var X509_CRL_get_REVOKED = Module.findExportByName("libcrypto.dll", "X509_CRL_get_REVOKED")
Interceptor.attach(X509_CRL_get_REVOKED, {onLeave: function (args) {send("X509_CRL_get_REVOKED");}});

var X509_CRL_get_ext = Module.findExportByName("libcrypto.dll", "X509_CRL_get_ext")
Interceptor.attach(X509_CRL_get_ext, {onLeave: function (args) {send("X509_CRL_get_ext");}});

var X509_CRL_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "X509_CRL_get_ext_by_NID")
Interceptor.attach(X509_CRL_get_ext_by_NID, {onLeave: function (args) {send("X509_CRL_get_ext_by_NID");}});

var X509_CRL_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_CRL_get_ext_by_OBJ")
Interceptor.attach(X509_CRL_get_ext_by_OBJ, {onLeave: function (args) {send("X509_CRL_get_ext_by_OBJ");}});

var X509_CRL_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "X509_CRL_get_ext_by_critical")
Interceptor.attach(X509_CRL_get_ext_by_critical, {onLeave: function (args) {send("X509_CRL_get_ext_by_critical");}});

var X509_CRL_get_ext_count = Module.findExportByName("libcrypto.dll", "X509_CRL_get_ext_count")
Interceptor.attach(X509_CRL_get_ext_count, {onLeave: function (args) {send("X509_CRL_get_ext_count");}});

var X509_CRL_get_ext_d2i = Module.findExportByName("libcrypto.dll", "X509_CRL_get_ext_d2i")
Interceptor.attach(X509_CRL_get_ext_d2i, {onLeave: function (args) {send("X509_CRL_get_ext_d2i");}});

var X509_CRL_get_issuer = Module.findExportByName("libcrypto.dll", "X509_CRL_get_issuer")
Interceptor.attach(X509_CRL_get_issuer, {onLeave: function (args) {send("X509_CRL_get_issuer");}});

var X509_CRL_get_lastUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_get_lastUpdate")
Interceptor.attach(X509_CRL_get_lastUpdate, {onLeave: function (args) {send("X509_CRL_get_lastUpdate");}});

var X509_CRL_get_meth_data = Module.findExportByName("libcrypto.dll", "X509_CRL_get_meth_data")
Interceptor.attach(X509_CRL_get_meth_data, {onLeave: function (args) {send("X509_CRL_get_meth_data");}});

var X509_CRL_get_nextUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_get_nextUpdate")
Interceptor.attach(X509_CRL_get_nextUpdate, {onLeave: function (args) {send("X509_CRL_get_nextUpdate");}});

var X509_CRL_get_signature_nid = Module.findExportByName("libcrypto.dll", "X509_CRL_get_signature_nid")
Interceptor.attach(X509_CRL_get_signature_nid, {onLeave: function (args) {send("X509_CRL_get_signature_nid");}});

var X509_CRL_get_version = Module.findExportByName("libcrypto.dll", "X509_CRL_get_version")
Interceptor.attach(X509_CRL_get_version, {onLeave: function (args) {send("X509_CRL_get_version");}});

var X509_CRL_it = Module.findExportByName("libcrypto.dll", "X509_CRL_it")
Interceptor.attach(X509_CRL_it, {onLeave: function (args) {send("X509_CRL_it");}});

var X509_CRL_match = Module.findExportByName("libcrypto.dll", "X509_CRL_match")
Interceptor.attach(X509_CRL_match, {onLeave: function (args) {send("X509_CRL_match");}});

var X509_CRL_new = Module.findExportByName("libcrypto.dll", "X509_CRL_new")
Interceptor.attach(X509_CRL_new, {onLeave: function (args) {send("X509_CRL_new");}});

var X509_CRL_print = Module.findExportByName("libcrypto.dll", "X509_CRL_print")
Interceptor.attach(X509_CRL_print, {onLeave: function (args) {send("X509_CRL_print");}});

var X509_CRL_print_fp = Module.findExportByName("libcrypto.dll", "X509_CRL_print_fp")
Interceptor.attach(X509_CRL_print_fp, {onLeave: function (args) {send("X509_CRL_print_fp");}});

var X509_CRL_set1_lastUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_set1_lastUpdate")
Interceptor.attach(X509_CRL_set1_lastUpdate, {onLeave: function (args) {send("X509_CRL_set1_lastUpdate");}});

var X509_CRL_set1_nextUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_set1_nextUpdate")
Interceptor.attach(X509_CRL_set1_nextUpdate, {onLeave: function (args) {send("X509_CRL_set1_nextUpdate");}});

var X509_CRL_set_default_method = Module.findExportByName("libcrypto.dll", "X509_CRL_set_default_method")
Interceptor.attach(X509_CRL_set_default_method, {onLeave: function (args) {send("X509_CRL_set_default_method");}});

var X509_CRL_set_issuer_name = Module.findExportByName("libcrypto.dll", "X509_CRL_set_issuer_name")
Interceptor.attach(X509_CRL_set_issuer_name, {onLeave: function (args) {send("X509_CRL_set_issuer_name");}});

var X509_CRL_set_lastUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_set_lastUpdate")
Interceptor.attach(X509_CRL_set_lastUpdate, {onLeave: function (args) {send("X509_CRL_set_lastUpdate");}});

var X509_CRL_set_meth_data = Module.findExportByName("libcrypto.dll", "X509_CRL_set_meth_data")
Interceptor.attach(X509_CRL_set_meth_data, {onLeave: function (args) {send("X509_CRL_set_meth_data");}});

var X509_CRL_set_nextUpdate = Module.findExportByName("libcrypto.dll", "X509_CRL_set_nextUpdate")
Interceptor.attach(X509_CRL_set_nextUpdate, {onLeave: function (args) {send("X509_CRL_set_nextUpdate");}});

var X509_CRL_set_version = Module.findExportByName("libcrypto.dll", "X509_CRL_set_version")
Interceptor.attach(X509_CRL_set_version, {onLeave: function (args) {send("X509_CRL_set_version");}});

var X509_CRL_sign = Module.findExportByName("libcrypto.dll", "X509_CRL_sign")
Interceptor.attach(X509_CRL_sign, {onLeave: function (args) {send("X509_CRL_sign");}});

var X509_CRL_sign_ctx = Module.findExportByName("libcrypto.dll", "X509_CRL_sign_ctx")
Interceptor.attach(X509_CRL_sign_ctx, {onLeave: function (args) {send("X509_CRL_sign_ctx");}});

var X509_CRL_sort = Module.findExportByName("libcrypto.dll", "X509_CRL_sort")
Interceptor.attach(X509_CRL_sort, {onLeave: function (args) {send("X509_CRL_sort");}});

var X509_CRL_up_ref = Module.findExportByName("libcrypto.dll", "X509_CRL_up_ref")
Interceptor.attach(X509_CRL_up_ref, {onLeave: function (args) {send("X509_CRL_up_ref");}});

var X509_CRL_verify = Module.findExportByName("libcrypto.dll", "X509_CRL_verify")
Interceptor.attach(X509_CRL_verify, {onLeave: function (args) {send("X509_CRL_verify");}});

var X509_EXTENSIONS_it = Module.findExportByName("libcrypto.dll", "X509_EXTENSIONS_it")
Interceptor.attach(X509_EXTENSIONS_it, {onLeave: function (args) {send("X509_EXTENSIONS_it");}});

var X509_EXTENSION_create_by_NID = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_create_by_NID")
Interceptor.attach(X509_EXTENSION_create_by_NID, {onLeave: function (args) {send("X509_EXTENSION_create_by_NID");}});

var X509_EXTENSION_create_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_create_by_OBJ")
Interceptor.attach(X509_EXTENSION_create_by_OBJ, {onLeave: function (args) {send("X509_EXTENSION_create_by_OBJ");}});

var X509_EXTENSION_dup = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_dup")
Interceptor.attach(X509_EXTENSION_dup, {onLeave: function (args) {send("X509_EXTENSION_dup");}});

var X509_EXTENSION_free = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_free")
Interceptor.attach(X509_EXTENSION_free, {onLeave: function (args) {send("X509_EXTENSION_free");}});

var X509_EXTENSION_get_critical = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_get_critical")
Interceptor.attach(X509_EXTENSION_get_critical, {onLeave: function (args) {send("X509_EXTENSION_get_critical");}});

var X509_EXTENSION_get_data = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_get_data")
Interceptor.attach(X509_EXTENSION_get_data, {onLeave: function (args) {send("X509_EXTENSION_get_data");}});

var X509_EXTENSION_get_object = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_get_object")
Interceptor.attach(X509_EXTENSION_get_object, {onLeave: function (args) {send("X509_EXTENSION_get_object");}});

var X509_EXTENSION_it = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_it")
Interceptor.attach(X509_EXTENSION_it, {onLeave: function (args) {send("X509_EXTENSION_it");}});

var X509_EXTENSION_new = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_new")
Interceptor.attach(X509_EXTENSION_new, {onLeave: function (args) {send("X509_EXTENSION_new");}});

var X509_EXTENSION_set_critical = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_set_critical")
Interceptor.attach(X509_EXTENSION_set_critical, {onLeave: function (args) {send("X509_EXTENSION_set_critical");}});

var X509_EXTENSION_set_data = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_set_data")
Interceptor.attach(X509_EXTENSION_set_data, {onLeave: function (args) {send("X509_EXTENSION_set_data");}});

var X509_EXTENSION_set_object = Module.findExportByName("libcrypto.dll", "X509_EXTENSION_set_object")
Interceptor.attach(X509_EXTENSION_set_object, {onLeave: function (args) {send("X509_EXTENSION_set_object");}});

var X509_INFO_free = Module.findExportByName("libcrypto.dll", "X509_INFO_free")
Interceptor.attach(X509_INFO_free, {onLeave: function (args) {send("X509_INFO_free");}});

var X509_INFO_new = Module.findExportByName("libcrypto.dll", "X509_INFO_new")
Interceptor.attach(X509_INFO_new, {onLeave: function (args) {send("X509_INFO_new");}});

var X509_LOOKUP_by_alias = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_by_alias")
Interceptor.attach(X509_LOOKUP_by_alias, {onLeave: function (args) {send("X509_LOOKUP_by_alias");}});

var X509_LOOKUP_by_fingerprint = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_by_fingerprint")
Interceptor.attach(X509_LOOKUP_by_fingerprint, {onLeave: function (args) {send("X509_LOOKUP_by_fingerprint");}});

var X509_LOOKUP_by_issuer_serial = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_by_issuer_serial")
Interceptor.attach(X509_LOOKUP_by_issuer_serial, {onLeave: function (args) {send("X509_LOOKUP_by_issuer_serial");}});

var X509_LOOKUP_by_subject = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_by_subject")
Interceptor.attach(X509_LOOKUP_by_subject, {onLeave: function (args) {send("X509_LOOKUP_by_subject");}});

var X509_LOOKUP_ctrl = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_ctrl")
Interceptor.attach(X509_LOOKUP_ctrl, {onLeave: function (args) {send("X509_LOOKUP_ctrl");}});

var X509_LOOKUP_file = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_file")
Interceptor.attach(X509_LOOKUP_file, {onLeave: function (args) {send("X509_LOOKUP_file");}});

var X509_LOOKUP_free = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_free")
Interceptor.attach(X509_LOOKUP_free, {onLeave: function (args) {send("X509_LOOKUP_free");}});

var X509_LOOKUP_hash_dir = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_hash_dir")
Interceptor.attach(X509_LOOKUP_hash_dir, {onLeave: function (args) {send("X509_LOOKUP_hash_dir");}});

var X509_LOOKUP_init = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_init")
Interceptor.attach(X509_LOOKUP_init, {onLeave: function (args) {send("X509_LOOKUP_init");}});

var X509_LOOKUP_mem = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_mem")
Interceptor.attach(X509_LOOKUP_mem, {onLeave: function (args) {send("X509_LOOKUP_mem");}});

var X509_LOOKUP_new = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_new")
Interceptor.attach(X509_LOOKUP_new, {onLeave: function (args) {send("X509_LOOKUP_new");}});

var X509_LOOKUP_shutdown = Module.findExportByName("libcrypto.dll", "X509_LOOKUP_shutdown")
Interceptor.attach(X509_LOOKUP_shutdown, {onLeave: function (args) {send("X509_LOOKUP_shutdown");}});

var X509_NAME_ENTRIES_it = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRIES_it")
Interceptor.attach(X509_NAME_ENTRIES_it, {onLeave: function (args) {send("X509_NAME_ENTRIES_it");}});

var X509_NAME_ENTRY_create_by_NID = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_create_by_NID")
Interceptor.attach(X509_NAME_ENTRY_create_by_NID, {onLeave: function (args) {send("X509_NAME_ENTRY_create_by_NID");}});

var X509_NAME_ENTRY_create_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_create_by_OBJ")
Interceptor.attach(X509_NAME_ENTRY_create_by_OBJ, {onLeave: function (args) {send("X509_NAME_ENTRY_create_by_OBJ");}});

var X509_NAME_ENTRY_create_by_txt = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_create_by_txt")
Interceptor.attach(X509_NAME_ENTRY_create_by_txt, {onLeave: function (args) {send("X509_NAME_ENTRY_create_by_txt");}});

var X509_NAME_ENTRY_dup = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_dup")
Interceptor.attach(X509_NAME_ENTRY_dup, {onLeave: function (args) {send("X509_NAME_ENTRY_dup");}});

var X509_NAME_ENTRY_free = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_free")
Interceptor.attach(X509_NAME_ENTRY_free, {onLeave: function (args) {send("X509_NAME_ENTRY_free");}});

var X509_NAME_ENTRY_get_data = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_get_data")
Interceptor.attach(X509_NAME_ENTRY_get_data, {onLeave: function (args) {send("X509_NAME_ENTRY_get_data");}});

var X509_NAME_ENTRY_get_object = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_get_object")
Interceptor.attach(X509_NAME_ENTRY_get_object, {onLeave: function (args) {send("X509_NAME_ENTRY_get_object");}});

var X509_NAME_ENTRY_it = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_it")
Interceptor.attach(X509_NAME_ENTRY_it, {onLeave: function (args) {send("X509_NAME_ENTRY_it");}});

var X509_NAME_ENTRY_new = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_new")
Interceptor.attach(X509_NAME_ENTRY_new, {onLeave: function (args) {send("X509_NAME_ENTRY_new");}});

var X509_NAME_ENTRY_set = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_set")
Interceptor.attach(X509_NAME_ENTRY_set, {onLeave: function (args) {send("X509_NAME_ENTRY_set");}});

var X509_NAME_ENTRY_set_data = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_set_data")
Interceptor.attach(X509_NAME_ENTRY_set_data, {onLeave: function (args) {send("X509_NAME_ENTRY_set_data");}});

var X509_NAME_ENTRY_set_object = Module.findExportByName("libcrypto.dll", "X509_NAME_ENTRY_set_object")
Interceptor.attach(X509_NAME_ENTRY_set_object, {onLeave: function (args) {send("X509_NAME_ENTRY_set_object");}});

var X509_NAME_INTERNAL_it = Module.findExportByName("libcrypto.dll", "X509_NAME_INTERNAL_it")
Interceptor.attach(X509_NAME_INTERNAL_it, {onLeave: function (args) {send("X509_NAME_INTERNAL_it");}});

var X509_NAME_add_entry = Module.findExportByName("libcrypto.dll", "X509_NAME_add_entry")
Interceptor.attach(X509_NAME_add_entry, {onLeave: function (args) {send("X509_NAME_add_entry");}});

var X509_NAME_add_entry_by_NID = Module.findExportByName("libcrypto.dll", "X509_NAME_add_entry_by_NID")
Interceptor.attach(X509_NAME_add_entry_by_NID, {onLeave: function (args) {send("X509_NAME_add_entry_by_NID");}});

var X509_NAME_add_entry_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_NAME_add_entry_by_OBJ")
Interceptor.attach(X509_NAME_add_entry_by_OBJ, {onLeave: function (args) {send("X509_NAME_add_entry_by_OBJ");}});

var X509_NAME_add_entry_by_txt = Module.findExportByName("libcrypto.dll", "X509_NAME_add_entry_by_txt")
Interceptor.attach(X509_NAME_add_entry_by_txt, {onLeave: function (args) {send("X509_NAME_add_entry_by_txt");}});

var X509_NAME_cmp = Module.findExportByName("libcrypto.dll", "X509_NAME_cmp")
Interceptor.attach(X509_NAME_cmp, {onLeave: function (args) {send("X509_NAME_cmp");}});

var X509_NAME_delete_entry = Module.findExportByName("libcrypto.dll", "X509_NAME_delete_entry")
Interceptor.attach(X509_NAME_delete_entry, {onLeave: function (args) {send("X509_NAME_delete_entry");}});

var X509_NAME_digest = Module.findExportByName("libcrypto.dll", "X509_NAME_digest")
Interceptor.attach(X509_NAME_digest, {onLeave: function (args) {send("X509_NAME_digest");}});

var X509_NAME_dup = Module.findExportByName("libcrypto.dll", "X509_NAME_dup")
Interceptor.attach(X509_NAME_dup, {onLeave: function (args) {send("X509_NAME_dup");}});

var X509_NAME_entry_count = Module.findExportByName("libcrypto.dll", "X509_NAME_entry_count")
Interceptor.attach(X509_NAME_entry_count, {onLeave: function (args) {send("X509_NAME_entry_count");}});

var X509_NAME_free = Module.findExportByName("libcrypto.dll", "X509_NAME_free")
Interceptor.attach(X509_NAME_free, {onLeave: function (args) {send("X509_NAME_free");}});

var X509_NAME_get0_der = Module.findExportByName("libcrypto.dll", "X509_NAME_get0_der")
Interceptor.attach(X509_NAME_get0_der, {onLeave: function (args) {send("X509_NAME_get0_der");}});

var X509_NAME_get_entry = Module.findExportByName("libcrypto.dll", "X509_NAME_get_entry")
Interceptor.attach(X509_NAME_get_entry, {onLeave: function (args) {send("X509_NAME_get_entry");}});

var X509_NAME_get_index_by_NID = Module.findExportByName("libcrypto.dll", "X509_NAME_get_index_by_NID")
Interceptor.attach(X509_NAME_get_index_by_NID, {onLeave: function (args) {send("X509_NAME_get_index_by_NID");}});

var X509_NAME_get_index_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_NAME_get_index_by_OBJ")
Interceptor.attach(X509_NAME_get_index_by_OBJ, {onLeave: function (args) {send("X509_NAME_get_index_by_OBJ");}});

var X509_NAME_get_text_by_NID = Module.findExportByName("libcrypto.dll", "X509_NAME_get_text_by_NID")
Interceptor.attach(X509_NAME_get_text_by_NID, {onLeave: function (args) {send("X509_NAME_get_text_by_NID");}});

var X509_NAME_get_text_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_NAME_get_text_by_OBJ")
Interceptor.attach(X509_NAME_get_text_by_OBJ, {onLeave: function (args) {send("X509_NAME_get_text_by_OBJ");}});

var X509_NAME_hash = Module.findExportByName("libcrypto.dll", "X509_NAME_hash")
Interceptor.attach(X509_NAME_hash, {onLeave: function (args) {send("X509_NAME_hash");}});

var X509_NAME_hash_old = Module.findExportByName("libcrypto.dll", "X509_NAME_hash_old")
Interceptor.attach(X509_NAME_hash_old, {onLeave: function (args) {send("X509_NAME_hash_old");}});

var X509_NAME_it = Module.findExportByName("libcrypto.dll", "X509_NAME_it")
Interceptor.attach(X509_NAME_it, {onLeave: function (args) {send("X509_NAME_it");}});

var X509_NAME_new = Module.findExportByName("libcrypto.dll", "X509_NAME_new")
Interceptor.attach(X509_NAME_new, {onLeave: function (args) {send("X509_NAME_new");}});

var X509_NAME_oneline = Module.findExportByName("libcrypto.dll", "X509_NAME_oneline")
Interceptor.attach(X509_NAME_oneline, {onLeave: function (args) {send("X509_NAME_oneline");}});

var X509_NAME_print = Module.findExportByName("libcrypto.dll", "X509_NAME_print")
Interceptor.attach(X509_NAME_print, {onLeave: function (args) {send("X509_NAME_print");}});

var X509_NAME_print_ex = Module.findExportByName("libcrypto.dll", "X509_NAME_print_ex")
Interceptor.attach(X509_NAME_print_ex, {onLeave: function (args) {send("X509_NAME_print_ex");}});

var X509_NAME_print_ex_fp = Module.findExportByName("libcrypto.dll", "X509_NAME_print_ex_fp")
Interceptor.attach(X509_NAME_print_ex_fp, {onLeave: function (args) {send("X509_NAME_print_ex_fp");}});

var X509_NAME_set = Module.findExportByName("libcrypto.dll", "X509_NAME_set")
Interceptor.attach(X509_NAME_set, {onLeave: function (args) {send("X509_NAME_set");}});

var X509_OBJECT_free_contents = Module.findExportByName("libcrypto.dll", "X509_OBJECT_free_contents")
Interceptor.attach(X509_OBJECT_free_contents, {onLeave: function (args) {send("X509_OBJECT_free_contents");}});

var X509_OBJECT_get0_X509 = Module.findExportByName("libcrypto.dll", "X509_OBJECT_get0_X509")
Interceptor.attach(X509_OBJECT_get0_X509, {onLeave: function (args) {send("X509_OBJECT_get0_X509");}});

var X509_OBJECT_get0_X509_CRL = Module.findExportByName("libcrypto.dll", "X509_OBJECT_get0_X509_CRL")
Interceptor.attach(X509_OBJECT_get0_X509_CRL, {onLeave: function (args) {send("X509_OBJECT_get0_X509_CRL");}});

var X509_OBJECT_get_type = Module.findExportByName("libcrypto.dll", "X509_OBJECT_get_type")
Interceptor.attach(X509_OBJECT_get_type, {onLeave: function (args) {send("X509_OBJECT_get_type");}});

var X509_OBJECT_idx_by_subject = Module.findExportByName("libcrypto.dll", "X509_OBJECT_idx_by_subject")
Interceptor.attach(X509_OBJECT_idx_by_subject, {onLeave: function (args) {send("X509_OBJECT_idx_by_subject");}});

var X509_OBJECT_retrieve_by_subject = Module.findExportByName("libcrypto.dll", "X509_OBJECT_retrieve_by_subject")
Interceptor.attach(X509_OBJECT_retrieve_by_subject, {onLeave: function (args) {send("X509_OBJECT_retrieve_by_subject");}});

var X509_OBJECT_retrieve_match = Module.findExportByName("libcrypto.dll", "X509_OBJECT_retrieve_match")
Interceptor.attach(X509_OBJECT_retrieve_match, {onLeave: function (args) {send("X509_OBJECT_retrieve_match");}});

var X509_OBJECT_up_ref_count = Module.findExportByName("libcrypto.dll", "X509_OBJECT_up_ref_count")
Interceptor.attach(X509_OBJECT_up_ref_count, {onLeave: function (args) {send("X509_OBJECT_up_ref_count");}});

var X509_PKEY_free = Module.findExportByName("libcrypto.dll", "X509_PKEY_free")
Interceptor.attach(X509_PKEY_free, {onLeave: function (args) {send("X509_PKEY_free");}});

var X509_PKEY_new = Module.findExportByName("libcrypto.dll", "X509_PKEY_new")
Interceptor.attach(X509_PKEY_new, {onLeave: function (args) {send("X509_PKEY_new");}});

var X509_POLICY_NODE_print = Module.findExportByName("libcrypto.dll", "X509_POLICY_NODE_print")
Interceptor.attach(X509_POLICY_NODE_print, {onLeave: function (args) {send("X509_POLICY_NODE_print");}});

var X509_PUBKEY_free = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_free")
Interceptor.attach(X509_PUBKEY_free, {onLeave: function (args) {send("X509_PUBKEY_free");}});

var X509_PUBKEY_get = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_get")
Interceptor.attach(X509_PUBKEY_get, {onLeave: function (args) {send("X509_PUBKEY_get");}});

var X509_PUBKEY_get0 = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_get0")
Interceptor.attach(X509_PUBKEY_get0, {onLeave: function (args) {send("X509_PUBKEY_get0");}});

var X509_PUBKEY_get0_param = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_get0_param")
Interceptor.attach(X509_PUBKEY_get0_param, {onLeave: function (args) {send("X509_PUBKEY_get0_param");}});

var X509_PUBKEY_it = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_it")
Interceptor.attach(X509_PUBKEY_it, {onLeave: function (args) {send("X509_PUBKEY_it");}});

var X509_PUBKEY_new = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_new")
Interceptor.attach(X509_PUBKEY_new, {onLeave: function (args) {send("X509_PUBKEY_new");}});

var X509_PUBKEY_set = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_set")
Interceptor.attach(X509_PUBKEY_set, {onLeave: function (args) {send("X509_PUBKEY_set");}});

var X509_PUBKEY_set0_param = Module.findExportByName("libcrypto.dll", "X509_PUBKEY_set0_param")
Interceptor.attach(X509_PUBKEY_set0_param, {onLeave: function (args) {send("X509_PUBKEY_set0_param");}});

var X509_PURPOSE_add = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_add")
Interceptor.attach(X509_PURPOSE_add, {onLeave: function (args) {send("X509_PURPOSE_add");}});

var X509_PURPOSE_cleanup = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_cleanup")
Interceptor.attach(X509_PURPOSE_cleanup, {onLeave: function (args) {send("X509_PURPOSE_cleanup");}});

var X509_PURPOSE_get0 = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get0")
Interceptor.attach(X509_PURPOSE_get0, {onLeave: function (args) {send("X509_PURPOSE_get0");}});

var X509_PURPOSE_get0_name = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get0_name")
Interceptor.attach(X509_PURPOSE_get0_name, {onLeave: function (args) {send("X509_PURPOSE_get0_name");}});

var X509_PURPOSE_get0_sname = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get0_sname")
Interceptor.attach(X509_PURPOSE_get0_sname, {onLeave: function (args) {send("X509_PURPOSE_get0_sname");}});

var X509_PURPOSE_get_by_id = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get_by_id")
Interceptor.attach(X509_PURPOSE_get_by_id, {onLeave: function (args) {send("X509_PURPOSE_get_by_id");}});

var X509_PURPOSE_get_by_sname = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get_by_sname")
Interceptor.attach(X509_PURPOSE_get_by_sname, {onLeave: function (args) {send("X509_PURPOSE_get_by_sname");}});

var X509_PURPOSE_get_count = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get_count")
Interceptor.attach(X509_PURPOSE_get_count, {onLeave: function (args) {send("X509_PURPOSE_get_count");}});

var X509_PURPOSE_get_id = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get_id")
Interceptor.attach(X509_PURPOSE_get_id, {onLeave: function (args) {send("X509_PURPOSE_get_id");}});

var X509_PURPOSE_get_trust = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_get_trust")
Interceptor.attach(X509_PURPOSE_get_trust, {onLeave: function (args) {send("X509_PURPOSE_get_trust");}});

var X509_PURPOSE_set = Module.findExportByName("libcrypto.dll", "X509_PURPOSE_set")
Interceptor.attach(X509_PURPOSE_set, {onLeave: function (args) {send("X509_PURPOSE_set");}});

var X509_REQ_INFO_free = Module.findExportByName("libcrypto.dll", "X509_REQ_INFO_free")
Interceptor.attach(X509_REQ_INFO_free, {onLeave: function (args) {send("X509_REQ_INFO_free");}});

var X509_REQ_INFO_it = Module.findExportByName("libcrypto.dll", "X509_REQ_INFO_it")
Interceptor.attach(X509_REQ_INFO_it, {onLeave: function (args) {send("X509_REQ_INFO_it");}});

var X509_REQ_INFO_new = Module.findExportByName("libcrypto.dll", "X509_REQ_INFO_new")
Interceptor.attach(X509_REQ_INFO_new, {onLeave: function (args) {send("X509_REQ_INFO_new");}});

var X509_REQ_add1_attr = Module.findExportByName("libcrypto.dll", "X509_REQ_add1_attr")
Interceptor.attach(X509_REQ_add1_attr, {onLeave: function (args) {send("X509_REQ_add1_attr");}});

var X509_REQ_add1_attr_by_NID = Module.findExportByName("libcrypto.dll", "X509_REQ_add1_attr_by_NID")
Interceptor.attach(X509_REQ_add1_attr_by_NID, {onLeave: function (args) {send("X509_REQ_add1_attr_by_NID");}});

var X509_REQ_add1_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_REQ_add1_attr_by_OBJ")
Interceptor.attach(X509_REQ_add1_attr_by_OBJ, {onLeave: function (args) {send("X509_REQ_add1_attr_by_OBJ");}});

var X509_REQ_add1_attr_by_txt = Module.findExportByName("libcrypto.dll", "X509_REQ_add1_attr_by_txt")
Interceptor.attach(X509_REQ_add1_attr_by_txt, {onLeave: function (args) {send("X509_REQ_add1_attr_by_txt");}});

var X509_REQ_add_extensions = Module.findExportByName("libcrypto.dll", "X509_REQ_add_extensions")
Interceptor.attach(X509_REQ_add_extensions, {onLeave: function (args) {send("X509_REQ_add_extensions");}});

var X509_REQ_add_extensions_nid = Module.findExportByName("libcrypto.dll", "X509_REQ_add_extensions_nid")
Interceptor.attach(X509_REQ_add_extensions_nid, {onLeave: function (args) {send("X509_REQ_add_extensions_nid");}});

var X509_REQ_check_private_key = Module.findExportByName("libcrypto.dll", "X509_REQ_check_private_key")
Interceptor.attach(X509_REQ_check_private_key, {onLeave: function (args) {send("X509_REQ_check_private_key");}});

var X509_REQ_delete_attr = Module.findExportByName("libcrypto.dll", "X509_REQ_delete_attr")
Interceptor.attach(X509_REQ_delete_attr, {onLeave: function (args) {send("X509_REQ_delete_attr");}});

var X509_REQ_digest = Module.findExportByName("libcrypto.dll", "X509_REQ_digest")
Interceptor.attach(X509_REQ_digest, {onLeave: function (args) {send("X509_REQ_digest");}});

var X509_REQ_dup = Module.findExportByName("libcrypto.dll", "X509_REQ_dup")
Interceptor.attach(X509_REQ_dup, {onLeave: function (args) {send("X509_REQ_dup");}});

var X509_REQ_extension_nid = Module.findExportByName("libcrypto.dll", "X509_REQ_extension_nid")
Interceptor.attach(X509_REQ_extension_nid, {onLeave: function (args) {send("X509_REQ_extension_nid");}});

var X509_REQ_free = Module.findExportByName("libcrypto.dll", "X509_REQ_free")
Interceptor.attach(X509_REQ_free, {onLeave: function (args) {send("X509_REQ_free");}});

var X509_REQ_get0_signature = Module.findExportByName("libcrypto.dll", "X509_REQ_get0_signature")
Interceptor.attach(X509_REQ_get0_signature, {onLeave: function (args) {send("X509_REQ_get0_signature");}});

var X509_REQ_get1_email = Module.findExportByName("libcrypto.dll", "X509_REQ_get1_email")
Interceptor.attach(X509_REQ_get1_email, {onLeave: function (args) {send("X509_REQ_get1_email");}});

var X509_REQ_get_attr = Module.findExportByName("libcrypto.dll", "X509_REQ_get_attr")
Interceptor.attach(X509_REQ_get_attr, {onLeave: function (args) {send("X509_REQ_get_attr");}});

var X509_REQ_get_attr_by_NID = Module.findExportByName("libcrypto.dll", "X509_REQ_get_attr_by_NID")
Interceptor.attach(X509_REQ_get_attr_by_NID, {onLeave: function (args) {send("X509_REQ_get_attr_by_NID");}});

var X509_REQ_get_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_REQ_get_attr_by_OBJ")
Interceptor.attach(X509_REQ_get_attr_by_OBJ, {onLeave: function (args) {send("X509_REQ_get_attr_by_OBJ");}});

var X509_REQ_get_attr_count = Module.findExportByName("libcrypto.dll", "X509_REQ_get_attr_count")
Interceptor.attach(X509_REQ_get_attr_count, {onLeave: function (args) {send("X509_REQ_get_attr_count");}});

var X509_REQ_get_extension_nids = Module.findExportByName("libcrypto.dll", "X509_REQ_get_extension_nids")
Interceptor.attach(X509_REQ_get_extension_nids, {onLeave: function (args) {send("X509_REQ_get_extension_nids");}});

var X509_REQ_get_extensions = Module.findExportByName("libcrypto.dll", "X509_REQ_get_extensions")
Interceptor.attach(X509_REQ_get_extensions, {onLeave: function (args) {send("X509_REQ_get_extensions");}});

var X509_REQ_get_pubkey = Module.findExportByName("libcrypto.dll", "X509_REQ_get_pubkey")
Interceptor.attach(X509_REQ_get_pubkey, {onLeave: function (args) {send("X509_REQ_get_pubkey");}});

var X509_REQ_get_signature_nid = Module.findExportByName("libcrypto.dll", "X509_REQ_get_signature_nid")
Interceptor.attach(X509_REQ_get_signature_nid, {onLeave: function (args) {send("X509_REQ_get_signature_nid");}});

var X509_REQ_get_subject_name = Module.findExportByName("libcrypto.dll", "X509_REQ_get_subject_name")
Interceptor.attach(X509_REQ_get_subject_name, {onLeave: function (args) {send("X509_REQ_get_subject_name");}});

var X509_REQ_get_version = Module.findExportByName("libcrypto.dll", "X509_REQ_get_version")
Interceptor.attach(X509_REQ_get_version, {onLeave: function (args) {send("X509_REQ_get_version");}});

var X509_REQ_it = Module.findExportByName("libcrypto.dll", "X509_REQ_it")
Interceptor.attach(X509_REQ_it, {onLeave: function (args) {send("X509_REQ_it");}});

var X509_REQ_new = Module.findExportByName("libcrypto.dll", "X509_REQ_new")
Interceptor.attach(X509_REQ_new, {onLeave: function (args) {send("X509_REQ_new");}});

var X509_REQ_print = Module.findExportByName("libcrypto.dll", "X509_REQ_print")
Interceptor.attach(X509_REQ_print, {onLeave: function (args) {send("X509_REQ_print");}});

var X509_REQ_print_ex = Module.findExportByName("libcrypto.dll", "X509_REQ_print_ex")
Interceptor.attach(X509_REQ_print_ex, {onLeave: function (args) {send("X509_REQ_print_ex");}});

var X509_REQ_print_fp = Module.findExportByName("libcrypto.dll", "X509_REQ_print_fp")
Interceptor.attach(X509_REQ_print_fp, {onLeave: function (args) {send("X509_REQ_print_fp");}});

var X509_REQ_set_extension_nids = Module.findExportByName("libcrypto.dll", "X509_REQ_set_extension_nids")
Interceptor.attach(X509_REQ_set_extension_nids, {onLeave: function (args) {send("X509_REQ_set_extension_nids");}});

var X509_REQ_set_pubkey = Module.findExportByName("libcrypto.dll", "X509_REQ_set_pubkey")
Interceptor.attach(X509_REQ_set_pubkey, {onLeave: function (args) {send("X509_REQ_set_pubkey");}});

var X509_REQ_set_subject_name = Module.findExportByName("libcrypto.dll", "X509_REQ_set_subject_name")
Interceptor.attach(X509_REQ_set_subject_name, {onLeave: function (args) {send("X509_REQ_set_subject_name");}});

var X509_REQ_set_version = Module.findExportByName("libcrypto.dll", "X509_REQ_set_version")
Interceptor.attach(X509_REQ_set_version, {onLeave: function (args) {send("X509_REQ_set_version");}});

var X509_REQ_sign = Module.findExportByName("libcrypto.dll", "X509_REQ_sign")
Interceptor.attach(X509_REQ_sign, {onLeave: function (args) {send("X509_REQ_sign");}});

var X509_REQ_sign_ctx = Module.findExportByName("libcrypto.dll", "X509_REQ_sign_ctx")
Interceptor.attach(X509_REQ_sign_ctx, {onLeave: function (args) {send("X509_REQ_sign_ctx");}});

var X509_REQ_to_X509 = Module.findExportByName("libcrypto.dll", "X509_REQ_to_X509")
Interceptor.attach(X509_REQ_to_X509, {onLeave: function (args) {send("X509_REQ_to_X509");}});

var X509_REQ_verify = Module.findExportByName("libcrypto.dll", "X509_REQ_verify")
Interceptor.attach(X509_REQ_verify, {onLeave: function (args) {send("X509_REQ_verify");}});

var X509_REVOKED_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "X509_REVOKED_add1_ext_i2d")
Interceptor.attach(X509_REVOKED_add1_ext_i2d, {onLeave: function (args) {send("X509_REVOKED_add1_ext_i2d");}});

var X509_REVOKED_add_ext = Module.findExportByName("libcrypto.dll", "X509_REVOKED_add_ext")
Interceptor.attach(X509_REVOKED_add_ext, {onLeave: function (args) {send("X509_REVOKED_add_ext");}});

var X509_REVOKED_delete_ext = Module.findExportByName("libcrypto.dll", "X509_REVOKED_delete_ext")
Interceptor.attach(X509_REVOKED_delete_ext, {onLeave: function (args) {send("X509_REVOKED_delete_ext");}});

var X509_REVOKED_dup = Module.findExportByName("libcrypto.dll", "X509_REVOKED_dup")
Interceptor.attach(X509_REVOKED_dup, {onLeave: function (args) {send("X509_REVOKED_dup");}});

var X509_REVOKED_free = Module.findExportByName("libcrypto.dll", "X509_REVOKED_free")
Interceptor.attach(X509_REVOKED_free, {onLeave: function (args) {send("X509_REVOKED_free");}});

var X509_REVOKED_get0_extensions = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get0_extensions")
Interceptor.attach(X509_REVOKED_get0_extensions, {onLeave: function (args) {send("X509_REVOKED_get0_extensions");}});

var X509_REVOKED_get0_revocationDate = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get0_revocationDate")
Interceptor.attach(X509_REVOKED_get0_revocationDate, {onLeave: function (args) {send("X509_REVOKED_get0_revocationDate");}});

var X509_REVOKED_get0_serialNumber = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get0_serialNumber")
Interceptor.attach(X509_REVOKED_get0_serialNumber, {onLeave: function (args) {send("X509_REVOKED_get0_serialNumber");}});

var X509_REVOKED_get_ext = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get_ext")
Interceptor.attach(X509_REVOKED_get_ext, {onLeave: function (args) {send("X509_REVOKED_get_ext");}});

var X509_REVOKED_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get_ext_by_NID")
Interceptor.attach(X509_REVOKED_get_ext_by_NID, {onLeave: function (args) {send("X509_REVOKED_get_ext_by_NID");}});

var X509_REVOKED_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get_ext_by_OBJ")
Interceptor.attach(X509_REVOKED_get_ext_by_OBJ, {onLeave: function (args) {send("X509_REVOKED_get_ext_by_OBJ");}});

var X509_REVOKED_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get_ext_by_critical")
Interceptor.attach(X509_REVOKED_get_ext_by_critical, {onLeave: function (args) {send("X509_REVOKED_get_ext_by_critical");}});

var X509_REVOKED_get_ext_count = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get_ext_count")
Interceptor.attach(X509_REVOKED_get_ext_count, {onLeave: function (args) {send("X509_REVOKED_get_ext_count");}});

var X509_REVOKED_get_ext_d2i = Module.findExportByName("libcrypto.dll", "X509_REVOKED_get_ext_d2i")
Interceptor.attach(X509_REVOKED_get_ext_d2i, {onLeave: function (args) {send("X509_REVOKED_get_ext_d2i");}});

var X509_REVOKED_it = Module.findExportByName("libcrypto.dll", "X509_REVOKED_it")
Interceptor.attach(X509_REVOKED_it, {onLeave: function (args) {send("X509_REVOKED_it");}});

var X509_REVOKED_new = Module.findExportByName("libcrypto.dll", "X509_REVOKED_new")
Interceptor.attach(X509_REVOKED_new, {onLeave: function (args) {send("X509_REVOKED_new");}});

var X509_REVOKED_set_revocationDate = Module.findExportByName("libcrypto.dll", "X509_REVOKED_set_revocationDate")
Interceptor.attach(X509_REVOKED_set_revocationDate, {onLeave: function (args) {send("X509_REVOKED_set_revocationDate");}});

var X509_REVOKED_set_serialNumber = Module.findExportByName("libcrypto.dll", "X509_REVOKED_set_serialNumber")
Interceptor.attach(X509_REVOKED_set_serialNumber, {onLeave: function (args) {send("X509_REVOKED_set_serialNumber");}});

var X509_SIG_free = Module.findExportByName("libcrypto.dll", "X509_SIG_free")
Interceptor.attach(X509_SIG_free, {onLeave: function (args) {send("X509_SIG_free");}});

var X509_SIG_it = Module.findExportByName("libcrypto.dll", "X509_SIG_it")
Interceptor.attach(X509_SIG_it, {onLeave: function (args) {send("X509_SIG_it");}});

var X509_SIG_new = Module.findExportByName("libcrypto.dll", "X509_SIG_new")
Interceptor.attach(X509_SIG_new, {onLeave: function (args) {send("X509_SIG_new");}});

var X509_STORE_CTX_cleanup = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_cleanup")
Interceptor.attach(X509_STORE_CTX_cleanup, {onLeave: function (args) {send("X509_STORE_CTX_cleanup");}});

var X509_STORE_CTX_free = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_free")
Interceptor.attach(X509_STORE_CTX_free, {onLeave: function (args) {send("X509_STORE_CTX_free");}});

var X509_STORE_CTX_get0_cert = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_cert")
Interceptor.attach(X509_STORE_CTX_get0_cert, {onLeave: function (args) {send("X509_STORE_CTX_get0_cert");}});

var X509_STORE_CTX_get0_chain = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_chain")
Interceptor.attach(X509_STORE_CTX_get0_chain, {onLeave: function (args) {send("X509_STORE_CTX_get0_chain");}});

var X509_STORE_CTX_get0_current_crl = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_current_crl")
Interceptor.attach(X509_STORE_CTX_get0_current_crl, {onLeave: function (args) {send("X509_STORE_CTX_get0_current_crl");}});

var X509_STORE_CTX_get0_current_issuer = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_current_issuer")
Interceptor.attach(X509_STORE_CTX_get0_current_issuer, {onLeave: function (args) {send("X509_STORE_CTX_get0_current_issuer");}});

var X509_STORE_CTX_get0_param = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_param")
Interceptor.attach(X509_STORE_CTX_get0_param, {onLeave: function (args) {send("X509_STORE_CTX_get0_param");}});

var X509_STORE_CTX_get0_parent_ctx = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_parent_ctx")
Interceptor.attach(X509_STORE_CTX_get0_parent_ctx, {onLeave: function (args) {send("X509_STORE_CTX_get0_parent_ctx");}});

var X509_STORE_CTX_get0_policy_tree = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_policy_tree")
Interceptor.attach(X509_STORE_CTX_get0_policy_tree, {onLeave: function (args) {send("X509_STORE_CTX_get0_policy_tree");}});

var X509_STORE_CTX_get0_store = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_store")
Interceptor.attach(X509_STORE_CTX_get0_store, {onLeave: function (args) {send("X509_STORE_CTX_get0_store");}});

var X509_STORE_CTX_get0_untrusted = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get0_untrusted")
Interceptor.attach(X509_STORE_CTX_get0_untrusted, {onLeave: function (args) {send("X509_STORE_CTX_get0_untrusted");}});

var X509_STORE_CTX_get1_chain = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get1_chain")
Interceptor.attach(X509_STORE_CTX_get1_chain, {onLeave: function (args) {send("X509_STORE_CTX_get1_chain");}});

var X509_STORE_CTX_get1_issuer = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get1_issuer")
Interceptor.attach(X509_STORE_CTX_get1_issuer, {onLeave: function (args) {send("X509_STORE_CTX_get1_issuer");}});

var X509_STORE_CTX_get_chain = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_chain")
Interceptor.attach(X509_STORE_CTX_get_chain, {onLeave: function (args) {send("X509_STORE_CTX_get_chain");}});

var X509_STORE_CTX_get_current_cert = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_current_cert")
Interceptor.attach(X509_STORE_CTX_get_current_cert, {onLeave: function (args) {send("X509_STORE_CTX_get_current_cert");}});

var X509_STORE_CTX_get_error = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_error")
Interceptor.attach(X509_STORE_CTX_get_error, {onLeave: function (args) {send("X509_STORE_CTX_get_error");}});

var X509_STORE_CTX_get_error_depth = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_error_depth")
Interceptor.attach(X509_STORE_CTX_get_error_depth, {onLeave: function (args) {send("X509_STORE_CTX_get_error_depth");}});

var X509_STORE_CTX_get_ex_data = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_ex_data")
Interceptor.attach(X509_STORE_CTX_get_ex_data, {onLeave: function (args) {send("X509_STORE_CTX_get_ex_data");}});

var X509_STORE_CTX_get_ex_new_index = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_ex_new_index")
Interceptor.attach(X509_STORE_CTX_get_ex_new_index, {onLeave: function (args) {send("X509_STORE_CTX_get_ex_new_index");}});

var X509_STORE_CTX_get_explicit_policy = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_get_explicit_policy")
Interceptor.attach(X509_STORE_CTX_get_explicit_policy, {onLeave: function (args) {send("X509_STORE_CTX_get_explicit_policy");}});

var X509_STORE_CTX_init = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_init")
Interceptor.attach(X509_STORE_CTX_init, {onLeave: function (args) {send("X509_STORE_CTX_init");}});

var X509_STORE_CTX_new = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_new")
Interceptor.attach(X509_STORE_CTX_new, {onLeave: function (args) {send("X509_STORE_CTX_new");}});

var X509_STORE_CTX_purpose_inherit = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_purpose_inherit")
Interceptor.attach(X509_STORE_CTX_purpose_inherit, {onLeave: function (args) {send("X509_STORE_CTX_purpose_inherit");}});

var X509_STORE_CTX_set0_crls = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set0_crls")
Interceptor.attach(X509_STORE_CTX_set0_crls, {onLeave: function (args) {send("X509_STORE_CTX_set0_crls");}});

var X509_STORE_CTX_set0_param = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set0_param")
Interceptor.attach(X509_STORE_CTX_set0_param, {onLeave: function (args) {send("X509_STORE_CTX_set0_param");}});

var X509_STORE_CTX_set0_trusted_stack = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set0_trusted_stack")
Interceptor.attach(X509_STORE_CTX_set0_trusted_stack, {onLeave: function (args) {send("X509_STORE_CTX_set0_trusted_stack");}});

var X509_STORE_CTX_set0_untrusted = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set0_untrusted")
Interceptor.attach(X509_STORE_CTX_set0_untrusted, {onLeave: function (args) {send("X509_STORE_CTX_set0_untrusted");}});

var X509_STORE_CTX_set_cert = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_cert")
Interceptor.attach(X509_STORE_CTX_set_cert, {onLeave: function (args) {send("X509_STORE_CTX_set_cert");}});

var X509_STORE_CTX_set_chain = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_chain")
Interceptor.attach(X509_STORE_CTX_set_chain, {onLeave: function (args) {send("X509_STORE_CTX_set_chain");}});

var X509_STORE_CTX_set_default = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_default")
Interceptor.attach(X509_STORE_CTX_set_default, {onLeave: function (args) {send("X509_STORE_CTX_set_default");}});

var X509_STORE_CTX_set_depth = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_depth")
Interceptor.attach(X509_STORE_CTX_set_depth, {onLeave: function (args) {send("X509_STORE_CTX_set_depth");}});

var X509_STORE_CTX_set_error = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_error")
Interceptor.attach(X509_STORE_CTX_set_error, {onLeave: function (args) {send("X509_STORE_CTX_set_error");}});

var X509_STORE_CTX_set_ex_data = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_ex_data")
Interceptor.attach(X509_STORE_CTX_set_ex_data, {onLeave: function (args) {send("X509_STORE_CTX_set_ex_data");}});

var X509_STORE_CTX_set_flags = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_flags")
Interceptor.attach(X509_STORE_CTX_set_flags, {onLeave: function (args) {send("X509_STORE_CTX_set_flags");}});

var X509_STORE_CTX_set_purpose = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_purpose")
Interceptor.attach(X509_STORE_CTX_set_purpose, {onLeave: function (args) {send("X509_STORE_CTX_set_purpose");}});

var X509_STORE_CTX_set_time = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_time")
Interceptor.attach(X509_STORE_CTX_set_time, {onLeave: function (args) {send("X509_STORE_CTX_set_time");}});

var X509_STORE_CTX_set_trust = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_trust")
Interceptor.attach(X509_STORE_CTX_set_trust, {onLeave: function (args) {send("X509_STORE_CTX_set_trust");}});

var X509_STORE_CTX_set_verify_cb = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_set_verify_cb")
Interceptor.attach(X509_STORE_CTX_set_verify_cb, {onLeave: function (args) {send("X509_STORE_CTX_set_verify_cb");}});

var X509_STORE_CTX_trusted_stack = Module.findExportByName("libcrypto.dll", "X509_STORE_CTX_trusted_stack")
Interceptor.attach(X509_STORE_CTX_trusted_stack, {onLeave: function (args) {send("X509_STORE_CTX_trusted_stack");}});

var X509_STORE_add_cert = Module.findExportByName("libcrypto.dll", "X509_STORE_add_cert")
Interceptor.attach(X509_STORE_add_cert, {onLeave: function (args) {send("X509_STORE_add_cert");}});

var X509_STORE_add_crl = Module.findExportByName("libcrypto.dll", "X509_STORE_add_crl")
Interceptor.attach(X509_STORE_add_crl, {onLeave: function (args) {send("X509_STORE_add_crl");}});

var X509_STORE_add_lookup = Module.findExportByName("libcrypto.dll", "X509_STORE_add_lookup")
Interceptor.attach(X509_STORE_add_lookup, {onLeave: function (args) {send("X509_STORE_add_lookup");}});

var X509_STORE_free = Module.findExportByName("libcrypto.dll", "X509_STORE_free")
Interceptor.attach(X509_STORE_free, {onLeave: function (args) {send("X509_STORE_free");}});

var X509_STORE_get0_objects = Module.findExportByName("libcrypto.dll", "X509_STORE_get0_objects")
Interceptor.attach(X509_STORE_get0_objects, {onLeave: function (args) {send("X509_STORE_get0_objects");}});

var X509_STORE_get0_param = Module.findExportByName("libcrypto.dll", "X509_STORE_get0_param")
Interceptor.attach(X509_STORE_get0_param, {onLeave: function (args) {send("X509_STORE_get0_param");}});

var X509_STORE_get1_certs = Module.findExportByName("libcrypto.dll", "X509_STORE_get1_certs")
Interceptor.attach(X509_STORE_get1_certs, {onLeave: function (args) {send("X509_STORE_get1_certs");}});

var X509_STORE_get1_crls = Module.findExportByName("libcrypto.dll", "X509_STORE_get1_crls")
Interceptor.attach(X509_STORE_get1_crls, {onLeave: function (args) {send("X509_STORE_get1_crls");}});

var X509_STORE_get_by_subject = Module.findExportByName("libcrypto.dll", "X509_STORE_get_by_subject")
Interceptor.attach(X509_STORE_get_by_subject, {onLeave: function (args) {send("X509_STORE_get_by_subject");}});

var X509_STORE_get_ex_data = Module.findExportByName("libcrypto.dll", "X509_STORE_get_ex_data")
Interceptor.attach(X509_STORE_get_ex_data, {onLeave: function (args) {send("X509_STORE_get_ex_data");}});

var X509_STORE_load_locations = Module.findExportByName("libcrypto.dll", "X509_STORE_load_locations")
Interceptor.attach(X509_STORE_load_locations, {onLeave: function (args) {send("X509_STORE_load_locations");}});

var X509_STORE_load_mem = Module.findExportByName("libcrypto.dll", "X509_STORE_load_mem")
Interceptor.attach(X509_STORE_load_mem, {onLeave: function (args) {send("X509_STORE_load_mem");}});

var X509_STORE_new = Module.findExportByName("libcrypto.dll", "X509_STORE_new")
Interceptor.attach(X509_STORE_new, {onLeave: function (args) {send("X509_STORE_new");}});

var X509_STORE_set1_param = Module.findExportByName("libcrypto.dll", "X509_STORE_set1_param")
Interceptor.attach(X509_STORE_set1_param, {onLeave: function (args) {send("X509_STORE_set1_param");}});

var X509_STORE_set_default_paths = Module.findExportByName("libcrypto.dll", "X509_STORE_set_default_paths")
Interceptor.attach(X509_STORE_set_default_paths, {onLeave: function (args) {send("X509_STORE_set_default_paths");}});

var X509_STORE_set_depth = Module.findExportByName("libcrypto.dll", "X509_STORE_set_depth")
Interceptor.attach(X509_STORE_set_depth, {onLeave: function (args) {send("X509_STORE_set_depth");}});

var X509_STORE_set_ex_data = Module.findExportByName("libcrypto.dll", "X509_STORE_set_ex_data")
Interceptor.attach(X509_STORE_set_ex_data, {onLeave: function (args) {send("X509_STORE_set_ex_data");}});

var X509_STORE_set_flags = Module.findExportByName("libcrypto.dll", "X509_STORE_set_flags")
Interceptor.attach(X509_STORE_set_flags, {onLeave: function (args) {send("X509_STORE_set_flags");}});

var X509_STORE_set_purpose = Module.findExportByName("libcrypto.dll", "X509_STORE_set_purpose")
Interceptor.attach(X509_STORE_set_purpose, {onLeave: function (args) {send("X509_STORE_set_purpose");}});

var X509_STORE_set_trust = Module.findExportByName("libcrypto.dll", "X509_STORE_set_trust")
Interceptor.attach(X509_STORE_set_trust, {onLeave: function (args) {send("X509_STORE_set_trust");}});

var X509_STORE_set_verify_cb = Module.findExportByName("libcrypto.dll", "X509_STORE_set_verify_cb")
Interceptor.attach(X509_STORE_set_verify_cb, {onLeave: function (args) {send("X509_STORE_set_verify_cb");}});

var X509_STORE_up_ref = Module.findExportByName("libcrypto.dll", "X509_STORE_up_ref")
Interceptor.attach(X509_STORE_up_ref, {onLeave: function (args) {send("X509_STORE_up_ref");}});

var X509_TRUST_add = Module.findExportByName("libcrypto.dll", "X509_TRUST_add")
Interceptor.attach(X509_TRUST_add, {onLeave: function (args) {send("X509_TRUST_add");}});

var X509_TRUST_cleanup = Module.findExportByName("libcrypto.dll", "X509_TRUST_cleanup")
Interceptor.attach(X509_TRUST_cleanup, {onLeave: function (args) {send("X509_TRUST_cleanup");}});

var X509_TRUST_get0 = Module.findExportByName("libcrypto.dll", "X509_TRUST_get0")
Interceptor.attach(X509_TRUST_get0, {onLeave: function (args) {send("X509_TRUST_get0");}});

var X509_TRUST_get0_name = Module.findExportByName("libcrypto.dll", "X509_TRUST_get0_name")
Interceptor.attach(X509_TRUST_get0_name, {onLeave: function (args) {send("X509_TRUST_get0_name");}});

var X509_TRUST_get_by_id = Module.findExportByName("libcrypto.dll", "X509_TRUST_get_by_id")
Interceptor.attach(X509_TRUST_get_by_id, {onLeave: function (args) {send("X509_TRUST_get_by_id");}});

var X509_TRUST_get_count = Module.findExportByName("libcrypto.dll", "X509_TRUST_get_count")
Interceptor.attach(X509_TRUST_get_count, {onLeave: function (args) {send("X509_TRUST_get_count");}});

var X509_TRUST_get_flags = Module.findExportByName("libcrypto.dll", "X509_TRUST_get_flags")
Interceptor.attach(X509_TRUST_get_flags, {onLeave: function (args) {send("X509_TRUST_get_flags");}});

var X509_TRUST_get_trust = Module.findExportByName("libcrypto.dll", "X509_TRUST_get_trust")
Interceptor.attach(X509_TRUST_get_trust, {onLeave: function (args) {send("X509_TRUST_get_trust");}});

var X509_TRUST_set = Module.findExportByName("libcrypto.dll", "X509_TRUST_set")
Interceptor.attach(X509_TRUST_set, {onLeave: function (args) {send("X509_TRUST_set");}});

var X509_TRUST_set_default = Module.findExportByName("libcrypto.dll", "X509_TRUST_set_default")
Interceptor.attach(X509_TRUST_set_default, {onLeave: function (args) {send("X509_TRUST_set_default");}});

var X509_VAL_free = Module.findExportByName("libcrypto.dll", "X509_VAL_free")
Interceptor.attach(X509_VAL_free, {onLeave: function (args) {send("X509_VAL_free");}});

var X509_VAL_it = Module.findExportByName("libcrypto.dll", "X509_VAL_it")
Interceptor.attach(X509_VAL_it, {onLeave: function (args) {send("X509_VAL_it");}});

var X509_VAL_new = Module.findExportByName("libcrypto.dll", "X509_VAL_new")
Interceptor.attach(X509_VAL_new, {onLeave: function (args) {send("X509_VAL_new");}});

var X509_VERIFY_PARAM_add0_policy = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_add0_policy")
Interceptor.attach(X509_VERIFY_PARAM_add0_policy, {onLeave: function (args) {send("X509_VERIFY_PARAM_add0_policy");}});

var X509_VERIFY_PARAM_add0_table = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_add0_table")
Interceptor.attach(X509_VERIFY_PARAM_add0_table, {onLeave: function (args) {send("X509_VERIFY_PARAM_add0_table");}});

var X509_VERIFY_PARAM_add1_host = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_add1_host")
Interceptor.attach(X509_VERIFY_PARAM_add1_host, {onLeave: function (args) {send("X509_VERIFY_PARAM_add1_host");}});

var X509_VERIFY_PARAM_clear_flags = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_clear_flags")
Interceptor.attach(X509_VERIFY_PARAM_clear_flags, {onLeave: function (args) {send("X509_VERIFY_PARAM_clear_flags");}});

var X509_VERIFY_PARAM_free = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_free")
Interceptor.attach(X509_VERIFY_PARAM_free, {onLeave: function (args) {send("X509_VERIFY_PARAM_free");}});

var X509_VERIFY_PARAM_get0 = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_get0")
Interceptor.attach(X509_VERIFY_PARAM_get0, {onLeave: function (args) {send("X509_VERIFY_PARAM_get0");}});

var X509_VERIFY_PARAM_get0_name = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_get0_name")
Interceptor.attach(X509_VERIFY_PARAM_get0_name, {onLeave: function (args) {send("X509_VERIFY_PARAM_get0_name");}});

var X509_VERIFY_PARAM_get0_peername = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_get0_peername")
Interceptor.attach(X509_VERIFY_PARAM_get0_peername, {onLeave: function (args) {send("X509_VERIFY_PARAM_get0_peername");}});

var X509_VERIFY_PARAM_get_count = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_get_count")
Interceptor.attach(X509_VERIFY_PARAM_get_count, {onLeave: function (args) {send("X509_VERIFY_PARAM_get_count");}});

var X509_VERIFY_PARAM_get_depth = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_get_depth")
Interceptor.attach(X509_VERIFY_PARAM_get_depth, {onLeave: function (args) {send("X509_VERIFY_PARAM_get_depth");}});

var X509_VERIFY_PARAM_get_flags = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_get_flags")
Interceptor.attach(X509_VERIFY_PARAM_get_flags, {onLeave: function (args) {send("X509_VERIFY_PARAM_get_flags");}});

var X509_VERIFY_PARAM_inherit = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_inherit")
Interceptor.attach(X509_VERIFY_PARAM_inherit, {onLeave: function (args) {send("X509_VERIFY_PARAM_inherit");}});

var X509_VERIFY_PARAM_lookup = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_lookup")
Interceptor.attach(X509_VERIFY_PARAM_lookup, {onLeave: function (args) {send("X509_VERIFY_PARAM_lookup");}});

var X509_VERIFY_PARAM_new = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_new")
Interceptor.attach(X509_VERIFY_PARAM_new, {onLeave: function (args) {send("X509_VERIFY_PARAM_new");}});

var X509_VERIFY_PARAM_set1 = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1")
Interceptor.attach(X509_VERIFY_PARAM_set1, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1");}});

var X509_VERIFY_PARAM_set1_email = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1_email")
Interceptor.attach(X509_VERIFY_PARAM_set1_email, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1_email");}});

var X509_VERIFY_PARAM_set1_host = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1_host")
Interceptor.attach(X509_VERIFY_PARAM_set1_host, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1_host");}});

var X509_VERIFY_PARAM_set1_ip = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1_ip")
Interceptor.attach(X509_VERIFY_PARAM_set1_ip, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1_ip");}});

var X509_VERIFY_PARAM_set1_ip_asc = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1_ip_asc")
Interceptor.attach(X509_VERIFY_PARAM_set1_ip_asc, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1_ip_asc");}});

var X509_VERIFY_PARAM_set1_name = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1_name")
Interceptor.attach(X509_VERIFY_PARAM_set1_name, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1_name");}});

var X509_VERIFY_PARAM_set1_policies = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set1_policies")
Interceptor.attach(X509_VERIFY_PARAM_set1_policies, {onLeave: function (args) {send("X509_VERIFY_PARAM_set1_policies");}});

var X509_VERIFY_PARAM_set_depth = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set_depth")
Interceptor.attach(X509_VERIFY_PARAM_set_depth, {onLeave: function (args) {send("X509_VERIFY_PARAM_set_depth");}});

var X509_VERIFY_PARAM_set_flags = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set_flags")
Interceptor.attach(X509_VERIFY_PARAM_set_flags, {onLeave: function (args) {send("X509_VERIFY_PARAM_set_flags");}});

var X509_VERIFY_PARAM_set_hostflags = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set_hostflags")
Interceptor.attach(X509_VERIFY_PARAM_set_hostflags, {onLeave: function (args) {send("X509_VERIFY_PARAM_set_hostflags");}});

var X509_VERIFY_PARAM_set_purpose = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set_purpose")
Interceptor.attach(X509_VERIFY_PARAM_set_purpose, {onLeave: function (args) {send("X509_VERIFY_PARAM_set_purpose");}});

var X509_VERIFY_PARAM_set_time = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set_time")
Interceptor.attach(X509_VERIFY_PARAM_set_time, {onLeave: function (args) {send("X509_VERIFY_PARAM_set_time");}});

var X509_VERIFY_PARAM_set_trust = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_set_trust")
Interceptor.attach(X509_VERIFY_PARAM_set_trust, {onLeave: function (args) {send("X509_VERIFY_PARAM_set_trust");}});

var X509_VERIFY_PARAM_table_cleanup = Module.findExportByName("libcrypto.dll", "X509_VERIFY_PARAM_table_cleanup")
Interceptor.attach(X509_VERIFY_PARAM_table_cleanup, {onLeave: function (args) {send("X509_VERIFY_PARAM_table_cleanup");}});

var X509_add1_ext_i2d = Module.findExportByName("libcrypto.dll", "X509_add1_ext_i2d")
Interceptor.attach(X509_add1_ext_i2d, {onLeave: function (args) {send("X509_add1_ext_i2d");}});

var X509_add1_reject_object = Module.findExportByName("libcrypto.dll", "X509_add1_reject_object")
Interceptor.attach(X509_add1_reject_object, {onLeave: function (args) {send("X509_add1_reject_object");}});

var X509_add1_trust_object = Module.findExportByName("libcrypto.dll", "X509_add1_trust_object")
Interceptor.attach(X509_add1_trust_object, {onLeave: function (args) {send("X509_add1_trust_object");}});

var X509_add_ext = Module.findExportByName("libcrypto.dll", "X509_add_ext")
Interceptor.attach(X509_add_ext, {onLeave: function (args) {send("X509_add_ext");}});

var X509_alias_get0 = Module.findExportByName("libcrypto.dll", "X509_alias_get0")
Interceptor.attach(X509_alias_get0, {onLeave: function (args) {send("X509_alias_get0");}});

var X509_alias_set1 = Module.findExportByName("libcrypto.dll", "X509_alias_set1")
Interceptor.attach(X509_alias_set1, {onLeave: function (args) {send("X509_alias_set1");}});

var X509_certificate_type = Module.findExportByName("libcrypto.dll", "X509_certificate_type")
Interceptor.attach(X509_certificate_type, {onLeave: function (args) {send("X509_certificate_type");}});

var X509_chain_up_ref = Module.findExportByName("libcrypto.dll", "X509_chain_up_ref")
Interceptor.attach(X509_chain_up_ref, {onLeave: function (args) {send("X509_chain_up_ref");}});

var X509_check_akid = Module.findExportByName("libcrypto.dll", "X509_check_akid")
Interceptor.attach(X509_check_akid, {onLeave: function (args) {send("X509_check_akid");}});

var X509_check_ca = Module.findExportByName("libcrypto.dll", "X509_check_ca")
Interceptor.attach(X509_check_ca, {onLeave: function (args) {send("X509_check_ca");}});

var X509_check_email = Module.findExportByName("libcrypto.dll", "X509_check_email")
Interceptor.attach(X509_check_email, {onLeave: function (args) {send("X509_check_email");}});

var X509_check_host = Module.findExportByName("libcrypto.dll", "X509_check_host")
Interceptor.attach(X509_check_host, {onLeave: function (args) {send("X509_check_host");}});

var X509_check_ip = Module.findExportByName("libcrypto.dll", "X509_check_ip")
Interceptor.attach(X509_check_ip, {onLeave: function (args) {send("X509_check_ip");}});

var X509_check_ip_asc = Module.findExportByName("libcrypto.dll", "X509_check_ip_asc")
Interceptor.attach(X509_check_ip_asc, {onLeave: function (args) {send("X509_check_ip_asc");}});

var X509_check_issued = Module.findExportByName("libcrypto.dll", "X509_check_issued")
Interceptor.attach(X509_check_issued, {onLeave: function (args) {send("X509_check_issued");}});

var X509_check_private_key = Module.findExportByName("libcrypto.dll", "X509_check_private_key")
Interceptor.attach(X509_check_private_key, {onLeave: function (args) {send("X509_check_private_key");}});

var X509_check_purpose = Module.findExportByName("libcrypto.dll", "X509_check_purpose")
Interceptor.attach(X509_check_purpose, {onLeave: function (args) {send("X509_check_purpose");}});

var X509_check_trust = Module.findExportByName("libcrypto.dll", "X509_check_trust")
Interceptor.attach(X509_check_trust, {onLeave: function (args) {send("X509_check_trust");}});

var X509_cmp = Module.findExportByName("libcrypto.dll", "X509_cmp")
Interceptor.attach(X509_cmp, {onLeave: function (args) {send("X509_cmp");}});

var X509_cmp_current_time = Module.findExportByName("libcrypto.dll", "X509_cmp_current_time")
Interceptor.attach(X509_cmp_current_time, {onLeave: function (args) {send("X509_cmp_current_time");}});

var X509_cmp_time = Module.findExportByName("libcrypto.dll", "X509_cmp_time")
Interceptor.attach(X509_cmp_time, {onLeave: function (args) {send("X509_cmp_time");}});

var X509_delete_ext = Module.findExportByName("libcrypto.dll", "X509_delete_ext")
Interceptor.attach(X509_delete_ext, {onLeave: function (args) {send("X509_delete_ext");}});

var X509_digest = Module.findExportByName("libcrypto.dll", "X509_digest")
Interceptor.attach(X509_digest, {onLeave: function (args) {send("X509_digest");}});

var X509_dup = Module.findExportByName("libcrypto.dll", "X509_dup")
Interceptor.attach(X509_dup, {onLeave: function (args) {send("X509_dup");}});

var X509_email_free = Module.findExportByName("libcrypto.dll", "X509_email_free")
Interceptor.attach(X509_email_free, {onLeave: function (args) {send("X509_email_free");}});

var X509_find_by_issuer_and_serial = Module.findExportByName("libcrypto.dll", "X509_find_by_issuer_and_serial")
Interceptor.attach(X509_find_by_issuer_and_serial, {onLeave: function (args) {send("X509_find_by_issuer_and_serial");}});

var X509_find_by_subject = Module.findExportByName("libcrypto.dll", "X509_find_by_subject")
Interceptor.attach(X509_find_by_subject, {onLeave: function (args) {send("X509_find_by_subject");}});

var X509_free = Module.findExportByName("libcrypto.dll", "X509_free")
Interceptor.attach(X509_free, {onLeave: function (args) {send("X509_free");}});

var X509_get0_extensions = Module.findExportByName("libcrypto.dll", "X509_get0_extensions")
Interceptor.attach(X509_get0_extensions, {onLeave: function (args) {send("X509_get0_extensions");}});

var X509_get0_notAfter = Module.findExportByName("libcrypto.dll", "X509_get0_notAfter")
Interceptor.attach(X509_get0_notAfter, {onLeave: function (args) {send("X509_get0_notAfter");}});

var X509_get0_notBefore = Module.findExportByName("libcrypto.dll", "X509_get0_notBefore")
Interceptor.attach(X509_get0_notBefore, {onLeave: function (args) {send("X509_get0_notBefore");}});

var X509_get0_pubkey = Module.findExportByName("libcrypto.dll", "X509_get0_pubkey")
Interceptor.attach(X509_get0_pubkey, {onLeave: function (args) {send("X509_get0_pubkey");}});

var X509_get0_pubkey_bitstr = Module.findExportByName("libcrypto.dll", "X509_get0_pubkey_bitstr")
Interceptor.attach(X509_get0_pubkey_bitstr, {onLeave: function (args) {send("X509_get0_pubkey_bitstr");}});

var X509_get0_serialNumber = Module.findExportByName("libcrypto.dll", "X509_get0_serialNumber")
Interceptor.attach(X509_get0_serialNumber, {onLeave: function (args) {send("X509_get0_serialNumber");}});

var X509_get0_signature = Module.findExportByName("libcrypto.dll", "X509_get0_signature")
Interceptor.attach(X509_get0_signature, {onLeave: function (args) {send("X509_get0_signature");}});

var X509_get0_tbs_sigalg = Module.findExportByName("libcrypto.dll", "X509_get0_tbs_sigalg")
Interceptor.attach(X509_get0_tbs_sigalg, {onLeave: function (args) {send("X509_get0_tbs_sigalg");}});

var X509_get1_email = Module.findExportByName("libcrypto.dll", "X509_get1_email")
Interceptor.attach(X509_get1_email, {onLeave: function (args) {send("X509_get1_email");}});

var X509_get1_ocsp = Module.findExportByName("libcrypto.dll", "X509_get1_ocsp")
Interceptor.attach(X509_get1_ocsp, {onLeave: function (args) {send("X509_get1_ocsp");}});

var X509_get_default_cert_area = Module.findExportByName("libcrypto.dll", "X509_get_default_cert_area")
Interceptor.attach(X509_get_default_cert_area, {onLeave: function (args) {send("X509_get_default_cert_area");}});

var X509_get_default_cert_dir = Module.findExportByName("libcrypto.dll", "X509_get_default_cert_dir")
Interceptor.attach(X509_get_default_cert_dir, {onLeave: function (args) {send("X509_get_default_cert_dir");}});

var X509_get_default_cert_dir_env = Module.findExportByName("libcrypto.dll", "X509_get_default_cert_dir_env")
Interceptor.attach(X509_get_default_cert_dir_env, {onLeave: function (args) {send("X509_get_default_cert_dir_env");}});

var X509_get_default_cert_file = Module.findExportByName("libcrypto.dll", "X509_get_default_cert_file")
Interceptor.attach(X509_get_default_cert_file, {onLeave: function (args) {send("X509_get_default_cert_file");}});

var X509_get_default_cert_file_env = Module.findExportByName("libcrypto.dll", "X509_get_default_cert_file_env")
Interceptor.attach(X509_get_default_cert_file_env, {onLeave: function (args) {send("X509_get_default_cert_file_env");}});

var X509_get_default_private_dir = Module.findExportByName("libcrypto.dll", "X509_get_default_private_dir")
Interceptor.attach(X509_get_default_private_dir, {onLeave: function (args) {send("X509_get_default_private_dir");}});

var X509_get_ex_data = Module.findExportByName("libcrypto.dll", "X509_get_ex_data")
Interceptor.attach(X509_get_ex_data, {onLeave: function (args) {send("X509_get_ex_data");}});

var X509_get_ex_new_index = Module.findExportByName("libcrypto.dll", "X509_get_ex_new_index")
Interceptor.attach(X509_get_ex_new_index, {onLeave: function (args) {send("X509_get_ex_new_index");}});

var X509_get_ext = Module.findExportByName("libcrypto.dll", "X509_get_ext")
Interceptor.attach(X509_get_ext, {onLeave: function (args) {send("X509_get_ext");}});

var X509_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "X509_get_ext_by_NID")
Interceptor.attach(X509_get_ext_by_NID, {onLeave: function (args) {send("X509_get_ext_by_NID");}});

var X509_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "X509_get_ext_by_OBJ")
Interceptor.attach(X509_get_ext_by_OBJ, {onLeave: function (args) {send("X509_get_ext_by_OBJ");}});

var X509_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "X509_get_ext_by_critical")
Interceptor.attach(X509_get_ext_by_critical, {onLeave: function (args) {send("X509_get_ext_by_critical");}});

var X509_get_ext_count = Module.findExportByName("libcrypto.dll", "X509_get_ext_count")
Interceptor.attach(X509_get_ext_count, {onLeave: function (args) {send("X509_get_ext_count");}});

var X509_get_ext_d2i = Module.findExportByName("libcrypto.dll", "X509_get_ext_d2i")
Interceptor.attach(X509_get_ext_d2i, {onLeave: function (args) {send("X509_get_ext_d2i");}});

var X509_get_issuer_name = Module.findExportByName("libcrypto.dll", "X509_get_issuer_name")
Interceptor.attach(X509_get_issuer_name, {onLeave: function (args) {send("X509_get_issuer_name");}});

var X509_get_pubkey = Module.findExportByName("libcrypto.dll", "X509_get_pubkey")
Interceptor.attach(X509_get_pubkey, {onLeave: function (args) {send("X509_get_pubkey");}});

var X509_get_pubkey_parameters = Module.findExportByName("libcrypto.dll", "X509_get_pubkey_parameters")
Interceptor.attach(X509_get_pubkey_parameters, {onLeave: function (args) {send("X509_get_pubkey_parameters");}});

var X509_get_serialNumber = Module.findExportByName("libcrypto.dll", "X509_get_serialNumber")
Interceptor.attach(X509_get_serialNumber, {onLeave: function (args) {send("X509_get_serialNumber");}});

var X509_get_signature_nid = Module.findExportByName("libcrypto.dll", "X509_get_signature_nid")
Interceptor.attach(X509_get_signature_nid, {onLeave: function (args) {send("X509_get_signature_nid");}});

var X509_get_signature_type = Module.findExportByName("libcrypto.dll", "X509_get_signature_type")
Interceptor.attach(X509_get_signature_type, {onLeave: function (args) {send("X509_get_signature_type");}});

var X509_get_subject_name = Module.findExportByName("libcrypto.dll", "X509_get_subject_name")
Interceptor.attach(X509_get_subject_name, {onLeave: function (args) {send("X509_get_subject_name");}});

var X509_get_version = Module.findExportByName("libcrypto.dll", "X509_get_version")
Interceptor.attach(X509_get_version, {onLeave: function (args) {send("X509_get_version");}});

var X509_getm_notAfter = Module.findExportByName("libcrypto.dll", "X509_getm_notAfter")
Interceptor.attach(X509_getm_notAfter, {onLeave: function (args) {send("X509_getm_notAfter");}});

var X509_getm_notBefore = Module.findExportByName("libcrypto.dll", "X509_getm_notBefore")
Interceptor.attach(X509_getm_notBefore, {onLeave: function (args) {send("X509_getm_notBefore");}});

var X509_gmtime_adj = Module.findExportByName("libcrypto.dll", "X509_gmtime_adj")
Interceptor.attach(X509_gmtime_adj, {onLeave: function (args) {send("X509_gmtime_adj");}});

var X509_issuer_and_serial_cmp = Module.findExportByName("libcrypto.dll", "X509_issuer_and_serial_cmp")
Interceptor.attach(X509_issuer_and_serial_cmp, {onLeave: function (args) {send("X509_issuer_and_serial_cmp");}});

var X509_issuer_and_serial_hash = Module.findExportByName("libcrypto.dll", "X509_issuer_and_serial_hash")
Interceptor.attach(X509_issuer_and_serial_hash, {onLeave: function (args) {send("X509_issuer_and_serial_hash");}});

var X509_issuer_name_cmp = Module.findExportByName("libcrypto.dll", "X509_issuer_name_cmp")
Interceptor.attach(X509_issuer_name_cmp, {onLeave: function (args) {send("X509_issuer_name_cmp");}});

var X509_issuer_name_hash = Module.findExportByName("libcrypto.dll", "X509_issuer_name_hash")
Interceptor.attach(X509_issuer_name_hash, {onLeave: function (args) {send("X509_issuer_name_hash");}});

var X509_issuer_name_hash_old = Module.findExportByName("libcrypto.dll", "X509_issuer_name_hash_old")
Interceptor.attach(X509_issuer_name_hash_old, {onLeave: function (args) {send("X509_issuer_name_hash_old");}});

var X509_it = Module.findExportByName("libcrypto.dll", "X509_it")
Interceptor.attach(X509_it, {onLeave: function (args) {send("X509_it");}});

var X509_keyid_get0 = Module.findExportByName("libcrypto.dll", "X509_keyid_get0")
Interceptor.attach(X509_keyid_get0, {onLeave: function (args) {send("X509_keyid_get0");}});

var X509_keyid_set1 = Module.findExportByName("libcrypto.dll", "X509_keyid_set1")
Interceptor.attach(X509_keyid_set1, {onLeave: function (args) {send("X509_keyid_set1");}});

var X509_load_cert_crl_file = Module.findExportByName("libcrypto.dll", "X509_load_cert_crl_file")
Interceptor.attach(X509_load_cert_crl_file, {onLeave: function (args) {send("X509_load_cert_crl_file");}});

var X509_load_cert_file = Module.findExportByName("libcrypto.dll", "X509_load_cert_file")
Interceptor.attach(X509_load_cert_file, {onLeave: function (args) {send("X509_load_cert_file");}});

var X509_load_crl_file = Module.findExportByName("libcrypto.dll", "X509_load_crl_file")
Interceptor.attach(X509_load_crl_file, {onLeave: function (args) {send("X509_load_crl_file");}});

var X509_new = Module.findExportByName("libcrypto.dll", "X509_new")
Interceptor.attach(X509_new, {onLeave: function (args) {send("X509_new");}});

var X509_ocspid_print = Module.findExportByName("libcrypto.dll", "X509_ocspid_print")
Interceptor.attach(X509_ocspid_print, {onLeave: function (args) {send("X509_ocspid_print");}});

var X509_policy_check = Module.findExportByName("libcrypto.dll", "X509_policy_check")
Interceptor.attach(X509_policy_check, {onLeave: function (args) {send("X509_policy_check");}});

var X509_policy_level_get0_node = Module.findExportByName("libcrypto.dll", "X509_policy_level_get0_node")
Interceptor.attach(X509_policy_level_get0_node, {onLeave: function (args) {send("X509_policy_level_get0_node");}});

var X509_policy_level_node_count = Module.findExportByName("libcrypto.dll", "X509_policy_level_node_count")
Interceptor.attach(X509_policy_level_node_count, {onLeave: function (args) {send("X509_policy_level_node_count");}});

var X509_policy_node_get0_parent = Module.findExportByName("libcrypto.dll", "X509_policy_node_get0_parent")
Interceptor.attach(X509_policy_node_get0_parent, {onLeave: function (args) {send("X509_policy_node_get0_parent");}});

var X509_policy_node_get0_policy = Module.findExportByName("libcrypto.dll", "X509_policy_node_get0_policy")
Interceptor.attach(X509_policy_node_get0_policy, {onLeave: function (args) {send("X509_policy_node_get0_policy");}});

var X509_policy_node_get0_qualifiers = Module.findExportByName("libcrypto.dll", "X509_policy_node_get0_qualifiers")
Interceptor.attach(X509_policy_node_get0_qualifiers, {onLeave: function (args) {send("X509_policy_node_get0_qualifiers");}});

var X509_policy_tree_free = Module.findExportByName("libcrypto.dll", "X509_policy_tree_free")
Interceptor.attach(X509_policy_tree_free, {onLeave: function (args) {send("X509_policy_tree_free");}});

var X509_policy_tree_get0_level = Module.findExportByName("libcrypto.dll", "X509_policy_tree_get0_level")
Interceptor.attach(X509_policy_tree_get0_level, {onLeave: function (args) {send("X509_policy_tree_get0_level");}});

var X509_policy_tree_get0_policies = Module.findExportByName("libcrypto.dll", "X509_policy_tree_get0_policies")
Interceptor.attach(X509_policy_tree_get0_policies, {onLeave: function (args) {send("X509_policy_tree_get0_policies");}});

var X509_policy_tree_get0_user_policies = Module.findExportByName("libcrypto.dll", "X509_policy_tree_get0_user_policies")
Interceptor.attach(X509_policy_tree_get0_user_policies, {onLeave: function (args) {send("X509_policy_tree_get0_user_policies");}});

var X509_policy_tree_level_count = Module.findExportByName("libcrypto.dll", "X509_policy_tree_level_count")
Interceptor.attach(X509_policy_tree_level_count, {onLeave: function (args) {send("X509_policy_tree_level_count");}});

var X509_print = Module.findExportByName("libcrypto.dll", "X509_print")
Interceptor.attach(X509_print, {onLeave: function (args) {send("X509_print");}});

var X509_print_ex = Module.findExportByName("libcrypto.dll", "X509_print_ex")
Interceptor.attach(X509_print_ex, {onLeave: function (args) {send("X509_print_ex");}});

var X509_print_ex_fp = Module.findExportByName("libcrypto.dll", "X509_print_ex_fp")
Interceptor.attach(X509_print_ex_fp, {onLeave: function (args) {send("X509_print_ex_fp");}});

var X509_print_fp = Module.findExportByName("libcrypto.dll", "X509_print_fp")
Interceptor.attach(X509_print_fp, {onLeave: function (args) {send("X509_print_fp");}});

var X509_pubkey_digest = Module.findExportByName("libcrypto.dll", "X509_pubkey_digest")
Interceptor.attach(X509_pubkey_digest, {onLeave: function (args) {send("X509_pubkey_digest");}});

var X509_reject_clear = Module.findExportByName("libcrypto.dll", "X509_reject_clear")
Interceptor.attach(X509_reject_clear, {onLeave: function (args) {send("X509_reject_clear");}});

var X509_set1_notAfter = Module.findExportByName("libcrypto.dll", "X509_set1_notAfter")
Interceptor.attach(X509_set1_notAfter, {onLeave: function (args) {send("X509_set1_notAfter");}});

var X509_set1_notBefore = Module.findExportByName("libcrypto.dll", "X509_set1_notBefore")
Interceptor.attach(X509_set1_notBefore, {onLeave: function (args) {send("X509_set1_notBefore");}});

var X509_set_ex_data = Module.findExportByName("libcrypto.dll", "X509_set_ex_data")
Interceptor.attach(X509_set_ex_data, {onLeave: function (args) {send("X509_set_ex_data");}});

var X509_set_issuer_name = Module.findExportByName("libcrypto.dll", "X509_set_issuer_name")
Interceptor.attach(X509_set_issuer_name, {onLeave: function (args) {send("X509_set_issuer_name");}});

var X509_set_notAfter = Module.findExportByName("libcrypto.dll", "X509_set_notAfter")
Interceptor.attach(X509_set_notAfter, {onLeave: function (args) {send("X509_set_notAfter");}});

var X509_set_notBefore = Module.findExportByName("libcrypto.dll", "X509_set_notBefore")
Interceptor.attach(X509_set_notBefore, {onLeave: function (args) {send("X509_set_notBefore");}});

var X509_set_pubkey = Module.findExportByName("libcrypto.dll", "X509_set_pubkey")
Interceptor.attach(X509_set_pubkey, {onLeave: function (args) {send("X509_set_pubkey");}});

var X509_set_serialNumber = Module.findExportByName("libcrypto.dll", "X509_set_serialNumber")
Interceptor.attach(X509_set_serialNumber, {onLeave: function (args) {send("X509_set_serialNumber");}});

var X509_set_subject_name = Module.findExportByName("libcrypto.dll", "X509_set_subject_name")
Interceptor.attach(X509_set_subject_name, {onLeave: function (args) {send("X509_set_subject_name");}});

var X509_set_version = Module.findExportByName("libcrypto.dll", "X509_set_version")
Interceptor.attach(X509_set_version, {onLeave: function (args) {send("X509_set_version");}});

var X509_sign = Module.findExportByName("libcrypto.dll", "X509_sign")
Interceptor.attach(X509_sign, {onLeave: function (args) {send("X509_sign");}});

var X509_sign_ctx = Module.findExportByName("libcrypto.dll", "X509_sign_ctx")
Interceptor.attach(X509_sign_ctx, {onLeave: function (args) {send("X509_sign_ctx");}});

var X509_signature_dump = Module.findExportByName("libcrypto.dll", "X509_signature_dump")
Interceptor.attach(X509_signature_dump, {onLeave: function (args) {send("X509_signature_dump");}});

var X509_signature_print = Module.findExportByName("libcrypto.dll", "X509_signature_print")
Interceptor.attach(X509_signature_print, {onLeave: function (args) {send("X509_signature_print");}});

var X509_subject_name_cmp = Module.findExportByName("libcrypto.dll", "X509_subject_name_cmp")
Interceptor.attach(X509_subject_name_cmp, {onLeave: function (args) {send("X509_subject_name_cmp");}});

var X509_subject_name_hash = Module.findExportByName("libcrypto.dll", "X509_subject_name_hash")
Interceptor.attach(X509_subject_name_hash, {onLeave: function (args) {send("X509_subject_name_hash");}});

var X509_subject_name_hash_old = Module.findExportByName("libcrypto.dll", "X509_subject_name_hash_old")
Interceptor.attach(X509_subject_name_hash_old, {onLeave: function (args) {send("X509_subject_name_hash_old");}});

var X509_supported_extension = Module.findExportByName("libcrypto.dll", "X509_supported_extension")
Interceptor.attach(X509_supported_extension, {onLeave: function (args) {send("X509_supported_extension");}});

var X509_time_adj = Module.findExportByName("libcrypto.dll", "X509_time_adj")
Interceptor.attach(X509_time_adj, {onLeave: function (args) {send("X509_time_adj");}});

var X509_time_adj_ex = Module.findExportByName("libcrypto.dll", "X509_time_adj_ex")
Interceptor.attach(X509_time_adj_ex, {onLeave: function (args) {send("X509_time_adj_ex");}});

var X509_to_X509_REQ = Module.findExportByName("libcrypto.dll", "X509_to_X509_REQ")
Interceptor.attach(X509_to_X509_REQ, {onLeave: function (args) {send("X509_to_X509_REQ");}});

var X509_trust_clear = Module.findExportByName("libcrypto.dll", "X509_trust_clear")
Interceptor.attach(X509_trust_clear, {onLeave: function (args) {send("X509_trust_clear");}});

var X509_up_ref = Module.findExportByName("libcrypto.dll", "X509_up_ref")
Interceptor.attach(X509_up_ref, {onLeave: function (args) {send("X509_up_ref");}});

var X509_verify = Module.findExportByName("libcrypto.dll", "X509_verify")
Interceptor.attach(X509_verify, {onLeave: function (args) {send("X509_verify");}});

var X509_verify_cert = Module.findExportByName("libcrypto.dll", "X509_verify_cert")
Interceptor.attach(X509_verify_cert, {onLeave: function (args) {send("X509_verify_cert");}});

var X509_verify_cert_error_string = Module.findExportByName("libcrypto.dll", "X509_verify_cert_error_string")
Interceptor.attach(X509_verify_cert_error_string, {onLeave: function (args) {send("X509_verify_cert_error_string");}});

var X509at_add1_attr = Module.findExportByName("libcrypto.dll", "X509at_add1_attr")
Interceptor.attach(X509at_add1_attr, {onLeave: function (args) {send("X509at_add1_attr");}});

var X509at_add1_attr_by_NID = Module.findExportByName("libcrypto.dll", "X509at_add1_attr_by_NID")
Interceptor.attach(X509at_add1_attr_by_NID, {onLeave: function (args) {send("X509at_add1_attr_by_NID");}});

var X509at_add1_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "X509at_add1_attr_by_OBJ")
Interceptor.attach(X509at_add1_attr_by_OBJ, {onLeave: function (args) {send("X509at_add1_attr_by_OBJ");}});

var X509at_add1_attr_by_txt = Module.findExportByName("libcrypto.dll", "X509at_add1_attr_by_txt")
Interceptor.attach(X509at_add1_attr_by_txt, {onLeave: function (args) {send("X509at_add1_attr_by_txt");}});

var X509at_delete_attr = Module.findExportByName("libcrypto.dll", "X509at_delete_attr")
Interceptor.attach(X509at_delete_attr, {onLeave: function (args) {send("X509at_delete_attr");}});

var X509at_get0_data_by_OBJ = Module.findExportByName("libcrypto.dll", "X509at_get0_data_by_OBJ")
Interceptor.attach(X509at_get0_data_by_OBJ, {onLeave: function (args) {send("X509at_get0_data_by_OBJ");}});

var X509at_get_attr = Module.findExportByName("libcrypto.dll", "X509at_get_attr")
Interceptor.attach(X509at_get_attr, {onLeave: function (args) {send("X509at_get_attr");}});

var X509at_get_attr_by_NID = Module.findExportByName("libcrypto.dll", "X509at_get_attr_by_NID")
Interceptor.attach(X509at_get_attr_by_NID, {onLeave: function (args) {send("X509at_get_attr_by_NID");}});

var X509at_get_attr_by_OBJ = Module.findExportByName("libcrypto.dll", "X509at_get_attr_by_OBJ")
Interceptor.attach(X509at_get_attr_by_OBJ, {onLeave: function (args) {send("X509at_get_attr_by_OBJ");}});

var X509at_get_attr_count = Module.findExportByName("libcrypto.dll", "X509at_get_attr_count")
Interceptor.attach(X509at_get_attr_count, {onLeave: function (args) {send("X509at_get_attr_count");}});

var X509v3_add_ext = Module.findExportByName("libcrypto.dll", "X509v3_add_ext")
Interceptor.attach(X509v3_add_ext, {onLeave: function (args) {send("X509v3_add_ext");}});

var X509v3_delete_ext = Module.findExportByName("libcrypto.dll", "X509v3_delete_ext")
Interceptor.attach(X509v3_delete_ext, {onLeave: function (args) {send("X509v3_delete_ext");}});

var X509v3_get_ext = Module.findExportByName("libcrypto.dll", "X509v3_get_ext")
Interceptor.attach(X509v3_get_ext, {onLeave: function (args) {send("X509v3_get_ext");}});

var X509v3_get_ext_by_NID = Module.findExportByName("libcrypto.dll", "X509v3_get_ext_by_NID")
Interceptor.attach(X509v3_get_ext_by_NID, {onLeave: function (args) {send("X509v3_get_ext_by_NID");}});

var X509v3_get_ext_by_OBJ = Module.findExportByName("libcrypto.dll", "X509v3_get_ext_by_OBJ")
Interceptor.attach(X509v3_get_ext_by_OBJ, {onLeave: function (args) {send("X509v3_get_ext_by_OBJ");}});

var X509v3_get_ext_by_critical = Module.findExportByName("libcrypto.dll", "X509v3_get_ext_by_critical")
Interceptor.attach(X509v3_get_ext_by_critical, {onLeave: function (args) {send("X509v3_get_ext_by_critical");}});

var X509v3_get_ext_count = Module.findExportByName("libcrypto.dll", "X509v3_get_ext_count")
Interceptor.attach(X509v3_get_ext_count, {onLeave: function (args) {send("X509v3_get_ext_count");}});

var X9_62_CHARACTERISTIC_TWO_free = Module.findExportByName("libcrypto.dll", "X9_62_CHARACTERISTIC_TWO_free")
Interceptor.attach(X9_62_CHARACTERISTIC_TWO_free, {onLeave: function (args) {send("X9_62_CHARACTERISTIC_TWO_free");}});

var X9_62_CHARACTERISTIC_TWO_it = Module.findExportByName("libcrypto.dll", "X9_62_CHARACTERISTIC_TWO_it")
Interceptor.attach(X9_62_CHARACTERISTIC_TWO_it, {onLeave: function (args) {send("X9_62_CHARACTERISTIC_TWO_it");}});

var X9_62_CHARACTERISTIC_TWO_new = Module.findExportByName("libcrypto.dll", "X9_62_CHARACTERISTIC_TWO_new")
Interceptor.attach(X9_62_CHARACTERISTIC_TWO_new, {onLeave: function (args) {send("X9_62_CHARACTERISTIC_TWO_new");}});

var X9_62_CURVE_it = Module.findExportByName("libcrypto.dll", "X9_62_CURVE_it")
Interceptor.attach(X9_62_CURVE_it, {onLeave: function (args) {send("X9_62_CURVE_it");}});

var X9_62_FIELDID_it = Module.findExportByName("libcrypto.dll", "X9_62_FIELDID_it")
Interceptor.attach(X9_62_FIELDID_it, {onLeave: function (args) {send("X9_62_FIELDID_it");}});

var X9_62_PENTANOMIAL_free = Module.findExportByName("libcrypto.dll", "X9_62_PENTANOMIAL_free")
Interceptor.attach(X9_62_PENTANOMIAL_free, {onLeave: function (args) {send("X9_62_PENTANOMIAL_free");}});

var X9_62_PENTANOMIAL_it = Module.findExportByName("libcrypto.dll", "X9_62_PENTANOMIAL_it")
Interceptor.attach(X9_62_PENTANOMIAL_it, {onLeave: function (args) {send("X9_62_PENTANOMIAL_it");}});

var X9_62_PENTANOMIAL_new = Module.findExportByName("libcrypto.dll", "X9_62_PENTANOMIAL_new")
Interceptor.attach(X9_62_PENTANOMIAL_new, {onLeave: function (args) {send("X9_62_PENTANOMIAL_new");}});

var ZLONG_it = Module.findExportByName("libcrypto.dll", "ZLONG_it")
Interceptor.attach(ZLONG_it, {onLeave: function (args) {send("ZLONG_it");}});

var _CONF_add_string = Module.findExportByName("libcrypto.dll", "_CONF_add_string")
Interceptor.attach(_CONF_add_string, {onLeave: function (args) {send("_CONF_add_string");}});

var _CONF_free_data = Module.findExportByName("libcrypto.dll", "_CONF_free_data")
Interceptor.attach(_CONF_free_data, {onLeave: function (args) {send("_CONF_free_data");}});

var _CONF_get_section = Module.findExportByName("libcrypto.dll", "_CONF_get_section")
Interceptor.attach(_CONF_get_section, {onLeave: function (args) {send("_CONF_get_section");}});

var _CONF_get_section_values = Module.findExportByName("libcrypto.dll", "_CONF_get_section_values")
Interceptor.attach(_CONF_get_section_values, {onLeave: function (args) {send("_CONF_get_section_values");}});

var _CONF_get_string = Module.findExportByName("libcrypto.dll", "_CONF_get_string")
Interceptor.attach(_CONF_get_string, {onLeave: function (args) {send("_CONF_get_string");}});

var _CONF_new_data = Module.findExportByName("libcrypto.dll", "_CONF_new_data")
Interceptor.attach(_CONF_new_data, {onLeave: function (args) {send("_CONF_new_data");}});

var _CONF_new_section = Module.findExportByName("libcrypto.dll", "_CONF_new_section")
Interceptor.attach(_CONF_new_section, {onLeave: function (args) {send("_CONF_new_section");}});

var a2d_ASN1_OBJECT = Module.findExportByName("libcrypto.dll", "a2d_ASN1_OBJECT")
Interceptor.attach(a2d_ASN1_OBJECT, {onLeave: function (args) {send("a2d_ASN1_OBJECT");}});

var a2i_ASN1_ENUMERATED = Module.findExportByName("libcrypto.dll", "a2i_ASN1_ENUMERATED")
Interceptor.attach(a2i_ASN1_ENUMERATED, {onLeave: function (args) {send("a2i_ASN1_ENUMERATED");}});

var a2i_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "a2i_ASN1_INTEGER")
Interceptor.attach(a2i_ASN1_INTEGER, {onLeave: function (args) {send("a2i_ASN1_INTEGER");}});

var a2i_ASN1_STRING = Module.findExportByName("libcrypto.dll", "a2i_ASN1_STRING")
Interceptor.attach(a2i_ASN1_STRING, {onLeave: function (args) {send("a2i_ASN1_STRING");}});

var a2i_GENERAL_NAME = Module.findExportByName("libcrypto.dll", "a2i_GENERAL_NAME")
Interceptor.attach(a2i_GENERAL_NAME, {onLeave: function (args) {send("a2i_GENERAL_NAME");}});

var a2i_IPADDRESS = Module.findExportByName("libcrypto.dll", "a2i_IPADDRESS")
Interceptor.attach(a2i_IPADDRESS, {onLeave: function (args) {send("a2i_IPADDRESS");}});

var a2i_IPADDRESS_NC = Module.findExportByName("libcrypto.dll", "a2i_IPADDRESS_NC")
Interceptor.attach(a2i_IPADDRESS_NC, {onLeave: function (args) {send("a2i_IPADDRESS_NC");}});

var a2i_ipadd = Module.findExportByName("libcrypto.dll", "a2i_ipadd")
Interceptor.attach(a2i_ipadd, {onLeave: function (args) {send("a2i_ipadd");}});

var arc4random = Module.findExportByName("libcrypto.dll", "arc4random")
Interceptor.attach(arc4random, {onLeave: function (args) {send("arc4random");}});

var arc4random_buf = Module.findExportByName("libcrypto.dll", "arc4random_buf")
Interceptor.attach(arc4random_buf, {onLeave: function (args) {send("arc4random_buf");}});

var arc4random_uniform = Module.findExportByName("libcrypto.dll", "arc4random_uniform")
Interceptor.attach(arc4random_uniform, {onLeave: function (args) {send("arc4random_uniform");}});

var asn1_do_adb = Module.findExportByName("libcrypto.dll", "asn1_do_adb")
Interceptor.attach(asn1_do_adb, {onLeave: function (args) {send("asn1_do_adb");}});

var asn1_do_lock = Module.findExportByName("libcrypto.dll", "asn1_do_lock")
Interceptor.attach(asn1_do_lock, {onLeave: function (args) {send("asn1_do_lock");}});

var asn1_enc_free = Module.findExportByName("libcrypto.dll", "asn1_enc_free")
Interceptor.attach(asn1_enc_free, {onLeave: function (args) {send("asn1_enc_free");}});

var asn1_enc_init = Module.findExportByName("libcrypto.dll", "asn1_enc_init")
Interceptor.attach(asn1_enc_init, {onLeave: function (args) {send("asn1_enc_init");}});

var asn1_enc_restore = Module.findExportByName("libcrypto.dll", "asn1_enc_restore")
Interceptor.attach(asn1_enc_restore, {onLeave: function (args) {send("asn1_enc_restore");}});

var asn1_enc_save = Module.findExportByName("libcrypto.dll", "asn1_enc_save")
Interceptor.attach(asn1_enc_save, {onLeave: function (args) {send("asn1_enc_save");}});

var asn1_ex_c2i = Module.findExportByName("libcrypto.dll", "asn1_ex_c2i")
Interceptor.attach(asn1_ex_c2i, {onLeave: function (args) {send("asn1_ex_c2i");}});

var asn1_get_choice_selector = Module.findExportByName("libcrypto.dll", "asn1_get_choice_selector")
Interceptor.attach(asn1_get_choice_selector, {onLeave: function (args) {send("asn1_get_choice_selector");}});

var asn1_get_field_ptr = Module.findExportByName("libcrypto.dll", "asn1_get_field_ptr")
Interceptor.attach(asn1_get_field_ptr, {onLeave: function (args) {send("asn1_get_field_ptr");}});

var asn1_set_choice_selector = Module.findExportByName("libcrypto.dll", "asn1_set_choice_selector")
Interceptor.attach(asn1_set_choice_selector, {onLeave: function (args) {send("asn1_set_choice_selector");}});

var asprintf = Module.findExportByName("libcrypto.dll", "asprintf")
Interceptor.attach(asprintf, {onLeave: function (args) {send("asprintf");}});

var b2i_PVK_bio = Module.findExportByName("libcrypto.dll", "b2i_PVK_bio")
Interceptor.attach(b2i_PVK_bio, {onLeave: function (args) {send("b2i_PVK_bio");}});

var b2i_PrivateKey = Module.findExportByName("libcrypto.dll", "b2i_PrivateKey")
Interceptor.attach(b2i_PrivateKey, {onLeave: function (args) {send("b2i_PrivateKey");}});

var b2i_PrivateKey_bio = Module.findExportByName("libcrypto.dll", "b2i_PrivateKey_bio")
Interceptor.attach(b2i_PrivateKey_bio, {onLeave: function (args) {send("b2i_PrivateKey_bio");}});

var b2i_PublicKey = Module.findExportByName("libcrypto.dll", "b2i_PublicKey")
Interceptor.attach(b2i_PublicKey, {onLeave: function (args) {send("b2i_PublicKey");}});

var b2i_PublicKey_bio = Module.findExportByName("libcrypto.dll", "b2i_PublicKey_bio")
Interceptor.attach(b2i_PublicKey_bio, {onLeave: function (args) {send("b2i_PublicKey_bio");}});

var c2i_ASN1_BIT_STRING = Module.findExportByName("libcrypto.dll", "c2i_ASN1_BIT_STRING")
Interceptor.attach(c2i_ASN1_BIT_STRING, {onLeave: function (args) {send("c2i_ASN1_BIT_STRING");}});

var c2i_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "c2i_ASN1_INTEGER")
Interceptor.attach(c2i_ASN1_INTEGER, {onLeave: function (args) {send("c2i_ASN1_INTEGER");}});

var c2i_ASN1_OBJECT = Module.findExportByName("libcrypto.dll", "c2i_ASN1_OBJECT")
Interceptor.attach(c2i_ASN1_OBJECT, {onLeave: function (args) {send("c2i_ASN1_OBJECT");}});

var check_defer = Module.findExportByName("libcrypto.dll", "check_defer")
Interceptor.attach(check_defer, {onLeave: function (args) {send("check_defer");}});

var d2i_ACCESS_DESCRIPTION = Module.findExportByName("libcrypto.dll", "d2i_ACCESS_DESCRIPTION")
Interceptor.attach(d2i_ACCESS_DESCRIPTION, {onLeave: function (args) {send("d2i_ACCESS_DESCRIPTION");}});

var d2i_ASN1_BIT_STRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_BIT_STRING")
Interceptor.attach(d2i_ASN1_BIT_STRING, {onLeave: function (args) {send("d2i_ASN1_BIT_STRING");}});

var d2i_ASN1_BMPSTRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_BMPSTRING")
Interceptor.attach(d2i_ASN1_BMPSTRING, {onLeave: function (args) {send("d2i_ASN1_BMPSTRING");}});

var d2i_ASN1_BOOLEAN = Module.findExportByName("libcrypto.dll", "d2i_ASN1_BOOLEAN")
Interceptor.attach(d2i_ASN1_BOOLEAN, {onLeave: function (args) {send("d2i_ASN1_BOOLEAN");}});

var d2i_ASN1_ENUMERATED = Module.findExportByName("libcrypto.dll", "d2i_ASN1_ENUMERATED")
Interceptor.attach(d2i_ASN1_ENUMERATED, {onLeave: function (args) {send("d2i_ASN1_ENUMERATED");}});

var d2i_ASN1_GENERALIZEDTIME = Module.findExportByName("libcrypto.dll", "d2i_ASN1_GENERALIZEDTIME")
Interceptor.attach(d2i_ASN1_GENERALIZEDTIME, {onLeave: function (args) {send("d2i_ASN1_GENERALIZEDTIME");}});

var d2i_ASN1_GENERALSTRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_GENERALSTRING")
Interceptor.attach(d2i_ASN1_GENERALSTRING, {onLeave: function (args) {send("d2i_ASN1_GENERALSTRING");}});

var d2i_ASN1_IA5STRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_IA5STRING")
Interceptor.attach(d2i_ASN1_IA5STRING, {onLeave: function (args) {send("d2i_ASN1_IA5STRING");}});

var d2i_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "d2i_ASN1_INTEGER")
Interceptor.attach(d2i_ASN1_INTEGER, {onLeave: function (args) {send("d2i_ASN1_INTEGER");}});

var d2i_ASN1_NULL = Module.findExportByName("libcrypto.dll", "d2i_ASN1_NULL")
Interceptor.attach(d2i_ASN1_NULL, {onLeave: function (args) {send("d2i_ASN1_NULL");}});

var d2i_ASN1_OBJECT = Module.findExportByName("libcrypto.dll", "d2i_ASN1_OBJECT")
Interceptor.attach(d2i_ASN1_OBJECT, {onLeave: function (args) {send("d2i_ASN1_OBJECT");}});

var d2i_ASN1_OCTET_STRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_OCTET_STRING")
Interceptor.attach(d2i_ASN1_OCTET_STRING, {onLeave: function (args) {send("d2i_ASN1_OCTET_STRING");}});

var d2i_ASN1_PRINTABLE = Module.findExportByName("libcrypto.dll", "d2i_ASN1_PRINTABLE")
Interceptor.attach(d2i_ASN1_PRINTABLE, {onLeave: function (args) {send("d2i_ASN1_PRINTABLE");}});

var d2i_ASN1_PRINTABLESTRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_PRINTABLESTRING")
Interceptor.attach(d2i_ASN1_PRINTABLESTRING, {onLeave: function (args) {send("d2i_ASN1_PRINTABLESTRING");}});

var d2i_ASN1_SEQUENCE_ANY = Module.findExportByName("libcrypto.dll", "d2i_ASN1_SEQUENCE_ANY")
Interceptor.attach(d2i_ASN1_SEQUENCE_ANY, {onLeave: function (args) {send("d2i_ASN1_SEQUENCE_ANY");}});

var d2i_ASN1_SET_ANY = Module.findExportByName("libcrypto.dll", "d2i_ASN1_SET_ANY")
Interceptor.attach(d2i_ASN1_SET_ANY, {onLeave: function (args) {send("d2i_ASN1_SET_ANY");}});

var d2i_ASN1_T61STRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_T61STRING")
Interceptor.attach(d2i_ASN1_T61STRING, {onLeave: function (args) {send("d2i_ASN1_T61STRING");}});

var d2i_ASN1_TIME = Module.findExportByName("libcrypto.dll", "d2i_ASN1_TIME")
Interceptor.attach(d2i_ASN1_TIME, {onLeave: function (args) {send("d2i_ASN1_TIME");}});

var d2i_ASN1_TYPE = Module.findExportByName("libcrypto.dll", "d2i_ASN1_TYPE")
Interceptor.attach(d2i_ASN1_TYPE, {onLeave: function (args) {send("d2i_ASN1_TYPE");}});

var d2i_ASN1_UINTEGER = Module.findExportByName("libcrypto.dll", "d2i_ASN1_UINTEGER")
Interceptor.attach(d2i_ASN1_UINTEGER, {onLeave: function (args) {send("d2i_ASN1_UINTEGER");}});

var d2i_ASN1_UNIVERSALSTRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_UNIVERSALSTRING")
Interceptor.attach(d2i_ASN1_UNIVERSALSTRING, {onLeave: function (args) {send("d2i_ASN1_UNIVERSALSTRING");}});

var d2i_ASN1_UTCTIME = Module.findExportByName("libcrypto.dll", "d2i_ASN1_UTCTIME")
Interceptor.attach(d2i_ASN1_UTCTIME, {onLeave: function (args) {send("d2i_ASN1_UTCTIME");}});

var d2i_ASN1_UTF8STRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_UTF8STRING")
Interceptor.attach(d2i_ASN1_UTF8STRING, {onLeave: function (args) {send("d2i_ASN1_UTF8STRING");}});

var d2i_ASN1_VISIBLESTRING = Module.findExportByName("libcrypto.dll", "d2i_ASN1_VISIBLESTRING")
Interceptor.attach(d2i_ASN1_VISIBLESTRING, {onLeave: function (args) {send("d2i_ASN1_VISIBLESTRING");}});

var d2i_AUTHORITY_INFO_ACCESS = Module.findExportByName("libcrypto.dll", "d2i_AUTHORITY_INFO_ACCESS")
Interceptor.attach(d2i_AUTHORITY_INFO_ACCESS, {onLeave: function (args) {send("d2i_AUTHORITY_INFO_ACCESS");}});

var d2i_AUTHORITY_KEYID = Module.findExportByName("libcrypto.dll", "d2i_AUTHORITY_KEYID")
Interceptor.attach(d2i_AUTHORITY_KEYID, {onLeave: function (args) {send("d2i_AUTHORITY_KEYID");}});

var d2i_AutoPrivateKey = Module.findExportByName("libcrypto.dll", "d2i_AutoPrivateKey")
Interceptor.attach(d2i_AutoPrivateKey, {onLeave: function (args) {send("d2i_AutoPrivateKey");}});

var d2i_BASIC_CONSTRAINTS = Module.findExportByName("libcrypto.dll", "d2i_BASIC_CONSTRAINTS")
Interceptor.attach(d2i_BASIC_CONSTRAINTS, {onLeave: function (args) {send("d2i_BASIC_CONSTRAINTS");}});

var d2i_CERTIFICATEPOLICIES = Module.findExportByName("libcrypto.dll", "d2i_CERTIFICATEPOLICIES")
Interceptor.attach(d2i_CERTIFICATEPOLICIES, {onLeave: function (args) {send("d2i_CERTIFICATEPOLICIES");}});

var d2i_CMS_ContentInfo = Module.findExportByName("libcrypto.dll", "d2i_CMS_ContentInfo")
Interceptor.attach(d2i_CMS_ContentInfo, {onLeave: function (args) {send("d2i_CMS_ContentInfo");}});

var d2i_CMS_ReceiptRequest = Module.findExportByName("libcrypto.dll", "d2i_CMS_ReceiptRequest")
Interceptor.attach(d2i_CMS_ReceiptRequest, {onLeave: function (args) {send("d2i_CMS_ReceiptRequest");}});

var d2i_CMS_bio = Module.findExportByName("libcrypto.dll", "d2i_CMS_bio")
Interceptor.attach(d2i_CMS_bio, {onLeave: function (args) {send("d2i_CMS_bio");}});

var d2i_CRL_DIST_POINTS = Module.findExportByName("libcrypto.dll", "d2i_CRL_DIST_POINTS")
Interceptor.attach(d2i_CRL_DIST_POINTS, {onLeave: function (args) {send("d2i_CRL_DIST_POINTS");}});

var d2i_DHparams = Module.findExportByName("libcrypto.dll", "d2i_DHparams")
Interceptor.attach(d2i_DHparams, {onLeave: function (args) {send("d2i_DHparams");}});

var d2i_DHparams_bio = Module.findExportByName("libcrypto.dll", "d2i_DHparams_bio")
Interceptor.attach(d2i_DHparams_bio, {onLeave: function (args) {send("d2i_DHparams_bio");}});

var d2i_DHparams_fp = Module.findExportByName("libcrypto.dll", "d2i_DHparams_fp")
Interceptor.attach(d2i_DHparams_fp, {onLeave: function (args) {send("d2i_DHparams_fp");}});

var d2i_DIRECTORYSTRING = Module.findExportByName("libcrypto.dll", "d2i_DIRECTORYSTRING")
Interceptor.attach(d2i_DIRECTORYSTRING, {onLeave: function (args) {send("d2i_DIRECTORYSTRING");}});

var d2i_DISPLAYTEXT = Module.findExportByName("libcrypto.dll", "d2i_DISPLAYTEXT")
Interceptor.attach(d2i_DISPLAYTEXT, {onLeave: function (args) {send("d2i_DISPLAYTEXT");}});

var d2i_DIST_POINT = Module.findExportByName("libcrypto.dll", "d2i_DIST_POINT")
Interceptor.attach(d2i_DIST_POINT, {onLeave: function (args) {send("d2i_DIST_POINT");}});

var d2i_DIST_POINT_NAME = Module.findExportByName("libcrypto.dll", "d2i_DIST_POINT_NAME")
Interceptor.attach(d2i_DIST_POINT_NAME, {onLeave: function (args) {send("d2i_DIST_POINT_NAME");}});

var d2i_DSAPrivateKey = Module.findExportByName("libcrypto.dll", "d2i_DSAPrivateKey")
Interceptor.attach(d2i_DSAPrivateKey, {onLeave: function (args) {send("d2i_DSAPrivateKey");}});

var d2i_DSAPrivateKey_bio = Module.findExportByName("libcrypto.dll", "d2i_DSAPrivateKey_bio")
Interceptor.attach(d2i_DSAPrivateKey_bio, {onLeave: function (args) {send("d2i_DSAPrivateKey_bio");}});

var d2i_DSAPrivateKey_fp = Module.findExportByName("libcrypto.dll", "d2i_DSAPrivateKey_fp")
Interceptor.attach(d2i_DSAPrivateKey_fp, {onLeave: function (args) {send("d2i_DSAPrivateKey_fp");}});

var d2i_DSAPublicKey = Module.findExportByName("libcrypto.dll", "d2i_DSAPublicKey")
Interceptor.attach(d2i_DSAPublicKey, {onLeave: function (args) {send("d2i_DSAPublicKey");}});

var d2i_DSA_PUBKEY = Module.findExportByName("libcrypto.dll", "d2i_DSA_PUBKEY")
Interceptor.attach(d2i_DSA_PUBKEY, {onLeave: function (args) {send("d2i_DSA_PUBKEY");}});

var d2i_DSA_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "d2i_DSA_PUBKEY_bio")
Interceptor.attach(d2i_DSA_PUBKEY_bio, {onLeave: function (args) {send("d2i_DSA_PUBKEY_bio");}});

var d2i_DSA_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "d2i_DSA_PUBKEY_fp")
Interceptor.attach(d2i_DSA_PUBKEY_fp, {onLeave: function (args) {send("d2i_DSA_PUBKEY_fp");}});

var d2i_DSA_SIG = Module.findExportByName("libcrypto.dll", "d2i_DSA_SIG")
Interceptor.attach(d2i_DSA_SIG, {onLeave: function (args) {send("d2i_DSA_SIG");}});

var d2i_DSAparams = Module.findExportByName("libcrypto.dll", "d2i_DSAparams")
Interceptor.attach(d2i_DSAparams, {onLeave: function (args) {send("d2i_DSAparams");}});

var d2i_DSAparams_bio = Module.findExportByName("libcrypto.dll", "d2i_DSAparams_bio")
Interceptor.attach(d2i_DSAparams_bio, {onLeave: function (args) {send("d2i_DSAparams_bio");}});

var d2i_DSAparams_fp = Module.findExportByName("libcrypto.dll", "d2i_DSAparams_fp")
Interceptor.attach(d2i_DSAparams_fp, {onLeave: function (args) {send("d2i_DSAparams_fp");}});

var d2i_ECDSA_SIG = Module.findExportByName("libcrypto.dll", "d2i_ECDSA_SIG")
Interceptor.attach(d2i_ECDSA_SIG, {onLeave: function (args) {send("d2i_ECDSA_SIG");}});

var d2i_ECPKPARAMETERS = Module.findExportByName("libcrypto.dll", "d2i_ECPKPARAMETERS")
Interceptor.attach(d2i_ECPKPARAMETERS, {onLeave: function (args) {send("d2i_ECPKPARAMETERS");}});

var d2i_ECPKParameters = Module.findExportByName("libcrypto.dll", "d2i_ECPKParameters")
Interceptor.attach(d2i_ECPKParameters, {onLeave: function (args) {send("d2i_ECPKParameters");}});

var d2i_ECParameters = Module.findExportByName("libcrypto.dll", "d2i_ECParameters")
Interceptor.attach(d2i_ECParameters, {onLeave: function (args) {send("d2i_ECParameters");}});

var d2i_ECPrivateKey = Module.findExportByName("libcrypto.dll", "d2i_ECPrivateKey")
Interceptor.attach(d2i_ECPrivateKey, {onLeave: function (args) {send("d2i_ECPrivateKey");}});

var d2i_ECPrivateKey_bio = Module.findExportByName("libcrypto.dll", "d2i_ECPrivateKey_bio")
Interceptor.attach(d2i_ECPrivateKey_bio, {onLeave: function (args) {send("d2i_ECPrivateKey_bio");}});

var d2i_ECPrivateKey_fp = Module.findExportByName("libcrypto.dll", "d2i_ECPrivateKey_fp")
Interceptor.attach(d2i_ECPrivateKey_fp, {onLeave: function (args) {send("d2i_ECPrivateKey_fp");}});

var d2i_EC_PRIVATEKEY = Module.findExportByName("libcrypto.dll", "d2i_EC_PRIVATEKEY")
Interceptor.attach(d2i_EC_PRIVATEKEY, {onLeave: function (args) {send("d2i_EC_PRIVATEKEY");}});

var d2i_EC_PUBKEY = Module.findExportByName("libcrypto.dll", "d2i_EC_PUBKEY")
Interceptor.attach(d2i_EC_PUBKEY, {onLeave: function (args) {send("d2i_EC_PUBKEY");}});

var d2i_EC_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "d2i_EC_PUBKEY_bio")
Interceptor.attach(d2i_EC_PUBKEY_bio, {onLeave: function (args) {send("d2i_EC_PUBKEY_bio");}});

var d2i_EC_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "d2i_EC_PUBKEY_fp")
Interceptor.attach(d2i_EC_PUBKEY_fp, {onLeave: function (args) {send("d2i_EC_PUBKEY_fp");}});

var d2i_EDIPARTYNAME = Module.findExportByName("libcrypto.dll", "d2i_EDIPARTYNAME")
Interceptor.attach(d2i_EDIPARTYNAME, {onLeave: function (args) {send("d2i_EDIPARTYNAME");}});

var d2i_ESS_CERT_ID = Module.findExportByName("libcrypto.dll", "d2i_ESS_CERT_ID")
Interceptor.attach(d2i_ESS_CERT_ID, {onLeave: function (args) {send("d2i_ESS_CERT_ID");}});

var d2i_ESS_ISSUER_SERIAL = Module.findExportByName("libcrypto.dll", "d2i_ESS_ISSUER_SERIAL")
Interceptor.attach(d2i_ESS_ISSUER_SERIAL, {onLeave: function (args) {send("d2i_ESS_ISSUER_SERIAL");}});

var d2i_ESS_SIGNING_CERT = Module.findExportByName("libcrypto.dll", "d2i_ESS_SIGNING_CERT")
Interceptor.attach(d2i_ESS_SIGNING_CERT, {onLeave: function (args) {send("d2i_ESS_SIGNING_CERT");}});

var d2i_EXTENDED_KEY_USAGE = Module.findExportByName("libcrypto.dll", "d2i_EXTENDED_KEY_USAGE")
Interceptor.attach(d2i_EXTENDED_KEY_USAGE, {onLeave: function (args) {send("d2i_EXTENDED_KEY_USAGE");}});

var d2i_GENERAL_NAME = Module.findExportByName("libcrypto.dll", "d2i_GENERAL_NAME")
Interceptor.attach(d2i_GENERAL_NAME, {onLeave: function (args) {send("d2i_GENERAL_NAME");}});

var d2i_GENERAL_NAMES = Module.findExportByName("libcrypto.dll", "d2i_GENERAL_NAMES")
Interceptor.attach(d2i_GENERAL_NAMES, {onLeave: function (args) {send("d2i_GENERAL_NAMES");}});

var d2i_GOST_CIPHER_PARAMS = Module.findExportByName("libcrypto.dll", "d2i_GOST_CIPHER_PARAMS")
Interceptor.attach(d2i_GOST_CIPHER_PARAMS, {onLeave: function (args) {send("d2i_GOST_CIPHER_PARAMS");}});

var d2i_ISSUING_DIST_POINT = Module.findExportByName("libcrypto.dll", "d2i_ISSUING_DIST_POINT")
Interceptor.attach(d2i_ISSUING_DIST_POINT, {onLeave: function (args) {send("d2i_ISSUING_DIST_POINT");}});

var d2i_NETSCAPE_CERT_SEQUENCE = Module.findExportByName("libcrypto.dll", "d2i_NETSCAPE_CERT_SEQUENCE")
Interceptor.attach(d2i_NETSCAPE_CERT_SEQUENCE, {onLeave: function (args) {send("d2i_NETSCAPE_CERT_SEQUENCE");}});

var d2i_NETSCAPE_ENCRYPTED_PKEY = Module.findExportByName("libcrypto.dll", "d2i_NETSCAPE_ENCRYPTED_PKEY")
Interceptor.attach(d2i_NETSCAPE_ENCRYPTED_PKEY, {onLeave: function (args) {send("d2i_NETSCAPE_ENCRYPTED_PKEY");}});

var d2i_NETSCAPE_PKEY = Module.findExportByName("libcrypto.dll", "d2i_NETSCAPE_PKEY")
Interceptor.attach(d2i_NETSCAPE_PKEY, {onLeave: function (args) {send("d2i_NETSCAPE_PKEY");}});

var d2i_NETSCAPE_SPKAC = Module.findExportByName("libcrypto.dll", "d2i_NETSCAPE_SPKAC")
Interceptor.attach(d2i_NETSCAPE_SPKAC, {onLeave: function (args) {send("d2i_NETSCAPE_SPKAC");}});

var d2i_NETSCAPE_SPKI = Module.findExportByName("libcrypto.dll", "d2i_NETSCAPE_SPKI")
Interceptor.attach(d2i_NETSCAPE_SPKI, {onLeave: function (args) {send("d2i_NETSCAPE_SPKI");}});

var d2i_NETSCAPE_X509 = Module.findExportByName("libcrypto.dll", "d2i_NETSCAPE_X509")
Interceptor.attach(d2i_NETSCAPE_X509, {onLeave: function (args) {send("d2i_NETSCAPE_X509");}});

var d2i_NOTICEREF = Module.findExportByName("libcrypto.dll", "d2i_NOTICEREF")
Interceptor.attach(d2i_NOTICEREF, {onLeave: function (args) {send("d2i_NOTICEREF");}});

var d2i_Netscape_RSA = Module.findExportByName("libcrypto.dll", "d2i_Netscape_RSA")
Interceptor.attach(d2i_Netscape_RSA, {onLeave: function (args) {send("d2i_Netscape_RSA");}});

var d2i_OCSP_BASICRESP = Module.findExportByName("libcrypto.dll", "d2i_OCSP_BASICRESP")
Interceptor.attach(d2i_OCSP_BASICRESP, {onLeave: function (args) {send("d2i_OCSP_BASICRESP");}});

var d2i_OCSP_CERTID = Module.findExportByName("libcrypto.dll", "d2i_OCSP_CERTID")
Interceptor.attach(d2i_OCSP_CERTID, {onLeave: function (args) {send("d2i_OCSP_CERTID");}});

var d2i_OCSP_CERTSTATUS = Module.findExportByName("libcrypto.dll", "d2i_OCSP_CERTSTATUS")
Interceptor.attach(d2i_OCSP_CERTSTATUS, {onLeave: function (args) {send("d2i_OCSP_CERTSTATUS");}});

var d2i_OCSP_CRLID = Module.findExportByName("libcrypto.dll", "d2i_OCSP_CRLID")
Interceptor.attach(d2i_OCSP_CRLID, {onLeave: function (args) {send("d2i_OCSP_CRLID");}});

var d2i_OCSP_ONEREQ = Module.findExportByName("libcrypto.dll", "d2i_OCSP_ONEREQ")
Interceptor.attach(d2i_OCSP_ONEREQ, {onLeave: function (args) {send("d2i_OCSP_ONEREQ");}});

var d2i_OCSP_REQINFO = Module.findExportByName("libcrypto.dll", "d2i_OCSP_REQINFO")
Interceptor.attach(d2i_OCSP_REQINFO, {onLeave: function (args) {send("d2i_OCSP_REQINFO");}});

var d2i_OCSP_REQUEST = Module.findExportByName("libcrypto.dll", "d2i_OCSP_REQUEST")
Interceptor.attach(d2i_OCSP_REQUEST, {onLeave: function (args) {send("d2i_OCSP_REQUEST");}});

var d2i_OCSP_REQUEST_bio = Module.findExportByName("libcrypto.dll", "d2i_OCSP_REQUEST_bio")
Interceptor.attach(d2i_OCSP_REQUEST_bio, {onLeave: function (args) {send("d2i_OCSP_REQUEST_bio");}});

var d2i_OCSP_RESPBYTES = Module.findExportByName("libcrypto.dll", "d2i_OCSP_RESPBYTES")
Interceptor.attach(d2i_OCSP_RESPBYTES, {onLeave: function (args) {send("d2i_OCSP_RESPBYTES");}});

var d2i_OCSP_RESPDATA = Module.findExportByName("libcrypto.dll", "d2i_OCSP_RESPDATA")
Interceptor.attach(d2i_OCSP_RESPDATA, {onLeave: function (args) {send("d2i_OCSP_RESPDATA");}});

var d2i_OCSP_RESPID = Module.findExportByName("libcrypto.dll", "d2i_OCSP_RESPID")
Interceptor.attach(d2i_OCSP_RESPID, {onLeave: function (args) {send("d2i_OCSP_RESPID");}});

var d2i_OCSP_RESPONSE = Module.findExportByName("libcrypto.dll", "d2i_OCSP_RESPONSE")
Interceptor.attach(d2i_OCSP_RESPONSE, {onLeave: function (args) {send("d2i_OCSP_RESPONSE");}});

var d2i_OCSP_RESPONSE_bio = Module.findExportByName("libcrypto.dll", "d2i_OCSP_RESPONSE_bio")
Interceptor.attach(d2i_OCSP_RESPONSE_bio, {onLeave: function (args) {send("d2i_OCSP_RESPONSE_bio");}});

var d2i_OCSP_REVOKEDINFO = Module.findExportByName("libcrypto.dll", "d2i_OCSP_REVOKEDINFO")
Interceptor.attach(d2i_OCSP_REVOKEDINFO, {onLeave: function (args) {send("d2i_OCSP_REVOKEDINFO");}});

var d2i_OCSP_SERVICELOC = Module.findExportByName("libcrypto.dll", "d2i_OCSP_SERVICELOC")
Interceptor.attach(d2i_OCSP_SERVICELOC, {onLeave: function (args) {send("d2i_OCSP_SERVICELOC");}});

var d2i_OCSP_SIGNATURE = Module.findExportByName("libcrypto.dll", "d2i_OCSP_SIGNATURE")
Interceptor.attach(d2i_OCSP_SIGNATURE, {onLeave: function (args) {send("d2i_OCSP_SIGNATURE");}});

var d2i_OCSP_SINGLERESP = Module.findExportByName("libcrypto.dll", "d2i_OCSP_SINGLERESP")
Interceptor.attach(d2i_OCSP_SINGLERESP, {onLeave: function (args) {send("d2i_OCSP_SINGLERESP");}});

var d2i_OTHERNAME = Module.findExportByName("libcrypto.dll", "d2i_OTHERNAME")
Interceptor.attach(d2i_OTHERNAME, {onLeave: function (args) {send("d2i_OTHERNAME");}});

var d2i_PBE2PARAM = Module.findExportByName("libcrypto.dll", "d2i_PBE2PARAM")
Interceptor.attach(d2i_PBE2PARAM, {onLeave: function (args) {send("d2i_PBE2PARAM");}});

var d2i_PBEPARAM = Module.findExportByName("libcrypto.dll", "d2i_PBEPARAM")
Interceptor.attach(d2i_PBEPARAM, {onLeave: function (args) {send("d2i_PBEPARAM");}});

var d2i_PBKDF2PARAM = Module.findExportByName("libcrypto.dll", "d2i_PBKDF2PARAM")
Interceptor.attach(d2i_PBKDF2PARAM, {onLeave: function (args) {send("d2i_PBKDF2PARAM");}});

var d2i_PKCS12 = Module.findExportByName("libcrypto.dll", "d2i_PKCS12")
Interceptor.attach(d2i_PKCS12, {onLeave: function (args) {send("d2i_PKCS12");}});

var d2i_PKCS12_BAGS = Module.findExportByName("libcrypto.dll", "d2i_PKCS12_BAGS")
Interceptor.attach(d2i_PKCS12_BAGS, {onLeave: function (args) {send("d2i_PKCS12_BAGS");}});

var d2i_PKCS12_MAC_DATA = Module.findExportByName("libcrypto.dll", "d2i_PKCS12_MAC_DATA")
Interceptor.attach(d2i_PKCS12_MAC_DATA, {onLeave: function (args) {send("d2i_PKCS12_MAC_DATA");}});

var d2i_PKCS12_SAFEBAG = Module.findExportByName("libcrypto.dll", "d2i_PKCS12_SAFEBAG")
Interceptor.attach(d2i_PKCS12_SAFEBAG, {onLeave: function (args) {send("d2i_PKCS12_SAFEBAG");}});

var d2i_PKCS12_bio = Module.findExportByName("libcrypto.dll", "d2i_PKCS12_bio")
Interceptor.attach(d2i_PKCS12_bio, {onLeave: function (args) {send("d2i_PKCS12_bio");}});

var d2i_PKCS12_fp = Module.findExportByName("libcrypto.dll", "d2i_PKCS12_fp")
Interceptor.attach(d2i_PKCS12_fp, {onLeave: function (args) {send("d2i_PKCS12_fp");}});

var d2i_PKCS7 = Module.findExportByName("libcrypto.dll", "d2i_PKCS7")
Interceptor.attach(d2i_PKCS7, {onLeave: function (args) {send("d2i_PKCS7");}});

var d2i_PKCS7_DIGEST = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_DIGEST")
Interceptor.attach(d2i_PKCS7_DIGEST, {onLeave: function (args) {send("d2i_PKCS7_DIGEST");}});

var d2i_PKCS7_ENCRYPT = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_ENCRYPT")
Interceptor.attach(d2i_PKCS7_ENCRYPT, {onLeave: function (args) {send("d2i_PKCS7_ENCRYPT");}});

var d2i_PKCS7_ENC_CONTENT = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_ENC_CONTENT")
Interceptor.attach(d2i_PKCS7_ENC_CONTENT, {onLeave: function (args) {send("d2i_PKCS7_ENC_CONTENT");}});

var d2i_PKCS7_ENVELOPE = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_ENVELOPE")
Interceptor.attach(d2i_PKCS7_ENVELOPE, {onLeave: function (args) {send("d2i_PKCS7_ENVELOPE");}});

var d2i_PKCS7_ISSUER_AND_SERIAL = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_ISSUER_AND_SERIAL")
Interceptor.attach(d2i_PKCS7_ISSUER_AND_SERIAL, {onLeave: function (args) {send("d2i_PKCS7_ISSUER_AND_SERIAL");}});

var d2i_PKCS7_RECIP_INFO = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_RECIP_INFO")
Interceptor.attach(d2i_PKCS7_RECIP_INFO, {onLeave: function (args) {send("d2i_PKCS7_RECIP_INFO");}});

var d2i_PKCS7_SIGNED = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_SIGNED")
Interceptor.attach(d2i_PKCS7_SIGNED, {onLeave: function (args) {send("d2i_PKCS7_SIGNED");}});

var d2i_PKCS7_SIGNER_INFO = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_SIGNER_INFO")
Interceptor.attach(d2i_PKCS7_SIGNER_INFO, {onLeave: function (args) {send("d2i_PKCS7_SIGNER_INFO");}});

var d2i_PKCS7_SIGN_ENVELOPE = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_SIGN_ENVELOPE")
Interceptor.attach(d2i_PKCS7_SIGN_ENVELOPE, {onLeave: function (args) {send("d2i_PKCS7_SIGN_ENVELOPE");}});

var d2i_PKCS7_bio = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_bio")
Interceptor.attach(d2i_PKCS7_bio, {onLeave: function (args) {send("d2i_PKCS7_bio");}});

var d2i_PKCS7_fp = Module.findExportByName("libcrypto.dll", "d2i_PKCS7_fp")
Interceptor.attach(d2i_PKCS7_fp, {onLeave: function (args) {send("d2i_PKCS7_fp");}});

var d2i_PKCS8PrivateKey_bio = Module.findExportByName("libcrypto.dll", "d2i_PKCS8PrivateKey_bio")
Interceptor.attach(d2i_PKCS8PrivateKey_bio, {onLeave: function (args) {send("d2i_PKCS8PrivateKey_bio");}});

var d2i_PKCS8PrivateKey_fp = Module.findExportByName("libcrypto.dll", "d2i_PKCS8PrivateKey_fp")
Interceptor.attach(d2i_PKCS8PrivateKey_fp, {onLeave: function (args) {send("d2i_PKCS8PrivateKey_fp");}});

var d2i_PKCS8_PRIV_KEY_INFO = Module.findExportByName("libcrypto.dll", "d2i_PKCS8_PRIV_KEY_INFO")
Interceptor.attach(d2i_PKCS8_PRIV_KEY_INFO, {onLeave: function (args) {send("d2i_PKCS8_PRIV_KEY_INFO");}});

var d2i_PKCS8_PRIV_KEY_INFO_bio = Module.findExportByName("libcrypto.dll", "d2i_PKCS8_PRIV_KEY_INFO_bio")
Interceptor.attach(d2i_PKCS8_PRIV_KEY_INFO_bio, {onLeave: function (args) {send("d2i_PKCS8_PRIV_KEY_INFO_bio");}});

var d2i_PKCS8_PRIV_KEY_INFO_fp = Module.findExportByName("libcrypto.dll", "d2i_PKCS8_PRIV_KEY_INFO_fp")
Interceptor.attach(d2i_PKCS8_PRIV_KEY_INFO_fp, {onLeave: function (args) {send("d2i_PKCS8_PRIV_KEY_INFO_fp");}});

var d2i_PKCS8_bio = Module.findExportByName("libcrypto.dll", "d2i_PKCS8_bio")
Interceptor.attach(d2i_PKCS8_bio, {onLeave: function (args) {send("d2i_PKCS8_bio");}});

var d2i_PKCS8_fp = Module.findExportByName("libcrypto.dll", "d2i_PKCS8_fp")
Interceptor.attach(d2i_PKCS8_fp, {onLeave: function (args) {send("d2i_PKCS8_fp");}});

var d2i_PKEY_USAGE_PERIOD = Module.findExportByName("libcrypto.dll", "d2i_PKEY_USAGE_PERIOD")
Interceptor.attach(d2i_PKEY_USAGE_PERIOD, {onLeave: function (args) {send("d2i_PKEY_USAGE_PERIOD");}});

var d2i_POLICYINFO = Module.findExportByName("libcrypto.dll", "d2i_POLICYINFO")
Interceptor.attach(d2i_POLICYINFO, {onLeave: function (args) {send("d2i_POLICYINFO");}});

var d2i_POLICYQUALINFO = Module.findExportByName("libcrypto.dll", "d2i_POLICYQUALINFO")
Interceptor.attach(d2i_POLICYQUALINFO, {onLeave: function (args) {send("d2i_POLICYQUALINFO");}});

var d2i_PROXY_CERT_INFO_EXTENSION = Module.findExportByName("libcrypto.dll", "d2i_PROXY_CERT_INFO_EXTENSION")
Interceptor.attach(d2i_PROXY_CERT_INFO_EXTENSION, {onLeave: function (args) {send("d2i_PROXY_CERT_INFO_EXTENSION");}});

var d2i_PROXY_POLICY = Module.findExportByName("libcrypto.dll", "d2i_PROXY_POLICY")
Interceptor.attach(d2i_PROXY_POLICY, {onLeave: function (args) {send("d2i_PROXY_POLICY");}});

var d2i_PUBKEY = Module.findExportByName("libcrypto.dll", "d2i_PUBKEY")
Interceptor.attach(d2i_PUBKEY, {onLeave: function (args) {send("d2i_PUBKEY");}});

var d2i_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "d2i_PUBKEY_bio")
Interceptor.attach(d2i_PUBKEY_bio, {onLeave: function (args) {send("d2i_PUBKEY_bio");}});

var d2i_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "d2i_PUBKEY_fp")
Interceptor.attach(d2i_PUBKEY_fp, {onLeave: function (args) {send("d2i_PUBKEY_fp");}});

var d2i_PrivateKey = Module.findExportByName("libcrypto.dll", "d2i_PrivateKey")
Interceptor.attach(d2i_PrivateKey, {onLeave: function (args) {send("d2i_PrivateKey");}});

var d2i_PrivateKey_bio = Module.findExportByName("libcrypto.dll", "d2i_PrivateKey_bio")
Interceptor.attach(d2i_PrivateKey_bio, {onLeave: function (args) {send("d2i_PrivateKey_bio");}});

var d2i_PrivateKey_fp = Module.findExportByName("libcrypto.dll", "d2i_PrivateKey_fp")
Interceptor.attach(d2i_PrivateKey_fp, {onLeave: function (args) {send("d2i_PrivateKey_fp");}});

var d2i_PublicKey = Module.findExportByName("libcrypto.dll", "d2i_PublicKey")
Interceptor.attach(d2i_PublicKey, {onLeave: function (args) {send("d2i_PublicKey");}});

var d2i_RSAPrivateKey = Module.findExportByName("libcrypto.dll", "d2i_RSAPrivateKey")
Interceptor.attach(d2i_RSAPrivateKey, {onLeave: function (args) {send("d2i_RSAPrivateKey");}});

var d2i_RSAPrivateKey_bio = Module.findExportByName("libcrypto.dll", "d2i_RSAPrivateKey_bio")
Interceptor.attach(d2i_RSAPrivateKey_bio, {onLeave: function (args) {send("d2i_RSAPrivateKey_bio");}});

var d2i_RSAPrivateKey_fp = Module.findExportByName("libcrypto.dll", "d2i_RSAPrivateKey_fp")
Interceptor.attach(d2i_RSAPrivateKey_fp, {onLeave: function (args) {send("d2i_RSAPrivateKey_fp");}});

var d2i_RSAPublicKey = Module.findExportByName("libcrypto.dll", "d2i_RSAPublicKey")
Interceptor.attach(d2i_RSAPublicKey, {onLeave: function (args) {send("d2i_RSAPublicKey");}});

var d2i_RSAPublicKey_bio = Module.findExportByName("libcrypto.dll", "d2i_RSAPublicKey_bio")
Interceptor.attach(d2i_RSAPublicKey_bio, {onLeave: function (args) {send("d2i_RSAPublicKey_bio");}});

var d2i_RSAPublicKey_fp = Module.findExportByName("libcrypto.dll", "d2i_RSAPublicKey_fp")
Interceptor.attach(d2i_RSAPublicKey_fp, {onLeave: function (args) {send("d2i_RSAPublicKey_fp");}});

var d2i_RSA_NET = Module.findExportByName("libcrypto.dll", "d2i_RSA_NET")
Interceptor.attach(d2i_RSA_NET, {onLeave: function (args) {send("d2i_RSA_NET");}});

var d2i_RSA_OAEP_PARAMS = Module.findExportByName("libcrypto.dll", "d2i_RSA_OAEP_PARAMS")
Interceptor.attach(d2i_RSA_OAEP_PARAMS, {onLeave: function (args) {send("d2i_RSA_OAEP_PARAMS");}});

var d2i_RSA_PSS_PARAMS = Module.findExportByName("libcrypto.dll", "d2i_RSA_PSS_PARAMS")
Interceptor.attach(d2i_RSA_PSS_PARAMS, {onLeave: function (args) {send("d2i_RSA_PSS_PARAMS");}});

var d2i_RSA_PUBKEY = Module.findExportByName("libcrypto.dll", "d2i_RSA_PUBKEY")
Interceptor.attach(d2i_RSA_PUBKEY, {onLeave: function (args) {send("d2i_RSA_PUBKEY");}});

var d2i_RSA_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "d2i_RSA_PUBKEY_bio")
Interceptor.attach(d2i_RSA_PUBKEY_bio, {onLeave: function (args) {send("d2i_RSA_PUBKEY_bio");}});

var d2i_RSA_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "d2i_RSA_PUBKEY_fp")
Interceptor.attach(d2i_RSA_PUBKEY_fp, {onLeave: function (args) {send("d2i_RSA_PUBKEY_fp");}});

var d2i_SXNET = Module.findExportByName("libcrypto.dll", "d2i_SXNET")
Interceptor.attach(d2i_SXNET, {onLeave: function (args) {send("d2i_SXNET");}});

var d2i_SXNETID = Module.findExportByName("libcrypto.dll", "d2i_SXNETID")
Interceptor.attach(d2i_SXNETID, {onLeave: function (args) {send("d2i_SXNETID");}});

var d2i_TS_ACCURACY = Module.findExportByName("libcrypto.dll", "d2i_TS_ACCURACY")
Interceptor.attach(d2i_TS_ACCURACY, {onLeave: function (args) {send("d2i_TS_ACCURACY");}});

var d2i_TS_MSG_IMPRINT = Module.findExportByName("libcrypto.dll", "d2i_TS_MSG_IMPRINT")
Interceptor.attach(d2i_TS_MSG_IMPRINT, {onLeave: function (args) {send("d2i_TS_MSG_IMPRINT");}});

var d2i_TS_MSG_IMPRINT_bio = Module.findExportByName("libcrypto.dll", "d2i_TS_MSG_IMPRINT_bio")
Interceptor.attach(d2i_TS_MSG_IMPRINT_bio, {onLeave: function (args) {send("d2i_TS_MSG_IMPRINT_bio");}});

var d2i_TS_MSG_IMPRINT_fp = Module.findExportByName("libcrypto.dll", "d2i_TS_MSG_IMPRINT_fp")
Interceptor.attach(d2i_TS_MSG_IMPRINT_fp, {onLeave: function (args) {send("d2i_TS_MSG_IMPRINT_fp");}});

var d2i_TS_REQ = Module.findExportByName("libcrypto.dll", "d2i_TS_REQ")
Interceptor.attach(d2i_TS_REQ, {onLeave: function (args) {send("d2i_TS_REQ");}});

var d2i_TS_REQ_bio = Module.findExportByName("libcrypto.dll", "d2i_TS_REQ_bio")
Interceptor.attach(d2i_TS_REQ_bio, {onLeave: function (args) {send("d2i_TS_REQ_bio");}});

var d2i_TS_REQ_fp = Module.findExportByName("libcrypto.dll", "d2i_TS_REQ_fp")
Interceptor.attach(d2i_TS_REQ_fp, {onLeave: function (args) {send("d2i_TS_REQ_fp");}});

var d2i_TS_RESP = Module.findExportByName("libcrypto.dll", "d2i_TS_RESP")
Interceptor.attach(d2i_TS_RESP, {onLeave: function (args) {send("d2i_TS_RESP");}});

var d2i_TS_RESP_bio = Module.findExportByName("libcrypto.dll", "d2i_TS_RESP_bio")
Interceptor.attach(d2i_TS_RESP_bio, {onLeave: function (args) {send("d2i_TS_RESP_bio");}});

var d2i_TS_RESP_fp = Module.findExportByName("libcrypto.dll", "d2i_TS_RESP_fp")
Interceptor.attach(d2i_TS_RESP_fp, {onLeave: function (args) {send("d2i_TS_RESP_fp");}});

var d2i_TS_STATUS_INFO = Module.findExportByName("libcrypto.dll", "d2i_TS_STATUS_INFO")
Interceptor.attach(d2i_TS_STATUS_INFO, {onLeave: function (args) {send("d2i_TS_STATUS_INFO");}});

var d2i_TS_TST_INFO = Module.findExportByName("libcrypto.dll", "d2i_TS_TST_INFO")
Interceptor.attach(d2i_TS_TST_INFO, {onLeave: function (args) {send("d2i_TS_TST_INFO");}});

var d2i_TS_TST_INFO_bio = Module.findExportByName("libcrypto.dll", "d2i_TS_TST_INFO_bio")
Interceptor.attach(d2i_TS_TST_INFO_bio, {onLeave: function (args) {send("d2i_TS_TST_INFO_bio");}});

var d2i_TS_TST_INFO_fp = Module.findExportByName("libcrypto.dll", "d2i_TS_TST_INFO_fp")
Interceptor.attach(d2i_TS_TST_INFO_fp, {onLeave: function (args) {send("d2i_TS_TST_INFO_fp");}});

var d2i_USERNOTICE = Module.findExportByName("libcrypto.dll", "d2i_USERNOTICE")
Interceptor.attach(d2i_USERNOTICE, {onLeave: function (args) {send("d2i_USERNOTICE");}});

var d2i_X509 = Module.findExportByName("libcrypto.dll", "d2i_X509")
Interceptor.attach(d2i_X509, {onLeave: function (args) {send("d2i_X509");}});

var d2i_X509_ALGOR = Module.findExportByName("libcrypto.dll", "d2i_X509_ALGOR")
Interceptor.attach(d2i_X509_ALGOR, {onLeave: function (args) {send("d2i_X509_ALGOR");}});

var d2i_X509_ALGORS = Module.findExportByName("libcrypto.dll", "d2i_X509_ALGORS")
Interceptor.attach(d2i_X509_ALGORS, {onLeave: function (args) {send("d2i_X509_ALGORS");}});

var d2i_X509_ATTRIBUTE = Module.findExportByName("libcrypto.dll", "d2i_X509_ATTRIBUTE")
Interceptor.attach(d2i_X509_ATTRIBUTE, {onLeave: function (args) {send("d2i_X509_ATTRIBUTE");}});

var d2i_X509_AUX = Module.findExportByName("libcrypto.dll", "d2i_X509_AUX")
Interceptor.attach(d2i_X509_AUX, {onLeave: function (args) {send("d2i_X509_AUX");}});

var d2i_X509_CERT_AUX = Module.findExportByName("libcrypto.dll", "d2i_X509_CERT_AUX")
Interceptor.attach(d2i_X509_CERT_AUX, {onLeave: function (args) {send("d2i_X509_CERT_AUX");}});

var d2i_X509_CERT_PAIR = Module.findExportByName("libcrypto.dll", "d2i_X509_CERT_PAIR")
Interceptor.attach(d2i_X509_CERT_PAIR, {onLeave: function (args) {send("d2i_X509_CERT_PAIR");}});

var d2i_X509_CINF = Module.findExportByName("libcrypto.dll", "d2i_X509_CINF")
Interceptor.attach(d2i_X509_CINF, {onLeave: function (args) {send("d2i_X509_CINF");}});

var d2i_X509_CRL = Module.findExportByName("libcrypto.dll", "d2i_X509_CRL")
Interceptor.attach(d2i_X509_CRL, {onLeave: function (args) {send("d2i_X509_CRL");}});

var d2i_X509_CRL_INFO = Module.findExportByName("libcrypto.dll", "d2i_X509_CRL_INFO")
Interceptor.attach(d2i_X509_CRL_INFO, {onLeave: function (args) {send("d2i_X509_CRL_INFO");}});

var d2i_X509_CRL_bio = Module.findExportByName("libcrypto.dll", "d2i_X509_CRL_bio")
Interceptor.attach(d2i_X509_CRL_bio, {onLeave: function (args) {send("d2i_X509_CRL_bio");}});

var d2i_X509_CRL_fp = Module.findExportByName("libcrypto.dll", "d2i_X509_CRL_fp")
Interceptor.attach(d2i_X509_CRL_fp, {onLeave: function (args) {send("d2i_X509_CRL_fp");}});

var d2i_X509_EXTENSION = Module.findExportByName("libcrypto.dll", "d2i_X509_EXTENSION")
Interceptor.attach(d2i_X509_EXTENSION, {onLeave: function (args) {send("d2i_X509_EXTENSION");}});

var d2i_X509_EXTENSIONS = Module.findExportByName("libcrypto.dll", "d2i_X509_EXTENSIONS")
Interceptor.attach(d2i_X509_EXTENSIONS, {onLeave: function (args) {send("d2i_X509_EXTENSIONS");}});

var d2i_X509_NAME = Module.findExportByName("libcrypto.dll", "d2i_X509_NAME")
Interceptor.attach(d2i_X509_NAME, {onLeave: function (args) {send("d2i_X509_NAME");}});

var d2i_X509_NAME_ENTRY = Module.findExportByName("libcrypto.dll", "d2i_X509_NAME_ENTRY")
Interceptor.attach(d2i_X509_NAME_ENTRY, {onLeave: function (args) {send("d2i_X509_NAME_ENTRY");}});

var d2i_X509_PUBKEY = Module.findExportByName("libcrypto.dll", "d2i_X509_PUBKEY")
Interceptor.attach(d2i_X509_PUBKEY, {onLeave: function (args) {send("d2i_X509_PUBKEY");}});

var d2i_X509_REQ = Module.findExportByName("libcrypto.dll", "d2i_X509_REQ")
Interceptor.attach(d2i_X509_REQ, {onLeave: function (args) {send("d2i_X509_REQ");}});

var d2i_X509_REQ_INFO = Module.findExportByName("libcrypto.dll", "d2i_X509_REQ_INFO")
Interceptor.attach(d2i_X509_REQ_INFO, {onLeave: function (args) {send("d2i_X509_REQ_INFO");}});

var d2i_X509_REQ_bio = Module.findExportByName("libcrypto.dll", "d2i_X509_REQ_bio")
Interceptor.attach(d2i_X509_REQ_bio, {onLeave: function (args) {send("d2i_X509_REQ_bio");}});

var d2i_X509_REQ_fp = Module.findExportByName("libcrypto.dll", "d2i_X509_REQ_fp")
Interceptor.attach(d2i_X509_REQ_fp, {onLeave: function (args) {send("d2i_X509_REQ_fp");}});

var d2i_X509_REVOKED = Module.findExportByName("libcrypto.dll", "d2i_X509_REVOKED")
Interceptor.attach(d2i_X509_REVOKED, {onLeave: function (args) {send("d2i_X509_REVOKED");}});

var d2i_X509_SIG = Module.findExportByName("libcrypto.dll", "d2i_X509_SIG")
Interceptor.attach(d2i_X509_SIG, {onLeave: function (args) {send("d2i_X509_SIG");}});

var d2i_X509_VAL = Module.findExportByName("libcrypto.dll", "d2i_X509_VAL")
Interceptor.attach(d2i_X509_VAL, {onLeave: function (args) {send("d2i_X509_VAL");}});

var d2i_X509_bio = Module.findExportByName("libcrypto.dll", "d2i_X509_bio")
Interceptor.attach(d2i_X509_bio, {onLeave: function (args) {send("d2i_X509_bio");}});

var d2i_X509_fp = Module.findExportByName("libcrypto.dll", "d2i_X509_fp")
Interceptor.attach(d2i_X509_fp, {onLeave: function (args) {send("d2i_X509_fp");}});

var explicit_bzero = Module.findExportByName("libcrypto.dll", "explicit_bzero")
Interceptor.attach(explicit_bzero, {onLeave: function (args) {send("explicit_bzero");}});

var freezero = Module.findExportByName("libcrypto.dll", "freezero")
Interceptor.attach(freezero, {onLeave: function (args) {send("freezero");}});

var get_rfc2409_prime_1024 = Module.findExportByName("libcrypto.dll", "get_rfc2409_prime_1024")
Interceptor.attach(get_rfc2409_prime_1024, {onLeave: function (args) {send("get_rfc2409_prime_1024");}});

var get_rfc2409_prime_768 = Module.findExportByName("libcrypto.dll", "get_rfc2409_prime_768")
Interceptor.attach(get_rfc2409_prime_768, {onLeave: function (args) {send("get_rfc2409_prime_768");}});

var get_rfc3526_prime_1536 = Module.findExportByName("libcrypto.dll", "get_rfc3526_prime_1536")
Interceptor.attach(get_rfc3526_prime_1536, {onLeave: function (args) {send("get_rfc3526_prime_1536");}});

var get_rfc3526_prime_2048 = Module.findExportByName("libcrypto.dll", "get_rfc3526_prime_2048")
Interceptor.attach(get_rfc3526_prime_2048, {onLeave: function (args) {send("get_rfc3526_prime_2048");}});

var get_rfc3526_prime_3072 = Module.findExportByName("libcrypto.dll", "get_rfc3526_prime_3072")
Interceptor.attach(get_rfc3526_prime_3072, {onLeave: function (args) {send("get_rfc3526_prime_3072");}});

var get_rfc3526_prime_4096 = Module.findExportByName("libcrypto.dll", "get_rfc3526_prime_4096")
Interceptor.attach(get_rfc3526_prime_4096, {onLeave: function (args) {send("get_rfc3526_prime_4096");}});

var get_rfc3526_prime_6144 = Module.findExportByName("libcrypto.dll", "get_rfc3526_prime_6144")
Interceptor.attach(get_rfc3526_prime_6144, {onLeave: function (args) {send("get_rfc3526_prime_6144");}});

var get_rfc3526_prime_8192 = Module.findExportByName("libcrypto.dll", "get_rfc3526_prime_8192")
Interceptor.attach(get_rfc3526_prime_8192, {onLeave: function (args) {send("get_rfc3526_prime_8192");}});

var getentropy = Module.findExportByName("libcrypto.dll", "getentropy")
Interceptor.attach(getentropy, {onLeave: function (args) {send("getentropy");}});

var gettimeofday = Module.findExportByName("libcrypto.dll", "gettimeofday")
Interceptor.attach(gettimeofday, {onLeave: function (args) {send("gettimeofday");}});

var getuid = Module.findExportByName("libcrypto.dll", "getuid")
Interceptor.attach(getuid, {onLeave: function (args) {send("getuid");}});

var hex_to_string = Module.findExportByName("libcrypto.dll", "hex_to_string")
Interceptor.attach(hex_to_string, {onLeave: function (args) {send("hex_to_string");}});

var i2a_ACCESS_DESCRIPTION = Module.findExportByName("libcrypto.dll", "i2a_ACCESS_DESCRIPTION")
Interceptor.attach(i2a_ACCESS_DESCRIPTION, {onLeave: function (args) {send("i2a_ACCESS_DESCRIPTION");}});

var i2a_ASN1_ENUMERATED = Module.findExportByName("libcrypto.dll", "i2a_ASN1_ENUMERATED")
Interceptor.attach(i2a_ASN1_ENUMERATED, {onLeave: function (args) {send("i2a_ASN1_ENUMERATED");}});

var i2a_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "i2a_ASN1_INTEGER")
Interceptor.attach(i2a_ASN1_INTEGER, {onLeave: function (args) {send("i2a_ASN1_INTEGER");}});

var i2a_ASN1_OBJECT = Module.findExportByName("libcrypto.dll", "i2a_ASN1_OBJECT")
Interceptor.attach(i2a_ASN1_OBJECT, {onLeave: function (args) {send("i2a_ASN1_OBJECT");}});

var i2a_ASN1_STRING = Module.findExportByName("libcrypto.dll", "i2a_ASN1_STRING")
Interceptor.attach(i2a_ASN1_STRING, {onLeave: function (args) {send("i2a_ASN1_STRING");}});

var i2b_PVK_bio = Module.findExportByName("libcrypto.dll", "i2b_PVK_bio")
Interceptor.attach(i2b_PVK_bio, {onLeave: function (args) {send("i2b_PVK_bio");}});

var i2b_PrivateKey_bio = Module.findExportByName("libcrypto.dll", "i2b_PrivateKey_bio")
Interceptor.attach(i2b_PrivateKey_bio, {onLeave: function (args) {send("i2b_PrivateKey_bio");}});

var i2b_PublicKey_bio = Module.findExportByName("libcrypto.dll", "i2b_PublicKey_bio")
Interceptor.attach(i2b_PublicKey_bio, {onLeave: function (args) {send("i2b_PublicKey_bio");}});

var i2c_ASN1_BIT_STRING = Module.findExportByName("libcrypto.dll", "i2c_ASN1_BIT_STRING")
Interceptor.attach(i2c_ASN1_BIT_STRING, {onLeave: function (args) {send("i2c_ASN1_BIT_STRING");}});

var i2c_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "i2c_ASN1_INTEGER")
Interceptor.attach(i2c_ASN1_INTEGER, {onLeave: function (args) {send("i2c_ASN1_INTEGER");}});

var i2d_ACCESS_DESCRIPTION = Module.findExportByName("libcrypto.dll", "i2d_ACCESS_DESCRIPTION")
Interceptor.attach(i2d_ACCESS_DESCRIPTION, {onLeave: function (args) {send("i2d_ACCESS_DESCRIPTION");}});

var i2d_ASN1_BIT_STRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_BIT_STRING")
Interceptor.attach(i2d_ASN1_BIT_STRING, {onLeave: function (args) {send("i2d_ASN1_BIT_STRING");}});

var i2d_ASN1_BMPSTRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_BMPSTRING")
Interceptor.attach(i2d_ASN1_BMPSTRING, {onLeave: function (args) {send("i2d_ASN1_BMPSTRING");}});

var i2d_ASN1_BOOLEAN = Module.findExportByName("libcrypto.dll", "i2d_ASN1_BOOLEAN")
Interceptor.attach(i2d_ASN1_BOOLEAN, {onLeave: function (args) {send("i2d_ASN1_BOOLEAN");}});

var i2d_ASN1_ENUMERATED = Module.findExportByName("libcrypto.dll", "i2d_ASN1_ENUMERATED")
Interceptor.attach(i2d_ASN1_ENUMERATED, {onLeave: function (args) {send("i2d_ASN1_ENUMERATED");}});

var i2d_ASN1_GENERALIZEDTIME = Module.findExportByName("libcrypto.dll", "i2d_ASN1_GENERALIZEDTIME")
Interceptor.attach(i2d_ASN1_GENERALIZEDTIME, {onLeave: function (args) {send("i2d_ASN1_GENERALIZEDTIME");}});

var i2d_ASN1_GENERALSTRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_GENERALSTRING")
Interceptor.attach(i2d_ASN1_GENERALSTRING, {onLeave: function (args) {send("i2d_ASN1_GENERALSTRING");}});

var i2d_ASN1_IA5STRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_IA5STRING")
Interceptor.attach(i2d_ASN1_IA5STRING, {onLeave: function (args) {send("i2d_ASN1_IA5STRING");}});

var i2d_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "i2d_ASN1_INTEGER")
Interceptor.attach(i2d_ASN1_INTEGER, {onLeave: function (args) {send("i2d_ASN1_INTEGER");}});

var i2d_ASN1_NULL = Module.findExportByName("libcrypto.dll", "i2d_ASN1_NULL")
Interceptor.attach(i2d_ASN1_NULL, {onLeave: function (args) {send("i2d_ASN1_NULL");}});

var i2d_ASN1_OBJECT = Module.findExportByName("libcrypto.dll", "i2d_ASN1_OBJECT")
Interceptor.attach(i2d_ASN1_OBJECT, {onLeave: function (args) {send("i2d_ASN1_OBJECT");}});

var i2d_ASN1_OCTET_STRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_OCTET_STRING")
Interceptor.attach(i2d_ASN1_OCTET_STRING, {onLeave: function (args) {send("i2d_ASN1_OCTET_STRING");}});

var i2d_ASN1_PRINTABLE = Module.findExportByName("libcrypto.dll", "i2d_ASN1_PRINTABLE")
Interceptor.attach(i2d_ASN1_PRINTABLE, {onLeave: function (args) {send("i2d_ASN1_PRINTABLE");}});

var i2d_ASN1_PRINTABLESTRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_PRINTABLESTRING")
Interceptor.attach(i2d_ASN1_PRINTABLESTRING, {onLeave: function (args) {send("i2d_ASN1_PRINTABLESTRING");}});

var i2d_ASN1_SEQUENCE_ANY = Module.findExportByName("libcrypto.dll", "i2d_ASN1_SEQUENCE_ANY")
Interceptor.attach(i2d_ASN1_SEQUENCE_ANY, {onLeave: function (args) {send("i2d_ASN1_SEQUENCE_ANY");}});

var i2d_ASN1_SET_ANY = Module.findExportByName("libcrypto.dll", "i2d_ASN1_SET_ANY")
Interceptor.attach(i2d_ASN1_SET_ANY, {onLeave: function (args) {send("i2d_ASN1_SET_ANY");}});

var i2d_ASN1_T61STRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_T61STRING")
Interceptor.attach(i2d_ASN1_T61STRING, {onLeave: function (args) {send("i2d_ASN1_T61STRING");}});

var i2d_ASN1_TIME = Module.findExportByName("libcrypto.dll", "i2d_ASN1_TIME")
Interceptor.attach(i2d_ASN1_TIME, {onLeave: function (args) {send("i2d_ASN1_TIME");}});

var i2d_ASN1_TYPE = Module.findExportByName("libcrypto.dll", "i2d_ASN1_TYPE")
Interceptor.attach(i2d_ASN1_TYPE, {onLeave: function (args) {send("i2d_ASN1_TYPE");}});

var i2d_ASN1_UNIVERSALSTRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_UNIVERSALSTRING")
Interceptor.attach(i2d_ASN1_UNIVERSALSTRING, {onLeave: function (args) {send("i2d_ASN1_UNIVERSALSTRING");}});

var i2d_ASN1_UTCTIME = Module.findExportByName("libcrypto.dll", "i2d_ASN1_UTCTIME")
Interceptor.attach(i2d_ASN1_UTCTIME, {onLeave: function (args) {send("i2d_ASN1_UTCTIME");}});

var i2d_ASN1_UTF8STRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_UTF8STRING")
Interceptor.attach(i2d_ASN1_UTF8STRING, {onLeave: function (args) {send("i2d_ASN1_UTF8STRING");}});

var i2d_ASN1_VISIBLESTRING = Module.findExportByName("libcrypto.dll", "i2d_ASN1_VISIBLESTRING")
Interceptor.attach(i2d_ASN1_VISIBLESTRING, {onLeave: function (args) {send("i2d_ASN1_VISIBLESTRING");}});

var i2d_ASN1_bio_stream = Module.findExportByName("libcrypto.dll", "i2d_ASN1_bio_stream")
Interceptor.attach(i2d_ASN1_bio_stream, {onLeave: function (args) {send("i2d_ASN1_bio_stream");}});

var i2d_AUTHORITY_INFO_ACCESS = Module.findExportByName("libcrypto.dll", "i2d_AUTHORITY_INFO_ACCESS")
Interceptor.attach(i2d_AUTHORITY_INFO_ACCESS, {onLeave: function (args) {send("i2d_AUTHORITY_INFO_ACCESS");}});

var i2d_AUTHORITY_KEYID = Module.findExportByName("libcrypto.dll", "i2d_AUTHORITY_KEYID")
Interceptor.attach(i2d_AUTHORITY_KEYID, {onLeave: function (args) {send("i2d_AUTHORITY_KEYID");}});

var i2d_BASIC_CONSTRAINTS = Module.findExportByName("libcrypto.dll", "i2d_BASIC_CONSTRAINTS")
Interceptor.attach(i2d_BASIC_CONSTRAINTS, {onLeave: function (args) {send("i2d_BASIC_CONSTRAINTS");}});

var i2d_CERTIFICATEPOLICIES = Module.findExportByName("libcrypto.dll", "i2d_CERTIFICATEPOLICIES")
Interceptor.attach(i2d_CERTIFICATEPOLICIES, {onLeave: function (args) {send("i2d_CERTIFICATEPOLICIES");}});

var i2d_CMS_ContentInfo = Module.findExportByName("libcrypto.dll", "i2d_CMS_ContentInfo")
Interceptor.attach(i2d_CMS_ContentInfo, {onLeave: function (args) {send("i2d_CMS_ContentInfo");}});

var i2d_CMS_ReceiptRequest = Module.findExportByName("libcrypto.dll", "i2d_CMS_ReceiptRequest")
Interceptor.attach(i2d_CMS_ReceiptRequest, {onLeave: function (args) {send("i2d_CMS_ReceiptRequest");}});

var i2d_CMS_bio = Module.findExportByName("libcrypto.dll", "i2d_CMS_bio")
Interceptor.attach(i2d_CMS_bio, {onLeave: function (args) {send("i2d_CMS_bio");}});

var i2d_CMS_bio_stream = Module.findExportByName("libcrypto.dll", "i2d_CMS_bio_stream")
Interceptor.attach(i2d_CMS_bio_stream, {onLeave: function (args) {send("i2d_CMS_bio_stream");}});

var i2d_CRL_DIST_POINTS = Module.findExportByName("libcrypto.dll", "i2d_CRL_DIST_POINTS")
Interceptor.attach(i2d_CRL_DIST_POINTS, {onLeave: function (args) {send("i2d_CRL_DIST_POINTS");}});

var i2d_DHparams = Module.findExportByName("libcrypto.dll", "i2d_DHparams")
Interceptor.attach(i2d_DHparams, {onLeave: function (args) {send("i2d_DHparams");}});

var i2d_DHparams_bio = Module.findExportByName("libcrypto.dll", "i2d_DHparams_bio")
Interceptor.attach(i2d_DHparams_bio, {onLeave: function (args) {send("i2d_DHparams_bio");}});

var i2d_DHparams_fp = Module.findExportByName("libcrypto.dll", "i2d_DHparams_fp")
Interceptor.attach(i2d_DHparams_fp, {onLeave: function (args) {send("i2d_DHparams_fp");}});

var i2d_DIRECTORYSTRING = Module.findExportByName("libcrypto.dll", "i2d_DIRECTORYSTRING")
Interceptor.attach(i2d_DIRECTORYSTRING, {onLeave: function (args) {send("i2d_DIRECTORYSTRING");}});

var i2d_DISPLAYTEXT = Module.findExportByName("libcrypto.dll", "i2d_DISPLAYTEXT")
Interceptor.attach(i2d_DISPLAYTEXT, {onLeave: function (args) {send("i2d_DISPLAYTEXT");}});

var i2d_DIST_POINT = Module.findExportByName("libcrypto.dll", "i2d_DIST_POINT")
Interceptor.attach(i2d_DIST_POINT, {onLeave: function (args) {send("i2d_DIST_POINT");}});

var i2d_DIST_POINT_NAME = Module.findExportByName("libcrypto.dll", "i2d_DIST_POINT_NAME")
Interceptor.attach(i2d_DIST_POINT_NAME, {onLeave: function (args) {send("i2d_DIST_POINT_NAME");}});

var i2d_DSAPrivateKey = Module.findExportByName("libcrypto.dll", "i2d_DSAPrivateKey")
Interceptor.attach(i2d_DSAPrivateKey, {onLeave: function (args) {send("i2d_DSAPrivateKey");}});

var i2d_DSAPrivateKey_bio = Module.findExportByName("libcrypto.dll", "i2d_DSAPrivateKey_bio")
Interceptor.attach(i2d_DSAPrivateKey_bio, {onLeave: function (args) {send("i2d_DSAPrivateKey_bio");}});

var i2d_DSAPrivateKey_fp = Module.findExportByName("libcrypto.dll", "i2d_DSAPrivateKey_fp")
Interceptor.attach(i2d_DSAPrivateKey_fp, {onLeave: function (args) {send("i2d_DSAPrivateKey_fp");}});

var i2d_DSAPublicKey = Module.findExportByName("libcrypto.dll", "i2d_DSAPublicKey")
Interceptor.attach(i2d_DSAPublicKey, {onLeave: function (args) {send("i2d_DSAPublicKey");}});

var i2d_DSA_PUBKEY = Module.findExportByName("libcrypto.dll", "i2d_DSA_PUBKEY")
Interceptor.attach(i2d_DSA_PUBKEY, {onLeave: function (args) {send("i2d_DSA_PUBKEY");}});

var i2d_DSA_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "i2d_DSA_PUBKEY_bio")
Interceptor.attach(i2d_DSA_PUBKEY_bio, {onLeave: function (args) {send("i2d_DSA_PUBKEY_bio");}});

var i2d_DSA_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "i2d_DSA_PUBKEY_fp")
Interceptor.attach(i2d_DSA_PUBKEY_fp, {onLeave: function (args) {send("i2d_DSA_PUBKEY_fp");}});

var i2d_DSA_SIG = Module.findExportByName("libcrypto.dll", "i2d_DSA_SIG")
Interceptor.attach(i2d_DSA_SIG, {onLeave: function (args) {send("i2d_DSA_SIG");}});

var i2d_DSAparams = Module.findExportByName("libcrypto.dll", "i2d_DSAparams")
Interceptor.attach(i2d_DSAparams, {onLeave: function (args) {send("i2d_DSAparams");}});

var i2d_DSAparams_bio = Module.findExportByName("libcrypto.dll", "i2d_DSAparams_bio")
Interceptor.attach(i2d_DSAparams_bio, {onLeave: function (args) {send("i2d_DSAparams_bio");}});

var i2d_DSAparams_fp = Module.findExportByName("libcrypto.dll", "i2d_DSAparams_fp")
Interceptor.attach(i2d_DSAparams_fp, {onLeave: function (args) {send("i2d_DSAparams_fp");}});

var i2d_ECDSA_SIG = Module.findExportByName("libcrypto.dll", "i2d_ECDSA_SIG")
Interceptor.attach(i2d_ECDSA_SIG, {onLeave: function (args) {send("i2d_ECDSA_SIG");}});

var i2d_ECPKPARAMETERS = Module.findExportByName("libcrypto.dll", "i2d_ECPKPARAMETERS")
Interceptor.attach(i2d_ECPKPARAMETERS, {onLeave: function (args) {send("i2d_ECPKPARAMETERS");}});

var i2d_ECPKParameters = Module.findExportByName("libcrypto.dll", "i2d_ECPKParameters")
Interceptor.attach(i2d_ECPKParameters, {onLeave: function (args) {send("i2d_ECPKParameters");}});

var i2d_ECParameters = Module.findExportByName("libcrypto.dll", "i2d_ECParameters")
Interceptor.attach(i2d_ECParameters, {onLeave: function (args) {send("i2d_ECParameters");}});

var i2d_ECPrivateKey = Module.findExportByName("libcrypto.dll", "i2d_ECPrivateKey")
Interceptor.attach(i2d_ECPrivateKey, {onLeave: function (args) {send("i2d_ECPrivateKey");}});

var i2d_ECPrivateKey_bio = Module.findExportByName("libcrypto.dll", "i2d_ECPrivateKey_bio")
Interceptor.attach(i2d_ECPrivateKey_bio, {onLeave: function (args) {send("i2d_ECPrivateKey_bio");}});

var i2d_ECPrivateKey_fp = Module.findExportByName("libcrypto.dll", "i2d_ECPrivateKey_fp")
Interceptor.attach(i2d_ECPrivateKey_fp, {onLeave: function (args) {send("i2d_ECPrivateKey_fp");}});

var i2d_EC_PRIVATEKEY = Module.findExportByName("libcrypto.dll", "i2d_EC_PRIVATEKEY")
Interceptor.attach(i2d_EC_PRIVATEKEY, {onLeave: function (args) {send("i2d_EC_PRIVATEKEY");}});

var i2d_EC_PUBKEY = Module.findExportByName("libcrypto.dll", "i2d_EC_PUBKEY")
Interceptor.attach(i2d_EC_PUBKEY, {onLeave: function (args) {send("i2d_EC_PUBKEY");}});

var i2d_EC_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "i2d_EC_PUBKEY_bio")
Interceptor.attach(i2d_EC_PUBKEY_bio, {onLeave: function (args) {send("i2d_EC_PUBKEY_bio");}});

var i2d_EC_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "i2d_EC_PUBKEY_fp")
Interceptor.attach(i2d_EC_PUBKEY_fp, {onLeave: function (args) {send("i2d_EC_PUBKEY_fp");}});

var i2d_EDIPARTYNAME = Module.findExportByName("libcrypto.dll", "i2d_EDIPARTYNAME")
Interceptor.attach(i2d_EDIPARTYNAME, {onLeave: function (args) {send("i2d_EDIPARTYNAME");}});

var i2d_ESS_CERT_ID = Module.findExportByName("libcrypto.dll", "i2d_ESS_CERT_ID")
Interceptor.attach(i2d_ESS_CERT_ID, {onLeave: function (args) {send("i2d_ESS_CERT_ID");}});

var i2d_ESS_ISSUER_SERIAL = Module.findExportByName("libcrypto.dll", "i2d_ESS_ISSUER_SERIAL")
Interceptor.attach(i2d_ESS_ISSUER_SERIAL, {onLeave: function (args) {send("i2d_ESS_ISSUER_SERIAL");}});

var i2d_ESS_SIGNING_CERT = Module.findExportByName("libcrypto.dll", "i2d_ESS_SIGNING_CERT")
Interceptor.attach(i2d_ESS_SIGNING_CERT, {onLeave: function (args) {send("i2d_ESS_SIGNING_CERT");}});

var i2d_EXTENDED_KEY_USAGE = Module.findExportByName("libcrypto.dll", "i2d_EXTENDED_KEY_USAGE")
Interceptor.attach(i2d_EXTENDED_KEY_USAGE, {onLeave: function (args) {send("i2d_EXTENDED_KEY_USAGE");}});

var i2d_GENERAL_NAME = Module.findExportByName("libcrypto.dll", "i2d_GENERAL_NAME")
Interceptor.attach(i2d_GENERAL_NAME, {onLeave: function (args) {send("i2d_GENERAL_NAME");}});

var i2d_GENERAL_NAMES = Module.findExportByName("libcrypto.dll", "i2d_GENERAL_NAMES")
Interceptor.attach(i2d_GENERAL_NAMES, {onLeave: function (args) {send("i2d_GENERAL_NAMES");}});

var i2d_GOST_CIPHER_PARAMS = Module.findExportByName("libcrypto.dll", "i2d_GOST_CIPHER_PARAMS")
Interceptor.attach(i2d_GOST_CIPHER_PARAMS, {onLeave: function (args) {send("i2d_GOST_CIPHER_PARAMS");}});

var i2d_ISSUING_DIST_POINT = Module.findExportByName("libcrypto.dll", "i2d_ISSUING_DIST_POINT")
Interceptor.attach(i2d_ISSUING_DIST_POINT, {onLeave: function (args) {send("i2d_ISSUING_DIST_POINT");}});

var i2d_NETSCAPE_CERT_SEQUENCE = Module.findExportByName("libcrypto.dll", "i2d_NETSCAPE_CERT_SEQUENCE")
Interceptor.attach(i2d_NETSCAPE_CERT_SEQUENCE, {onLeave: function (args) {send("i2d_NETSCAPE_CERT_SEQUENCE");}});

var i2d_NETSCAPE_ENCRYPTED_PKEY = Module.findExportByName("libcrypto.dll", "i2d_NETSCAPE_ENCRYPTED_PKEY")
Interceptor.attach(i2d_NETSCAPE_ENCRYPTED_PKEY, {onLeave: function (args) {send("i2d_NETSCAPE_ENCRYPTED_PKEY");}});

var i2d_NETSCAPE_PKEY = Module.findExportByName("libcrypto.dll", "i2d_NETSCAPE_PKEY")
Interceptor.attach(i2d_NETSCAPE_PKEY, {onLeave: function (args) {send("i2d_NETSCAPE_PKEY");}});

var i2d_NETSCAPE_SPKAC = Module.findExportByName("libcrypto.dll", "i2d_NETSCAPE_SPKAC")
Interceptor.attach(i2d_NETSCAPE_SPKAC, {onLeave: function (args) {send("i2d_NETSCAPE_SPKAC");}});

var i2d_NETSCAPE_SPKI = Module.findExportByName("libcrypto.dll", "i2d_NETSCAPE_SPKI")
Interceptor.attach(i2d_NETSCAPE_SPKI, {onLeave: function (args) {send("i2d_NETSCAPE_SPKI");}});

var i2d_NETSCAPE_X509 = Module.findExportByName("libcrypto.dll", "i2d_NETSCAPE_X509")
Interceptor.attach(i2d_NETSCAPE_X509, {onLeave: function (args) {send("i2d_NETSCAPE_X509");}});

var i2d_NOTICEREF = Module.findExportByName("libcrypto.dll", "i2d_NOTICEREF")
Interceptor.attach(i2d_NOTICEREF, {onLeave: function (args) {send("i2d_NOTICEREF");}});

var i2d_Netscape_RSA = Module.findExportByName("libcrypto.dll", "i2d_Netscape_RSA")
Interceptor.attach(i2d_Netscape_RSA, {onLeave: function (args) {send("i2d_Netscape_RSA");}});

var i2d_OCSP_BASICRESP = Module.findExportByName("libcrypto.dll", "i2d_OCSP_BASICRESP")
Interceptor.attach(i2d_OCSP_BASICRESP, {onLeave: function (args) {send("i2d_OCSP_BASICRESP");}});

var i2d_OCSP_CERTID = Module.findExportByName("libcrypto.dll", "i2d_OCSP_CERTID")
Interceptor.attach(i2d_OCSP_CERTID, {onLeave: function (args) {send("i2d_OCSP_CERTID");}});

var i2d_OCSP_CERTSTATUS = Module.findExportByName("libcrypto.dll", "i2d_OCSP_CERTSTATUS")
Interceptor.attach(i2d_OCSP_CERTSTATUS, {onLeave: function (args) {send("i2d_OCSP_CERTSTATUS");}});

var i2d_OCSP_CRLID = Module.findExportByName("libcrypto.dll", "i2d_OCSP_CRLID")
Interceptor.attach(i2d_OCSP_CRLID, {onLeave: function (args) {send("i2d_OCSP_CRLID");}});

var i2d_OCSP_ONEREQ = Module.findExportByName("libcrypto.dll", "i2d_OCSP_ONEREQ")
Interceptor.attach(i2d_OCSP_ONEREQ, {onLeave: function (args) {send("i2d_OCSP_ONEREQ");}});

var i2d_OCSP_REQINFO = Module.findExportByName("libcrypto.dll", "i2d_OCSP_REQINFO")
Interceptor.attach(i2d_OCSP_REQINFO, {onLeave: function (args) {send("i2d_OCSP_REQINFO");}});

var i2d_OCSP_REQUEST = Module.findExportByName("libcrypto.dll", "i2d_OCSP_REQUEST")
Interceptor.attach(i2d_OCSP_REQUEST, {onLeave: function (args) {send("i2d_OCSP_REQUEST");}});

var i2d_OCSP_REQUEST_bio = Module.findExportByName("libcrypto.dll", "i2d_OCSP_REQUEST_bio")
Interceptor.attach(i2d_OCSP_REQUEST_bio, {onLeave: function (args) {send("i2d_OCSP_REQUEST_bio");}});

var i2d_OCSP_RESPBYTES = Module.findExportByName("libcrypto.dll", "i2d_OCSP_RESPBYTES")
Interceptor.attach(i2d_OCSP_RESPBYTES, {onLeave: function (args) {send("i2d_OCSP_RESPBYTES");}});

var i2d_OCSP_RESPDATA = Module.findExportByName("libcrypto.dll", "i2d_OCSP_RESPDATA")
Interceptor.attach(i2d_OCSP_RESPDATA, {onLeave: function (args) {send("i2d_OCSP_RESPDATA");}});

var i2d_OCSP_RESPID = Module.findExportByName("libcrypto.dll", "i2d_OCSP_RESPID")
Interceptor.attach(i2d_OCSP_RESPID, {onLeave: function (args) {send("i2d_OCSP_RESPID");}});

var i2d_OCSP_RESPONSE = Module.findExportByName("libcrypto.dll", "i2d_OCSP_RESPONSE")
Interceptor.attach(i2d_OCSP_RESPONSE, {onLeave: function (args) {send("i2d_OCSP_RESPONSE");}});

var i2d_OCSP_RESPONSE_bio = Module.findExportByName("libcrypto.dll", "i2d_OCSP_RESPONSE_bio")
Interceptor.attach(i2d_OCSP_RESPONSE_bio, {onLeave: function (args) {send("i2d_OCSP_RESPONSE_bio");}});

var i2d_OCSP_REVOKEDINFO = Module.findExportByName("libcrypto.dll", "i2d_OCSP_REVOKEDINFO")
Interceptor.attach(i2d_OCSP_REVOKEDINFO, {onLeave: function (args) {send("i2d_OCSP_REVOKEDINFO");}});

var i2d_OCSP_SERVICELOC = Module.findExportByName("libcrypto.dll", "i2d_OCSP_SERVICELOC")
Interceptor.attach(i2d_OCSP_SERVICELOC, {onLeave: function (args) {send("i2d_OCSP_SERVICELOC");}});

var i2d_OCSP_SIGNATURE = Module.findExportByName("libcrypto.dll", "i2d_OCSP_SIGNATURE")
Interceptor.attach(i2d_OCSP_SIGNATURE, {onLeave: function (args) {send("i2d_OCSP_SIGNATURE");}});

var i2d_OCSP_SINGLERESP = Module.findExportByName("libcrypto.dll", "i2d_OCSP_SINGLERESP")
Interceptor.attach(i2d_OCSP_SINGLERESP, {onLeave: function (args) {send("i2d_OCSP_SINGLERESP");}});

var i2d_OTHERNAME = Module.findExportByName("libcrypto.dll", "i2d_OTHERNAME")
Interceptor.attach(i2d_OTHERNAME, {onLeave: function (args) {send("i2d_OTHERNAME");}});

var i2d_PBE2PARAM = Module.findExportByName("libcrypto.dll", "i2d_PBE2PARAM")
Interceptor.attach(i2d_PBE2PARAM, {onLeave: function (args) {send("i2d_PBE2PARAM");}});

var i2d_PBEPARAM = Module.findExportByName("libcrypto.dll", "i2d_PBEPARAM")
Interceptor.attach(i2d_PBEPARAM, {onLeave: function (args) {send("i2d_PBEPARAM");}});

var i2d_PBKDF2PARAM = Module.findExportByName("libcrypto.dll", "i2d_PBKDF2PARAM")
Interceptor.attach(i2d_PBKDF2PARAM, {onLeave: function (args) {send("i2d_PBKDF2PARAM");}});

var i2d_PKCS12 = Module.findExportByName("libcrypto.dll", "i2d_PKCS12")
Interceptor.attach(i2d_PKCS12, {onLeave: function (args) {send("i2d_PKCS12");}});

var i2d_PKCS12_BAGS = Module.findExportByName("libcrypto.dll", "i2d_PKCS12_BAGS")
Interceptor.attach(i2d_PKCS12_BAGS, {onLeave: function (args) {send("i2d_PKCS12_BAGS");}});

var i2d_PKCS12_MAC_DATA = Module.findExportByName("libcrypto.dll", "i2d_PKCS12_MAC_DATA")
Interceptor.attach(i2d_PKCS12_MAC_DATA, {onLeave: function (args) {send("i2d_PKCS12_MAC_DATA");}});

var i2d_PKCS12_SAFEBAG = Module.findExportByName("libcrypto.dll", "i2d_PKCS12_SAFEBAG")
Interceptor.attach(i2d_PKCS12_SAFEBAG, {onLeave: function (args) {send("i2d_PKCS12_SAFEBAG");}});

var i2d_PKCS12_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS12_bio")
Interceptor.attach(i2d_PKCS12_bio, {onLeave: function (args) {send("i2d_PKCS12_bio");}});

var i2d_PKCS12_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS12_fp")
Interceptor.attach(i2d_PKCS12_fp, {onLeave: function (args) {send("i2d_PKCS12_fp");}});

var i2d_PKCS7 = Module.findExportByName("libcrypto.dll", "i2d_PKCS7")
Interceptor.attach(i2d_PKCS7, {onLeave: function (args) {send("i2d_PKCS7");}});

var i2d_PKCS7_DIGEST = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_DIGEST")
Interceptor.attach(i2d_PKCS7_DIGEST, {onLeave: function (args) {send("i2d_PKCS7_DIGEST");}});

var i2d_PKCS7_ENCRYPT = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_ENCRYPT")
Interceptor.attach(i2d_PKCS7_ENCRYPT, {onLeave: function (args) {send("i2d_PKCS7_ENCRYPT");}});

var i2d_PKCS7_ENC_CONTENT = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_ENC_CONTENT")
Interceptor.attach(i2d_PKCS7_ENC_CONTENT, {onLeave: function (args) {send("i2d_PKCS7_ENC_CONTENT");}});

var i2d_PKCS7_ENVELOPE = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_ENVELOPE")
Interceptor.attach(i2d_PKCS7_ENVELOPE, {onLeave: function (args) {send("i2d_PKCS7_ENVELOPE");}});

var i2d_PKCS7_ISSUER_AND_SERIAL = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_ISSUER_AND_SERIAL")
Interceptor.attach(i2d_PKCS7_ISSUER_AND_SERIAL, {onLeave: function (args) {send("i2d_PKCS7_ISSUER_AND_SERIAL");}});

var i2d_PKCS7_NDEF = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_NDEF")
Interceptor.attach(i2d_PKCS7_NDEF, {onLeave: function (args) {send("i2d_PKCS7_NDEF");}});

var i2d_PKCS7_RECIP_INFO = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_RECIP_INFO")
Interceptor.attach(i2d_PKCS7_RECIP_INFO, {onLeave: function (args) {send("i2d_PKCS7_RECIP_INFO");}});

var i2d_PKCS7_SIGNED = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_SIGNED")
Interceptor.attach(i2d_PKCS7_SIGNED, {onLeave: function (args) {send("i2d_PKCS7_SIGNED");}});

var i2d_PKCS7_SIGNER_INFO = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_SIGNER_INFO")
Interceptor.attach(i2d_PKCS7_SIGNER_INFO, {onLeave: function (args) {send("i2d_PKCS7_SIGNER_INFO");}});

var i2d_PKCS7_SIGN_ENVELOPE = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_SIGN_ENVELOPE")
Interceptor.attach(i2d_PKCS7_SIGN_ENVELOPE, {onLeave: function (args) {send("i2d_PKCS7_SIGN_ENVELOPE");}});

var i2d_PKCS7_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_bio")
Interceptor.attach(i2d_PKCS7_bio, {onLeave: function (args) {send("i2d_PKCS7_bio");}});

var i2d_PKCS7_bio_stream = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_bio_stream")
Interceptor.attach(i2d_PKCS7_bio_stream, {onLeave: function (args) {send("i2d_PKCS7_bio_stream");}});

var i2d_PKCS7_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS7_fp")
Interceptor.attach(i2d_PKCS7_fp, {onLeave: function (args) {send("i2d_PKCS7_fp");}});

var i2d_PKCS8PrivateKeyInfo_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS8PrivateKeyInfo_bio")
Interceptor.attach(i2d_PKCS8PrivateKeyInfo_bio, {onLeave: function (args) {send("i2d_PKCS8PrivateKeyInfo_bio");}});

var i2d_PKCS8PrivateKeyInfo_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS8PrivateKeyInfo_fp")
Interceptor.attach(i2d_PKCS8PrivateKeyInfo_fp, {onLeave: function (args) {send("i2d_PKCS8PrivateKeyInfo_fp");}});

var i2d_PKCS8PrivateKey_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS8PrivateKey_bio")
Interceptor.attach(i2d_PKCS8PrivateKey_bio, {onLeave: function (args) {send("i2d_PKCS8PrivateKey_bio");}});

var i2d_PKCS8PrivateKey_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS8PrivateKey_fp")
Interceptor.attach(i2d_PKCS8PrivateKey_fp, {onLeave: function (args) {send("i2d_PKCS8PrivateKey_fp");}});

var i2d_PKCS8PrivateKey_nid_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS8PrivateKey_nid_bio")
Interceptor.attach(i2d_PKCS8PrivateKey_nid_bio, {onLeave: function (args) {send("i2d_PKCS8PrivateKey_nid_bio");}});

var i2d_PKCS8PrivateKey_nid_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS8PrivateKey_nid_fp")
Interceptor.attach(i2d_PKCS8PrivateKey_nid_fp, {onLeave: function (args) {send("i2d_PKCS8PrivateKey_nid_fp");}});

var i2d_PKCS8_PRIV_KEY_INFO = Module.findExportByName("libcrypto.dll", "i2d_PKCS8_PRIV_KEY_INFO")
Interceptor.attach(i2d_PKCS8_PRIV_KEY_INFO, {onLeave: function (args) {send("i2d_PKCS8_PRIV_KEY_INFO");}});

var i2d_PKCS8_PRIV_KEY_INFO_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS8_PRIV_KEY_INFO_bio")
Interceptor.attach(i2d_PKCS8_PRIV_KEY_INFO_bio, {onLeave: function (args) {send("i2d_PKCS8_PRIV_KEY_INFO_bio");}});

var i2d_PKCS8_PRIV_KEY_INFO_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS8_PRIV_KEY_INFO_fp")
Interceptor.attach(i2d_PKCS8_PRIV_KEY_INFO_fp, {onLeave: function (args) {send("i2d_PKCS8_PRIV_KEY_INFO_fp");}});

var i2d_PKCS8_bio = Module.findExportByName("libcrypto.dll", "i2d_PKCS8_bio")
Interceptor.attach(i2d_PKCS8_bio, {onLeave: function (args) {send("i2d_PKCS8_bio");}});

var i2d_PKCS8_fp = Module.findExportByName("libcrypto.dll", "i2d_PKCS8_fp")
Interceptor.attach(i2d_PKCS8_fp, {onLeave: function (args) {send("i2d_PKCS8_fp");}});

var i2d_PKEY_USAGE_PERIOD = Module.findExportByName("libcrypto.dll", "i2d_PKEY_USAGE_PERIOD")
Interceptor.attach(i2d_PKEY_USAGE_PERIOD, {onLeave: function (args) {send("i2d_PKEY_USAGE_PERIOD");}});

var i2d_POLICYINFO = Module.findExportByName("libcrypto.dll", "i2d_POLICYINFO")
Interceptor.attach(i2d_POLICYINFO, {onLeave: function (args) {send("i2d_POLICYINFO");}});

var i2d_POLICYQUALINFO = Module.findExportByName("libcrypto.dll", "i2d_POLICYQUALINFO")
Interceptor.attach(i2d_POLICYQUALINFO, {onLeave: function (args) {send("i2d_POLICYQUALINFO");}});

var i2d_PROXY_CERT_INFO_EXTENSION = Module.findExportByName("libcrypto.dll", "i2d_PROXY_CERT_INFO_EXTENSION")
Interceptor.attach(i2d_PROXY_CERT_INFO_EXTENSION, {onLeave: function (args) {send("i2d_PROXY_CERT_INFO_EXTENSION");}});

var i2d_PROXY_POLICY = Module.findExportByName("libcrypto.dll", "i2d_PROXY_POLICY")
Interceptor.attach(i2d_PROXY_POLICY, {onLeave: function (args) {send("i2d_PROXY_POLICY");}});

var i2d_PUBKEY = Module.findExportByName("libcrypto.dll", "i2d_PUBKEY")
Interceptor.attach(i2d_PUBKEY, {onLeave: function (args) {send("i2d_PUBKEY");}});

var i2d_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "i2d_PUBKEY_bio")
Interceptor.attach(i2d_PUBKEY_bio, {onLeave: function (args) {send("i2d_PUBKEY_bio");}});

var i2d_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "i2d_PUBKEY_fp")
Interceptor.attach(i2d_PUBKEY_fp, {onLeave: function (args) {send("i2d_PUBKEY_fp");}});

var i2d_PrivateKey = Module.findExportByName("libcrypto.dll", "i2d_PrivateKey")
Interceptor.attach(i2d_PrivateKey, {onLeave: function (args) {send("i2d_PrivateKey");}});

var i2d_PrivateKey_bio = Module.findExportByName("libcrypto.dll", "i2d_PrivateKey_bio")
Interceptor.attach(i2d_PrivateKey_bio, {onLeave: function (args) {send("i2d_PrivateKey_bio");}});

var i2d_PrivateKey_fp = Module.findExportByName("libcrypto.dll", "i2d_PrivateKey_fp")
Interceptor.attach(i2d_PrivateKey_fp, {onLeave: function (args) {send("i2d_PrivateKey_fp");}});

var i2d_PublicKey = Module.findExportByName("libcrypto.dll", "i2d_PublicKey")
Interceptor.attach(i2d_PublicKey, {onLeave: function (args) {send("i2d_PublicKey");}});

var i2d_RSAPrivateKey = Module.findExportByName("libcrypto.dll", "i2d_RSAPrivateKey")
Interceptor.attach(i2d_RSAPrivateKey, {onLeave: function (args) {send("i2d_RSAPrivateKey");}});

var i2d_RSAPrivateKey_bio = Module.findExportByName("libcrypto.dll", "i2d_RSAPrivateKey_bio")
Interceptor.attach(i2d_RSAPrivateKey_bio, {onLeave: function (args) {send("i2d_RSAPrivateKey_bio");}});

var i2d_RSAPrivateKey_fp = Module.findExportByName("libcrypto.dll", "i2d_RSAPrivateKey_fp")
Interceptor.attach(i2d_RSAPrivateKey_fp, {onLeave: function (args) {send("i2d_RSAPrivateKey_fp");}});

var i2d_RSAPublicKey = Module.findExportByName("libcrypto.dll", "i2d_RSAPublicKey")
Interceptor.attach(i2d_RSAPublicKey, {onLeave: function (args) {send("i2d_RSAPublicKey");}});

var i2d_RSAPublicKey_bio = Module.findExportByName("libcrypto.dll", "i2d_RSAPublicKey_bio")
Interceptor.attach(i2d_RSAPublicKey_bio, {onLeave: function (args) {send("i2d_RSAPublicKey_bio");}});

var i2d_RSAPublicKey_fp = Module.findExportByName("libcrypto.dll", "i2d_RSAPublicKey_fp")
Interceptor.attach(i2d_RSAPublicKey_fp, {onLeave: function (args) {send("i2d_RSAPublicKey_fp");}});

var i2d_RSA_NET = Module.findExportByName("libcrypto.dll", "i2d_RSA_NET")
Interceptor.attach(i2d_RSA_NET, {onLeave: function (args) {send("i2d_RSA_NET");}});

var i2d_RSA_OAEP_PARAMS = Module.findExportByName("libcrypto.dll", "i2d_RSA_OAEP_PARAMS")
Interceptor.attach(i2d_RSA_OAEP_PARAMS, {onLeave: function (args) {send("i2d_RSA_OAEP_PARAMS");}});

var i2d_RSA_PSS_PARAMS = Module.findExportByName("libcrypto.dll", "i2d_RSA_PSS_PARAMS")
Interceptor.attach(i2d_RSA_PSS_PARAMS, {onLeave: function (args) {send("i2d_RSA_PSS_PARAMS");}});

var i2d_RSA_PUBKEY = Module.findExportByName("libcrypto.dll", "i2d_RSA_PUBKEY")
Interceptor.attach(i2d_RSA_PUBKEY, {onLeave: function (args) {send("i2d_RSA_PUBKEY");}});

var i2d_RSA_PUBKEY_bio = Module.findExportByName("libcrypto.dll", "i2d_RSA_PUBKEY_bio")
Interceptor.attach(i2d_RSA_PUBKEY_bio, {onLeave: function (args) {send("i2d_RSA_PUBKEY_bio");}});

var i2d_RSA_PUBKEY_fp = Module.findExportByName("libcrypto.dll", "i2d_RSA_PUBKEY_fp")
Interceptor.attach(i2d_RSA_PUBKEY_fp, {onLeave: function (args) {send("i2d_RSA_PUBKEY_fp");}});

var i2d_SXNET = Module.findExportByName("libcrypto.dll", "i2d_SXNET")
Interceptor.attach(i2d_SXNET, {onLeave: function (args) {send("i2d_SXNET");}});

var i2d_SXNETID = Module.findExportByName("libcrypto.dll", "i2d_SXNETID")
Interceptor.attach(i2d_SXNETID, {onLeave: function (args) {send("i2d_SXNETID");}});

var i2d_TS_ACCURACY = Module.findExportByName("libcrypto.dll", "i2d_TS_ACCURACY")
Interceptor.attach(i2d_TS_ACCURACY, {onLeave: function (args) {send("i2d_TS_ACCURACY");}});

var i2d_TS_MSG_IMPRINT = Module.findExportByName("libcrypto.dll", "i2d_TS_MSG_IMPRINT")
Interceptor.attach(i2d_TS_MSG_IMPRINT, {onLeave: function (args) {send("i2d_TS_MSG_IMPRINT");}});

var i2d_TS_MSG_IMPRINT_bio = Module.findExportByName("libcrypto.dll", "i2d_TS_MSG_IMPRINT_bio")
Interceptor.attach(i2d_TS_MSG_IMPRINT_bio, {onLeave: function (args) {send("i2d_TS_MSG_IMPRINT_bio");}});

var i2d_TS_MSG_IMPRINT_fp = Module.findExportByName("libcrypto.dll", "i2d_TS_MSG_IMPRINT_fp")
Interceptor.attach(i2d_TS_MSG_IMPRINT_fp, {onLeave: function (args) {send("i2d_TS_MSG_IMPRINT_fp");}});

var i2d_TS_REQ = Module.findExportByName("libcrypto.dll", "i2d_TS_REQ")
Interceptor.attach(i2d_TS_REQ, {onLeave: function (args) {send("i2d_TS_REQ");}});

var i2d_TS_REQ_bio = Module.findExportByName("libcrypto.dll", "i2d_TS_REQ_bio")
Interceptor.attach(i2d_TS_REQ_bio, {onLeave: function (args) {send("i2d_TS_REQ_bio");}});

var i2d_TS_REQ_fp = Module.findExportByName("libcrypto.dll", "i2d_TS_REQ_fp")
Interceptor.attach(i2d_TS_REQ_fp, {onLeave: function (args) {send("i2d_TS_REQ_fp");}});

var i2d_TS_RESP = Module.findExportByName("libcrypto.dll", "i2d_TS_RESP")
Interceptor.attach(i2d_TS_RESP, {onLeave: function (args) {send("i2d_TS_RESP");}});

var i2d_TS_RESP_bio = Module.findExportByName("libcrypto.dll", "i2d_TS_RESP_bio")
Interceptor.attach(i2d_TS_RESP_bio, {onLeave: function (args) {send("i2d_TS_RESP_bio");}});

var i2d_TS_RESP_fp = Module.findExportByName("libcrypto.dll", "i2d_TS_RESP_fp")
Interceptor.attach(i2d_TS_RESP_fp, {onLeave: function (args) {send("i2d_TS_RESP_fp");}});

var i2d_TS_STATUS_INFO = Module.findExportByName("libcrypto.dll", "i2d_TS_STATUS_INFO")
Interceptor.attach(i2d_TS_STATUS_INFO, {onLeave: function (args) {send("i2d_TS_STATUS_INFO");}});

var i2d_TS_TST_INFO = Module.findExportByName("libcrypto.dll", "i2d_TS_TST_INFO")
Interceptor.attach(i2d_TS_TST_INFO, {onLeave: function (args) {send("i2d_TS_TST_INFO");}});

var i2d_TS_TST_INFO_bio = Module.findExportByName("libcrypto.dll", "i2d_TS_TST_INFO_bio")
Interceptor.attach(i2d_TS_TST_INFO_bio, {onLeave: function (args) {send("i2d_TS_TST_INFO_bio");}});

var i2d_TS_TST_INFO_fp = Module.findExportByName("libcrypto.dll", "i2d_TS_TST_INFO_fp")
Interceptor.attach(i2d_TS_TST_INFO_fp, {onLeave: function (args) {send("i2d_TS_TST_INFO_fp");}});

var i2d_USERNOTICE = Module.findExportByName("libcrypto.dll", "i2d_USERNOTICE")
Interceptor.attach(i2d_USERNOTICE, {onLeave: function (args) {send("i2d_USERNOTICE");}});

var i2d_X509 = Module.findExportByName("libcrypto.dll", "i2d_X509")
Interceptor.attach(i2d_X509, {onLeave: function (args) {send("i2d_X509");}});

var i2d_X509_ALGOR = Module.findExportByName("libcrypto.dll", "i2d_X509_ALGOR")
Interceptor.attach(i2d_X509_ALGOR, {onLeave: function (args) {send("i2d_X509_ALGOR");}});

var i2d_X509_ALGORS = Module.findExportByName("libcrypto.dll", "i2d_X509_ALGORS")
Interceptor.attach(i2d_X509_ALGORS, {onLeave: function (args) {send("i2d_X509_ALGORS");}});

var i2d_X509_ATTRIBUTE = Module.findExportByName("libcrypto.dll", "i2d_X509_ATTRIBUTE")
Interceptor.attach(i2d_X509_ATTRIBUTE, {onLeave: function (args) {send("i2d_X509_ATTRIBUTE");}});

var i2d_X509_AUX = Module.findExportByName("libcrypto.dll", "i2d_X509_AUX")
Interceptor.attach(i2d_X509_AUX, {onLeave: function (args) {send("i2d_X509_AUX");}});

var i2d_X509_CERT_AUX = Module.findExportByName("libcrypto.dll", "i2d_X509_CERT_AUX")
Interceptor.attach(i2d_X509_CERT_AUX, {onLeave: function (args) {send("i2d_X509_CERT_AUX");}});

var i2d_X509_CERT_PAIR = Module.findExportByName("libcrypto.dll", "i2d_X509_CERT_PAIR")
Interceptor.attach(i2d_X509_CERT_PAIR, {onLeave: function (args) {send("i2d_X509_CERT_PAIR");}});

var i2d_X509_CINF = Module.findExportByName("libcrypto.dll", "i2d_X509_CINF")
Interceptor.attach(i2d_X509_CINF, {onLeave: function (args) {send("i2d_X509_CINF");}});

var i2d_X509_CRL = Module.findExportByName("libcrypto.dll", "i2d_X509_CRL")
Interceptor.attach(i2d_X509_CRL, {onLeave: function (args) {send("i2d_X509_CRL");}});

var i2d_X509_CRL_INFO = Module.findExportByName("libcrypto.dll", "i2d_X509_CRL_INFO")
Interceptor.attach(i2d_X509_CRL_INFO, {onLeave: function (args) {send("i2d_X509_CRL_INFO");}});

var i2d_X509_CRL_bio = Module.findExportByName("libcrypto.dll", "i2d_X509_CRL_bio")
Interceptor.attach(i2d_X509_CRL_bio, {onLeave: function (args) {send("i2d_X509_CRL_bio");}});

var i2d_X509_CRL_fp = Module.findExportByName("libcrypto.dll", "i2d_X509_CRL_fp")
Interceptor.attach(i2d_X509_CRL_fp, {onLeave: function (args) {send("i2d_X509_CRL_fp");}});

var i2d_X509_EXTENSION = Module.findExportByName("libcrypto.dll", "i2d_X509_EXTENSION")
Interceptor.attach(i2d_X509_EXTENSION, {onLeave: function (args) {send("i2d_X509_EXTENSION");}});

var i2d_X509_EXTENSIONS = Module.findExportByName("libcrypto.dll", "i2d_X509_EXTENSIONS")
Interceptor.attach(i2d_X509_EXTENSIONS, {onLeave: function (args) {send("i2d_X509_EXTENSIONS");}});

var i2d_X509_NAME = Module.findExportByName("libcrypto.dll", "i2d_X509_NAME")
Interceptor.attach(i2d_X509_NAME, {onLeave: function (args) {send("i2d_X509_NAME");}});

var i2d_X509_NAME_ENTRY = Module.findExportByName("libcrypto.dll", "i2d_X509_NAME_ENTRY")
Interceptor.attach(i2d_X509_NAME_ENTRY, {onLeave: function (args) {send("i2d_X509_NAME_ENTRY");}});

var i2d_X509_PUBKEY = Module.findExportByName("libcrypto.dll", "i2d_X509_PUBKEY")
Interceptor.attach(i2d_X509_PUBKEY, {onLeave: function (args) {send("i2d_X509_PUBKEY");}});

var i2d_X509_REQ = Module.findExportByName("libcrypto.dll", "i2d_X509_REQ")
Interceptor.attach(i2d_X509_REQ, {onLeave: function (args) {send("i2d_X509_REQ");}});

var i2d_X509_REQ_INFO = Module.findExportByName("libcrypto.dll", "i2d_X509_REQ_INFO")
Interceptor.attach(i2d_X509_REQ_INFO, {onLeave: function (args) {send("i2d_X509_REQ_INFO");}});

var i2d_X509_REQ_bio = Module.findExportByName("libcrypto.dll", "i2d_X509_REQ_bio")
Interceptor.attach(i2d_X509_REQ_bio, {onLeave: function (args) {send("i2d_X509_REQ_bio");}});

var i2d_X509_REQ_fp = Module.findExportByName("libcrypto.dll", "i2d_X509_REQ_fp")
Interceptor.attach(i2d_X509_REQ_fp, {onLeave: function (args) {send("i2d_X509_REQ_fp");}});

var i2d_X509_REVOKED = Module.findExportByName("libcrypto.dll", "i2d_X509_REVOKED")
Interceptor.attach(i2d_X509_REVOKED, {onLeave: function (args) {send("i2d_X509_REVOKED");}});

var i2d_X509_SIG = Module.findExportByName("libcrypto.dll", "i2d_X509_SIG")
Interceptor.attach(i2d_X509_SIG, {onLeave: function (args) {send("i2d_X509_SIG");}});

var i2d_X509_VAL = Module.findExportByName("libcrypto.dll", "i2d_X509_VAL")
Interceptor.attach(i2d_X509_VAL, {onLeave: function (args) {send("i2d_X509_VAL");}});

var i2d_X509_bio = Module.findExportByName("libcrypto.dll", "i2d_X509_bio")
Interceptor.attach(i2d_X509_bio, {onLeave: function (args) {send("i2d_X509_bio");}});

var i2d_X509_fp = Module.findExportByName("libcrypto.dll", "i2d_X509_fp")
Interceptor.attach(i2d_X509_fp, {onLeave: function (args) {send("i2d_X509_fp");}});

var i2o_ECPublicKey = Module.findExportByName("libcrypto.dll", "i2o_ECPublicKey")
Interceptor.attach(i2o_ECPublicKey, {onLeave: function (args) {send("i2o_ECPublicKey");}});

var i2s_ASN1_ENUMERATED = Module.findExportByName("libcrypto.dll", "i2s_ASN1_ENUMERATED")
Interceptor.attach(i2s_ASN1_ENUMERATED, {onLeave: function (args) {send("i2s_ASN1_ENUMERATED");}});

var i2s_ASN1_ENUMERATED_TABLE = Module.findExportByName("libcrypto.dll", "i2s_ASN1_ENUMERATED_TABLE")
Interceptor.attach(i2s_ASN1_ENUMERATED_TABLE, {onLeave: function (args) {send("i2s_ASN1_ENUMERATED_TABLE");}});

var i2s_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "i2s_ASN1_INTEGER")
Interceptor.attach(i2s_ASN1_INTEGER, {onLeave: function (args) {send("i2s_ASN1_INTEGER");}});

var i2s_ASN1_OCTET_STRING = Module.findExportByName("libcrypto.dll", "i2s_ASN1_OCTET_STRING")
Interceptor.attach(i2s_ASN1_OCTET_STRING, {onLeave: function (args) {send("i2s_ASN1_OCTET_STRING");}});

var i2t_ASN1_OBJECT = Module.findExportByName("libcrypto.dll", "i2t_ASN1_OBJECT")
Interceptor.attach(i2t_ASN1_OBJECT, {onLeave: function (args) {send("i2t_ASN1_OBJECT");}});

var i2v_ASN1_BIT_STRING = Module.findExportByName("libcrypto.dll", "i2v_ASN1_BIT_STRING")
Interceptor.attach(i2v_ASN1_BIT_STRING, {onLeave: function (args) {send("i2v_ASN1_BIT_STRING");}});

var i2v_GENERAL_NAME = Module.findExportByName("libcrypto.dll", "i2v_GENERAL_NAME")
Interceptor.attach(i2v_GENERAL_NAME, {onLeave: function (args) {send("i2v_GENERAL_NAME");}});

var i2v_GENERAL_NAMES = Module.findExportByName("libcrypto.dll", "i2v_GENERAL_NAMES")
Interceptor.attach(i2v_GENERAL_NAMES, {onLeave: function (args) {send("i2v_GENERAL_NAMES");}});

var idea_cbc_encrypt = Module.findExportByName("libcrypto.dll", "idea_cbc_encrypt")
Interceptor.attach(idea_cbc_encrypt, {onLeave: function (args) {send("idea_cbc_encrypt");}});

var idea_cfb64_encrypt = Module.findExportByName("libcrypto.dll", "idea_cfb64_encrypt")
Interceptor.attach(idea_cfb64_encrypt, {onLeave: function (args) {send("idea_cfb64_encrypt");}});

var idea_ecb_encrypt = Module.findExportByName("libcrypto.dll", "idea_ecb_encrypt")
Interceptor.attach(idea_ecb_encrypt, {onLeave: function (args) {send("idea_ecb_encrypt");}});

var idea_encrypt = Module.findExportByName("libcrypto.dll", "idea_encrypt")
Interceptor.attach(idea_encrypt, {onLeave: function (args) {send("idea_encrypt");}});

var idea_ofb64_encrypt = Module.findExportByName("libcrypto.dll", "idea_ofb64_encrypt")
Interceptor.attach(idea_ofb64_encrypt, {onLeave: function (args) {send("idea_ofb64_encrypt");}});

var idea_options = Module.findExportByName("libcrypto.dll", "idea_options")
Interceptor.attach(idea_options, {onLeave: function (args) {send("idea_options");}});

var idea_set_decrypt_key = Module.findExportByName("libcrypto.dll", "idea_set_decrypt_key")
Interceptor.attach(idea_set_decrypt_key, {onLeave: function (args) {send("idea_set_decrypt_key");}});

var idea_set_encrypt_key = Module.findExportByName("libcrypto.dll", "idea_set_encrypt_key")
Interceptor.attach(idea_set_encrypt_key, {onLeave: function (args) {send("idea_set_encrypt_key");}});

var lh_delete = Module.findExportByName("libcrypto.dll", "lh_delete")
Interceptor.attach(lh_delete, {onLeave: function (args) {send("lh_delete");}});

var lh_doall = Module.findExportByName("libcrypto.dll", "lh_doall")
Interceptor.attach(lh_doall, {onLeave: function (args) {send("lh_doall");}});

var lh_doall_arg = Module.findExportByName("libcrypto.dll", "lh_doall_arg")
Interceptor.attach(lh_doall_arg, {onLeave: function (args) {send("lh_doall_arg");}});

var lh_free = Module.findExportByName("libcrypto.dll", "lh_free")
Interceptor.attach(lh_free, {onLeave: function (args) {send("lh_free");}});

var lh_insert = Module.findExportByName("libcrypto.dll", "lh_insert")
Interceptor.attach(lh_insert, {onLeave: function (args) {send("lh_insert");}});

var lh_new = Module.findExportByName("libcrypto.dll", "lh_new")
Interceptor.attach(lh_new, {onLeave: function (args) {send("lh_new");}});

var lh_node_stats = Module.findExportByName("libcrypto.dll", "lh_node_stats")
Interceptor.attach(lh_node_stats, {onLeave: function (args) {send("lh_node_stats");}});

var lh_node_stats_bio = Module.findExportByName("libcrypto.dll", "lh_node_stats_bio")
Interceptor.attach(lh_node_stats_bio, {onLeave: function (args) {send("lh_node_stats_bio");}});

var lh_node_usage_stats = Module.findExportByName("libcrypto.dll", "lh_node_usage_stats")
Interceptor.attach(lh_node_usage_stats, {onLeave: function (args) {send("lh_node_usage_stats");}});

var lh_node_usage_stats_bio = Module.findExportByName("libcrypto.dll", "lh_node_usage_stats_bio")
Interceptor.attach(lh_node_usage_stats_bio, {onLeave: function (args) {send("lh_node_usage_stats_bio");}});

var lh_num_items = Module.findExportByName("libcrypto.dll", "lh_num_items")
Interceptor.attach(lh_num_items, {onLeave: function (args) {send("lh_num_items");}});

var lh_retrieve = Module.findExportByName("libcrypto.dll", "lh_retrieve")
Interceptor.attach(lh_retrieve, {onLeave: function (args) {send("lh_retrieve");}});

var lh_stats = Module.findExportByName("libcrypto.dll", "lh_stats")
Interceptor.attach(lh_stats, {onLeave: function (args) {send("lh_stats");}});

var lh_stats_bio = Module.findExportByName("libcrypto.dll", "lh_stats_bio")
Interceptor.attach(lh_stats_bio, {onLeave: function (args) {send("lh_stats_bio");}});

var lh_strhash = Module.findExportByName("libcrypto.dll", "lh_strhash")
Interceptor.attach(lh_strhash, {onLeave: function (args) {send("lh_strhash");}});

var name_cmp = Module.findExportByName("libcrypto.dll", "name_cmp")
Interceptor.attach(name_cmp, {onLeave: function (args) {send("name_cmp");}});

var o2i_ECPublicKey = Module.findExportByName("libcrypto.dll", "o2i_ECPublicKey")
Interceptor.attach(o2i_ECPublicKey, {onLeave: function (args) {send("o2i_ECPublicKey");}});

var obj_cleanup_defer = Module.findExportByName("libcrypto.dll", "obj_cleanup_defer")
Interceptor.attach(obj_cleanup_defer, {onLeave: function (args) {send("obj_cleanup_defer");}});

var posix_close = Module.findExportByName("libcrypto.dll", "posix_close")
Interceptor.attach(posix_close, {onLeave: function (args) {send("posix_close");}});

var posix_connect = Module.findExportByName("libcrypto.dll", "posix_connect")
Interceptor.attach(posix_connect, {onLeave: function (args) {send("posix_connect");}});

var posix_fgets = Module.findExportByName("libcrypto.dll", "posix_fgets")
Interceptor.attach(posix_fgets, {onLeave: function (args) {send("posix_fgets");}});

var posix_fopen = Module.findExportByName("libcrypto.dll", "posix_fopen")
Interceptor.attach(posix_fopen, {onLeave: function (args) {send("posix_fopen");}});

var posix_getsockopt = Module.findExportByName("libcrypto.dll", "posix_getsockopt")
Interceptor.attach(posix_getsockopt, {onLeave: function (args) {send("posix_getsockopt");}});

var posix_open = Module.findExportByName("libcrypto.dll", "posix_open")
Interceptor.attach(posix_open, {onLeave: function (args) {send("posix_open");}});

var posix_perror = Module.findExportByName("libcrypto.dll", "posix_perror")
Interceptor.attach(posix_perror, {onLeave: function (args) {send("posix_perror");}});

var posix_read = Module.findExportByName("libcrypto.dll", "posix_read")
Interceptor.attach(posix_read, {onLeave: function (args) {send("posix_read");}});

var posix_rename = Module.findExportByName("libcrypto.dll", "posix_rename")
Interceptor.attach(posix_rename, {onLeave: function (args) {send("posix_rename");}});

var posix_setsockopt = Module.findExportByName("libcrypto.dll", "posix_setsockopt")
Interceptor.attach(posix_setsockopt, {onLeave: function (args) {send("posix_setsockopt");}});

var posix_write = Module.findExportByName("libcrypto.dll", "posix_write")
Interceptor.attach(posix_write, {onLeave: function (args) {send("posix_write");}});

var reallocarray = Module.findExportByName("libcrypto.dll", "reallocarray")
Interceptor.attach(reallocarray, {onLeave: function (args) {send("reallocarray");}});

var recallocarray = Module.findExportByName("libcrypto.dll", "recallocarray")
Interceptor.attach(recallocarray, {onLeave: function (args) {send("recallocarray");}});

var s2i_ASN1_INTEGER = Module.findExportByName("libcrypto.dll", "s2i_ASN1_INTEGER")
Interceptor.attach(s2i_ASN1_INTEGER, {onLeave: function (args) {send("s2i_ASN1_INTEGER");}});

var s2i_ASN1_OCTET_STRING = Module.findExportByName("libcrypto.dll", "s2i_ASN1_OCTET_STRING")
Interceptor.attach(s2i_ASN1_OCTET_STRING, {onLeave: function (args) {send("s2i_ASN1_OCTET_STRING");}});

var sk_delete = Module.findExportByName("libcrypto.dll", "sk_delete")
Interceptor.attach(sk_delete, {onLeave: function (args) {send("sk_delete");}});

var sk_delete_ptr = Module.findExportByName("libcrypto.dll", "sk_delete_ptr")
Interceptor.attach(sk_delete_ptr, {onLeave: function (args) {send("sk_delete_ptr");}});

var sk_dup = Module.findExportByName("libcrypto.dll", "sk_dup")
Interceptor.attach(sk_dup, {onLeave: function (args) {send("sk_dup");}});

var sk_find = Module.findExportByName("libcrypto.dll", "sk_find")
Interceptor.attach(sk_find, {onLeave: function (args) {send("sk_find");}});

var sk_find_ex = Module.findExportByName("libcrypto.dll", "sk_find_ex")
Interceptor.attach(sk_find_ex, {onLeave: function (args) {send("sk_find_ex");}});

var sk_free = Module.findExportByName("libcrypto.dll", "sk_free")
Interceptor.attach(sk_free, {onLeave: function (args) {send("sk_free");}});

var sk_insert = Module.findExportByName("libcrypto.dll", "sk_insert")
Interceptor.attach(sk_insert, {onLeave: function (args) {send("sk_insert");}});

var sk_is_sorted = Module.findExportByName("libcrypto.dll", "sk_is_sorted")
Interceptor.attach(sk_is_sorted, {onLeave: function (args) {send("sk_is_sorted");}});

var sk_new = Module.findExportByName("libcrypto.dll", "sk_new")
Interceptor.attach(sk_new, {onLeave: function (args) {send("sk_new");}});

var sk_new_null = Module.findExportByName("libcrypto.dll", "sk_new_null")
Interceptor.attach(sk_new_null, {onLeave: function (args) {send("sk_new_null");}});

var sk_num = Module.findExportByName("libcrypto.dll", "sk_num")
Interceptor.attach(sk_num, {onLeave: function (args) {send("sk_num");}});

var sk_pop = Module.findExportByName("libcrypto.dll", "sk_pop")
Interceptor.attach(sk_pop, {onLeave: function (args) {send("sk_pop");}});

var sk_pop_free = Module.findExportByName("libcrypto.dll", "sk_pop_free")
Interceptor.attach(sk_pop_free, {onLeave: function (args) {send("sk_pop_free");}});

var sk_push = Module.findExportByName("libcrypto.dll", "sk_push")
Interceptor.attach(sk_push, {onLeave: function (args) {send("sk_push");}});

var sk_set = Module.findExportByName("libcrypto.dll", "sk_set")
Interceptor.attach(sk_set, {onLeave: function (args) {send("sk_set");}});

var sk_set_cmp_func = Module.findExportByName("libcrypto.dll", "sk_set_cmp_func")
Interceptor.attach(sk_set_cmp_func, {onLeave: function (args) {send("sk_set_cmp_func");}});

var sk_shift = Module.findExportByName("libcrypto.dll", "sk_shift")
Interceptor.attach(sk_shift, {onLeave: function (args) {send("sk_shift");}});

var sk_sort = Module.findExportByName("libcrypto.dll", "sk_sort")
Interceptor.attach(sk_sort, {onLeave: function (args) {send("sk_sort");}});

var sk_unshift = Module.findExportByName("libcrypto.dll", "sk_unshift")
Interceptor.attach(sk_unshift, {onLeave: function (args) {send("sk_unshift");}});

var sk_value = Module.findExportByName("libcrypto.dll", "sk_value")
Interceptor.attach(sk_value, {onLeave: function (args) {send("sk_value");}});

var sk_zero = Module.findExportByName("libcrypto.dll", "sk_zero")
Interceptor.attach(sk_zero, {onLeave: function (args) {send("sk_zero");}});

var strcasecmp = Module.findExportByName("libcrypto.dll", "strcasecmp")
Interceptor.attach(strcasecmp, {onLeave: function (args) {send("strcasecmp");}});

var string_to_hex = Module.findExportByName("libcrypto.dll", "string_to_hex")
Interceptor.attach(string_to_hex, {onLeave: function (args) {send("string_to_hex");}});

var strlcat = Module.findExportByName("libcrypto.dll", "strlcat")
Interceptor.attach(strlcat, {onLeave: function (args) {send("strlcat");}});

var strlcpy = Module.findExportByName("libcrypto.dll", "strlcpy")
Interceptor.attach(strlcpy, {onLeave: function (args) {send("strlcpy");}});

var strndup = Module.findExportByName("libcrypto.dll", "strndup")
Interceptor.attach(strndup, {onLeave: function (args) {send("strndup");}});

var strsep = Module.findExportByName("libcrypto.dll", "strsep")
Interceptor.attach(strsep, {onLeave: function (args) {send("strsep");}});

var timegm = Module.findExportByName("libcrypto.dll", "timegm")
Interceptor.attach(timegm, {onLeave: function (args) {send("timegm");}});

var timingsafe_bcmp = Module.findExportByName("libcrypto.dll", "timingsafe_bcmp")
Interceptor.attach(timingsafe_bcmp, {onLeave: function (args) {send("timingsafe_bcmp");}});

var timingsafe_memcmp = Module.findExportByName("libcrypto.dll", "timingsafe_memcmp")
Interceptor.attach(timingsafe_memcmp, {onLeave: function (args) {send("timingsafe_memcmp");}});

var v2i_ASN1_BIT_STRING = Module.findExportByName("libcrypto.dll", "v2i_ASN1_BIT_STRING")
Interceptor.attach(v2i_ASN1_BIT_STRING, {onLeave: function (args) {send("v2i_ASN1_BIT_STRING");}});

var v2i_GENERAL_NAME = Module.findExportByName("libcrypto.dll", "v2i_GENERAL_NAME")
Interceptor.attach(v2i_GENERAL_NAME, {onLeave: function (args) {send("v2i_GENERAL_NAME");}});

var v2i_GENERAL_NAMES = Module.findExportByName("libcrypto.dll", "v2i_GENERAL_NAMES")
Interceptor.attach(v2i_GENERAL_NAMES, {onLeave: function (args) {send("v2i_GENERAL_NAMES");}});

var v2i_GENERAL_NAME_ex = Module.findExportByName("libcrypto.dll", "v2i_GENERAL_NAME_ex")
Interceptor.attach(v2i_GENERAL_NAME_ex, {onLeave: function (args) {send("v2i_GENERAL_NAME_ex");}});

var vasprintf = Module.findExportByName("libcrypto.dll", "vasprintf")
Interceptor.attach(vasprintf, {onLeave: function (args) {send("vasprintf");}});

