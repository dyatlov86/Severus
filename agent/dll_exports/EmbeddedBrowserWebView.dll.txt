var ??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z = Module.findExportByName("EmbeddedBrowserWebView.dll", "??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z")
Interceptor.attach(??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z, {onLeave: function (args) {send("??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z");}});

var ??0IDataFieldVisitor@telemetry_client@@QEAA@XZ = Module.findExportByName("EmbeddedBrowserWebView.dll", "??0IDataFieldVisitor@telemetry_client@@QEAA@XZ")
Interceptor.attach(??0IDataFieldVisitor@telemetry_client@@QEAA@XZ, {onLeave: function (args) {send("??0IDataFieldVisitor@telemetry_client@@QEAA@XZ");}});

var ??1IDataFieldVisitor@telemetry_client@@UEAA@XZ = Module.findExportByName("EmbeddedBrowserWebView.dll", "??1IDataFieldVisitor@telemetry_client@@UEAA@XZ")
Interceptor.attach(??1IDataFieldVisitor@telemetry_client@@UEAA@XZ, {onLeave: function (args) {send("??1IDataFieldVisitor@telemetry_client@@UEAA@XZ");}});

var ??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z = Module.findExportByName("EmbeddedBrowserWebView.dll", "??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z")
Interceptor.attach(??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z, {onLeave: function (args) {send("??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z");}});

var ??_7IDataFieldVisitor@telemetry_client@@6B@ = Module.findExportByName("EmbeddedBrowserWebView.dll", "??_7IDataFieldVisitor@telemetry_client@@6B@")
Interceptor.attach(??_7IDataFieldVisitor@telemetry_client@@6B@, {onLeave: function (args) {send("??_7IDataFieldVisitor@telemetry_client@@6B@");}});

var CreateWebViewEnvironmentWithOptionsInternal = Module.findExportByName("EmbeddedBrowserWebView.dll", "CreateWebViewEnvironmentWithOptionsInternal")
Interceptor.attach(CreateWebViewEnvironmentWithOptionsInternal, {onLeave: function (args) {send("CreateWebViewEnvironmentWithOptionsInternal");}});

var DllCanUnloadNow = Module.findExportByName("EmbeddedBrowserWebView.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var GetHandleVerifier = Module.findExportByName("EmbeddedBrowserWebView.dll", "GetHandleVerifier")
Interceptor.attach(GetHandleVerifier, {onLeave: function (args) {send("GetHandleVerifier");}});

var OQS_CPU_has_extension = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_CPU_has_extension")
Interceptor.attach(OQS_CPU_has_extension, {onLeave: function (args) {send("OQS_CPU_has_extension");}});

var OQS_KEM_alg_count = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_alg_count")
Interceptor.attach(OQS_KEM_alg_count, {onLeave: function (args) {send("OQS_KEM_alg_count");}});

var OQS_KEM_alg_identifier = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_alg_identifier")
Interceptor.attach(OQS_KEM_alg_identifier, {onLeave: function (args) {send("OQS_KEM_alg_identifier");}});

var OQS_KEM_alg_is_enabled = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_alg_is_enabled")
Interceptor.attach(OQS_KEM_alg_is_enabled, {onLeave: function (args) {send("OQS_KEM_alg_is_enabled");}});

var OQS_KEM_decaps = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_decaps")
Interceptor.attach(OQS_KEM_decaps, {onLeave: function (args) {send("OQS_KEM_decaps");}});

var OQS_KEM_encaps = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_encaps")
Interceptor.attach(OQS_KEM_encaps, {onLeave: function (args) {send("OQS_KEM_encaps");}});

var OQS_KEM_free = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_free")
Interceptor.attach(OQS_KEM_free, {onLeave: function (args) {send("OQS_KEM_free");}});

var OQS_KEM_keypair = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_keypair")
Interceptor.attach(OQS_KEM_keypair, {onLeave: function (args) {send("OQS_KEM_keypair");}});

var OQS_KEM_kyber_768_decaps = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_kyber_768_decaps")
Interceptor.attach(OQS_KEM_kyber_768_decaps, {onLeave: function (args) {send("OQS_KEM_kyber_768_decaps");}});

var OQS_KEM_kyber_768_encaps = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_kyber_768_encaps")
Interceptor.attach(OQS_KEM_kyber_768_encaps, {onLeave: function (args) {send("OQS_KEM_kyber_768_encaps");}});

var OQS_KEM_kyber_768_keypair = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_kyber_768_keypair")
Interceptor.attach(OQS_KEM_kyber_768_keypair, {onLeave: function (args) {send("OQS_KEM_kyber_768_keypair");}});

var OQS_KEM_new = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_KEM_new")
Interceptor.attach(OQS_KEM_new, {onLeave: function (args) {send("OQS_KEM_new");}});

var OQS_MEM_cleanse = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_MEM_cleanse")
Interceptor.attach(OQS_MEM_cleanse, {onLeave: function (args) {send("OQS_MEM_cleanse");}});

var OQS_MEM_insecure_free = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_MEM_insecure_free")
Interceptor.attach(OQS_MEM_insecure_free, {onLeave: function (args) {send("OQS_MEM_insecure_free");}});

var OQS_MEM_secure_bcmp = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_MEM_secure_bcmp")
Interceptor.attach(OQS_MEM_secure_bcmp, {onLeave: function (args) {send("OQS_MEM_secure_bcmp");}});

var OQS_MEM_secure_free = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_MEM_secure_free")
Interceptor.attach(OQS_MEM_secure_free, {onLeave: function (args) {send("OQS_MEM_secure_free");}});

var OQS_SIG_alg_count = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_alg_count")
Interceptor.attach(OQS_SIG_alg_count, {onLeave: function (args) {send("OQS_SIG_alg_count");}});

var OQS_SIG_alg_identifier = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_alg_identifier")
Interceptor.attach(OQS_SIG_alg_identifier, {onLeave: function (args) {send("OQS_SIG_alg_identifier");}});

var OQS_SIG_alg_is_enabled = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_alg_is_enabled")
Interceptor.attach(OQS_SIG_alg_is_enabled, {onLeave: function (args) {send("OQS_SIG_alg_is_enabled");}});

var OQS_SIG_free = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_free")
Interceptor.attach(OQS_SIG_free, {onLeave: function (args) {send("OQS_SIG_free");}});

var OQS_SIG_keypair = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_keypair")
Interceptor.attach(OQS_SIG_keypair, {onLeave: function (args) {send("OQS_SIG_keypair");}});

var OQS_SIG_new = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_new")
Interceptor.attach(OQS_SIG_new, {onLeave: function (args) {send("OQS_SIG_new");}});

var OQS_SIG_sign = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_sign")
Interceptor.attach(OQS_SIG_sign, {onLeave: function (args) {send("OQS_SIG_sign");}});

var OQS_SIG_verify = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_SIG_verify")
Interceptor.attach(OQS_SIG_verify, {onLeave: function (args) {send("OQS_SIG_verify");}});

var OQS_init = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_init")
Interceptor.attach(OQS_init, {onLeave: function (args) {send("OQS_init");}});

var OQS_randombytes = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_randombytes")
Interceptor.attach(OQS_randombytes, {onLeave: function (args) {send("OQS_randombytes");}});

var OQS_randombytes_custom_algorithm = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_randombytes_custom_algorithm")
Interceptor.attach(OQS_randombytes_custom_algorithm, {onLeave: function (args) {send("OQS_randombytes_custom_algorithm");}});

var OQS_randombytes_nist_kat_init_256bit = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_randombytes_nist_kat_init_256bit")
Interceptor.attach(OQS_randombytes_nist_kat_init_256bit, {onLeave: function (args) {send("OQS_randombytes_nist_kat_init_256bit");}});

var OQS_randombytes_switch_algorithm = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_randombytes_switch_algorithm")
Interceptor.attach(OQS_randombytes_switch_algorithm, {onLeave: function (args) {send("OQS_randombytes_switch_algorithm");}});

var OQS_version = Module.findExportByName("EmbeddedBrowserWebView.dll", "OQS_version")
Interceptor.attach(OQS_version, {onLeave: function (args) {send("OQS_version");}});

