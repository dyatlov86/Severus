var EdpAddAppClipboardConsentInCache = Module.findExportByName("edputil.dll", "EdpAddAppClipboardConsentInCache")
Interceptor.attach(EdpAddAppClipboardConsentInCache, {onLeave: function (args) {send("EdpAddAppClipboardConsentInCache");}});

var EdpAuditAction = Module.findExportByName("edputil.dll", "EdpAuditAction")
Interceptor.attach(EdpAuditAction, {onLeave: function (args) {send("EdpAuditAction");}});

var EdpCanCallerAccessWin32Clipboard = Module.findExportByName("edputil.dll", "EdpCanCallerAccessWin32Clipboard")
Interceptor.attach(EdpCanCallerAccessWin32Clipboard, {onLeave: function (args) {send("EdpCanCallerAccessWin32Clipboard");}});

var EdpCheckAccess = Module.findExportByName("edputil.dll", "EdpCheckAccess")
Interceptor.attach(EdpCheckAccess, {onLeave: function (args) {send("EdpCheckAccess");}});

var EdpCheckAccessForContext = Module.findExportByName("edputil.dll", "EdpCheckAccessForContext")
Interceptor.attach(EdpCheckAccessForContext, {onLeave: function (args) {send("EdpCheckAccessForContext");}});

var EdpCheckIsDpapiNgEntId = Module.findExportByName("edputil.dll", "EdpCheckIsDpapiNgEntId")
Interceptor.attach(EdpCheckIsDpapiNgEntId, {onLeave: function (args) {send("EdpCheckIsDpapiNgEntId");}});

var EdpCheckIsRmsEntId = Module.findExportByName("edputil.dll", "EdpCheckIsRmsEntId")
Interceptor.attach(EdpCheckIsRmsEntId, {onLeave: function (args) {send("EdpCheckIsRmsEntId");}});

var EdpClearClipboardMetaData = Module.findExportByName("edputil.dll", "EdpClearClipboardMetaData")
Interceptor.attach(EdpClearClipboardMetaData, {onLeave: function (args) {send("EdpClearClipboardMetaData");}});

var EdpConvertProtectorToExternalId = Module.findExportByName("edputil.dll", "EdpConvertProtectorToExternalId")
Interceptor.attach(EdpConvertProtectorToExternalId, {onLeave: function (args) {send("EdpConvertProtectorToExternalId");}});

var EdpFreeContext = Module.findExportByName("edputil.dll", "EdpFreeContext")
Interceptor.attach(EdpFreeContext, {onLeave: function (args) {send("EdpFreeContext");}});

var EdpGetAppLockerUniqueAppIdentifier = Module.findExportByName("edputil.dll", "EdpGetAppLockerUniqueAppIdentifier")
Interceptor.attach(EdpGetAppLockerUniqueAppIdentifier, {onLeave: function (args) {send("EdpGetAppLockerUniqueAppIdentifier");}});

var EdpGetAppLockerUniqueAppIdentifierByToken = Module.findExportByName("edputil.dll", "EdpGetAppLockerUniqueAppIdentifierByToken")
Interceptor.attach(EdpGetAppLockerUniqueAppIdentifierByToken, {onLeave: function (args) {send("EdpGetAppLockerUniqueAppIdentifierByToken");}});

var EdpGetAppLockerUniqueAppIdentifierByTokenEx = Module.findExportByName("edputil.dll", "EdpGetAppLockerUniqueAppIdentifierByTokenEx")
Interceptor.attach(EdpGetAppLockerUniqueAppIdentifierByTokenEx, {onLeave: function (args) {send("EdpGetAppLockerUniqueAppIdentifierByTokenEx");}});

var EdpGetClipboardAccessDeniedData = Module.findExportByName("edputil.dll", "EdpGetClipboardAccessDeniedData")
Interceptor.attach(EdpGetClipboardAccessDeniedData, {onLeave: function (args) {send("EdpGetClipboardAccessDeniedData");}});

var EdpGetContextForBinaryPath = Module.findExportByName("edputil.dll", "EdpGetContextForBinaryPath")
Interceptor.attach(EdpGetContextForBinaryPath, {onLeave: function (args) {send("EdpGetContextForBinaryPath");}});

var EdpGetContextForImpersonatedToken = Module.findExportByName("edputil.dll", "EdpGetContextForImpersonatedToken")
Interceptor.attach(EdpGetContextForImpersonatedToken, {onLeave: function (args) {send("EdpGetContextForImpersonatedToken");}});

var EdpGetContextForPackageFullName = Module.findExportByName("edputil.dll", "EdpGetContextForPackageFullName")
Interceptor.attach(EdpGetContextForPackageFullName, {onLeave: function (args) {send("EdpGetContextForPackageFullName");}});

var EdpGetContextForProcess = Module.findExportByName("edputil.dll", "EdpGetContextForProcess")
Interceptor.attach(EdpGetContextForProcess, {onLeave: function (args) {send("EdpGetContextForProcess");}});

var EdpGetContextForWindow = Module.findExportByName("edputil.dll", "EdpGetContextForWindow")
Interceptor.attach(EdpGetContextForWindow, {onLeave: function (args) {send("EdpGetContextForWindow");}});

var EdpGetDataInfoFromDataObject = Module.findExportByName("edputil.dll", "EdpGetDataInfoFromDataObject")
Interceptor.attach(EdpGetDataInfoFromDataObject, {onLeave: function (args) {send("EdpGetDataInfoFromDataObject");}});

var EdpGetDataInfoFromWin32Clipboard = Module.findExportByName("edputil.dll", "EdpGetDataInfoFromWin32Clipboard")
Interceptor.attach(EdpGetDataInfoFromWin32Clipboard, {onLeave: function (args) {send("EdpGetDataInfoFromWin32Clipboard");}});

var EdpGetEnterpriseIdForClipboard = Module.findExportByName("edputil.dll", "EdpGetEnterpriseIdForClipboard")
Interceptor.attach(EdpGetEnterpriseIdForClipboard, {onLeave: function (args) {send("EdpGetEnterpriseIdForClipboard");}});

var EdpGetEnterpriseIdForDataObject = Module.findExportByName("edputil.dll", "EdpGetEnterpriseIdForDataObject")
Interceptor.attach(EdpGetEnterpriseIdForDataObject, {onLeave: function (args) {send("EdpGetEnterpriseIdForDataObject");}});

var EdpGetEnterpriseIdForUIEnforcement = Module.findExportByName("edputil.dll", "EdpGetEnterpriseIdForUIEnforcement")
Interceptor.attach(EdpGetEnterpriseIdForUIEnforcement, {onLeave: function (args) {send("EdpGetEnterpriseIdForUIEnforcement");}});

var EdpGetEnterpriseIdForUIEnforcementFromProcess = Module.findExportByName("edputil.dll", "EdpGetEnterpriseIdForUIEnforcementFromProcess")
Interceptor.attach(EdpGetEnterpriseIdForUIEnforcementFromProcess, {onLeave: function (args) {send("EdpGetEnterpriseIdForUIEnforcementFromProcess");}});

var EdpGetFilePathsForDataObject = Module.findExportByName("edputil.dll", "EdpGetFilePathsForDataObject")
Interceptor.attach(EdpGetFilePathsForDataObject, {onLeave: function (args) {send("EdpGetFilePathsForDataObject");}});

var EdpGetIsManaged = Module.findExportByName("edputil.dll", "EdpGetIsManaged")
Interceptor.attach(EdpGetIsManaged, {onLeave: function (args) {send("EdpGetIsManaged");}});

var EdpGetPersonalEnterpriseIdString = Module.findExportByName("edputil.dll", "EdpGetPersonalEnterpriseIdString")
Interceptor.attach(EdpGetPersonalEnterpriseIdString, {onLeave: function (args) {send("EdpGetPersonalEnterpriseIdString");}});

var EdpGetPrimaryIdentities = Module.findExportByName("edputil.dll", "EdpGetPrimaryIdentities")
Interceptor.attach(EdpGetPrimaryIdentities, {onLeave: function (args) {send("EdpGetPrimaryIdentities");}});

var EdpGetPrimaryIdentityIfManaged = Module.findExportByName("edputil.dll", "EdpGetPrimaryIdentityIfManaged")
Interceptor.attach(EdpGetPrimaryIdentityIfManaged, {onLeave: function (args) {send("EdpGetPrimaryIdentityIfManaged");}});

var EdpGetRevocationInfo = Module.findExportByName("edputil.dll", "EdpGetRevocationInfo")
Interceptor.attach(EdpGetRevocationInfo, {onLeave: function (args) {send("EdpGetRevocationInfo");}});

var EdpGetSourceAppIdForClipboard = Module.findExportByName("edputil.dll", "EdpGetSourceAppIdForClipboard")
Interceptor.attach(EdpGetSourceAppIdForClipboard, {onLeave: function (args) {send("EdpGetSourceAppIdForClipboard");}});

var EdpGetSourceIsEnlightenedForClipboard = Module.findExportByName("edputil.dll", "EdpGetSourceIsEnlightenedForClipboard")
Interceptor.attach(EdpGetSourceIsEnlightenedForClipboard, {onLeave: function (args) {send("EdpGetSourceIsEnlightenedForClipboard");}});

var EdpGetWindowFromThreadId = Module.findExportByName("edputil.dll", "EdpGetWindowFromThreadId")
Interceptor.attach(EdpGetWindowFromThreadId, {onLeave: function (args) {send("EdpGetWindowFromThreadId");}});

var EdpIsAppClipboardConsentCached = Module.findExportByName("edputil.dll", "EdpIsAppClipboardConsentCached")
Interceptor.attach(EdpIsAppClipboardConsentCached, {onLeave: function (args) {send("EdpIsAppClipboardConsentCached");}});

var EdpIsContextExemptOrEnlightenedAllowed = Module.findExportByName("edputil.dll", "EdpIsContextExemptOrEnlightenedAllowed")
Interceptor.attach(EdpIsContextExemptOrEnlightenedAllowed, {onLeave: function (args) {send("EdpIsContextExemptOrEnlightenedAllowed");}});

var EdpIsFileAccessAllowed = Module.findExportByName("edputil.dll", "EdpIsFileAccessAllowed")
Interceptor.attach(EdpIsFileAccessAllowed, {onLeave: function (args) {send("EdpIsFileAccessAllowed");}});

var EdpIsUIPolicyEvaluationEnabledForThread = Module.findExportByName("edputil.dll", "EdpIsUIPolicyEvaluationEnabledForThread")
Interceptor.attach(EdpIsUIPolicyEvaluationEnabledForThread, {onLeave: function (args) {send("EdpIsUIPolicyEvaluationEnabledForThread");}});

var EdpIsValidSubjectForEncryption = Module.findExportByName("edputil.dll", "EdpIsValidSubjectForEncryption")
Interceptor.attach(EdpIsValidSubjectForEncryption, {onLeave: function (args) {send("EdpIsValidSubjectForEncryption");}});

var EdpParseIdentityString = Module.findExportByName("edputil.dll", "EdpParseIdentityString")
Interceptor.attach(EdpParseIdentityString, {onLeave: function (args) {send("EdpParseIdentityString");}});

var EdpParseProtectorDescriptor = Module.findExportByName("edputil.dll", "EdpParseProtectorDescriptor")
Interceptor.attach(EdpParseProtectorDescriptor, {onLeave: function (args) {send("EdpParseProtectorDescriptor");}});

var EdpQueryIdentityWithProtectorDescriptor = Module.findExportByName("edputil.dll", "EdpQueryIdentityWithProtectorDescriptor")
Interceptor.attach(EdpQueryIdentityWithProtectorDescriptor, {onLeave: function (args) {send("EdpQueryIdentityWithProtectorDescriptor");}});

var EdpRequestAccess = Module.findExportByName("edputil.dll", "EdpRequestAccess")
Interceptor.attach(EdpRequestAccess, {onLeave: function (args) {send("EdpRequestAccess");}});

var EdpRequestAccessForContext = Module.findExportByName("edputil.dll", "EdpRequestAccessForContext")
Interceptor.attach(EdpRequestAccessForContext, {onLeave: function (args) {send("EdpRequestAccessForContext");}});

var EdpSetEnterpriseIdForClipboard = Module.findExportByName("edputil.dll", "EdpSetEnterpriseIdForClipboard")
Interceptor.attach(EdpSetEnterpriseIdForClipboard, {onLeave: function (args) {send("EdpSetEnterpriseIdForClipboard");}});

var EdpSetSourceAppIdForClipboard = Module.findExportByName("edputil.dll", "EdpSetSourceAppIdForClipboard")
Interceptor.attach(EdpSetSourceAppIdForClipboard, {onLeave: function (args) {send("EdpSetSourceAppIdForClipboard");}});

var EdpSetSourceIsEnlightenedForClipboard = Module.findExportByName("edputil.dll", "EdpSetSourceIsEnlightenedForClipboard")
Interceptor.attach(EdpSetSourceIsEnlightenedForClipboard, {onLeave: function (args) {send("EdpSetSourceIsEnlightenedForClipboard");}});

var EdpShouldShowEnterpriseIndicator = Module.findExportByName("edputil.dll", "EdpShouldShowEnterpriseIndicator")
Interceptor.attach(EdpShouldShowEnterpriseIndicator, {onLeave: function (args) {send("EdpShouldShowEnterpriseIndicator");}});

var EdpUtilCreateEnterpriseContextFromEnterpriseId = Module.findExportByName("edputil.dll", "EdpUtilCreateEnterpriseContextFromEnterpriseId")
Interceptor.attach(EdpUtilCreateEnterpriseContextFromEnterpriseId, {onLeave: function (args) {send("EdpUtilCreateEnterpriseContextFromEnterpriseId");}});

var EdpUtilFreeEnterpriseContext = Module.findExportByName("edputil.dll", "EdpUtilFreeEnterpriseContext")
Interceptor.attach(EdpUtilFreeEnterpriseContext, {onLeave: function (args) {send("EdpUtilFreeEnterpriseContext");}});

var EdpUtilGetEnterpriseContextByName = Module.findExportByName("edputil.dll", "EdpUtilGetEnterpriseContextByName")
Interceptor.attach(EdpUtilGetEnterpriseContextByName, {onLeave: function (args) {send("EdpUtilGetEnterpriseContextByName");}});

var EdpUtilGetEnterpriseContextByProcess = Module.findExportByName("edputil.dll", "EdpUtilGetEnterpriseContextByProcess")
Interceptor.attach(EdpUtilGetEnterpriseContextByProcess, {onLeave: function (args) {send("EdpUtilGetEnterpriseContextByProcess");}});

var EdpUtilGetEnterpriseContextByWindowHandle = Module.findExportByName("edputil.dll", "EdpUtilGetEnterpriseContextByWindowHandle")
Interceptor.attach(EdpUtilGetEnterpriseContextByWindowHandle, {onLeave: function (args) {send("EdpUtilGetEnterpriseContextByWindowHandle");}});

var EdpUtilGetEnterpriseContextForCurrentView = Module.findExportByName("edputil.dll", "EdpUtilGetEnterpriseContextForCurrentView")
Interceptor.attach(EdpUtilGetEnterpriseContextForCurrentView, {onLeave: function (args) {send("EdpUtilGetEnterpriseContextForCurrentView");}});

var EdpUtilGetEnterpriseContextForView = Module.findExportByName("edputil.dll", "EdpUtilGetEnterpriseContextForView")
Interceptor.attach(EdpUtilGetEnterpriseContextForView, {onLeave: function (args) {send("EdpUtilGetEnterpriseContextForView");}});

var EdpUtilIsAppEnlightened = Module.findExportByName("edputil.dll", "EdpUtilIsAppEnlightened")
Interceptor.attach(EdpUtilIsAppEnlightened, {onLeave: function (args) {send("EdpUtilIsAppEnlightened");}});

var EdpUtilQueryPolicy = Module.findExportByName("edputil.dll", "EdpUtilQueryPolicy")
Interceptor.attach(EdpUtilQueryPolicy, {onLeave: function (args) {send("EdpUtilQueryPolicy");}});

var GetProcessUniqueIdFromToken = Module.findExportByName("edputil.dll", "GetProcessUniqueIdFromToken")
Interceptor.attach(GetProcessUniqueIdFromToken, {onLeave: function (args) {send("GetProcessUniqueIdFromToken");}});

