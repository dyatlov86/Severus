var CompareHttpTransportCredentials = Module.findExportByName("rpchttp.dll", "CompareHttpTransportCredentials")
Interceptor.attach(CompareHttpTransportCredentials, {onLeave: function (args) {send("CompareHttpTransportCredentials");}});

var ConvertToUnicodeHttpTransportCredentials = Module.findExportByName("rpchttp.dll", "ConvertToUnicodeHttpTransportCredentials")
Interceptor.attach(ConvertToUnicodeHttpTransportCredentials, {onLeave: function (args) {send("ConvertToUnicodeHttpTransportCredentials");}});

var DuplicateHttpTransportCredentials = Module.findExportByName("rpchttp.dll", "DuplicateHttpTransportCredentials")
Interceptor.attach(DuplicateHttpTransportCredentials, {onLeave: function (args) {send("DuplicateHttpTransportCredentials");}});

var FreeHttpTransportCredentials = Module.findExportByName("rpchttp.dll", "FreeHttpTransportCredentials")
Interceptor.attach(FreeHttpTransportCredentials, {onLeave: function (args) {send("FreeHttpTransportCredentials");}});

var HTTP2GetRpcConnectionTransport = Module.findExportByName("rpchttp.dll", "HTTP2GetRpcConnectionTransport")
Interceptor.attach(HTTP2GetRpcConnectionTransport, {onLeave: function (args) {send("HTTP2GetRpcConnectionTransport");}});

var HTTP2ProcessComplexTReceive = Module.findExportByName("rpchttp.dll", "HTTP2ProcessComplexTReceive")
Interceptor.attach(HTTP2ProcessComplexTReceive, {onLeave: function (args) {send("HTTP2ProcessComplexTReceive");}});

var HTTP2ProcessComplexTSend = Module.findExportByName("rpchttp.dll", "HTTP2ProcessComplexTSend")
Interceptor.attach(HTTP2ProcessComplexTSend, {onLeave: function (args) {send("HTTP2ProcessComplexTSend");}});

var HTTP2ProcessRuntimePostedEvent = Module.findExportByName("rpchttp.dll", "HTTP2ProcessRuntimePostedEvent")
Interceptor.attach(HTTP2ProcessRuntimePostedEvent, {onLeave: function (args) {send("HTTP2ProcessRuntimePostedEvent");}});

var HTTP2TestHook = Module.findExportByName("rpchttp.dll", "HTTP2TestHook")
Interceptor.attach(HTTP2TestHook, {onLeave: function (args) {send("HTTP2TestHook");}});

var HttpParseNetworkOptions = Module.findExportByName("rpchttp.dll", "HttpParseNetworkOptions")
Interceptor.attach(HttpParseNetworkOptions, {onLeave: function (args) {send("HttpParseNetworkOptions");}});

var HttpSendIdentifyResponse = Module.findExportByName("rpchttp.dll", "HttpSendIdentifyResponse")
Interceptor.attach(HttpSendIdentifyResponse, {onLeave: function (args) {send("HttpSendIdentifyResponse");}});

var I_RpcExtInitializeExtensionPoint = Module.findExportByName("rpchttp.dll", "I_RpcExtInitializeExtensionPoint")
Interceptor.attach(I_RpcExtInitializeExtensionPoint, {onLeave: function (args) {send("I_RpcExtInitializeExtensionPoint");}});

var I_RpcGetRpcProxy = Module.findExportByName("rpchttp.dll", "I_RpcGetRpcProxy")
Interceptor.attach(I_RpcGetRpcProxy, {onLeave: function (args) {send("I_RpcGetRpcProxy");}});

var I_RpcProxyNewConnection = Module.findExportByName("rpchttp.dll", "I_RpcProxyNewConnection")
Interceptor.attach(I_RpcProxyNewConnection, {onLeave: function (args) {send("I_RpcProxyNewConnection");}});

var I_RpcReplyToClientWithStatus = Module.findExportByName("rpchttp.dll", "I_RpcReplyToClientWithStatus")
Interceptor.attach(I_RpcReplyToClientWithStatus, {onLeave: function (args) {send("I_RpcReplyToClientWithStatus");}});

var I_RpcTransFreeHttpCredentials = Module.findExportByName("rpchttp.dll", "I_RpcTransFreeHttpCredentials")
Interceptor.attach(I_RpcTransFreeHttpCredentials, {onLeave: function (args) {send("I_RpcTransFreeHttpCredentials");}});

var I_RpcTransGetHttpCredentials = Module.findExportByName("rpchttp.dll", "I_RpcTransGetHttpCredentials")
Interceptor.attach(I_RpcTransGetHttpCredentials, {onLeave: function (args) {send("I_RpcTransGetHttpCredentials");}});

var WS_HTTP2_CONNECTION__Initialize = Module.findExportByName("rpchttp.dll", "WS_HTTP2_CONNECTION__Initialize")
Interceptor.attach(WS_HTTP2_CONNECTION__Initialize, {onLeave: function (args) {send("WS_HTTP2_CONNECTION__Initialize");}});

var WS_HTTP2_INITIAL_CONNECTION__new = Module.findExportByName("rpchttp.dll", "WS_HTTP2_INITIAL_CONNECTION__new")
Interceptor.attach(WS_HTTP2_INITIAL_CONNECTION__new, {onLeave: function (args) {send("WS_HTTP2_INITIAL_CONNECTION__new");}});

