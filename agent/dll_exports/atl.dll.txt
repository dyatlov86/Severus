var AtlAdvise = Module.findExportByName("atl.dll", "AtlAdvise")
Interceptor.attach(AtlAdvise, {onLeave: function (args) {send("AtlAdvise");}});

var AtlAxAttachControl = Module.findExportByName("atl.dll", "AtlAxAttachControl")
Interceptor.attach(AtlAxAttachControl, {onLeave: function (args) {send("AtlAxAttachControl");}});

var AtlAxCreateControl = Module.findExportByName("atl.dll", "AtlAxCreateControl")
Interceptor.attach(AtlAxCreateControl, {onLeave: function (args) {send("AtlAxCreateControl");}});

var AtlAxCreateControlEx = Module.findExportByName("atl.dll", "AtlAxCreateControlEx")
Interceptor.attach(AtlAxCreateControlEx, {onLeave: function (args) {send("AtlAxCreateControlEx");}});

var AtlAxCreateDialogA = Module.findExportByName("atl.dll", "AtlAxCreateDialogA")
Interceptor.attach(AtlAxCreateDialogA, {onLeave: function (args) {send("AtlAxCreateDialogA");}});

var AtlAxCreateDialogW = Module.findExportByName("atl.dll", "AtlAxCreateDialogW")
Interceptor.attach(AtlAxCreateDialogW, {onLeave: function (args) {send("AtlAxCreateDialogW");}});

var AtlAxDialogBoxA = Module.findExportByName("atl.dll", "AtlAxDialogBoxA")
Interceptor.attach(AtlAxDialogBoxA, {onLeave: function (args) {send("AtlAxDialogBoxA");}});

var AtlAxDialogBoxW = Module.findExportByName("atl.dll", "AtlAxDialogBoxW")
Interceptor.attach(AtlAxDialogBoxW, {onLeave: function (args) {send("AtlAxDialogBoxW");}});

var AtlAxGetControl = Module.findExportByName("atl.dll", "AtlAxGetControl")
Interceptor.attach(AtlAxGetControl, {onLeave: function (args) {send("AtlAxGetControl");}});

var AtlAxGetHost = Module.findExportByName("atl.dll", "AtlAxGetHost")
Interceptor.attach(AtlAxGetHost, {onLeave: function (args) {send("AtlAxGetHost");}});

var AtlAxWinInit = Module.findExportByName("atl.dll", "AtlAxWinInit")
Interceptor.attach(AtlAxWinInit, {onLeave: function (args) {send("AtlAxWinInit");}});

var AtlComPtrAssign = Module.findExportByName("atl.dll", "AtlComPtrAssign")
Interceptor.attach(AtlComPtrAssign, {onLeave: function (args) {send("AtlComPtrAssign");}});

var AtlComQIPtrAssign = Module.findExportByName("atl.dll", "AtlComQIPtrAssign")
Interceptor.attach(AtlComQIPtrAssign, {onLeave: function (args) {send("AtlComQIPtrAssign");}});

var AtlCreateTargetDC = Module.findExportByName("atl.dll", "AtlCreateTargetDC")
Interceptor.attach(AtlCreateTargetDC, {onLeave: function (args) {send("AtlCreateTargetDC");}});

var AtlDevModeW2A = Module.findExportByName("atl.dll", "AtlDevModeW2A")
Interceptor.attach(AtlDevModeW2A, {onLeave: function (args) {send("AtlDevModeW2A");}});

var AtlFreeMarshalStream = Module.findExportByName("atl.dll", "AtlFreeMarshalStream")
Interceptor.attach(AtlFreeMarshalStream, {onLeave: function (args) {send("AtlFreeMarshalStream");}});

var AtlGetObjectSourceInterface = Module.findExportByName("atl.dll", "AtlGetObjectSourceInterface")
Interceptor.attach(AtlGetObjectSourceInterface, {onLeave: function (args) {send("AtlGetObjectSourceInterface");}});

var AtlGetVersion = Module.findExportByName("atl.dll", "AtlGetVersion")
Interceptor.attach(AtlGetVersion, {onLeave: function (args) {send("AtlGetVersion");}});

var AtlHiMetricToPixel = Module.findExportByName("atl.dll", "AtlHiMetricToPixel")
Interceptor.attach(AtlHiMetricToPixel, {onLeave: function (args) {send("AtlHiMetricToPixel");}});

var AtlIPersistPropertyBag_Load = Module.findExportByName("atl.dll", "AtlIPersistPropertyBag_Load")
Interceptor.attach(AtlIPersistPropertyBag_Load, {onLeave: function (args) {send("AtlIPersistPropertyBag_Load");}});

var AtlIPersistPropertyBag_Save = Module.findExportByName("atl.dll", "AtlIPersistPropertyBag_Save")
Interceptor.attach(AtlIPersistPropertyBag_Save, {onLeave: function (args) {send("AtlIPersistPropertyBag_Save");}});

var AtlIPersistStreamInit_GetSizeMax = Module.findExportByName("atl.dll", "AtlIPersistStreamInit_GetSizeMax")
Interceptor.attach(AtlIPersistStreamInit_GetSizeMax, {onLeave: function (args) {send("AtlIPersistStreamInit_GetSizeMax");}});

var AtlIPersistStreamInit_Load = Module.findExportByName("atl.dll", "AtlIPersistStreamInit_Load")
Interceptor.attach(AtlIPersistStreamInit_Load, {onLeave: function (args) {send("AtlIPersistStreamInit_Load");}});

var AtlIPersistStreamInit_Save = Module.findExportByName("atl.dll", "AtlIPersistStreamInit_Save")
Interceptor.attach(AtlIPersistStreamInit_Save, {onLeave: function (args) {send("AtlIPersistStreamInit_Save");}});

var AtlInternalQueryInterface = Module.findExportByName("atl.dll", "AtlInternalQueryInterface")
Interceptor.attach(AtlInternalQueryInterface, {onLeave: function (args) {send("AtlInternalQueryInterface");}});

var AtlMarshalPtrInProc = Module.findExportByName("atl.dll", "AtlMarshalPtrInProc")
Interceptor.attach(AtlMarshalPtrInProc, {onLeave: function (args) {send("AtlMarshalPtrInProc");}});

var AtlModuleAddCreateWndData = Module.findExportByName("atl.dll", "AtlModuleAddCreateWndData")
Interceptor.attach(AtlModuleAddCreateWndData, {onLeave: function (args) {send("AtlModuleAddCreateWndData");}});

var AtlModuleAddTermFunc = Module.findExportByName("atl.dll", "AtlModuleAddTermFunc")
Interceptor.attach(AtlModuleAddTermFunc, {onLeave: function (args) {send("AtlModuleAddTermFunc");}});

var AtlModuleExtractCreateWndData = Module.findExportByName("atl.dll", "AtlModuleExtractCreateWndData")
Interceptor.attach(AtlModuleExtractCreateWndData, {onLeave: function (args) {send("AtlModuleExtractCreateWndData");}});

var AtlModuleGetClassObject = Module.findExportByName("atl.dll", "AtlModuleGetClassObject")
Interceptor.attach(AtlModuleGetClassObject, {onLeave: function (args) {send("AtlModuleGetClassObject");}});

var AtlModuleInit = Module.findExportByName("atl.dll", "AtlModuleInit")
Interceptor.attach(AtlModuleInit, {onLeave: function (args) {send("AtlModuleInit");}});

var AtlModuleLoadTypeLib = Module.findExportByName("atl.dll", "AtlModuleLoadTypeLib")
Interceptor.attach(AtlModuleLoadTypeLib, {onLeave: function (args) {send("AtlModuleLoadTypeLib");}});

var AtlModuleRegisterClassObjects = Module.findExportByName("atl.dll", "AtlModuleRegisterClassObjects")
Interceptor.attach(AtlModuleRegisterClassObjects, {onLeave: function (args) {send("AtlModuleRegisterClassObjects");}});

var AtlModuleRegisterServer = Module.findExportByName("atl.dll", "AtlModuleRegisterServer")
Interceptor.attach(AtlModuleRegisterServer, {onLeave: function (args) {send("AtlModuleRegisterServer");}});

var AtlModuleRegisterTypeLib = Module.findExportByName("atl.dll", "AtlModuleRegisterTypeLib")
Interceptor.attach(AtlModuleRegisterTypeLib, {onLeave: function (args) {send("AtlModuleRegisterTypeLib");}});

var AtlModuleRegisterWndClassInfoA = Module.findExportByName("atl.dll", "AtlModuleRegisterWndClassInfoA")
Interceptor.attach(AtlModuleRegisterWndClassInfoA, {onLeave: function (args) {send("AtlModuleRegisterWndClassInfoA");}});

var AtlModuleRegisterWndClassInfoW = Module.findExportByName("atl.dll", "AtlModuleRegisterWndClassInfoW")
Interceptor.attach(AtlModuleRegisterWndClassInfoW, {onLeave: function (args) {send("AtlModuleRegisterWndClassInfoW");}});

var AtlModuleRevokeClassObjects = Module.findExportByName("atl.dll", "AtlModuleRevokeClassObjects")
Interceptor.attach(AtlModuleRevokeClassObjects, {onLeave: function (args) {send("AtlModuleRevokeClassObjects");}});

var AtlModuleTerm = Module.findExportByName("atl.dll", "AtlModuleTerm")
Interceptor.attach(AtlModuleTerm, {onLeave: function (args) {send("AtlModuleTerm");}});

var AtlModuleUnRegisterTypeLib = Module.findExportByName("atl.dll", "AtlModuleUnRegisterTypeLib")
Interceptor.attach(AtlModuleUnRegisterTypeLib, {onLeave: function (args) {send("AtlModuleUnRegisterTypeLib");}});

var AtlModuleUnregisterServer = Module.findExportByName("atl.dll", "AtlModuleUnregisterServer")
Interceptor.attach(AtlModuleUnregisterServer, {onLeave: function (args) {send("AtlModuleUnregisterServer");}});

var AtlModuleUnregisterServerEx = Module.findExportByName("atl.dll", "AtlModuleUnregisterServerEx")
Interceptor.attach(AtlModuleUnregisterServerEx, {onLeave: function (args) {send("AtlModuleUnregisterServerEx");}});

var AtlModuleUpdateRegistryFromResourceD = Module.findExportByName("atl.dll", "AtlModuleUpdateRegistryFromResourceD")
Interceptor.attach(AtlModuleUpdateRegistryFromResourceD, {onLeave: function (args) {send("AtlModuleUpdateRegistryFromResourceD");}});

var AtlPixelToHiMetric = Module.findExportByName("atl.dll", "AtlPixelToHiMetric")
Interceptor.attach(AtlPixelToHiMetric, {onLeave: function (args) {send("AtlPixelToHiMetric");}});

var AtlRegisterClassCategoriesHelper = Module.findExportByName("atl.dll", "AtlRegisterClassCategoriesHelper")
Interceptor.attach(AtlRegisterClassCategoriesHelper, {onLeave: function (args) {send("AtlRegisterClassCategoriesHelper");}});

var AtlSetErrorInfo = Module.findExportByName("atl.dll", "AtlSetErrorInfo")
Interceptor.attach(AtlSetErrorInfo, {onLeave: function (args) {send("AtlSetErrorInfo");}});

var AtlSetErrorInfo2 = Module.findExportByName("atl.dll", "AtlSetErrorInfo2")
Interceptor.attach(AtlSetErrorInfo2, {onLeave: function (args) {send("AtlSetErrorInfo2");}});

var AtlUnadvise = Module.findExportByName("atl.dll", "AtlUnadvise")
Interceptor.attach(AtlUnadvise, {onLeave: function (args) {send("AtlUnadvise");}});

var AtlUnmarshalPtr = Module.findExportByName("atl.dll", "AtlUnmarshalPtr")
Interceptor.attach(AtlUnmarshalPtr, {onLeave: function (args) {send("AtlUnmarshalPtr");}});

var AtlWaitWithMessageLoop = Module.findExportByName("atl.dll", "AtlWaitWithMessageLoop")
Interceptor.attach(AtlWaitWithMessageLoop, {onLeave: function (args) {send("AtlWaitWithMessageLoop");}});

var DllCanUnloadNow = Module.findExportByName("atl.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetClassObject = Module.findExportByName("atl.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var DllRegisterServer = Module.findExportByName("atl.dll", "DllRegisterServer")
Interceptor.attach(DllRegisterServer, {onLeave: function (args) {send("DllRegisterServer");}});

var DllUnregisterServer = Module.findExportByName("atl.dll", "DllUnregisterServer")
Interceptor.attach(DllUnregisterServer, {onLeave: function (args) {send("DllUnregisterServer");}});

