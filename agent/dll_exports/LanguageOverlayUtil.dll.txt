var AddLanguageToMachineLanguageList = Module.findExportByName("LanguageOverlayUtil.dll", "AddLanguageToMachineLanguageList")
Interceptor.attach(AddLanguageToMachineLanguageList, {onLeave: function (args) {send("AddLanguageToMachineLanguageList");}});

var DeleteLanguageInstallationRequest = Module.findExportByName("LanguageOverlayUtil.dll", "DeleteLanguageInstallationRequest")
Interceptor.attach(DeleteLanguageInstallationRequest, {onLeave: function (args) {send("DeleteLanguageInstallationRequest");}});

var DeleteLanguageInstallationState = Module.findExportByName("LanguageOverlayUtil.dll", "DeleteLanguageInstallationState")
Interceptor.attach(DeleteLanguageInstallationState, {onLeave: function (args) {send("DeleteLanguageInstallationState");}});

var EnumerateInstalledLanguageFeatures = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateInstalledLanguageFeatures")
Interceptor.attach(EnumerateInstalledLanguageFeatures, {onLeave: function (args) {send("EnumerateInstalledLanguageFeatures");}});

var EnumerateInstalledLanguages = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateInstalledLanguages")
Interceptor.attach(EnumerateInstalledLanguages, {onLeave: function (args) {send("EnumerateInstalledLanguages");}});

var EnumerateInstalledLocalExperiencePacks = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateInstalledLocalExperiencePacks")
Interceptor.attach(EnumerateInstalledLocalExperiencePacks, {onLeave: function (args) {send("EnumerateInstalledLocalExperiencePacks");}});

var EnumerateInstalledSystemLanguagePacks = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateInstalledSystemLanguagePacks")
Interceptor.attach(EnumerateInstalledSystemLanguagePacks, {onLeave: function (args) {send("EnumerateInstalledSystemLanguagePacks");}});

var EnumerateLocalExperiencePacksForExpeditedUpdate = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateLocalExperiencePacksForExpeditedUpdate")
Interceptor.attach(EnumerateLocalExperiencePacksForExpeditedUpdate, {onLeave: function (args) {send("EnumerateLocalExperiencePacksForExpeditedUpdate");}});

var EnumerateOverlayPaths = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateOverlayPaths")
Interceptor.attach(EnumerateOverlayPaths, {onLeave: function (args) {send("EnumerateOverlayPaths");}});

var EnumerateQueuedLanguageInstallations = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateQueuedLanguageInstallations")
Interceptor.attach(EnumerateQueuedLanguageInstallations, {onLeave: function (args) {send("EnumerateQueuedLanguageInstallations");}});

var EnumerateSupportedUILanguages = Module.findExportByName("LanguageOverlayUtil.dll", "EnumerateSupportedUILanguages")
Interceptor.attach(EnumerateSupportedUILanguages, {onLeave: function (args) {send("EnumerateSupportedUILanguages");}});

var FetchLanguageOverlayPackageForFirstLogon = Module.findExportByName("LanguageOverlayUtil.dll", "FetchLanguageOverlayPackageForFirstLogon")
Interceptor.attach(FetchLanguageOverlayPackageForFirstLogon, {onLeave: function (args) {send("FetchLanguageOverlayPackageForFirstLogon");}});

var GetBcp47TagFromPackageFamilyName = Module.findExportByName("LanguageOverlayUtil.dll", "GetBcp47TagFromPackageFamilyName")
Interceptor.attach(GetBcp47TagFromPackageFamilyName, {onLeave: function (args) {send("GetBcp47TagFromPackageFamilyName");}});

var GetInstalledLanguagePackType = Module.findExportByName("LanguageOverlayUtil.dll", "GetInstalledLanguagePackType")
Interceptor.attach(GetInstalledLanguagePackType, {onLeave: function (args) {send("GetInstalledLanguagePackType");}});

var GetLanguageDataForLogging = Module.findExportByName("LanguageOverlayUtil.dll", "GetLanguageDataForLogging")
Interceptor.attach(GetLanguageDataForLogging, {onLeave: function (args) {send("GetLanguageDataForLogging");}});

var GetLanguageInstallationState = Module.findExportByName("LanguageOverlayUtil.dll", "GetLanguageInstallationState")
Interceptor.attach(GetLanguageInstallationState, {onLeave: function (args) {send("GetLanguageInstallationState");}});

var GetLanguageOverlayPackageFamilyName = Module.findExportByName("LanguageOverlayUtil.dll", "GetLanguageOverlayPackageFamilyName")
Interceptor.attach(GetLanguageOverlayPackageFamilyName, {onLeave: function (args) {send("GetLanguageOverlayPackageFamilyName");}});

var GetLanguagesInUse = Module.findExportByName("LanguageOverlayUtil.dll", "GetLanguagesInUse")
Interceptor.attach(GetLanguagesInUse, {onLeave: function (args) {send("GetLanguagesInUse");}});

var GetOverlayFilePath = Module.findExportByName("LanguageOverlayUtil.dll", "GetOverlayFilePath")
Interceptor.attach(GetOverlayFilePath, {onLeave: function (args) {send("GetOverlayFilePath");}});

var GetOverlayPriMergeChecksum = Module.findExportByName("LanguageOverlayUtil.dll", "GetOverlayPriMergeChecksum")
Interceptor.attach(GetOverlayPriMergeChecksum, {onLeave: function (args) {send("GetOverlayPriMergeChecksum");}});

var GetSystemPreferredUILanguage = Module.findExportByName("LanguageOverlayUtil.dll", "GetSystemPreferredUILanguage")
Interceptor.attach(GetSystemPreferredUILanguage, {onLeave: function (args) {send("GetSystemPreferredUILanguage");}});

var GetUnusedLanguagesToCleanup = Module.findExportByName("LanguageOverlayUtil.dll", "GetUnusedLanguagesToCleanup")
Interceptor.attach(GetUnusedLanguagesToCleanup, {onLeave: function (args) {send("GetUnusedLanguagesToCleanup");}});

var GetWindowsUpdateServer = Module.findExportByName("LanguageOverlayUtil.dll", "GetWindowsUpdateServer")
Interceptor.attach(GetWindowsUpdateServer, {onLeave: function (args) {send("GetWindowsUpdateServer");}});

var GroupUserLanguages = Module.findExportByName("LanguageOverlayUtil.dll", "GroupUserLanguages")
Interceptor.attach(GroupUserLanguages, {onLeave: function (args) {send("GroupUserLanguages");}});

var HandleUnusedLanguagesCleanupResult = Module.findExportByName("LanguageOverlayUtil.dll", "HandleUnusedLanguagesCleanupResult")
Interceptor.attach(HandleUnusedLanguagesCleanupResult, {onLeave: function (args) {send("HandleUnusedLanguagesCleanupResult");}});

var InvalidateLanguageResourceCaches = Module.findExportByName("LanguageOverlayUtil.dll", "InvalidateLanguageResourceCaches")
Interceptor.attach(InvalidateLanguageResourceCaches, {onLeave: function (args) {send("InvalidateLanguageResourceCaches");}});

var IsGroupingUserLanguagesNeeded = Module.findExportByName("LanguageOverlayUtil.dll", "IsGroupingUserLanguagesNeeded")
Interceptor.attach(IsGroupingUserLanguagesNeeded, {onLeave: function (args) {send("IsGroupingUserLanguagesNeeded");}});

var IsLocalExperiencePackReadyForRemoval = Module.findExportByName("LanguageOverlayUtil.dll", "IsLocalExperiencePackReadyForRemoval")
Interceptor.attach(IsLocalExperiencePackReadyForRemoval, {onLeave: function (args) {send("IsLocalExperiencePackReadyForRemoval");}});

var LogonTaskTelemetryInfoInit = Module.findExportByName("LanguageOverlayUtil.dll", "LogonTaskTelemetryInfoInit")
Interceptor.attach(LogonTaskTelemetryInfoInit, {onLeave: function (args) {send("LogonTaskTelemetryInfoInit");}});

var OnMachineUILanguageInit = Module.findExportByName("LanguageOverlayUtil.dll", "OnMachineUILanguageInit")
Interceptor.attach(OnMachineUILanguageInit, {onLeave: function (args) {send("OnMachineUILanguageInit");}});

var OnMachineUILanguageSwitch = Module.findExportByName("LanguageOverlayUtil.dll", "OnMachineUILanguageSwitch")
Interceptor.attach(OnMachineUILanguageSwitch, {onLeave: function (args) {send("OnMachineUILanguageSwitch");}});

var OverlaySetPreferredUILanguages = Module.findExportByName("LanguageOverlayUtil.dll", "OverlaySetPreferredUILanguages")
Interceptor.attach(OverlaySetPreferredUILanguages, {onLeave: function (args) {send("OverlaySetPreferredUILanguages");}});

var RemoveLanguageFromMachineLanguageList = Module.findExportByName("LanguageOverlayUtil.dll", "RemoveLanguageFromMachineLanguageList")
Interceptor.attach(RemoveLanguageFromMachineLanguageList, {onLeave: function (args) {send("RemoveLanguageFromMachineLanguageList");}});

var ResetOverlayPriMergeChecksum = Module.findExportByName("LanguageOverlayUtil.dll", "ResetOverlayPriMergeChecksum")
Interceptor.attach(ResetOverlayPriMergeChecksum, {onLeave: function (args) {send("ResetOverlayPriMergeChecksum");}});

var SetLanguageInstallationState = Module.findExportByName("LanguageOverlayUtil.dll", "SetLanguageInstallationState")
Interceptor.attach(SetLanguageInstallationState, {onLeave: function (args) {send("SetLanguageInstallationState");}});

var SetSystemPreferredUILanguage = Module.findExportByName("LanguageOverlayUtil.dll", "SetSystemPreferredUILanguage")
Interceptor.attach(SetSystemPreferredUILanguage, {onLeave: function (args) {send("SetSystemPreferredUILanguage");}});

var ShouldInstallOverlayPackageDuringLogonForLanguage = Module.findExportByName("LanguageOverlayUtil.dll", "ShouldInstallOverlayPackageDuringLogonForLanguage")
Interceptor.attach(ShouldInstallOverlayPackageDuringLogonForLanguage, {onLeave: function (args) {send("ShouldInstallOverlayPackageDuringLogonForLanguage");}});

var StartLanguageInstallation = Module.findExportByName("LanguageOverlayUtil.dll", "StartLanguageInstallation")
Interceptor.attach(StartLanguageInstallation, {onLeave: function (args) {send("StartLanguageInstallation");}});

var StartLanguageUninstallation = Module.findExportByName("LanguageOverlayUtil.dll", "StartLanguageUninstallation")
Interceptor.attach(StartLanguageUninstallation, {onLeave: function (args) {send("StartLanguageUninstallation");}});

