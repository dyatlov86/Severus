var AVrfAPILookupCallback = Module.findExportByName("vrfcore.dll", "AVrfAPILookupCallback")
Interceptor.attach(AVrfAPILookupCallback, {onLeave: function (args) {send("AVrfAPILookupCallback");}});

var VerifierAreStaticDllsInitialized = Module.findExportByName("vrfcore.dll", "VerifierAreStaticDllsInitialized")
Interceptor.attach(VerifierAreStaticDllsInitialized, {onLeave: function (args) {send("VerifierAreStaticDllsInitialized");}});

var VerifierChainDuplicateHooks = Module.findExportByName("vrfcore.dll", "VerifierChainDuplicateHooks")
Interceptor.attach(VerifierChainDuplicateHooks, {onLeave: function (args) {send("VerifierChainDuplicateHooks");}});

var VerifierCloseLayerProperties = Module.findExportByName("vrfcore.dll", "VerifierCloseLayerProperties")
Interceptor.attach(VerifierCloseLayerProperties, {onLeave: function (args) {send("VerifierCloseLayerProperties");}});

var VerifierConfigureStopOptions = Module.findExportByName("vrfcore.dll", "VerifierConfigureStopOptions")
Interceptor.attach(VerifierConfigureStopOptions, {onLeave: function (args) {send("VerifierConfigureStopOptions");}});

var VerifierCreateLayerProperties = Module.findExportByName("vrfcore.dll", "VerifierCreateLayerProperties")
Interceptor.attach(VerifierCreateLayerProperties, {onLeave: function (args) {send("VerifierCreateLayerProperties");}});

var VerifierDisableFaultInjectionExclusionRange = Module.findExportByName("vrfcore.dll", "VerifierDisableFaultInjectionExclusionRange")
Interceptor.attach(VerifierDisableFaultInjectionExclusionRange, {onLeave: function (args) {send("VerifierDisableFaultInjectionExclusionRange");}});

var VerifierDisableFaultInjectionTargetRange = Module.findExportByName("vrfcore.dll", "VerifierDisableFaultInjectionTargetRange")
Interceptor.attach(VerifierDisableFaultInjectionTargetRange, {onLeave: function (args) {send("VerifierDisableFaultInjectionTargetRange");}});

var VerifierDisableLayer = Module.findExportByName("vrfcore.dll", "VerifierDisableLayer")
Interceptor.attach(VerifierDisableLayer, {onLeave: function (args) {send("VerifierDisableLayer");}});

var VerifierDisableVerifier = Module.findExportByName("vrfcore.dll", "VerifierDisableVerifier")
Interceptor.attach(VerifierDisableVerifier, {onLeave: function (args) {send("VerifierDisableVerifier");}});

var VerifierEnableFaultInjectionExclusionRange = Module.findExportByName("vrfcore.dll", "VerifierEnableFaultInjectionExclusionRange")
Interceptor.attach(VerifierEnableFaultInjectionExclusionRange, {onLeave: function (args) {send("VerifierEnableFaultInjectionExclusionRange");}});

var VerifierEnableFaultInjectionTargetRange = Module.findExportByName("vrfcore.dll", "VerifierEnableFaultInjectionTargetRange")
Interceptor.attach(VerifierEnableFaultInjectionTargetRange, {onLeave: function (args) {send("VerifierEnableFaultInjectionTargetRange");}});

var VerifierEnableLayer = Module.findExportByName("vrfcore.dll", "VerifierEnableLayer")
Interceptor.attach(VerifierEnableLayer, {onLeave: function (args) {send("VerifierEnableLayer");}});

var VerifierGetAppCallerAddress = Module.findExportByName("vrfcore.dll", "VerifierGetAppCallerAddress")
Interceptor.attach(VerifierGetAppCallerAddress, {onLeave: function (args) {send("VerifierGetAppCallerAddress");}});

var VerifierGetInfoForException = Module.findExportByName("vrfcore.dll", "VerifierGetInfoForException")
Interceptor.attach(VerifierGetInfoForException, {onLeave: function (args) {send("VerifierGetInfoForException");}});

var VerifierGetLoggingDirectory = Module.findExportByName("vrfcore.dll", "VerifierGetLoggingDirectory")
Interceptor.attach(VerifierGetLoggingDirectory, {onLeave: function (args) {send("VerifierGetLoggingDirectory");}});

var VerifierGetRecursionTlsSlot = Module.findExportByName("vrfcore.dll", "VerifierGetRecursionTlsSlot")
Interceptor.attach(VerifierGetRecursionTlsSlot, {onLeave: function (args) {send("VerifierGetRecursionTlsSlot");}});

var VerifierHandleVerifierStopException = Module.findExportByName("vrfcore.dll", "VerifierHandleVerifierStopException")
Interceptor.attach(VerifierHandleVerifierStopException, {onLeave: function (args) {send("VerifierHandleVerifierStopException");}});

var VerifierIsDllEntryActive = Module.findExportByName("vrfcore.dll", "VerifierIsDllEntryActive")
Interceptor.attach(VerifierIsDllEntryActive, {onLeave: function (args) {send("VerifierIsDllEntryActive");}});

var VerifierIsInsideVerifierStop = Module.findExportByName("vrfcore.dll", "VerifierIsInsideVerifierStop")
Interceptor.attach(VerifierIsInsideVerifierStop, {onLeave: function (args) {send("VerifierIsInsideVerifierStop");}});

var VerifierIsLayerEnabled = Module.findExportByName("vrfcore.dll", "VerifierIsLayerEnabled")
Interceptor.attach(VerifierIsLayerEnabled, {onLeave: function (args) {send("VerifierIsLayerEnabled");}});

var VerifierLdrGetProcedureAddress = Module.findExportByName("vrfcore.dll", "VerifierLdrGetProcedureAddress")
Interceptor.attach(VerifierLdrGetProcedureAddress, {onLeave: function (args) {send("VerifierLdrGetProcedureAddress");}});

var VerifierOpenLayerProperties = Module.findExportByName("vrfcore.dll", "VerifierOpenLayerProperties")
Interceptor.attach(VerifierOpenLayerProperties, {onLeave: function (args) {send("VerifierOpenLayerProperties");}});

var VerifierQueryGlobalProperties = Module.findExportByName("vrfcore.dll", "VerifierQueryGlobalProperties")
Interceptor.attach(VerifierQueryGlobalProperties, {onLeave: function (args) {send("VerifierQueryGlobalProperties");}});

var VerifierQueryLayerBreak = Module.findExportByName("vrfcore.dll", "VerifierQueryLayerBreak")
Interceptor.attach(VerifierQueryLayerBreak, {onLeave: function (args) {send("VerifierQueryLayerBreak");}});

var VerifierQueryLayerBreaks = Module.findExportByName("vrfcore.dll", "VerifierQueryLayerBreaks")
Interceptor.attach(VerifierQueryLayerBreaks, {onLeave: function (args) {send("VerifierQueryLayerBreaks");}});

var VerifierQueryLayerProperties = Module.findExportByName("vrfcore.dll", "VerifierQueryLayerProperties")
Interceptor.attach(VerifierQueryLayerProperties, {onLeave: function (args) {send("VerifierQueryLayerProperties");}});

var VerifierQueryLayerProperty = Module.findExportByName("vrfcore.dll", "VerifierQueryLayerProperty")
Interceptor.attach(VerifierQueryLayerProperty, {onLeave: function (args) {send("VerifierQueryLayerProperty");}});

var VerifierQueryRegisteredLayers = Module.findExportByName("vrfcore.dll", "VerifierQueryRegisteredLayers")
Interceptor.attach(VerifierQueryRegisteredLayers, {onLeave: function (args) {send("VerifierQueryRegisteredLayers");}});

var VerifierRegisterFaultInjectProvider = Module.findExportByName("vrfcore.dll", "VerifierRegisterFaultInjectProvider")
Interceptor.attach(VerifierRegisterFaultInjectProvider, {onLeave: function (args) {send("VerifierRegisterFaultInjectProvider");}});

var VerifierRegisterLayer = Module.findExportByName("vrfcore.dll", "VerifierRegisterLayer")
Interceptor.attach(VerifierRegisterLayer, {onLeave: function (args) {send("VerifierRegisterLayer");}});

var VerifierRegisterLayerEx = Module.findExportByName("vrfcore.dll", "VerifierRegisterLayerEx")
Interceptor.attach(VerifierRegisterLayerEx, {onLeave: function (args) {send("VerifierRegisterLayerEx");}});

var VerifierRegisterProvider = Module.findExportByName("vrfcore.dll", "VerifierRegisterProvider")
Interceptor.attach(VerifierRegisterProvider, {onLeave: function (args) {send("VerifierRegisterProvider");}});

var VerifierResetFaultInjectionAddressRanges = Module.findExportByName("vrfcore.dll", "VerifierResetFaultInjectionAddressRanges")
Interceptor.attach(VerifierResetFaultInjectionAddressRanges, {onLeave: function (args) {send("VerifierResetFaultInjectionAddressRanges");}});

var VerifierSetAPIClassName = Module.findExportByName("vrfcore.dll", "VerifierSetAPIClassName")
Interceptor.attach(VerifierSetAPIClassName, {onLeave: function (args) {send("VerifierSetAPIClassName");}});

var VerifierSetFaultInjectionProbability = Module.findExportByName("vrfcore.dll", "VerifierSetFaultInjectionProbability")
Interceptor.attach(VerifierSetFaultInjectionProbability, {onLeave: function (args) {send("VerifierSetFaultInjectionProbability");}});

var VerifierSetFaultInjectionSeed = Module.findExportByName("vrfcore.dll", "VerifierSetFaultInjectionSeed")
Interceptor.attach(VerifierSetFaultInjectionSeed, {onLeave: function (args) {send("VerifierSetFaultInjectionSeed");}});

var VerifierSetLayerBreak = Module.findExportByName("vrfcore.dll", "VerifierSetLayerBreak")
Interceptor.attach(VerifierSetLayerBreak, {onLeave: function (args) {send("VerifierSetLayerBreak");}});

var VerifierSetLayerProperty = Module.findExportByName("vrfcore.dll", "VerifierSetLayerProperty")
Interceptor.attach(VerifierSetLayerProperty, {onLeave: function (args) {send("VerifierSetLayerProperty");}});

var VerifierShouldFaultInject = Module.findExportByName("vrfcore.dll", "VerifierShouldFaultInject")
Interceptor.attach(VerifierShouldFaultInject, {onLeave: function (args) {send("VerifierShouldFaultInject");}});

var VerifierStopMessageEx = Module.findExportByName("vrfcore.dll", "VerifierStopMessageEx")
Interceptor.attach(VerifierStopMessageEx, {onLeave: function (args) {send("VerifierStopMessageEx");}});

var VerifierSuspendFaultInjection = Module.findExportByName("vrfcore.dll", "VerifierSuspendFaultInjection")
Interceptor.attach(VerifierSuspendFaultInjection, {onLeave: function (args) {send("VerifierSuspendFaultInjection");}});

var VerifierTlsGetValue = Module.findExportByName("vrfcore.dll", "VerifierTlsGetValue")
Interceptor.attach(VerifierTlsGetValue, {onLeave: function (args) {send("VerifierTlsGetValue");}});

var VerifierTlsSetValue = Module.findExportByName("vrfcore.dll", "VerifierTlsSetValue")
Interceptor.attach(VerifierTlsSetValue, {onLeave: function (args) {send("VerifierTlsSetValue");}});

var VerifierUnregisterLayer = Module.findExportByName("vrfcore.dll", "VerifierUnregisterLayer")
Interceptor.attach(VerifierUnregisterLayer, {onLeave: function (args) {send("VerifierUnregisterLayer");}});

