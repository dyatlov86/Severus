var ??0CAutoSetActivityId@@QEAA@XZ = Module.findExportByName("miutils.dll", "??0CAutoSetActivityId@@QEAA@XZ")
Interceptor.attach(??0CAutoSetActivityId@@QEAA@XZ, {onLeave: function (args) {send("??0CAutoSetActivityId@@QEAA@XZ");}});

var ??0CCritSec@@QEAA@XZ = Module.findExportByName("miutils.dll", "??0CCritSec@@QEAA@XZ")
Interceptor.attach(??0CCritSec@@QEAA@XZ, {onLeave: function (args) {send("??0CCritSec@@QEAA@XZ");}});

var ??0DynamicSchema@@QEAA@XZ = Module.findExportByName("miutils.dll", "??0DynamicSchema@@QEAA@XZ")
Interceptor.attach(??0DynamicSchema@@QEAA@XZ, {onLeave: function (args) {send("??0DynamicSchema@@QEAA@XZ");}});

var ??0IndicationSchema@@QEAA@XZ = Module.findExportByName("miutils.dll", "??0IndicationSchema@@QEAA@XZ")
Interceptor.attach(??0IndicationSchema@@QEAA@XZ, {onLeave: function (args) {send("??0IndicationSchema@@QEAA@XZ");}});

var ??0StaticSchema@@QEAA@XZ = Module.findExportByName("miutils.dll", "??0StaticSchema@@QEAA@XZ")
Interceptor.attach(??0StaticSchema@@QEAA@XZ, {onLeave: function (args) {send("??0StaticSchema@@QEAA@XZ");}});

var ??0WMISchema@@QEAA@XZ = Module.findExportByName("miutils.dll", "??0WMISchema@@QEAA@XZ")
Interceptor.attach(??0WMISchema@@QEAA@XZ, {onLeave: function (args) {send("??0WMISchema@@QEAA@XZ");}});

var ??0WMISchema@@QEAA@_N@Z = Module.findExportByName("miutils.dll", "??0WMISchema@@QEAA@_N@Z")
Interceptor.attach(??0WMISchema@@QEAA@_N@Z, {onLeave: function (args) {send("??0WMISchema@@QEAA@_N@Z");}});

var ??1CAutoSetActivityId@@QEAA@XZ = Module.findExportByName("miutils.dll", "??1CAutoSetActivityId@@QEAA@XZ")
Interceptor.attach(??1CAutoSetActivityId@@QEAA@XZ, {onLeave: function (args) {send("??1CAutoSetActivityId@@QEAA@XZ");}});

var ??1CCritSec@@QEAA@XZ = Module.findExportByName("miutils.dll", "??1CCritSec@@QEAA@XZ")
Interceptor.attach(??1CCritSec@@QEAA@XZ, {onLeave: function (args) {send("??1CCritSec@@QEAA@XZ");}});

var ??1WMISchema@@UEAA@XZ = Module.findExportByName("miutils.dll", "??1WMISchema@@UEAA@XZ")
Interceptor.attach(??1WMISchema@@UEAA@XZ, {onLeave: function (args) {send("??1WMISchema@@UEAA@XZ");}});

var ??4CAutoSetActivityId@@QEAAAEAV0@AEBV0@@Z = Module.findExportByName("miutils.dll", "??4CAutoSetActivityId@@QEAAAEAV0@AEBV0@@Z")
Interceptor.attach(??4CAutoSetActivityId@@QEAAAEAV0@AEBV0@@Z, {onLeave: function (args) {send("??4CAutoSetActivityId@@QEAAAEAV0@AEBV0@@Z");}});

var ??4CCritSec@@QEAAAEAV0@AEBV0@@Z = Module.findExportByName("miutils.dll", "??4CCritSec@@QEAAAEAV0@AEBV0@@Z")
Interceptor.attach(??4CCritSec@@QEAAAEAV0@AEBV0@@Z, {onLeave: function (args) {send("??4CCritSec@@QEAAAEAV0@AEBV0@@Z");}});

var ?CreateInstance@DynamicSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z = Module.findExportByName("miutils.dll", "?CreateInstance@DynamicSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z")
Interceptor.attach(?CreateInstance@DynamicSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z, {onLeave: function (args) {send("?CreateInstance@DynamicSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z");}});

var ?CreateInstance@IndicationSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z = Module.findExportByName("miutils.dll", "?CreateInstance@IndicationSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z")
Interceptor.attach(?CreateInstance@IndicationSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z, {onLeave: function (args) {send("?CreateInstance@IndicationSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z");}});

var ?CreateInstance@StaticSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z = Module.findExportByName("miutils.dll", "?CreateInstance@StaticSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z")
Interceptor.attach(?CreateInstance@StaticSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z, {onLeave: function (args) {send("?CreateInstance@StaticSchema@@UEAAJPEBGPEAUIWbemClassObject@@KPEBU_MI_PropertySet@@_NAEAPEAU_MI_Instance@@PEAUIConversionContext@@@Z");}});

var ?DeInitialize@WMISchema@@QEAAJXZ = Module.findExportByName("miutils.dll", "?DeInitialize@WMISchema@@QEAAJXZ")
Interceptor.attach(?DeInitialize@WMISchema@@QEAAJXZ, {onLeave: function (args) {send("?DeInitialize@WMISchema@@QEAAJXZ");}});

var ?GetFlags@MiSchema@@UEBAJXZ = Module.findExportByName("miutils.dll", "?GetFlags@MiSchema@@UEBAJXZ")
Interceptor.attach(?GetFlags@MiSchema@@UEBAJXZ, {onLeave: function (args) {send("?GetFlags@MiSchema@@UEBAJXZ");}});

var ?GetMiClass@DynamicSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z = Module.findExportByName("miutils.dll", "?GetMiClass@DynamicSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z")
Interceptor.attach(?GetMiClass@DynamicSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z, {onLeave: function (args) {send("?GetMiClass@DynamicSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z");}});

var ?GetMiClass@IndicationSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z = Module.findExportByName("miutils.dll", "?GetMiClass@IndicationSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z")
Interceptor.attach(?GetMiClass@IndicationSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z, {onLeave: function (args) {send("?GetMiClass@IndicationSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z");}});

var ?GetMiClass@StaticSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z = Module.findExportByName("miutils.dll", "?GetMiClass@StaticSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z")
Interceptor.attach(?GetMiClass@StaticSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z, {onLeave: function (args) {send("?GetMiClass@StaticSchema@@UEAAJPEBG00PEAPEBU_MI_Class@@@Z");}});

var ?GetNoneCachedWmiClass@WMISchema@@UEAAJPEBGPEAUIWbemServices@@AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z = Module.findExportByName("miutils.dll", "?GetNoneCachedWmiClass@WMISchema@@UEAAJPEBGPEAUIWbemServices@@AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z")
Interceptor.attach(?GetNoneCachedWmiClass@WMISchema@@UEAAJPEBGPEAUIWbemServices@@AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z, {onLeave: function (args) {send("?GetNoneCachedWmiClass@WMISchema@@UEAAJPEBGPEAUIWbemServices@@AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z");}});

var ?GetWmiClass@WMISchema@@UEAAJPEBG0AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z = Module.findExportByName("miutils.dll", "?GetWmiClass@WMISchema@@UEAAJPEBG0AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z")
Interceptor.attach(?GetWmiClass@WMISchema@@UEAAJPEBG0AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z, {onLeave: function (args) {send("?GetWmiClass@WMISchema@@UEAAJPEBG0AEAV?$CComPtr@UIWbemClassObject@@@ATL@@PEAUIConversionContext@@@Z");}});

var ?GetWmiIWbemServices@WMISchema@@UEAAJPEBGAEAV?$CComPtr@UIWbemServices@@@ATL@@@Z = Module.findExportByName("miutils.dll", "?GetWmiIWbemServices@WMISchema@@UEAAJPEBGAEAV?$CComPtr@UIWbemServices@@@ATL@@@Z")
Interceptor.attach(?GetWmiIWbemServices@WMISchema@@UEAAJPEBGAEAV?$CComPtr@UIWbemServices@@@ATL@@@Z, {onLeave: function (args) {send("?GetWmiIWbemServices@WMISchema@@UEAAJPEBGAEAV?$CComPtr@UIWbemServices@@@ATL@@@Z");}});

var ?Initialize@StaticSchema@@QEAAJPEBU_MI_Module@@@Z = Module.findExportByName("miutils.dll", "?Initialize@StaticSchema@@QEAAJPEBU_MI_Module@@@Z")
Interceptor.attach(?Initialize@StaticSchema@@QEAAJPEBU_MI_Module@@@Z, {onLeave: function (args) {send("?Initialize@StaticSchema@@QEAAJPEBU_MI_Module@@@Z");}});

var ?Initialize@WMISchema@@QEAAX_N@Z = Module.findExportByName("miutils.dll", "?Initialize@WMISchema@@QEAAX_N@Z")
Interceptor.attach(?Initialize@WMISchema@@QEAAX_N@Z, {onLeave: function (args) {send("?Initialize@WMISchema@@QEAAX_N@Z");}});

var ?SetFlags@MiSchema@@MEAAJJ@Z = Module.findExportByName("miutils.dll", "?SetFlags@MiSchema@@MEAAJJ@Z")
Interceptor.attach(?SetFlags@MiSchema@@MEAAJJ@Z, {onLeave: function (args) {send("?SetFlags@MiSchema@@MEAAJJ@Z");}});

var CimErrorFromErrorCode = Module.findExportByName("miutils.dll", "CimErrorFromErrorCode")
Interceptor.attach(CimErrorFromErrorCode, {onLeave: function (args) {send("CimErrorFromErrorCode");}});

var CimError_Construct = Module.findExportByName("miutils.dll", "CimError_Construct")
Interceptor.attach(CimError_Construct, {onLeave: function (args) {send("CimError_Construct");}});

var CimStatusCodeFromWindowsError = Module.findExportByName("miutils.dll", "CimStatusCodeFromWindowsError")
Interceptor.attach(CimStatusCodeFromWindowsError, {onLeave: function (args) {send("CimStatusCodeFromWindowsError");}});

var CimTypeToType = Module.findExportByName("miutils.dll", "CimTypeToType")
Interceptor.attach(CimTypeToType, {onLeave: function (args) {send("CimTypeToType");}});

var ClassCache_AddClass = Module.findExportByName("miutils.dll", "ClassCache_AddClass")
Interceptor.attach(ClassCache_AddClass, {onLeave: function (args) {send("ClassCache_AddClass");}});

var ClassCache_Delete = Module.findExportByName("miutils.dll", "ClassCache_Delete")
Interceptor.attach(ClassCache_Delete, {onLeave: function (args) {send("ClassCache_Delete");}});

var ClassCache_GetClass = Module.findExportByName("miutils.dll", "ClassCache_GetClass")
Interceptor.attach(ClassCache_GetClass, {onLeave: function (args) {send("ClassCache_GetClass");}});

var ClassCache_New = Module.findExportByName("miutils.dll", "ClassCache_New")
Interceptor.attach(ClassCache_New, {onLeave: function (args) {send("ClassCache_New");}});

var Class_New = Module.findExportByName("miutils.dll", "Class_New")
Interceptor.attach(Class_New, {onLeave: function (args) {send("Class_New");}});

var CompareInstance = Module.findExportByName("miutils.dll", "CompareInstance")
Interceptor.attach(CompareInstance, {onLeave: function (args) {send("CompareInstance");}});

var CompareValue = Module.findExportByName("miutils.dll", "CompareValue")
Interceptor.attach(CompareValue, {onLeave: function (args) {send("CompareValue");}});

var Config_GetProtocolHandlerDetails = Module.findExportByName("miutils.dll", "Config_GetProtocolHandlerDetails")
Interceptor.attach(Config_GetProtocolHandlerDetails, {onLeave: function (args) {send("Config_GetProtocolHandlerDetails");}});

var Config_GetRegString = Module.findExportByName("miutils.dll", "Config_GetRegString")
Interceptor.attach(Config_GetRegString, {onLeave: function (args) {send("Config_GetRegString");}});

var CreateConversionContext = Module.findExportByName("miutils.dll", "CreateConversionContext")
Interceptor.attach(CreateConversionContext, {onLeave: function (args) {send("CreateConversionContext");}});

var DestinationOptions_Create = Module.findExportByName("miutils.dll", "DestinationOptions_Create")
Interceptor.attach(DestinationOptions_Create, {onLeave: function (args) {send("DestinationOptions_Create");}});

var DestinationOptions_Duplicate = Module.findExportByName("miutils.dll", "DestinationOptions_Duplicate")
Interceptor.attach(DestinationOptions_Duplicate, {onLeave: function (args) {send("DestinationOptions_Duplicate");}});

var DestinationOptions_MigrateOptions = Module.findExportByName("miutils.dll", "DestinationOptions_MigrateOptions")
Interceptor.attach(DestinationOptions_MigrateOptions, {onLeave: function (args) {send("DestinationOptions_MigrateOptions");}});

var FindClassDecl = Module.findExportByName("miutils.dll", "FindClassDecl")
Interceptor.attach(FindClassDecl, {onLeave: function (args) {send("FindClassDecl");}});

var FindMethodDecl = Module.findExportByName("miutils.dll", "FindMethodDecl")
Interceptor.attach(FindMethodDecl, {onLeave: function (args) {send("FindMethodDecl");}});

var FindQualifierInWMIObject = Module.findExportByName("miutils.dll", "FindQualifierInWMIObject")
Interceptor.attach(FindQualifierInWMIObject, {onLeave: function (args) {send("FindQualifierInWMIObject");}});

var GetCorrelationId = Module.findExportByName("miutils.dll", "GetCorrelationId")
Interceptor.attach(GetCorrelationId, {onLeave: function (args) {send("GetCorrelationId");}});

var GetMethodParameters = Module.findExportByName("miutils.dll", "GetMethodParameters")
Interceptor.attach(GetMethodParameters, {onLeave: function (args) {send("GetMethodParameters");}});

var GetReferenceFromWMIObjectPath = Module.findExportByName("miutils.dll", "GetReferenceFromWMIObjectPath")
Interceptor.attach(GetReferenceFromWMIObjectPath, {onLeave: function (args) {send("GetReferenceFromWMIObjectPath");}});

var InstanceToWMIEvent = Module.findExportByName("miutils.dll", "InstanceToWMIEvent")
Interceptor.attach(InstanceToWMIEvent, {onLeave: function (args) {send("InstanceToWMIEvent");}});

var InstanceToWMIExtendedStatus = Module.findExportByName("miutils.dll", "InstanceToWMIExtendedStatus")
Interceptor.attach(InstanceToWMIExtendedStatus, {onLeave: function (args) {send("InstanceToWMIExtendedStatus");}});

var InstanceToWMIObject = Module.findExportByName("miutils.dll", "InstanceToWMIObject")
Interceptor.attach(InstanceToWMIObject, {onLeave: function (args) {send("InstanceToWMIObject");}});

var Instance_Clone = Module.findExportByName("miutils.dll", "Instance_Clone")
Interceptor.attach(Instance_Clone, {onLeave: function (args) {send("Instance_Clone");}});

var Instance_Construct = Module.findExportByName("miutils.dll", "Instance_Construct")
Interceptor.attach(Instance_Construct, {onLeave: function (args) {send("Instance_Construct");}});

var Instance_GetResourceURI = Module.findExportByName("miutils.dll", "Instance_GetResourceURI")
Interceptor.attach(Instance_GetResourceURI, {onLeave: function (args) {send("Instance_GetResourceURI");}});

var Instance_InitDynamic = Module.findExportByName("miutils.dll", "Instance_InitDynamic")
Interceptor.attach(Instance_InitDynamic, {onLeave: function (args) {send("Instance_InitDynamic");}});

var Instance_IsDynamic = Module.findExportByName("miutils.dll", "Instance_IsDynamic")
Interceptor.attach(Instance_IsDynamic, {onLeave: function (args) {send("Instance_IsDynamic");}});

var Instance_MatchKeys = Module.findExportByName("miutils.dll", "Instance_MatchKeys")
Interceptor.attach(Instance_MatchKeys, {onLeave: function (args) {send("Instance_MatchKeys");}});

var Instance_New = Module.findExportByName("miutils.dll", "Instance_New")
Interceptor.attach(Instance_New, {onLeave: function (args) {send("Instance_New");}});

var Instance_SetElementArray = Module.findExportByName("miutils.dll", "Instance_SetElementArray")
Interceptor.attach(Instance_SetElementArray, {onLeave: function (args) {send("Instance_SetElementArray");}});

var Instance_SetElementArrayItem = Module.findExportByName("miutils.dll", "Instance_SetElementArrayItem")
Interceptor.attach(Instance_SetElementArrayItem, {onLeave: function (args) {send("Instance_SetElementArrayItem");}});

var Instance_SetResourceURI = Module.findExportByName("miutils.dll", "Instance_SetResourceURI")
Interceptor.attach(Instance_SetResourceURI, {onLeave: function (args) {send("Instance_SetResourceURI");}});

var Instance_SetServerName = Module.findExportByName("miutils.dll", "Instance_SetServerName")
Interceptor.attach(Instance_SetServerName, {onLeave: function (args) {send("Instance_SetServerName");}});

var IsLifeCycleIndicationQuery = Module.findExportByName("miutils.dll", "IsLifeCycleIndicationQuery")
Interceptor.attach(IsLifeCycleIndicationQuery, {onLeave: function (args) {send("IsLifeCycleIndicationQuery");}});

var MI_Hash = Module.findExportByName("miutils.dll", "MI_Hash")
Interceptor.attach(MI_Hash, {onLeave: function (args) {send("MI_Hash");}});

var MiErrorCategoryFromWindowsError = Module.findExportByName("miutils.dll", "MiErrorCategoryFromWindowsError")
Interceptor.attach(MiErrorCategoryFromWindowsError, {onLeave: function (args) {send("MiErrorCategoryFromWindowsError");}});

var OSC_Batch_Destroy = Module.findExportByName("miutils.dll", "OSC_Batch_Destroy")
Interceptor.attach(OSC_Batch_Destroy, {onLeave: function (args) {send("OSC_Batch_Destroy");}});

var OSC_Batch_Get = Module.findExportByName("miutils.dll", "OSC_Batch_Get")
Interceptor.attach(OSC_Batch_Get, {onLeave: function (args) {send("OSC_Batch_Get");}});

var OSC_Batch_Strdup = Module.findExportByName("miutils.dll", "OSC_Batch_Strdup")
Interceptor.attach(OSC_Batch_Strdup, {onLeave: function (args) {send("OSC_Batch_Strdup");}});

var OSC_StringToMiValue = Module.findExportByName("miutils.dll", "OSC_StringToMiValue")
Interceptor.attach(OSC_StringToMiValue, {onLeave: function (args) {send("OSC_StringToMiValue");}});

var OSC_Type_GetSize = Module.findExportByName("miutils.dll", "OSC_Type_GetSize")
Interceptor.attach(OSC_Type_GetSize, {onLeave: function (args) {send("OSC_Type_GetSize");}});

var OperationOptions_CopyOptions = Module.findExportByName("miutils.dll", "OperationOptions_CopyOptions")
Interceptor.attach(OperationOptions_CopyOptions, {onLeave: function (args) {send("OperationOptions_CopyOptions");}});

var OperationOptions_Create = Module.findExportByName("miutils.dll", "OperationOptions_Create")
Interceptor.attach(OperationOptions_Create, {onLeave: function (args) {send("OperationOptions_Create");}});

var OperationOptions_MigrateOptions = Module.findExportByName("miutils.dll", "OperationOptions_MigrateOptions")
Interceptor.attach(OperationOptions_MigrateOptions, {onLeave: function (args) {send("OperationOptions_MigrateOptions");}});

var OptionsValueToContextValue = Module.findExportByName("miutils.dll", "OptionsValueToContextValue")
Interceptor.attach(OptionsValueToContextValue, {onLeave: function (args) {send("OptionsValueToContextValue");}});

var Options_FindValue = Module.findExportByName("miutils.dll", "Options_FindValue")
Interceptor.attach(Options_FindValue, {onLeave: function (args) {send("Options_FindValue");}});

var ParametersToWMIObject = Module.findExportByName("miutils.dll", "ParametersToWMIObject")
Interceptor.attach(ParametersToWMIObject, {onLeave: function (args) {send("ParametersToWMIObject");}});

var PropertySet_New = Module.findExportByName("miutils.dll", "PropertySet_New")
Interceptor.attach(PropertySet_New, {onLeave: function (args) {send("PropertySet_New");}});

var PropertyToVariant = Module.findExportByName("miutils.dll", "PropertyToVariant")
Interceptor.attach(PropertyToVariant, {onLeave: function (args) {send("PropertyToVariant");}});

var PublishClientOperationInfo = Module.findExportByName("miutils.dll", "PublishClientOperationInfo")
Interceptor.attach(PublishClientOperationInfo, {onLeave: function (args) {send("PublishClientOperationInfo");}});

var PublishDebugInfo = Module.findExportByName("miutils.dll", "PublishDebugInfo")
Interceptor.attach(PublishDebugInfo, {onLeave: function (args) {send("PublishDebugInfo");}});

var PublishDebugMessage = Module.findExportByName("miutils.dll", "PublishDebugMessage")
Interceptor.attach(PublishDebugMessage, {onLeave: function (args) {send("PublishDebugMessage");}});

var PublishProviderResult = Module.findExportByName("miutils.dll", "PublishProviderResult")
Interceptor.attach(PublishProviderResult, {onLeave: function (args) {send("PublishProviderResult");}});

var PublishProviderWriteError = Module.findExportByName("miutils.dll", "PublishProviderWriteError")
Interceptor.attach(PublishProviderWriteError, {onLeave: function (args) {send("PublishProviderWriteError");}});

var PublishProviderWriteMessage = Module.findExportByName("miutils.dll", "PublishProviderWriteMessage")
Interceptor.attach(PublishProviderWriteMessage, {onLeave: function (args) {send("PublishProviderWriteMessage");}});

var QualifierFlavorToWMI = Module.findExportByName("miutils.dll", "QualifierFlavorToWMI")
Interceptor.attach(QualifierFlavorToWMI, {onLeave: function (args) {send("QualifierFlavorToWMI");}});

var RCClass_AddClassQualifier = Module.findExportByName("miutils.dll", "RCClass_AddClassQualifier")
Interceptor.attach(RCClass_AddClassQualifier, {onLeave: function (args) {send("RCClass_AddClassQualifier");}});

var RCClass_AddClassQualifierArray = Module.findExportByName("miutils.dll", "RCClass_AddClassQualifierArray")
Interceptor.attach(RCClass_AddClassQualifierArray, {onLeave: function (args) {send("RCClass_AddClassQualifierArray");}});

var RCClass_AddClassQualifierArrayItem = Module.findExportByName("miutils.dll", "RCClass_AddClassQualifierArrayItem")
Interceptor.attach(RCClass_AddClassQualifierArrayItem, {onLeave: function (args) {send("RCClass_AddClassQualifierArrayItem");}});

var RCClass_AddElement = Module.findExportByName("miutils.dll", "RCClass_AddElement")
Interceptor.attach(RCClass_AddElement, {onLeave: function (args) {send("RCClass_AddElement");}});

var RCClass_AddElementArray = Module.findExportByName("miutils.dll", "RCClass_AddElementArray")
Interceptor.attach(RCClass_AddElementArray, {onLeave: function (args) {send("RCClass_AddElementArray");}});

var RCClass_AddElementArrayItem = Module.findExportByName("miutils.dll", "RCClass_AddElementArrayItem")
Interceptor.attach(RCClass_AddElementArrayItem, {onLeave: function (args) {send("RCClass_AddElementArrayItem");}});

var RCClass_AddElementQualifier = Module.findExportByName("miutils.dll", "RCClass_AddElementQualifier")
Interceptor.attach(RCClass_AddElementQualifier, {onLeave: function (args) {send("RCClass_AddElementQualifier");}});

var RCClass_AddElementQualifierArray = Module.findExportByName("miutils.dll", "RCClass_AddElementQualifierArray")
Interceptor.attach(RCClass_AddElementQualifierArray, {onLeave: function (args) {send("RCClass_AddElementQualifierArray");}});

var RCClass_AddElementQualifierArrayItem = Module.findExportByName("miutils.dll", "RCClass_AddElementQualifierArrayItem")
Interceptor.attach(RCClass_AddElementQualifierArrayItem, {onLeave: function (args) {send("RCClass_AddElementQualifierArrayItem");}});

var RCClass_AddMethod = Module.findExportByName("miutils.dll", "RCClass_AddMethod")
Interceptor.attach(RCClass_AddMethod, {onLeave: function (args) {send("RCClass_AddMethod");}});

var RCClass_AddMethodParameter = Module.findExportByName("miutils.dll", "RCClass_AddMethodParameter")
Interceptor.attach(RCClass_AddMethodParameter, {onLeave: function (args) {send("RCClass_AddMethodParameter");}});

var RCClass_AddMethodParameterQualifier = Module.findExportByName("miutils.dll", "RCClass_AddMethodParameterQualifier")
Interceptor.attach(RCClass_AddMethodParameterQualifier, {onLeave: function (args) {send("RCClass_AddMethodParameterQualifier");}});

var RCClass_AddMethodParameterQualifierArray = Module.findExportByName("miutils.dll", "RCClass_AddMethodParameterQualifierArray")
Interceptor.attach(RCClass_AddMethodParameterQualifierArray, {onLeave: function (args) {send("RCClass_AddMethodParameterQualifierArray");}});

var RCClass_AddMethodParameterQualifierArrayItem = Module.findExportByName("miutils.dll", "RCClass_AddMethodParameterQualifierArrayItem")
Interceptor.attach(RCClass_AddMethodParameterQualifierArrayItem, {onLeave: function (args) {send("RCClass_AddMethodParameterQualifierArrayItem");}});

var RCClass_AddMethodQualifier = Module.findExportByName("miutils.dll", "RCClass_AddMethodQualifier")
Interceptor.attach(RCClass_AddMethodQualifier, {onLeave: function (args) {send("RCClass_AddMethodQualifier");}});

var RCClass_AddMethodQualifierArray = Module.findExportByName("miutils.dll", "RCClass_AddMethodQualifierArray")
Interceptor.attach(RCClass_AddMethodQualifierArray, {onLeave: function (args) {send("RCClass_AddMethodQualifierArray");}});

var RCClass_AddMethodQualifierArrayItem = Module.findExportByName("miutils.dll", "RCClass_AddMethodQualifierArrayItem")
Interceptor.attach(RCClass_AddMethodQualifierArrayItem, {onLeave: function (args) {send("RCClass_AddMethodQualifierArrayItem");}});

var RCClass_New = Module.findExportByName("miutils.dll", "RCClass_New")
Interceptor.attach(RCClass_New, {onLeave: function (args) {send("RCClass_New");}});

var ResultFromHRESULT = Module.findExportByName("miutils.dll", "ResultFromHRESULT")
Interceptor.attach(ResultFromHRESULT, {onLeave: function (args) {send("ResultFromHRESULT");}});

var ResultToHRESULT = Module.findExportByName("miutils.dll", "ResultToHRESULT")
Interceptor.attach(ResultToHRESULT, {onLeave: function (args) {send("ResultToHRESULT");}});

var RtlDeleteCachedFastLock = Module.findExportByName("miutils.dll", "RtlDeleteCachedFastLock")
Interceptor.attach(RtlDeleteCachedFastLock, {onLeave: function (args) {send("RtlDeleteCachedFastLock");}});

var RtlInitializeCachedFastLock = Module.findExportByName("miutils.dll", "RtlInitializeCachedFastLock")
Interceptor.attach(RtlInitializeCachedFastLock, {onLeave: function (args) {send("RtlInitializeCachedFastLock");}});

var RtlInterlockedCompareWait = Module.findExportByName("miutils.dll", "RtlInterlockedCompareWait")
Interceptor.attach(RtlInterlockedCompareWait, {onLeave: function (args) {send("RtlInterlockedCompareWait");}});

var RtlInterlockedWakeAll = Module.findExportByName("miutils.dll", "RtlInterlockedWakeAll")
Interceptor.attach(RtlInterlockedWakeAll, {onLeave: function (args) {send("RtlInterlockedWakeAll");}});

var RtlQueueAcquireCachedFastLockExclusive = Module.findExportByName("miutils.dll", "RtlQueueAcquireCachedFastLockExclusive")
Interceptor.attach(RtlQueueAcquireCachedFastLockExclusive, {onLeave: function (args) {send("RtlQueueAcquireCachedFastLockExclusive");}});

var RtlQueueAcquireCachedFastLockShared = Module.findExportByName("miutils.dll", "RtlQueueAcquireCachedFastLockShared")
Interceptor.attach(RtlQueueAcquireCachedFastLockShared, {onLeave: function (args) {send("RtlQueueAcquireCachedFastLockShared");}});

var RtlQueueAcquireFastLockExclusive = Module.findExportByName("miutils.dll", "RtlQueueAcquireFastLockExclusive")
Interceptor.attach(RtlQueueAcquireFastLockExclusive, {onLeave: function (args) {send("RtlQueueAcquireFastLockExclusive");}});

var RtlQueueAcquireFastLockShared = Module.findExportByName("miutils.dll", "RtlQueueAcquireFastLockShared")
Interceptor.attach(RtlQueueAcquireFastLockShared, {onLeave: function (args) {send("RtlQueueAcquireFastLockShared");}});

var RtlReleaseCachedFastLockExclusive = Module.findExportByName("miutils.dll", "RtlReleaseCachedFastLockExclusive")
Interceptor.attach(RtlReleaseCachedFastLockExclusive, {onLeave: function (args) {send("RtlReleaseCachedFastLockExclusive");}});

var RtlReleaseCachedFastLockShared = Module.findExportByName("miutils.dll", "RtlReleaseCachedFastLockShared")
Interceptor.attach(RtlReleaseCachedFastLockShared, {onLeave: function (args) {send("RtlReleaseCachedFastLockShared");}});

var RtlReleaseFastLockExclusive = Module.findExportByName("miutils.dll", "RtlReleaseFastLockExclusive")
Interceptor.attach(RtlReleaseFastLockExclusive, {onLeave: function (args) {send("RtlReleaseFastLockExclusive");}});

var RtlReleaseFastLockShared = Module.findExportByName("miutils.dll", "RtlReleaseFastLockShared")
Interceptor.attach(RtlReleaseFastLockShared, {onLeave: function (args) {send("RtlReleaseFastLockShared");}});

var RtlTryAcquireCachedFastLockShared = Module.findExportByName("miutils.dll", "RtlTryAcquireCachedFastLockShared")
Interceptor.attach(RtlTryAcquireCachedFastLockShared, {onLeave: function (args) {send("RtlTryAcquireCachedFastLockShared");}});

var RtlTryAcquireFastLockExclusive = Module.findExportByName("miutils.dll", "RtlTryAcquireFastLockExclusive")
Interceptor.attach(RtlTryAcquireFastLockExclusive, {onLeave: function (args) {send("RtlTryAcquireFastLockExclusive");}});

var RtlTryAcquireFastLockShared = Module.findExportByName("miutils.dll", "RtlTryAcquireFastLockShared")
Interceptor.attach(RtlTryAcquireFastLockShared, {onLeave: function (args) {send("RtlTryAcquireFastLockShared");}});

var RtlpInitFastLock = Module.findExportByName("miutils.dll", "RtlpInitFastLock")
Interceptor.attach(RtlpInitFastLock, {onLeave: function (args) {send("RtlpInitFastLock");}});

var RtlpReleaseIdleSlots = Module.findExportByName("miutils.dll", "RtlpReleaseIdleSlots")
Interceptor.attach(RtlpReleaseIdleSlots, {onLeave: function (args) {send("RtlpReleaseIdleSlots");}});

var SetCorrelationIdToWbemContext = Module.findExportByName("miutils.dll", "SetCorrelationIdToWbemContext")
Interceptor.attach(SetCorrelationIdToWbemContext, {onLeave: function (args) {send("SetCorrelationIdToWbemContext");}});

var SetModifiedPropertyNamesToContext = Module.findExportByName("miutils.dll", "SetModifiedPropertyNamesToContext")
Interceptor.attach(SetModifiedPropertyNamesToContext, {onLeave: function (args) {send("SetModifiedPropertyNamesToContext");}});

var SetProperties = Module.findExportByName("miutils.dll", "SetProperties")
Interceptor.attach(SetProperties, {onLeave: function (args) {send("SetProperties");}});

var SubscriptionDeliveryOptions_Create = Module.findExportByName("miutils.dll", "SubscriptionDeliveryOptions_Create")
Interceptor.attach(SubscriptionDeliveryOptions_Create, {onLeave: function (args) {send("SubscriptionDeliveryOptions_Create");}});

var SubscriptionDeliveryOptions_MigrateOptions = Module.findExportByName("miutils.dll", "SubscriptionDeliveryOptions_MigrateOptions")
Interceptor.attach(SubscriptionDeliveryOptions_MigrateOptions, {onLeave: function (args) {send("SubscriptionDeliveryOptions_MigrateOptions");}});

var TypeToCimType = Module.findExportByName("miutils.dll", "TypeToCimType")
Interceptor.attach(TypeToCimType, {onLeave: function (args) {send("TypeToCimType");}});

var ValueClear = Module.findExportByName("miutils.dll", "ValueClear")
Interceptor.attach(ValueClear, {onLeave: function (args) {send("ValueClear");}});

var ValueToVariant = Module.findExportByName("miutils.dll", "ValueToVariant")
Interceptor.attach(ValueToVariant, {onLeave: function (args) {send("ValueToVariant");}});

var VariantArrayToSafeArray = Module.findExportByName("miutils.dll", "VariantArrayToSafeArray")
Interceptor.attach(VariantArrayToSafeArray, {onLeave: function (args) {send("VariantArrayToSafeArray");}});

var VariantToValue = Module.findExportByName("miutils.dll", "VariantToValue")
Interceptor.attach(VariantToValue, {onLeave: function (args) {send("VariantToValue");}});

var WMIEventToCIMIndication = Module.findExportByName("miutils.dll", "WMIEventToCIMIndication")
Interceptor.attach(WMIEventToCIMIndication, {onLeave: function (args) {send("WMIEventToCIMIndication");}});

var WMIExtendedObjectToInstance = Module.findExportByName("miutils.dll", "WMIExtendedObjectToInstance")
Interceptor.attach(WMIExtendedObjectToInstance, {onLeave: function (args) {send("WMIExtendedObjectToInstance");}});

var WMIObjectToClass = Module.findExportByName("miutils.dll", "WMIObjectToClass")
Interceptor.attach(WMIObjectToClass, {onLeave: function (args) {send("WMIObjectToClass");}});

var WMIObjectToInstance = Module.findExportByName("miutils.dll", "WMIObjectToInstance")
Interceptor.attach(WMIObjectToInstance, {onLeave: function (args) {send("WMIObjectToInstance");}});

var WMIQualifierFlavorToMI = Module.findExportByName("miutils.dll", "WMIQualifierFlavorToMI")
Interceptor.attach(WMIQualifierFlavorToMI, {onLeave: function (args) {send("WMIQualifierFlavorToMI");}});

var WriteWBEM_MC_CLIENT_REQUEST_FAILURE = Module.findExportByName("miutils.dll", "WriteWBEM_MC_CLIENT_REQUEST_FAILURE")
Interceptor.attach(WriteWBEM_MC_CLIENT_REQUEST_FAILURE, {onLeave: function (args) {send("WriteWBEM_MC_CLIENT_REQUEST_FAILURE");}});

var XMLDOM_Free = Module.findExportByName("miutils.dll", "XMLDOM_Free")
Interceptor.attach(XMLDOM_Free, {onLeave: function (args) {send("XMLDOM_Free");}});

var XMLDOM_Parse = Module.findExportByName("miutils.dll", "XMLDOM_Parse")
Interceptor.attach(XMLDOM_Parse, {onLeave: function (args) {send("XMLDOM_Parse");}});

var XML_FormatError = Module.findExportByName("miutils.dll", "XML_FormatError")
Interceptor.attach(XML_FormatError, {onLeave: function (args) {send("XML_FormatError");}});

var XML_Init = Module.findExportByName("miutils.dll", "XML_Init")
Interceptor.attach(XML_Init, {onLeave: function (args) {send("XML_Init");}});

var XML_Next = Module.findExportByName("miutils.dll", "XML_Next")
Interceptor.attach(XML_Next, {onLeave: function (args) {send("XML_Next");}});

var XML_PutError = Module.findExportByName("miutils.dll", "XML_PutError")
Interceptor.attach(XML_PutError, {onLeave: function (args) {send("XML_PutError");}});

var XML_RegisterNameSpace = Module.findExportByName("miutils.dll", "XML_RegisterNameSpace")
Interceptor.attach(XML_RegisterNameSpace, {onLeave: function (args) {send("XML_RegisterNameSpace");}});

var XML_SetText = Module.findExportByName("miutils.dll", "XML_SetText")
Interceptor.attach(XML_SetText, {onLeave: function (args) {send("XML_SetText");}});

var XML_StripWhitespace = Module.findExportByName("miutils.dll", "XML_StripWhitespace")
Interceptor.attach(XML_StripWhitespace, {onLeave: function (args) {send("XML_StripWhitespace");}});

