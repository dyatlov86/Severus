var CIGTestHookLoadLibraryWorkerThread = Module.findExportByName("edgehtml.dll", "CIGTestHookLoadLibraryWorkerThread")
Interceptor.attach(CIGTestHookLoadLibraryWorkerThread, {onLeave: function (args) {send("CIGTestHookLoadLibraryWorkerThread");}});

var ClearPhishingFilterData = Module.findExportByName("edgehtml.dll", "ClearPhishingFilterData")
Interceptor.attach(ClearPhishingFilterData, {onLeave: function (args) {send("ClearPhishingFilterData");}});

var ClearTemporaryWebDataAsync = Module.findExportByName("edgehtml.dll", "ClearTemporaryWebDataAsync")
Interceptor.attach(ClearTemporaryWebDataAsync, {onLeave: function (args) {send("ClearTemporaryWebDataAsync");}});

var ConvertAndEscapePostData = Module.findExportByName("edgehtml.dll", "ConvertAndEscapePostData")
Interceptor.attach(ConvertAndEscapePostData, {onLeave: function (args) {send("ConvertAndEscapePostData");}});

var CreateCoreWebView = Module.findExportByName("edgehtml.dll", "CreateCoreWebView")
Interceptor.attach(CreateCoreWebView, {onLeave: function (args) {send("CreateCoreWebView");}});

var CreateDiagnosticsToolObject = Module.findExportByName("edgehtml.dll", "CreateDiagnosticsToolObject")
Interceptor.attach(CreateDiagnosticsToolObject, {onLeave: function (args) {send("CreateDiagnosticsToolObject");}});

var CreateHTMLPropertyPage = Module.findExportByName("edgehtml.dll", "CreateHTMLPropertyPage")
Interceptor.attach(CreateHTMLPropertyPage, {onLeave: function (args) {send("CreateHTMLPropertyPage");}});

var DllCanUnloadNow = Module.findExportByName("edgehtml.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllEnumClassObjects = Module.findExportByName("edgehtml.dll", "DllEnumClassObjects")
Interceptor.attach(DllEnumClassObjects, {onLeave: function (args) {send("DllEnumClassObjects");}});

var DllGetClassObject = Module.findExportByName("edgehtml.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var Fetch_CreateOriginAgnosticFetch = Module.findExportByName("edgehtml.dll", "Fetch_CreateOriginAgnosticFetch")
Interceptor.attach(Fetch_CreateOriginAgnosticFetch, {onLeave: function (args) {send("Fetch_CreateOriginAgnosticFetch");}});

var GetColorValueFromString = Module.findExportByName("edgehtml.dll", "GetColorValueFromString")
Interceptor.attach(GetColorValueFromString, {onLeave: function (args) {send("GetColorValueFromString");}});

var GetWebPlatformObject = Module.findExportByName("edgehtml.dll", "GetWebPlatformObject")
Interceptor.attach(GetWebPlatformObject, {onLeave: function (args) {send("GetWebPlatformObject");}});

var InitializeLocalHtmlEngine = Module.findExportByName("edgehtml.dll", "InitializeLocalHtmlEngine")
Interceptor.attach(InitializeLocalHtmlEngine, {onLeave: function (args) {send("InitializeLocalHtmlEngine");}});

var MatchExactGetIDsOfNames = Module.findExportByName("edgehtml.dll", "MatchExactGetIDsOfNames")
Interceptor.attach(MatchExactGetIDsOfNames, {onLeave: function (args) {send("MatchExactGetIDsOfNames");}});

var ShowHTMLDialog = Module.findExportByName("edgehtml.dll", "ShowHTMLDialog")
Interceptor.attach(ShowHTMLDialog, {onLeave: function (args) {send("ShowHTMLDialog");}});

var ShowHTMLDialogEx = Module.findExportByName("edgehtml.dll", "ShowHTMLDialogEx")
Interceptor.attach(ShowHTMLDialogEx, {onLeave: function (args) {send("ShowHTMLDialogEx");}});

var ShowModalDialog = Module.findExportByName("edgehtml.dll", "ShowModalDialog")
Interceptor.attach(ShowModalDialog, {onLeave: function (args) {send("ShowModalDialog");}});

var ShowModelessHTMLDialog = Module.findExportByName("edgehtml.dll", "ShowModelessHTMLDialog")
Interceptor.attach(ShowModelessHTMLDialog, {onLeave: function (args) {send("ShowModelessHTMLDialog");}});

var Streams_CreateByteChunk = Module.findExportByName("edgehtml.dll", "Streams_CreateByteChunk")
Interceptor.attach(Streams_CreateByteChunk, {onLeave: function (args) {send("Streams_CreateByteChunk");}});

var Streams_CreateDefaultSizedByteChunk = Module.findExportByName("edgehtml.dll", "Streams_CreateDefaultSizedByteChunk")
Interceptor.attach(Streams_CreateDefaultSizedByteChunk, {onLeave: function (args) {send("Streams_CreateDefaultSizedByteChunk");}});

var Streams_CreateDefaultSizedWideCharChunk = Module.findExportByName("edgehtml.dll", "Streams_CreateDefaultSizedWideCharChunk")
Interceptor.attach(Streams_CreateDefaultSizedWideCharChunk, {onLeave: function (args) {send("Streams_CreateDefaultSizedWideCharChunk");}});

var Streams_CreateReadableStream = Module.findExportByName("edgehtml.dll", "Streams_CreateReadableStream")
Interceptor.attach(Streams_CreateReadableStream, {onLeave: function (args) {send("Streams_CreateReadableStream");}});

var Streams_CreateReadableStreamFromFileHandle = Module.findExportByName("edgehtml.dll", "Streams_CreateReadableStreamFromFileHandle")
Interceptor.attach(Streams_CreateReadableStreamFromFileHandle, {onLeave: function (args) {send("Streams_CreateReadableStreamFromFileHandle");}});

var Streams_CreateReadableStreamFromFilePath = Module.findExportByName("edgehtml.dll", "Streams_CreateReadableStreamFromFilePath")
Interceptor.attach(Streams_CreateReadableStreamFromFilePath, {onLeave: function (args) {send("Streams_CreateReadableStreamFromFilePath");}});

var Streams_CreateWideCharChunk = Module.findExportByName("edgehtml.dll", "Streams_CreateWideCharChunk")
Interceptor.attach(Streams_CreateWideCharChunk, {onLeave: function (args) {send("Streams_CreateWideCharChunk");}});

var Streams_CreateWritableStream = Module.findExportByName("edgehtml.dll", "Streams_CreateWritableStream")
Interceptor.attach(Streams_CreateWritableStream, {onLeave: function (args) {send("Streams_CreateWritableStream");}});

var TravelLogCreateInstance = Module.findExportByName("edgehtml.dll", "TravelLogCreateInstance")
Interceptor.attach(TravelLogCreateInstance, {onLeave: function (args) {send("TravelLogCreateInstance");}});

var UninitializeLocalHtmlEngine = Module.findExportByName("edgehtml.dll", "UninitializeLocalHtmlEngine")
Interceptor.attach(UninitializeLocalHtmlEngine, {onLeave: function (args) {send("UninitializeLocalHtmlEngine");}});

