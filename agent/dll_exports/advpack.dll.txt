var AddDelBackupEntry = Module.findExportByName("advpack.dll", "AddDelBackupEntry")
Interceptor.attach(AddDelBackupEntry, {onLeave: function (args) {send("AddDelBackupEntry");}});

var AddDelBackupEntryA = Module.findExportByName("advpack.dll", "AddDelBackupEntryA")
Interceptor.attach(AddDelBackupEntryA, {onLeave: function (args) {send("AddDelBackupEntryA");}});

var AddDelBackupEntryW = Module.findExportByName("advpack.dll", "AddDelBackupEntryW")
Interceptor.attach(AddDelBackupEntryW, {onLeave: function (args) {send("AddDelBackupEntryW");}});

var AdvInstallFile = Module.findExportByName("advpack.dll", "AdvInstallFile")
Interceptor.attach(AdvInstallFile, {onLeave: function (args) {send("AdvInstallFile");}});

var AdvInstallFileA = Module.findExportByName("advpack.dll", "AdvInstallFileA")
Interceptor.attach(AdvInstallFileA, {onLeave: function (args) {send("AdvInstallFileA");}});

var AdvInstallFileW = Module.findExportByName("advpack.dll", "AdvInstallFileW")
Interceptor.attach(AdvInstallFileW, {onLeave: function (args) {send("AdvInstallFileW");}});

var CloseINFEngine = Module.findExportByName("advpack.dll", "CloseINFEngine")
Interceptor.attach(CloseINFEngine, {onLeave: function (args) {send("CloseINFEngine");}});

var DelNode = Module.findExportByName("advpack.dll", "DelNode")
Interceptor.attach(DelNode, {onLeave: function (args) {send("DelNode");}});

var DelNodeA = Module.findExportByName("advpack.dll", "DelNodeA")
Interceptor.attach(DelNodeA, {onLeave: function (args) {send("DelNodeA");}});

var DelNodeRunDLL32 = Module.findExportByName("advpack.dll", "DelNodeRunDLL32")
Interceptor.attach(DelNodeRunDLL32, {onLeave: function (args) {send("DelNodeRunDLL32");}});

var DelNodeRunDLL32A = Module.findExportByName("advpack.dll", "DelNodeRunDLL32A")
Interceptor.attach(DelNodeRunDLL32A, {onLeave: function (args) {send("DelNodeRunDLL32A");}});

var DelNodeRunDLL32W = Module.findExportByName("advpack.dll", "DelNodeRunDLL32W")
Interceptor.attach(DelNodeRunDLL32W, {onLeave: function (args) {send("DelNodeRunDLL32W");}});

var DelNodeW = Module.findExportByName("advpack.dll", "DelNodeW")
Interceptor.attach(DelNodeW, {onLeave: function (args) {send("DelNodeW");}});

var DoInfInstall = Module.findExportByName("advpack.dll", "DoInfInstall")
Interceptor.attach(DoInfInstall, {onLeave: function (args) {send("DoInfInstall");}});

var DoInfInstallA = Module.findExportByName("advpack.dll", "DoInfInstallA")
Interceptor.attach(DoInfInstallA, {onLeave: function (args) {send("DoInfInstallA");}});

var DoInfInstallW = Module.findExportByName("advpack.dll", "DoInfInstallW")
Interceptor.attach(DoInfInstallW, {onLeave: function (args) {send("DoInfInstallW");}});

var ExecuteCab = Module.findExportByName("advpack.dll", "ExecuteCab")
Interceptor.attach(ExecuteCab, {onLeave: function (args) {send("ExecuteCab");}});

var ExecuteCabA = Module.findExportByName("advpack.dll", "ExecuteCabA")
Interceptor.attach(ExecuteCabA, {onLeave: function (args) {send("ExecuteCabA");}});

var ExecuteCabW = Module.findExportByName("advpack.dll", "ExecuteCabW")
Interceptor.attach(ExecuteCabW, {onLeave: function (args) {send("ExecuteCabW");}});

var ExtractFiles = Module.findExportByName("advpack.dll", "ExtractFiles")
Interceptor.attach(ExtractFiles, {onLeave: function (args) {send("ExtractFiles");}});

var ExtractFilesA = Module.findExportByName("advpack.dll", "ExtractFilesA")
Interceptor.attach(ExtractFilesA, {onLeave: function (args) {send("ExtractFilesA");}});

var ExtractFilesW = Module.findExportByName("advpack.dll", "ExtractFilesW")
Interceptor.attach(ExtractFilesW, {onLeave: function (args) {send("ExtractFilesW");}});

var FileSaveMarkNotExist = Module.findExportByName("advpack.dll", "FileSaveMarkNotExist")
Interceptor.attach(FileSaveMarkNotExist, {onLeave: function (args) {send("FileSaveMarkNotExist");}});

var FileSaveMarkNotExistA = Module.findExportByName("advpack.dll", "FileSaveMarkNotExistA")
Interceptor.attach(FileSaveMarkNotExistA, {onLeave: function (args) {send("FileSaveMarkNotExistA");}});

var FileSaveMarkNotExistW = Module.findExportByName("advpack.dll", "FileSaveMarkNotExistW")
Interceptor.attach(FileSaveMarkNotExistW, {onLeave: function (args) {send("FileSaveMarkNotExistW");}});

var FileSaveRestore = Module.findExportByName("advpack.dll", "FileSaveRestore")
Interceptor.attach(FileSaveRestore, {onLeave: function (args) {send("FileSaveRestore");}});

var FileSaveRestoreA = Module.findExportByName("advpack.dll", "FileSaveRestoreA")
Interceptor.attach(FileSaveRestoreA, {onLeave: function (args) {send("FileSaveRestoreA");}});

var FileSaveRestoreOnINF = Module.findExportByName("advpack.dll", "FileSaveRestoreOnINF")
Interceptor.attach(FileSaveRestoreOnINF, {onLeave: function (args) {send("FileSaveRestoreOnINF");}});

var FileSaveRestoreOnINFA = Module.findExportByName("advpack.dll", "FileSaveRestoreOnINFA")
Interceptor.attach(FileSaveRestoreOnINFA, {onLeave: function (args) {send("FileSaveRestoreOnINFA");}});

var FileSaveRestoreOnINFW = Module.findExportByName("advpack.dll", "FileSaveRestoreOnINFW")
Interceptor.attach(FileSaveRestoreOnINFW, {onLeave: function (args) {send("FileSaveRestoreOnINFW");}});

var FileSaveRestoreW = Module.findExportByName("advpack.dll", "FileSaveRestoreW")
Interceptor.attach(FileSaveRestoreW, {onLeave: function (args) {send("FileSaveRestoreW");}});

var GetVersionFromFile = Module.findExportByName("advpack.dll", "GetVersionFromFile")
Interceptor.attach(GetVersionFromFile, {onLeave: function (args) {send("GetVersionFromFile");}});

var GetVersionFromFileA = Module.findExportByName("advpack.dll", "GetVersionFromFileA")
Interceptor.attach(GetVersionFromFileA, {onLeave: function (args) {send("GetVersionFromFileA");}});

var GetVersionFromFileEx = Module.findExportByName("advpack.dll", "GetVersionFromFileEx")
Interceptor.attach(GetVersionFromFileEx, {onLeave: function (args) {send("GetVersionFromFileEx");}});

var GetVersionFromFileExA = Module.findExportByName("advpack.dll", "GetVersionFromFileExA")
Interceptor.attach(GetVersionFromFileExA, {onLeave: function (args) {send("GetVersionFromFileExA");}});

var GetVersionFromFileExW = Module.findExportByName("advpack.dll", "GetVersionFromFileExW")
Interceptor.attach(GetVersionFromFileExW, {onLeave: function (args) {send("GetVersionFromFileExW");}});

var GetVersionFromFileW = Module.findExportByName("advpack.dll", "GetVersionFromFileW")
Interceptor.attach(GetVersionFromFileW, {onLeave: function (args) {send("GetVersionFromFileW");}});

var IsNTAdmin = Module.findExportByName("advpack.dll", "IsNTAdmin")
Interceptor.attach(IsNTAdmin, {onLeave: function (args) {send("IsNTAdmin");}});

var LaunchINFSection = Module.findExportByName("advpack.dll", "LaunchINFSection")
Interceptor.attach(LaunchINFSection, {onLeave: function (args) {send("LaunchINFSection");}});

var LaunchINFSectionA = Module.findExportByName("advpack.dll", "LaunchINFSectionA")
Interceptor.attach(LaunchINFSectionA, {onLeave: function (args) {send("LaunchINFSectionA");}});

var LaunchINFSectionEx = Module.findExportByName("advpack.dll", "LaunchINFSectionEx")
Interceptor.attach(LaunchINFSectionEx, {onLeave: function (args) {send("LaunchINFSectionEx");}});

var LaunchINFSectionExA = Module.findExportByName("advpack.dll", "LaunchINFSectionExA")
Interceptor.attach(LaunchINFSectionExA, {onLeave: function (args) {send("LaunchINFSectionExA");}});

var LaunchINFSectionExW = Module.findExportByName("advpack.dll", "LaunchINFSectionExW")
Interceptor.attach(LaunchINFSectionExW, {onLeave: function (args) {send("LaunchINFSectionExW");}});

var LaunchINFSectionW = Module.findExportByName("advpack.dll", "LaunchINFSectionW")
Interceptor.attach(LaunchINFSectionW, {onLeave: function (args) {send("LaunchINFSectionW");}});

var NeedReboot = Module.findExportByName("advpack.dll", "NeedReboot")
Interceptor.attach(NeedReboot, {onLeave: function (args) {send("NeedReboot");}});

var NeedRebootInit = Module.findExportByName("advpack.dll", "NeedRebootInit")
Interceptor.attach(NeedRebootInit, {onLeave: function (args) {send("NeedRebootInit");}});

var OpenINFEngine = Module.findExportByName("advpack.dll", "OpenINFEngine")
Interceptor.attach(OpenINFEngine, {onLeave: function (args) {send("OpenINFEngine");}});

var OpenINFEngineA = Module.findExportByName("advpack.dll", "OpenINFEngineA")
Interceptor.attach(OpenINFEngineA, {onLeave: function (args) {send("OpenINFEngineA");}});

var OpenINFEngineW = Module.findExportByName("advpack.dll", "OpenINFEngineW")
Interceptor.attach(OpenINFEngineW, {onLeave: function (args) {send("OpenINFEngineW");}});

var RebootCheckOnInstall = Module.findExportByName("advpack.dll", "RebootCheckOnInstall")
Interceptor.attach(RebootCheckOnInstall, {onLeave: function (args) {send("RebootCheckOnInstall");}});

var RebootCheckOnInstallA = Module.findExportByName("advpack.dll", "RebootCheckOnInstallA")
Interceptor.attach(RebootCheckOnInstallA, {onLeave: function (args) {send("RebootCheckOnInstallA");}});

var RebootCheckOnInstallW = Module.findExportByName("advpack.dll", "RebootCheckOnInstallW")
Interceptor.attach(RebootCheckOnInstallW, {onLeave: function (args) {send("RebootCheckOnInstallW");}});

var RegInstall = Module.findExportByName("advpack.dll", "RegInstall")
Interceptor.attach(RegInstall, {onLeave: function (args) {send("RegInstall");}});

var RegInstallA = Module.findExportByName("advpack.dll", "RegInstallA")
Interceptor.attach(RegInstallA, {onLeave: function (args) {send("RegInstallA");}});

var RegInstallW = Module.findExportByName("advpack.dll", "RegInstallW")
Interceptor.attach(RegInstallW, {onLeave: function (args) {send("RegInstallW");}});

var RegRestoreAll = Module.findExportByName("advpack.dll", "RegRestoreAll")
Interceptor.attach(RegRestoreAll, {onLeave: function (args) {send("RegRestoreAll");}});

var RegRestoreAllA = Module.findExportByName("advpack.dll", "RegRestoreAllA")
Interceptor.attach(RegRestoreAllA, {onLeave: function (args) {send("RegRestoreAllA");}});

var RegRestoreAllW = Module.findExportByName("advpack.dll", "RegRestoreAllW")
Interceptor.attach(RegRestoreAllW, {onLeave: function (args) {send("RegRestoreAllW");}});

var RegSaveRestore = Module.findExportByName("advpack.dll", "RegSaveRestore")
Interceptor.attach(RegSaveRestore, {onLeave: function (args) {send("RegSaveRestore");}});

var RegSaveRestoreA = Module.findExportByName("advpack.dll", "RegSaveRestoreA")
Interceptor.attach(RegSaveRestoreA, {onLeave: function (args) {send("RegSaveRestoreA");}});

var RegSaveRestoreOnINF = Module.findExportByName("advpack.dll", "RegSaveRestoreOnINF")
Interceptor.attach(RegSaveRestoreOnINF, {onLeave: function (args) {send("RegSaveRestoreOnINF");}});

var RegSaveRestoreOnINFA = Module.findExportByName("advpack.dll", "RegSaveRestoreOnINFA")
Interceptor.attach(RegSaveRestoreOnINFA, {onLeave: function (args) {send("RegSaveRestoreOnINFA");}});

var RegSaveRestoreOnINFW = Module.findExportByName("advpack.dll", "RegSaveRestoreOnINFW")
Interceptor.attach(RegSaveRestoreOnINFW, {onLeave: function (args) {send("RegSaveRestoreOnINFW");}});

var RegSaveRestoreW = Module.findExportByName("advpack.dll", "RegSaveRestoreW")
Interceptor.attach(RegSaveRestoreW, {onLeave: function (args) {send("RegSaveRestoreW");}});

var RegisterOCX = Module.findExportByName("advpack.dll", "RegisterOCX")
Interceptor.attach(RegisterOCX, {onLeave: function (args) {send("RegisterOCX");}});

var RegisterOCXW = Module.findExportByName("advpack.dll", "RegisterOCXW")
Interceptor.attach(RegisterOCXW, {onLeave: function (args) {send("RegisterOCXW");}});

var RunSetupCommand = Module.findExportByName("advpack.dll", "RunSetupCommand")
Interceptor.attach(RunSetupCommand, {onLeave: function (args) {send("RunSetupCommand");}});

var RunSetupCommandA = Module.findExportByName("advpack.dll", "RunSetupCommandA")
Interceptor.attach(RunSetupCommandA, {onLeave: function (args) {send("RunSetupCommandA");}});

var RunSetupCommandW = Module.findExportByName("advpack.dll", "RunSetupCommandW")
Interceptor.attach(RunSetupCommandW, {onLeave: function (args) {send("RunSetupCommandW");}});

var SetPerUserSecValues = Module.findExportByName("advpack.dll", "SetPerUserSecValues")
Interceptor.attach(SetPerUserSecValues, {onLeave: function (args) {send("SetPerUserSecValues");}});

var SetPerUserSecValuesA = Module.findExportByName("advpack.dll", "SetPerUserSecValuesA")
Interceptor.attach(SetPerUserSecValuesA, {onLeave: function (args) {send("SetPerUserSecValuesA");}});

var SetPerUserSecValuesW = Module.findExportByName("advpack.dll", "SetPerUserSecValuesW")
Interceptor.attach(SetPerUserSecValuesW, {onLeave: function (args) {send("SetPerUserSecValuesW");}});

var TranslateInfString = Module.findExportByName("advpack.dll", "TranslateInfString")
Interceptor.attach(TranslateInfString, {onLeave: function (args) {send("TranslateInfString");}});

var TranslateInfStringA = Module.findExportByName("advpack.dll", "TranslateInfStringA")
Interceptor.attach(TranslateInfStringA, {onLeave: function (args) {send("TranslateInfStringA");}});

var TranslateInfStringEx = Module.findExportByName("advpack.dll", "TranslateInfStringEx")
Interceptor.attach(TranslateInfStringEx, {onLeave: function (args) {send("TranslateInfStringEx");}});

var TranslateInfStringExA = Module.findExportByName("advpack.dll", "TranslateInfStringExA")
Interceptor.attach(TranslateInfStringExA, {onLeave: function (args) {send("TranslateInfStringExA");}});

var TranslateInfStringExW = Module.findExportByName("advpack.dll", "TranslateInfStringExW")
Interceptor.attach(TranslateInfStringExW, {onLeave: function (args) {send("TranslateInfStringExW");}});

var TranslateInfStringW = Module.findExportByName("advpack.dll", "TranslateInfStringW")
Interceptor.attach(TranslateInfStringW, {onLeave: function (args) {send("TranslateInfStringW");}});

var UserInstStubWrapper = Module.findExportByName("advpack.dll", "UserInstStubWrapper")
Interceptor.attach(UserInstStubWrapper, {onLeave: function (args) {send("UserInstStubWrapper");}});

var UserInstStubWrapperA = Module.findExportByName("advpack.dll", "UserInstStubWrapperA")
Interceptor.attach(UserInstStubWrapperA, {onLeave: function (args) {send("UserInstStubWrapperA");}});

var UserInstStubWrapperW = Module.findExportByName("advpack.dll", "UserInstStubWrapperW")
Interceptor.attach(UserInstStubWrapperW, {onLeave: function (args) {send("UserInstStubWrapperW");}});

var UserUnInstStubWrapper = Module.findExportByName("advpack.dll", "UserUnInstStubWrapper")
Interceptor.attach(UserUnInstStubWrapper, {onLeave: function (args) {send("UserUnInstStubWrapper");}});

var UserUnInstStubWrapperA = Module.findExportByName("advpack.dll", "UserUnInstStubWrapperA")
Interceptor.attach(UserUnInstStubWrapperA, {onLeave: function (args) {send("UserUnInstStubWrapperA");}});

var UserUnInstStubWrapperW = Module.findExportByName("advpack.dll", "UserUnInstStubWrapperW")
Interceptor.attach(UserUnInstStubWrapperW, {onLeave: function (args) {send("UserUnInstStubWrapperW");}});

