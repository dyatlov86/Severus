var DafAepExport = Module.findExportByName("deviceassociation.dll", "DafAepExport")
Interceptor.attach(DafAepExport, {onLeave: function (args) {send("DafAepExport");}});

var DafAepImport = Module.findExportByName("deviceassociation.dll", "DafAepImport")
Interceptor.attach(DafAepImport, {onLeave: function (args) {send("DafAepImport");}});

var DafChallengeDevicePresence = Module.findExportByName("deviceassociation.dll", "DafChallengeDevicePresence")
Interceptor.attach(DafChallengeDevicePresence, {onLeave: function (args) {send("DafChallengeDevicePresence");}});

var DafCloseAssociationContext = Module.findExportByName("deviceassociation.dll", "DafCloseAssociationContext")
Interceptor.attach(DafCloseAssociationContext, {onLeave: function (args) {send("DafCloseAssociationContext");}});

var DafCloseChallengeContext = Module.findExportByName("deviceassociation.dll", "DafCloseChallengeContext")
Interceptor.attach(DafCloseChallengeContext, {onLeave: function (args) {send("DafCloseChallengeContext");}});

var DafCloseImportExportContext = Module.findExportByName("deviceassociation.dll", "DafCloseImportExportContext")
Interceptor.attach(DafCloseImportExportContext, {onLeave: function (args) {send("DafCloseImportExportContext");}});

var DafCloseInboundContext = Module.findExportByName("deviceassociation.dll", "DafCloseInboundContext")
Interceptor.attach(DafCloseInboundContext, {onLeave: function (args) {send("DafCloseInboundContext");}});

var DafCreateAssociationContext = Module.findExportByName("deviceassociation.dll", "DafCreateAssociationContext")
Interceptor.attach(DafCreateAssociationContext, {onLeave: function (args) {send("DafCreateAssociationContext");}});

var DafCreateAssociationContextForApp = Module.findExportByName("deviceassociation.dll", "DafCreateAssociationContextForApp")
Interceptor.attach(DafCreateAssociationContextForApp, {onLeave: function (args) {send("DafCreateAssociationContextForApp");}});

var DafCreateAssociationContextFromOobBlob = Module.findExportByName("deviceassociation.dll", "DafCreateAssociationContextFromOobBlob")
Interceptor.attach(DafCreateAssociationContextFromOobBlob, {onLeave: function (args) {send("DafCreateAssociationContextFromOobBlob");}});

var DafCreateAssociationSetContextForAep = Module.findExportByName("deviceassociation.dll", "DafCreateAssociationSetContextForAep")
Interceptor.attach(DafCreateAssociationSetContextForAep, {onLeave: function (args) {send("DafCreateAssociationSetContextForAep");}});

var DafCreateAssociationSetContexts = Module.findExportByName("deviceassociation.dll", "DafCreateAssociationSetContexts")
Interceptor.attach(DafCreateAssociationSetContexts, {onLeave: function (args) {send("DafCreateAssociationSetContexts");}});

var DafCreateChallengeContext = Module.findExportByName("deviceassociation.dll", "DafCreateChallengeContext")
Interceptor.attach(DafCreateChallengeContext, {onLeave: function (args) {send("DafCreateChallengeContext");}});

var DafCreateDeviceChallengeContext = Module.findExportByName("deviceassociation.dll", "DafCreateDeviceChallengeContext")
Interceptor.attach(DafCreateDeviceChallengeContext, {onLeave: function (args) {send("DafCreateDeviceChallengeContext");}});

var DafCreateDeviceInterfaceChallengeContext = Module.findExportByName("deviceassociation.dll", "DafCreateDeviceInterfaceChallengeContext")
Interceptor.attach(DafCreateDeviceInterfaceChallengeContext, {onLeave: function (args) {send("DafCreateDeviceInterfaceChallengeContext");}});

var DafCreateImportExportContext = Module.findExportByName("deviceassociation.dll", "DafCreateImportExportContext")
Interceptor.attach(DafCreateImportExportContext, {onLeave: function (args) {send("DafCreateImportExportContext");}});

var DafCreateInboundContext = Module.findExportByName("deviceassociation.dll", "DafCreateInboundContext")
Interceptor.attach(DafCreateInboundContext, {onLeave: function (args) {send("DafCreateInboundContext");}});

var DafGetInboundAssociationResultForAppActivation = Module.findExportByName("deviceassociation.dll", "DafGetInboundAssociationResultForAppActivation")
Interceptor.attach(DafGetInboundAssociationResultForAppActivation, {onLeave: function (args) {send("DafGetInboundAssociationResultForAppActivation");}});

var DafMemFree = Module.findExportByName("deviceassociation.dll", "DafMemFree")
Interceptor.attach(DafMemFree, {onLeave: function (args) {send("DafMemFree");}});

var DafRegisterForInboundAssociationsAppActivation = Module.findExportByName("deviceassociation.dll", "DafRegisterForInboundAssociationsAppActivation")
Interceptor.attach(DafRegisterForInboundAssociationsAppActivation, {onLeave: function (args) {send("DafRegisterForInboundAssociationsAppActivation");}});

var DafSelectCeremony = Module.findExportByName("deviceassociation.dll", "DafSelectCeremony")
Interceptor.attach(DafSelectCeremony, {onLeave: function (args) {send("DafSelectCeremony");}});

var DafStartAepExport = Module.findExportByName("deviceassociation.dll", "DafStartAepExport")
Interceptor.attach(DafStartAepExport, {onLeave: function (args) {send("DafStartAepExport");}});

var DafStartAepImport = Module.findExportByName("deviceassociation.dll", "DafStartAepImport")
Interceptor.attach(DafStartAepImport, {onLeave: function (args) {send("DafStartAepImport");}});

var DafStartDeviceStatusNotification = Module.findExportByName("deviceassociation.dll", "DafStartDeviceStatusNotification")
Interceptor.attach(DafStartDeviceStatusNotification, {onLeave: function (args) {send("DafStartDeviceStatusNotification");}});

var DafStartEnumCeremonies = Module.findExportByName("deviceassociation.dll", "DafStartEnumCeremonies")
Interceptor.attach(DafStartEnumCeremonies, {onLeave: function (args) {send("DafStartEnumCeremonies");}});

var DafStartFinalize = Module.findExportByName("deviceassociation.dll", "DafStartFinalize")
Interceptor.attach(DafStartFinalize, {onLeave: function (args) {send("DafStartFinalize");}});

var DafStartListenForInboundAssociations = Module.findExportByName("deviceassociation.dll", "DafStartListenForInboundAssociations")
Interceptor.attach(DafStartListenForInboundAssociations, {onLeave: function (args) {send("DafStartListenForInboundAssociations");}});

var DafStartReadCeremonyData = Module.findExportByName("deviceassociation.dll", "DafStartReadCeremonyData")
Interceptor.attach(DafStartReadCeremonyData, {onLeave: function (args) {send("DafStartReadCeremonyData");}});

var DafStartRemoveAssociation = Module.findExportByName("deviceassociation.dll", "DafStartRemoveAssociation")
Interceptor.attach(DafStartRemoveAssociation, {onLeave: function (args) {send("DafStartRemoveAssociation");}});

var DafStartWriteCeremonyData = Module.findExportByName("deviceassociation.dll", "DafStartWriteCeremonyData")
Interceptor.attach(DafStartWriteCeremonyData, {onLeave: function (args) {send("DafStartWriteCeremonyData");}});

