var GNA3_FreeLD = Module.findExportByName("gna.dll", "GNA3_FreeLD")
Interceptor.attach(GNA3_FreeLD, {onLeave: function (args) {send("GNA3_FreeLD");}});

var GNA3_GetConfig = Module.findExportByName("gna.dll", "GNA3_GetConfig")
Interceptor.attach(GNA3_GetConfig, {onLeave: function (args) {send("GNA3_GetConfig");}});

var GNA3_NewLD = Module.findExportByName("gna.dll", "GNA3_NewLD")
Interceptor.attach(GNA3_NewLD, {onLeave: function (args) {send("GNA3_NewLD");}});

var GNA3_PopLD = Module.findExportByName("gna.dll", "GNA3_PopLD")
Interceptor.attach(GNA3_PopLD, {onLeave: function (args) {send("GNA3_PopLD");}});

var GNA3_PopPF = Module.findExportByName("gna.dll", "GNA3_PopPF")
Interceptor.attach(GNA3_PopPF, {onLeave: function (args) {send("GNA3_PopPF");}});

var GNA3_SetConfig = Module.findExportByName("gna.dll", "GNA3_SetConfig")
Interceptor.attach(GNA3_SetConfig, {onLeave: function (args) {send("GNA3_SetConfig");}});

var Gna2DataTypeGetSize = Module.findExportByName("gna.dll", "Gna2DataTypeGetSize")
Interceptor.attach(Gna2DataTypeGetSize, {onLeave: function (args) {send("Gna2DataTypeGetSize");}});

var Gna2DeviceClose = Module.findExportByName("gna.dll", "Gna2DeviceClose")
Interceptor.attach(Gna2DeviceClose, {onLeave: function (args) {send("Gna2DeviceClose");}});

var Gna2DeviceCreateForExport = Module.findExportByName("gna.dll", "Gna2DeviceCreateForExport")
Interceptor.attach(Gna2DeviceCreateForExport, {onLeave: function (args) {send("Gna2DeviceCreateForExport");}});

var Gna2DeviceGetCount = Module.findExportByName("gna.dll", "Gna2DeviceGetCount")
Interceptor.attach(Gna2DeviceGetCount, {onLeave: function (args) {send("Gna2DeviceGetCount");}});

var Gna2DeviceGetVersion = Module.findExportByName("gna.dll", "Gna2DeviceGetVersion")
Interceptor.attach(Gna2DeviceGetVersion, {onLeave: function (args) {send("Gna2DeviceGetVersion");}});

var Gna2DeviceOpen = Module.findExportByName("gna.dll", "Gna2DeviceOpen")
Interceptor.attach(Gna2DeviceOpen, {onLeave: function (args) {send("Gna2DeviceOpen");}});

var Gna2DeviceSetNumberOfThreads = Module.findExportByName("gna.dll", "Gna2DeviceSetNumberOfThreads")
Interceptor.attach(Gna2DeviceSetNumberOfThreads, {onLeave: function (args) {send("Gna2DeviceSetNumberOfThreads");}});

var Gna2ErrorTypeGetMaxMessageLength = Module.findExportByName("gna.dll", "Gna2ErrorTypeGetMaxMessageLength")
Interceptor.attach(Gna2ErrorTypeGetMaxMessageLength, {onLeave: function (args) {send("Gna2ErrorTypeGetMaxMessageLength");}});

var Gna2ErrorTypeGetMessage = Module.findExportByName("gna.dll", "Gna2ErrorTypeGetMessage")
Interceptor.attach(Gna2ErrorTypeGetMessage, {onLeave: function (args) {send("Gna2ErrorTypeGetMessage");}});

var Gna2GetLibraryVersion = Module.findExportByName("gna.dll", "Gna2GetLibraryVersion")
Interceptor.attach(Gna2GetLibraryVersion, {onLeave: function (args) {send("Gna2GetLibraryVersion");}});

var Gna2InstrumentationConfigAssignToRequestConfig = Module.findExportByName("gna.dll", "Gna2InstrumentationConfigAssignToRequestConfig")
Interceptor.attach(Gna2InstrumentationConfigAssignToRequestConfig, {onLeave: function (args) {send("Gna2InstrumentationConfigAssignToRequestConfig");}});

var Gna2InstrumentationConfigCreate = Module.findExportByName("gna.dll", "Gna2InstrumentationConfigCreate")
Interceptor.attach(Gna2InstrumentationConfigCreate, {onLeave: function (args) {send("Gna2InstrumentationConfigCreate");}});

var Gna2InstrumentationConfigRelease = Module.findExportByName("gna.dll", "Gna2InstrumentationConfigRelease")
Interceptor.attach(Gna2InstrumentationConfigRelease, {onLeave: function (args) {send("Gna2InstrumentationConfigRelease");}});

var Gna2InstrumentationConfigSetMode = Module.findExportByName("gna.dll", "Gna2InstrumentationConfigSetMode")
Interceptor.attach(Gna2InstrumentationConfigSetMode, {onLeave: function (args) {send("Gna2InstrumentationConfigSetMode");}});

var Gna2InstrumentationConfigSetUnit = Module.findExportByName("gna.dll", "Gna2InstrumentationConfigSetUnit")
Interceptor.attach(Gna2InstrumentationConfigSetUnit, {onLeave: function (args) {send("Gna2InstrumentationConfigSetUnit");}});

var Gna2ItemTypeGetMaxMessageLength = Module.findExportByName("gna.dll", "Gna2ItemTypeGetMaxMessageLength")
Interceptor.attach(Gna2ItemTypeGetMaxMessageLength, {onLeave: function (args) {send("Gna2ItemTypeGetMaxMessageLength");}});

var Gna2ItemTypeGetMessage = Module.findExportByName("gna.dll", "Gna2ItemTypeGetMessage")
Interceptor.attach(Gna2ItemTypeGetMessage, {onLeave: function (args) {send("Gna2ItemTypeGetMessage");}});

var Gna2MemoryAlloc = Module.findExportByName("gna.dll", "Gna2MemoryAlloc")
Interceptor.attach(Gna2MemoryAlloc, {onLeave: function (args) {send("Gna2MemoryAlloc");}});

var Gna2MemoryFree = Module.findExportByName("gna.dll", "Gna2MemoryFree")
Interceptor.attach(Gna2MemoryFree, {onLeave: function (args) {send("Gna2MemoryFree");}});

var Gna2MemorySetTag = Module.findExportByName("gna.dll", "Gna2MemorySetTag")
Interceptor.attach(Gna2MemorySetTag, {onLeave: function (args) {send("Gna2MemorySetTag");}});

var Gna2ModelCreate = Module.findExportByName("gna.dll", "Gna2ModelCreate")
Interceptor.attach(Gna2ModelCreate, {onLeave: function (args) {send("Gna2ModelCreate");}});

var Gna2ModelErrorGetMaxMessageLength = Module.findExportByName("gna.dll", "Gna2ModelErrorGetMaxMessageLength")
Interceptor.attach(Gna2ModelErrorGetMaxMessageLength, {onLeave: function (args) {send("Gna2ModelErrorGetMaxMessageLength");}});

var Gna2ModelErrorGetMessage = Module.findExportByName("gna.dll", "Gna2ModelErrorGetMessage")
Interceptor.attach(Gna2ModelErrorGetMessage, {onLeave: function (args) {send("Gna2ModelErrorGetMessage");}});

var Gna2ModelExport = Module.findExportByName("gna.dll", "Gna2ModelExport")
Interceptor.attach(Gna2ModelExport, {onLeave: function (args) {send("Gna2ModelExport");}});

var Gna2ModelExportConfigCreate = Module.findExportByName("gna.dll", "Gna2ModelExportConfigCreate")
Interceptor.attach(Gna2ModelExportConfigCreate, {onLeave: function (args) {send("Gna2ModelExportConfigCreate");}});

var Gna2ModelExportConfigRelease = Module.findExportByName("gna.dll", "Gna2ModelExportConfigRelease")
Interceptor.attach(Gna2ModelExportConfigRelease, {onLeave: function (args) {send("Gna2ModelExportConfigRelease");}});

var Gna2ModelExportConfigSetSource = Module.findExportByName("gna.dll", "Gna2ModelExportConfigSetSource")
Interceptor.attach(Gna2ModelExportConfigSetSource, {onLeave: function (args) {send("Gna2ModelExportConfigSetSource");}});

var Gna2ModelExportConfigSetTarget = Module.findExportByName("gna.dll", "Gna2ModelExportConfigSetTarget")
Interceptor.attach(Gna2ModelExportConfigSetTarget, {onLeave: function (args) {send("Gna2ModelExportConfigSetTarget");}});

var Gna2ModelGetLastError = Module.findExportByName("gna.dll", "Gna2ModelGetLastError")
Interceptor.attach(Gna2ModelGetLastError, {onLeave: function (args) {send("Gna2ModelGetLastError");}});

var Gna2ModelOperationInit = Module.findExportByName("gna.dll", "Gna2ModelOperationInit")
Interceptor.attach(Gna2ModelOperationInit, {onLeave: function (args) {send("Gna2ModelOperationInit");}});

var Gna2ModelOverrideAlignment = Module.findExportByName("gna.dll", "Gna2ModelOverrideAlignment")
Interceptor.attach(Gna2ModelOverrideAlignment, {onLeave: function (args) {send("Gna2ModelOverrideAlignment");}});

var Gna2ModelRelease = Module.findExportByName("gna.dll", "Gna2ModelRelease")
Interceptor.attach(Gna2ModelRelease, {onLeave: function (args) {send("Gna2ModelRelease");}});

var Gna2OperationInitConvolution = Module.findExportByName("gna.dll", "Gna2OperationInitConvolution")
Interceptor.attach(Gna2OperationInitConvolution, {onLeave: function (args) {send("Gna2OperationInitConvolution");}});

var Gna2OperationInitConvolutionFused = Module.findExportByName("gna.dll", "Gna2OperationInitConvolutionFused")
Interceptor.attach(Gna2OperationInitConvolutionFused, {onLeave: function (args) {send("Gna2OperationInitConvolutionFused");}});

var Gna2OperationInitCopy = Module.findExportByName("gna.dll", "Gna2OperationInitCopy")
Interceptor.attach(Gna2OperationInitCopy, {onLeave: function (args) {send("Gna2OperationInitCopy");}});

var Gna2OperationInitElementWiseAffine = Module.findExportByName("gna.dll", "Gna2OperationInitElementWiseAffine")
Interceptor.attach(Gna2OperationInitElementWiseAffine, {onLeave: function (args) {send("Gna2OperationInitElementWiseAffine");}});

var Gna2OperationInitFullyConnectedAffine = Module.findExportByName("gna.dll", "Gna2OperationInitFullyConnectedAffine")
Interceptor.attach(Gna2OperationInitFullyConnectedAffine, {onLeave: function (args) {send("Gna2OperationInitFullyConnectedAffine");}});

var Gna2OperationInitFullyConnectedBiasGrouping = Module.findExportByName("gna.dll", "Gna2OperationInitFullyConnectedBiasGrouping")
Interceptor.attach(Gna2OperationInitFullyConnectedBiasGrouping, {onLeave: function (args) {send("Gna2OperationInitFullyConnectedBiasGrouping");}});

var Gna2OperationInitGmm = Module.findExportByName("gna.dll", "Gna2OperationInitGmm")
Interceptor.attach(Gna2OperationInitGmm, {onLeave: function (args) {send("Gna2OperationInitGmm");}});

var Gna2OperationInitGmmInterleaved = Module.findExportByName("gna.dll", "Gna2OperationInitGmmInterleaved")
Interceptor.attach(Gna2OperationInitGmmInterleaved, {onLeave: function (args) {send("Gna2OperationInitGmmInterleaved");}});

var Gna2OperationInitRecurrent = Module.findExportByName("gna.dll", "Gna2OperationInitRecurrent")
Interceptor.attach(Gna2OperationInitRecurrent, {onLeave: function (args) {send("Gna2OperationInitRecurrent");}});

var Gna2OperationInitTransposition = Module.findExportByName("gna.dll", "Gna2OperationInitTransposition")
Interceptor.attach(Gna2OperationInitTransposition, {onLeave: function (args) {send("Gna2OperationInitTransposition");}});

var Gna2RequestConfigCreate = Module.findExportByName("gna.dll", "Gna2RequestConfigCreate")
Interceptor.attach(Gna2RequestConfigCreate, {onLeave: function (args) {send("Gna2RequestConfigCreate");}});

var Gna2RequestConfigEnableActiveList = Module.findExportByName("gna.dll", "Gna2RequestConfigEnableActiveList")
Interceptor.attach(Gna2RequestConfigEnableActiveList, {onLeave: function (args) {send("Gna2RequestConfigEnableActiveList");}});

var Gna2RequestConfigEnableHardwareConsistency = Module.findExportByName("gna.dll", "Gna2RequestConfigEnableHardwareConsistency")
Interceptor.attach(Gna2RequestConfigEnableHardwareConsistency, {onLeave: function (args) {send("Gna2RequestConfigEnableHardwareConsistency");}});

var Gna2RequestConfigRelease = Module.findExportByName("gna.dll", "Gna2RequestConfigRelease")
Interceptor.attach(Gna2RequestConfigRelease, {onLeave: function (args) {send("Gna2RequestConfigRelease");}});

var Gna2RequestConfigSetAccelerationMode = Module.findExportByName("gna.dll", "Gna2RequestConfigSetAccelerationMode")
Interceptor.attach(Gna2RequestConfigSetAccelerationMode, {onLeave: function (args) {send("Gna2RequestConfigSetAccelerationMode");}});

var Gna2RequestConfigSetOperandBuffer = Module.findExportByName("gna.dll", "Gna2RequestConfigSetOperandBuffer")
Interceptor.attach(Gna2RequestConfigSetOperandBuffer, {onLeave: function (args) {send("Gna2RequestConfigSetOperandBuffer");}});

var Gna2RequestEnqueue = Module.findExportByName("gna.dll", "Gna2RequestEnqueue")
Interceptor.attach(Gna2RequestEnqueue, {onLeave: function (args) {send("Gna2RequestEnqueue");}});

var Gna2RequestWait = Module.findExportByName("gna.dll", "Gna2RequestWait")
Interceptor.attach(Gna2RequestWait, {onLeave: function (args) {send("Gna2RequestWait");}});

var Gna2ShapeGetNumberOfElements = Module.findExportByName("gna.dll", "Gna2ShapeGetNumberOfElements")
Interceptor.attach(Gna2ShapeGetNumberOfElements, {onLeave: function (args) {send("Gna2ShapeGetNumberOfElements");}});

var Gna2ShapeInit1D = Module.findExportByName("gna.dll", "Gna2ShapeInit1D")
Interceptor.attach(Gna2ShapeInit1D, {onLeave: function (args) {send("Gna2ShapeInit1D");}});

var Gna2ShapeInit2D = Module.findExportByName("gna.dll", "Gna2ShapeInit2D")
Interceptor.attach(Gna2ShapeInit2D, {onLeave: function (args) {send("Gna2ShapeInit2D");}});

var Gna2ShapeInit3D = Module.findExportByName("gna.dll", "Gna2ShapeInit3D")
Interceptor.attach(Gna2ShapeInit3D, {onLeave: function (args) {send("Gna2ShapeInit3D");}});

var Gna2ShapeInit4D = Module.findExportByName("gna.dll", "Gna2ShapeInit4D")
Interceptor.attach(Gna2ShapeInit4D, {onLeave: function (args) {send("Gna2ShapeInit4D");}});

var Gna2ShapeInit6D = Module.findExportByName("gna.dll", "Gna2ShapeInit6D")
Interceptor.attach(Gna2ShapeInit6D, {onLeave: function (args) {send("Gna2ShapeInit6D");}});

var Gna2ShapeInitScalar = Module.findExportByName("gna.dll", "Gna2ShapeInitScalar")
Interceptor.attach(Gna2ShapeInitScalar, {onLeave: function (args) {send("Gna2ShapeInitScalar");}});

var Gna2StatusGetMaxMessageLength = Module.findExportByName("gna.dll", "Gna2StatusGetMaxMessageLength")
Interceptor.attach(Gna2StatusGetMaxMessageLength, {onLeave: function (args) {send("Gna2StatusGetMaxMessageLength");}});

var Gna2StatusGetMessage = Module.findExportByName("gna.dll", "Gna2StatusGetMessage")
Interceptor.attach(Gna2StatusGetMessage, {onLeave: function (args) {send("Gna2StatusGetMessage");}});

var Gna2StatusIsSuccessful = Module.findExportByName("gna.dll", "Gna2StatusIsSuccessful")
Interceptor.attach(Gna2StatusIsSuccessful, {onLeave: function (args) {send("Gna2StatusIsSuccessful");}});

var Gna2TensorGetSize = Module.findExportByName("gna.dll", "Gna2TensorGetSize")
Interceptor.attach(Gna2TensorGetSize, {onLeave: function (args) {send("Gna2TensorGetSize");}});

var Gna2TensorInit1D = Module.findExportByName("gna.dll", "Gna2TensorInit1D")
Interceptor.attach(Gna2TensorInit1D, {onLeave: function (args) {send("Gna2TensorInit1D");}});

var Gna2TensorInit2D = Module.findExportByName("gna.dll", "Gna2TensorInit2D")
Interceptor.attach(Gna2TensorInit2D, {onLeave: function (args) {send("Gna2TensorInit2D");}});

var Gna2TensorInit3D = Module.findExportByName("gna.dll", "Gna2TensorInit3D")
Interceptor.attach(Gna2TensorInit3D, {onLeave: function (args) {send("Gna2TensorInit3D");}});

var Gna2TensorInit4D = Module.findExportByName("gna.dll", "Gna2TensorInit4D")
Interceptor.attach(Gna2TensorInit4D, {onLeave: function (args) {send("Gna2TensorInit4D");}});

var Gna2TensorInitActivation = Module.findExportByName("gna.dll", "Gna2TensorInitActivation")
Interceptor.attach(Gna2TensorInitActivation, {onLeave: function (args) {send("Gna2TensorInitActivation");}});

var Gna2TensorInitDisabled = Module.findExportByName("gna.dll", "Gna2TensorInitDisabled")
Interceptor.attach(Gna2TensorInitDisabled, {onLeave: function (args) {send("Gna2TensorInitDisabled");}});

var Gna2TensorInitScalar = Module.findExportByName("gna.dll", "Gna2TensorInitScalar")
Interceptor.attach(Gna2TensorInitScalar, {onLeave: function (args) {send("Gna2TensorInitScalar");}});

