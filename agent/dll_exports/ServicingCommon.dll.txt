var BeginFileMapEnumerationInternal = Module.findExportByName("ServicingCommon.dll", "BeginFileMapEnumerationInternal")
Interceptor.attach(BeginFileMapEnumerationInternal, {onLeave: function (args) {send("BeginFileMapEnumerationInternal");}});

var CBSWdsLog = Module.findExportByName("ServicingCommon.dll", "CBSWdsLog")
Interceptor.attach(CBSWdsLog, {onLeave: function (args) {send("CBSWdsLog");}});

var CbsCreateOfflineSession = Module.findExportByName("ServicingCommon.dll", "CbsCreateOfflineSession")
Interceptor.attach(CbsCreateOfflineSession, {onLeave: function (args) {send("CbsCreateOfflineSession");}});

var CbsCreateOfflineSessionFromStackInImage = Module.findExportByName("ServicingCommon.dll", "CbsCreateOfflineSessionFromStackInImage")
Interceptor.attach(CbsCreateOfflineSessionFromStackInImage, {onLeave: function (args) {send("CbsCreateOfflineSessionFromStackInImage");}});

var CbsFindServicingStackDirectory = Module.findExportByName("ServicingCommon.dll", "CbsFindServicingStackDirectory")
Interceptor.attach(CbsFindServicingStackDirectory, {onLeave: function (args) {send("CbsFindServicingStackDirectory");}});

var CbsGetSsBinaryPathFromTargetImage = Module.findExportByName("ServicingCommon.dll", "CbsGetSsBinaryPathFromTargetImage")
Interceptor.attach(CbsGetSsBinaryPathFromTargetImage, {onLeave: function (args) {send("CbsGetSsBinaryPathFromTargetImage");}});

var CbsLoadSssFromTargetImage = Module.findExportByName("ServicingCommon.dll", "CbsLoadSssFromTargetImage")
Interceptor.attach(CbsLoadSssFromTargetImage, {onLeave: function (args) {send("CbsLoadSssFromTargetImage");}});

var CbsOfflineFinalize = Module.findExportByName("ServicingCommon.dll", "CbsOfflineFinalize")
Interceptor.attach(CbsOfflineFinalize, {onLeave: function (args) {send("CbsOfflineFinalize");}});

var CbsOfflineFinalizeNoShutdownImageStack = Module.findExportByName("ServicingCommon.dll", "CbsOfflineFinalizeNoShutdownImageStack")
Interceptor.attach(CbsOfflineFinalizeNoShutdownImageStack, {onLeave: function (args) {send("CbsOfflineFinalizeNoShutdownImageStack");}});

var CbsOfflineSetLogFile = Module.findExportByName("ServicingCommon.dll", "CbsOfflineSetLogFile")
Interceptor.attach(CbsOfflineSetLogFile, {onLeave: function (args) {send("CbsOfflineSetLogFile");}});

var CbsShutdownImageStack = Module.findExportByName("ServicingCommon.dll", "CbsShutdownImageStack")
Interceptor.attach(CbsShutdownImageStack, {onLeave: function (args) {send("CbsShutdownImageStack");}});

var CloseFileMapEnumerationInternal = Module.findExportByName("ServicingCommon.dll", "CloseFileMapEnumerationInternal")
Interceptor.attach(CloseFileMapEnumerationInternal, {onLeave: function (args) {send("CloseFileMapEnumerationInternal");}});

var CompareObjectSDToSddl = Module.findExportByName("ServicingCommon.dll", "CompareObjectSDToSddl")
Interceptor.attach(CompareObjectSDToSddl, {onLeave: function (args) {send("CompareObjectSDToSddl");}});

var ConvertHResultToNtStatus = Module.findExportByName("ServicingCommon.dll", "ConvertHResultToNtStatus")
Interceptor.attach(ConvertHResultToNtStatus, {onLeave: function (args) {send("ConvertHResultToNtStatus");}});

var ConvertNtStatusToHResult = Module.findExportByName("ServicingCommon.dll", "ConvertNtStatusToHResult")
Interceptor.attach(ConvertNtStatusToHResult, {onLeave: function (args) {send("ConvertNtStatusToHResult");}});

var CreateKeyformFromAttributesIntoBuffer = Module.findExportByName("ServicingCommon.dll", "CreateKeyformFromAttributesIntoBuffer")
Interceptor.attach(CreateKeyformFromAttributesIntoBuffer, {onLeave: function (args) {send("CreateKeyformFromAttributesIntoBuffer");}});

var DecompressManifest = Module.findExportByName("ServicingCommon.dll", "DecompressManifest")
Interceptor.attach(DecompressManifest, {onLeave: function (args) {send("DecompressManifest");}});

var EstimateReconstructWindowsDiskNeeds = Module.findExportByName("ServicingCommon.dll", "EstimateReconstructWindowsDiskNeeds")
Interceptor.attach(EstimateReconstructWindowsDiskNeeds, {onLeave: function (args) {send("EstimateReconstructWindowsDiskNeeds");}});

var EstimateReconstructWindowsRAMNeeds = Module.findExportByName("ServicingCommon.dll", "EstimateReconstructWindowsRAMNeeds")
Interceptor.attach(EstimateReconstructWindowsRAMNeeds, {onLeave: function (args) {send("EstimateReconstructWindowsRAMNeeds");}});

var FileVersionFromString = Module.findExportByName("ServicingCommon.dll", "FileVersionFromString")
Interceptor.attach(FileVersionFromString, {onLeave: function (args) {send("FileVersionFromString");}});

var GetCWcpDll = Module.findExportByName("ServicingCommon.dll", "GetCWcpDll")
Interceptor.attach(GetCWcpDll, {onLeave: function (args) {send("GetCWcpDll");}});

var GetIdentityAuthority = Module.findExportByName("ServicingCommon.dll", "GetIdentityAuthority")
Interceptor.attach(GetIdentityAuthority, {onLeave: function (args) {send("GetIdentityAuthority");}});

var GetLoadedHiveKeyName = Module.findExportByName("ServicingCommon.dll", "GetLoadedHiveKeyName")
Interceptor.attach(GetLoadedHiveKeyName, {onLeave: function (args) {send("GetLoadedHiveKeyName");}});

var GetNextFileMapContentInternal = Module.findExportByName("ServicingCommon.dll", "GetNextFileMapContentInternal")
Interceptor.attach(GetNextFileMapContentInternal, {onLeave: function (args) {send("GetNextFileMapContentInternal");}});

var GetTemporaryPath = Module.findExportByName("ServicingCommon.dll", "GetTemporaryPath")
Interceptor.attach(GetTemporaryPath, {onLeave: function (args) {send("GetTemporaryPath");}});

var GetUpdateReserveManagerLoader = Module.findExportByName("ServicingCommon.dll", "GetUpdateReserveManagerLoader")
Interceptor.attach(GetUpdateReserveManagerLoader, {onLeave: function (args) {send("GetUpdateReserveManagerLoader");}});

var IsKeyProtected = Module.findExportByName("ServicingCommon.dll", "IsKeyProtected")
Interceptor.attach(IsKeyProtected, {onLeave: function (args) {send("IsKeyProtected");}});

var IsLuaCdfFile = Module.findExportByName("ServicingCommon.dll", "IsLuaCdfFile")
Interceptor.attach(IsLuaCdfFile, {onLeave: function (args) {send("IsLuaCdfFile");}});

var LoadUpdateReserveManager = Module.findExportByName("ServicingCommon.dll", "LoadUpdateReserveManager")
Interceptor.attach(LoadUpdateReserveManager, {onLeave: function (args) {send("LoadUpdateReserveManager");}});

var ReconstructWindowsEx = Module.findExportByName("ServicingCommon.dll", "ReconstructWindowsEx")
Interceptor.attach(ReconstructWindowsEx, {onLeave: function (args) {send("ReconstructWindowsEx");}});

var ReconstructWindowsEx2 = Module.findExportByName("ServicingCommon.dll", "ReconstructWindowsEx2")
Interceptor.attach(ReconstructWindowsEx2, {onLeave: function (args) {send("ReconstructWindowsEx2");}});

var RecursiveCopy = Module.findExportByName("ServicingCommon.dll", "RecursiveCopy")
Interceptor.attach(RecursiveCopy, {onLeave: function (args) {send("RecursiveCopy");}});

var RemoveFileProtection = Module.findExportByName("ServicingCommon.dll", "RemoveFileProtection")
Interceptor.attach(RemoveFileProtection, {onLeave: function (args) {send("RemoveFileProtection");}});

var RemoveRegKeyProtection = Module.findExportByName("ServicingCommon.dll", "RemoveRegKeyProtection")
Interceptor.attach(RemoveRegKeyProtection, {onLeave: function (args) {send("RemoveRegKeyProtection");}});

var RtlAllocateLBlob = Module.findExportByName("ServicingCommon.dll", "RtlAllocateLBlob")
Interceptor.attach(RtlAllocateLBlob, {onLeave: function (args) {send("RtlAllocateLBlob");}});

var RtlAllocateLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlAllocateLUnicodeString")
Interceptor.attach(RtlAllocateLUnicodeString, {onLeave: function (args) {send("RtlAllocateLUnicodeString");}});

var RtlAllocateLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlAllocateLUtf8String")
Interceptor.attach(RtlAllocateLUtf8String, {onLeave: function (args) {send("RtlAllocateLUtf8String");}});

var RtlAllocateUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlAllocateUnicodeString")
Interceptor.attach(RtlAllocateUnicodeString, {onLeave: function (args) {send("RtlAllocateUnicodeString");}});

var RtlAppendLUnicodeStringToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlAppendLUnicodeStringToLUnicodeString")
Interceptor.attach(RtlAppendLUnicodeStringToLUnicodeString, {onLeave: function (args) {send("RtlAppendLUnicodeStringToLUnicodeString");}});

var RtlAppendLUtf8StringToLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlAppendLUtf8StringToLUtf8String")
Interceptor.attach(RtlAppendLUtf8StringToLUtf8String, {onLeave: function (args) {send("RtlAppendLUtf8StringToLUtf8String");}});

var RtlAppendUcsCharacterToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlAppendUcsCharacterToLUnicodeString")
Interceptor.attach(RtlAppendUcsCharacterToLUnicodeString, {onLeave: function (args) {send("RtlAppendUcsCharacterToLUnicodeString");}});

var RtlAppendUcsCharacterToLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlAppendUcsCharacterToLUtf8String")
Interceptor.attach(RtlAppendUcsCharacterToLUtf8String, {onLeave: function (args) {send("RtlAppendUcsCharacterToLUtf8String");}});

var RtlAppendUcsCharactersToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlAppendUcsCharactersToLUnicodeString")
Interceptor.attach(RtlAppendUcsCharactersToLUnicodeString, {onLeave: function (args) {send("RtlAppendUcsCharactersToLUnicodeString");}});

var RtlBase64EncodeLBlobToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlBase64EncodeLBlobToLUnicodeString")
Interceptor.attach(RtlBase64EncodeLBlobToLUnicodeString, {onLeave: function (args) {send("RtlBase64EncodeLBlobToLUnicodeString");}});

var RtlBase64EncodeLBlobToLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlBase64EncodeLBlobToLUtf8String")
Interceptor.attach(RtlBase64EncodeLBlobToLUtf8String, {onLeave: function (args) {send("RtlBase64EncodeLBlobToLUtf8String");}});

var RtlCalculateUtf16StringLengthFromLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlCalculateUtf16StringLengthFromLUtf8String")
Interceptor.attach(RtlCalculateUtf16StringLengthFromLUtf8String, {onLeave: function (args) {send("RtlCalculateUtf16StringLengthFromLUtf8String");}});

var RtlCommitSmartLBlobUcsWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlCommitSmartLBlobUcsWritingContext")
Interceptor.attach(RtlCommitSmartLBlobUcsWritingContext, {onLeave: function (args) {send("RtlCommitSmartLBlobUcsWritingContext");}});

var RtlCommitSmartLBlobWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlCommitSmartLBlobWritingContext")
Interceptor.attach(RtlCommitSmartLBlobWritingContext, {onLeave: function (args) {send("RtlCommitSmartLBlobWritingContext");}});

var RtlCompareEncodedLBlobs = Module.findExportByName("ServicingCommon.dll", "RtlCompareEncodedLBlobs")
Interceptor.attach(RtlCompareEncodedLBlobs, {onLeave: function (args) {send("RtlCompareEncodedLBlobs");}});

var RtlCompareLUnicodeStringToLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlCompareLUnicodeStringToLUtf8String")
Interceptor.attach(RtlCompareLUnicodeStringToLUtf8String, {onLeave: function (args) {send("RtlCompareLUnicodeStringToLUtf8String");}});

var RtlCompareLUnicodeStrings = Module.findExportByName("ServicingCommon.dll", "RtlCompareLUnicodeStrings")
Interceptor.attach(RtlCompareLUnicodeStrings, {onLeave: function (args) {send("RtlCompareLUnicodeStrings");}});

var RtlCompareLUtf8StringToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlCompareLUtf8StringToLUnicodeString")
Interceptor.attach(RtlCompareLUtf8StringToLUnicodeString, {onLeave: function (args) {send("RtlCompareLUtf8StringToLUnicodeString");}});

var RtlCompareLUtf8Strings = Module.findExportByName("ServicingCommon.dll", "RtlCompareLUtf8Strings")
Interceptor.attach(RtlCompareLUtf8Strings, {onLeave: function (args) {send("RtlCompareLUtf8Strings");}});

var RtlConcatenateLUnicodeStrings = Module.findExportByName("ServicingCommon.dll", "RtlConcatenateLUnicodeStrings")
Interceptor.attach(RtlConcatenateLUnicodeStrings, {onLeave: function (args) {send("RtlConcatenateLUnicodeStrings");}});

var RtlConcatenateLUtf8Strings = Module.findExportByName("ServicingCommon.dll", "RtlConcatenateLUtf8Strings")
Interceptor.attach(RtlConcatenateLUtf8Strings, {onLeave: function (args) {send("RtlConcatenateLUtf8Strings");}});

var RtlConvertNtFilePathToWin32FilePath = Module.findExportByName("ServicingCommon.dll", "RtlConvertNtFilePathToWin32FilePath")
Interceptor.attach(RtlConvertNtFilePathToWin32FilePath, {onLeave: function (args) {send("RtlConvertNtFilePathToWin32FilePath");}});

var RtlConvertNtRegistryPathToWin32RegistryPath = Module.findExportByName("ServicingCommon.dll", "RtlConvertNtRegistryPathToWin32RegistryPath")
Interceptor.attach(RtlConvertNtRegistryPathToWin32RegistryPath, {onLeave: function (args) {send("RtlConvertNtRegistryPathToWin32RegistryPath");}});

var RtlConvertWin32FilePathToNtFilePath = Module.findExportByName("ServicingCommon.dll", "RtlConvertWin32FilePathToNtFilePath")
Interceptor.attach(RtlConvertWin32FilePathToNtFilePath, {onLeave: function (args) {send("RtlConvertWin32FilePathToNtFilePath");}});

var RtlConvertWin32RegistryPathToNtRegistryPath = Module.findExportByName("ServicingCommon.dll", "RtlConvertWin32RegistryPathToNtRegistryPath")
Interceptor.attach(RtlConvertWin32RegistryPathToNtRegistryPath, {onLeave: function (args) {send("RtlConvertWin32RegistryPathToNtRegistryPath");}});

var RtlCopyLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlCopyLUnicodeString")
Interceptor.attach(RtlCopyLUnicodeString, {onLeave: function (args) {send("RtlCopyLUnicodeString");}});

var RtlCopyLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlCopyLUtf8String")
Interceptor.attach(RtlCopyLUtf8String, {onLeave: function (args) {send("RtlCopyLUtf8String");}});

var RtlCopyLUtf8StringToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlCopyLUtf8StringToLUnicodeString")
Interceptor.attach(RtlCopyLUtf8StringToLUnicodeString, {onLeave: function (args) {send("RtlCopyLUtf8StringToLUnicodeString");}});

var RtlCreateDefaultMicrodomXmlWriter = Module.findExportByName("ServicingCommon.dll", "RtlCreateDefaultMicrodomXmlWriter")
Interceptor.attach(RtlCreateDefaultMicrodomXmlWriter, {onLeave: function (args) {send("RtlCreateDefaultMicrodomXmlWriter");}});

var RtlCreateDefaultXmlWriter = Module.findExportByName("ServicingCommon.dll", "RtlCreateDefaultXmlWriter")
Interceptor.attach(RtlCreateDefaultXmlWriter, {onLeave: function (args) {send("RtlCreateDefaultXmlWriter");}});

var RtlCreateFilteringMicrodomWriter = Module.findExportByName("ServicingCommon.dll", "RtlCreateFilteringMicrodomWriter")
Interceptor.attach(RtlCreateFilteringMicrodomWriter, {onLeave: function (args) {send("RtlCreateFilteringMicrodomWriter");}});

var RtlCreateMicrodom = Module.findExportByName("ServicingCommon.dll", "RtlCreateMicrodom")
Interceptor.attach(RtlCreateMicrodom, {onLeave: function (args) {send("RtlCreateMicrodom");}});

var RtlCreateMicrodomUpdateContext = Module.findExportByName("ServicingCommon.dll", "RtlCreateMicrodomUpdateContext")
Interceptor.attach(RtlCreateMicrodomUpdateContext, {onLeave: function (args) {send("RtlCreateMicrodomUpdateContext");}});

var RtlCreateUpdatedMicrodomAsMicrodom = Module.findExportByName("ServicingCommon.dll", "RtlCreateUpdatedMicrodomAsMicrodom")
Interceptor.attach(RtlCreateUpdatedMicrodomAsMicrodom, {onLeave: function (args) {send("RtlCreateUpdatedMicrodomAsMicrodom");}});

var RtlCreateUpdatedMicrodomAsUtf8 = Module.findExportByName("ServicingCommon.dll", "RtlCreateUpdatedMicrodomAsUtf8")
Interceptor.attach(RtlCreateUpdatedMicrodomAsUtf8, {onLeave: function (args) {send("RtlCreateUpdatedMicrodomAsUtf8");}});

var RtlCreateUtf16LEUCSStringBuilder = Module.findExportByName("ServicingCommon.dll", "RtlCreateUtf16LEUCSStringBuilder")
Interceptor.attach(RtlCreateUtf16LEUCSStringBuilder, {onLeave: function (args) {send("RtlCreateUtf16LEUCSStringBuilder");}});

var RtlCreateUtf8UCSStringBuilder = Module.findExportByName("ServicingCommon.dll", "RtlCreateUtf8UCSStringBuilder")
Interceptor.attach(RtlCreateUtf8UCSStringBuilder, {onLeave: function (args) {send("RtlCreateUtf8UCSStringBuilder");}});

var RtlCreateXMLDSIGSession = Module.findExportByName("ServicingCommon.dll", "RtlCreateXMLDSIGSession")
Interceptor.attach(RtlCreateXMLDSIGSession, {onLeave: function (args) {send("RtlCreateXMLDSIGSession");}});

var RtlDeallocateUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlDeallocateUnicodeString")
Interceptor.attach(RtlDeallocateUnicodeString, {onLeave: function (args) {send("RtlDeallocateUnicodeString");}});

var RtlDecodeBase64LUnicodeStringToLBlob = Module.findExportByName("ServicingCommon.dll", "RtlDecodeBase64LUnicodeStringToLBlob")
Interceptor.attach(RtlDecodeBase64LUnicodeStringToLBlob, {onLeave: function (args) {send("RtlDecodeBase64LUnicodeStringToLBlob");}});

var RtlDecodeBase64LUtf8StringToLBlob = Module.findExportByName("ServicingCommon.dll", "RtlDecodeBase64LUtf8StringToLBlob")
Interceptor.attach(RtlDecodeBase64LUtf8StringToLBlob, {onLeave: function (args) {send("RtlDecodeBase64LUtf8StringToLBlob");}});

var RtlDecodeUtf16LE = Module.findExportByName("ServicingCommon.dll", "RtlDecodeUtf16LE")
Interceptor.attach(RtlDecodeUtf16LE, {onLeave: function (args) {send("RtlDecodeUtf16LE");}});

var RtlDecodeUtf8 = Module.findExportByName("ServicingCommon.dll", "RtlDecodeUtf8")
Interceptor.attach(RtlDecodeUtf8, {onLeave: function (args) {send("RtlDecodeUtf8");}});

var RtlDestroyGrowingList = Module.findExportByName("ServicingCommon.dll", "RtlDestroyGrowingList")
Interceptor.attach(RtlDestroyGrowingList, {onLeave: function (args) {send("RtlDestroyGrowingList");}});

var RtlDestroyMicrodomUpdateContext = Module.findExportByName("ServicingCommon.dll", "RtlDestroyMicrodomUpdateContext")
Interceptor.attach(RtlDestroyMicrodomUpdateContext, {onLeave: function (args) {send("RtlDestroyMicrodomUpdateContext");}});

var RtlDetermineFilteredLUnicodeStringLength = Module.findExportByName("ServicingCommon.dll", "RtlDetermineFilteredLUnicodeStringLength")
Interceptor.attach(RtlDetermineFilteredLUnicodeStringLength, {onLeave: function (args) {send("RtlDetermineFilteredLUnicodeStringLength");}});

var RtlDetermineTranscodedLBlobSize = Module.findExportByName("ServicingCommon.dll", "RtlDetermineTranscodedLBlobSize")
Interceptor.attach(RtlDetermineTranscodedLBlobSize, {onLeave: function (args) {send("RtlDetermineTranscodedLBlobSize");}});

var RtlDoesLUnicodeStringMatchExpression = Module.findExportByName("ServicingCommon.dll", "RtlDoesLUnicodeStringMatchExpression")
Interceptor.attach(RtlDoesLUnicodeStringMatchExpression, {onLeave: function (args) {send("RtlDoesLUnicodeStringMatchExpression");}});

var RtlDowncaseUCSCharacter = Module.findExportByName("ServicingCommon.dll", "RtlDowncaseUCSCharacter")
Interceptor.attach(RtlDowncaseUCSCharacter, {onLeave: function (args) {send("RtlDowncaseUCSCharacter");}});

var RtlDuplicateLBlob = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateLBlob")
Interceptor.attach(RtlDuplicateLBlob, {onLeave: function (args) {send("RtlDuplicateLBlob");}});

var RtlDuplicateLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateLUnicodeString")
Interceptor.attach(RtlDuplicateLUnicodeString, {onLeave: function (args) {send("RtlDuplicateLUnicodeString");}});

var RtlDuplicateLUnicodeStringToLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateLUnicodeStringToLUtf8String")
Interceptor.attach(RtlDuplicateLUnicodeStringToLUtf8String, {onLeave: function (args) {send("RtlDuplicateLUnicodeStringToLUtf8String");}});

var RtlDuplicateLUnicodeStringToUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateLUnicodeStringToUnicodeString")
Interceptor.attach(RtlDuplicateLUnicodeStringToUnicodeString, {onLeave: function (args) {send("RtlDuplicateLUnicodeStringToUnicodeString");}});

var RtlDuplicateLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateLUtf8String")
Interceptor.attach(RtlDuplicateLUtf8String, {onLeave: function (args) {send("RtlDuplicateLUtf8String");}});

var RtlDuplicateLUtf8StringToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateLUtf8StringToLUnicodeString")
Interceptor.attach(RtlDuplicateLUtf8StringToLUnicodeString, {onLeave: function (args) {send("RtlDuplicateLUtf8StringToLUnicodeString");}});

var RtlDuplicateNullTerminatedStringToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateNullTerminatedStringToLUnicodeString")
Interceptor.attach(RtlDuplicateNullTerminatedStringToLUnicodeString, {onLeave: function (args) {send("RtlDuplicateNullTerminatedStringToLUnicodeString");}});

var RtlDuplicateUnicodeStringToLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlDuplicateUnicodeStringToLUnicodeString")
Interceptor.attach(RtlDuplicateUnicodeStringToLUnicodeString, {onLeave: function (args) {send("RtlDuplicateUnicodeStringToLUnicodeString");}});

var RtlEncodeUtf16LE = Module.findExportByName("ServicingCommon.dll", "RtlEncodeUtf16LE")
Interceptor.attach(RtlEncodeUtf16LE, {onLeave: function (args) {send("RtlEncodeUtf16LE");}});

var RtlEncodeUtf8 = Module.findExportByName("ServicingCommon.dll", "RtlEncodeUtf8")
Interceptor.attach(RtlEncodeUtf8, {onLeave: function (args) {send("RtlEncodeUtf8");}});

var RtlEqualLUnicodeStringPrefix = Module.findExportByName("ServicingCommon.dll", "RtlEqualLUnicodeStringPrefix")
Interceptor.attach(RtlEqualLUnicodeStringPrefix, {onLeave: function (args) {send("RtlEqualLUnicodeStringPrefix");}});

var RtlEqualLUnicodeStrings = Module.findExportByName("ServicingCommon.dll", "RtlEqualLUnicodeStrings")
Interceptor.attach(RtlEqualLUnicodeStrings, {onLeave: function (args) {send("RtlEqualLUnicodeStrings");}});

var RtlEqualLUtf8StringPrefix = Module.findExportByName("ServicingCommon.dll", "RtlEqualLUtf8StringPrefix")
Interceptor.attach(RtlEqualLUtf8StringPrefix, {onLeave: function (args) {send("RtlEqualLUtf8StringPrefix");}});

var RtlEqualLUtf8Strings = Module.findExportByName("ServicingCommon.dll", "RtlEqualLUtf8Strings")
Interceptor.attach(RtlEqualLUtf8Strings, {onLeave: function (args) {send("RtlEqualLUtf8Strings");}});

var RtlExecuteXPathOverMicrodom = Module.findExportByName("ServicingCommon.dll", "RtlExecuteXPathOverMicrodom")
Interceptor.attach(RtlExecuteXPathOverMicrodom, {onLeave: function (args) {send("RtlExecuteXPathOverMicrodom");}});

var RtlFilterLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlFilterLUnicodeString")
Interceptor.attach(RtlFilterLUnicodeString, {onLeave: function (args) {send("RtlFilterLUnicodeString");}});

var RtlFinalizeSmartLBlobUcsWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlFinalizeSmartLBlobUcsWritingContext")
Interceptor.attach(RtlFinalizeSmartLBlobUcsWritingContext, {onLeave: function (args) {send("RtlFinalizeSmartLBlobUcsWritingContext");}});

var RtlFinalizeSmartLBlobWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlFinalizeSmartLBlobWritingContext")
Interceptor.attach(RtlFinalizeSmartLBlobWritingContext, {onLeave: function (args) {send("RtlFinalizeSmartLBlobWritingContext");}});

var RtlFreeLBlob = Module.findExportByName("ServicingCommon.dll", "RtlFreeLBlob")
Interceptor.attach(RtlFreeLBlob, {onLeave: function (args) {send("RtlFreeLBlob");}});

var RtlFreeLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlFreeLUnicodeString")
Interceptor.attach(RtlFreeLUnicodeString, {onLeave: function (args) {send("RtlFreeLUnicodeString");}});

var RtlFreeLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlFreeLUtf8String")
Interceptor.attach(RtlFreeLUtf8String, {onLeave: function (args) {send("RtlFreeLUtf8String");}});

var RtlGetEncodingSizeUcs2 = Module.findExportByName("ServicingCommon.dll", "RtlGetEncodingSizeUcs2")
Interceptor.attach(RtlGetEncodingSizeUcs2, {onLeave: function (args) {send("RtlGetEncodingSizeUcs2");}});

var RtlGetEncodingSizeUtf16 = Module.findExportByName("ServicingCommon.dll", "RtlGetEncodingSizeUtf16")
Interceptor.attach(RtlGetEncodingSizeUtf16, {onLeave: function (args) {send("RtlGetEncodingSizeUtf16");}});

var RtlGetEncodingSizeUtf8 = Module.findExportByName("ServicingCommon.dll", "RtlGetEncodingSizeUtf8")
Interceptor.attach(RtlGetEncodingSizeUtf8, {onLeave: function (args) {send("RtlGetEncodingSizeUtf8");}});

var RtlGetHashAlgorithmHashLength = Module.findExportByName("ServicingCommon.dll", "RtlGetHashAlgorithmHashLength")
Interceptor.attach(RtlGetHashAlgorithmHashLength, {onLeave: function (args) {send("RtlGetHashAlgorithmHashLength");}});

var RtlHashLBlob = Module.findExportByName("ServicingCommon.dll", "RtlHashLBlob")
Interceptor.attach(RtlHashLBlob, {onLeave: function (args) {send("RtlHashLBlob");}});

var RtlHashLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlHashLUnicodeString")
Interceptor.attach(RtlHashLUnicodeString, {onLeave: function (args) {send("RtlHashLUnicodeString");}});

var RtlHashLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlHashLUtf8String")
Interceptor.attach(RtlHashLUtf8String, {onLeave: function (args) {send("RtlHashLUtf8String");}});

var RtlIndexIntoGrowingList = Module.findExportByName("ServicingCommon.dll", "RtlIndexIntoGrowingList")
Interceptor.attach(RtlIndexIntoGrowingList, {onLeave: function (args) {send("RtlIndexIntoGrowingList");}});

var RtlInitLUnicodeStringFromNullTerminatedString = Module.findExportByName("ServicingCommon.dll", "RtlInitLUnicodeStringFromNullTerminatedString")
Interceptor.attach(RtlInitLUnicodeStringFromNullTerminatedString, {onLeave: function (args) {send("RtlInitLUnicodeStringFromNullTerminatedString");}});

var RtlInitLUnicodeStringFromUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlInitLUnicodeStringFromUnicodeString")
Interceptor.attach(RtlInitLUnicodeStringFromUnicodeString, {onLeave: function (args) {send("RtlInitLUnicodeStringFromUnicodeString");}});

var RtlInitUnicodeStringFromLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlInitUnicodeStringFromLUnicodeString")
Interceptor.attach(RtlInitUnicodeStringFromLUnicodeString, {onLeave: function (args) {send("RtlInitUnicodeStringFromLUnicodeString");}});

var RtlInitializeGrowingList = Module.findExportByName("ServicingCommon.dll", "RtlInitializeGrowingList")
Interceptor.attach(RtlInitializeGrowingList, {onLeave: function (args) {send("RtlInitializeGrowingList");}});

var RtlInitializeSmartLBlobWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlInitializeSmartLBlobWritingContext")
Interceptor.attach(RtlInitializeSmartLBlobWritingContext, {onLeave: function (args) {send("RtlInitializeSmartLBlobWritingContext");}});

var RtlInitializeSmartLUnicodeStringWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlInitializeSmartLUnicodeStringWritingContext")
Interceptor.attach(RtlInitializeSmartLUnicodeStringWritingContext, {onLeave: function (args) {send("RtlInitializeSmartLUnicodeStringWritingContext");}});

var RtlInitializeSmartLUtf8StringWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlInitializeSmartLUtf8StringWritingContext")
Interceptor.attach(RtlInitializeSmartLUtf8StringWritingContext, {onLeave: function (args) {send("RtlInitializeSmartLUtf8StringWritingContext");}});

var RtlIsLBlobValid = Module.findExportByName("ServicingCommon.dll", "RtlIsLBlobValid")
Interceptor.attach(RtlIsLBlobValid, {onLeave: function (args) {send("RtlIsLBlobValid");}});

var RtlIsLUnicodeStringValid = Module.findExportByName("ServicingCommon.dll", "RtlIsLUnicodeStringValid")
Interceptor.attach(RtlIsLUnicodeStringValid, {onLeave: function (args) {send("RtlIsLUnicodeStringValid");}});

var RtlIsLUtf8StringValid = Module.findExportByName("ServicingCommon.dll", "RtlIsLUtf8StringValid")
Interceptor.attach(RtlIsLUtf8StringValid, {onLeave: function (args) {send("RtlIsLUtf8StringValid");}});

var RtlLengthOfUcsCharacterEncodedAsUtf8 = Module.findExportByName("ServicingCommon.dll", "RtlLengthOfUcsCharacterEncodedAsUtf8")
Interceptor.attach(RtlLengthOfUcsCharacterEncodedAsUtf8, {onLeave: function (args) {send("RtlLengthOfUcsCharacterEncodedAsUtf8");}});

var RtlMatchEncodedLBlobAgainstList = Module.findExportByName("ServicingCommon.dll", "RtlMatchEncodedLBlobAgainstList")
Interceptor.attach(RtlMatchEncodedLBlobAgainstList, {onLeave: function (args) {send("RtlMatchEncodedLBlobAgainstList");}});

var RtlMatchEncodedLBlobAgainstPointerList = Module.findExportByName("ServicingCommon.dll", "RtlMatchEncodedLBlobAgainstPointerList")
Interceptor.attach(RtlMatchEncodedLBlobAgainstPointerList, {onLeave: function (args) {send("RtlMatchEncodedLBlobAgainstPointerList");}});

var RtlMatchLUnicodeStringAgainstLUtf8StringList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUnicodeStringAgainstLUtf8StringList")
Interceptor.attach(RtlMatchLUnicodeStringAgainstLUtf8StringList, {onLeave: function (args) {send("RtlMatchLUnicodeStringAgainstLUtf8StringList");}});

var RtlMatchLUnicodeStringAgainstLUtf8StringPointerList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUnicodeStringAgainstLUtf8StringPointerList")
Interceptor.attach(RtlMatchLUnicodeStringAgainstLUtf8StringPointerList, {onLeave: function (args) {send("RtlMatchLUnicodeStringAgainstLUtf8StringPointerList");}});

var RtlMatchLUnicodeStringAgainstList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUnicodeStringAgainstList")
Interceptor.attach(RtlMatchLUnicodeStringAgainstList, {onLeave: function (args) {send("RtlMatchLUnicodeStringAgainstList");}});

var RtlMatchLUnicodeStringAgainstPointerList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUnicodeStringAgainstPointerList")
Interceptor.attach(RtlMatchLUnicodeStringAgainstPointerList, {onLeave: function (args) {send("RtlMatchLUnicodeStringAgainstPointerList");}});

var RtlMatchLUtf8StringAgainstLUnicodeStringList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUtf8StringAgainstLUnicodeStringList")
Interceptor.attach(RtlMatchLUtf8StringAgainstLUnicodeStringList, {onLeave: function (args) {send("RtlMatchLUtf8StringAgainstLUnicodeStringList");}});

var RtlMatchLUtf8StringAgainstLUnicodeStringPointerList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUtf8StringAgainstLUnicodeStringPointerList")
Interceptor.attach(RtlMatchLUtf8StringAgainstLUnicodeStringPointerList, {onLeave: function (args) {send("RtlMatchLUtf8StringAgainstLUnicodeStringPointerList");}});

var RtlMatchLUtf8StringAgainstList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUtf8StringAgainstList")
Interceptor.attach(RtlMatchLUtf8StringAgainstList, {onLeave: function (args) {send("RtlMatchLUtf8StringAgainstList");}});

var RtlMatchLUtf8StringAgainstPointerList = Module.findExportByName("ServicingCommon.dll", "RtlMatchLUtf8StringAgainstPointerList")
Interceptor.attach(RtlMatchLUtf8StringAgainstPointerList, {onLeave: function (args) {send("RtlMatchLUtf8StringAgainstPointerList");}});

var RtlMicrodomUpdateCreateAttributeNs = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateCreateAttributeNs")
Interceptor.attach(RtlMicrodomUpdateCreateAttributeNs, {onLeave: function (args) {send("RtlMicrodomUpdateCreateAttributeNs");}});

var RtlMicrodomUpdateCreateElementNs = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateCreateElementNs")
Interceptor.attach(RtlMicrodomUpdateCreateElementNs, {onLeave: function (args) {send("RtlMicrodomUpdateCreateElementNs");}});

var RtlMicrodomUpdateCreateTextual = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateCreateTextual")
Interceptor.attach(RtlMicrodomUpdateCreateTextual, {onLeave: function (args) {send("RtlMicrodomUpdateCreateTextual");}});

var RtlMicrodomUpdateGetCookieForExistingAttribute = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateGetCookieForExistingAttribute")
Interceptor.attach(RtlMicrodomUpdateGetCookieForExistingAttribute, {onLeave: function (args) {send("RtlMicrodomUpdateGetCookieForExistingAttribute");}});

var RtlMicrodomUpdateGetCookieForExistingNode = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateGetCookieForExistingNode")
Interceptor.attach(RtlMicrodomUpdateGetCookieForExistingNode, {onLeave: function (args) {send("RtlMicrodomUpdateGetCookieForExistingNode");}});

var RtlMicrodomUpdateInsertChild = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateInsertChild")
Interceptor.attach(RtlMicrodomUpdateInsertChild, {onLeave: function (args) {send("RtlMicrodomUpdateInsertChild");}});

var RtlMicrodomUpdateInsertMicrodomNodeEx = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateInsertMicrodomNodeEx")
Interceptor.attach(RtlMicrodomUpdateInsertMicrodomNodeEx, {onLeave: function (args) {send("RtlMicrodomUpdateInsertMicrodomNodeEx");}});

var RtlMicrodomUpdateRemoveChild = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateRemoveChild")
Interceptor.attach(RtlMicrodomUpdateRemoveChild, {onLeave: function (args) {send("RtlMicrodomUpdateRemoveChild");}});

var RtlMicrodomUpdateRemoveElement = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateRemoveElement")
Interceptor.attach(RtlMicrodomUpdateRemoveElement, {onLeave: function (args) {send("RtlMicrodomUpdateRemoveElement");}});

var RtlMicrodomUpdateSetNodeName = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateSetNodeName")
Interceptor.attach(RtlMicrodomUpdateSetNodeName, {onLeave: function (args) {send("RtlMicrodomUpdateSetNodeName");}});

var RtlMicrodomUpdateSetNodeTextContent = Module.findExportByName("ServicingCommon.dll", "RtlMicrodomUpdateSetNodeTextContent")
Interceptor.attach(RtlMicrodomUpdateSetNodeTextContent, {onLeave: function (args) {send("RtlMicrodomUpdateSetNodeTextContent");}});

var RtlMurmurHashLBlob = Module.findExportByName("ServicingCommon.dll", "RtlMurmurHashLBlob")
Interceptor.attach(RtlMurmurHashLBlob, {onLeave: function (args) {send("RtlMurmurHashLBlob");}});

var RtlNsDestroy = Module.findExportByName("ServicingCommon.dll", "RtlNsDestroy")
Interceptor.attach(RtlNsDestroy, {onLeave: function (args) {send("RtlNsDestroy");}});

var RtlNsInitialize = Module.findExportByName("ServicingCommon.dll", "RtlNsInitialize")
Interceptor.attach(RtlNsInitialize, {onLeave: function (args) {send("RtlNsInitialize");}});

var RtlPreInitializeSmartLBlobUcsWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlPreInitializeSmartLBlobUcsWritingContext")
Interceptor.attach(RtlPreInitializeSmartLBlobUcsWritingContext, {onLeave: function (args) {send("RtlPreInitializeSmartLBlobUcsWritingContext");}});

var RtlPreInitializeSmartLBlobWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlPreInitializeSmartLBlobWritingContext")
Interceptor.attach(RtlPreInitializeSmartLBlobWritingContext, {onLeave: function (args) {send("RtlPreInitializeSmartLBlobWritingContext");}});

var RtlReallocateLBlob = Module.findExportByName("ServicingCommon.dll", "RtlReallocateLBlob")
Interceptor.attach(RtlReallocateLBlob, {onLeave: function (args) {send("RtlReallocateLBlob");}});

var RtlReallocateLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlReallocateLUnicodeString")
Interceptor.attach(RtlReallocateLUnicodeString, {onLeave: function (args) {send("RtlReallocateLUnicodeString");}});

var RtlReallocateLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlReallocateLUtf8String")
Interceptor.attach(RtlReallocateLUtf8String, {onLeave: function (args) {send("RtlReallocateLUtf8String");}});

var RtlReallocateUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlReallocateUnicodeString")
Interceptor.attach(RtlReallocateUnicodeString, {onLeave: function (args) {send("RtlReallocateUnicodeString");}});

var RtlRegisterErrorOriginationCallback = Module.findExportByName("ServicingCommon.dll", "RtlRegisterErrorOriginationCallback")
Interceptor.attach(RtlRegisterErrorOriginationCallback, {onLeave: function (args) {send("RtlRegisterErrorOriginationCallback");}});

var RtlReportErrorOrigination = Module.findExportByName("ServicingCommon.dll", "RtlReportErrorOrigination")
Interceptor.attach(RtlReportErrorOrigination, {onLeave: function (args) {send("RtlReportErrorOrigination");}});

var RtlReportErrorPropagation = Module.findExportByName("ServicingCommon.dll", "RtlReportErrorPropagation")
Interceptor.attach(RtlReportErrorPropagation, {onLeave: function (args) {send("RtlReportErrorPropagation");}});

var RtlSmartMultiUcsEncoder_Utf16LE = Module.findExportByName("ServicingCommon.dll", "RtlSmartMultiUcsEncoder_Utf16LE")
Interceptor.attach(RtlSmartMultiUcsEncoder_Utf16LE, {onLeave: function (args) {send("RtlSmartMultiUcsEncoder_Utf16LE");}});

var RtlSmartMultiUcsEncoder_Utf8 = Module.findExportByName("ServicingCommon.dll", "RtlSmartMultiUcsEncoder_Utf8")
Interceptor.attach(RtlSmartMultiUcsEncoder_Utf8, {onLeave: function (args) {send("RtlSmartMultiUcsEncoder_Utf8");}});

var RtlSmartUcsEncoder_Utf16LE = Module.findExportByName("ServicingCommon.dll", "RtlSmartUcsEncoder_Utf16LE")
Interceptor.attach(RtlSmartUcsEncoder_Utf16LE, {onLeave: function (args) {send("RtlSmartUcsEncoder_Utf16LE");}});

var RtlSmartUcsEncoder_Utf8 = Module.findExportByName("ServicingCommon.dll", "RtlSmartUcsEncoder_Utf8")
Interceptor.attach(RtlSmartUcsEncoder_Utf8, {onLeave: function (args) {send("RtlSmartUcsEncoder_Utf8");}});

var RtlSplitEncodedLBlob = Module.findExportByName("ServicingCommon.dll", "RtlSplitEncodedLBlob")
Interceptor.attach(RtlSplitEncodedLBlob, {onLeave: function (args) {send("RtlSplitEncodedLBlob");}});

var RtlSplitLUnicodeString = Module.findExportByName("ServicingCommon.dll", "RtlSplitLUnicodeString")
Interceptor.attach(RtlSplitLUnicodeString, {onLeave: function (args) {send("RtlSplitLUnicodeString");}});

var RtlSplitLUtf8String = Module.findExportByName("ServicingCommon.dll", "RtlSplitLUtf8String")
Interceptor.attach(RtlSplitLUtf8String, {onLeave: function (args) {send("RtlSplitLUtf8String");}});

var RtlSplitWin32RegistryPathIntoRootAndLeaves = Module.findExportByName("ServicingCommon.dll", "RtlSplitWin32RegistryPathIntoRootAndLeaves")
Interceptor.attach(RtlSplitWin32RegistryPathIntoRootAndLeaves, {onLeave: function (args) {send("RtlSplitWin32RegistryPathIntoRootAndLeaves");}});

var RtlTranscodeLBlobs = Module.findExportByName("ServicingCommon.dll", "RtlTranscodeLBlobs")
Interceptor.attach(RtlTranscodeLBlobs, {onLeave: function (args) {send("RtlTranscodeLBlobs");}});

var RtlUpcaseUCSCharacter = Module.findExportByName("ServicingCommon.dll", "RtlUpcaseUCSCharacter")
Interceptor.attach(RtlUpcaseUCSCharacter, {onLeave: function (args) {send("RtlUpcaseUCSCharacter");}});

var RtlWriteDataIntoSmartLBlobWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlWriteDataIntoSmartLBlobWritingContext")
Interceptor.attach(RtlWriteDataIntoSmartLBlobWritingContext, {onLeave: function (args) {send("RtlWriteDataIntoSmartLBlobWritingContext");}});

var RtlWriteDecodedUcsDataIntoSmartLBlobUcsWritingContext = Module.findExportByName("ServicingCommon.dll", "RtlWriteDecodedUcsDataIntoSmartLBlobUcsWritingContext")
Interceptor.attach(RtlWriteDecodedUcsDataIntoSmartLBlobUcsWritingContext, {onLeave: function (args) {send("RtlWriteDecodedUcsDataIntoSmartLBlobUcsWritingContext");}});

var RtlWriteMicrodomXml = Module.findExportByName("ServicingCommon.dll", "RtlWriteMicrodomXml")
Interceptor.attach(RtlWriteMicrodomXml, {onLeave: function (args) {send("RtlWriteMicrodomXml");}});

var RtlXmlDefaultCompareStrings = Module.findExportByName("ServicingCommon.dll", "RtlXmlDefaultCompareStrings")
Interceptor.attach(RtlXmlDefaultCompareStrings, {onLeave: function (args) {send("RtlXmlDefaultCompareStrings");}});

var RtlXmlDestroyNextLogicalThing = Module.findExportByName("ServicingCommon.dll", "RtlXmlDestroyNextLogicalThing")
Interceptor.attach(RtlXmlDestroyNextLogicalThing, {onLeave: function (args) {send("RtlXmlDestroyNextLogicalThing");}});

var RtlXmlDetermineStreamEncoding = Module.findExportByName("ServicingCommon.dll", "RtlXmlDetermineStreamEncoding")
Interceptor.attach(RtlXmlDetermineStreamEncoding, {onLeave: function (args) {send("RtlXmlDetermineStreamEncoding");}});

var RtlXmlExtentToString = Module.findExportByName("ServicingCommon.dll", "RtlXmlExtentToString")
Interceptor.attach(RtlXmlExtentToString, {onLeave: function (args) {send("RtlXmlExtentToString");}});

var RtlXmlInitializeNextLogicalThing = Module.findExportByName("ServicingCommon.dll", "RtlXmlInitializeNextLogicalThing")
Interceptor.attach(RtlXmlInitializeNextLogicalThing, {onLeave: function (args) {send("RtlXmlInitializeNextLogicalThing");}});

var RtlXmlInitializeTokenization = Module.findExportByName("ServicingCommon.dll", "RtlXmlInitializeTokenization")
Interceptor.attach(RtlXmlInitializeTokenization, {onLeave: function (args) {send("RtlXmlInitializeTokenization");}});

var RtlXmlNextLogicalThing = Module.findExportByName("ServicingCommon.dll", "RtlXmlNextLogicalThing")
Interceptor.attach(RtlXmlNextLogicalThing, {onLeave: function (args) {send("RtlXmlNextLogicalThing");}});

var RtlXmlNextToken = Module.findExportByName("ServicingCommon.dll", "RtlXmlNextToken")
Interceptor.attach(RtlXmlNextToken, {onLeave: function (args) {send("RtlXmlNextToken");}});

var SczAlloc = Module.findExportByName("ServicingCommon.dll", "SczAlloc")
Interceptor.attach(SczAlloc, {onLeave: function (args) {send("SczAlloc");}});

var SczAllocConcat2Sz = Module.findExportByName("ServicingCommon.dll", "SczAllocConcat2Sz")
Interceptor.attach(SczAllocConcat2Sz, {onLeave: function (args) {send("SczAllocConcat2Sz");}});

var SczAllocConcatSz = Module.findExportByName("ServicingCommon.dll", "SczAllocConcatSz")
Interceptor.attach(SczAllocConcatSz, {onLeave: function (args) {send("SczAllocConcatSz");}});

var SczAllocFormatted = Module.findExportByName("ServicingCommon.dll", "SczAllocFormatted")
Interceptor.attach(SczAllocFormatted, {onLeave: function (args) {send("SczAllocFormatted");}});

var SczAllocFromAnsiSz = Module.findExportByName("ServicingCommon.dll", "SczAllocFromAnsiSz")
Interceptor.attach(SczAllocFromAnsiSz, {onLeave: function (args) {send("SczAllocFromAnsiSz");}});

var SczAllocFromSz = Module.findExportByName("ServicingCommon.dll", "SczAllocFromSz")
Interceptor.attach(SczAllocFromSz, {onLeave: function (args) {send("SczAllocFromSz");}});

var SczAllocPrefixSz = Module.findExportByName("ServicingCommon.dll", "SczAllocPrefixSz")
Interceptor.attach(SczAllocPrefixSz, {onLeave: function (args) {send("SczAllocPrefixSz");}});

var SczEnsureBackslashTerminated = Module.findExportByName("ServicingCommon.dll", "SczEnsureBackslashTerminated")
Interceptor.attach(SczEnsureBackslashTerminated, {onLeave: function (args) {send("SczEnsureBackslashTerminated");}});

var SczFree = Module.findExportByName("ServicingCommon.dll", "SczFree")
Interceptor.attach(SczFree, {onLeave: function (args) {send("SczFree");}});

var SetCustomLogging = Module.findExportByName("ServicingCommon.dll", "SetCustomLogging")
Interceptor.attach(SetCustomLogging, {onLeave: function (args) {send("SetCustomLogging");}});

var SfpCreateOfflineRepairObject = Module.findExportByName("ServicingCommon.dll", "SfpCreateOfflineRepairObject")
Interceptor.attach(SfpCreateOfflineRepairObject, {onLeave: function (args) {send("SfpCreateOfflineRepairObject");}});

var SfpUnload = Module.findExportByName("ServicingCommon.dll", "SfpUnload")
Interceptor.attach(SfpUnload, {onLeave: function (args) {send("SfpUnload");}});

var StringsAreEqualCaseInsensitive = Module.findExportByName("ServicingCommon.dll", "StringsAreEqualCaseInsensitive")
Interceptor.attach(StringsAreEqualCaseInsensitive, {onLeave: function (args) {send("StringsAreEqualCaseInsensitive");}});

var SzEnsureBackslashTerminated = Module.findExportByName("ServicingCommon.dll", "SzEnsureBackslashTerminated")
Interceptor.attach(SzEnsureBackslashTerminated, {onLeave: function (args) {send("SzEnsureBackslashTerminated");}});

var UninstallWindows = Module.findExportByName("ServicingCommon.dll", "UninstallWindows")
Interceptor.attach(UninstallWindows, {onLeave: function (args) {send("UninstallWindows");}});

