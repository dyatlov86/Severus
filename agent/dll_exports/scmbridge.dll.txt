var ScmDeleteAllSimulatedPmemDisks = Module.findExportByName("scmbridge.dll", "ScmDeleteAllSimulatedPmemDisks")
Interceptor.attach(ScmDeleteAllSimulatedPmemDisks, {onLeave: function (args) {send("ScmDeleteAllSimulatedPmemDisks");}});

var ScmDeletePmemDisk = Module.findExportByName("scmbridge.dll", "ScmDeletePmemDisk")
Interceptor.attach(ScmDeletePmemDisk, {onLeave: function (args) {send("ScmDeletePmemDisk");}});

var ScmDeletePmemDm = Module.findExportByName("scmbridge.dll", "ScmDeletePmemDm")
Interceptor.attach(ScmDeletePmemDm, {onLeave: function (args) {send("ScmDeletePmemDm");}});

var ScmGetDiskNumberFromDiskGuid = Module.findExportByName("scmbridge.dll", "ScmGetDiskNumberFromDiskGuid")
Interceptor.attach(ScmGetDiskNumberFromDiskGuid, {onLeave: function (args) {send("ScmGetDiskNumberFromDiskGuid");}});

var ScmGetLogicalPmemDiskByDiskNumber = Module.findExportByName("scmbridge.dll", "ScmGetLogicalPmemDiskByDiskNumber")
Interceptor.attach(ScmGetLogicalPmemDiskByDiskNumber, {onLeave: function (args) {send("ScmGetLogicalPmemDiskByDiskNumber");}});

var ScmGetLogicalPmemDisks = Module.findExportByName("scmbridge.dll", "ScmGetLogicalPmemDisks")
Interceptor.attach(ScmGetLogicalPmemDisks, {onLeave: function (args) {send("ScmGetLogicalPmemDisks");}});

var ScmGetLogicalPmemDmByDeviceNumber = Module.findExportByName("scmbridge.dll", "ScmGetLogicalPmemDmByDeviceNumber")
Interceptor.attach(ScmGetLogicalPmemDmByDeviceNumber, {onLeave: function (args) {send("ScmGetLogicalPmemDmByDeviceNumber");}});

var ScmGetLogicalPmemDms = Module.findExportByName("scmbridge.dll", "ScmGetLogicalPmemDms")
Interceptor.attach(ScmGetLogicalPmemDms, {onLeave: function (args) {send("ScmGetLogicalPmemDms");}});

var ScmGetPhysicalNvdimmByNfitHandle = Module.findExportByName("scmbridge.dll", "ScmGetPhysicalNvdimmByNfitHandle")
Interceptor.attach(ScmGetPhysicalNvdimmByNfitHandle, {onLeave: function (args) {send("ScmGetPhysicalNvdimmByNfitHandle");}});

var ScmGetPhysicalNvdimms = Module.findExportByName("scmbridge.dll", "ScmGetPhysicalNvdimms")
Interceptor.attach(ScmGetPhysicalNvdimms, {onLeave: function (args) {send("ScmGetPhysicalNvdimms");}});

var ScmGetUnusedPmemRegionById = Module.findExportByName("scmbridge.dll", "ScmGetUnusedPmemRegionById")
Interceptor.attach(ScmGetUnusedPmemRegionById, {onLeave: function (args) {send("ScmGetUnusedPmemRegionById");}});

var ScmGetUnusedPmemRegions = Module.findExportByName("scmbridge.dll", "ScmGetUnusedPmemRegions")
Interceptor.attach(ScmGetUnusedPmemRegions, {onLeave: function (args) {send("ScmGetUnusedPmemRegions");}});

var ScmInitializePmemPhysicalDevice = Module.findExportByName("scmbridge.dll", "ScmInitializePmemPhysicalDevice")
Interceptor.attach(ScmInitializePmemPhysicalDevice, {onLeave: function (args) {send("ScmInitializePmemPhysicalDevice");}});

var ScmNewPmemDiskFromUnusedRegion = Module.findExportByName("scmbridge.dll", "ScmNewPmemDiskFromUnusedRegion")
Interceptor.attach(ScmNewPmemDiskFromUnusedRegion, {onLeave: function (args) {send("ScmNewPmemDiskFromUnusedRegion");}});

var ScmNewPmemDmFromUnusedRegion = Module.findExportByName("scmbridge.dll", "ScmNewPmemDmFromUnusedRegion")
Interceptor.attach(ScmNewPmemDmFromUnusedRegion, {onLeave: function (args) {send("ScmNewPmemDmFromUnusedRegion");}});

var ScmNewSimulatedPmemDisk = Module.findExportByName("scmbridge.dll", "ScmNewSimulatedPmemDisk")
Interceptor.attach(ScmNewSimulatedPmemDisk, {onLeave: function (args) {send("ScmNewSimulatedPmemDisk");}});

var ScmRebuildStacks = Module.findExportByName("scmbridge.dll", "ScmRebuildStacks")
Interceptor.attach(ScmRebuildStacks, {onLeave: function (args) {send("ScmRebuildStacks");}});

var ScmRefreshNamespace = Module.findExportByName("scmbridge.dll", "ScmRefreshNamespace")
Interceptor.attach(ScmRefreshNamespace, {onLeave: function (args) {send("ScmRefreshNamespace");}});

var ScmSetPmemDmState = Module.findExportByName("scmbridge.dll", "ScmSetPmemDmState")
Interceptor.attach(ScmSetPmemDmState, {onLeave: function (args) {send("ScmSetPmemDmState");}});

