var CDPAccountFromWebAccount = Module.findExportByName("cdp.dll", "CDPAccountFromWebAccount")
Interceptor.attach(CDPAccountFromWebAccount, {onLeave: function (args) {send("CDPAccountFromWebAccount");}});

var CDPAcquireNetworkingInternal = Module.findExportByName("cdp.dll", "CDPAcquireNetworkingInternal")
Interceptor.attach(CDPAcquireNetworkingInternal, {onLeave: function (args) {send("CDPAcquireNetworkingInternal");}});

var CDPCreateAFSRegistrationClientInternal = Module.findExportByName("cdp.dll", "CDPCreateAFSRegistrationClientInternal")
Interceptor.attach(CDPCreateAFSRegistrationClientInternal, {onLeave: function (args) {send("CDPCreateAFSRegistrationClientInternal");}});

var CDPCreateAFSUserSettingsInternal = Module.findExportByName("cdp.dll", "CDPCreateAFSUserSettingsInternal")
Interceptor.attach(CDPCreateAFSUserSettingsInternal, {onLeave: function (args) {send("CDPCreateAFSUserSettingsInternal");}});

var CDPCreateAccountInternalForUser = Module.findExportByName("cdp.dll", "CDPCreateAccountInternalForUser")
Interceptor.attach(CDPCreateAccountInternalForUser, {onLeave: function (args) {send("CDPCreateAccountInternalForUser");}});

var CDPCreateAccountInternalWithStableUserId = Module.findExportByName("cdp.dll", "CDPCreateAccountInternalWithStableUserId")
Interceptor.attach(CDPCreateAccountInternalWithStableUserId, {onLeave: function (args) {send("CDPCreateAccountInternalWithStableUserId");}});

var CDPCreateAccountProviderInternal = Module.findExportByName("cdp.dll", "CDPCreateAccountProviderInternal")
Interceptor.attach(CDPCreateAccountProviderInternal, {onLeave: function (args) {send("CDPCreateAccountProviderInternal");}});

var CDPCreateActivity = Module.findExportByName("cdp.dll", "CDPCreateActivity")
Interceptor.attach(CDPCreateActivity, {onLeave: function (args) {send("CDPCreateActivity");}});

var CDPCreateActivityAsset = Module.findExportByName("cdp.dll", "CDPCreateActivityAsset")
Interceptor.attach(CDPCreateActivityAsset, {onLeave: function (args) {send("CDPCreateActivityAsset");}});

var CDPCreateActivityInternal = Module.findExportByName("cdp.dll", "CDPCreateActivityInternal")
Interceptor.attach(CDPCreateActivityInternal, {onLeave: function (args) {send("CDPCreateActivityInternal");}});

var CDPCreateActivityStoreInfoInternal = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreInfoInternal")
Interceptor.attach(CDPCreateActivityStoreInfoInternal, {onLeave: function (args) {send("CDPCreateActivityStoreInfoInternal");}});

var CDPCreateActivityStoreInfoWatcher = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreInfoWatcher")
Interceptor.attach(CDPCreateActivityStoreInfoWatcher, {onLeave: function (args) {send("CDPCreateActivityStoreInfoWatcher");}});

var CDPCreateActivityStoreInfoWatcherForUser = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreInfoWatcherForUser")
Interceptor.attach(CDPCreateActivityStoreInfoWatcherForUser, {onLeave: function (args) {send("CDPCreateActivityStoreInfoWatcherForUser");}});

var CDPCreateActivityStoreInfoWatcherInternal = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreInfoWatcherInternal")
Interceptor.attach(CDPCreateActivityStoreInfoWatcherInternal, {onLeave: function (args) {send("CDPCreateActivityStoreInfoWatcherInternal");}});

var CDPCreateActivityStoreReader = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreReader")
Interceptor.attach(CDPCreateActivityStoreReader, {onLeave: function (args) {send("CDPCreateActivityStoreReader");}});

var CDPCreateActivityStoreReaderForUser = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreReaderForUser")
Interceptor.attach(CDPCreateActivityStoreReaderForUser, {onLeave: function (args) {send("CDPCreateActivityStoreReaderForUser");}});

var CDPCreateActivityStoreReaderInternal = Module.findExportByName("cdp.dll", "CDPCreateActivityStoreReaderInternal")
Interceptor.attach(CDPCreateActivityStoreReaderInternal, {onLeave: function (args) {send("CDPCreateActivityStoreReaderInternal");}});

var CDPCreateAllDevicesQuery = Module.findExportByName("cdp.dll", "CDPCreateAllDevicesQuery")
Interceptor.attach(CDPCreateAllDevicesQuery, {onLeave: function (args) {send("CDPCreateAllDevicesQuery");}});

var CDPCreateAllDevicesQueryForUser = Module.findExportByName("cdp.dll", "CDPCreateAllDevicesQueryForUser")
Interceptor.attach(CDPCreateAllDevicesQueryForUser, {onLeave: function (args) {send("CDPCreateAllDevicesQueryForUser");}});

var CDPCreateAnonymousAccount = Module.findExportByName("cdp.dll", "CDPCreateAnonymousAccount")
Interceptor.attach(CDPCreateAnonymousAccount, {onLeave: function (args) {send("CDPCreateAnonymousAccount");}});

var CDPCreateAnonymousAccountInternal = Module.findExportByName("cdp.dll", "CDPCreateAnonymousAccountInternal")
Interceptor.attach(CDPCreateAnonymousAccountInternal, {onLeave: function (args) {send("CDPCreateAnonymousAccountInternal");}});

var CDPCreateAppControlClient = Module.findExportByName("cdp.dll", "CDPCreateAppControlClient")
Interceptor.attach(CDPCreateAppControlClient, {onLeave: function (args) {send("CDPCreateAppControlClient");}});

var CDPCreateAppControlClientInternal = Module.findExportByName("cdp.dll", "CDPCreateAppControlClientInternal")
Interceptor.attach(CDPCreateAppControlClientInternal, {onLeave: function (args) {send("CDPCreateAppControlClientInternal");}});

var CDPCreateAppId = Module.findExportByName("cdp.dll", "CDPCreateAppId")
Interceptor.attach(CDPCreateAppId, {onLeave: function (args) {send("CDPCreateAppId");}});

var CDPCreateAppRegistrationManager = Module.findExportByName("cdp.dll", "CDPCreateAppRegistrationManager")
Interceptor.attach(CDPCreateAppRegistrationManager, {onLeave: function (args) {send("CDPCreateAppRegistrationManager");}});

var CDPCreateAppRegistrationManagerForUser = Module.findExportByName("cdp.dll", "CDPCreateAppRegistrationManagerForUser")
Interceptor.attach(CDPCreateAppRegistrationManagerForUser, {onLeave: function (args) {send("CDPCreateAppRegistrationManagerForUser");}});

var CDPCreateAppRegistrationManagerInternal = Module.findExportByName("cdp.dll", "CDPCreateAppRegistrationManagerInternal")
Interceptor.attach(CDPCreateAppRegistrationManagerInternal, {onLeave: function (args) {send("CDPCreateAppRegistrationManagerInternal");}});

var CDPCreateAzureActiveDirectoryAccount = Module.findExportByName("cdp.dll", "CDPCreateAzureActiveDirectoryAccount")
Interceptor.attach(CDPCreateAzureActiveDirectoryAccount, {onLeave: function (args) {send("CDPCreateAzureActiveDirectoryAccount");}});

var CDPCreateBeaconControl = Module.findExportByName("cdp.dll", "CDPCreateBeaconControl")
Interceptor.attach(CDPCreateBeaconControl, {onLeave: function (args) {send("CDPCreateBeaconControl");}});

var CDPCreateBeaconControlInternal = Module.findExportByName("cdp.dll", "CDPCreateBeaconControlInternal")
Interceptor.attach(CDPCreateBeaconControlInternal, {onLeave: function (args) {send("CDPCreateBeaconControlInternal");}});

var CDPCreateBinaryClient = Module.findExportByName("cdp.dll", "CDPCreateBinaryClient")
Interceptor.attach(CDPCreateBinaryClient, {onLeave: function (args) {send("CDPCreateBinaryClient");}});

var CDPCreateBinaryClientInternal = Module.findExportByName("cdp.dll", "CDPCreateBinaryClientInternal")
Interceptor.attach(CDPCreateBinaryClientInternal, {onLeave: function (args) {send("CDPCreateBinaryClientInternal");}});

var CDPCreateBinaryHost = Module.findExportByName("cdp.dll", "CDPCreateBinaryHost")
Interceptor.attach(CDPCreateBinaryHost, {onLeave: function (args) {send("CDPCreateBinaryHost");}});

var CDPCreateBinaryHostInternal = Module.findExportByName("cdp.dll", "CDPCreateBinaryHostInternal")
Interceptor.attach(CDPCreateBinaryHostInternal, {onLeave: function (args) {send("CDPCreateBinaryHostInternal");}});

var CDPCreateBinaryHostWithSettings = Module.findExportByName("cdp.dll", "CDPCreateBinaryHostWithSettings")
Interceptor.attach(CDPCreateBinaryHostWithSettings, {onLeave: function (args) {send("CDPCreateBinaryHostWithSettings");}});

var CDPCreateCallbackNotifierInternal = Module.findExportByName("cdp.dll", "CDPCreateCallbackNotifierInternal")
Interceptor.attach(CDPCreateCallbackNotifierInternal, {onLeave: function (args) {send("CDPCreateCallbackNotifierInternal");}});

var CDPCreateCloudNotification = Module.findExportByName("cdp.dll", "CDPCreateCloudNotification")
Interceptor.attach(CDPCreateCloudNotification, {onLeave: function (args) {send("CDPCreateCloudNotification");}});

var CDPCreateComObjectInternal = Module.findExportByName("cdp.dll", "CDPCreateComObjectInternal")
Interceptor.attach(CDPCreateComObjectInternal, {onLeave: function (args) {send("CDPCreateComObjectInternal");}});

var CDPCreateCrossPlatformAppId = Module.findExportByName("cdp.dll", "CDPCreateCrossPlatformAppId")
Interceptor.attach(CDPCreateCrossPlatformAppId, {onLeave: function (args) {send("CDPCreateCrossPlatformAppId");}});

var CDPCreateCrossPlatformAppIdFromAppId = Module.findExportByName("cdp.dll", "CDPCreateCrossPlatformAppIdFromAppId")
Interceptor.attach(CDPCreateCrossPlatformAppIdFromAppId, {onLeave: function (args) {send("CDPCreateCrossPlatformAppIdFromAppId");}});

var CDPCreateCurrentCrossPlatformAppId = Module.findExportByName("cdp.dll", "CDPCreateCurrentCrossPlatformAppId")
Interceptor.attach(CDPCreateCurrentCrossPlatformAppId, {onLeave: function (args) {send("CDPCreateCurrentCrossPlatformAppId");}});

var CDPCreateDedupedDevice = Module.findExportByName("cdp.dll", "CDPCreateDedupedDevice")
Interceptor.attach(CDPCreateDedupedDevice, {onLeave: function (args) {send("CDPCreateDedupedDevice");}});

var CDPCreateDedupedDeviceQuery = Module.findExportByName("cdp.dll", "CDPCreateDedupedDeviceQuery")
Interceptor.attach(CDPCreateDedupedDeviceQuery, {onLeave: function (args) {send("CDPCreateDedupedDeviceQuery");}});

var CDPCreateDedupedDeviceQueryForUser = Module.findExportByName("cdp.dll", "CDPCreateDedupedDeviceQueryForUser")
Interceptor.attach(CDPCreateDedupedDeviceQueryForUser, {onLeave: function (args) {send("CDPCreateDedupedDeviceQueryForUser");}});

var CDPCreateDedupedDeviceQueryInternal = Module.findExportByName("cdp.dll", "CDPCreateDedupedDeviceQueryInternal")
Interceptor.attach(CDPCreateDedupedDeviceQueryInternal, {onLeave: function (args) {send("CDPCreateDedupedDeviceQueryInternal");}});

var CDPCreateDedupedDeviceQueryParameters = Module.findExportByName("cdp.dll", "CDPCreateDedupedDeviceQueryParameters")
Interceptor.attach(CDPCreateDedupedDeviceQueryParameters, {onLeave: function (args) {send("CDPCreateDedupedDeviceQueryParameters");}});

var CDPCreateDeviceInternal = Module.findExportByName("cdp.dll", "CDPCreateDeviceInternal")
Interceptor.attach(CDPCreateDeviceInternal, {onLeave: function (args) {send("CDPCreateDeviceInternal");}});

var CDPCreateDeviceQuery = Module.findExportByName("cdp.dll", "CDPCreateDeviceQuery")
Interceptor.attach(CDPCreateDeviceQuery, {onLeave: function (args) {send("CDPCreateDeviceQuery");}});

var CDPCreateDeviceQueryForSessionInternal = Module.findExportByName("cdp.dll", "CDPCreateDeviceQueryForSessionInternal")
Interceptor.attach(CDPCreateDeviceQueryForSessionInternal, {onLeave: function (args) {send("CDPCreateDeviceQueryForSessionInternal");}});

var CDPCreateDeviceQueryForUser = Module.findExportByName("cdp.dll", "CDPCreateDeviceQueryForUser")
Interceptor.attach(CDPCreateDeviceQueryForUser, {onLeave: function (args) {send("CDPCreateDeviceQueryForUser");}});

var CDPCreateDeviceQueryInternal = Module.findExportByName("cdp.dll", "CDPCreateDeviceQueryInternal")
Interceptor.attach(CDPCreateDeviceQueryInternal, {onLeave: function (args) {send("CDPCreateDeviceQueryInternal");}});

var CDPCreateDeviceQueryWithIdentity = Module.findExportByName("cdp.dll", "CDPCreateDeviceQueryWithIdentity")
Interceptor.attach(CDPCreateDeviceQueryWithIdentity, {onLeave: function (args) {send("CDPCreateDeviceQueryWithIdentity");}});

var CDPCreateDirectNotificationHost = Module.findExportByName("cdp.dll", "CDPCreateDirectNotificationHost")
Interceptor.attach(CDPCreateDirectNotificationHost, {onLeave: function (args) {send("CDPCreateDirectNotificationHost");}});

var CDPCreateEmptyAccountSettings = Module.findExportByName("cdp.dll", "CDPCreateEmptyAccountSettings")
Interceptor.attach(CDPCreateEmptyAccountSettings, {onLeave: function (args) {send("CDPCreateEmptyAccountSettings");}});

var CDPCreateEnvironmentManagerInternal = Module.findExportByName("cdp.dll", "CDPCreateEnvironmentManagerInternal")
Interceptor.attach(CDPCreateEnvironmentManagerInternal, {onLeave: function (args) {send("CDPCreateEnvironmentManagerInternal");}});

var CDPCreateHttpRequestInternal = Module.findExportByName("cdp.dll", "CDPCreateHttpRequestInternal")
Interceptor.attach(CDPCreateHttpRequestInternal, {onLeave: function (args) {send("CDPCreateHttpRequestInternal");}});

var CDPCreateLoggedOnUserChangedNotifier = Module.findExportByName("cdp.dll", "CDPCreateLoggedOnUserChangedNotifier")
Interceptor.attach(CDPCreateLoggedOnUserChangedNotifier, {onLeave: function (args) {send("CDPCreateLoggedOnUserChangedNotifier");}});

var CDPCreateLoggedOnUserFamilyChangedNotifier = Module.findExportByName("cdp.dll", "CDPCreateLoggedOnUserFamilyChangedNotifier")
Interceptor.attach(CDPCreateLoggedOnUserFamilyChangedNotifier, {onLeave: function (args) {send("CDPCreateLoggedOnUserFamilyChangedNotifier");}});

var CDPCreateMessagingHost = Module.findExportByName("cdp.dll", "CDPCreateMessagingHost")
Interceptor.attach(CDPCreateMessagingHost, {onLeave: function (args) {send("CDPCreateMessagingHost");}});

var CDPCreateMessagingHostInternal = Module.findExportByName("cdp.dll", "CDPCreateMessagingHostInternal")
Interceptor.attach(CDPCreateMessagingHostInternal, {onLeave: function (args) {send("CDPCreateMessagingHostInternal");}});

var CDPCreateMicrosoftAccount = Module.findExportByName("cdp.dll", "CDPCreateMicrosoftAccount")
Interceptor.attach(CDPCreateMicrosoftAccount, {onLeave: function (args) {send("CDPCreateMicrosoftAccount");}});

var CDPCreateOrGetDdsRegistrationUserObjectInternal = Module.findExportByName("cdp.dll", "CDPCreateOrGetDdsRegistrationUserObjectInternal")
Interceptor.attach(CDPCreateOrGetDdsRegistrationUserObjectInternal, {onLeave: function (args) {send("CDPCreateOrGetDdsRegistrationUserObjectInternal");}});

var CDPCreatePlatformSettingsInternal = Module.findExportByName("cdp.dll", "CDPCreatePlatformSettingsInternal")
Interceptor.attach(CDPCreatePlatformSettingsInternal, {onLeave: function (args) {send("CDPCreatePlatformSettingsInternal");}});

var CDPCreateRemoteUserInternal = Module.findExportByName("cdp.dll", "CDPCreateRemoteUserInternal")
Interceptor.attach(CDPCreateRemoteUserInternal, {onLeave: function (args) {send("CDPCreateRemoteUserInternal");}});

var CDPCreateResource = Module.findExportByName("cdp.dll", "CDPCreateResource")
Interceptor.attach(CDPCreateResource, {onLeave: function (args) {send("CDPCreateResource");}});

var CDPCreateResourceCollection = Module.findExportByName("cdp.dll", "CDPCreateResourceCollection")
Interceptor.attach(CDPCreateResourceCollection, {onLeave: function (args) {send("CDPCreateResourceCollection");}});

var CDPCreateSettingsInteropInternal = Module.findExportByName("cdp.dll", "CDPCreateSettingsInteropInternal")
Interceptor.attach(CDPCreateSettingsInteropInternal, {onLeave: function (args) {send("CDPCreateSettingsInteropInternal");}});

var CDPCreateTask = Module.findExportByName("cdp.dll", "CDPCreateTask")
Interceptor.attach(CDPCreateTask, {onLeave: function (args) {send("CDPCreateTask");}});

var CDPCreateTaskInternal = Module.findExportByName("cdp.dll", "CDPCreateTaskInternal")
Interceptor.attach(CDPCreateTaskInternal, {onLeave: function (args) {send("CDPCreateTaskInternal");}});

var CDPCreateTelemetryTask = Module.findExportByName("cdp.dll", "CDPCreateTelemetryTask")
Interceptor.attach(CDPCreateTelemetryTask, {onLeave: function (args) {send("CDPCreateTelemetryTask");}});

var CDPCreateTelemetryTaskInternal = Module.findExportByName("cdp.dll", "CDPCreateTelemetryTaskInternal")
Interceptor.attach(CDPCreateTelemetryTaskInternal, {onLeave: function (args) {send("CDPCreateTelemetryTaskInternal");}});

var CDPCreateTestActivityAsset = Module.findExportByName("cdp.dll", "CDPCreateTestActivityAsset")
Interceptor.attach(CDPCreateTestActivityAsset, {onLeave: function (args) {send("CDPCreateTestActivityAsset");}});

var CDPCreateUserInternal = Module.findExportByName("cdp.dll", "CDPCreateUserInternal")
Interceptor.attach(CDPCreateUserInternal, {onLeave: function (args) {send("CDPCreateUserInternal");}});

var CDPCreateUserNotificationClientInternal = Module.findExportByName("cdp.dll", "CDPCreateUserNotificationClientInternal")
Interceptor.attach(CDPCreateUserNotificationClientInternal, {onLeave: function (args) {send("CDPCreateUserNotificationClientInternal");}});

var CDPCreateUserServiceNotificationClient = Module.findExportByName("cdp.dll", "CDPCreateUserServiceNotificationClient")
Interceptor.attach(CDPCreateUserServiceNotificationClient, {onLeave: function (args) {send("CDPCreateUserServiceNotificationClient");}});

var CDPCreateUserServiceNotificationClientForUser = Module.findExportByName("cdp.dll", "CDPCreateUserServiceNotificationClientForUser")
Interceptor.attach(CDPCreateUserServiceNotificationClientForUser, {onLeave: function (args) {send("CDPCreateUserServiceNotificationClientForUser");}});

var CDPCreateUuid = Module.findExportByName("cdp.dll", "CDPCreateUuid")
Interceptor.attach(CDPCreateUuid, {onLeave: function (args) {send("CDPCreateUuid");}});

var CDPFixAccounts = Module.findExportByName("cdp.dll", "CDPFixAccounts")
Interceptor.attach(CDPFixAccounts, {onLeave: function (args) {send("CDPFixAccounts");}});

var CDPGetAFCInitializer = Module.findExportByName("cdp.dll", "CDPGetAFCInitializer")
Interceptor.attach(CDPGetAFCInitializer, {onLeave: function (args) {send("CDPGetAFCInitializer");}});

var CDPGetAccountProviderInternal = Module.findExportByName("cdp.dll", "CDPGetAccountProviderInternal")
Interceptor.attach(CDPGetAccountProviderInternal, {onLeave: function (args) {send("CDPGetAccountProviderInternal");}});

var CDPGetAccountsNeedAttention = Module.findExportByName("cdp.dll", "CDPGetAccountsNeedAttention")
Interceptor.attach(CDPGetAccountsNeedAttention, {onLeave: function (args) {send("CDPGetAccountsNeedAttention");}});

var CDPGetAccountsSettings = Module.findExportByName("cdp.dll", "CDPGetAccountsSettings")
Interceptor.attach(CDPGetAccountsSettings, {onLeave: function (args) {send("CDPGetAccountsSettings");}});

var CDPGetActivityStore = Module.findExportByName("cdp.dll", "CDPGetActivityStore")
Interceptor.attach(CDPGetActivityStore, {onLeave: function (args) {send("CDPGetActivityStore");}});

var CDPGetActivityStoreForAccount = Module.findExportByName("cdp.dll", "CDPGetActivityStoreForAccount")
Interceptor.attach(CDPGetActivityStoreForAccount, {onLeave: function (args) {send("CDPGetActivityStoreForAccount");}});

var CDPGetActivityStoreForAccountInternal = Module.findExportByName("cdp.dll", "CDPGetActivityStoreForAccountInternal")
Interceptor.attach(CDPGetActivityStoreForAccountInternal, {onLeave: function (args) {send("CDPGetActivityStoreForAccountInternal");}});

var CDPGetActivityStoreForStoreInfo = Module.findExportByName("cdp.dll", "CDPGetActivityStoreForStoreInfo")
Interceptor.attach(CDPGetActivityStoreForStoreInfo, {onLeave: function (args) {send("CDPGetActivityStoreForStoreInfo");}});

var CDPGetActivityStoreForStoreInfoAndUser = Module.findExportByName("cdp.dll", "CDPGetActivityStoreForStoreInfoAndUser")
Interceptor.attach(CDPGetActivityStoreForStoreInfoAndUser, {onLeave: function (args) {send("CDPGetActivityStoreForStoreInfoAndUser");}});

var CDPGetActivityStoreForStoreInfoInternal = Module.findExportByName("cdp.dll", "CDPGetActivityStoreForStoreInfoInternal")
Interceptor.attach(CDPGetActivityStoreForStoreInfoInternal, {onLeave: function (args) {send("CDPGetActivityStoreForStoreInfoInternal");}});

var CDPGetActivityStoreForUser = Module.findExportByName("cdp.dll", "CDPGetActivityStoreForUser")
Interceptor.attach(CDPGetActivityStoreForUser, {onLeave: function (args) {send("CDPGetActivityStoreForUser");}});

var CDPGetActivityStoreInternal = Module.findExportByName("cdp.dll", "CDPGetActivityStoreInternal")
Interceptor.attach(CDPGetActivityStoreInternal, {onLeave: function (args) {send("CDPGetActivityStoreInternal");}});

var CDPGetCloudNotificationProviderInternal = Module.findExportByName("cdp.dll", "CDPGetCloudNotificationProviderInternal")
Interceptor.attach(CDPGetCloudNotificationProviderInternal, {onLeave: function (args) {send("CDPGetCloudNotificationProviderInternal");}});

var CDPGetCoreInitializer = Module.findExportByName("cdp.dll", "CDPGetCoreInitializer")
Interceptor.attach(CDPGetCoreInitializer, {onLeave: function (args) {send("CDPGetCoreInitializer");}});

var CDPGetDeviceCache = Module.findExportByName("cdp.dll", "CDPGetDeviceCache")
Interceptor.attach(CDPGetDeviceCache, {onLeave: function (args) {send("CDPGetDeviceCache");}});

var CDPGetDeviceCacheInternal = Module.findExportByName("cdp.dll", "CDPGetDeviceCacheInternal")
Interceptor.attach(CDPGetDeviceCacheInternal, {onLeave: function (args) {send("CDPGetDeviceCacheInternal");}});

var CDPGetHost = Module.findExportByName("cdp.dll", "CDPGetHost")
Interceptor.attach(CDPGetHost, {onLeave: function (args) {send("CDPGetHost");}});

var CDPGetInProcActivityStoreForUserToken = Module.findExportByName("cdp.dll", "CDPGetInProcActivityStoreForUserToken")
Interceptor.attach(CDPGetInProcActivityStoreForUserToken, {onLeave: function (args) {send("CDPGetInProcActivityStoreForUserToken");}});

var CDPGetLogger = Module.findExportByName("cdp.dll", "CDPGetLogger")
Interceptor.attach(CDPGetLogger, {onLeave: function (args) {send("CDPGetLogger");}});

var CDPGetNearShareAuthorizationPolicyOfInteractiveUser = Module.findExportByName("cdp.dll", "CDPGetNearShareAuthorizationPolicyOfInteractiveUser")
Interceptor.attach(CDPGetNearShareAuthorizationPolicyOfInteractiveUser, {onLeave: function (args) {send("CDPGetNearShareAuthorizationPolicyOfInteractiveUser");}});

var CDPGetRelayInitializer = Module.findExportByName("cdp.dll", "CDPGetRelayInitializer")
Interceptor.attach(CDPGetRelayInitializer, {onLeave: function (args) {send("CDPGetRelayInitializer");}});

var CDPGetResourceHandler = Module.findExportByName("cdp.dll", "CDPGetResourceHandler")
Interceptor.attach(CDPGetResourceHandler, {onLeave: function (args) {send("CDPGetResourceHandler");}});

var CDPGetResourceManager = Module.findExportByName("cdp.dll", "CDPGetResourceManager")
Interceptor.attach(CDPGetResourceManager, {onLeave: function (args) {send("CDPGetResourceManager");}});

var CDPGetSDKAuthorizationPolicyOfInteractiveUser = Module.findExportByName("cdp.dll", "CDPGetSDKAuthorizationPolicyOfInteractiveUser")
Interceptor.attach(CDPGetSDKAuthorizationPolicyOfInteractiveUser, {onLeave: function (args) {send("CDPGetSDKAuthorizationPolicyOfInteractiveUser");}});

var CDPGetSGSocket = Module.findExportByName("cdp.dll", "CDPGetSGSocket")
Interceptor.attach(CDPGetSGSocket, {onLeave: function (args) {send("CDPGetSGSocket");}});

var CDPGetSystemAppId = Module.findExportByName("cdp.dll", "CDPGetSystemAppId")
Interceptor.attach(CDPGetSystemAppId, {onLeave: function (args) {send("CDPGetSystemAppId");}});

var CDPGetUserActivitySettings = Module.findExportByName("cdp.dll", "CDPGetUserActivitySettings")
Interceptor.attach(CDPGetUserActivitySettings, {onLeave: function (args) {send("CDPGetUserActivitySettings");}});

var CDPGetUserActivitySettingsForUser = Module.findExportByName("cdp.dll", "CDPGetUserActivitySettingsForUser")
Interceptor.attach(CDPGetUserActivitySettingsForUser, {onLeave: function (args) {send("CDPGetUserActivitySettingsForUser");}});

var CDPGetUserActivitySettingsInternal = Module.findExportByName("cdp.dll", "CDPGetUserActivitySettingsInternal")
Interceptor.attach(CDPGetUserActivitySettingsInternal, {onLeave: function (args) {send("CDPGetUserActivitySettingsInternal");}});

var CDPGetUserCollectionInternal = Module.findExportByName("cdp.dll", "CDPGetUserCollectionInternal")
Interceptor.attach(CDPGetUserCollectionInternal, {onLeave: function (args) {send("CDPGetUserCollectionInternal");}});

var CDPInitialize = Module.findExportByName("cdp.dll", "CDPInitialize")
Interceptor.attach(CDPInitialize, {onLeave: function (args) {send("CDPInitialize");}});

var CDPInitializeForService = Module.findExportByName("cdp.dll", "CDPInitializeForService")
Interceptor.attach(CDPInitializeForService, {onLeave: function (args) {send("CDPInitializeForService");}});

var CDPInitializeSGPowerOnPacket = Module.findExportByName("cdp.dll", "CDPInitializeSGPowerOnPacket")
Interceptor.attach(CDPInitializeSGPowerOnPacket, {onLeave: function (args) {send("CDPInitializeSGPowerOnPacket");}});

var CDPInitializeUserService = Module.findExportByName("cdp.dll", "CDPInitializeUserService")
Interceptor.attach(CDPInitializeUserService, {onLeave: function (args) {send("CDPInitializeUserService");}});

var CDPInitializeUserServicePhase2 = Module.findExportByName("cdp.dll", "CDPInitializeUserServicePhase2")
Interceptor.attach(CDPInitializeUserServicePhase2, {onLeave: function (args) {send("CDPInitializeUserServicePhase2");}});

var CDPIsEnabled = Module.findExportByName("cdp.dll", "CDPIsEnabled")
Interceptor.attach(CDPIsEnabled, {onLeave: function (args) {send("CDPIsEnabled");}});

var CDPPreShutdown = Module.findExportByName("cdp.dll", "CDPPreShutdown")
Interceptor.attach(CDPPreShutdown, {onLeave: function (args) {send("CDPPreShutdown");}});

var CDPRegisterActivityConflictResolverInternal = Module.findExportByName("cdp.dll", "CDPRegisterActivityConflictResolverInternal")
Interceptor.attach(CDPRegisterActivityConflictResolverInternal, {onLeave: function (args) {send("CDPRegisterActivityConflictResolverInternal");}});

var CDPReleaseNetworkingInternal = Module.findExportByName("cdp.dll", "CDPReleaseNetworkingInternal")
Interceptor.attach(CDPReleaseNetworkingInternal, {onLeave: function (args) {send("CDPReleaseNetworkingInternal");}});

var CDPResume = Module.findExportByName("cdp.dll", "CDPResume")
Interceptor.attach(CDPResume, {onLeave: function (args) {send("CDPResume");}});

var CDPSetAccountProviderInternal = Module.findExportByName("cdp.dll", "CDPSetAccountProviderInternal")
Interceptor.attach(CDPSetAccountProviderInternal, {onLeave: function (args) {send("CDPSetAccountProviderInternal");}});

var CDPSetAppControlHostCallback = Module.findExportByName("cdp.dll", "CDPSetAppControlHostCallback")
Interceptor.attach(CDPSetAppControlHostCallback, {onLeave: function (args) {send("CDPSetAppControlHostCallback");}});

var CDPSetExtendedLocalDeviceStatus = Module.findExportByName("cdp.dll", "CDPSetExtendedLocalDeviceStatus")
Interceptor.attach(CDPSetExtendedLocalDeviceStatus, {onLeave: function (args) {send("CDPSetExtendedLocalDeviceStatus");}});

var CDPSetResourceConfigProvider = Module.findExportByName("cdp.dll", "CDPSetResourceConfigProvider")
Interceptor.attach(CDPSetResourceConfigProvider, {onLeave: function (args) {send("CDPSetResourceConfigProvider");}});

var CDPSetServicePid = Module.findExportByName("cdp.dll", "CDPSetServicePid")
Interceptor.attach(CDPSetServicePid, {onLeave: function (args) {send("CDPSetServicePid");}});

var CDPShutdown = Module.findExportByName("cdp.dll", "CDPShutdown")
Interceptor.attach(CDPShutdown, {onLeave: function (args) {send("CDPShutdown");}});

var CDPShutdownBluetooth = Module.findExportByName("cdp.dll", "CDPShutdownBluetooth")
Interceptor.attach(CDPShutdownBluetooth, {onLeave: function (args) {send("CDPShutdownBluetooth");}});

var CDPStartCCSPolling = Module.findExportByName("cdp.dll", "CDPStartCCSPolling")
Interceptor.attach(CDPStartCCSPolling, {onLeave: function (args) {send("CDPStartCCSPolling");}});

var CDPStopCCSPolling = Module.findExportByName("cdp.dll", "CDPStopCCSPolling")
Interceptor.attach(CDPStopCCSPolling, {onLeave: function (args) {send("CDPStopCCSPolling");}});

var CDPSuspend = Module.findExportByName("cdp.dll", "CDPSuspend")
Interceptor.attach(CDPSuspend, {onLeave: function (args) {send("CDPSuspend");}});

var CDPUninitializeUserService = Module.findExportByName("cdp.dll", "CDPUninitializeUserService")
Interceptor.attach(CDPUninitializeUserService, {onLeave: function (args) {send("CDPUninitializeUserService");}});

var CDPWriteAccountSettings = Module.findExportByName("cdp.dll", "CDPWriteAccountSettings")
Interceptor.attach(CDPWriteAccountSettings, {onLeave: function (args) {send("CDPWriteAccountSettings");}});

var DllCanUnloadNow = Module.findExportByName("cdp.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetClassObject = Module.findExportByName("cdp.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var DllRegisterServer = Module.findExportByName("cdp.dll", "DllRegisterServer")
Interceptor.attach(DllRegisterServer, {onLeave: function (args) {send("DllRegisterServer");}});

var DllUnregisterServer = Module.findExportByName("cdp.dll", "DllUnregisterServer")
Interceptor.attach(DllUnregisterServer, {onLeave: function (args) {send("DllUnregisterServer");}});

var GetProxyDllInfo = Module.findExportByName("cdp.dll", "GetProxyDllInfo")
Interceptor.attach(GetProxyDllInfo, {onLeave: function (args) {send("GetProxyDllInfo");}});

