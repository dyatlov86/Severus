var ??0CLexer@@QEAA@XZ = Module.findExportByName("adsldpc.dll", "??0CLexer@@QEAA@XZ")
Interceptor.attach(??0CLexer@@QEAA@XZ, {onLeave: function (args) {send("??0CLexer@@QEAA@XZ");}});

var ??1CLexer@@QEAA@XZ = Module.findExportByName("adsldpc.dll", "??1CLexer@@QEAA@XZ")
Interceptor.attach(??1CLexer@@QEAA@XZ, {onLeave: function (args) {send("??1CLexer@@QEAA@XZ");}});

var ?GetNextToken@CLexer@@QEAAJPEAGPEAK@Z = Module.findExportByName("adsldpc.dll", "?GetNextToken@CLexer@@QEAAJPEAGPEAK@Z")
Interceptor.attach(?GetNextToken@CLexer@@QEAAJPEAGPEAK@Z, {onLeave: function (args) {send("?GetNextToken@CLexer@@QEAAJPEAGPEAK@Z");}});

var ?InitializePath@CLexer@@QEAAJPEAG@Z = Module.findExportByName("adsldpc.dll", "?InitializePath@CLexer@@QEAAJPEAG@Z")
Interceptor.attach(?InitializePath@CLexer@@QEAAJPEAG@Z, {onLeave: function (args) {send("?InitializePath@CLexer@@QEAAJPEAG@Z");}});

var ?SetAtDisabler@CLexer@@QEAAXH@Z = Module.findExportByName("adsldpc.dll", "?SetAtDisabler@CLexer@@QEAAXH@Z")
Interceptor.attach(?SetAtDisabler@CLexer@@QEAAXH@Z, {onLeave: function (args) {send("?SetAtDisabler@CLexer@@QEAAXH@Z");}});

var ?SetExclaimnationDisabler@CLexer@@QEAAXH@Z = Module.findExportByName("adsldpc.dll", "?SetExclaimnationDisabler@CLexer@@QEAAXH@Z")
Interceptor.attach(?SetExclaimnationDisabler@CLexer@@QEAAXH@Z, {onLeave: function (args) {send("?SetExclaimnationDisabler@CLexer@@QEAAXH@Z");}});

var ?SetFSlashDisabler@CLexer@@QEAAXH@Z = Module.findExportByName("adsldpc.dll", "?SetFSlashDisabler@CLexer@@QEAAXH@Z")
Interceptor.attach(?SetFSlashDisabler@CLexer@@QEAAXH@Z, {onLeave: function (args) {send("?SetFSlashDisabler@CLexer@@QEAAXH@Z");}});

var ADSIAbandonSearch = Module.findExportByName("adsldpc.dll", "ADSIAbandonSearch")
Interceptor.attach(ADSIAbandonSearch, {onLeave: function (args) {send("ADSIAbandonSearch");}});

var ADSICloseDSObject = Module.findExportByName("adsldpc.dll", "ADSICloseDSObject")
Interceptor.attach(ADSICloseDSObject, {onLeave: function (args) {send("ADSICloseDSObject");}});

var ADSICloseSearchHandle = Module.findExportByName("adsldpc.dll", "ADSICloseSearchHandle")
Interceptor.attach(ADSICloseSearchHandle, {onLeave: function (args) {send("ADSICloseSearchHandle");}});

var ADSICreateDSObject = Module.findExportByName("adsldpc.dll", "ADSICreateDSObject")
Interceptor.attach(ADSICreateDSObject, {onLeave: function (args) {send("ADSICreateDSObject");}});

var ADSIDeleteDSObject = Module.findExportByName("adsldpc.dll", "ADSIDeleteDSObject")
Interceptor.attach(ADSIDeleteDSObject, {onLeave: function (args) {send("ADSIDeleteDSObject");}});

var ADSIExecuteSearch = Module.findExportByName("adsldpc.dll", "ADSIExecuteSearch")
Interceptor.attach(ADSIExecuteSearch, {onLeave: function (args) {send("ADSIExecuteSearch");}});

var ADSIFreeColumn = Module.findExportByName("adsldpc.dll", "ADSIFreeColumn")
Interceptor.attach(ADSIFreeColumn, {onLeave: function (args) {send("ADSIFreeColumn");}});

var ADSIGetColumn = Module.findExportByName("adsldpc.dll", "ADSIGetColumn")
Interceptor.attach(ADSIGetColumn, {onLeave: function (args) {send("ADSIGetColumn");}});

var ADSIGetFirstRow = Module.findExportByName("adsldpc.dll", "ADSIGetFirstRow")
Interceptor.attach(ADSIGetFirstRow, {onLeave: function (args) {send("ADSIGetFirstRow");}});

var ADSIGetNextColumnName = Module.findExportByName("adsldpc.dll", "ADSIGetNextColumnName")
Interceptor.attach(ADSIGetNextColumnName, {onLeave: function (args) {send("ADSIGetNextColumnName");}});

var ADSIGetNextRow = Module.findExportByName("adsldpc.dll", "ADSIGetNextRow")
Interceptor.attach(ADSIGetNextRow, {onLeave: function (args) {send("ADSIGetNextRow");}});

var ADSIGetObjectAttributes = Module.findExportByName("adsldpc.dll", "ADSIGetObjectAttributes")
Interceptor.attach(ADSIGetObjectAttributes, {onLeave: function (args) {send("ADSIGetObjectAttributes");}});

var ADSIGetPreviousRow = Module.findExportByName("adsldpc.dll", "ADSIGetPreviousRow")
Interceptor.attach(ADSIGetPreviousRow, {onLeave: function (args) {send("ADSIGetPreviousRow");}});

var ADSIModifyRdn = Module.findExportByName("adsldpc.dll", "ADSIModifyRdn")
Interceptor.attach(ADSIModifyRdn, {onLeave: function (args) {send("ADSIModifyRdn");}});

var ADSIOpenDSObject = Module.findExportByName("adsldpc.dll", "ADSIOpenDSObject")
Interceptor.attach(ADSIOpenDSObject, {onLeave: function (args) {send("ADSIOpenDSObject");}});

var ADSIPrint = Module.findExportByName("adsldpc.dll", "ADSIPrint")
Interceptor.attach(ADSIPrint, {onLeave: function (args) {send("ADSIPrint");}});

var ADSISetObjectAttributes = Module.findExportByName("adsldpc.dll", "ADSISetObjectAttributes")
Interceptor.attach(ADSISetObjectAttributes, {onLeave: function (args) {send("ADSISetObjectAttributes");}});

var ADSISetSearchPreference = Module.findExportByName("adsldpc.dll", "ADSISetSearchPreference")
Interceptor.attach(ADSISetSearchPreference, {onLeave: function (args) {send("ADSISetSearchPreference");}});

var ADsAbandonSearch = Module.findExportByName("adsldpc.dll", "ADsAbandonSearch")
Interceptor.attach(ADsAbandonSearch, {onLeave: function (args) {send("ADsAbandonSearch");}});

var ADsCloseSearchHandle = Module.findExportByName("adsldpc.dll", "ADsCloseSearchHandle")
Interceptor.attach(ADsCloseSearchHandle, {onLeave: function (args) {send("ADsCloseSearchHandle");}});

var ADsCreateAttributeDefinition = Module.findExportByName("adsldpc.dll", "ADsCreateAttributeDefinition")
Interceptor.attach(ADsCreateAttributeDefinition, {onLeave: function (args) {send("ADsCreateAttributeDefinition");}});

var ADsCreateClassDefinition = Module.findExportByName("adsldpc.dll", "ADsCreateClassDefinition")
Interceptor.attach(ADsCreateClassDefinition, {onLeave: function (args) {send("ADsCreateClassDefinition");}});

var ADsCreateDSObject = Module.findExportByName("adsldpc.dll", "ADsCreateDSObject")
Interceptor.attach(ADsCreateDSObject, {onLeave: function (args) {send("ADsCreateDSObject");}});

var ADsCreateDSObjectExt = Module.findExportByName("adsldpc.dll", "ADsCreateDSObjectExt")
Interceptor.attach(ADsCreateDSObjectExt, {onLeave: function (args) {send("ADsCreateDSObjectExt");}});

var ADsDecodeBinaryData = Module.findExportByName("adsldpc.dll", "ADsDecodeBinaryData")
Interceptor.attach(ADsDecodeBinaryData, {onLeave: function (args) {send("ADsDecodeBinaryData");}});

var ADsDeleteAttributeDefinition = Module.findExportByName("adsldpc.dll", "ADsDeleteAttributeDefinition")
Interceptor.attach(ADsDeleteAttributeDefinition, {onLeave: function (args) {send("ADsDeleteAttributeDefinition");}});

var ADsDeleteClassDefinition = Module.findExportByName("adsldpc.dll", "ADsDeleteClassDefinition")
Interceptor.attach(ADsDeleteClassDefinition, {onLeave: function (args) {send("ADsDeleteClassDefinition");}});

var ADsDeleteDSObject = Module.findExportByName("adsldpc.dll", "ADsDeleteDSObject")
Interceptor.attach(ADsDeleteDSObject, {onLeave: function (args) {send("ADsDeleteDSObject");}});

var ADsEncodeBinaryData = Module.findExportByName("adsldpc.dll", "ADsEncodeBinaryData")
Interceptor.attach(ADsEncodeBinaryData, {onLeave: function (args) {send("ADsEncodeBinaryData");}});

var ADsEnumAttributes = Module.findExportByName("adsldpc.dll", "ADsEnumAttributes")
Interceptor.attach(ADsEnumAttributes, {onLeave: function (args) {send("ADsEnumAttributes");}});

var ADsEnumClasses = Module.findExportByName("adsldpc.dll", "ADsEnumClasses")
Interceptor.attach(ADsEnumClasses, {onLeave: function (args) {send("ADsEnumClasses");}});

var ADsExecuteSearch = Module.findExportByName("adsldpc.dll", "ADsExecuteSearch")
Interceptor.attach(ADsExecuteSearch, {onLeave: function (args) {send("ADsExecuteSearch");}});

var ADsFreeColumn = Module.findExportByName("adsldpc.dll", "ADsFreeColumn")
Interceptor.attach(ADsFreeColumn, {onLeave: function (args) {send("ADsFreeColumn");}});

var ADsGetColumn = Module.findExportByName("adsldpc.dll", "ADsGetColumn")
Interceptor.attach(ADsGetColumn, {onLeave: function (args) {send("ADsGetColumn");}});

var ADsGetFirstRow = Module.findExportByName("adsldpc.dll", "ADsGetFirstRow")
Interceptor.attach(ADsGetFirstRow, {onLeave: function (args) {send("ADsGetFirstRow");}});

var ADsGetLastError = Module.findExportByName("adsldpc.dll", "ADsGetLastError")
Interceptor.attach(ADsGetLastError, {onLeave: function (args) {send("ADsGetLastError");}});

var ADsGetNextColumnName = Module.findExportByName("adsldpc.dll", "ADsGetNextColumnName")
Interceptor.attach(ADsGetNextColumnName, {onLeave: function (args) {send("ADsGetNextColumnName");}});

var ADsGetNextRow = Module.findExportByName("adsldpc.dll", "ADsGetNextRow")
Interceptor.attach(ADsGetNextRow, {onLeave: function (args) {send("ADsGetNextRow");}});

var ADsGetObjectAttributes = Module.findExportByName("adsldpc.dll", "ADsGetObjectAttributes")
Interceptor.attach(ADsGetObjectAttributes, {onLeave: function (args) {send("ADsGetObjectAttributes");}});

var ADsGetPreviousRow = Module.findExportByName("adsldpc.dll", "ADsGetPreviousRow")
Interceptor.attach(ADsGetPreviousRow, {onLeave: function (args) {send("ADsGetPreviousRow");}});

var ADsHelperGetCurrentRowMessage = Module.findExportByName("adsldpc.dll", "ADsHelperGetCurrentRowMessage")
Interceptor.attach(ADsHelperGetCurrentRowMessage, {onLeave: function (args) {send("ADsHelperGetCurrentRowMessage");}});

var ADsObject = Module.findExportByName("adsldpc.dll", "ADsObject")
Interceptor.attach(ADsObject, {onLeave: function (args) {send("ADsObject");}});

var ADsSetLastError = Module.findExportByName("adsldpc.dll", "ADsSetLastError")
Interceptor.attach(ADsSetLastError, {onLeave: function (args) {send("ADsSetLastError");}});

var ADsSetObjectAttributes = Module.findExportByName("adsldpc.dll", "ADsSetObjectAttributes")
Interceptor.attach(ADsSetObjectAttributes, {onLeave: function (args) {send("ADsSetObjectAttributes");}});

var ADsSetSearchPreference = Module.findExportByName("adsldpc.dll", "ADsSetSearchPreference")
Interceptor.attach(ADsSetSearchPreference, {onLeave: function (args) {send("ADsSetSearchPreference");}});

var ADsWriteAttributeDefinition = Module.findExportByName("adsldpc.dll", "ADsWriteAttributeDefinition")
Interceptor.attach(ADsWriteAttributeDefinition, {onLeave: function (args) {send("ADsWriteAttributeDefinition");}});

var ADsWriteClassDefinition = Module.findExportByName("adsldpc.dll", "ADsWriteClassDefinition")
Interceptor.attach(ADsWriteClassDefinition, {onLeave: function (args) {send("ADsWriteClassDefinition");}});

var AdsTypeFreeAdsObjects = Module.findExportByName("adsldpc.dll", "AdsTypeFreeAdsObjects")
Interceptor.attach(AdsTypeFreeAdsObjects, {onLeave: function (args) {send("AdsTypeFreeAdsObjects");}});

var AdsTypeToLdapTypeCopyConstruct = Module.findExportByName("adsldpc.dll", "AdsTypeToLdapTypeCopyConstruct")
Interceptor.attach(AdsTypeToLdapTypeCopyConstruct, {onLeave: function (args) {send("AdsTypeToLdapTypeCopyConstruct");}});

var AdsTypeToLdapTypeCopyDNWithBinary = Module.findExportByName("adsldpc.dll", "AdsTypeToLdapTypeCopyDNWithBinary")
Interceptor.attach(AdsTypeToLdapTypeCopyDNWithBinary, {onLeave: function (args) {send("AdsTypeToLdapTypeCopyDNWithBinary");}});

var AdsTypeToLdapTypeCopyDNWithString = Module.findExportByName("adsldpc.dll", "AdsTypeToLdapTypeCopyDNWithString")
Interceptor.attach(AdsTypeToLdapTypeCopyDNWithString, {onLeave: function (args) {send("AdsTypeToLdapTypeCopyDNWithString");}});

var AdsTypeToLdapTypeCopyGeneralizedTime = Module.findExportByName("adsldpc.dll", "AdsTypeToLdapTypeCopyGeneralizedTime")
Interceptor.attach(AdsTypeToLdapTypeCopyGeneralizedTime, {onLeave: function (args) {send("AdsTypeToLdapTypeCopyGeneralizedTime");}});

var AdsTypeToLdapTypeCopyTime = Module.findExportByName("adsldpc.dll", "AdsTypeToLdapTypeCopyTime")
Interceptor.attach(AdsTypeToLdapTypeCopyTime, {onLeave: function (args) {send("AdsTypeToLdapTypeCopyTime");}});

var AllocADsMem = Module.findExportByName("adsldpc.dll", "AllocADsMem")
Interceptor.attach(AllocADsMem, {onLeave: function (args) {send("AllocADsMem");}});

var AllocADsStr = Module.findExportByName("adsldpc.dll", "AllocADsStr")
Interceptor.attach(AllocADsStr, {onLeave: function (args) {send("AllocADsStr");}});

var BerBvFree = Module.findExportByName("adsldpc.dll", "BerBvFree")
Interceptor.attach(BerBvFree, {onLeave: function (args) {send("BerBvFree");}});

var BerEncodingQuotaControl = Module.findExportByName("adsldpc.dll", "BerEncodingQuotaControl")
Interceptor.attach(BerEncodingQuotaControl, {onLeave: function (args) {send("BerEncodingQuotaControl");}});

var BuildADsParentPath = Module.findExportByName("adsldpc.dll", "BuildADsParentPath")
Interceptor.attach(BuildADsParentPath, {onLeave: function (args) {send("BuildADsParentPath");}});

var BuildADsParentPathFromObjectInfo = Module.findExportByName("adsldpc.dll", "BuildADsParentPathFromObjectInfo")
Interceptor.attach(BuildADsParentPathFromObjectInfo, {onLeave: function (args) {send("BuildADsParentPathFromObjectInfo");}});

var BuildADsParentPathFromObjectInfo2 = Module.findExportByName("adsldpc.dll", "BuildADsParentPathFromObjectInfo2")
Interceptor.attach(BuildADsParentPathFromObjectInfo2, {onLeave: function (args) {send("BuildADsParentPathFromObjectInfo2");}});

var BuildADsPathFromLDAPPath = Module.findExportByName("adsldpc.dll", "BuildADsPathFromLDAPPath")
Interceptor.attach(BuildADsPathFromLDAPPath, {onLeave: function (args) {send("BuildADsPathFromLDAPPath");}});

var BuildADsPathFromLDAPPath2 = Module.findExportByName("adsldpc.dll", "BuildADsPathFromLDAPPath2")
Interceptor.attach(BuildADsPathFromLDAPPath2, {onLeave: function (args) {send("BuildADsPathFromLDAPPath2");}});

var BuildADsPathFromParent = Module.findExportByName("adsldpc.dll", "BuildADsPathFromParent")
Interceptor.attach(BuildADsPathFromParent, {onLeave: function (args) {send("BuildADsPathFromParent");}});

var BuildLDAPPathFromADsPath = Module.findExportByName("adsldpc.dll", "BuildLDAPPathFromADsPath")
Interceptor.attach(BuildLDAPPathFromADsPath, {onLeave: function (args) {send("BuildLDAPPathFromADsPath");}});

var BuildLDAPPathFromADsPath2 = Module.findExportByName("adsldpc.dll", "BuildLDAPPathFromADsPath2")
Interceptor.attach(BuildLDAPPathFromADsPath2, {onLeave: function (args) {send("BuildLDAPPathFromADsPath2");}});

var ChangeSeparator = Module.findExportByName("adsldpc.dll", "ChangeSeparator")
Interceptor.attach(ChangeSeparator, {onLeave: function (args) {send("ChangeSeparator");}});

var Component = Module.findExportByName("adsldpc.dll", "Component")
Interceptor.attach(Component, {onLeave: function (args) {send("Component");}});

var ConvertSidToString = Module.findExportByName("adsldpc.dll", "ConvertSidToString")
Interceptor.attach(ConvertSidToString, {onLeave: function (args) {send("ConvertSidToString");}});

var ConvertSidToU2Trustee = Module.findExportByName("adsldpc.dll", "ConvertSidToU2Trustee")
Interceptor.attach(ConvertSidToU2Trustee, {onLeave: function (args) {send("ConvertSidToU2Trustee");}});

var ConvertU2TrusteeToSid = Module.findExportByName("adsldpc.dll", "ConvertU2TrusteeToSid")
Interceptor.attach(ConvertU2TrusteeToSid, {onLeave: function (args) {send("ConvertU2TrusteeToSid");}});

var FindEntryInSearchTable = Module.findExportByName("adsldpc.dll", "FindEntryInSearchTable")
Interceptor.attach(FindEntryInSearchTable, {onLeave: function (args) {send("FindEntryInSearchTable");}});

var FindSearchTableIndex = Module.findExportByName("adsldpc.dll", "FindSearchTableIndex")
Interceptor.attach(FindSearchTableIndex, {onLeave: function (args) {send("FindSearchTableIndex");}});

var FreeADsMem = Module.findExportByName("adsldpc.dll", "FreeADsMem")
Interceptor.attach(FreeADsMem, {onLeave: function (args) {send("FreeADsMem");}});

var FreeADsStr = Module.findExportByName("adsldpc.dll", "FreeADsStr")
Interceptor.attach(FreeADsStr, {onLeave: function (args) {send("FreeADsStr");}});

var FreeObjectInfo = Module.findExportByName("adsldpc.dll", "FreeObjectInfo")
Interceptor.attach(FreeObjectInfo, {onLeave: function (args) {send("FreeObjectInfo");}});

var GetDefaultServer = Module.findExportByName("adsldpc.dll", "GetDefaultServer")
Interceptor.attach(GetDefaultServer, {onLeave: function (args) {send("GetDefaultServer");}});

var GetDisplayName = Module.findExportByName("adsldpc.dll", "GetDisplayName")
Interceptor.attach(GetDisplayName, {onLeave: function (args) {send("GetDisplayName");}});

var GetDomainDNSNameForDomain = Module.findExportByName("adsldpc.dll", "GetDomainDNSNameForDomain")
Interceptor.attach(GetDomainDNSNameForDomain, {onLeave: function (args) {send("GetDomainDNSNameForDomain");}});

var GetLDAPTypeName = Module.findExportByName("adsldpc.dll", "GetLDAPTypeName")
Interceptor.attach(GetLDAPTypeName, {onLeave: function (args) {send("GetLDAPTypeName");}});

var GetServerAndPort = Module.findExportByName("adsldpc.dll", "GetServerAndPort")
Interceptor.attach(GetServerAndPort, {onLeave: function (args) {send("GetServerAndPort");}});

var GetSyntaxOfAttribute = Module.findExportByName("adsldpc.dll", "GetSyntaxOfAttribute")
Interceptor.attach(GetSyntaxOfAttribute, {onLeave: function (args) {send("GetSyntaxOfAttribute");}});

var InitObjectInfo = Module.findExportByName("adsldpc.dll", "InitObjectInfo")
Interceptor.attach(InitObjectInfo, {onLeave: function (args) {send("InitObjectInfo");}});

var IsGCNamespace = Module.findExportByName("adsldpc.dll", "IsGCNamespace")
Interceptor.attach(IsGCNamespace, {onLeave: function (args) {send("IsGCNamespace");}});

var LdapAddExtS = Module.findExportByName("adsldpc.dll", "LdapAddExtS")
Interceptor.attach(LdapAddExtS, {onLeave: function (args) {send("LdapAddExtS");}});

var LdapAddS = Module.findExportByName("adsldpc.dll", "LdapAddS")
Interceptor.attach(LdapAddS, {onLeave: function (args) {send("LdapAddS");}});

var LdapAttributeFree = Module.findExportByName("adsldpc.dll", "LdapAttributeFree")
Interceptor.attach(LdapAttributeFree, {onLeave: function (args) {send("LdapAttributeFree");}});

var LdapCacheAddRef = Module.findExportByName("adsldpc.dll", "LdapCacheAddRef")
Interceptor.attach(LdapCacheAddRef, {onLeave: function (args) {send("LdapCacheAddRef");}});

var LdapCloseObject = Module.findExportByName("adsldpc.dll", "LdapCloseObject")
Interceptor.attach(LdapCloseObject, {onLeave: function (args) {send("LdapCloseObject");}});

var LdapCompareExt = Module.findExportByName("adsldpc.dll", "LdapCompareExt")
Interceptor.attach(LdapCompareExt, {onLeave: function (args) {send("LdapCompareExt");}});

var LdapControlFree = Module.findExportByName("adsldpc.dll", "LdapControlFree")
Interceptor.attach(LdapControlFree, {onLeave: function (args) {send("LdapControlFree");}});

var LdapControlsFree = Module.findExportByName("adsldpc.dll", "LdapControlsFree")
Interceptor.attach(LdapControlsFree, {onLeave: function (args) {send("LdapControlsFree");}});

var LdapCountEntries = Module.findExportByName("adsldpc.dll", "LdapCountEntries")
Interceptor.attach(LdapCountEntries, {onLeave: function (args) {send("LdapCountEntries");}});

var LdapCrackUserDNtoNTLMUser2 = Module.findExportByName("adsldpc.dll", "LdapCrackUserDNtoNTLMUser2")
Interceptor.attach(LdapCrackUserDNtoNTLMUser2, {onLeave: function (args) {send("LdapCrackUserDNtoNTLMUser2");}});

var LdapCreatePageControl = Module.findExportByName("adsldpc.dll", "LdapCreatePageControl")
Interceptor.attach(LdapCreatePageControl, {onLeave: function (args) {send("LdapCreatePageControl");}});

var LdapDeleteExtS = Module.findExportByName("adsldpc.dll", "LdapDeleteExtS")
Interceptor.attach(LdapDeleteExtS, {onLeave: function (args) {send("LdapDeleteExtS");}});

var LdapDeleteS = Module.findExportByName("adsldpc.dll", "LdapDeleteS")
Interceptor.attach(LdapDeleteS, {onLeave: function (args) {send("LdapDeleteS");}});

var LdapFirstAttribute = Module.findExportByName("adsldpc.dll", "LdapFirstAttribute")
Interceptor.attach(LdapFirstAttribute, {onLeave: function (args) {send("LdapFirstAttribute");}});

var LdapFirstEntry = Module.findExportByName("adsldpc.dll", "LdapFirstEntry")
Interceptor.attach(LdapFirstEntry, {onLeave: function (args) {send("LdapFirstEntry");}});

var LdapGetDn = Module.findExportByName("adsldpc.dll", "LdapGetDn")
Interceptor.attach(LdapGetDn, {onLeave: function (args) {send("LdapGetDn");}});

var LdapGetNextPageS = Module.findExportByName("adsldpc.dll", "LdapGetNextPageS")
Interceptor.attach(LdapGetNextPageS, {onLeave: function (args) {send("LdapGetNextPageS");}});

var LdapGetSchemaObjectCount = Module.findExportByName("adsldpc.dll", "LdapGetSchemaObjectCount")
Interceptor.attach(LdapGetSchemaObjectCount, {onLeave: function (args) {send("LdapGetSchemaObjectCount");}});

var LdapGetSubSchemaSubEntryPath = Module.findExportByName("adsldpc.dll", "LdapGetSubSchemaSubEntryPath")
Interceptor.attach(LdapGetSubSchemaSubEntryPath, {onLeave: function (args) {send("LdapGetSubSchemaSubEntryPath");}});

var LdapGetSyntaxIdOfAttribute = Module.findExportByName("adsldpc.dll", "LdapGetSyntaxIdOfAttribute")
Interceptor.attach(LdapGetSyntaxIdOfAttribute, {onLeave: function (args) {send("LdapGetSyntaxIdOfAttribute");}});

var LdapGetSyntaxOfAttributeOnServer = Module.findExportByName("adsldpc.dll", "LdapGetSyntaxOfAttributeOnServer")
Interceptor.attach(LdapGetSyntaxOfAttributeOnServer, {onLeave: function (args) {send("LdapGetSyntaxOfAttributeOnServer");}});

var LdapGetValues = Module.findExportByName("adsldpc.dll", "LdapGetValues")
Interceptor.attach(LdapGetValues, {onLeave: function (args) {send("LdapGetValues");}});

var LdapGetValuesLen = Module.findExportByName("adsldpc.dll", "LdapGetValuesLen")
Interceptor.attach(LdapGetValuesLen, {onLeave: function (args) {send("LdapGetValuesLen");}});

var LdapInitializeSearchPreferences = Module.findExportByName("adsldpc.dll", "LdapInitializeSearchPreferences")
Interceptor.attach(LdapInitializeSearchPreferences, {onLeave: function (args) {send("LdapInitializeSearchPreferences");}});

var LdapIsClassNameValidOnServer = Module.findExportByName("adsldpc.dll", "LdapIsClassNameValidOnServer")
Interceptor.attach(LdapIsClassNameValidOnServer, {onLeave: function (args) {send("LdapIsClassNameValidOnServer");}});

var LdapMakeSchemaCacheObsolete = Module.findExportByName("adsldpc.dll", "LdapMakeSchemaCacheObsolete")
Interceptor.attach(LdapMakeSchemaCacheObsolete, {onLeave: function (args) {send("LdapMakeSchemaCacheObsolete");}});

var LdapMemFree = Module.findExportByName("adsldpc.dll", "LdapMemFree")
Interceptor.attach(LdapMemFree, {onLeave: function (args) {send("LdapMemFree");}});

var LdapModDnS = Module.findExportByName("adsldpc.dll", "LdapModDnS")
Interceptor.attach(LdapModDnS, {onLeave: function (args) {send("LdapModDnS");}});

var LdapModifyExtS = Module.findExportByName("adsldpc.dll", "LdapModifyExtS")
Interceptor.attach(LdapModifyExtS, {onLeave: function (args) {send("LdapModifyExtS");}});

var LdapModifyS = Module.findExportByName("adsldpc.dll", "LdapModifyS")
Interceptor.attach(LdapModifyS, {onLeave: function (args) {send("LdapModifyS");}});

var LdapMsgFree = Module.findExportByName("adsldpc.dll", "LdapMsgFree")
Interceptor.attach(LdapMsgFree, {onLeave: function (args) {send("LdapMsgFree");}});

var LdapNextAttribute = Module.findExportByName("adsldpc.dll", "LdapNextAttribute")
Interceptor.attach(LdapNextAttribute, {onLeave: function (args) {send("LdapNextAttribute");}});

var LdapNextEntry = Module.findExportByName("adsldpc.dll", "LdapNextEntry")
Interceptor.attach(LdapNextEntry, {onLeave: function (args) {send("LdapNextEntry");}});

var LdapOpenObject = Module.findExportByName("adsldpc.dll", "LdapOpenObject")
Interceptor.attach(LdapOpenObject, {onLeave: function (args) {send("LdapOpenObject");}});

var LdapOpenObject2 = Module.findExportByName("adsldpc.dll", "LdapOpenObject2")
Interceptor.attach(LdapOpenObject2, {onLeave: function (args) {send("LdapOpenObject2");}});

var LdapParsePageControl = Module.findExportByName("adsldpc.dll", "LdapParsePageControl")
Interceptor.attach(LdapParsePageControl, {onLeave: function (args) {send("LdapParsePageControl");}});

var LdapParseResult = Module.findExportByName("adsldpc.dll", "LdapParseResult")
Interceptor.attach(LdapParseResult, {onLeave: function (args) {send("LdapParseResult");}});

var LdapReadAttribute = Module.findExportByName("adsldpc.dll", "LdapReadAttribute")
Interceptor.attach(LdapReadAttribute, {onLeave: function (args) {send("LdapReadAttribute");}});

var LdapReadAttribute2 = Module.findExportByName("adsldpc.dll", "LdapReadAttribute2")
Interceptor.attach(LdapReadAttribute2, {onLeave: function (args) {send("LdapReadAttribute2");}});

var LdapReadAttributeFast = Module.findExportByName("adsldpc.dll", "LdapReadAttributeFast")
Interceptor.attach(LdapReadAttributeFast, {onLeave: function (args) {send("LdapReadAttributeFast");}});

var LdapRenameExtS = Module.findExportByName("adsldpc.dll", "LdapRenameExtS")
Interceptor.attach(LdapRenameExtS, {onLeave: function (args) {send("LdapRenameExtS");}});

var LdapResult = Module.findExportByName("adsldpc.dll", "LdapResult")
Interceptor.attach(LdapResult, {onLeave: function (args) {send("LdapResult");}});

var LdapSearch = Module.findExportByName("adsldpc.dll", "LdapSearch")
Interceptor.attach(LdapSearch, {onLeave: function (args) {send("LdapSearch");}});

var LdapSearchAbandonPage = Module.findExportByName("adsldpc.dll", "LdapSearchAbandonPage")
Interceptor.attach(LdapSearchAbandonPage, {onLeave: function (args) {send("LdapSearchAbandonPage");}});

var LdapSearchExtS = Module.findExportByName("adsldpc.dll", "LdapSearchExtS")
Interceptor.attach(LdapSearchExtS, {onLeave: function (args) {send("LdapSearchExtS");}});

var LdapSearchInitPage = Module.findExportByName("adsldpc.dll", "LdapSearchInitPage")
Interceptor.attach(LdapSearchInitPage, {onLeave: function (args) {send("LdapSearchInitPage");}});

var LdapSearchS = Module.findExportByName("adsldpc.dll", "LdapSearchS")
Interceptor.attach(LdapSearchS, {onLeave: function (args) {send("LdapSearchS");}});

var LdapSearchST = Module.findExportByName("adsldpc.dll", "LdapSearchST")
Interceptor.attach(LdapSearchST, {onLeave: function (args) {send("LdapSearchST");}});

var LdapTypeBinaryToString = Module.findExportByName("adsldpc.dll", "LdapTypeBinaryToString")
Interceptor.attach(LdapTypeBinaryToString, {onLeave: function (args) {send("LdapTypeBinaryToString");}});

var LdapTypeCopyConstruct = Module.findExportByName("adsldpc.dll", "LdapTypeCopyConstruct")
Interceptor.attach(LdapTypeCopyConstruct, {onLeave: function (args) {send("LdapTypeCopyConstruct");}});

var LdapTypeFreeLdapModList = Module.findExportByName("adsldpc.dll", "LdapTypeFreeLdapModList")
Interceptor.attach(LdapTypeFreeLdapModList, {onLeave: function (args) {send("LdapTypeFreeLdapModList");}});

var LdapTypeFreeLdapModObject = Module.findExportByName("adsldpc.dll", "LdapTypeFreeLdapModObject")
Interceptor.attach(LdapTypeFreeLdapModObject, {onLeave: function (args) {send("LdapTypeFreeLdapModObject");}});

var LdapTypeFreeLdapObjects = Module.findExportByName("adsldpc.dll", "LdapTypeFreeLdapObjects")
Interceptor.attach(LdapTypeFreeLdapObjects, {onLeave: function (args) {send("LdapTypeFreeLdapObjects");}});

var LdapTypeToAdsTypeCopyConstruct = Module.findExportByName("adsldpc.dll", "LdapTypeToAdsTypeCopyConstruct")
Interceptor.attach(LdapTypeToAdsTypeCopyConstruct, {onLeave: function (args) {send("LdapTypeToAdsTypeCopyConstruct");}});

var LdapTypeToAdsTypeDNWithBinary = Module.findExportByName("adsldpc.dll", "LdapTypeToAdsTypeDNWithBinary")
Interceptor.attach(LdapTypeToAdsTypeDNWithBinary, {onLeave: function (args) {send("LdapTypeToAdsTypeDNWithBinary");}});

var LdapTypeToAdsTypeDNWithString = Module.findExportByName("adsldpc.dll", "LdapTypeToAdsTypeDNWithString")
Interceptor.attach(LdapTypeToAdsTypeDNWithString, {onLeave: function (args) {send("LdapTypeToAdsTypeDNWithString");}});

var LdapTypeToAdsTypeGeneralizedTime = Module.findExportByName("adsldpc.dll", "LdapTypeToAdsTypeGeneralizedTime")
Interceptor.attach(LdapTypeToAdsTypeGeneralizedTime, {onLeave: function (args) {send("LdapTypeToAdsTypeGeneralizedTime");}});

var LdapTypeToAdsTypeUTCTime = Module.findExportByName("adsldpc.dll", "LdapTypeToAdsTypeUTCTime")
Interceptor.attach(LdapTypeToAdsTypeUTCTime, {onLeave: function (args) {send("LdapTypeToAdsTypeUTCTime");}});

var LdapValueFree = Module.findExportByName("adsldpc.dll", "LdapValueFree")
Interceptor.attach(LdapValueFree, {onLeave: function (args) {send("LdapValueFree");}});

var LdapValueFreeLen = Module.findExportByName("adsldpc.dll", "LdapValueFreeLen")
Interceptor.attach(LdapValueFreeLen, {onLeave: function (args) {send("LdapValueFreeLen");}});

var LdapcKeepHandleAround = Module.findExportByName("adsldpc.dll", "LdapcKeepHandleAround")
Interceptor.attach(LdapcKeepHandleAround, {onLeave: function (args) {send("LdapcKeepHandleAround");}});

var LdapcSetStickyServer = Module.findExportByName("adsldpc.dll", "LdapcSetStickyServer")
Interceptor.attach(LdapcSetStickyServer, {onLeave: function (args) {send("LdapcSetStickyServer");}});

var MapADSTypeToLDAPType = Module.findExportByName("adsldpc.dll", "MapADSTypeToLDAPType")
Interceptor.attach(MapADSTypeToLDAPType, {onLeave: function (args) {send("MapADSTypeToLDAPType");}});

var MapLDAPTypeToADSType = Module.findExportByName("adsldpc.dll", "MapLDAPTypeToADSType")
Interceptor.attach(MapLDAPTypeToADSType, {onLeave: function (args) {send("MapLDAPTypeToADSType");}});

var PathName = Module.findExportByName("adsldpc.dll", "PathName")
Interceptor.attach(PathName, {onLeave: function (args) {send("PathName");}});

var ReadPagingSupportedAttr = Module.findExportByName("adsldpc.dll", "ReadPagingSupportedAttr")
Interceptor.attach(ReadPagingSupportedAttr, {onLeave: function (args) {send("ReadPagingSupportedAttr");}});

var ReadSecurityDescriptorControlType = Module.findExportByName("adsldpc.dll", "ReadSecurityDescriptorControlType")
Interceptor.attach(ReadSecurityDescriptorControlType, {onLeave: function (args) {send("ReadSecurityDescriptorControlType");}});

var ReadServerSupportsIsADAMControl = Module.findExportByName("adsldpc.dll", "ReadServerSupportsIsADAMControl")
Interceptor.attach(ReadServerSupportsIsADAMControl, {onLeave: function (args) {send("ReadServerSupportsIsADAMControl");}});

var ReadServerSupportsIsADControl = Module.findExportByName("adsldpc.dll", "ReadServerSupportsIsADControl")
Interceptor.attach(ReadServerSupportsIsADControl, {onLeave: function (args) {send("ReadServerSupportsIsADControl");}});

var ReallocADsMem = Module.findExportByName("adsldpc.dll", "ReallocADsMem")
Interceptor.attach(ReallocADsMem, {onLeave: function (args) {send("ReallocADsMem");}});

var ReallocADsStr = Module.findExportByName("adsldpc.dll", "ReallocADsStr")
Interceptor.attach(ReallocADsStr, {onLeave: function (args) {send("ReallocADsStr");}});

var SchemaAddRef = Module.findExportByName("adsldpc.dll", "SchemaAddRef")
Interceptor.attach(SchemaAddRef, {onLeave: function (args) {send("SchemaAddRef");}});

var SchemaClose = Module.findExportByName("adsldpc.dll", "SchemaClose")
Interceptor.attach(SchemaClose, {onLeave: function (args) {send("SchemaClose");}});

var SchemaGetClassInfo = Module.findExportByName("adsldpc.dll", "SchemaGetClassInfo")
Interceptor.attach(SchemaGetClassInfo, {onLeave: function (args) {send("SchemaGetClassInfo");}});

var SchemaGetClassInfoByIndex = Module.findExportByName("adsldpc.dll", "SchemaGetClassInfoByIndex")
Interceptor.attach(SchemaGetClassInfoByIndex, {onLeave: function (args) {send("SchemaGetClassInfoByIndex");}});

var SchemaGetObjectCount = Module.findExportByName("adsldpc.dll", "SchemaGetObjectCount")
Interceptor.attach(SchemaGetObjectCount, {onLeave: function (args) {send("SchemaGetObjectCount");}});

var SchemaGetPropertyInfo = Module.findExportByName("adsldpc.dll", "SchemaGetPropertyInfo")
Interceptor.attach(SchemaGetPropertyInfo, {onLeave: function (args) {send("SchemaGetPropertyInfo");}});

var SchemaGetPropertyInfoByIndex = Module.findExportByName("adsldpc.dll", "SchemaGetPropertyInfoByIndex")
Interceptor.attach(SchemaGetPropertyInfoByIndex, {onLeave: function (args) {send("SchemaGetPropertyInfoByIndex");}});

var SchemaGetStringsFromStringTable = Module.findExportByName("adsldpc.dll", "SchemaGetStringsFromStringTable")
Interceptor.attach(SchemaGetStringsFromStringTable, {onLeave: function (args) {send("SchemaGetStringsFromStringTable");}});

var SchemaGetSyntaxOfAttribute = Module.findExportByName("adsldpc.dll", "SchemaGetSyntaxOfAttribute")
Interceptor.attach(SchemaGetSyntaxOfAttribute, {onLeave: function (args) {send("SchemaGetSyntaxOfAttribute");}});

var SchemaIsClassAContainer = Module.findExportByName("adsldpc.dll", "SchemaIsClassAContainer")
Interceptor.attach(SchemaIsClassAContainer, {onLeave: function (args) {send("SchemaIsClassAContainer");}});

var SchemaOpen = Module.findExportByName("adsldpc.dll", "SchemaOpen")
Interceptor.attach(SchemaOpen, {onLeave: function (args) {send("SchemaOpen");}});

var SortAndRemoveDuplicateOIDs = Module.findExportByName("adsldpc.dll", "SortAndRemoveDuplicateOIDs")
Interceptor.attach(SortAndRemoveDuplicateOIDs, {onLeave: function (args) {send("SortAndRemoveDuplicateOIDs");}});

var UnMarshallLDAPToLDAPSynID = Module.findExportByName("adsldpc.dll", "UnMarshallLDAPToLDAPSynID")
Interceptor.attach(UnMarshallLDAPToLDAPSynID, {onLeave: function (args) {send("UnMarshallLDAPToLDAPSynID");}});

var intcmp = Module.findExportByName("adsldpc.dll", "intcmp")
Interceptor.attach(intcmp, {onLeave: function (args) {send("intcmp");}});

