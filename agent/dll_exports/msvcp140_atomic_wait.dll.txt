var __std_acquire_shared_mutex_for_instance = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_acquire_shared_mutex_for_instance")
Interceptor.attach(__std_acquire_shared_mutex_for_instance, {onLeave: function (args) {send("__std_acquire_shared_mutex_for_instance");}});

var __std_atomic_compare_exchange_128 = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_compare_exchange_128")
Interceptor.attach(__std_atomic_compare_exchange_128, {onLeave: function (args) {send("__std_atomic_compare_exchange_128");}});

var __std_atomic_get_mutex = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_get_mutex")
Interceptor.attach(__std_atomic_get_mutex, {onLeave: function (args) {send("__std_atomic_get_mutex");}});

var __std_atomic_has_cmpxchg16b = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_has_cmpxchg16b")
Interceptor.attach(__std_atomic_has_cmpxchg16b, {onLeave: function (args) {send("__std_atomic_has_cmpxchg16b");}});

var __std_atomic_notify_all_direct = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_notify_all_direct")
Interceptor.attach(__std_atomic_notify_all_direct, {onLeave: function (args) {send("__std_atomic_notify_all_direct");}});

var __std_atomic_notify_all_indirect = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_notify_all_indirect")
Interceptor.attach(__std_atomic_notify_all_indirect, {onLeave: function (args) {send("__std_atomic_notify_all_indirect");}});

var __std_atomic_notify_one_direct = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_notify_one_direct")
Interceptor.attach(__std_atomic_notify_one_direct, {onLeave: function (args) {send("__std_atomic_notify_one_direct");}});

var __std_atomic_notify_one_indirect = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_notify_one_indirect")
Interceptor.attach(__std_atomic_notify_one_indirect, {onLeave: function (args) {send("__std_atomic_notify_one_indirect");}});

var __std_atomic_set_api_level = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_set_api_level")
Interceptor.attach(__std_atomic_set_api_level, {onLeave: function (args) {send("__std_atomic_set_api_level");}});

var __std_atomic_wait_direct = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_wait_direct")
Interceptor.attach(__std_atomic_wait_direct, {onLeave: function (args) {send("__std_atomic_wait_direct");}});

var __std_atomic_wait_get_deadline = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_wait_get_deadline")
Interceptor.attach(__std_atomic_wait_get_deadline, {onLeave: function (args) {send("__std_atomic_wait_get_deadline");}});

var __std_atomic_wait_get_remaining_timeout = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_wait_get_remaining_timeout")
Interceptor.attach(__std_atomic_wait_get_remaining_timeout, {onLeave: function (args) {send("__std_atomic_wait_get_remaining_timeout");}});

var __std_atomic_wait_indirect = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_atomic_wait_indirect")
Interceptor.attach(__std_atomic_wait_indirect, {onLeave: function (args) {send("__std_atomic_wait_indirect");}});

var __std_bulk_submit_threadpool_work = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_bulk_submit_threadpool_work")
Interceptor.attach(__std_bulk_submit_threadpool_work, {onLeave: function (args) {send("__std_bulk_submit_threadpool_work");}});

var __std_calloc_crt = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_calloc_crt")
Interceptor.attach(__std_calloc_crt, {onLeave: function (args) {send("__std_calloc_crt");}});

var __std_close_threadpool_work = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_close_threadpool_work")
Interceptor.attach(__std_close_threadpool_work, {onLeave: function (args) {send("__std_close_threadpool_work");}});

var __std_create_threadpool_work = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_create_threadpool_work")
Interceptor.attach(__std_create_threadpool_work, {onLeave: function (args) {send("__std_create_threadpool_work");}});

var __std_execution_wait_on_uchar = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_execution_wait_on_uchar")
Interceptor.attach(__std_execution_wait_on_uchar, {onLeave: function (args) {send("__std_execution_wait_on_uchar");}});

var __std_execution_wake_by_address_all = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_execution_wake_by_address_all")
Interceptor.attach(__std_execution_wake_by_address_all, {onLeave: function (args) {send("__std_execution_wake_by_address_all");}});

var __std_free_crt = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_free_crt")
Interceptor.attach(__std_free_crt, {onLeave: function (args) {send("__std_free_crt");}});

var __std_parallel_algorithms_hw_threads = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_parallel_algorithms_hw_threads")
Interceptor.attach(__std_parallel_algorithms_hw_threads, {onLeave: function (args) {send("__std_parallel_algorithms_hw_threads");}});

var __std_release_shared_mutex_for_instance = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_release_shared_mutex_for_instance")
Interceptor.attach(__std_release_shared_mutex_for_instance, {onLeave: function (args) {send("__std_release_shared_mutex_for_instance");}});

var __std_submit_threadpool_work = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_submit_threadpool_work")
Interceptor.attach(__std_submit_threadpool_work, {onLeave: function (args) {send("__std_submit_threadpool_work");}});

var __std_tzdb_delete_current_zone = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_delete_current_zone")
Interceptor.attach(__std_tzdb_delete_current_zone, {onLeave: function (args) {send("__std_tzdb_delete_current_zone");}});

var __std_tzdb_delete_leap_seconds = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_delete_leap_seconds")
Interceptor.attach(__std_tzdb_delete_leap_seconds, {onLeave: function (args) {send("__std_tzdb_delete_leap_seconds");}});

var __std_tzdb_delete_sys_info = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_delete_sys_info")
Interceptor.attach(__std_tzdb_delete_sys_info, {onLeave: function (args) {send("__std_tzdb_delete_sys_info");}});

var __std_tzdb_delete_time_zones = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_delete_time_zones")
Interceptor.attach(__std_tzdb_delete_time_zones, {onLeave: function (args) {send("__std_tzdb_delete_time_zones");}});

var __std_tzdb_get_current_zone = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_get_current_zone")
Interceptor.attach(__std_tzdb_get_current_zone, {onLeave: function (args) {send("__std_tzdb_get_current_zone");}});

var __std_tzdb_get_leap_seconds = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_get_leap_seconds")
Interceptor.attach(__std_tzdb_get_leap_seconds, {onLeave: function (args) {send("__std_tzdb_get_leap_seconds");}});

var __std_tzdb_get_sys_info = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_get_sys_info")
Interceptor.attach(__std_tzdb_get_sys_info, {onLeave: function (args) {send("__std_tzdb_get_sys_info");}});

var __std_tzdb_get_time_zones = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_tzdb_get_time_zones")
Interceptor.attach(__std_tzdb_get_time_zones, {onLeave: function (args) {send("__std_tzdb_get_time_zones");}});

var __std_wait_for_threadpool_work_callbacks = Module.findExportByName("msvcp140_atomic_wait.dll", "__std_wait_for_threadpool_work_callbacks")
Interceptor.attach(__std_wait_for_threadpool_work_callbacks, {onLeave: function (args) {send("__std_wait_for_threadpool_work_callbacks");}});

