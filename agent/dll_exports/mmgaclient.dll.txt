var ChangeIdleRoutine = Module.findExportByName("mmgaclient.dll", "ChangeIdleRoutine")
Interceptor.attach(ChangeIdleRoutine, {onLeave: function (args) {send("ChangeIdleRoutine");}});

var CreateIProp = Module.findExportByName("mmgaclient.dll", "CreateIProp")
Interceptor.attach(CreateIProp, {onLeave: function (args) {send("CreateIProp");}});

var CreateTable = Module.findExportByName("mmgaclient.dll", "CreateTable")
Interceptor.attach(CreateTable, {onLeave: function (args) {send("CreateTable");}});

var DeinitMapiUtil = Module.findExportByName("mmgaclient.dll", "DeinitMapiUtil")
Interceptor.attach(DeinitMapiUtil, {onLeave: function (args) {send("DeinitMapiUtil");}});

var DeregisterIdleRoutine = Module.findExportByName("mmgaclient.dll", "DeregisterIdleRoutine")
Interceptor.attach(DeregisterIdleRoutine, {onLeave: function (args) {send("DeregisterIdleRoutine");}});

var EnableIdleRoutine = Module.findExportByName("mmgaclient.dll", "EnableIdleRoutine")
Interceptor.attach(EnableIdleRoutine, {onLeave: function (args) {send("EnableIdleRoutine");}});

var FBadColumnSet = Module.findExportByName("mmgaclient.dll", "FBadColumnSet")
Interceptor.attach(FBadColumnSet, {onLeave: function (args) {send("FBadColumnSet");}});

var FBadEntryList = Module.findExportByName("mmgaclient.dll", "FBadEntryList")
Interceptor.attach(FBadEntryList, {onLeave: function (args) {send("FBadEntryList");}});

var FBadProp = Module.findExportByName("mmgaclient.dll", "FBadProp")
Interceptor.attach(FBadProp, {onLeave: function (args) {send("FBadProp");}});

var FBadPropTag = Module.findExportByName("mmgaclient.dll", "FBadPropTag")
Interceptor.attach(FBadPropTag, {onLeave: function (args) {send("FBadPropTag");}});

var FBadRestriction = Module.findExportByName("mmgaclient.dll", "FBadRestriction")
Interceptor.attach(FBadRestriction, {onLeave: function (args) {send("FBadRestriction");}});

var FBadRglpszW = Module.findExportByName("mmgaclient.dll", "FBadRglpszW")
Interceptor.attach(FBadRglpszW, {onLeave: function (args) {send("FBadRglpszW");}});

var FBadRow = Module.findExportByName("mmgaclient.dll", "FBadRow")
Interceptor.attach(FBadRow, {onLeave: function (args) {send("FBadRow");}});

var FBadRowSet = Module.findExportByName("mmgaclient.dll", "FBadRowSet")
Interceptor.attach(FBadRowSet, {onLeave: function (args) {send("FBadRowSet");}});

var FBadSortOrderSet = Module.findExportByName("mmgaclient.dll", "FBadSortOrderSet")
Interceptor.attach(FBadSortOrderSet, {onLeave: function (args) {send("FBadSortOrderSet");}});

var FEqualNames = Module.findExportByName("mmgaclient.dll", "FEqualNames")
Interceptor.attach(FEqualNames, {onLeave: function (args) {send("FEqualNames");}});

var FPropCompareProp = Module.findExportByName("mmgaclient.dll", "FPropCompareProp")
Interceptor.attach(FPropCompareProp, {onLeave: function (args) {send("FPropCompareProp");}});

var FPropContainsProp = Module.findExportByName("mmgaclient.dll", "FPropContainsProp")
Interceptor.attach(FPropContainsProp, {onLeave: function (args) {send("FPropContainsProp");}});

var FPropExists = Module.findExportByName("mmgaclient.dll", "FPropExists")
Interceptor.attach(FPropExists, {onLeave: function (args) {send("FPropExists");}});

var ForceMmgaserverArchitecture = Module.findExportByName("mmgaclient.dll", "ForceMmgaserverArchitecture")
Interceptor.attach(ForceMmgaserverArchitecture, {onLeave: function (args) {send("ForceMmgaserverArchitecture");}});

var FreePadrlist = Module.findExportByName("mmgaclient.dll", "FreePadrlist")
Interceptor.attach(FreePadrlist, {onLeave: function (args) {send("FreePadrlist");}});

var FreeProws = Module.findExportByName("mmgaclient.dll", "FreeProws")
Interceptor.attach(FreeProws, {onLeave: function (args) {send("FreeProws");}});

var FtgRegisterIdleRoutine = Module.findExportByName("mmgaclient.dll", "FtgRegisterIdleRoutine")
Interceptor.attach(FtgRegisterIdleRoutine, {onLeave: function (args) {send("FtgRegisterIdleRoutine");}});

var GetAttribIMsgOnIStg = Module.findExportByName("mmgaclient.dll", "GetAttribIMsgOnIStg")
Interceptor.attach(GetAttribIMsgOnIStg, {onLeave: function (args) {send("GetAttribIMsgOnIStg");}});

var GetTnefStreamCodepage = Module.findExportByName("mmgaclient.dll", "GetTnefStreamCodepage")
Interceptor.attach(GetTnefStreamCodepage, {onLeave: function (args) {send("GetTnefStreamCodepage");}});

var HrAddColumns = Module.findExportByName("mmgaclient.dll", "HrAddColumns")
Interceptor.attach(HrAddColumns, {onLeave: function (args) {send("HrAddColumns");}});

var HrAddColumnsEx = Module.findExportByName("mmgaclient.dll", "HrAddColumnsEx")
Interceptor.attach(HrAddColumnsEx, {onLeave: function (args) {send("HrAddColumnsEx");}});

var HrComposeEID = Module.findExportByName("mmgaclient.dll", "HrComposeEID")
Interceptor.attach(HrComposeEID, {onLeave: function (args) {send("HrComposeEID");}});

var HrComposeMsgID = Module.findExportByName("mmgaclient.dll", "HrComposeMsgID")
Interceptor.attach(HrComposeMsgID, {onLeave: function (args) {send("HrComposeMsgID");}});

var HrDecomposeEID = Module.findExportByName("mmgaclient.dll", "HrDecomposeEID")
Interceptor.attach(HrDecomposeEID, {onLeave: function (args) {send("HrDecomposeEID");}});

var HrDecomposeMsgID = Module.findExportByName("mmgaclient.dll", "HrDecomposeMsgID")
Interceptor.attach(HrDecomposeMsgID, {onLeave: function (args) {send("HrDecomposeMsgID");}});

var HrDispatchNotifications = Module.findExportByName("mmgaclient.dll", "HrDispatchNotifications")
Interceptor.attach(HrDispatchNotifications, {onLeave: function (args) {send("HrDispatchNotifications");}});

var HrEntryIDFromSz = Module.findExportByName("mmgaclient.dll", "HrEntryIDFromSz")
Interceptor.attach(HrEntryIDFromSz, {onLeave: function (args) {send("HrEntryIDFromSz");}});

var HrGetOneProp = Module.findExportByName("mmgaclient.dll", "HrGetOneProp")
Interceptor.attach(HrGetOneProp, {onLeave: function (args) {send("HrGetOneProp");}});

var HrIStorageFromStream = Module.findExportByName("mmgaclient.dll", "HrIStorageFromStream")
Interceptor.attach(HrIStorageFromStream, {onLeave: function (args) {send("HrIStorageFromStream");}});

var HrQueryAllRows = Module.findExportByName("mmgaclient.dll", "HrQueryAllRows")
Interceptor.attach(HrQueryAllRows, {onLeave: function (args) {send("HrQueryAllRows");}});

var HrSetOneProp = Module.findExportByName("mmgaclient.dll", "HrSetOneProp")
Interceptor.attach(HrSetOneProp, {onLeave: function (args) {send("HrSetOneProp");}});

var HrSzFromEntryID = Module.findExportByName("mmgaclient.dll", "HrSzFromEntryID")
Interceptor.attach(HrSzFromEntryID, {onLeave: function (args) {send("HrSzFromEntryID");}});

var HrValidateIPMSubtree = Module.findExportByName("mmgaclient.dll", "HrValidateIPMSubtree")
Interceptor.attach(HrValidateIPMSubtree, {onLeave: function (args) {send("HrValidateIPMSubtree");}});

var LpValFindProp = Module.findExportByName("mmgaclient.dll", "LpValFindProp")
Interceptor.attach(LpValFindProp, {onLeave: function (args) {send("LpValFindProp");}});

var MAPIAddress = Module.findExportByName("mmgaclient.dll", "MAPIAddress")
Interceptor.attach(MAPIAddress, {onLeave: function (args) {send("MAPIAddress");}});

var MAPIAdminProfiles = Module.findExportByName("mmgaclient.dll", "MAPIAdminProfiles")
Interceptor.attach(MAPIAdminProfiles, {onLeave: function (args) {send("MAPIAdminProfiles");}});

var MAPIAllocateBuffer = Module.findExportByName("mmgaclient.dll", "MAPIAllocateBuffer")
Interceptor.attach(MAPIAllocateBuffer, {onLeave: function (args) {send("MAPIAllocateBuffer");}});

var MAPIAllocateMore = Module.findExportByName("mmgaclient.dll", "MAPIAllocateMore")
Interceptor.attach(MAPIAllocateMore, {onLeave: function (args) {send("MAPIAllocateMore");}});

var MAPIDeinitIdle = Module.findExportByName("mmgaclient.dll", "MAPIDeinitIdle")
Interceptor.attach(MAPIDeinitIdle, {onLeave: function (args) {send("MAPIDeinitIdle");}});

var MAPIDeleteMail = Module.findExportByName("mmgaclient.dll", "MAPIDeleteMail")
Interceptor.attach(MAPIDeleteMail, {onLeave: function (args) {send("MAPIDeleteMail");}});

var MAPIDetails = Module.findExportByName("mmgaclient.dll", "MAPIDetails")
Interceptor.attach(MAPIDetails, {onLeave: function (args) {send("MAPIDetails");}});

var MAPIFindNext = Module.findExportByName("mmgaclient.dll", "MAPIFindNext")
Interceptor.attach(MAPIFindNext, {onLeave: function (args) {send("MAPIFindNext");}});

var MAPIFreeBuffer = Module.findExportByName("mmgaclient.dll", "MAPIFreeBuffer")
Interceptor.attach(MAPIFreeBuffer, {onLeave: function (args) {send("MAPIFreeBuffer");}});

var MAPIGetDefaultMalloc = Module.findExportByName("mmgaclient.dll", "MAPIGetDefaultMalloc")
Interceptor.attach(MAPIGetDefaultMalloc, {onLeave: function (args) {send("MAPIGetDefaultMalloc");}});

var MAPIInitIdle = Module.findExportByName("mmgaclient.dll", "MAPIInitIdle")
Interceptor.attach(MAPIInitIdle, {onLeave: function (args) {send("MAPIInitIdle");}});

var MAPIInitialize = Module.findExportByName("mmgaclient.dll", "MAPIInitialize")
Interceptor.attach(MAPIInitialize, {onLeave: function (args) {send("MAPIInitialize");}});

var MAPILogoff = Module.findExportByName("mmgaclient.dll", "MAPILogoff")
Interceptor.attach(MAPILogoff, {onLeave: function (args) {send("MAPILogoff");}});

var MAPILogon = Module.findExportByName("mmgaclient.dll", "MAPILogon")
Interceptor.attach(MAPILogon, {onLeave: function (args) {send("MAPILogon");}});

var MAPILogonEx = Module.findExportByName("mmgaclient.dll", "MAPILogonEx")
Interceptor.attach(MAPILogonEx, {onLeave: function (args) {send("MAPILogonEx");}});

var MAPIOpenFormMgr = Module.findExportByName("mmgaclient.dll", "MAPIOpenFormMgr")
Interceptor.attach(MAPIOpenFormMgr, {onLeave: function (args) {send("MAPIOpenFormMgr");}});

var MAPIOpenLocalFormContainer = Module.findExportByName("mmgaclient.dll", "MAPIOpenLocalFormContainer")
Interceptor.attach(MAPIOpenLocalFormContainer, {onLeave: function (args) {send("MAPIOpenLocalFormContainer");}});

var MAPIReadMail = Module.findExportByName("mmgaclient.dll", "MAPIReadMail")
Interceptor.attach(MAPIReadMail, {onLeave: function (args) {send("MAPIReadMail");}});

var MAPIResolveName = Module.findExportByName("mmgaclient.dll", "MAPIResolveName")
Interceptor.attach(MAPIResolveName, {onLeave: function (args) {send("MAPIResolveName");}});

var MAPISaveMail = Module.findExportByName("mmgaclient.dll", "MAPISaveMail")
Interceptor.attach(MAPISaveMail, {onLeave: function (args) {send("MAPISaveMail");}});

var MAPISendMail = Module.findExportByName("mmgaclient.dll", "MAPISendMail")
Interceptor.attach(MAPISendMail, {onLeave: function (args) {send("MAPISendMail");}});

var MAPISendMailDocuments = Module.findExportByName("mmgaclient.dll", "MAPISendMailDocuments")
Interceptor.attach(MAPISendMailDocuments, {onLeave: function (args) {send("MAPISendMailDocuments");}});

var MAPISendMailW = Module.findExportByName("mmgaclient.dll", "MAPISendMailW")
Interceptor.attach(MAPISendMailW, {onLeave: function (args) {send("MAPISendMailW");}});

var MAPIUninitialize = Module.findExportByName("mmgaclient.dll", "MAPIUninitialize")
Interceptor.attach(MAPIUninitialize, {onLeave: function (args) {send("MAPIUninitialize");}});

var MapStorageSCode = Module.findExportByName("mmgaclient.dll", "MapStorageSCode")
Interceptor.attach(MapStorageSCode, {onLeave: function (args) {send("MapStorageSCode");}});

var OpenIMsgOnIStg = Module.findExportByName("mmgaclient.dll", "OpenIMsgOnIStg")
Interceptor.attach(OpenIMsgOnIStg, {onLeave: function (args) {send("OpenIMsgOnIStg");}});

var OpenStreamOnFile = Module.findExportByName("mmgaclient.dll", "OpenStreamOnFile")
Interceptor.attach(OpenStreamOnFile, {onLeave: function (args) {send("OpenStreamOnFile");}});

var OpenTnefStream = Module.findExportByName("mmgaclient.dll", "OpenTnefStream")
Interceptor.attach(OpenTnefStream, {onLeave: function (args) {send("OpenTnefStream");}});

var OpenTnefStreamEx = Module.findExportByName("mmgaclient.dll", "OpenTnefStreamEx")
Interceptor.attach(OpenTnefStreamEx, {onLeave: function (args) {send("OpenTnefStreamEx");}});

var PpropFindProp = Module.findExportByName("mmgaclient.dll", "PpropFindProp")
Interceptor.attach(PpropFindProp, {onLeave: function (args) {send("PpropFindProp");}});

var PropCopyMore = Module.findExportByName("mmgaclient.dll", "PropCopyMore")
Interceptor.attach(PropCopyMore, {onLeave: function (args) {send("PropCopyMore");}});

var RTFSync = Module.findExportByName("mmgaclient.dll", "RTFSync")
Interceptor.attach(RTFSync, {onLeave: function (args) {send("RTFSync");}});

var ScCopyProps = Module.findExportByName("mmgaclient.dll", "ScCopyProps")
Interceptor.attach(ScCopyProps, {onLeave: function (args) {send("ScCopyProps");}});

var ScCountProps = Module.findExportByName("mmgaclient.dll", "ScCountProps")
Interceptor.attach(ScCountProps, {onLeave: function (args) {send("ScCountProps");}});

var ScCreateConversationIndex = Module.findExportByName("mmgaclient.dll", "ScCreateConversationIndex")
Interceptor.attach(ScCreateConversationIndex, {onLeave: function (args) {send("ScCreateConversationIndex");}});

var ScDupPropset = Module.findExportByName("mmgaclient.dll", "ScDupPropset")
Interceptor.attach(ScDupPropset, {onLeave: function (args) {send("ScDupPropset");}});

var ScInitMapiUtil = Module.findExportByName("mmgaclient.dll", "ScInitMapiUtil")
Interceptor.attach(ScInitMapiUtil, {onLeave: function (args) {send("ScInitMapiUtil");}});

var SetAttribIMsgOnIStg = Module.findExportByName("mmgaclient.dll", "SetAttribIMsgOnIStg")
Interceptor.attach(SetAttribIMsgOnIStg, {onLeave: function (args) {send("SetAttribIMsgOnIStg");}});

var SetUpForOutOfContainer = Module.findExportByName("mmgaclient.dll", "SetUpForOutOfContainer")
Interceptor.attach(SetUpForOutOfContainer, {onLeave: function (args) {send("SetUpForOutOfContainer");}});

var UlPropSize = Module.findExportByName("mmgaclient.dll", "UlPropSize")
Interceptor.attach(UlPropSize, {onLeave: function (args) {send("UlPropSize");}});

var WrapCompressedRTFStream = Module.findExportByName("mmgaclient.dll", "WrapCompressedRTFStream")
Interceptor.attach(WrapCompressedRTFStream, {onLeave: function (args) {send("WrapCompressedRTFStream");}});

var WrapStoreEntryID = Module.findExportByName("mmgaclient.dll", "WrapStoreEntryID")
Interceptor.attach(WrapStoreEntryID, {onLeave: function (args) {send("WrapStoreEntryID");}});

