var CPAcquireContext = Module.findExportByName("rsaenh.dll", "CPAcquireContext")
Interceptor.attach(CPAcquireContext, {onLeave: function (args) {send("CPAcquireContext");}});

var CPCreateHash = Module.findExportByName("rsaenh.dll", "CPCreateHash")
Interceptor.attach(CPCreateHash, {onLeave: function (args) {send("CPCreateHash");}});

var CPDecrypt = Module.findExportByName("rsaenh.dll", "CPDecrypt")
Interceptor.attach(CPDecrypt, {onLeave: function (args) {send("CPDecrypt");}});

var CPDeriveKey = Module.findExportByName("rsaenh.dll", "CPDeriveKey")
Interceptor.attach(CPDeriveKey, {onLeave: function (args) {send("CPDeriveKey");}});

var CPDestroyHash = Module.findExportByName("rsaenh.dll", "CPDestroyHash")
Interceptor.attach(CPDestroyHash, {onLeave: function (args) {send("CPDestroyHash");}});

var CPDestroyKey = Module.findExportByName("rsaenh.dll", "CPDestroyKey")
Interceptor.attach(CPDestroyKey, {onLeave: function (args) {send("CPDestroyKey");}});

var CPDuplicateHash = Module.findExportByName("rsaenh.dll", "CPDuplicateHash")
Interceptor.attach(CPDuplicateHash, {onLeave: function (args) {send("CPDuplicateHash");}});

var CPDuplicateKey = Module.findExportByName("rsaenh.dll", "CPDuplicateKey")
Interceptor.attach(CPDuplicateKey, {onLeave: function (args) {send("CPDuplicateKey");}});

var CPEncrypt = Module.findExportByName("rsaenh.dll", "CPEncrypt")
Interceptor.attach(CPEncrypt, {onLeave: function (args) {send("CPEncrypt");}});

var CPExportKey = Module.findExportByName("rsaenh.dll", "CPExportKey")
Interceptor.attach(CPExportKey, {onLeave: function (args) {send("CPExportKey");}});

var CPGenKey = Module.findExportByName("rsaenh.dll", "CPGenKey")
Interceptor.attach(CPGenKey, {onLeave: function (args) {send("CPGenKey");}});

var CPGenRandom = Module.findExportByName("rsaenh.dll", "CPGenRandom")
Interceptor.attach(CPGenRandom, {onLeave: function (args) {send("CPGenRandom");}});

var CPGetHashParam = Module.findExportByName("rsaenh.dll", "CPGetHashParam")
Interceptor.attach(CPGetHashParam, {onLeave: function (args) {send("CPGetHashParam");}});

var CPGetKeyParam = Module.findExportByName("rsaenh.dll", "CPGetKeyParam")
Interceptor.attach(CPGetKeyParam, {onLeave: function (args) {send("CPGetKeyParam");}});

var CPGetProvParam = Module.findExportByName("rsaenh.dll", "CPGetProvParam")
Interceptor.attach(CPGetProvParam, {onLeave: function (args) {send("CPGetProvParam");}});

var CPGetUserKey = Module.findExportByName("rsaenh.dll", "CPGetUserKey")
Interceptor.attach(CPGetUserKey, {onLeave: function (args) {send("CPGetUserKey");}});

var CPHashData = Module.findExportByName("rsaenh.dll", "CPHashData")
Interceptor.attach(CPHashData, {onLeave: function (args) {send("CPHashData");}});

var CPHashSessionKey = Module.findExportByName("rsaenh.dll", "CPHashSessionKey")
Interceptor.attach(CPHashSessionKey, {onLeave: function (args) {send("CPHashSessionKey");}});

var CPImportKey = Module.findExportByName("rsaenh.dll", "CPImportKey")
Interceptor.attach(CPImportKey, {onLeave: function (args) {send("CPImportKey");}});

var CPReleaseContext = Module.findExportByName("rsaenh.dll", "CPReleaseContext")
Interceptor.attach(CPReleaseContext, {onLeave: function (args) {send("CPReleaseContext");}});

var CPSetHashParam = Module.findExportByName("rsaenh.dll", "CPSetHashParam")
Interceptor.attach(CPSetHashParam, {onLeave: function (args) {send("CPSetHashParam");}});

var CPSetKeyParam = Module.findExportByName("rsaenh.dll", "CPSetKeyParam")
Interceptor.attach(CPSetKeyParam, {onLeave: function (args) {send("CPSetKeyParam");}});

var CPSetProvParam = Module.findExportByName("rsaenh.dll", "CPSetProvParam")
Interceptor.attach(CPSetProvParam, {onLeave: function (args) {send("CPSetProvParam");}});

var CPSignHash = Module.findExportByName("rsaenh.dll", "CPSignHash")
Interceptor.attach(CPSignHash, {onLeave: function (args) {send("CPSignHash");}});

var CPVerifySignature = Module.findExportByName("rsaenh.dll", "CPVerifySignature")
Interceptor.attach(CPVerifySignature, {onLeave: function (args) {send("CPVerifySignature");}});

var DllRegisterServer = Module.findExportByName("rsaenh.dll", "DllRegisterServer")
Interceptor.attach(DllRegisterServer, {onLeave: function (args) {send("DllRegisterServer");}});

var DllUnregisterServer = Module.findExportByName("rsaenh.dll", "DllUnregisterServer")
Interceptor.attach(DllUnregisterServer, {onLeave: function (args) {send("DllUnregisterServer");}});

