var acmDriverAddA = Module.findExportByName("msacm32.dll", "acmDriverAddA")
Interceptor.attach(acmDriverAddA, {onLeave: function (args) {send("acmDriverAddA");}});

var acmDriverAddW = Module.findExportByName("msacm32.dll", "acmDriverAddW")
Interceptor.attach(acmDriverAddW, {onLeave: function (args) {send("acmDriverAddW");}});

var acmDriverClose = Module.findExportByName("msacm32.dll", "acmDriverClose")
Interceptor.attach(acmDriverClose, {onLeave: function (args) {send("acmDriverClose");}});

var acmDriverDetailsA = Module.findExportByName("msacm32.dll", "acmDriverDetailsA")
Interceptor.attach(acmDriverDetailsA, {onLeave: function (args) {send("acmDriverDetailsA");}});

var acmDriverDetailsW = Module.findExportByName("msacm32.dll", "acmDriverDetailsW")
Interceptor.attach(acmDriverDetailsW, {onLeave: function (args) {send("acmDriverDetailsW");}});

var acmDriverEnum = Module.findExportByName("msacm32.dll", "acmDriverEnum")
Interceptor.attach(acmDriverEnum, {onLeave: function (args) {send("acmDriverEnum");}});

var acmDriverID = Module.findExportByName("msacm32.dll", "acmDriverID")
Interceptor.attach(acmDriverID, {onLeave: function (args) {send("acmDriverID");}});

var acmDriverMessage = Module.findExportByName("msacm32.dll", "acmDriverMessage")
Interceptor.attach(acmDriverMessage, {onLeave: function (args) {send("acmDriverMessage");}});

var acmDriverOpen = Module.findExportByName("msacm32.dll", "acmDriverOpen")
Interceptor.attach(acmDriverOpen, {onLeave: function (args) {send("acmDriverOpen");}});

var acmDriverPriority = Module.findExportByName("msacm32.dll", "acmDriverPriority")
Interceptor.attach(acmDriverPriority, {onLeave: function (args) {send("acmDriverPriority");}});

var acmDriverRemove = Module.findExportByName("msacm32.dll", "acmDriverRemove")
Interceptor.attach(acmDriverRemove, {onLeave: function (args) {send("acmDriverRemove");}});

var acmFilterChooseA = Module.findExportByName("msacm32.dll", "acmFilterChooseA")
Interceptor.attach(acmFilterChooseA, {onLeave: function (args) {send("acmFilterChooseA");}});

var acmFilterChooseW = Module.findExportByName("msacm32.dll", "acmFilterChooseW")
Interceptor.attach(acmFilterChooseW, {onLeave: function (args) {send("acmFilterChooseW");}});

var acmFilterDetailsA = Module.findExportByName("msacm32.dll", "acmFilterDetailsA")
Interceptor.attach(acmFilterDetailsA, {onLeave: function (args) {send("acmFilterDetailsA");}});

var acmFilterDetailsW = Module.findExportByName("msacm32.dll", "acmFilterDetailsW")
Interceptor.attach(acmFilterDetailsW, {onLeave: function (args) {send("acmFilterDetailsW");}});

var acmFilterEnumA = Module.findExportByName("msacm32.dll", "acmFilterEnumA")
Interceptor.attach(acmFilterEnumA, {onLeave: function (args) {send("acmFilterEnumA");}});

var acmFilterEnumW = Module.findExportByName("msacm32.dll", "acmFilterEnumW")
Interceptor.attach(acmFilterEnumW, {onLeave: function (args) {send("acmFilterEnumW");}});

var acmFilterTagDetailsA = Module.findExportByName("msacm32.dll", "acmFilterTagDetailsA")
Interceptor.attach(acmFilterTagDetailsA, {onLeave: function (args) {send("acmFilterTagDetailsA");}});

var acmFilterTagDetailsW = Module.findExportByName("msacm32.dll", "acmFilterTagDetailsW")
Interceptor.attach(acmFilterTagDetailsW, {onLeave: function (args) {send("acmFilterTagDetailsW");}});

var acmFilterTagEnumA = Module.findExportByName("msacm32.dll", "acmFilterTagEnumA")
Interceptor.attach(acmFilterTagEnumA, {onLeave: function (args) {send("acmFilterTagEnumA");}});

var acmFilterTagEnumW = Module.findExportByName("msacm32.dll", "acmFilterTagEnumW")
Interceptor.attach(acmFilterTagEnumW, {onLeave: function (args) {send("acmFilterTagEnumW");}});

var acmFormatChooseA = Module.findExportByName("msacm32.dll", "acmFormatChooseA")
Interceptor.attach(acmFormatChooseA, {onLeave: function (args) {send("acmFormatChooseA");}});

var acmFormatChooseW = Module.findExportByName("msacm32.dll", "acmFormatChooseW")
Interceptor.attach(acmFormatChooseW, {onLeave: function (args) {send("acmFormatChooseW");}});

var acmFormatDetailsA = Module.findExportByName("msacm32.dll", "acmFormatDetailsA")
Interceptor.attach(acmFormatDetailsA, {onLeave: function (args) {send("acmFormatDetailsA");}});

var acmFormatDetailsW = Module.findExportByName("msacm32.dll", "acmFormatDetailsW")
Interceptor.attach(acmFormatDetailsW, {onLeave: function (args) {send("acmFormatDetailsW");}});

var acmFormatEnumA = Module.findExportByName("msacm32.dll", "acmFormatEnumA")
Interceptor.attach(acmFormatEnumA, {onLeave: function (args) {send("acmFormatEnumA");}});

var acmFormatEnumW = Module.findExportByName("msacm32.dll", "acmFormatEnumW")
Interceptor.attach(acmFormatEnumW, {onLeave: function (args) {send("acmFormatEnumW");}});

var acmFormatSuggest = Module.findExportByName("msacm32.dll", "acmFormatSuggest")
Interceptor.attach(acmFormatSuggest, {onLeave: function (args) {send("acmFormatSuggest");}});

var acmFormatTagDetailsA = Module.findExportByName("msacm32.dll", "acmFormatTagDetailsA")
Interceptor.attach(acmFormatTagDetailsA, {onLeave: function (args) {send("acmFormatTagDetailsA");}});

var acmFormatTagDetailsW = Module.findExportByName("msacm32.dll", "acmFormatTagDetailsW")
Interceptor.attach(acmFormatTagDetailsW, {onLeave: function (args) {send("acmFormatTagDetailsW");}});

var acmFormatTagEnumA = Module.findExportByName("msacm32.dll", "acmFormatTagEnumA")
Interceptor.attach(acmFormatTagEnumA, {onLeave: function (args) {send("acmFormatTagEnumA");}});

var acmFormatTagEnumW = Module.findExportByName("msacm32.dll", "acmFormatTagEnumW")
Interceptor.attach(acmFormatTagEnumW, {onLeave: function (args) {send("acmFormatTagEnumW");}});

var acmGetVersion = Module.findExportByName("msacm32.dll", "acmGetVersion")
Interceptor.attach(acmGetVersion, {onLeave: function (args) {send("acmGetVersion");}});

var acmMetrics = Module.findExportByName("msacm32.dll", "acmMetrics")
Interceptor.attach(acmMetrics, {onLeave: function (args) {send("acmMetrics");}});

var acmStreamClose = Module.findExportByName("msacm32.dll", "acmStreamClose")
Interceptor.attach(acmStreamClose, {onLeave: function (args) {send("acmStreamClose");}});

var acmStreamConvert = Module.findExportByName("msacm32.dll", "acmStreamConvert")
Interceptor.attach(acmStreamConvert, {onLeave: function (args) {send("acmStreamConvert");}});

var acmStreamMessage = Module.findExportByName("msacm32.dll", "acmStreamMessage")
Interceptor.attach(acmStreamMessage, {onLeave: function (args) {send("acmStreamMessage");}});

var acmStreamOpen = Module.findExportByName("msacm32.dll", "acmStreamOpen")
Interceptor.attach(acmStreamOpen, {onLeave: function (args) {send("acmStreamOpen");}});

var acmStreamPrepareHeader = Module.findExportByName("msacm32.dll", "acmStreamPrepareHeader")
Interceptor.attach(acmStreamPrepareHeader, {onLeave: function (args) {send("acmStreamPrepareHeader");}});

var acmStreamReset = Module.findExportByName("msacm32.dll", "acmStreamReset")
Interceptor.attach(acmStreamReset, {onLeave: function (args) {send("acmStreamReset");}});

var acmStreamSize = Module.findExportByName("msacm32.dll", "acmStreamSize")
Interceptor.attach(acmStreamSize, {onLeave: function (args) {send("acmStreamSize");}});

var acmStreamUnprepareHeader = Module.findExportByName("msacm32.dll", "acmStreamUnprepareHeader")
Interceptor.attach(acmStreamUnprepareHeader, {onLeave: function (args) {send("acmStreamUnprepareHeader");}});

