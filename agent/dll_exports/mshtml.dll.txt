var ClearPhishingFilterData = Module.findExportByName("mshtml.dll", "ClearPhishingFilterData")
Interceptor.attach(ClearPhishingFilterData, {onLeave: function (args) {send("ClearPhishingFilterData");}});

var ConvertAndEscapePostData = Module.findExportByName("mshtml.dll", "ConvertAndEscapePostData")
Interceptor.attach(ConvertAndEscapePostData, {onLeave: function (args) {send("ConvertAndEscapePostData");}});

var CreateCoreWebView = Module.findExportByName("mshtml.dll", "CreateCoreWebView")
Interceptor.attach(CreateCoreWebView, {onLeave: function (args) {send("CreateCoreWebView");}});

var CreateHTMLPropertyPage = Module.findExportByName("mshtml.dll", "CreateHTMLPropertyPage")
Interceptor.attach(CreateHTMLPropertyPage, {onLeave: function (args) {send("CreateHTMLPropertyPage");}});

var DllCanUnloadNow = Module.findExportByName("mshtml.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllEnumClassObjects = Module.findExportByName("mshtml.dll", "DllEnumClassObjects")
Interceptor.attach(DllEnumClassObjects, {onLeave: function (args) {send("DllEnumClassObjects");}});

var DllGetClassObject = Module.findExportByName("mshtml.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var GetColorValueFromString = Module.findExportByName("mshtml.dll", "GetColorValueFromString")
Interceptor.attach(GetColorValueFromString, {onLeave: function (args) {send("GetColorValueFromString");}});

var GetWebPlatformObject = Module.findExportByName("mshtml.dll", "GetWebPlatformObject")
Interceptor.attach(GetWebPlatformObject, {onLeave: function (args) {send("GetWebPlatformObject");}});

var IEIsXMLNSRegistered = Module.findExportByName("mshtml.dll", "IEIsXMLNSRegistered")
Interceptor.attach(IEIsXMLNSRegistered, {onLeave: function (args) {send("IEIsXMLNSRegistered");}});

var IERegisterXMLNS = Module.findExportByName("mshtml.dll", "IERegisterXMLNS")
Interceptor.attach(IERegisterXMLNS, {onLeave: function (args) {send("IERegisterXMLNS");}});

var InitializeLocalHtmlEngine = Module.findExportByName("mshtml.dll", "InitializeLocalHtmlEngine")
Interceptor.attach(InitializeLocalHtmlEngine, {onLeave: function (args) {send("InitializeLocalHtmlEngine");}});

var MatchExactGetIDsOfNames = Module.findExportByName("mshtml.dll", "MatchExactGetIDsOfNames")
Interceptor.attach(MatchExactGetIDsOfNames, {onLeave: function (args) {send("MatchExactGetIDsOfNames");}});

var PrintHTML = Module.findExportByName("mshtml.dll", "PrintHTML")
Interceptor.attach(PrintHTML, {onLeave: function (args) {send("PrintHTML");}});

var RunHTMLApplication = Module.findExportByName("mshtml.dll", "RunHTMLApplication")
Interceptor.attach(RunHTMLApplication, {onLeave: function (args) {send("RunHTMLApplication");}});

var ShowHTMLDialog = Module.findExportByName("mshtml.dll", "ShowHTMLDialog")
Interceptor.attach(ShowHTMLDialog, {onLeave: function (args) {send("ShowHTMLDialog");}});

var ShowHTMLDialogEx = Module.findExportByName("mshtml.dll", "ShowHTMLDialogEx")
Interceptor.attach(ShowHTMLDialogEx, {onLeave: function (args) {send("ShowHTMLDialogEx");}});

var ShowModalDialog = Module.findExportByName("mshtml.dll", "ShowModalDialog")
Interceptor.attach(ShowModalDialog, {onLeave: function (args) {send("ShowModalDialog");}});

var ShowModelessHTMLDialog = Module.findExportByName("mshtml.dll", "ShowModelessHTMLDialog")
Interceptor.attach(ShowModelessHTMLDialog, {onLeave: function (args) {send("ShowModelessHTMLDialog");}});

var TravelLogCreateInstance = Module.findExportByName("mshtml.dll", "TravelLogCreateInstance")
Interceptor.attach(TravelLogCreateInstance, {onLeave: function (args) {send("TravelLogCreateInstance");}});

var TravelLogStgCreateInstance = Module.findExportByName("mshtml.dll", "TravelLogStgCreateInstance")
Interceptor.attach(TravelLogStgCreateInstance, {onLeave: function (args) {send("TravelLogStgCreateInstance");}});

var UninitializeLocalHtmlEngine = Module.findExportByName("mshtml.dll", "UninitializeLocalHtmlEngine")
Interceptor.attach(UninitializeLocalHtmlEngine, {onLeave: function (args) {send("UninitializeLocalHtmlEngine");}});

