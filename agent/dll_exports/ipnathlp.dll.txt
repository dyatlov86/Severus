var NatAcquirePortReservation = Module.findExportByName("ipnathlp.dll", "NatAcquirePortReservation")
Interceptor.attach(NatAcquirePortReservation, {onLeave: function (args) {send("NatAcquirePortReservation");}});

var NatCancelDynamicRedirect = Module.findExportByName("ipnathlp.dll", "NatCancelDynamicRedirect")
Interceptor.attach(NatCancelDynamicRedirect, {onLeave: function (args) {send("NatCancelDynamicRedirect");}});

var NatCancelRedirect = Module.findExportByName("ipnathlp.dll", "NatCancelRedirect")
Interceptor.attach(NatCancelRedirect, {onLeave: function (args) {send("NatCancelRedirect");}});

var NatCreateDynamicFullRedirect = Module.findExportByName("ipnathlp.dll", "NatCreateDynamicFullRedirect")
Interceptor.attach(NatCreateDynamicFullRedirect, {onLeave: function (args) {send("NatCreateDynamicFullRedirect");}});

var NatCreateDynamicRedirect = Module.findExportByName("ipnathlp.dll", "NatCreateDynamicRedirect")
Interceptor.attach(NatCreateDynamicRedirect, {onLeave: function (args) {send("NatCreateDynamicRedirect");}});

var NatCreateDynamicRedirectEx = Module.findExportByName("ipnathlp.dll", "NatCreateDynamicRedirectEx")
Interceptor.attach(NatCreateDynamicRedirectEx, {onLeave: function (args) {send("NatCreateDynamicRedirectEx");}});

var NatCreateRedirect = Module.findExportByName("ipnathlp.dll", "NatCreateRedirect")
Interceptor.attach(NatCreateRedirect, {onLeave: function (args) {send("NatCreateRedirect");}});

var NatCreateRedirectEx = Module.findExportByName("ipnathlp.dll", "NatCreateRedirectEx")
Interceptor.attach(NatCreateRedirectEx, {onLeave: function (args) {send("NatCreateRedirectEx");}});

var NatInitializePortReservation = Module.findExportByName("ipnathlp.dll", "NatInitializePortReservation")
Interceptor.attach(NatInitializePortReservation, {onLeave: function (args) {send("NatInitializePortReservation");}});

var NatInitializeTranslator = Module.findExportByName("ipnathlp.dll", "NatInitializeTranslator")
Interceptor.attach(NatInitializeTranslator, {onLeave: function (args) {send("NatInitializeTranslator");}});

var NatLookupAndQueryInformationSessionMapping = Module.findExportByName("ipnathlp.dll", "NatLookupAndQueryInformationSessionMapping")
Interceptor.attach(NatLookupAndQueryInformationSessionMapping, {onLeave: function (args) {send("NatLookupAndQueryInformationSessionMapping");}});

var NatQueryInformationRedirect = Module.findExportByName("ipnathlp.dll", "NatQueryInformationRedirect")
Interceptor.attach(NatQueryInformationRedirect, {onLeave: function (args) {send("NatQueryInformationRedirect");}});

var NatQueryInformationRedirectHandle = Module.findExportByName("ipnathlp.dll", "NatQueryInformationRedirectHandle")
Interceptor.attach(NatQueryInformationRedirectHandle, {onLeave: function (args) {send("NatQueryInformationRedirectHandle");}});

var NatReleasePortReservation = Module.findExportByName("ipnathlp.dll", "NatReleasePortReservation")
Interceptor.attach(NatReleasePortReservation, {onLeave: function (args) {send("NatReleasePortReservation");}});

var NatShutdownPortReservation = Module.findExportByName("ipnathlp.dll", "NatShutdownPortReservation")
Interceptor.attach(NatShutdownPortReservation, {onLeave: function (args) {send("NatShutdownPortReservation");}});

var NatShutdownTranslator = Module.findExportByName("ipnathlp.dll", "NatShutdownTranslator")
Interceptor.attach(NatShutdownTranslator, {onLeave: function (args) {send("NatShutdownTranslator");}});

var NhAcceptStreamSocket = Module.findExportByName("ipnathlp.dll", "NhAcceptStreamSocket")
Interceptor.attach(NhAcceptStreamSocket, {onLeave: function (args) {send("NhAcceptStreamSocket");}});

var NhAcquireFixedLengthBuffer = Module.findExportByName("ipnathlp.dll", "NhAcquireFixedLengthBuffer")
Interceptor.attach(NhAcquireFixedLengthBuffer, {onLeave: function (args) {send("NhAcquireFixedLengthBuffer");}});

var NhAcquireVariableLengthBuffer = Module.findExportByName("ipnathlp.dll", "NhAcquireVariableLengthBuffer")
Interceptor.attach(NhAcquireVariableLengthBuffer, {onLeave: function (args) {send("NhAcquireVariableLengthBuffer");}});

var NhCreateDatagramSocket = Module.findExportByName("ipnathlp.dll", "NhCreateDatagramSocket")
Interceptor.attach(NhCreateDatagramSocket, {onLeave: function (args) {send("NhCreateDatagramSocket");}});

var NhCreateStreamSocket = Module.findExportByName("ipnathlp.dll", "NhCreateStreamSocket")
Interceptor.attach(NhCreateStreamSocket, {onLeave: function (args) {send("NhCreateStreamSocket");}});

var NhDeleteSocket = Module.findExportByName("ipnathlp.dll", "NhDeleteSocket")
Interceptor.attach(NhDeleteSocket, {onLeave: function (args) {send("NhDeleteSocket");}});

var NhInitializeBufferManagement = Module.findExportByName("ipnathlp.dll", "NhInitializeBufferManagement")
Interceptor.attach(NhInitializeBufferManagement, {onLeave: function (args) {send("NhInitializeBufferManagement");}});

var NhInitializeTraceManagement = Module.findExportByName("ipnathlp.dll", "NhInitializeTraceManagement")
Interceptor.attach(NhInitializeTraceManagement, {onLeave: function (args) {send("NhInitializeTraceManagement");}});

var NhReadDatagramSocket = Module.findExportByName("ipnathlp.dll", "NhReadDatagramSocket")
Interceptor.attach(NhReadDatagramSocket, {onLeave: function (args) {send("NhReadDatagramSocket");}});

var NhReadStreamSocket = Module.findExportByName("ipnathlp.dll", "NhReadStreamSocket")
Interceptor.attach(NhReadStreamSocket, {onLeave: function (args) {send("NhReadStreamSocket");}});

var NhReleaseBuffer = Module.findExportByName("ipnathlp.dll", "NhReleaseBuffer")
Interceptor.attach(NhReleaseBuffer, {onLeave: function (args) {send("NhReleaseBuffer");}});

var NhWriteDatagramSocket = Module.findExportByName("ipnathlp.dll", "NhWriteDatagramSocket")
Interceptor.attach(NhWriteDatagramSocket, {onLeave: function (args) {send("NhWriteDatagramSocket");}});

var NhWriteStreamSocket = Module.findExportByName("ipnathlp.dll", "NhWriteStreamSocket")
Interceptor.attach(NhWriteStreamSocket, {onLeave: function (args) {send("NhWriteStreamSocket");}});

var RegisterProtocol = Module.findExportByName("ipnathlp.dll", "RegisterProtocol")
Interceptor.attach(RegisterProtocol, {onLeave: function (args) {send("RegisterProtocol");}});

var ServiceMain = Module.findExportByName("ipnathlp.dll", "ServiceMain")
Interceptor.attach(ServiceMain, {onLeave: function (args) {send("ServiceMain");}});

var SvchostPushServiceGlobals = Module.findExportByName("ipnathlp.dll", "SvchostPushServiceGlobals")
Interceptor.attach(SvchostPushServiceGlobals, {onLeave: function (args) {send("SvchostPushServiceGlobals");}});

