var ActivatePackageVirtualizationContext = Module.findExportByName("daxexec.dll", "ActivatePackageVirtualizationContext")
Interceptor.attach(ActivatePackageVirtualizationContext, {onLeave: function (args) {send("ActivatePackageVirtualizationContext");}});

var AddLookaside = Module.findExportByName("daxexec.dll", "AddLookaside")
Interceptor.attach(AddLookaside, {onLeave: function (args) {send("AddLookaside");}});

var AddProcessToHeliumContainer = Module.findExportByName("daxexec.dll", "AddProcessToHeliumContainer")
Interceptor.attach(AddProcessToHeliumContainer, {onLeave: function (args) {send("AddProcessToHeliumContainer");}});

var CheckAppXPackageBreakaway = Module.findExportByName("daxexec.dll", "CheckAppXPackageBreakaway")
Interceptor.attach(CheckAppXPackageBreakaway, {onLeave: function (args) {send("CheckAppXPackageBreakaway");}});

var CheckApplicationInCurrentPackage = Module.findExportByName("daxexec.dll", "CheckApplicationInCurrentPackage")
Interceptor.attach(CheckApplicationInCurrentPackage, {onLeave: function (args) {send("CheckApplicationInCurrentPackage");}});

var CloseAppExecutionAlias = Module.findExportByName("daxexec.dll", "CloseAppExecutionAlias")
Interceptor.attach(CloseAppExecutionAlias, {onLeave: function (args) {send("CloseAppExecutionAlias");}});

var CloseJitvSilo = Module.findExportByName("daxexec.dll", "CloseJitvSilo")
Interceptor.attach(CloseJitvSilo, {onLeave: function (args) {send("CloseJitvSilo");}});

var CompleteAppExecutionAliasProcessCreation = Module.findExportByName("daxexec.dll", "CompleteAppExecutionAliasProcessCreation")
Interceptor.attach(CompleteAppExecutionAliasProcessCreation, {onLeave: function (args) {send("CompleteAppExecutionAliasProcessCreation");}});

var CreateAppExecutionAlias = Module.findExportByName("daxexec.dll", "CreateAppExecutionAlias")
Interceptor.attach(CreateAppExecutionAlias, {onLeave: function (args) {send("CreateAppExecutionAlias");}});

var CreateDesktopAppXActivationInfo = Module.findExportByName("daxexec.dll", "CreateDesktopAppXActivationInfo")
Interceptor.attach(CreateDesktopAppXActivationInfo, {onLeave: function (args) {send("CreateDesktopAppXActivationInfo");}});

var CreateDesktopAppXLocalCacheStructure = Module.findExportByName("daxexec.dll", "CreateDesktopAppXLocalCacheStructure")
Interceptor.attach(CreateDesktopAppXLocalCacheStructure, {onLeave: function (args) {send("CreateDesktopAppXLocalCacheStructure");}});

var CreateDesktopAppXTombstoneFile = Module.findExportByName("daxexec.dll", "CreateDesktopAppXTombstoneFile")
Interceptor.attach(CreateDesktopAppXTombstoneFile, {onLeave: function (args) {send("CreateDesktopAppXTombstoneFile");}});

var CreateJitvSilo = Module.findExportByName("daxexec.dll", "CreateJitvSilo")
Interceptor.attach(CreateJitvSilo, {onLeave: function (args) {send("CreateJitvSilo");}});

var CreatePackageVirtualizationContext = Module.findExportByName("daxexec.dll", "CreatePackageVirtualizationContext")
Interceptor.attach(CreatePackageVirtualizationContext, {onLeave: function (args) {send("CreatePackageVirtualizationContext");}});

var DeactivatePackageVirtualizationContext = Module.findExportByName("daxexec.dll", "DeactivatePackageVirtualizationContext")
Interceptor.attach(DeactivatePackageVirtualizationContext, {onLeave: function (args) {send("DeactivatePackageVirtualizationContext");}});

var DetokenizeDesktopAppXOfflineRegistry = Module.findExportByName("daxexec.dll", "DetokenizeDesktopAppXOfflineRegistry")
Interceptor.attach(DetokenizeDesktopAppXOfflineRegistry, {onLeave: function (args) {send("DetokenizeDesktopAppXOfflineRegistry");}});

var DisableDesktopAppXDebuggingForPackage = Module.findExportByName("daxexec.dll", "DisableDesktopAppXDebuggingForPackage")
Interceptor.attach(DisableDesktopAppXDebuggingForPackage, {onLeave: function (args) {send("DisableDesktopAppXDebuggingForPackage");}});

var DllCanUnloadNow = Module.findExportByName("daxexec.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetActivationFactory = Module.findExportByName("daxexec.dll", "DllGetActivationFactory")
Interceptor.attach(DllGetActivationFactory, {onLeave: function (args) {send("DllGetActivationFactory");}});

var DllGetClassObject = Module.findExportByName("daxexec.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var DoesPackageHaveElevationCapability = Module.findExportByName("daxexec.dll", "DoesPackageHaveElevationCapability")
Interceptor.attach(DoesPackageHaveElevationCapability, {onLeave: function (args) {send("DoesPackageHaveElevationCapability");}});

var DoesPackageHaveUIAccessCapability = Module.findExportByName("daxexec.dll", "DoesPackageHaveUIAccessCapability")
Interceptor.attach(DoesPackageHaveUIAccessCapability, {onLeave: function (args) {send("DoesPackageHaveUIAccessCapability");}});

var DoesPluginSupportCentennial = Module.findExportByName("daxexec.dll", "DoesPluginSupportCentennial")
Interceptor.attach(DoesPluginSupportCentennial, {onLeave: function (args) {send("DoesPluginSupportCentennial");}});

var DuplicatePackageVirtualizationContext = Module.findExportByName("daxexec.dll", "DuplicatePackageVirtualizationContext")
Interceptor.attach(DuplicatePackageVirtualizationContext, {onLeave: function (args) {send("DuplicatePackageVirtualizationContext");}});

var EnableDesktopAppXDebuggingForPackage = Module.findExportByName("daxexec.dll", "EnableDesktopAppXDebuggingForPackage")
Interceptor.attach(EnableDesktopAppXDebuggingForPackage, {onLeave: function (args) {send("EnableDesktopAppXDebuggingForPackage");}});

var EnsureDesktopAppXPackageShutdown = Module.findExportByName("daxexec.dll", "EnsureDesktopAppXPackageShutdown")
Interceptor.attach(EnsureDesktopAppXPackageShutdown, {onLeave: function (args) {send("EnsureDesktopAppXPackageShutdown");}});

var FreeAppExecutionAliasInfo = Module.findExportByName("daxexec.dll", "FreeAppExecutionAliasInfo")
Interceptor.attach(FreeAppExecutionAliasInfo, {onLeave: function (args) {send("FreeAppExecutionAliasInfo");}});

var FreeAppExecutionAliasInfoWithLicenseRundown = Module.findExportByName("daxexec.dll", "FreeAppExecutionAliasInfoWithLicenseRundown")
Interceptor.attach(FreeAppExecutionAliasInfoWithLicenseRundown, {onLeave: function (args) {send("FreeAppExecutionAliasInfoWithLicenseRundown");}});

var FreeDesktopAppXActivationInfo = Module.findExportByName("daxexec.dll", "FreeDesktopAppXActivationInfo")
Interceptor.attach(FreeDesktopAppXActivationInfo, {onLeave: function (args) {send("FreeDesktopAppXActivationInfo");}});

var FreeDesktopAppXLaunchContext = Module.findExportByName("daxexec.dll", "FreeDesktopAppXLaunchContext")
Interceptor.attach(FreeDesktopAppXLaunchContext, {onLeave: function (args) {send("FreeDesktopAppXLaunchContext");}});

var GetAppExecutionAliasApplicationUserModelId = Module.findExportByName("daxexec.dll", "GetAppExecutionAliasApplicationUserModelId")
Interceptor.attach(GetAppExecutionAliasApplicationUserModelId, {onLeave: function (args) {send("GetAppExecutionAliasApplicationUserModelId");}});

var GetAppExecutionAliasExecutable = Module.findExportByName("daxexec.dll", "GetAppExecutionAliasExecutable")
Interceptor.attach(GetAppExecutionAliasExecutable, {onLeave: function (args) {send("GetAppExecutionAliasExecutable");}});

var GetAppExecutionAliasPackageFamilyName = Module.findExportByName("daxexec.dll", "GetAppExecutionAliasPackageFamilyName")
Interceptor.attach(GetAppExecutionAliasPackageFamilyName, {onLeave: function (args) {send("GetAppExecutionAliasPackageFamilyName");}});

var GetAppExecutionAliasPackageFullName = Module.findExportByName("daxexec.dll", "GetAppExecutionAliasPackageFullName")
Interceptor.attach(GetAppExecutionAliasPackageFullName, {onLeave: function (args) {send("GetAppExecutionAliasPackageFullName");}});

var GetApplicationExecutableRelativePath = Module.findExportByName("daxexec.dll", "GetApplicationExecutableRelativePath")
Interceptor.attach(GetApplicationExecutableRelativePath, {onLeave: function (args) {send("GetApplicationExecutableRelativePath");}});

var GetCurrentPackageVirtualizationContext = Module.findExportByName("daxexec.dll", "GetCurrentPackageVirtualizationContext")
Interceptor.attach(GetCurrentPackageVirtualizationContext, {onLeave: function (args) {send("GetCurrentPackageVirtualizationContext");}});

var GetDesktopAppXComRootHandle = Module.findExportByName("daxexec.dll", "GetDesktopAppXComRootHandle")
Interceptor.attach(GetDesktopAppXComRootHandle, {onLeave: function (args) {send("GetDesktopAppXComRootHandle");}});

var GetPackageFamilyNameFromFile = Module.findExportByName("daxexec.dll", "GetPackageFamilyNameFromFile")
Interceptor.attach(GetPackageFamilyNameFromFile, {onLeave: function (args) {send("GetPackageFamilyNameFromFile");}});

var GetProcessesFromJitvSilos = Module.findExportByName("daxexec.dll", "GetProcessesFromJitvSilos")
Interceptor.attach(GetProcessesFromJitvSilos, {onLeave: function (args) {send("GetProcessesFromJitvSilos");}});

var GetProcessesInVirtualizationContext = Module.findExportByName("daxexec.dll", "GetProcessesInVirtualizationContext")
Interceptor.attach(GetProcessesInVirtualizationContext, {onLeave: function (args) {send("GetProcessesInVirtualizationContext");}});

var GetRegistryPathDetokenizer = Module.findExportByName("daxexec.dll", "GetRegistryPathDetokenizer")
Interceptor.attach(GetRegistryPathDetokenizer, {onLeave: function (args) {send("GetRegistryPathDetokenizer");}});

var JitvSiloRunDown = Module.findExportByName("daxexec.dll", "JitvSiloRunDown")
Interceptor.attach(JitvSiloRunDown, {onLeave: function (args) {send("JitvSiloRunDown");}});

var LoadAppExecutionAliasInfo = Module.findExportByName("daxexec.dll", "LoadAppExecutionAliasInfo")
Interceptor.attach(LoadAppExecutionAliasInfo, {onLeave: function (args) {send("LoadAppExecutionAliasInfo");}});

var MigrateWritablePackageRootData = Module.findExportByName("daxexec.dll", "MigrateWritablePackageRootData")
Interceptor.attach(MigrateWritablePackageRootData, {onLeave: function (args) {send("MigrateWritablePackageRootData");}});

var OpenAppExecutionAlias = Module.findExportByName("daxexec.dll", "OpenAppExecutionAlias")
Interceptor.attach(OpenAppExecutionAlias, {onLeave: function (args) {send("OpenAppExecutionAlias");}});

var OpenAppExecutionAliasForUser = Module.findExportByName("daxexec.dll", "OpenAppExecutionAliasForUser")
Interceptor.attach(OpenAppExecutionAliasForUser, {onLeave: function (args) {send("OpenAppExecutionAliasForUser");}});

var PerformAppxLicenseRundown = Module.findExportByName("daxexec.dll", "PerformAppxLicenseRundown")
Interceptor.attach(PerformAppxLicenseRundown, {onLeave: function (args) {send("PerformAppxLicenseRundown");}});

var PersistAppExecutionAliasToFile = Module.findExportByName("daxexec.dll", "PersistAppExecutionAliasToFile")
Interceptor.attach(PersistAppExecutionAliasToFile, {onLeave: function (args) {send("PersistAppExecutionAliasToFile");}});

var PostCreateProcessDesktopAppXActivation = Module.findExportByName("daxexec.dll", "PostCreateProcessDesktopAppXActivation")
Interceptor.attach(PostCreateProcessDesktopAppXActivation, {onLeave: function (args) {send("PostCreateProcessDesktopAppXActivation");}});

var PrepareDesktopAppXActivation = Module.findExportByName("daxexec.dll", "PrepareDesktopAppXActivation")
Interceptor.attach(PrepareDesktopAppXActivation, {onLeave: function (args) {send("PrepareDesktopAppXActivation");}});

var RegisterDesktopAppXPackageFamily = Module.findExportByName("daxexec.dll", "RegisterDesktopAppXPackageFamily")
Interceptor.attach(RegisterDesktopAppXPackageFamily, {onLeave: function (args) {send("RegisterDesktopAppXPackageFamily");}});

var RegisterDesktopAppXPackageFamilyIfNecessary = Module.findExportByName("daxexec.dll", "RegisterDesktopAppXPackageFamilyIfNecessary")
Interceptor.attach(RegisterDesktopAppXPackageFamilyIfNecessary, {onLeave: function (args) {send("RegisterDesktopAppXPackageFamilyIfNecessary");}});

var ReleasePackageVirtualizationContext = Module.findExportByName("daxexec.dll", "ReleasePackageVirtualizationContext")
Interceptor.attach(ReleasePackageVirtualizationContext, {onLeave: function (args) {send("ReleasePackageVirtualizationContext");}});

var RemoveDesktopAppXMetadataForFolder = Module.findExportByName("daxexec.dll", "RemoveDesktopAppXMetadataForFolder")
Interceptor.attach(RemoveDesktopAppXMetadataForFolder, {onLeave: function (args) {send("RemoveDesktopAppXMetadataForFolder");}});

var RemoveLookaside = Module.findExportByName("daxexec.dll", "RemoveLookaside")
Interceptor.attach(RemoveLookaside, {onLeave: function (args) {send("RemoveLookaside");}});

var RemoveLookasidePackage = Module.findExportByName("daxexec.dll", "RemoveLookasidePackage")
Interceptor.attach(RemoveLookasidePackage, {onLeave: function (args) {send("RemoveLookasidePackage");}});

var SetDesktopAppXMetadataForFolder = Module.findExportByName("daxexec.dll", "SetDesktopAppXMetadataForFolder")
Interceptor.attach(SetDesktopAppXMetadataForFolder, {onLeave: function (args) {send("SetDesktopAppXMetadataForFolder");}});

var SetDesktopAppXMetadataForPackage = Module.findExportByName("daxexec.dll", "SetDesktopAppXMetadataForPackage")
Interceptor.attach(SetDesktopAppXMetadataForPackage, {onLeave: function (args) {send("SetDesktopAppXMetadataForPackage");}});

var TryActivateDesktopAppXApplication = Module.findExportByName("daxexec.dll", "TryActivateDesktopAppXApplication")
Interceptor.attach(TryActivateDesktopAppXApplication, {onLeave: function (args) {send("TryActivateDesktopAppXApplication");}});

var VerifyFileIsTrustedAndInPackage = Module.findExportByName("daxexec.dll", "VerifyFileIsTrustedAndInPackage")
Interceptor.attach(VerifyFileIsTrustedAndInPackage, {onLeave: function (args) {send("VerifyFileIsTrustedAndInPackage");}});

