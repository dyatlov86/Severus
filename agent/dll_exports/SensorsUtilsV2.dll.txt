var AddMillisecondsToFileTime = Module.findExportByName("SensorsUtilsV2.dll", "AddMillisecondsToFileTime")
Interceptor.attach(AddMillisecondsToFileTime, {onLeave: function (args) {send("AddMillisecondsToFileTime");}});

var CollectionsListAllocateBufferAndSerialize = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListAllocateBufferAndSerialize")
Interceptor.attach(CollectionsListAllocateBufferAndSerialize, {onLeave: function (args) {send("CollectionsListAllocateBufferAndSerialize");}});

var CollectionsListCopyAndMarshall = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListCopyAndMarshall")
Interceptor.attach(CollectionsListCopyAndMarshall, {onLeave: function (args) {send("CollectionsListCopyAndMarshall");}});

var CollectionsListDeserializeFromBuffer = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListDeserializeFromBuffer")
Interceptor.attach(CollectionsListDeserializeFromBuffer, {onLeave: function (args) {send("CollectionsListDeserializeFromBuffer");}});

var CollectionsListGetFillableCount = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListGetFillableCount")
Interceptor.attach(CollectionsListGetFillableCount, {onLeave: function (args) {send("CollectionsListGetFillableCount");}});

var CollectionsListGetMarshalledSize = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListGetMarshalledSize")
Interceptor.attach(CollectionsListGetMarshalledSize, {onLeave: function (args) {send("CollectionsListGetMarshalledSize");}});

var CollectionsListGetMarshalledSizeWithoutSerialization = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListGetMarshalledSizeWithoutSerialization")
Interceptor.attach(CollectionsListGetMarshalledSizeWithoutSerialization, {onLeave: function (args) {send("CollectionsListGetMarshalledSizeWithoutSerialization");}});

var CollectionsListGetSerializedSize = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListGetSerializedSize")
Interceptor.attach(CollectionsListGetSerializedSize, {onLeave: function (args) {send("CollectionsListGetSerializedSize");}});

var CollectionsListMarshall = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListMarshall")
Interceptor.attach(CollectionsListMarshall, {onLeave: function (args) {send("CollectionsListMarshall");}});

var CollectionsListSerializeToBuffer = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListSerializeToBuffer")
Interceptor.attach(CollectionsListSerializeToBuffer, {onLeave: function (args) {send("CollectionsListSerializeToBuffer");}});

var CollectionsListSortSubscribedActivitiesByConfidence = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListSortSubscribedActivitiesByConfidence")
Interceptor.attach(CollectionsListSortSubscribedActivitiesByConfidence, {onLeave: function (args) {send("CollectionsListSortSubscribedActivitiesByConfidence");}});

var CollectionsListUpdateMarshalledPointer = Module.findExportByName("SensorsUtilsV2.dll", "CollectionsListUpdateMarshalledPointer")
Interceptor.attach(CollectionsListUpdateMarshalledPointer, {onLeave: function (args) {send("CollectionsListUpdateMarshalledPointer");}});

var ConvertAccelerometerDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertAccelerometerDataToCollection")
Interceptor.attach(ConvertAccelerometerDataToCollection, {onLeave: function (args) {send("ConvertAccelerometerDataToCollection");}});

var ConvertCollectionToAccelerometerData = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToAccelerometerData")
Interceptor.attach(ConvertCollectionToAccelerometerData, {onLeave: function (args) {send("ConvertCollectionToAccelerometerData");}});

var ConvertCollectionToGyroscopeData = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToGyroscopeData")
Interceptor.attach(ConvertCollectionToGyroscopeData, {onLeave: function (args) {send("ConvertCollectionToGyroscopeData");}});

var ConvertCollectionToLightSensorData = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToLightSensorData")
Interceptor.attach(ConvertCollectionToLightSensorData, {onLeave: function (args) {send("ConvertCollectionToLightSensorData");}});

var ConvertCollectionToLightSensorDataWithColor = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToLightSensorDataWithColor")
Interceptor.attach(ConvertCollectionToLightSensorDataWithColor, {onLeave: function (args) {send("ConvertCollectionToLightSensorDataWithColor");}});

var ConvertCollectionToMagnetometerData = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToMagnetometerData")
Interceptor.attach(ConvertCollectionToMagnetometerData, {onLeave: function (args) {send("ConvertCollectionToMagnetometerData");}});

var ConvertCollectionToOrientationData = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToOrientationData")
Interceptor.attach(ConvertCollectionToOrientationData, {onLeave: function (args) {send("ConvertCollectionToOrientationData");}});

var ConvertCollectionToProximitySensorData = Module.findExportByName("SensorsUtilsV2.dll", "ConvertCollectionToProximitySensorData")
Interceptor.attach(ConvertCollectionToProximitySensorData, {onLeave: function (args) {send("ConvertCollectionToProximitySensorData");}});

var ConvertFloat3DDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertFloat3DDataToCollection")
Interceptor.attach(ConvertFloat3DDataToCollection, {onLeave: function (args) {send("ConvertFloat3DDataToCollection");}});

var ConvertGyroscopeDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertGyroscopeDataToCollection")
Interceptor.attach(ConvertGyroscopeDataToCollection, {onLeave: function (args) {send("ConvertGyroscopeDataToCollection");}});

var ConvertLightSensorDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertLightSensorDataToCollection")
Interceptor.attach(ConvertLightSensorDataToCollection, {onLeave: function (args) {send("ConvertLightSensorDataToCollection");}});

var ConvertLightSensorDataWithColorToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertLightSensorDataWithColorToCollection")
Interceptor.attach(ConvertLightSensorDataWithColorToCollection, {onLeave: function (args) {send("ConvertLightSensorDataWithColorToCollection");}});

var ConvertMagnetometerDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertMagnetometerDataToCollection")
Interceptor.attach(ConvertMagnetometerDataToCollection, {onLeave: function (args) {send("ConvertMagnetometerDataToCollection");}});

var ConvertOrientationDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertOrientationDataToCollection")
Interceptor.attach(ConvertOrientationDataToCollection, {onLeave: function (args) {send("ConvertOrientationDataToCollection");}});

var ConvertProximitySensorDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertProximitySensorDataToCollection")
Interceptor.attach(ConvertProximitySensorDataToCollection, {onLeave: function (args) {send("ConvertProximitySensorDataToCollection");}});

var ConvertSimpleOrientationDataToCollection = Module.findExportByName("SensorsUtilsV2.dll", "ConvertSimpleOrientationDataToCollection")
Interceptor.attach(ConvertSimpleOrientationDataToCollection, {onLeave: function (args) {send("ConvertSimpleOrientationDataToCollection");}});

var EvaluateActivityThresholds = Module.findExportByName("SensorsUtilsV2.dll", "EvaluateActivityThresholds")
Interceptor.attach(EvaluateActivityThresholds, {onLeave: function (args) {send("EvaluateActivityThresholds");}});

var GetBiosInformation = Module.findExportByName("SensorsUtilsV2.dll", "GetBiosInformation")
Interceptor.attach(GetBiosInformation, {onLeave: function (args) {send("GetBiosInformation");}});

var GetDeviceClassStr = Module.findExportByName("SensorsUtilsV2.dll", "GetDeviceClassStr")
Interceptor.attach(GetDeviceClassStr, {onLeave: function (args) {send("GetDeviceClassStr");}});

var GetFileTimeDifference = Module.findExportByName("SensorsUtilsV2.dll", "GetFileTimeDifference")
Interceptor.attach(GetFileTimeDifference, {onLeave: function (args) {send("GetFileTimeDifference");}});

var GetFileTimeFromTimeStamp = Module.findExportByName("SensorsUtilsV2.dll", "GetFileTimeFromTimeStamp")
Interceptor.attach(GetFileTimeFromTimeStamp, {onLeave: function (args) {send("GetFileTimeFromTimeStamp");}});

var GetPerformanceTime = Module.findExportByName("SensorsUtilsV2.dll", "GetPerformanceTime")
Interceptor.attach(GetPerformanceTime, {onLeave: function (args) {send("GetPerformanceTime");}});

var GetSetting = Module.findExportByName("SensorsUtilsV2.dll", "GetSetting")
Interceptor.attach(GetSetting, {onLeave: function (args) {send("GetSetting");}});

var GetSystemTableInfo = Module.findExportByName("SensorsUtilsV2.dll", "GetSystemTableInfo")
Interceptor.attach(GetSystemTableInfo, {onLeave: function (args) {send("GetSystemTableInfo");}});

var GetTimeStampFromFileTime = Module.findExportByName("SensorsUtilsV2.dll", "GetTimeStampFromFileTime")
Interceptor.attach(GetTimeStampFromFileTime, {onLeave: function (args) {send("GetTimeStampFromFileTime");}});

var InitPropVariantFromCLSIDArray = Module.findExportByName("SensorsUtilsV2.dll", "InitPropVariantFromCLSIDArray")
Interceptor.attach(InitPropVariantFromCLSIDArray, {onLeave: function (args) {send("InitPropVariantFromCLSIDArray");}});

var InitPropVariantFromFloat = Module.findExportByName("SensorsUtilsV2.dll", "InitPropVariantFromFloat")
Interceptor.attach(InitPropVariantFromFloat, {onLeave: function (args) {send("InitPropVariantFromFloat");}});

var IsCollectionListSame = Module.findExportByName("SensorsUtilsV2.dll", "IsCollectionListSame")
Interceptor.attach(IsCollectionListSame, {onLeave: function (args) {send("IsCollectionListSame");}});

var IsGUIDPresentInList = Module.findExportByName("SensorsUtilsV2.dll", "IsGUIDPresentInList")
Interceptor.attach(IsGUIDPresentInList, {onLeave: function (args) {send("IsGUIDPresentInList");}});

var IsKeyPresentInCollectionList = Module.findExportByName("SensorsUtilsV2.dll", "IsKeyPresentInCollectionList")
Interceptor.attach(IsKeyPresentInCollectionList, {onLeave: function (args) {send("IsKeyPresentInCollectionList");}});

var IsKeyPresentInPropertyList = Module.findExportByName("SensorsUtilsV2.dll", "IsKeyPresentInPropertyList")
Interceptor.attach(IsKeyPresentInPropertyList, {onLeave: function (args) {send("IsKeyPresentInPropertyList");}});

var IsSensorSubscribed = Module.findExportByName("SensorsUtilsV2.dll", "IsSensorSubscribed")
Interceptor.attach(IsSensorSubscribed, {onLeave: function (args) {send("IsSensorSubscribed");}});

var MapActivityConfidenceToState = Module.findExportByName("SensorsUtilsV2.dll", "MapActivityConfidenceToState")
Interceptor.attach(MapActivityConfidenceToState, {onLeave: function (args) {send("MapActivityConfidenceToState");}});

var PropKeyFindKeyGetBool = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetBool")
Interceptor.attach(PropKeyFindKeyGetBool, {onLeave: function (args) {send("PropKeyFindKeyGetBool");}});

var PropKeyFindKeyGetDouble = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetDouble")
Interceptor.attach(PropKeyFindKeyGetDouble, {onLeave: function (args) {send("PropKeyFindKeyGetDouble");}});

var PropKeyFindKeyGetFileTime = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetFileTime")
Interceptor.attach(PropKeyFindKeyGetFileTime, {onLeave: function (args) {send("PropKeyFindKeyGetFileTime");}});

var PropKeyFindKeyGetFloat = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetFloat")
Interceptor.attach(PropKeyFindKeyGetFloat, {onLeave: function (args) {send("PropKeyFindKeyGetFloat");}});

var PropKeyFindKeyGetGuid = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetGuid")
Interceptor.attach(PropKeyFindKeyGetGuid, {onLeave: function (args) {send("PropKeyFindKeyGetGuid");}});

var PropKeyFindKeyGetInt32 = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetInt32")
Interceptor.attach(PropKeyFindKeyGetInt32, {onLeave: function (args) {send("PropKeyFindKeyGetInt32");}});

var PropKeyFindKeyGetInt64 = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetInt64")
Interceptor.attach(PropKeyFindKeyGetInt64, {onLeave: function (args) {send("PropKeyFindKeyGetInt64");}});

var PropKeyFindKeyGetNthInt64 = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetNthInt64")
Interceptor.attach(PropKeyFindKeyGetNthInt64, {onLeave: function (args) {send("PropKeyFindKeyGetNthInt64");}});

var PropKeyFindKeyGetNthUlong = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetNthUlong")
Interceptor.attach(PropKeyFindKeyGetNthUlong, {onLeave: function (args) {send("PropKeyFindKeyGetNthUlong");}});

var PropKeyFindKeyGetNthUshort = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetNthUshort")
Interceptor.attach(PropKeyFindKeyGetNthUshort, {onLeave: function (args) {send("PropKeyFindKeyGetNthUshort");}});

var PropKeyFindKeyGetPropVariant = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetPropVariant")
Interceptor.attach(PropKeyFindKeyGetPropVariant, {onLeave: function (args) {send("PropKeyFindKeyGetPropVariant");}});

var PropKeyFindKeyGetUlong = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetUlong")
Interceptor.attach(PropKeyFindKeyGetUlong, {onLeave: function (args) {send("PropKeyFindKeyGetUlong");}});

var PropKeyFindKeyGetUshort = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeyGetUshort")
Interceptor.attach(PropKeyFindKeyGetUshort, {onLeave: function (args) {send("PropKeyFindKeyGetUshort");}});

var PropKeyFindKeySetPropVariant = Module.findExportByName("SensorsUtilsV2.dll", "PropKeyFindKeySetPropVariant")
Interceptor.attach(PropKeyFindKeySetPropVariant, {onLeave: function (args) {send("PropKeyFindKeySetPropVariant");}});

var PropVariantGetInformation = Module.findExportByName("SensorsUtilsV2.dll", "PropVariantGetInformation")
Interceptor.attach(PropVariantGetInformation, {onLeave: function (args) {send("PropVariantGetInformation");}});

var PropertiesListCopy = Module.findExportByName("SensorsUtilsV2.dll", "PropertiesListCopy")
Interceptor.attach(PropertiesListCopy, {onLeave: function (args) {send("PropertiesListCopy");}});

var PropertiesListGetFillableCount = Module.findExportByName("SensorsUtilsV2.dll", "PropertiesListGetFillableCount")
Interceptor.attach(PropertiesListGetFillableCount, {onLeave: function (args) {send("PropertiesListGetFillableCount");}});

var SensorCollectionGetAt = Module.findExportByName("SensorsUtilsV2.dll", "SensorCollectionGetAt")
Interceptor.attach(SensorCollectionGetAt, {onLeave: function (args) {send("SensorCollectionGetAt");}});

var SensorsQueryDeviceCompatFlags = Module.findExportByName("SensorsUtilsV2.dll", "SensorsQueryDeviceCompatFlags")
Interceptor.attach(SensorsQueryDeviceCompatFlags, {onLeave: function (args) {send("SensorsQueryDeviceCompatFlags");}});

var SensorsQueryDeviceCompatFlagsUsingSmbiosInformation = Module.findExportByName("SensorsUtilsV2.dll", "SensorsQueryDeviceCompatFlagsUsingSmbiosInformation")
Interceptor.attach(SensorsQueryDeviceCompatFlagsUsingSmbiosInformation, {onLeave: function (args) {send("SensorsQueryDeviceCompatFlagsUsingSmbiosInformation");}});

var SensorsQueryDeviceCompatFlagsUsingSystemInformation = Module.findExportByName("SensorsUtilsV2.dll", "SensorsQueryDeviceCompatFlagsUsingSystemInformation")
Interceptor.attach(SensorsQueryDeviceCompatFlagsUsingSystemInformation, {onLeave: function (args) {send("SensorsQueryDeviceCompatFlagsUsingSystemInformation");}});

var SerializationBufferAllocate = Module.findExportByName("SensorsUtilsV2.dll", "SerializationBufferAllocate")
Interceptor.attach(SerializationBufferAllocate, {onLeave: function (args) {send("SerializationBufferAllocate");}});

var SerializationBufferFree = Module.findExportByName("SensorsUtilsV2.dll", "SerializationBufferFree")
Interceptor.attach(SerializationBufferFree, {onLeave: function (args) {send("SerializationBufferFree");}});

