var ??0GeoBundle@@QEAA@PEBUGeoData@@@Z = Module.findExportByName("SqlServerSpatial150.dll", "??0GeoBundle@@QEAA@PEBUGeoData@@@Z")
Interceptor.attach(??0GeoBundle@@QEAA@PEBUGeoData@@@Z, {onLeave: function (args) {send("??0GeoBundle@@QEAA@PEBUGeoData@@@Z");}});

var ??0GeoBundle@@QEAA@PEBUGeoData@@_N1@Z = Module.findExportByName("SqlServerSpatial150.dll", "??0GeoBundle@@QEAA@PEBUGeoData@@_N1@Z")
Interceptor.attach(??0GeoBundle@@QEAA@PEBUGeoData@@_N1@Z, {onLeave: function (args) {send("??0GeoBundle@@QEAA@PEBUGeoData@@_N1@Z");}});

var ??0SpatialIntrisicCostInfo@GeoBundle@@QEAA@XZ = Module.findExportByName("SqlServerSpatial150.dll", "??0SpatialIntrisicCostInfo@GeoBundle@@QEAA@XZ")
Interceptor.attach(??0SpatialIntrisicCostInfo@GeoBundle@@QEAA@XZ, {onLeave: function (args) {send("??0SpatialIntrisicCostInfo@GeoBundle@@QEAA@XZ");}});

var ?ComputeBounds@@YAJUGeoData@@PEAV?$CMglRect@N@@@Z = Module.findExportByName("SqlServerSpatial150.dll", "?ComputeBounds@@YAJUGeoData@@PEAV?$CMglRect@N@@@Z")
Interceptor.attach(?ComputeBounds@@YAJUGeoData@@PEAV?$CMglRect@N@@@Z, {onLeave: function (args) {send("?ComputeBounds@@YAJUGeoData@@PEAV?$CMglRect@N@@@Z");}});

var ?FAddNewCascade@GeoBundle@@QEBA_NAEAH@Z = Module.findExportByName("SqlServerSpatial150.dll", "?FAddNewCascade@GeoBundle@@QEBA_NAEAH@Z")
Interceptor.attach(?FAddNewCascade@GeoBundle@@QEBA_NAEAH@Z, {onLeave: function (args) {send("?FAddNewCascade@GeoBundle@@QEBA_NAEAH@Z");}});

var ?FCascadeEliminationEnabled@GeoBundle@@QEBA_NXZ = Module.findExportByName("SqlServerSpatial150.dll", "?FCascadeEliminationEnabled@GeoBundle@@QEBA_NXZ")
Interceptor.attach(?FCascadeEliminationEnabled@GeoBundle@@QEBA_NXZ, {onLeave: function (args) {send("?FCascadeEliminationEnabled@GeoBundle@@QEBA_NXZ");}});

var ?GetCascadesSaving@GeoBundle@@QEBA_JXZ = Module.findExportByName("SqlServerSpatial150.dll", "?GetCascadesSaving@GeoBundle@@QEBA_JXZ")
Interceptor.attach(?GetCascadesSaving@GeoBundle@@QEBA_JXZ, {onLeave: function (args) {send("?GetCascadesSaving@GeoBundle@@QEBA_JXZ");}});

var ?GetNextCascadeAreaReduceFactor@GeoBundle@@QEBANXZ = Module.findExportByName("SqlServerSpatial150.dll", "?GetNextCascadeAreaReduceFactor@GeoBundle@@QEBANXZ")
Interceptor.attach(?GetNextCascadeAreaReduceFactor@GeoBundle@@QEBANXZ, {onLeave: function (args) {send("?GetNextCascadeAreaReduceFactor@GeoBundle@@QEBANXZ");}});

var ?IncResidualCost@GeoBundle@@QEAAX_K@Z = Module.findExportByName("SqlServerSpatial150.dll", "?IncResidualCost@GeoBundle@@QEAAX_K@Z")
Interceptor.attach(?IncResidualCost@GeoBundle@@QEAAX_K@Z, {onLeave: function (args) {send("?IncResidualCost@GeoBundle@@QEAAX_K@Z");}});

var ?StopAddingNewCascades@GeoBundle@@QEAAXXZ = Module.findExportByName("SqlServerSpatial150.dll", "?StopAddingNewCascades@GeoBundle@@QEAAXXZ")
Interceptor.attach(?StopAddingNewCascades@GeoBundle@@QEAAXXZ, {onLeave: function (args) {send("?StopAddingNewCascades@GeoBundle@@QEAAXXZ");}});

var ?UpdateNextCascadeCost@GeoBundle@@QEAAXXZ = Module.findExportByName("SqlServerSpatial150.dll", "?UpdateNextCascadeCost@GeoBundle@@QEAAXXZ")
Interceptor.attach(?UpdateNextCascadeCost@GeoBundle@@QEAAXXZ, {onLeave: function (args) {send("?UpdateNextCascadeCost@GeoBundle@@QEAAXXZ");}});

var ?m_Points1@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Points1@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Points1@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Points1@SampleDescriptor@@2QBNB");}});

var ?m_Points2@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Points2@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Points2@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Points2@SampleDescriptor@@2QBNB");}});

var ?m_Points3@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Points3@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Points3@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Points3@SampleDescriptor@@2QBNB");}});

var ?m_Points6@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Points6@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Points6@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Points6@SampleDescriptor@@2QBNB");}});

var ?m_Weights1@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Weights1@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Weights1@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Weights1@SampleDescriptor@@2QBNB");}});

var ?m_Weights2@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Weights2@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Weights2@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Weights2@SampleDescriptor@@2QBNB");}});

var ?m_Weights3@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Weights3@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Weights3@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Weights3@SampleDescriptor@@2QBNB");}});

var ?m_Weights6@SampleDescriptor@@2QBNB = Module.findExportByName("SqlServerSpatial150.dll", "?m_Weights6@SampleDescriptor@@2QBNB")
Interceptor.attach(?m_Weights6@SampleDescriptor@@2QBNB, {onLeave: function (args) {send("?m_Weights6@SampleDescriptor@@2QBNB");}});

var Area = Module.findExportByName("SqlServerSpatial150.dll", "Area")
Interceptor.attach(Area, {onLeave: function (args) {send("Area");}});

var Boundary = Module.findExportByName("SqlServerSpatial150.dll", "Boundary")
Interceptor.attach(Boundary, {onLeave: function (args) {send("Boundary");}});

var Buffer = Module.findExportByName("SqlServerSpatial150.dll", "Buffer")
Interceptor.attach(Buffer, {onLeave: function (args) {send("Buffer");}});

var Centroid = Module.findExportByName("SqlServerSpatial150.dll", "Centroid")
Interceptor.attach(Centroid, {onLeave: function (args) {send("Centroid");}});

var Combine = Module.findExportByName("SqlServerSpatial150.dll", "Combine")
Interceptor.attach(Combine, {onLeave: function (args) {send("Combine");}});

var Contains = Module.findExportByName("SqlServerSpatial150.dll", "Contains")
Interceptor.attach(Contains, {onLeave: function (args) {send("Contains");}});

var ContainsV2 = Module.findExportByName("SqlServerSpatial150.dll", "ContainsV2")
Interceptor.attach(ContainsV2, {onLeave: function (args) {send("ContainsV2");}});

var ConvexHull = Module.findExportByName("SqlServerSpatial150.dll", "ConvexHull")
Interceptor.attach(ConvexHull, {onLeave: function (args) {send("ConvexHull");}});

var Crosses = Module.findExportByName("SqlServerSpatial150.dll", "Crosses")
Interceptor.attach(Crosses, {onLeave: function (args) {send("Crosses");}});

var CurveToLineWithTolerance = Module.findExportByName("SqlServerSpatial150.dll", "CurveToLineWithTolerance")
Interceptor.attach(CurveToLineWithTolerance, {onLeave: function (args) {send("CurveToLineWithTolerance");}});

var Distance = Module.findExportByName("SqlServerSpatial150.dll", "Distance")
Interceptor.attach(Distance, {onLeave: function (args) {send("Distance");}});

var DistanceV2 = Module.findExportByName("SqlServerSpatial150.dll", "DistanceV2")
Interceptor.attach(DistanceV2, {onLeave: function (args) {send("DistanceV2");}});

var Envelope = Module.findExportByName("SqlServerSpatial150.dll", "Envelope")
Interceptor.attach(Envelope, {onLeave: function (args) {send("Envelope");}});

var Equals = Module.findExportByName("SqlServerSpatial150.dll", "Equals")
Interceptor.attach(Equals, {onLeave: function (args) {send("Equals");}});

var GeodeticAngleExtent = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticAngleExtent")
Interceptor.attach(GeodeticAngleExtent, {onLeave: function (args) {send("GeodeticAngleExtent");}});

var GeodeticArea = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticArea")
Interceptor.attach(GeodeticArea, {onLeave: function (args) {send("GeodeticArea");}});

var GeodeticBuffer = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticBuffer")
Interceptor.attach(GeodeticBuffer, {onLeave: function (args) {send("GeodeticBuffer");}});

var GeodeticCapCenter = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticCapCenter")
Interceptor.attach(GeodeticCapCenter, {onLeave: function (args) {send("GeodeticCapCenter");}});

var GeodeticCapUnion = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticCapUnion")
Interceptor.attach(GeodeticCapUnion, {onLeave: function (args) {send("GeodeticCapUnion");}});

var GeodeticCombine = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticCombine")
Interceptor.attach(GeodeticCombine, {onLeave: function (args) {send("GeodeticCombine");}});

var GeodeticContains = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticContains")
Interceptor.attach(GeodeticContains, {onLeave: function (args) {send("GeodeticContains");}});

var GeodeticConvexHull = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticConvexHull")
Interceptor.attach(GeodeticConvexHull, {onLeave: function (args) {send("GeodeticConvexHull");}});

var GeodeticCurveToLineWithTolerance = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticCurveToLineWithTolerance")
Interceptor.attach(GeodeticCurveToLineWithTolerance, {onLeave: function (args) {send("GeodeticCurveToLineWithTolerance");}});

var GeodeticDistance = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticDistance")
Interceptor.attach(GeodeticDistance, {onLeave: function (args) {send("GeodeticDistance");}});

var GeodeticEquals = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticEquals")
Interceptor.attach(GeodeticEquals, {onLeave: function (args) {send("GeodeticEquals");}});

var GeodeticGridCoverage = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticGridCoverage")
Interceptor.attach(GeodeticGridCoverage, {onLeave: function (args) {send("GeodeticGridCoverage");}});

var GeodeticIntersects = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticIntersects")
Interceptor.attach(GeodeticIntersects, {onLeave: function (args) {send("GeodeticIntersects");}});

var GeodeticIsValid = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticIsValid")
Interceptor.attach(GeodeticIsValid, {onLeave: function (args) {send("GeodeticIsValid");}});

var GeodeticIsValidDetailed = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticIsValidDetailed")
Interceptor.attach(GeodeticIsValidDetailed, {onLeave: function (args) {send("GeodeticIsValidDetailed");}});

var GeodeticLength = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticLength")
Interceptor.attach(GeodeticLength, {onLeave: function (args) {send("GeodeticLength");}});

var GeodeticMakeValid = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticMakeValid")
Interceptor.attach(GeodeticMakeValid, {onLeave: function (args) {send("GeodeticMakeValid");}});

var GeodeticOverlaps = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticOverlaps")
Interceptor.attach(GeodeticOverlaps, {onLeave: function (args) {send("GeodeticOverlaps");}});

var GeodeticPointDistance = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticPointDistance")
Interceptor.attach(GeodeticPointDistance, {onLeave: function (args) {send("GeodeticPointDistance");}});

var GeodeticReduce = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticReduce")
Interceptor.attach(GeodeticReduce, {onLeave: function (args) {send("GeodeticReduce");}});

var GeodeticShortestLine = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticShortestLine")
Interceptor.attach(GeodeticShortestLine, {onLeave: function (args) {send("GeodeticShortestLine");}});

var GeodeticTessellate = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticTessellate")
Interceptor.attach(GeodeticTessellate, {onLeave: function (args) {send("GeodeticTessellate");}});

var GeodeticTile = Module.findExportByName("SqlServerSpatial150.dll", "GeodeticTile")
Interceptor.attach(GeodeticTile, {onLeave: function (args) {send("GeodeticTile");}});

var GetBounds = Module.findExportByName("SqlServerSpatial150.dll", "GetBounds")
Interceptor.attach(GetBounds, {onLeave: function (args) {send("GetBounds");}});

var GetGridCoverage = Module.findExportByName("SqlServerSpatial150.dll", "GetGridCoverage")
Interceptor.attach(GetGridCoverage, {onLeave: function (args) {send("GetGridCoverage");}});

var Identity = Module.findExportByName("SqlServerSpatial150.dll", "Identity")
Interceptor.attach(Identity, {onLeave: function (args) {send("Identity");}});

var Intersects = Module.findExportByName("SqlServerSpatial150.dll", "Intersects")
Interceptor.attach(Intersects, {onLeave: function (args) {send("Intersects");}});

var IntersectsV2 = Module.findExportByName("SqlServerSpatial150.dll", "IntersectsV2")
Interceptor.attach(IntersectsV2, {onLeave: function (args) {send("IntersectsV2");}});

var IsSimple = Module.findExportByName("SqlServerSpatial150.dll", "IsSimple")
Interceptor.attach(IsSimple, {onLeave: function (args) {send("IsSimple");}});

var IsValid = Module.findExportByName("SqlServerSpatial150.dll", "IsValid")
Interceptor.attach(IsValid, {onLeave: function (args) {send("IsValid");}});

var IsValidDetailed = Module.findExportByName("SqlServerSpatial150.dll", "IsValidDetailed")
Interceptor.attach(IsValidDetailed, {onLeave: function (args) {send("IsValidDetailed");}});

var Length = Module.findExportByName("SqlServerSpatial150.dll", "Length")
Interceptor.attach(Length, {onLeave: function (args) {send("Length");}});

var MakeValid = Module.findExportByName("SqlServerSpatial150.dll", "MakeValid")
Interceptor.attach(MakeValid, {onLeave: function (args) {send("MakeValid");}});

var Outline = Module.findExportByName("SqlServerSpatial150.dll", "Outline")
Interceptor.attach(Outline, {onLeave: function (args) {send("Outline");}});

var Overlaps = Module.findExportByName("SqlServerSpatial150.dll", "Overlaps")
Interceptor.attach(Overlaps, {onLeave: function (args) {send("Overlaps");}});

var PlanarReduce = Module.findExportByName("SqlServerSpatial150.dll", "PlanarReduce")
Interceptor.attach(PlanarReduce, {onLeave: function (args) {send("PlanarReduce");}});

var PointOnSurface = Module.findExportByName("SqlServerSpatial150.dll", "PointOnSurface")
Interceptor.attach(PointOnSurface, {onLeave: function (args) {send("PointOnSurface");}});

var Relate = Module.findExportByName("SqlServerSpatial150.dll", "Relate")
Interceptor.attach(Relate, {onLeave: function (args) {send("Relate");}});

var SetClrFeatureSwitchMap = Module.findExportByName("SqlServerSpatial150.dll", "SetClrFeatureSwitchMap")
Interceptor.attach(SetClrFeatureSwitchMap, {onLeave: function (args) {send("SetClrFeatureSwitchMap");}});

var SetOSYieldCallback = Module.findExportByName("SqlServerSpatial150.dll", "SetOSYieldCallback")
Interceptor.attach(SetOSYieldCallback, {onLeave: function (args) {send("SetOSYieldCallback");}});

var ShortestLine = Module.findExportByName("SqlServerSpatial150.dll", "ShortestLine")
Interceptor.attach(ShortestLine, {onLeave: function (args) {send("ShortestLine");}});

var SimpleBuffer = Module.findExportByName("SqlServerSpatial150.dll", "SimpleBuffer")
Interceptor.attach(SimpleBuffer, {onLeave: function (args) {send("SimpleBuffer");}});

var SingleSideReduce = Module.findExportByName("SqlServerSpatial150.dll", "SingleSideReduce")
Interceptor.attach(SingleSideReduce, {onLeave: function (args) {send("SingleSideReduce");}});

var Tessellate = Module.findExportByName("SqlServerSpatial150.dll", "Tessellate")
Interceptor.attach(Tessellate, {onLeave: function (args) {send("Tessellate");}});

var Touches = Module.findExportByName("SqlServerSpatial150.dll", "Touches")
Interceptor.attach(Touches, {onLeave: function (args) {send("Touches");}});

var UpdateGeodeticEnvelope = Module.findExportByName("SqlServerSpatial150.dll", "UpdateGeodeticEnvelope")
Interceptor.attach(UpdateGeodeticEnvelope, {onLeave: function (args) {send("UpdateGeodeticEnvelope");}});

