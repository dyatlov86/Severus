var CHSPinYinHelper_CreateInstance = Module.findExportByName("UserDataLanguageUtil.dll", "CHSPinYinHelper_CreateInstance")
Interceptor.attach(CHSPinYinHelper_CreateInstance, {onLeave: function (args) {send("CHSPinYinHelper_CreateInstance");}});

var CHSPinYinHelper_HasPossibleCHSPinYin = Module.findExportByName("UserDataLanguageUtil.dll", "CHSPinYinHelper_HasPossibleCHSPinYin")
Interceptor.attach(CHSPinYinHelper_HasPossibleCHSPinYin, {onLeave: function (args) {send("CHSPinYinHelper_HasPossibleCHSPinYin");}});

var CHSPinYinHelper_HasPossiblePinYin = Module.findExportByName("UserDataLanguageUtil.dll", "CHSPinYinHelper_HasPossiblePinYin")
Interceptor.attach(CHSPinYinHelper_HasPossiblePinYin, {onLeave: function (args) {send("CHSPinYinHelper_HasPossiblePinYin");}});

var CHSPinYinHelper_Initialize = Module.findExportByName("UserDataLanguageUtil.dll", "CHSPinYinHelper_Initialize")
Interceptor.attach(CHSPinYinHelper_Initialize, {onLeave: function (args) {send("CHSPinYinHelper_Initialize");}});

var CanConvertStringFromUnicode = Module.findExportByName("UserDataLanguageUtil.dll", "CanConvertStringFromUnicode")
Interceptor.attach(CanConvertStringFromUnicode, {onLeave: function (args) {send("CanConvertStringFromUnicode");}});

var ConvertToMultiByte = Module.findExportByName("UserDataLanguageUtil.dll", "ConvertToMultiByte")
Interceptor.attach(ConvertToMultiByte, {onLeave: function (args) {send("ConvertToMultiByte");}});

var ConvertToWideStream = Module.findExportByName("UserDataLanguageUtil.dll", "ConvertToWideStream")
Interceptor.attach(ConvertToWideStream, {onLeave: function (args) {send("ConvertToWideStream");}});

var ConvertWideStreamToMultiByte = Module.findExportByName("UserDataLanguageUtil.dll", "ConvertWideStreamToMultiByte")
Interceptor.attach(ConvertWideStreamToMultiByte, {onLeave: function (args) {send("ConvertWideStreamToMultiByte");}});

var DecomposeHangulSyllables = Module.findExportByName("UserDataLanguageUtil.dll", "DecomposeHangulSyllables")
Interceptor.attach(DecomposeHangulSyllables, {onLeave: function (args) {send("DecomposeHangulSyllables");}});

var DetermineStringEALangId = Module.findExportByName("UserDataLanguageUtil.dll", "DetermineStringEALangId")
Interceptor.attach(DetermineStringEALangId, {onLeave: function (args) {send("DetermineStringEALangId");}});

var DetermineStringEALangIdNLS = Module.findExportByName("UserDataLanguageUtil.dll", "DetermineStringEALangIdNLS")
Interceptor.attach(DetermineStringEALangIdNLS, {onLeave: function (args) {send("DetermineStringEALangIdNLS");}});

var GetCodepageName = Module.findExportByName("UserDataLanguageUtil.dll", "GetCodepageName")
Interceptor.attach(GetCodepageName, {onLeave: function (args) {send("GetCodepageName");}});

var GetConvertedTextForMatching = Module.findExportByName("UserDataLanguageUtil.dll", "GetConvertedTextForMatching")
Interceptor.attach(GetConvertedTextForMatching, {onLeave: function (args) {send("GetConvertedTextForMatching");}});

var GetCurrentLangIdForMatching = Module.findExportByName("UserDataLanguageUtil.dll", "GetCurrentLangIdForMatching")
Interceptor.attach(GetCurrentLangIdForMatching, {onLeave: function (args) {send("GetCurrentLangIdForMatching");}});

var GetMultiLanguage2 = Module.findExportByName("UserDataLanguageUtil.dll", "GetMultiLanguage2")
Interceptor.attach(GetMultiLanguage2, {onLeave: function (args) {send("GetMultiLanguage2");}});

var GetNarrowSzCodepage = Module.findExportByName("UserDataLanguageUtil.dll", "GetNarrowSzCodepage")
Interceptor.attach(GetNarrowSzCodepage, {onLeave: function (args) {send("GetNarrowSzCodepage");}});

var GetSystemDefaultCodepage = Module.findExportByName("UserDataLanguageUtil.dll", "GetSystemDefaultCodepage")
Interceptor.attach(GetSystemDefaultCodepage, {onLeave: function (args) {send("GetSystemDefaultCodepage");}});

var GetWideSz = Module.findExportByName("UserDataLanguageUtil.dll", "GetWideSz")
Interceptor.attach(GetWideSz, {onLeave: function (args) {send("GetWideSz");}});

var GetWideSzAlloc = Module.findExportByName("UserDataLanguageUtil.dll", "GetWideSzAlloc")
Interceptor.attach(GetWideSzAlloc, {onLeave: function (args) {send("GetWideSzAlloc");}});

var InitializeLanguageUtil = Module.findExportByName("UserDataLanguageUtil.dll", "InitializeLanguageUtil")
Interceptor.attach(InitializeLanguageUtil, {onLeave: function (args) {send("InitializeLanguageUtil");}});

var IsAltChar = Module.findExportByName("UserDataLanguageUtil.dll", "IsAltChar")
Interceptor.attach(IsAltChar, {onLeave: function (args) {send("IsAltChar");}});

var IsCHNChar = Module.findExportByName("UserDataLanguageUtil.dll", "IsCHNChar")
Interceptor.attach(IsCHNChar, {onLeave: function (args) {send("IsCHNChar");}});

var IsEAChar = Module.findExportByName("UserDataLanguageUtil.dll", "IsEAChar")
Interceptor.attach(IsEAChar, {onLeave: function (args) {send("IsEAChar");}});

var IsHangulSyllable = Module.findExportByName("UserDataLanguageUtil.dll", "IsHangulSyllable")
Interceptor.attach(IsHangulSyllable, {onLeave: function (args) {send("IsHangulSyllable");}});

var IsJPNChar = Module.findExportByName("UserDataLanguageUtil.dll", "IsJPNChar")
Interceptor.attach(IsJPNChar, {onLeave: function (args) {send("IsJPNChar");}});

var IsLocalePseudoLoc = Module.findExportByName("UserDataLanguageUtil.dll", "IsLocalePseudoLoc")
Interceptor.attach(IsLocalePseudoLoc, {onLeave: function (args) {send("IsLocalePseudoLoc");}});

var IsMatchingEAPrefix = Module.findExportByName("UserDataLanguageUtil.dll", "IsMatchingEAPrefix")
Interceptor.attach(IsMatchingEAPrefix, {onLeave: function (args) {send("IsMatchingEAPrefix");}});

var IsMatchingEAPrefixEx = Module.findExportByName("UserDataLanguageUtil.dll", "IsMatchingEAPrefixEx")
Interceptor.attach(IsMatchingEAPrefixEx, {onLeave: function (args) {send("IsMatchingEAPrefixEx");}});

var IsMatchingPrefix = Module.findExportByName("UserDataLanguageUtil.dll", "IsMatchingPrefix")
Interceptor.attach(IsMatchingPrefix, {onLeave: function (args) {send("IsMatchingPrefix");}});

var IsMatchingPrefixEx = Module.findExportByName("UserDataLanguageUtil.dll", "IsMatchingPrefixEx")
Interceptor.attach(IsMatchingPrefixEx, {onLeave: function (args) {send("IsMatchingPrefixEx");}});

var IsSkippableCharacter = Module.findExportByName("UserDataLanguageUtil.dll", "IsSkippableCharacter")
Interceptor.attach(IsSkippableCharacter, {onLeave: function (args) {send("IsSkippableCharacter");}});

var IsSupportedCodepage = Module.findExportByName("UserDataLanguageUtil.dll", "IsSupportedCodepage")
Interceptor.attach(IsSupportedCodepage, {onLeave: function (args) {send("IsSupportedCodepage");}});

var MapCharToBaseChar = Module.findExportByName("UserDataLanguageUtil.dll", "MapCharToBaseChar")
Interceptor.attach(MapCharToBaseChar, {onLeave: function (args) {send("MapCharToBaseChar");}});

var MapStringToBaseCharacters = Module.findExportByName("UserDataLanguageUtil.dll", "MapStringToBaseCharacters")
Interceptor.attach(MapStringToBaseCharacters, {onLeave: function (args) {send("MapStringToBaseCharacters");}});

var UninitializeLanguageUtil = Module.findExportByName("UserDataLanguageUtil.dll", "UninitializeLanguageUtil")
Interceptor.attach(UninitializeLanguageUtil, {onLeave: function (args) {send("UninitializeLanguageUtil");}});

