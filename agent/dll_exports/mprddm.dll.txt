var DDMAdminConnectionClearStats = Module.findExportByName("mprddm.dll", "DDMAdminConnectionClearStats")
Interceptor.attach(DDMAdminConnectionClearStats, {onLeave: function (args) {send("DDMAdminConnectionClearStats");}});

var DDMAdminConnectionEnum = Module.findExportByName("mprddm.dll", "DDMAdminConnectionEnum")
Interceptor.attach(DDMAdminConnectionEnum, {onLeave: function (args) {send("DDMAdminConnectionEnum");}});

var DDMAdminConnectionEnumEx = Module.findExportByName("mprddm.dll", "DDMAdminConnectionEnumEx")
Interceptor.attach(DDMAdminConnectionEnumEx, {onLeave: function (args) {send("DDMAdminConnectionEnumEx");}});

var DDMAdminConnectionGetInfo = Module.findExportByName("mprddm.dll", "DDMAdminConnectionGetInfo")
Interceptor.attach(DDMAdminConnectionGetInfo, {onLeave: function (args) {send("DDMAdminConnectionGetInfo");}});

var DDMAdminConnectionGetInfoEx = Module.findExportByName("mprddm.dll", "DDMAdminConnectionGetInfoEx")
Interceptor.attach(DDMAdminConnectionGetInfoEx, {onLeave: function (args) {send("DDMAdminConnectionGetInfoEx");}});

var DDMAdminInterfaceConnect = Module.findExportByName("mprddm.dll", "DDMAdminInterfaceConnect")
Interceptor.attach(DDMAdminInterfaceConnect, {onLeave: function (args) {send("DDMAdminInterfaceConnect");}});

var DDMAdminInterfaceDisconnect = Module.findExportByName("mprddm.dll", "DDMAdminInterfaceDisconnect")
Interceptor.attach(DDMAdminInterfaceDisconnect, {onLeave: function (args) {send("DDMAdminInterfaceDisconnect");}});

var DDMAdminPortClearStats = Module.findExportByName("mprddm.dll", "DDMAdminPortClearStats")
Interceptor.attach(DDMAdminPortClearStats, {onLeave: function (args) {send("DDMAdminPortClearStats");}});

var DDMAdminPortDisconnect = Module.findExportByName("mprddm.dll", "DDMAdminPortDisconnect")
Interceptor.attach(DDMAdminPortDisconnect, {onLeave: function (args) {send("DDMAdminPortDisconnect");}});

var DDMAdminPortEnum = Module.findExportByName("mprddm.dll", "DDMAdminPortEnum")
Interceptor.attach(DDMAdminPortEnum, {onLeave: function (args) {send("DDMAdminPortEnum");}});

var DDMAdminPortGetInfo = Module.findExportByName("mprddm.dll", "DDMAdminPortGetInfo")
Interceptor.attach(DDMAdminPortGetInfo, {onLeave: function (args) {send("DDMAdminPortGetInfo");}});

var DDMAdminPortReset = Module.findExportByName("mprddm.dll", "DDMAdminPortReset")
Interceptor.attach(DDMAdminPortReset, {onLeave: function (args) {send("DDMAdminPortReset");}});

var DDMAdminRemoveQuarantine = Module.findExportByName("mprddm.dll", "DDMAdminRemoveQuarantine")
Interceptor.attach(DDMAdminRemoveQuarantine, {onLeave: function (args) {send("DDMAdminRemoveQuarantine");}});

var DDMAdminRoutingDomainConnectionEnumEx = Module.findExportByName("mprddm.dll", "DDMAdminRoutingDomainConnectionEnumEx")
Interceptor.attach(DDMAdminRoutingDomainConnectionEnumEx, {onLeave: function (args) {send("DDMAdminRoutingDomainConnectionEnumEx");}});

var DDMAdminServerGetInfo = Module.findExportByName("mprddm.dll", "DDMAdminServerGetInfo")
Interceptor.attach(DDMAdminServerGetInfo, {onLeave: function (args) {send("DDMAdminServerGetInfo");}});

var DDMAdminServerGetInfoEx = Module.findExportByName("mprddm.dll", "DDMAdminServerGetInfoEx")
Interceptor.attach(DDMAdminServerGetInfoEx, {onLeave: function (args) {send("DDMAdminServerGetInfoEx");}});

var DDMAdminServerSetInfo = Module.findExportByName("mprddm.dll", "DDMAdminServerSetInfo")
Interceptor.attach(DDMAdminServerSetInfo, {onLeave: function (args) {send("DDMAdminServerSetInfo");}});

var DDMAdminServerSetInfoEx = Module.findExportByName("mprddm.dll", "DDMAdminServerSetInfoEx")
Interceptor.attach(DDMAdminServerSetInfoEx, {onLeave: function (args) {send("DDMAdminServerSetInfoEx");}});

var DDMAdminUpdateConnection = Module.findExportByName("mprddm.dll", "DDMAdminUpdateConnection")
Interceptor.attach(DDMAdminUpdateConnection, {onLeave: function (args) {send("DDMAdminUpdateConnection");}});

var DDMAdminUpdateQoSPolicies = Module.findExportByName("mprddm.dll", "DDMAdminUpdateQoSPolicies")
Interceptor.attach(DDMAdminUpdateQoSPolicies, {onLeave: function (args) {send("DDMAdminUpdateQoSPolicies");}});

var DDMConnectInterface = Module.findExportByName("mprddm.dll", "DDMConnectInterface")
Interceptor.attach(DDMConnectInterface, {onLeave: function (args) {send("DDMConnectInterface");}});

var DDMDisconnectInterface = Module.findExportByName("mprddm.dll", "DDMDisconnectInterface")
Interceptor.attach(DDMDisconnectInterface, {onLeave: function (args) {send("DDMDisconnectInterface");}});

var DDMGetIdentityAttributes = Module.findExportByName("mprddm.dll", "DDMGetIdentityAttributes")
Interceptor.attach(DDMGetIdentityAttributes, {onLeave: function (args) {send("DDMGetIdentityAttributes");}});

var DDMHandleRoutingDomainConfigChange = Module.findExportByName("mprddm.dll", "DDMHandleRoutingDomainConfigChange")
Interceptor.attach(DDMHandleRoutingDomainConfigChange, {onLeave: function (args) {send("DDMHandleRoutingDomainConfigChange");}});

var DDMPlumbRDIkev2TunnelPolicy = Module.findExportByName("mprddm.dll", "DDMPlumbRDIkev2TunnelPolicy")
Interceptor.attach(DDMPlumbRDIkev2TunnelPolicy, {onLeave: function (args) {send("DDMPlumbRDIkev2TunnelPolicy");}});

var DDMPostCleanup = Module.findExportByName("mprddm.dll", "DDMPostCleanup")
Interceptor.attach(DDMPostCleanup, {onLeave: function (args) {send("DDMPostCleanup");}});

var DDMRegisterConnectionNotification = Module.findExportByName("mprddm.dll", "DDMRegisterConnectionNotification")
Interceptor.attach(DDMRegisterConnectionNotification, {onLeave: function (args) {send("DDMRegisterConnectionNotification");}});

var DDMSendUserMessage = Module.findExportByName("mprddm.dll", "DDMSendUserMessage")
Interceptor.attach(DDMSendUserMessage, {onLeave: function (args) {send("DDMSendUserMessage");}});

var DDMServiceInitialize = Module.findExportByName("mprddm.dll", "DDMServiceInitialize")
Interceptor.attach(DDMServiceInitialize, {onLeave: function (args) {send("DDMServiceInitialize");}});

var DDMServicePostListens = Module.findExportByName("mprddm.dll", "DDMServicePostListens")
Interceptor.attach(DDMServicePostListens, {onLeave: function (args) {send("DDMServicePostListens");}});

var DDMTransportCreate = Module.findExportByName("mprddm.dll", "DDMTransportCreate")
Interceptor.attach(DDMTransportCreate, {onLeave: function (args) {send("DDMTransportCreate");}});

var DdmDeleteIkev2PskPolicy = Module.findExportByName("mprddm.dll", "DdmDeleteIkev2PskPolicy")
Interceptor.attach(DdmDeleteIkev2PskPolicy, {onLeave: function (args) {send("DdmDeleteIkev2PskPolicy");}});

var DdmGetKey = Module.findExportByName("mprddm.dll", "DdmGetKey")
Interceptor.attach(DdmGetKey, {onLeave: function (args) {send("DdmGetKey");}});

var DdmPlumbIkev2PskPolicy = Module.findExportByName("mprddm.dll", "DdmPlumbIkev2PskPolicy")
Interceptor.attach(DdmPlumbIkev2PskPolicy, {onLeave: function (args) {send("DdmPlumbIkev2PskPolicy");}});

var DdmSetKey = Module.findExportByName("mprddm.dll", "DdmSetKey")
Interceptor.attach(DdmSetKey, {onLeave: function (args) {send("DdmSetKey");}});

var DdmUpdateGlobalPhoneBookContext = Module.findExportByName("mprddm.dll", "DdmUpdateGlobalPhoneBookContext")
Interceptor.attach(DdmUpdateGlobalPhoneBookContext, {onLeave: function (args) {send("DdmUpdateGlobalPhoneBookContext");}});

var IfObjectConnectionChangeNotification = Module.findExportByName("mprddm.dll", "IfObjectConnectionChangeNotification")
Interceptor.attach(IfObjectConnectionChangeNotification, {onLeave: function (args) {send("IfObjectConnectionChangeNotification");}});

var IfObjectFreePhonebookContext = Module.findExportByName("mprddm.dll", "IfObjectFreePhonebookContext")
Interceptor.attach(IfObjectFreePhonebookContext, {onLeave: function (args) {send("IfObjectFreePhonebookContext");}});

var IfObjectGetStatistics = Module.findExportByName("mprddm.dll", "IfObjectGetStatistics")
Interceptor.attach(IfObjectGetStatistics, {onLeave: function (args) {send("IfObjectGetStatistics");}});

var IfObjectLoadDestinationInfo = Module.findExportByName("mprddm.dll", "IfObjectLoadDestinationInfo")
Interceptor.attach(IfObjectLoadDestinationInfo, {onLeave: function (args) {send("IfObjectLoadDestinationInfo");}});

var IfObjectLoadPhonebookInfo = Module.findExportByName("mprddm.dll", "IfObjectLoadPhonebookInfo")
Interceptor.attach(IfObjectLoadPhonebookInfo, {onLeave: function (args) {send("IfObjectLoadPhonebookInfo");}});

var IfObjectSetDialoutHoursRestriction = Module.findExportByName("mprddm.dll", "IfObjectSetDialoutHoursRestriction")
Interceptor.attach(IfObjectSetDialoutHoursRestriction, {onLeave: function (args) {send("IfObjectSetDialoutHoursRestriction");}});

var IfObjectUpdatePbkExtraInfo = Module.findExportByName("mprddm.dll", "IfObjectUpdatePbkExtraInfo")
Interceptor.attach(IfObjectUpdatePbkExtraInfo, {onLeave: function (args) {send("IfObjectUpdatePbkExtraInfo");}});

var IfObjectUpdatePbkInfo = Module.findExportByName("mprddm.dll", "IfObjectUpdatePbkInfo")
Interceptor.attach(IfObjectUpdatePbkInfo, {onLeave: function (args) {send("IfObjectUpdatePbkInfo");}});

var MarkInterfaceAsReachable = Module.findExportByName("mprddm.dll", "MarkInterfaceAsReachable")
Interceptor.attach(MarkInterfaceAsReachable, {onLeave: function (args) {send("MarkInterfaceAsReachable");}});

var RasAcctConfigChangeNotification = Module.findExportByName("mprddm.dll", "RasAcctConfigChangeNotification")
Interceptor.attach(RasAcctConfigChangeNotification, {onLeave: function (args) {send("RasAcctConfigChangeNotification");}});

var RasAcctProviderFreeAttributes = Module.findExportByName("mprddm.dll", "RasAcctProviderFreeAttributes")
Interceptor.attach(RasAcctProviderFreeAttributes, {onLeave: function (args) {send("RasAcctProviderFreeAttributes");}});

var RasAcctProviderInitialize = Module.findExportByName("mprddm.dll", "RasAcctProviderInitialize")
Interceptor.attach(RasAcctProviderInitialize, {onLeave: function (args) {send("RasAcctProviderInitialize");}});

var RasAcctProviderInterimAccounting = Module.findExportByName("mprddm.dll", "RasAcctProviderInterimAccounting")
Interceptor.attach(RasAcctProviderInterimAccounting, {onLeave: function (args) {send("RasAcctProviderInterimAccounting");}});

var RasAcctProviderStartAccounting = Module.findExportByName("mprddm.dll", "RasAcctProviderStartAccounting")
Interceptor.attach(RasAcctProviderStartAccounting, {onLeave: function (args) {send("RasAcctProviderStartAccounting");}});

var RasAcctProviderStopAccounting = Module.findExportByName("mprddm.dll", "RasAcctProviderStopAccounting")
Interceptor.attach(RasAcctProviderStopAccounting, {onLeave: function (args) {send("RasAcctProviderStopAccounting");}});

var RasAcctProviderTerminate = Module.findExportByName("mprddm.dll", "RasAcctProviderTerminate")
Interceptor.attach(RasAcctProviderTerminate, {onLeave: function (args) {send("RasAcctProviderTerminate");}});

var RasAuthConfigChangeNotification = Module.findExportByName("mprddm.dll", "RasAuthConfigChangeNotification")
Interceptor.attach(RasAuthConfigChangeNotification, {onLeave: function (args) {send("RasAuthConfigChangeNotification");}});

var RasAuthProviderAuthenticateUser = Module.findExportByName("mprddm.dll", "RasAuthProviderAuthenticateUser")
Interceptor.attach(RasAuthProviderAuthenticateUser, {onLeave: function (args) {send("RasAuthProviderAuthenticateUser");}});

var RasAuthProviderFreeAttributes = Module.findExportByName("mprddm.dll", "RasAuthProviderFreeAttributes")
Interceptor.attach(RasAuthProviderFreeAttributes, {onLeave: function (args) {send("RasAuthProviderFreeAttributes");}});

var RasAuthProviderInitialize = Module.findExportByName("mprddm.dll", "RasAuthProviderInitialize")
Interceptor.attach(RasAuthProviderInitialize, {onLeave: function (args) {send("RasAuthProviderInitialize");}});

var RasAuthProviderTerminate = Module.findExportByName("mprddm.dll", "RasAuthProviderTerminate")
Interceptor.attach(RasAuthProviderTerminate, {onLeave: function (args) {send("RasAuthProviderTerminate");}});

var RasConnectionInitiate = Module.findExportByName("mprddm.dll", "RasConnectionInitiate")
Interceptor.attach(RasConnectionInitiate, {onLeave: function (args) {send("RasConnectionInitiate");}});

var ReConnectInterface = Module.findExportByName("mprddm.dll", "ReConnectInterface")
Interceptor.attach(ReConnectInterface, {onLeave: function (args) {send("ReConnectInterface");}});

var ReConnectPersistentInterface = Module.findExportByName("mprddm.dll", "ReConnectPersistentInterface")
Interceptor.attach(ReConnectPersistentInterface, {onLeave: function (args) {send("ReConnectPersistentInterface");}});

var TimerQInsert = Module.findExportByName("mprddm.dll", "TimerQInsert")
Interceptor.attach(TimerQInsert, {onLeave: function (args) {send("TimerQInsert");}});

var TimerQRemove = Module.findExportByName("mprddm.dll", "TimerQRemove")
Interceptor.attach(TimerQRemove, {onLeave: function (args) {send("TimerQRemove");}});

