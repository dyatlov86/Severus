var CtfImeAssociateFocus = Module.findExportByName("msctf.dll", "CtfImeAssociateFocus")
Interceptor.attach(CtfImeAssociateFocus, {onLeave: function (args) {send("CtfImeAssociateFocus");}});

var CtfImeConfigure = Module.findExportByName("msctf.dll", "CtfImeConfigure")
Interceptor.attach(CtfImeConfigure, {onLeave: function (args) {send("CtfImeConfigure");}});

var CtfImeConversionList = Module.findExportByName("msctf.dll", "CtfImeConversionList")
Interceptor.attach(CtfImeConversionList, {onLeave: function (args) {send("CtfImeConversionList");}});

var CtfImeCreateInputContext = Module.findExportByName("msctf.dll", "CtfImeCreateInputContext")
Interceptor.attach(CtfImeCreateInputContext, {onLeave: function (args) {send("CtfImeCreateInputContext");}});

var CtfImeCreateThreadMgr = Module.findExportByName("msctf.dll", "CtfImeCreateThreadMgr")
Interceptor.attach(CtfImeCreateThreadMgr, {onLeave: function (args) {send("CtfImeCreateThreadMgr");}});

var CtfImeDestroy = Module.findExportByName("msctf.dll", "CtfImeDestroy")
Interceptor.attach(CtfImeDestroy, {onLeave: function (args) {send("CtfImeDestroy");}});

var CtfImeDestroyInputContext = Module.findExportByName("msctf.dll", "CtfImeDestroyInputContext")
Interceptor.attach(CtfImeDestroyInputContext, {onLeave: function (args) {send("CtfImeDestroyInputContext");}});

var CtfImeDestroyThreadMgr = Module.findExportByName("msctf.dll", "CtfImeDestroyThreadMgr")
Interceptor.attach(CtfImeDestroyThreadMgr, {onLeave: function (args) {send("CtfImeDestroyThreadMgr");}});

var CtfImeDispatchDefImeMessage = Module.findExportByName("msctf.dll", "CtfImeDispatchDefImeMessage")
Interceptor.attach(CtfImeDispatchDefImeMessage, {onLeave: function (args) {send("CtfImeDispatchDefImeMessage");}});

var CtfImeEnumRegisterWord = Module.findExportByName("msctf.dll", "CtfImeEnumRegisterWord")
Interceptor.attach(CtfImeEnumRegisterWord, {onLeave: function (args) {send("CtfImeEnumRegisterWord");}});

var CtfImeEscape = Module.findExportByName("msctf.dll", "CtfImeEscape")
Interceptor.attach(CtfImeEscape, {onLeave: function (args) {send("CtfImeEscape");}});

var CtfImeEscapeEx = Module.findExportByName("msctf.dll", "CtfImeEscapeEx")
Interceptor.attach(CtfImeEscapeEx, {onLeave: function (args) {send("CtfImeEscapeEx");}});

var CtfImeGetGuidAtom = Module.findExportByName("msctf.dll", "CtfImeGetGuidAtom")
Interceptor.attach(CtfImeGetGuidAtom, {onLeave: function (args) {send("CtfImeGetGuidAtom");}});

var CtfImeGetRegisterWordStyle = Module.findExportByName("msctf.dll", "CtfImeGetRegisterWordStyle")
Interceptor.attach(CtfImeGetRegisterWordStyle, {onLeave: function (args) {send("CtfImeGetRegisterWordStyle");}});

var CtfImeInquire = Module.findExportByName("msctf.dll", "CtfImeInquire")
Interceptor.attach(CtfImeInquire, {onLeave: function (args) {send("CtfImeInquire");}});

var CtfImeInquireExW = Module.findExportByName("msctf.dll", "CtfImeInquireExW")
Interceptor.attach(CtfImeInquireExW, {onLeave: function (args) {send("CtfImeInquireExW");}});

var CtfImeIsGuidMapEnable = Module.findExportByName("msctf.dll", "CtfImeIsGuidMapEnable")
Interceptor.attach(CtfImeIsGuidMapEnable, {onLeave: function (args) {send("CtfImeIsGuidMapEnable");}});

var CtfImeIsIME = Module.findExportByName("msctf.dll", "CtfImeIsIME")
Interceptor.attach(CtfImeIsIME, {onLeave: function (args) {send("CtfImeIsIME");}});

var CtfImeProcessCicHotkey = Module.findExportByName("msctf.dll", "CtfImeProcessCicHotkey")
Interceptor.attach(CtfImeProcessCicHotkey, {onLeave: function (args) {send("CtfImeProcessCicHotkey");}});

var CtfImeProcessKey = Module.findExportByName("msctf.dll", "CtfImeProcessKey")
Interceptor.attach(CtfImeProcessKey, {onLeave: function (args) {send("CtfImeProcessKey");}});

var CtfImeRegisterWord = Module.findExportByName("msctf.dll", "CtfImeRegisterWord")
Interceptor.attach(CtfImeRegisterWord, {onLeave: function (args) {send("CtfImeRegisterWord");}});

var CtfImeSelect = Module.findExportByName("msctf.dll", "CtfImeSelect")
Interceptor.attach(CtfImeSelect, {onLeave: function (args) {send("CtfImeSelect");}});

var CtfImeSelectEx = Module.findExportByName("msctf.dll", "CtfImeSelectEx")
Interceptor.attach(CtfImeSelectEx, {onLeave: function (args) {send("CtfImeSelectEx");}});

var CtfImeSetActiveContext = Module.findExportByName("msctf.dll", "CtfImeSetActiveContext")
Interceptor.attach(CtfImeSetActiveContext, {onLeave: function (args) {send("CtfImeSetActiveContext");}});

var CtfImeSetCompositionString = Module.findExportByName("msctf.dll", "CtfImeSetCompositionString")
Interceptor.attach(CtfImeSetCompositionString, {onLeave: function (args) {send("CtfImeSetCompositionString");}});

var CtfImeSetFocus = Module.findExportByName("msctf.dll", "CtfImeSetFocus")
Interceptor.attach(CtfImeSetFocus, {onLeave: function (args) {send("CtfImeSetFocus");}});

var CtfImeToAsciiEx = Module.findExportByName("msctf.dll", "CtfImeToAsciiEx")
Interceptor.attach(CtfImeToAsciiEx, {onLeave: function (args) {send("CtfImeToAsciiEx");}});

var CtfImeUnregisterWord = Module.findExportByName("msctf.dll", "CtfImeUnregisterWord")
Interceptor.attach(CtfImeUnregisterWord, {onLeave: function (args) {send("CtfImeUnregisterWord");}});

var CtfNotifyIME = Module.findExportByName("msctf.dll", "CtfNotifyIME")
Interceptor.attach(CtfNotifyIME, {onLeave: function (args) {send("CtfNotifyIME");}});

var DllCanUnloadNow = Module.findExportByName("msctf.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetClassObject = Module.findExportByName("msctf.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var DllRegisterServer = Module.findExportByName("msctf.dll", "DllRegisterServer")
Interceptor.attach(DllRegisterServer, {onLeave: function (args) {send("DllRegisterServer");}});

var DllUnregisterServer = Module.findExportByName("msctf.dll", "DllUnregisterServer")
Interceptor.attach(DllUnregisterServer, {onLeave: function (args) {send("DllUnregisterServer");}});

var GetHandwritingStrokeIdForPointer = Module.findExportByName("msctf.dll", "GetHandwritingStrokeIdForPointer")
Interceptor.attach(GetHandwritingStrokeIdForPointer, {onLeave: function (args) {send("GetHandwritingStrokeIdForPointer");}});

var GetLogonUserSid = Module.findExportByName("msctf.dll", "GetLogonUserSid")
Interceptor.attach(GetLogonUserSid, {onLeave: function (args) {send("GetLogonUserSid");}});

var HasDeferredInputForCoreDispatcher = Module.findExportByName("msctf.dll", "HasDeferredInputForCoreDispatcher")
Interceptor.attach(HasDeferredInputForCoreDispatcher, {onLeave: function (args) {send("HasDeferredInputForCoreDispatcher");}});

var InputFocusMonitorCreate = Module.findExportByName("msctf.dll", "InputFocusMonitorCreate")
Interceptor.attach(InputFocusMonitorCreate, {onLeave: function (args) {send("InputFocusMonitorCreate");}});

var RegisterHandwritingInputRoutingCallback = Module.findExportByName("msctf.dll", "RegisterHandwritingInputRoutingCallback")
Interceptor.attach(RegisterHandwritingInputRoutingCallback, {onLeave: function (args) {send("RegisterHandwritingInputRoutingCallback");}});

var SetInputScope = Module.findExportByName("msctf.dll", "SetInputScope")
Interceptor.attach(SetInputScope, {onLeave: function (args) {send("SetInputScope");}});

var SetInputScopeXML = Module.findExportByName("msctf.dll", "SetInputScopeXML")
Interceptor.attach(SetInputScopeXML, {onLeave: function (args) {send("SetInputScopeXML");}});

var SetInputScopes = Module.findExportByName("msctf.dll", "SetInputScopes")
Interceptor.attach(SetInputScopes, {onLeave: function (args) {send("SetInputScopes");}});

var SetInputScopes2 = Module.findExportByName("msctf.dll", "SetInputScopes2")
Interceptor.attach(SetInputScopes2, {onLeave: function (args) {send("SetInputScopes2");}});

var TF_CUASAppFix = Module.findExportByName("msctf.dll", "TF_CUASAppFix")
Interceptor.attach(TF_CUASAppFix, {onLeave: function (args) {send("TF_CUASAppFix");}});

var TF_CanUninitialize = Module.findExportByName("msctf.dll", "TF_CanUninitialize")
Interceptor.attach(TF_CanUninitialize, {onLeave: function (args) {send("TF_CanUninitialize");}});

var TF_CleanUpPrivateMessages = Module.findExportByName("msctf.dll", "TF_CleanUpPrivateMessages")
Interceptor.attach(TF_CleanUpPrivateMessages, {onLeave: function (args) {send("TF_CleanUpPrivateMessages");}});

var TF_CreateCategoryMgr = Module.findExportByName("msctf.dll", "TF_CreateCategoryMgr")
Interceptor.attach(TF_CreateCategoryMgr, {onLeave: function (args) {send("TF_CreateCategoryMgr");}});

var TF_CreateCicLoadMutex = Module.findExportByName("msctf.dll", "TF_CreateCicLoadMutex")
Interceptor.attach(TF_CreateCicLoadMutex, {onLeave: function (args) {send("TF_CreateCicLoadMutex");}});

var TF_CreateCicLoadWinStaMutex = Module.findExportByName("msctf.dll", "TF_CreateCicLoadWinStaMutex")
Interceptor.attach(TF_CreateCicLoadWinStaMutex, {onLeave: function (args) {send("TF_CreateCicLoadWinStaMutex");}});

var TF_CreateDisplayAttributeMgr = Module.findExportByName("msctf.dll", "TF_CreateDisplayAttributeMgr")
Interceptor.attach(TF_CreateDisplayAttributeMgr, {onLeave: function (args) {send("TF_CreateDisplayAttributeMgr");}});

var TF_CreateInputProcessorProfiles = Module.findExportByName("msctf.dll", "TF_CreateInputProcessorProfiles")
Interceptor.attach(TF_CreateInputProcessorProfiles, {onLeave: function (args) {send("TF_CreateInputProcessorProfiles");}});

var TF_CreateLangBarItemMgr = Module.findExportByName("msctf.dll", "TF_CreateLangBarItemMgr")
Interceptor.attach(TF_CreateLangBarItemMgr, {onLeave: function (args) {send("TF_CreateLangBarItemMgr");}});

var TF_CreateLangBarMgr = Module.findExportByName("msctf.dll", "TF_CreateLangBarMgr")
Interceptor.attach(TF_CreateLangBarMgr, {onLeave: function (args) {send("TF_CreateLangBarMgr");}});

var TF_CreateThreadMgr = Module.findExportByName("msctf.dll", "TF_CreateThreadMgr")
Interceptor.attach(TF_CreateThreadMgr, {onLeave: function (args) {send("TF_CreateThreadMgr");}});

var TF_GetAppCompatFlags = Module.findExportByName("msctf.dll", "TF_GetAppCompatFlags")
Interceptor.attach(TF_GetAppCompatFlags, {onLeave: function (args) {send("TF_GetAppCompatFlags");}});

var TF_GetCompatibleKeyboardLayout = Module.findExportByName("msctf.dll", "TF_GetCompatibleKeyboardLayout")
Interceptor.attach(TF_GetCompatibleKeyboardLayout, {onLeave: function (args) {send("TF_GetCompatibleKeyboardLayout");}});

var TF_GetGlobalCompartment = Module.findExportByName("msctf.dll", "TF_GetGlobalCompartment")
Interceptor.attach(TF_GetGlobalCompartment, {onLeave: function (args) {send("TF_GetGlobalCompartment");}});

var TF_GetInitSystemFlags = Module.findExportByName("msctf.dll", "TF_GetInitSystemFlags")
Interceptor.attach(TF_GetInitSystemFlags, {onLeave: function (args) {send("TF_GetInitSystemFlags");}});

var TF_GetInputScope = Module.findExportByName("msctf.dll", "TF_GetInputScope")
Interceptor.attach(TF_GetInputScope, {onLeave: function (args) {send("TF_GetInputScope");}});

var TF_GetShowFloatingStatus = Module.findExportByName("msctf.dll", "TF_GetShowFloatingStatus")
Interceptor.attach(TF_GetShowFloatingStatus, {onLeave: function (args) {send("TF_GetShowFloatingStatus");}});

var TF_GetThreadFlags = Module.findExportByName("msctf.dll", "TF_GetThreadFlags")
Interceptor.attach(TF_GetThreadFlags, {onLeave: function (args) {send("TF_GetThreadFlags");}});

var TF_GetThreadMgr = Module.findExportByName("msctf.dll", "TF_GetThreadMgr")
Interceptor.attach(TF_GetThreadMgr, {onLeave: function (args) {send("TF_GetThreadMgr");}});

var TF_InitSystem = Module.findExportByName("msctf.dll", "TF_InitSystem")
Interceptor.attach(TF_InitSystem, {onLeave: function (args) {send("TF_InitSystem");}});

var TF_InvalidAssemblyListCacheIfExist = Module.findExportByName("msctf.dll", "TF_InvalidAssemblyListCacheIfExist")
Interceptor.attach(TF_InvalidAssemblyListCacheIfExist, {onLeave: function (args) {send("TF_InvalidAssemblyListCacheIfExist");}});

var TF_IsCtfmonRunning = Module.findExportByName("msctf.dll", "TF_IsCtfmonRunning")
Interceptor.attach(TF_IsCtfmonRunning, {onLeave: function (args) {send("TF_IsCtfmonRunning");}});

var TF_IsLanguageBarEnabled = Module.findExportByName("msctf.dll", "TF_IsLanguageBarEnabled")
Interceptor.attach(TF_IsLanguageBarEnabled, {onLeave: function (args) {send("TF_IsLanguageBarEnabled");}});

var TF_IsThreadWithFlags = Module.findExportByName("msctf.dll", "TF_IsThreadWithFlags")
Interceptor.attach(TF_IsThreadWithFlags, {onLeave: function (args) {send("TF_IsThreadWithFlags");}});

var TF_MapCompatibleHKL = Module.findExportByName("msctf.dll", "TF_MapCompatibleHKL")
Interceptor.attach(TF_MapCompatibleHKL, {onLeave: function (args) {send("TF_MapCompatibleHKL");}});

var TF_MapCompatibleKeyboardTip = Module.findExportByName("msctf.dll", "TF_MapCompatibleKeyboardTip")
Interceptor.attach(TF_MapCompatibleKeyboardTip, {onLeave: function (args) {send("TF_MapCompatibleKeyboardTip");}});

var TF_Notify = Module.findExportByName("msctf.dll", "TF_Notify")
Interceptor.attach(TF_Notify, {onLeave: function (args) {send("TF_Notify");}});

var TF_PostAllThreadMsg = Module.findExportByName("msctf.dll", "TF_PostAllThreadMsg")
Interceptor.attach(TF_PostAllThreadMsg, {onLeave: function (args) {send("TF_PostAllThreadMsg");}});

var TF_RunInputCPL = Module.findExportByName("msctf.dll", "TF_RunInputCPL")
Interceptor.attach(TF_RunInputCPL, {onLeave: function (args) {send("TF_RunInputCPL");}});

var TF_SendLangBandMsg = Module.findExportByName("msctf.dll", "TF_SendLangBandMsg")
Interceptor.attach(TF_SendLangBandMsg, {onLeave: function (args) {send("TF_SendLangBandMsg");}});

var TF_SetDefaultRemoteKeyboardLayout = Module.findExportByName("msctf.dll", "TF_SetDefaultRemoteKeyboardLayout")
Interceptor.attach(TF_SetDefaultRemoteKeyboardLayout, {onLeave: function (args) {send("TF_SetDefaultRemoteKeyboardLayout");}});

var TF_SetShowFloatingStatus = Module.findExportByName("msctf.dll", "TF_SetShowFloatingStatus")
Interceptor.attach(TF_SetShowFloatingStatus, {onLeave: function (args) {send("TF_SetShowFloatingStatus");}});

var TF_SetThreadFlags = Module.findExportByName("msctf.dll", "TF_SetThreadFlags")
Interceptor.attach(TF_SetThreadFlags, {onLeave: function (args) {send("TF_SetThreadFlags");}});

var TF_UninitSystem = Module.findExportByName("msctf.dll", "TF_UninitSystem")
Interceptor.attach(TF_UninitSystem, {onLeave: function (args) {send("TF_UninitSystem");}});

var TF_WaitForInitialized = Module.findExportByName("msctf.dll", "TF_WaitForInitialized")
Interceptor.attach(TF_WaitForInitialized, {onLeave: function (args) {send("TF_WaitForInitialized");}});

var TextInputClientWrapperCreate = Module.findExportByName("msctf.dll", "TextInputClientWrapperCreate")
Interceptor.attach(TextInputClientWrapperCreate, {onLeave: function (args) {send("TextInputClientWrapperCreate");}});

