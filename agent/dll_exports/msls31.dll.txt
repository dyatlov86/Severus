var LsAppendRunToCurrentSubline = Module.findExportByName("msls31.dll", "LsAppendRunToCurrentSubline")
Interceptor.attach(LsAppendRunToCurrentSubline, {onLeave: function (args) {send("LsAppendRunToCurrentSubline");}});

var LsCompressSubline = Module.findExportByName("msls31.dll", "LsCompressSubline")
Interceptor.attach(LsCompressSubline, {onLeave: function (args) {send("LsCompressSubline");}});

var LsCreateContext = Module.findExportByName("msls31.dll", "LsCreateContext")
Interceptor.attach(LsCreateContext, {onLeave: function (args) {send("LsCreateContext");}});

var LsCreateLine = Module.findExportByName("msls31.dll", "LsCreateLine")
Interceptor.attach(LsCreateLine, {onLeave: function (args) {send("LsCreateLine");}});

var LsCreateSubline = Module.findExportByName("msls31.dll", "LsCreateSubline")
Interceptor.attach(LsCreateSubline, {onLeave: function (args) {send("LsCreateSubline");}});

var LsDestroyContext = Module.findExportByName("msls31.dll", "LsDestroyContext")
Interceptor.attach(LsDestroyContext, {onLeave: function (args) {send("LsDestroyContext");}});

var LsDestroyLine = Module.findExportByName("msls31.dll", "LsDestroyLine")
Interceptor.attach(LsDestroyLine, {onLeave: function (args) {send("LsDestroyLine");}});

var LsDestroySubline = Module.findExportByName("msls31.dll", "LsDestroySubline")
Interceptor.attach(LsDestroySubline, {onLeave: function (args) {send("LsDestroySubline");}});

var LsDisplayLine = Module.findExportByName("msls31.dll", "LsDisplayLine")
Interceptor.attach(LsDisplayLine, {onLeave: function (args) {send("LsDisplayLine");}});

var LsDisplaySubline = Module.findExportByName("msls31.dll", "LsDisplaySubline")
Interceptor.attach(LsDisplaySubline, {onLeave: function (args) {send("LsDisplaySubline");}});

var LsEnumLine = Module.findExportByName("msls31.dll", "LsEnumLine")
Interceptor.attach(LsEnumLine, {onLeave: function (args) {send("LsEnumLine");}});

var LsEnumSubline = Module.findExportByName("msls31.dll", "LsEnumSubline")
Interceptor.attach(LsEnumSubline, {onLeave: function (args) {send("LsEnumSubline");}});

var LsExpandSubline = Module.findExportByName("msls31.dll", "LsExpandSubline")
Interceptor.attach(LsExpandSubline, {onLeave: function (args) {send("LsExpandSubline");}});

var LsFetchAppendToCurrentSubline = Module.findExportByName("msls31.dll", "LsFetchAppendToCurrentSubline")
Interceptor.attach(LsFetchAppendToCurrentSubline, {onLeave: function (args) {send("LsFetchAppendToCurrentSubline");}});

var LsFetchAppendToCurrentSublineResume = Module.findExportByName("msls31.dll", "LsFetchAppendToCurrentSublineResume")
Interceptor.attach(LsFetchAppendToCurrentSublineResume, {onLeave: function (args) {send("LsFetchAppendToCurrentSublineResume");}});

var LsFindNextBreakSubline = Module.findExportByName("msls31.dll", "LsFindNextBreakSubline")
Interceptor.attach(LsFindNextBreakSubline, {onLeave: function (args) {send("LsFindNextBreakSubline");}});

var LsFindPrevBreakSubline = Module.findExportByName("msls31.dll", "LsFindPrevBreakSubline")
Interceptor.attach(LsFindPrevBreakSubline, {onLeave: function (args) {send("LsFindPrevBreakSubline");}});

var LsFinishCurrentSubline = Module.findExportByName("msls31.dll", "LsFinishCurrentSubline")
Interceptor.attach(LsFinishCurrentSubline, {onLeave: function (args) {send("LsFinishCurrentSubline");}});

var LsForceBreakSubline = Module.findExportByName("msls31.dll", "LsForceBreakSubline")
Interceptor.attach(LsForceBreakSubline, {onLeave: function (args) {send("LsForceBreakSubline");}});

var LsGetHihLsimethods = Module.findExportByName("msls31.dll", "LsGetHihLsimethods")
Interceptor.attach(LsGetHihLsimethods, {onLeave: function (args) {send("LsGetHihLsimethods");}});

var LsGetLineDur = Module.findExportByName("msls31.dll", "LsGetLineDur")
Interceptor.attach(LsGetLineDur, {onLeave: function (args) {send("LsGetLineDur");}});

var LsGetMinDurBreaks = Module.findExportByName("msls31.dll", "LsGetMinDurBreaks")
Interceptor.attach(LsGetMinDurBreaks, {onLeave: function (args) {send("LsGetMinDurBreaks");}});

var LsGetReverseLsimethods = Module.findExportByName("msls31.dll", "LsGetReverseLsimethods")
Interceptor.attach(LsGetReverseLsimethods, {onLeave: function (args) {send("LsGetReverseLsimethods");}});

var LsGetRubyLsimethods = Module.findExportByName("msls31.dll", "LsGetRubyLsimethods")
Interceptor.attach(LsGetRubyLsimethods, {onLeave: function (args) {send("LsGetRubyLsimethods");}});

var LsGetSpecialEffectsSubline = Module.findExportByName("msls31.dll", "LsGetSpecialEffectsSubline")
Interceptor.attach(LsGetSpecialEffectsSubline, {onLeave: function (args) {send("LsGetSpecialEffectsSubline");}});

var LsGetTatenakayokoLsimethods = Module.findExportByName("msls31.dll", "LsGetTatenakayokoLsimethods")
Interceptor.attach(LsGetTatenakayokoLsimethods, {onLeave: function (args) {send("LsGetTatenakayokoLsimethods");}});

var LsGetWarichuLsimethods = Module.findExportByName("msls31.dll", "LsGetWarichuLsimethods")
Interceptor.attach(LsGetWarichuLsimethods, {onLeave: function (args) {send("LsGetWarichuLsimethods");}});

var LsLwMultDivR = Module.findExportByName("msls31.dll", "LsLwMultDivR")
Interceptor.attach(LsLwMultDivR, {onLeave: function (args) {send("LsLwMultDivR");}});

var LsMatchPresSubline = Module.findExportByName("msls31.dll", "LsMatchPresSubline")
Interceptor.attach(LsMatchPresSubline, {onLeave: function (args) {send("LsMatchPresSubline");}});

var LsModifyLineHeight = Module.findExportByName("msls31.dll", "LsModifyLineHeight")
Interceptor.attach(LsModifyLineHeight, {onLeave: function (args) {send("LsModifyLineHeight");}});

var LsPointUV2FromPointUV1 = Module.findExportByName("msls31.dll", "LsPointUV2FromPointUV1")
Interceptor.attach(LsPointUV2FromPointUV1, {onLeave: function (args) {send("LsPointUV2FromPointUV1");}});

var LsPointXYFromPointUV = Module.findExportByName("msls31.dll", "LsPointXYFromPointUV")
Interceptor.attach(LsPointXYFromPointUV, {onLeave: function (args) {send("LsPointXYFromPointUV");}});

var LsQueryCpPpointSubline = Module.findExportByName("msls31.dll", "LsQueryCpPpointSubline")
Interceptor.attach(LsQueryCpPpointSubline, {onLeave: function (args) {send("LsQueryCpPpointSubline");}});

var LsQueryFLineEmpty = Module.findExportByName("msls31.dll", "LsQueryFLineEmpty")
Interceptor.attach(LsQueryFLineEmpty, {onLeave: function (args) {send("LsQueryFLineEmpty");}});

var LsQueryLineCpPpoint = Module.findExportByName("msls31.dll", "LsQueryLineCpPpoint")
Interceptor.attach(LsQueryLineCpPpoint, {onLeave: function (args) {send("LsQueryLineCpPpoint");}});

var LsQueryLineDup = Module.findExportByName("msls31.dll", "LsQueryLineDup")
Interceptor.attach(LsQueryLineDup, {onLeave: function (args) {send("LsQueryLineDup");}});

var LsQueryLinePointPcp = Module.findExportByName("msls31.dll", "LsQueryLinePointPcp")
Interceptor.attach(LsQueryLinePointPcp, {onLeave: function (args) {send("LsQueryLinePointPcp");}});

var LsQueryPointPcpSubline = Module.findExportByName("msls31.dll", "LsQueryPointPcpSubline")
Interceptor.attach(LsQueryPointPcpSubline, {onLeave: function (args) {send("LsQueryPointPcpSubline");}});

var LsQueryTextCellDetails = Module.findExportByName("msls31.dll", "LsQueryTextCellDetails")
Interceptor.attach(LsQueryTextCellDetails, {onLeave: function (args) {send("LsQueryTextCellDetails");}});

var LsResetRMInCurrentSubline = Module.findExportByName("msls31.dll", "LsResetRMInCurrentSubline")
Interceptor.attach(LsResetRMInCurrentSubline, {onLeave: function (args) {send("LsResetRMInCurrentSubline");}});

var LsSetBreakSubline = Module.findExportByName("msls31.dll", "LsSetBreakSubline")
Interceptor.attach(LsSetBreakSubline, {onLeave: function (args) {send("LsSetBreakSubline");}});

var LsSetBreaking = Module.findExportByName("msls31.dll", "LsSetBreaking")
Interceptor.attach(LsSetBreaking, {onLeave: function (args) {send("LsSetBreaking");}});

var LsSetCompression = Module.findExportByName("msls31.dll", "LsSetCompression")
Interceptor.attach(LsSetCompression, {onLeave: function (args) {send("LsSetCompression");}});

var LsSetDoc = Module.findExportByName("msls31.dll", "LsSetDoc")
Interceptor.attach(LsSetDoc, {onLeave: function (args) {send("LsSetDoc");}});

var LsSetExpansion = Module.findExportByName("msls31.dll", "LsSetExpansion")
Interceptor.attach(LsSetExpansion, {onLeave: function (args) {send("LsSetExpansion");}});

var LsSetModWidthPairs = Module.findExportByName("msls31.dll", "LsSetModWidthPairs")
Interceptor.attach(LsSetModWidthPairs, {onLeave: function (args) {send("LsSetModWidthPairs");}});

var LsSqueezeSubline = Module.findExportByName("msls31.dll", "LsSqueezeSubline")
Interceptor.attach(LsSqueezeSubline, {onLeave: function (args) {send("LsSqueezeSubline");}});

var LsTruncateSubline = Module.findExportByName("msls31.dll", "LsTruncateSubline")
Interceptor.attach(LsTruncateSubline, {onLeave: function (args) {send("LsTruncateSubline");}});

var LsdnDistribute = Module.findExportByName("msls31.dll", "LsdnDistribute")
Interceptor.attach(LsdnDistribute, {onLeave: function (args) {send("LsdnDistribute");}});

var LsdnFinishByOneChar = Module.findExportByName("msls31.dll", "LsdnFinishByOneChar")
Interceptor.attach(LsdnFinishByOneChar, {onLeave: function (args) {send("LsdnFinishByOneChar");}});

var LsdnFinishByPen = Module.findExportByName("msls31.dll", "LsdnFinishByPen")
Interceptor.attach(LsdnFinishByPen, {onLeave: function (args) {send("LsdnFinishByPen");}});

var LsdnFinishBySubline = Module.findExportByName("msls31.dll", "LsdnFinishBySubline")
Interceptor.attach(LsdnFinishBySubline, {onLeave: function (args) {send("LsdnFinishBySubline");}});

var LsdnFinishDelete = Module.findExportByName("msls31.dll", "LsdnFinishDelete")
Interceptor.attach(LsdnFinishDelete, {onLeave: function (args) {send("LsdnFinishDelete");}});

var LsdnFinishDeleteAll = Module.findExportByName("msls31.dll", "LsdnFinishDeleteAll")
Interceptor.attach(LsdnFinishDeleteAll, {onLeave: function (args) {send("LsdnFinishDeleteAll");}});

var LsdnFinishRegular = Module.findExportByName("msls31.dll", "LsdnFinishRegular")
Interceptor.attach(LsdnFinishRegular, {onLeave: function (args) {send("LsdnFinishRegular");}});

var LsdnFinishRegularAddAdvancePen = Module.findExportByName("msls31.dll", "LsdnFinishRegularAddAdvancePen")
Interceptor.attach(LsdnFinishRegularAddAdvancePen, {onLeave: function (args) {send("LsdnFinishRegularAddAdvancePen");}});

var LsdnGetCurTabInfo = Module.findExportByName("msls31.dll", "LsdnGetCurTabInfo")
Interceptor.attach(LsdnGetCurTabInfo, {onLeave: function (args) {send("LsdnGetCurTabInfo");}});

var LsdnGetDup = Module.findExportByName("msls31.dll", "LsdnGetDup")
Interceptor.attach(LsdnGetDup, {onLeave: function (args) {send("LsdnGetDup");}});

var LsdnGetFormatDepth = Module.findExportByName("msls31.dll", "LsdnGetFormatDepth")
Interceptor.attach(LsdnGetFormatDepth, {onLeave: function (args) {send("LsdnGetFormatDepth");}});

var LsdnModifyParaEnding = Module.findExportByName("msls31.dll", "LsdnModifyParaEnding")
Interceptor.attach(LsdnModifyParaEnding, {onLeave: function (args) {send("LsdnModifyParaEnding");}});

var LsdnQueryObjDimRange = Module.findExportByName("msls31.dll", "LsdnQueryObjDimRange")
Interceptor.attach(LsdnQueryObjDimRange, {onLeave: function (args) {send("LsdnQueryObjDimRange");}});

var LsdnQueryPenNode = Module.findExportByName("msls31.dll", "LsdnQueryPenNode")
Interceptor.attach(LsdnQueryPenNode, {onLeave: function (args) {send("LsdnQueryPenNode");}});

var LsdnResetObjDim = Module.findExportByName("msls31.dll", "LsdnResetObjDim")
Interceptor.attach(LsdnResetObjDim, {onLeave: function (args) {send("LsdnResetObjDim");}});

var LsdnResetPenNode = Module.findExportByName("msls31.dll", "LsdnResetPenNode")
Interceptor.attach(LsdnResetPenNode, {onLeave: function (args) {send("LsdnResetPenNode");}});

var LsdnResolvePrevTab = Module.findExportByName("msls31.dll", "LsdnResolvePrevTab")
Interceptor.attach(LsdnResolvePrevTab, {onLeave: function (args) {send("LsdnResolvePrevTab");}});

var LsdnSetAbsBaseLine = Module.findExportByName("msls31.dll", "LsdnSetAbsBaseLine")
Interceptor.attach(LsdnSetAbsBaseLine, {onLeave: function (args) {send("LsdnSetAbsBaseLine");}});

var LsdnSetRigidDup = Module.findExportByName("msls31.dll", "LsdnSetRigidDup")
Interceptor.attach(LsdnSetRigidDup, {onLeave: function (args) {send("LsdnSetRigidDup");}});

var LsdnSkipCurTab = Module.findExportByName("msls31.dll", "LsdnSkipCurTab")
Interceptor.attach(LsdnSkipCurTab, {onLeave: function (args) {send("LsdnSkipCurTab");}});

var LsdnSubmitSublines = Module.findExportByName("msls31.dll", "LsdnSubmitSublines")
Interceptor.attach(LsdnSubmitSublines, {onLeave: function (args) {send("LsdnSubmitSublines");}});

var LssbFDoneDisplay = Module.findExportByName("msls31.dll", "LssbFDoneDisplay")
Interceptor.attach(LssbFDoneDisplay, {onLeave: function (args) {send("LssbFDoneDisplay");}});

var LssbFDonePresSubline = Module.findExportByName("msls31.dll", "LssbFDonePresSubline")
Interceptor.attach(LssbFDonePresSubline, {onLeave: function (args) {send("LssbFDonePresSubline");}});

var LssbFIsSublineEmpty = Module.findExportByName("msls31.dll", "LssbFIsSublineEmpty")
Interceptor.attach(LssbFIsSublineEmpty, {onLeave: function (args) {send("LssbFIsSublineEmpty");}});

var LssbGetDupSubline = Module.findExportByName("msls31.dll", "LssbGetDupSubline")
Interceptor.attach(LssbGetDupSubline, {onLeave: function (args) {send("LssbGetDupSubline");}});

var LssbGetDurTrailInSubline = Module.findExportByName("msls31.dll", "LssbGetDurTrailInSubline")
Interceptor.attach(LssbGetDurTrailInSubline, {onLeave: function (args) {send("LssbGetDurTrailInSubline");}});

var LssbGetDurTrailWithPensInSubline = Module.findExportByName("msls31.dll", "LssbGetDurTrailWithPensInSubline")
Interceptor.attach(LssbGetDurTrailWithPensInSubline, {onLeave: function (args) {send("LssbGetDurTrailWithPensInSubline");}});

var LssbGetNumberDnodesInSubline = Module.findExportByName("msls31.dll", "LssbGetNumberDnodesInSubline")
Interceptor.attach(LssbGetNumberDnodesInSubline, {onLeave: function (args) {send("LssbGetNumberDnodesInSubline");}});

var LssbGetObjDimSubline = Module.findExportByName("msls31.dll", "LssbGetObjDimSubline")
Interceptor.attach(LssbGetObjDimSubline, {onLeave: function (args) {send("LssbGetObjDimSubline");}});

var LssbGetPlsrunsFromSubline = Module.findExportByName("msls31.dll", "LssbGetPlsrunsFromSubline")
Interceptor.attach(LssbGetPlsrunsFromSubline, {onLeave: function (args) {send("LssbGetPlsrunsFromSubline");}});

var LssbGetVisibleDcpInSubline = Module.findExportByName("msls31.dll", "LssbGetVisibleDcpInSubline")
Interceptor.attach(LssbGetVisibleDcpInSubline, {onLeave: function (args) {send("LssbGetVisibleDcpInSubline");}});

