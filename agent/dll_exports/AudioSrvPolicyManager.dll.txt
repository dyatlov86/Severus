var ActivatePolicyManager = Module.findExportByName("AudioSrvPolicyManager.dll", "ActivatePolicyManager")
Interceptor.attach(ActivatePolicyManager, {onLeave: function (args) {send("ActivatePolicyManager");}});

var HHOSTEDAPPMANAGERCONTEXTRundown = Module.findExportByName("AudioSrvPolicyManager.dll", "HHOSTEDAPPMANAGERCONTEXTRundown")
Interceptor.attach(HHOSTEDAPPMANAGERCONTEXTRundown, {onLeave: function (args) {send("HHOSTEDAPPMANAGERCONTEXTRundown");}});

var PbmAllowMediaPlaybackForApp = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmAllowMediaPlaybackForApp")
Interceptor.attach(PbmAllowMediaPlaybackForApp, {onLeave: function (args) {send("PbmAllowMediaPlaybackForApp");}});

var PbmCastingAppStateChanged = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmCastingAppStateChanged")
Interceptor.attach(PbmCastingAppStateChanged, {onLeave: function (args) {send("PbmCastingAppStateChanged");}});

var PbmGetSoundLevel = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmGetSoundLevel")
Interceptor.attach(PbmGetSoundLevel, {onLeave: function (args) {send("PbmGetSoundLevel");}});

var PbmIsPlaying = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmIsPlaying")
Interceptor.attach(PbmIsPlaying, {onLeave: function (args) {send("PbmIsPlaying");}});

var PbmLaunchBackgroundTask = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmLaunchBackgroundTask")
Interceptor.attach(PbmLaunchBackgroundTask, {onLeave: function (args) {send("PbmLaunchBackgroundTask");}});

var PbmPlayToStreamStateChanged = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmPlayToStreamStateChanged")
Interceptor.attach(PbmPlayToStreamStateChanged, {onLeave: function (args) {send("PbmPlayToStreamStateChanged");}});

var PbmRegisterAppClosureNotification = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmRegisterAppClosureNotification")
Interceptor.attach(PbmRegisterAppClosureNotification, {onLeave: function (args) {send("PbmRegisterAppClosureNotification");}});

var PbmRegisterAppManagerNotification = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmRegisterAppManagerNotification")
Interceptor.attach(PbmRegisterAppManagerNotification, {onLeave: function (args) {send("PbmRegisterAppManagerNotification");}});

var PbmRegisterPlaybackManagerNotifications = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmRegisterPlaybackManagerNotifications")
Interceptor.attach(PbmRegisterPlaybackManagerNotifications, {onLeave: function (args) {send("PbmRegisterPlaybackManagerNotifications");}});

var PbmReportAppClosing = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmReportAppClosing")
Interceptor.attach(PbmReportAppClosing, {onLeave: function (args) {send("PbmReportAppClosing");}});

var PbmReportAppInteractivityChange = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmReportAppInteractivityChange")
Interceptor.attach(PbmReportAppInteractivityChange, {onLeave: function (args) {send("PbmReportAppInteractivityChange");}});

var PbmReportApplicationState = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmReportApplicationState")
Interceptor.attach(PbmReportApplicationState, {onLeave: function (args) {send("PbmReportApplicationState");}});

var PbmReportHostedAppStateChange = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmReportHostedAppStateChange")
Interceptor.attach(PbmReportHostedAppStateChange, {onLeave: function (args) {send("PbmReportHostedAppStateChange");}});

var PbmReportHostedAppStateChange_2 = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmReportHostedAppStateChange_2")
Interceptor.attach(PbmReportHostedAppStateChange_2, {onLeave: function (args) {send("PbmReportHostedAppStateChange_2");}});

var PbmSetScreenReaderState = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmSetScreenReaderState")
Interceptor.attach(PbmSetScreenReaderState, {onLeave: function (args) {send("PbmSetScreenReaderState");}});

var PbmSetSmtcSubscriptionState = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmSetSmtcSubscriptionState")
Interceptor.attach(PbmSetSmtcSubscriptionState, {onLeave: function (args) {send("PbmSetSmtcSubscriptionState");}});

var PbmSwitchSoftNonInteractiveAppsToHardNonInteractive = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmSwitchSoftNonInteractiveAppsToHardNonInteractive")
Interceptor.attach(PbmSwitchSoftNonInteractiveAppsToHardNonInteractive, {onLeave: function (args) {send("PbmSwitchSoftNonInteractiveAppsToHardNonInteractive");}});

var PbmUnregisterAppClosureNotification = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmUnregisterAppClosureNotification")
Interceptor.attach(PbmUnregisterAppClosureNotification, {onLeave: function (args) {send("PbmUnregisterAppClosureNotification");}});

var PbmUnregisterAppManagerNotification = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmUnregisterAppManagerNotification")
Interceptor.attach(PbmUnregisterAppManagerNotification, {onLeave: function (args) {send("PbmUnregisterAppManagerNotification");}});

var PbmUnregisterPlaybackManagerNotifications = Module.findExportByName("AudioSrvPolicyManager.dll", "PbmUnregisterPlaybackManagerNotifications")
Interceptor.attach(PbmUnregisterPlaybackManagerNotifications, {onLeave: function (args) {send("PbmUnregisterPlaybackManagerNotifications");}});

var TS_AudioProtocolNotifyRundown = Module.findExportByName("AudioSrvPolicyManager.dll", "TS_AudioProtocolNotifyRundown")
Interceptor.attach(TS_AudioProtocolNotifyRundown, {onLeave: function (args) {send("TS_AudioProtocolNotifyRundown");}});

var TS_RegisterAudioProtocolNotification = Module.findExportByName("AudioSrvPolicyManager.dll", "TS_RegisterAudioProtocolNotification")
Interceptor.attach(TS_RegisterAudioProtocolNotification, {onLeave: function (args) {send("TS_RegisterAudioProtocolNotification");}});

var TS_SessionChanged = Module.findExportByName("AudioSrvPolicyManager.dll", "TS_SessionChanged")
Interceptor.attach(TS_SessionChanged, {onLeave: function (args) {send("TS_SessionChanged");}});

var TS_SessionGetAudioProtocol = Module.findExportByName("AudioSrvPolicyManager.dll", "TS_SessionGetAudioProtocol")
Interceptor.attach(TS_SessionGetAudioProtocol, {onLeave: function (args) {send("TS_SessionGetAudioProtocol");}});

var TS_UnregisterAudioProtocolNotification = Module.findExportByName("AudioSrvPolicyManager.dll", "TS_UnregisterAudioProtocolNotification")
Interceptor.attach(TS_UnregisterAudioProtocolNotification, {onLeave: function (args) {send("TS_UnregisterAudioProtocolNotification");}});

