var AccessCheck = Module.findExportByName("KernelBase.dll", "AccessCheck")
Interceptor.attach(AccessCheck, {onLeave: function (args) {send("AccessCheck");}});

var AccessCheckAndAuditAlarmW = Module.findExportByName("KernelBase.dll", "AccessCheckAndAuditAlarmW")
Interceptor.attach(AccessCheckAndAuditAlarmW, {onLeave: function (args) {send("AccessCheckAndAuditAlarmW");}});

var AccessCheckByType = Module.findExportByName("KernelBase.dll", "AccessCheckByType")
Interceptor.attach(AccessCheckByType, {onLeave: function (args) {send("AccessCheckByType");}});

var AccessCheckByTypeAndAuditAlarmW = Module.findExportByName("KernelBase.dll", "AccessCheckByTypeAndAuditAlarmW")
Interceptor.attach(AccessCheckByTypeAndAuditAlarmW, {onLeave: function (args) {send("AccessCheckByTypeAndAuditAlarmW");}});

var AccessCheckByTypeResultList = Module.findExportByName("KernelBase.dll", "AccessCheckByTypeResultList")
Interceptor.attach(AccessCheckByTypeResultList, {onLeave: function (args) {send("AccessCheckByTypeResultList");}});

var AccessCheckByTypeResultListAndAuditAlarmByHandleW = Module.findExportByName("KernelBase.dll", "AccessCheckByTypeResultListAndAuditAlarmByHandleW")
Interceptor.attach(AccessCheckByTypeResultListAndAuditAlarmByHandleW, {onLeave: function (args) {send("AccessCheckByTypeResultListAndAuditAlarmByHandleW");}});

var AccessCheckByTypeResultListAndAuditAlarmW = Module.findExportByName("KernelBase.dll", "AccessCheckByTypeResultListAndAuditAlarmW")
Interceptor.attach(AccessCheckByTypeResultListAndAuditAlarmW, {onLeave: function (args) {send("AccessCheckByTypeResultListAndAuditAlarmW");}});

var AcquireSRWLockExclusive = Module.findExportByName("KernelBase.dll", "AcquireSRWLockExclusive")
Interceptor.attach(AcquireSRWLockExclusive, {onLeave: function (args) {send("AcquireSRWLockExclusive");}});

var AcquireSRWLockShared = Module.findExportByName("KernelBase.dll", "AcquireSRWLockShared")
Interceptor.attach(AcquireSRWLockShared, {onLeave: function (args) {send("AcquireSRWLockShared");}});

var AcquireStateLock = Module.findExportByName("KernelBase.dll", "AcquireStateLock")
Interceptor.attach(AcquireStateLock, {onLeave: function (args) {send("AcquireStateLock");}});

var ActivateActCtx = Module.findExportByName("KernelBase.dll", "ActivateActCtx")
Interceptor.attach(ActivateActCtx, {onLeave: function (args) {send("ActivateActCtx");}});

var AddAccessAllowedAce = Module.findExportByName("KernelBase.dll", "AddAccessAllowedAce")
Interceptor.attach(AddAccessAllowedAce, {onLeave: function (args) {send("AddAccessAllowedAce");}});

var AddAccessAllowedAceEx = Module.findExportByName("KernelBase.dll", "AddAccessAllowedAceEx")
Interceptor.attach(AddAccessAllowedAceEx, {onLeave: function (args) {send("AddAccessAllowedAceEx");}});

var AddAccessAllowedObjectAce = Module.findExportByName("KernelBase.dll", "AddAccessAllowedObjectAce")
Interceptor.attach(AddAccessAllowedObjectAce, {onLeave: function (args) {send("AddAccessAllowedObjectAce");}});

var AddAccessDeniedAce = Module.findExportByName("KernelBase.dll", "AddAccessDeniedAce")
Interceptor.attach(AddAccessDeniedAce, {onLeave: function (args) {send("AddAccessDeniedAce");}});

var AddAccessDeniedAceEx = Module.findExportByName("KernelBase.dll", "AddAccessDeniedAceEx")
Interceptor.attach(AddAccessDeniedAceEx, {onLeave: function (args) {send("AddAccessDeniedAceEx");}});

var AddAccessDeniedObjectAce = Module.findExportByName("KernelBase.dll", "AddAccessDeniedObjectAce")
Interceptor.attach(AddAccessDeniedObjectAce, {onLeave: function (args) {send("AddAccessDeniedObjectAce");}});

var AddAce = Module.findExportByName("KernelBase.dll", "AddAce")
Interceptor.attach(AddAce, {onLeave: function (args) {send("AddAce");}});

var AddAuditAccessAce = Module.findExportByName("KernelBase.dll", "AddAuditAccessAce")
Interceptor.attach(AddAuditAccessAce, {onLeave: function (args) {send("AddAuditAccessAce");}});

var AddAuditAccessAceEx = Module.findExportByName("KernelBase.dll", "AddAuditAccessAceEx")
Interceptor.attach(AddAuditAccessAceEx, {onLeave: function (args) {send("AddAuditAccessAceEx");}});

var AddAuditAccessObjectAce = Module.findExportByName("KernelBase.dll", "AddAuditAccessObjectAce")
Interceptor.attach(AddAuditAccessObjectAce, {onLeave: function (args) {send("AddAuditAccessObjectAce");}});

var AddConsoleAliasA = Module.findExportByName("KernelBase.dll", "AddConsoleAliasA")
Interceptor.attach(AddConsoleAliasA, {onLeave: function (args) {send("AddConsoleAliasA");}});

var AddConsoleAliasW = Module.findExportByName("KernelBase.dll", "AddConsoleAliasW")
Interceptor.attach(AddConsoleAliasW, {onLeave: function (args) {send("AddConsoleAliasW");}});

var AddDependencyToProcessPackageGraph = Module.findExportByName("KernelBase.dll", "AddDependencyToProcessPackageGraph")
Interceptor.attach(AddDependencyToProcessPackageGraph, {onLeave: function (args) {send("AddDependencyToProcessPackageGraph");}});

var AddDllDirectory = Module.findExportByName("KernelBase.dll", "AddDllDirectory")
Interceptor.attach(AddDllDirectory, {onLeave: function (args) {send("AddDllDirectory");}});

var AddExtensionProgId = Module.findExportByName("KernelBase.dll", "AddExtensionProgId")
Interceptor.attach(AddExtensionProgId, {onLeave: function (args) {send("AddExtensionProgId");}});

var AddMandatoryAce = Module.findExportByName("KernelBase.dll", "AddMandatoryAce")
Interceptor.attach(AddMandatoryAce, {onLeave: function (args) {send("AddMandatoryAce");}});

var AddPackageDependency = Module.findExportByName("KernelBase.dll", "AddPackageDependency")
Interceptor.attach(AddPackageDependency, {onLeave: function (args) {send("AddPackageDependency");}});

var AddRefActCtx = Module.findExportByName("KernelBase.dll", "AddRefActCtx")
Interceptor.attach(AddRefActCtx, {onLeave: function (args) {send("AddRefActCtx");}});

var AddResourceAttributeAce = Module.findExportByName("KernelBase.dll", "AddResourceAttributeAce")
Interceptor.attach(AddResourceAttributeAce, {onLeave: function (args) {send("AddResourceAttributeAce");}});

var AddSIDToBoundaryDescriptor = Module.findExportByName("KernelBase.dll", "AddSIDToBoundaryDescriptor")
Interceptor.attach(AddSIDToBoundaryDescriptor, {onLeave: function (args) {send("AddSIDToBoundaryDescriptor");}});

var AddScopedPolicyIDAce = Module.findExportByName("KernelBase.dll", "AddScopedPolicyIDAce")
Interceptor.attach(AddScopedPolicyIDAce, {onLeave: function (args) {send("AddScopedPolicyIDAce");}});

var AddVectoredContinueHandler = Module.findExportByName("KernelBase.dll", "AddVectoredContinueHandler")
Interceptor.attach(AddVectoredContinueHandler, {onLeave: function (args) {send("AddVectoredContinueHandler");}});

var AddVectoredExceptionHandler = Module.findExportByName("KernelBase.dll", "AddVectoredExceptionHandler")
Interceptor.attach(AddVectoredExceptionHandler, {onLeave: function (args) {send("AddVectoredExceptionHandler");}});

var AdjustTokenGroups = Module.findExportByName("KernelBase.dll", "AdjustTokenGroups")
Interceptor.attach(AdjustTokenGroups, {onLeave: function (args) {send("AdjustTokenGroups");}});

var AdjustTokenPrivileges = Module.findExportByName("KernelBase.dll", "AdjustTokenPrivileges")
Interceptor.attach(AdjustTokenPrivileges, {onLeave: function (args) {send("AdjustTokenPrivileges");}});

var AllocConsole = Module.findExportByName("KernelBase.dll", "AllocConsole")
Interceptor.attach(AllocConsole, {onLeave: function (args) {send("AllocConsole");}});

var AllocateAndInitializeSid = Module.findExportByName("KernelBase.dll", "AllocateAndInitializeSid")
Interceptor.attach(AllocateAndInitializeSid, {onLeave: function (args) {send("AllocateAndInitializeSid");}});

var AllocateLocallyUniqueId = Module.findExportByName("KernelBase.dll", "AllocateLocallyUniqueId")
Interceptor.attach(AllocateLocallyUniqueId, {onLeave: function (args) {send("AllocateLocallyUniqueId");}});

var AllocateUserPhysicalPages = Module.findExportByName("KernelBase.dll", "AllocateUserPhysicalPages")
Interceptor.attach(AllocateUserPhysicalPages, {onLeave: function (args) {send("AllocateUserPhysicalPages");}});

var AllocateUserPhysicalPages2 = Module.findExportByName("KernelBase.dll", "AllocateUserPhysicalPages2")
Interceptor.attach(AllocateUserPhysicalPages2, {onLeave: function (args) {send("AllocateUserPhysicalPages2");}});

var AllocateUserPhysicalPagesNuma = Module.findExportByName("KernelBase.dll", "AllocateUserPhysicalPagesNuma")
Interceptor.attach(AllocateUserPhysicalPagesNuma, {onLeave: function (args) {send("AllocateUserPhysicalPagesNuma");}});

var AppContainerDeriveSidFromMoniker = Module.findExportByName("KernelBase.dll", "AppContainerDeriveSidFromMoniker")
Interceptor.attach(AppContainerDeriveSidFromMoniker, {onLeave: function (args) {send("AppContainerDeriveSidFromMoniker");}});

var AppContainerFreeMemory = Module.findExportByName("KernelBase.dll", "AppContainerFreeMemory")
Interceptor.attach(AppContainerFreeMemory, {onLeave: function (args) {send("AppContainerFreeMemory");}});

var AppContainerLookupDisplayNameMrtReference = Module.findExportByName("KernelBase.dll", "AppContainerLookupDisplayNameMrtReference")
Interceptor.attach(AppContainerLookupDisplayNameMrtReference, {onLeave: function (args) {send("AppContainerLookupDisplayNameMrtReference");}});

var AppContainerLookupMoniker = Module.findExportByName("KernelBase.dll", "AppContainerLookupMoniker")
Interceptor.attach(AppContainerLookupMoniker, {onLeave: function (args) {send("AppContainerLookupMoniker");}});

var AppContainerRegisterSid = Module.findExportByName("KernelBase.dll", "AppContainerRegisterSid")
Interceptor.attach(AppContainerRegisterSid, {onLeave: function (args) {send("AppContainerRegisterSid");}});

var AppContainerUnregisterSid = Module.findExportByName("KernelBase.dll", "AppContainerUnregisterSid")
Interceptor.attach(AppContainerUnregisterSid, {onLeave: function (args) {send("AppContainerUnregisterSid");}});

var AppPolicyGetClrCompat = Module.findExportByName("KernelBase.dll", "AppPolicyGetClrCompat")
Interceptor.attach(AppPolicyGetClrCompat, {onLeave: function (args) {send("AppPolicyGetClrCompat");}});

var AppPolicyGetCreateFileAccess = Module.findExportByName("KernelBase.dll", "AppPolicyGetCreateFileAccess")
Interceptor.attach(AppPolicyGetCreateFileAccess, {onLeave: function (args) {send("AppPolicyGetCreateFileAccess");}});

var AppPolicyGetLifecycleManagement = Module.findExportByName("KernelBase.dll", "AppPolicyGetLifecycleManagement")
Interceptor.attach(AppPolicyGetLifecycleManagement, {onLeave: function (args) {send("AppPolicyGetLifecycleManagement");}});

var AppPolicyGetMediaFoundationCodecLoading = Module.findExportByName("KernelBase.dll", "AppPolicyGetMediaFoundationCodecLoading")
Interceptor.attach(AppPolicyGetMediaFoundationCodecLoading, {onLeave: function (args) {send("AppPolicyGetMediaFoundationCodecLoading");}});

var AppPolicyGetProcessTerminationMethod = Module.findExportByName("KernelBase.dll", "AppPolicyGetProcessTerminationMethod")
Interceptor.attach(AppPolicyGetProcessTerminationMethod, {onLeave: function (args) {send("AppPolicyGetProcessTerminationMethod");}});

var AppPolicyGetShowDeveloperDiagnostic = Module.findExportByName("KernelBase.dll", "AppPolicyGetShowDeveloperDiagnostic")
Interceptor.attach(AppPolicyGetShowDeveloperDiagnostic, {onLeave: function (args) {send("AppPolicyGetShowDeveloperDiagnostic");}});

var AppPolicyGetThreadInitializationType = Module.findExportByName("KernelBase.dll", "AppPolicyGetThreadInitializationType")
Interceptor.attach(AppPolicyGetThreadInitializationType, {onLeave: function (args) {send("AppPolicyGetThreadInitializationType");}});

var AppPolicyGetWindowingModel = Module.findExportByName("KernelBase.dll", "AppPolicyGetWindowingModel")
Interceptor.attach(AppPolicyGetWindowingModel, {onLeave: function (args) {send("AppPolicyGetWindowingModel");}});

var AppXFreeMemory = Module.findExportByName("KernelBase.dll", "AppXFreeMemory")
Interceptor.attach(AppXFreeMemory, {onLeave: function (args) {send("AppXFreeMemory");}});

var AppXGetApplicationData = Module.findExportByName("KernelBase.dll", "AppXGetApplicationData")
Interceptor.attach(AppXGetApplicationData, {onLeave: function (args) {send("AppXGetApplicationData");}});

var AppXGetDevelopmentMode = Module.findExportByName("KernelBase.dll", "AppXGetDevelopmentMode")
Interceptor.attach(AppXGetDevelopmentMode, {onLeave: function (args) {send("AppXGetDevelopmentMode");}});

var AppXGetOSMaxVersionTested = Module.findExportByName("KernelBase.dll", "AppXGetOSMaxVersionTested")
Interceptor.attach(AppXGetOSMaxVersionTested, {onLeave: function (args) {send("AppXGetOSMaxVersionTested");}});

var AppXGetOSMinVersion = Module.findExportByName("KernelBase.dll", "AppXGetOSMinVersion")
Interceptor.attach(AppXGetOSMinVersion, {onLeave: function (args) {send("AppXGetOSMinVersion");}});

var AppXGetPackageCapabilities = Module.findExportByName("KernelBase.dll", "AppXGetPackageCapabilities")
Interceptor.attach(AppXGetPackageCapabilities, {onLeave: function (args) {send("AppXGetPackageCapabilities");}});

var AppXGetPackageSid = Module.findExportByName("KernelBase.dll", "AppXGetPackageSid")
Interceptor.attach(AppXGetPackageSid, {onLeave: function (args) {send("AppXGetPackageSid");}});

var AppXLookupDisplayName = Module.findExportByName("KernelBase.dll", "AppXLookupDisplayName")
Interceptor.attach(AppXLookupDisplayName, {onLeave: function (args) {send("AppXLookupDisplayName");}});

var AppXLookupMoniker = Module.findExportByName("KernelBase.dll", "AppXLookupMoniker")
Interceptor.attach(AppXLookupMoniker, {onLeave: function (args) {send("AppXLookupMoniker");}});

var AppXPostSuccessExtension = Module.findExportByName("KernelBase.dll", "AppXPostSuccessExtension")
Interceptor.attach(AppXPostSuccessExtension, {onLeave: function (args) {send("AppXPostSuccessExtension");}});

var AppXPreCreationExtension = Module.findExportByName("KernelBase.dll", "AppXPreCreationExtension")
Interceptor.attach(AppXPreCreationExtension, {onLeave: function (args) {send("AppXPreCreationExtension");}});

var AppXReleaseAppXContext = Module.findExportByName("KernelBase.dll", "AppXReleaseAppXContext")
Interceptor.attach(AppXReleaseAppXContext, {onLeave: function (args) {send("AppXReleaseAppXContext");}});

var AppXUpdatePackageCapabilities = Module.findExportByName("KernelBase.dll", "AppXUpdatePackageCapabilities")
Interceptor.attach(AppXUpdatePackageCapabilities, {onLeave: function (args) {send("AppXUpdatePackageCapabilities");}});

var ApplicationUserModelIdFromProductId = Module.findExportByName("KernelBase.dll", "ApplicationUserModelIdFromProductId")
Interceptor.attach(ApplicationUserModelIdFromProductId, {onLeave: function (args) {send("ApplicationUserModelIdFromProductId");}});

var AreAllAccessesGranted = Module.findExportByName("KernelBase.dll", "AreAllAccessesGranted")
Interceptor.attach(AreAllAccessesGranted, {onLeave: function (args) {send("AreAllAccessesGranted");}});

var AreAnyAccessesGranted = Module.findExportByName("KernelBase.dll", "AreAnyAccessesGranted")
Interceptor.attach(AreAnyAccessesGranted, {onLeave: function (args) {send("AreAnyAccessesGranted");}});

var AreFileApisANSI = Module.findExportByName("KernelBase.dll", "AreFileApisANSI")
Interceptor.attach(AreFileApisANSI, {onLeave: function (args) {send("AreFileApisANSI");}});

var AreShortNamesEnabled = Module.findExportByName("KernelBase.dll", "AreShortNamesEnabled")
Interceptor.attach(AreShortNamesEnabled, {onLeave: function (args) {send("AreShortNamesEnabled");}});

var AreThereVisibleLogoffScriptsInternal = Module.findExportByName("KernelBase.dll", "AreThereVisibleLogoffScriptsInternal")
Interceptor.attach(AreThereVisibleLogoffScriptsInternal, {onLeave: function (args) {send("AreThereVisibleLogoffScriptsInternal");}});

var AreThereVisibleShutdownScriptsInternal = Module.findExportByName("KernelBase.dll", "AreThereVisibleShutdownScriptsInternal")
Interceptor.attach(AreThereVisibleShutdownScriptsInternal, {onLeave: function (args) {send("AreThereVisibleShutdownScriptsInternal");}});

var ArmFeatureUsageSubscriberFlushNotification = Module.findExportByName("KernelBase.dll", "ArmFeatureUsageSubscriberFlushNotification")
Interceptor.attach(ArmFeatureUsageSubscriberFlushNotification, {onLeave: function (args) {send("ArmFeatureUsageSubscriberFlushNotification");}});

var AttachConsole = Module.findExportByName("KernelBase.dll", "AttachConsole")
Interceptor.attach(AttachConsole, {onLeave: function (args) {send("AttachConsole");}});

var BaseCheckAppcompatCache = Module.findExportByName("KernelBase.dll", "BaseCheckAppcompatCache")
Interceptor.attach(BaseCheckAppcompatCache, {onLeave: function (args) {send("BaseCheckAppcompatCache");}});

var BaseCheckAppcompatCacheEx = Module.findExportByName("KernelBase.dll", "BaseCheckAppcompatCacheEx")
Interceptor.attach(BaseCheckAppcompatCacheEx, {onLeave: function (args) {send("BaseCheckAppcompatCacheEx");}});

var BaseCleanupAppcompatCacheSupport = Module.findExportByName("KernelBase.dll", "BaseCleanupAppcompatCacheSupport")
Interceptor.attach(BaseCleanupAppcompatCacheSupport, {onLeave: function (args) {send("BaseCleanupAppcompatCacheSupport");}});

var BaseDllFreeResourceId = Module.findExportByName("KernelBase.dll", "BaseDllFreeResourceId")
Interceptor.attach(BaseDllFreeResourceId, {onLeave: function (args) {send("BaseDllFreeResourceId");}});

var BaseDllMapResourceIdW = Module.findExportByName("KernelBase.dll", "BaseDllMapResourceIdW")
Interceptor.attach(BaseDllMapResourceIdW, {onLeave: function (args) {send("BaseDllMapResourceIdW");}});

var BaseDumpAppcompatCache = Module.findExportByName("KernelBase.dll", "BaseDumpAppcompatCache")
Interceptor.attach(BaseDumpAppcompatCache, {onLeave: function (args) {send("BaseDumpAppcompatCache");}});

var BaseFlushAppcompatCache = Module.findExportByName("KernelBase.dll", "BaseFlushAppcompatCache")
Interceptor.attach(BaseFlushAppcompatCache, {onLeave: function (args) {send("BaseFlushAppcompatCache");}});

var BaseFormatObjectAttributes = Module.findExportByName("KernelBase.dll", "BaseFormatObjectAttributes")
Interceptor.attach(BaseFormatObjectAttributes, {onLeave: function (args) {send("BaseFormatObjectAttributes");}});

var BaseFreeAppCompatDataForProcess = Module.findExportByName("KernelBase.dll", "BaseFreeAppCompatDataForProcess")
Interceptor.attach(BaseFreeAppCompatDataForProcess, {onLeave: function (args) {send("BaseFreeAppCompatDataForProcess");}});

var BaseGetConsoleReference = Module.findExportByName("KernelBase.dll", "BaseGetConsoleReference")
Interceptor.attach(BaseGetConsoleReference, {onLeave: function (args) {send("BaseGetConsoleReference");}});

var BaseGetNamedObjectDirectory = Module.findExportByName("KernelBase.dll", "BaseGetNamedObjectDirectory")
Interceptor.attach(BaseGetNamedObjectDirectory, {onLeave: function (args) {send("BaseGetNamedObjectDirectory");}});

var BaseInitAppcompatCacheSupport = Module.findExportByName("KernelBase.dll", "BaseInitAppcompatCacheSupport")
Interceptor.attach(BaseInitAppcompatCacheSupport, {onLeave: function (args) {send("BaseInitAppcompatCacheSupport");}});

var BaseIsAppcompatInfrastructureDisabled = Module.findExportByName("KernelBase.dll", "BaseIsAppcompatInfrastructureDisabled")
Interceptor.attach(BaseIsAppcompatInfrastructureDisabled, {onLeave: function (args) {send("BaseIsAppcompatInfrastructureDisabled");}});

var BaseMarkFileForDelete = Module.findExportByName("KernelBase.dll", "BaseMarkFileForDelete")
Interceptor.attach(BaseMarkFileForDelete, {onLeave: function (args) {send("BaseMarkFileForDelete");}});

var BaseReadAppCompatDataForProcess = Module.findExportByName("KernelBase.dll", "BaseReadAppCompatDataForProcess")
Interceptor.attach(BaseReadAppCompatDataForProcess, {onLeave: function (args) {send("BaseReadAppCompatDataForProcess");}});

var BaseUpdateAppcompatCache = Module.findExportByName("KernelBase.dll", "BaseUpdateAppcompatCache")
Interceptor.attach(BaseUpdateAppcompatCache, {onLeave: function (args) {send("BaseUpdateAppcompatCache");}});

var BasepAdjustObjectAttributesForPrivateNamespace = Module.findExportByName("KernelBase.dll", "BasepAdjustObjectAttributesForPrivateNamespace")
Interceptor.attach(BasepAdjustObjectAttributesForPrivateNamespace, {onLeave: function (args) {send("BasepAdjustObjectAttributesForPrivateNamespace");}});

var BasepCopyFileCallback = Module.findExportByName("KernelBase.dll", "BasepCopyFileCallback")
Interceptor.attach(BasepCopyFileCallback, {onLeave: function (args) {send("BasepCopyFileCallback");}});

var BasepCopyFileExW = Module.findExportByName("KernelBase.dll", "BasepCopyFileExW")
Interceptor.attach(BasepCopyFileExW, {onLeave: function (args) {send("BasepCopyFileExW");}});

var BasepNotifyTrackingService = Module.findExportByName("KernelBase.dll", "BasepNotifyTrackingService")
Interceptor.attach(BasepNotifyTrackingService, {onLeave: function (args) {send("BasepNotifyTrackingService");}});

var Beep = Module.findExportByName("KernelBase.dll", "Beep")
Interceptor.attach(Beep, {onLeave: function (args) {send("Beep");}});

var BuildIoRingCancelRequest = Module.findExportByName("KernelBase.dll", "BuildIoRingCancelRequest")
Interceptor.attach(BuildIoRingCancelRequest, {onLeave: function (args) {send("BuildIoRingCancelRequest");}});

var BuildIoRingFlushFile = Module.findExportByName("KernelBase.dll", "BuildIoRingFlushFile")
Interceptor.attach(BuildIoRingFlushFile, {onLeave: function (args) {send("BuildIoRingFlushFile");}});

var BuildIoRingReadFile = Module.findExportByName("KernelBase.dll", "BuildIoRingReadFile")
Interceptor.attach(BuildIoRingReadFile, {onLeave: function (args) {send("BuildIoRingReadFile");}});

var BuildIoRingRegisterBuffers = Module.findExportByName("KernelBase.dll", "BuildIoRingRegisterBuffers")
Interceptor.attach(BuildIoRingRegisterBuffers, {onLeave: function (args) {send("BuildIoRingRegisterBuffers");}});

var BuildIoRingRegisterFileHandles = Module.findExportByName("KernelBase.dll", "BuildIoRingRegisterFileHandles")
Interceptor.attach(BuildIoRingRegisterFileHandles, {onLeave: function (args) {send("BuildIoRingRegisterFileHandles");}});

var BuildIoRingWriteFile = Module.findExportByName("KernelBase.dll", "BuildIoRingWriteFile")
Interceptor.attach(BuildIoRingWriteFile, {onLeave: function (args) {send("BuildIoRingWriteFile");}});

var CLOSE_LOCAL_HANDLE_INTERNAL = Module.findExportByName("KernelBase.dll", "CLOSE_LOCAL_HANDLE_INTERNAL")
Interceptor.attach(CLOSE_LOCAL_HANDLE_INTERNAL, {onLeave: function (args) {send("CLOSE_LOCAL_HANDLE_INTERNAL");}});

var CallEnclave = Module.findExportByName("KernelBase.dll", "CallEnclave")
Interceptor.attach(CallEnclave, {onLeave: function (args) {send("CallEnclave");}});

var CallNamedPipeW = Module.findExportByName("KernelBase.dll", "CallNamedPipeW")
Interceptor.attach(CallNamedPipeW, {onLeave: function (args) {send("CallNamedPipeW");}});

var CallbackMayRunLong = Module.findExportByName("KernelBase.dll", "CallbackMayRunLong")
Interceptor.attach(CallbackMayRunLong, {onLeave: function (args) {send("CallbackMayRunLong");}});

var CancelIo = Module.findExportByName("KernelBase.dll", "CancelIo")
Interceptor.attach(CancelIo, {onLeave: function (args) {send("CancelIo");}});

var CancelIoEx = Module.findExportByName("KernelBase.dll", "CancelIoEx")
Interceptor.attach(CancelIoEx, {onLeave: function (args) {send("CancelIoEx");}});

var CancelSynchronousIo = Module.findExportByName("KernelBase.dll", "CancelSynchronousIo")
Interceptor.attach(CancelSynchronousIo, {onLeave: function (args) {send("CancelSynchronousIo");}});

var CancelThreadpoolIo = Module.findExportByName("KernelBase.dll", "CancelThreadpoolIo")
Interceptor.attach(CancelThreadpoolIo, {onLeave: function (args) {send("CancelThreadpoolIo");}});

var CancelWaitableTimer = Module.findExportByName("KernelBase.dll", "CancelWaitableTimer")
Interceptor.attach(CancelWaitableTimer, {onLeave: function (args) {send("CancelWaitableTimer");}});

var CeipIsOptedIn = Module.findExportByName("KernelBase.dll", "CeipIsOptedIn")
Interceptor.attach(CeipIsOptedIn, {onLeave: function (args) {send("CeipIsOptedIn");}});

var ChangeTimerQueueTimer = Module.findExportByName("KernelBase.dll", "ChangeTimerQueueTimer")
Interceptor.attach(ChangeTimerQueueTimer, {onLeave: function (args) {send("ChangeTimerQueueTimer");}});

var CharLowerA = Module.findExportByName("KernelBase.dll", "CharLowerA")
Interceptor.attach(CharLowerA, {onLeave: function (args) {send("CharLowerA");}});

var CharLowerBuffA = Module.findExportByName("KernelBase.dll", "CharLowerBuffA")
Interceptor.attach(CharLowerBuffA, {onLeave: function (args) {send("CharLowerBuffA");}});

var CharLowerBuffW = Module.findExportByName("KernelBase.dll", "CharLowerBuffW")
Interceptor.attach(CharLowerBuffW, {onLeave: function (args) {send("CharLowerBuffW");}});

var CharLowerW = Module.findExportByName("KernelBase.dll", "CharLowerW")
Interceptor.attach(CharLowerW, {onLeave: function (args) {send("CharLowerW");}});

var CharNextA = Module.findExportByName("KernelBase.dll", "CharNextA")
Interceptor.attach(CharNextA, {onLeave: function (args) {send("CharNextA");}});

var CharNextExA = Module.findExportByName("KernelBase.dll", "CharNextExA")
Interceptor.attach(CharNextExA, {onLeave: function (args) {send("CharNextExA");}});

var CharNextW = Module.findExportByName("KernelBase.dll", "CharNextW")
Interceptor.attach(CharNextW, {onLeave: function (args) {send("CharNextW");}});

var CharPrevA = Module.findExportByName("KernelBase.dll", "CharPrevA")
Interceptor.attach(CharPrevA, {onLeave: function (args) {send("CharPrevA");}});

var CharPrevExA = Module.findExportByName("KernelBase.dll", "CharPrevExA")
Interceptor.attach(CharPrevExA, {onLeave: function (args) {send("CharPrevExA");}});

var CharPrevW = Module.findExportByName("KernelBase.dll", "CharPrevW")
Interceptor.attach(CharPrevW, {onLeave: function (args) {send("CharPrevW");}});

var CharUpperA = Module.findExportByName("KernelBase.dll", "CharUpperA")
Interceptor.attach(CharUpperA, {onLeave: function (args) {send("CharUpperA");}});

var CharUpperBuffA = Module.findExportByName("KernelBase.dll", "CharUpperBuffA")
Interceptor.attach(CharUpperBuffA, {onLeave: function (args) {send("CharUpperBuffA");}});

var CharUpperBuffW = Module.findExportByName("KernelBase.dll", "CharUpperBuffW")
Interceptor.attach(CharUpperBuffW, {onLeave: function (args) {send("CharUpperBuffW");}});

var CharUpperW = Module.findExportByName("KernelBase.dll", "CharUpperW")
Interceptor.attach(CharUpperW, {onLeave: function (args) {send("CharUpperW");}});

var CheckAllowDecryptedRemoteDestinationPolicy = Module.findExportByName("KernelBase.dll", "CheckAllowDecryptedRemoteDestinationPolicy")
Interceptor.attach(CheckAllowDecryptedRemoteDestinationPolicy, {onLeave: function (args) {send("CheckAllowDecryptedRemoteDestinationPolicy");}});

var CheckGroupPolicyEnabled = Module.findExportByName("KernelBase.dll", "CheckGroupPolicyEnabled")
Interceptor.attach(CheckGroupPolicyEnabled, {onLeave: function (args) {send("CheckGroupPolicyEnabled");}});

var CheckIfStateChangeNotificationExists = Module.findExportByName("KernelBase.dll", "CheckIfStateChangeNotificationExists")
Interceptor.attach(CheckIfStateChangeNotificationExists, {onLeave: function (args) {send("CheckIfStateChangeNotificationExists");}});

var CheckIsMSIXPackage = Module.findExportByName("KernelBase.dll", "CheckIsMSIXPackage")
Interceptor.attach(CheckIsMSIXPackage, {onLeave: function (args) {send("CheckIsMSIXPackage");}});

var CheckRemoteDebuggerPresent = Module.findExportByName("KernelBase.dll", "CheckRemoteDebuggerPresent")
Interceptor.attach(CheckRemoteDebuggerPresent, {onLeave: function (args) {send("CheckRemoteDebuggerPresent");}});

var CheckTokenCapability = Module.findExportByName("KernelBase.dll", "CheckTokenCapability")
Interceptor.attach(CheckTokenCapability, {onLeave: function (args) {send("CheckTokenCapability");}});

var CheckTokenMembership = Module.findExportByName("KernelBase.dll", "CheckTokenMembership")
Interceptor.attach(CheckTokenMembership, {onLeave: function (args) {send("CheckTokenMembership");}});

var CheckTokenMembershipEx = Module.findExportByName("KernelBase.dll", "CheckTokenMembershipEx")
Interceptor.attach(CheckTokenMembershipEx, {onLeave: function (args) {send("CheckTokenMembershipEx");}});

var ChrCmpIA = Module.findExportByName("KernelBase.dll", "ChrCmpIA")
Interceptor.attach(ChrCmpIA, {onLeave: function (args) {send("ChrCmpIA");}});

var ChrCmpIW = Module.findExportByName("KernelBase.dll", "ChrCmpIW")
Interceptor.attach(ChrCmpIW, {onLeave: function (args) {send("ChrCmpIW");}});

var ClearCommBreak = Module.findExportByName("KernelBase.dll", "ClearCommBreak")
Interceptor.attach(ClearCommBreak, {onLeave: function (args) {send("ClearCommBreak");}});

var ClearCommError = Module.findExportByName("KernelBase.dll", "ClearCommError")
Interceptor.attach(ClearCommError, {onLeave: function (args) {send("ClearCommError");}});

var CloseHandle = Module.findExportByName("KernelBase.dll", "CloseHandle")
Interceptor.attach(CloseHandle, {onLeave: function (args) {send("CloseHandle");}});

var CloseIoRing = Module.findExportByName("KernelBase.dll", "CloseIoRing")
Interceptor.attach(CloseIoRing, {onLeave: function (args) {send("CloseIoRing");}});

var ClosePackageInfo = Module.findExportByName("KernelBase.dll", "ClosePackageInfo")
Interceptor.attach(ClosePackageInfo, {onLeave: function (args) {send("ClosePackageInfo");}});

var ClosePrivateNamespace = Module.findExportByName("KernelBase.dll", "ClosePrivateNamespace")
Interceptor.attach(ClosePrivateNamespace, {onLeave: function (args) {send("ClosePrivateNamespace");}});

var ClosePseudoConsole = Module.findExportByName("KernelBase.dll", "ClosePseudoConsole")
Interceptor.attach(ClosePseudoConsole, {onLeave: function (args) {send("ClosePseudoConsole");}});

var CloseState = Module.findExportByName("KernelBase.dll", "CloseState")
Interceptor.attach(CloseState, {onLeave: function (args) {send("CloseState");}});

var CloseStateAtom = Module.findExportByName("KernelBase.dll", "CloseStateAtom")
Interceptor.attach(CloseStateAtom, {onLeave: function (args) {send("CloseStateAtom");}});

var CloseStateChangeNotification = Module.findExportByName("KernelBase.dll", "CloseStateChangeNotification")
Interceptor.attach(CloseStateChangeNotification, {onLeave: function (args) {send("CloseStateChangeNotification");}});

var CloseStateContainer = Module.findExportByName("KernelBase.dll", "CloseStateContainer")
Interceptor.attach(CloseStateContainer, {onLeave: function (args) {send("CloseStateContainer");}});

var CloseStateLock = Module.findExportByName("KernelBase.dll", "CloseStateLock")
Interceptor.attach(CloseStateLock, {onLeave: function (args) {send("CloseStateLock");}});

var CloseThreadpool = Module.findExportByName("KernelBase.dll", "CloseThreadpool")
Interceptor.attach(CloseThreadpool, {onLeave: function (args) {send("CloseThreadpool");}});

var CloseThreadpoolCleanupGroup = Module.findExportByName("KernelBase.dll", "CloseThreadpoolCleanupGroup")
Interceptor.attach(CloseThreadpoolCleanupGroup, {onLeave: function (args) {send("CloseThreadpoolCleanupGroup");}});

var CloseThreadpoolCleanupGroupMembers = Module.findExportByName("KernelBase.dll", "CloseThreadpoolCleanupGroupMembers")
Interceptor.attach(CloseThreadpoolCleanupGroupMembers, {onLeave: function (args) {send("CloseThreadpoolCleanupGroupMembers");}});

var CloseThreadpoolIo = Module.findExportByName("KernelBase.dll", "CloseThreadpoolIo")
Interceptor.attach(CloseThreadpoolIo, {onLeave: function (args) {send("CloseThreadpoolIo");}});

var CloseThreadpoolTimer = Module.findExportByName("KernelBase.dll", "CloseThreadpoolTimer")
Interceptor.attach(CloseThreadpoolTimer, {onLeave: function (args) {send("CloseThreadpoolTimer");}});

var CloseThreadpoolWait = Module.findExportByName("KernelBase.dll", "CloseThreadpoolWait")
Interceptor.attach(CloseThreadpoolWait, {onLeave: function (args) {send("CloseThreadpoolWait");}});

var CloseThreadpoolWork = Module.findExportByName("KernelBase.dll", "CloseThreadpoolWork")
Interceptor.attach(CloseThreadpoolWork, {onLeave: function (args) {send("CloseThreadpoolWork");}});

var CommandLineToArgvW = Module.findExportByName("KernelBase.dll", "CommandLineToArgvW")
Interceptor.attach(CommandLineToArgvW, {onLeave: function (args) {send("CommandLineToArgvW");}});

var CommitStateAtom = Module.findExportByName("KernelBase.dll", "CommitStateAtom")
Interceptor.attach(CommitStateAtom, {onLeave: function (args) {send("CommitStateAtom");}});

var CompareFileTime = Module.findExportByName("KernelBase.dll", "CompareFileTime")
Interceptor.attach(CompareFileTime, {onLeave: function (args) {send("CompareFileTime");}});

var CompareObjectHandles = Module.findExportByName("KernelBase.dll", "CompareObjectHandles")
Interceptor.attach(CompareObjectHandles, {onLeave: function (args) {send("CompareObjectHandles");}});

var CompareStringA = Module.findExportByName("KernelBase.dll", "CompareStringA")
Interceptor.attach(CompareStringA, {onLeave: function (args) {send("CompareStringA");}});

var CompareStringEx = Module.findExportByName("KernelBase.dll", "CompareStringEx")
Interceptor.attach(CompareStringEx, {onLeave: function (args) {send("CompareStringEx");}});

var CompareStringOrdinal = Module.findExportByName("KernelBase.dll", "CompareStringOrdinal")
Interceptor.attach(CompareStringOrdinal, {onLeave: function (args) {send("CompareStringOrdinal");}});

var CompareStringW = Module.findExportByName("KernelBase.dll", "CompareStringW")
Interceptor.attach(CompareStringW, {onLeave: function (args) {send("CompareStringW");}});

var ConnectNamedPipe = Module.findExportByName("KernelBase.dll", "ConnectNamedPipe")
Interceptor.attach(ConnectNamedPipe, {onLeave: function (args) {send("ConnectNamedPipe");}});

var ContinueDebugEvent = Module.findExportByName("KernelBase.dll", "ContinueDebugEvent")
Interceptor.attach(ContinueDebugEvent, {onLeave: function (args) {send("ContinueDebugEvent");}});

var ConvertAuxiliaryCounterToPerformanceCounter = Module.findExportByName("KernelBase.dll", "ConvertAuxiliaryCounterToPerformanceCounter")
Interceptor.attach(ConvertAuxiliaryCounterToPerformanceCounter, {onLeave: function (args) {send("ConvertAuxiliaryCounterToPerformanceCounter");}});

var ConvertDefaultLocale = Module.findExportByName("KernelBase.dll", "ConvertDefaultLocale")
Interceptor.attach(ConvertDefaultLocale, {onLeave: function (args) {send("ConvertDefaultLocale");}});

var ConvertFiberToThread = Module.findExportByName("KernelBase.dll", "ConvertFiberToThread")
Interceptor.attach(ConvertFiberToThread, {onLeave: function (args) {send("ConvertFiberToThread");}});

var ConvertPerformanceCounterToAuxiliaryCounter = Module.findExportByName("KernelBase.dll", "ConvertPerformanceCounterToAuxiliaryCounter")
Interceptor.attach(ConvertPerformanceCounterToAuxiliaryCounter, {onLeave: function (args) {send("ConvertPerformanceCounterToAuxiliaryCounter");}});

var ConvertThreadToFiber = Module.findExportByName("KernelBase.dll", "ConvertThreadToFiber")
Interceptor.attach(ConvertThreadToFiber, {onLeave: function (args) {send("ConvertThreadToFiber");}});

var ConvertThreadToFiberEx = Module.findExportByName("KernelBase.dll", "ConvertThreadToFiberEx")
Interceptor.attach(ConvertThreadToFiberEx, {onLeave: function (args) {send("ConvertThreadToFiberEx");}});

var ConvertToAutoInheritPrivateObjectSecurity = Module.findExportByName("KernelBase.dll", "ConvertToAutoInheritPrivateObjectSecurity")
Interceptor.attach(ConvertToAutoInheritPrivateObjectSecurity, {onLeave: function (args) {send("ConvertToAutoInheritPrivateObjectSecurity");}});

var CopyContext = Module.findExportByName("KernelBase.dll", "CopyContext")
Interceptor.attach(CopyContext, {onLeave: function (args) {send("CopyContext");}});

var CopyFile2 = Module.findExportByName("KernelBase.dll", "CopyFile2")
Interceptor.attach(CopyFile2, {onLeave: function (args) {send("CopyFile2");}});

var CopyFileExW = Module.findExportByName("KernelBase.dll", "CopyFileExW")
Interceptor.attach(CopyFileExW, {onLeave: function (args) {send("CopyFileExW");}});

var CopyFileFromAppW = Module.findExportByName("KernelBase.dll", "CopyFileFromAppW")
Interceptor.attach(CopyFileFromAppW, {onLeave: function (args) {send("CopyFileFromAppW");}});

var CopyFileW = Module.findExportByName("KernelBase.dll", "CopyFileW")
Interceptor.attach(CopyFileW, {onLeave: function (args) {send("CopyFileW");}});

var CopyMemoryNonTemporal = Module.findExportByName("KernelBase.dll", "CopyMemoryNonTemporal")
Interceptor.attach(CopyMemoryNonTemporal, {onLeave: function (args) {send("CopyMemoryNonTemporal");}});

var CopySid = Module.findExportByName("KernelBase.dll", "CopySid")
Interceptor.attach(CopySid, {onLeave: function (args) {send("CopySid");}});

var CouldMultiUserAppsBehaviorBePossibleForPackage = Module.findExportByName("KernelBase.dll", "CouldMultiUserAppsBehaviorBePossibleForPackage")
Interceptor.attach(CouldMultiUserAppsBehaviorBePossibleForPackage, {onLeave: function (args) {send("CouldMultiUserAppsBehaviorBePossibleForPackage");}});

var CreateActCtxW = Module.findExportByName("KernelBase.dll", "CreateActCtxW")
Interceptor.attach(CreateActCtxW, {onLeave: function (args) {send("CreateActCtxW");}});

var CreateAppContainerToken = Module.findExportByName("KernelBase.dll", "CreateAppContainerToken")
Interceptor.attach(CreateAppContainerToken, {onLeave: function (args) {send("CreateAppContainerToken");}});

var CreateBoundaryDescriptorW = Module.findExportByName("KernelBase.dll", "CreateBoundaryDescriptorW")
Interceptor.attach(CreateBoundaryDescriptorW, {onLeave: function (args) {send("CreateBoundaryDescriptorW");}});

var CreateConsoleScreenBuffer = Module.findExportByName("KernelBase.dll", "CreateConsoleScreenBuffer")
Interceptor.attach(CreateConsoleScreenBuffer, {onLeave: function (args) {send("CreateConsoleScreenBuffer");}});

var CreateDirectoryA = Module.findExportByName("KernelBase.dll", "CreateDirectoryA")
Interceptor.attach(CreateDirectoryA, {onLeave: function (args) {send("CreateDirectoryA");}});

var CreateDirectoryExW = Module.findExportByName("KernelBase.dll", "CreateDirectoryExW")
Interceptor.attach(CreateDirectoryExW, {onLeave: function (args) {send("CreateDirectoryExW");}});

var CreateDirectoryFromAppW = Module.findExportByName("KernelBase.dll", "CreateDirectoryFromAppW")
Interceptor.attach(CreateDirectoryFromAppW, {onLeave: function (args) {send("CreateDirectoryFromAppW");}});

var CreateDirectoryW = Module.findExportByName("KernelBase.dll", "CreateDirectoryW")
Interceptor.attach(CreateDirectoryW, {onLeave: function (args) {send("CreateDirectoryW");}});

var CreateEnclave = Module.findExportByName("KernelBase.dll", "CreateEnclave")
Interceptor.attach(CreateEnclave, {onLeave: function (args) {send("CreateEnclave");}});

var CreateEventA = Module.findExportByName("KernelBase.dll", "CreateEventA")
Interceptor.attach(CreateEventA, {onLeave: function (args) {send("CreateEventA");}});

var CreateEventExA = Module.findExportByName("KernelBase.dll", "CreateEventExA")
Interceptor.attach(CreateEventExA, {onLeave: function (args) {send("CreateEventExA");}});

var CreateEventExW = Module.findExportByName("KernelBase.dll", "CreateEventExW")
Interceptor.attach(CreateEventExW, {onLeave: function (args) {send("CreateEventExW");}});

var CreateEventW = Module.findExportByName("KernelBase.dll", "CreateEventW")
Interceptor.attach(CreateEventW, {onLeave: function (args) {send("CreateEventW");}});

var CreateFiber = Module.findExportByName("KernelBase.dll", "CreateFiber")
Interceptor.attach(CreateFiber, {onLeave: function (args) {send("CreateFiber");}});

var CreateFiberEx = Module.findExportByName("KernelBase.dll", "CreateFiberEx")
Interceptor.attach(CreateFiberEx, {onLeave: function (args) {send("CreateFiberEx");}});

var CreateFile2 = Module.findExportByName("KernelBase.dll", "CreateFile2")
Interceptor.attach(CreateFile2, {onLeave: function (args) {send("CreateFile2");}});

var CreateFile2FromAppW = Module.findExportByName("KernelBase.dll", "CreateFile2FromAppW")
Interceptor.attach(CreateFile2FromAppW, {onLeave: function (args) {send("CreateFile2FromAppW");}});

var CreateFileA = Module.findExportByName("KernelBase.dll", "CreateFileA")
Interceptor.attach(CreateFileA, {onLeave: function (args) {send("CreateFileA");}});

var CreateFileFromAppW = Module.findExportByName("KernelBase.dll", "CreateFileFromAppW")
Interceptor.attach(CreateFileFromAppW, {onLeave: function (args) {send("CreateFileFromAppW");}});

var CreateFileMapping2 = Module.findExportByName("KernelBase.dll", "CreateFileMapping2")
Interceptor.attach(CreateFileMapping2, {onLeave: function (args) {send("CreateFileMapping2");}});

var CreateFileMappingFromApp = Module.findExportByName("KernelBase.dll", "CreateFileMappingFromApp")
Interceptor.attach(CreateFileMappingFromApp, {onLeave: function (args) {send("CreateFileMappingFromApp");}});

var CreateFileMappingNumaW = Module.findExportByName("KernelBase.dll", "CreateFileMappingNumaW")
Interceptor.attach(CreateFileMappingNumaW, {onLeave: function (args) {send("CreateFileMappingNumaW");}});

var CreateFileMappingW = Module.findExportByName("KernelBase.dll", "CreateFileMappingW")
Interceptor.attach(CreateFileMappingW, {onLeave: function (args) {send("CreateFileMappingW");}});

var CreateFileW = Module.findExportByName("KernelBase.dll", "CreateFileW")
Interceptor.attach(CreateFileW, {onLeave: function (args) {send("CreateFileW");}});

var CreateHardLinkA = Module.findExportByName("KernelBase.dll", "CreateHardLinkA")
Interceptor.attach(CreateHardLinkA, {onLeave: function (args) {send("CreateHardLinkA");}});

var CreateHardLinkW = Module.findExportByName("KernelBase.dll", "CreateHardLinkW")
Interceptor.attach(CreateHardLinkW, {onLeave: function (args) {send("CreateHardLinkW");}});

var CreateIoCompletionPort = Module.findExportByName("KernelBase.dll", "CreateIoCompletionPort")
Interceptor.attach(CreateIoCompletionPort, {onLeave: function (args) {send("CreateIoCompletionPort");}});

var CreateIoRing = Module.findExportByName("KernelBase.dll", "CreateIoRing")
Interceptor.attach(CreateIoRing, {onLeave: function (args) {send("CreateIoRing");}});

var CreateMemoryResourceNotification = Module.findExportByName("KernelBase.dll", "CreateMemoryResourceNotification")
Interceptor.attach(CreateMemoryResourceNotification, {onLeave: function (args) {send("CreateMemoryResourceNotification");}});

var CreateMutexA = Module.findExportByName("KernelBase.dll", "CreateMutexA")
Interceptor.attach(CreateMutexA, {onLeave: function (args) {send("CreateMutexA");}});

var CreateMutexExA = Module.findExportByName("KernelBase.dll", "CreateMutexExA")
Interceptor.attach(CreateMutexExA, {onLeave: function (args) {send("CreateMutexExA");}});

var CreateMutexExW = Module.findExportByName("KernelBase.dll", "CreateMutexExW")
Interceptor.attach(CreateMutexExW, {onLeave: function (args) {send("CreateMutexExW");}});

var CreateMutexW = Module.findExportByName("KernelBase.dll", "CreateMutexW")
Interceptor.attach(CreateMutexW, {onLeave: function (args) {send("CreateMutexW");}});

var CreateNamedPipeW = Module.findExportByName("KernelBase.dll", "CreateNamedPipeW")
Interceptor.attach(CreateNamedPipeW, {onLeave: function (args) {send("CreateNamedPipeW");}});

var CreatePipe = Module.findExportByName("KernelBase.dll", "CreatePipe")
Interceptor.attach(CreatePipe, {onLeave: function (args) {send("CreatePipe");}});

var CreatePrivateNamespaceW = Module.findExportByName("KernelBase.dll", "CreatePrivateNamespaceW")
Interceptor.attach(CreatePrivateNamespaceW, {onLeave: function (args) {send("CreatePrivateNamespaceW");}});

var CreatePrivateObjectSecurity = Module.findExportByName("KernelBase.dll", "CreatePrivateObjectSecurity")
Interceptor.attach(CreatePrivateObjectSecurity, {onLeave: function (args) {send("CreatePrivateObjectSecurity");}});

var CreatePrivateObjectSecurityEx = Module.findExportByName("KernelBase.dll", "CreatePrivateObjectSecurityEx")
Interceptor.attach(CreatePrivateObjectSecurityEx, {onLeave: function (args) {send("CreatePrivateObjectSecurityEx");}});

var CreatePrivateObjectSecurityWithMultipleInheritance = Module.findExportByName("KernelBase.dll", "CreatePrivateObjectSecurityWithMultipleInheritance")
Interceptor.attach(CreatePrivateObjectSecurityWithMultipleInheritance, {onLeave: function (args) {send("CreatePrivateObjectSecurityWithMultipleInheritance");}});

var CreateProcessA = Module.findExportByName("KernelBase.dll", "CreateProcessA")
Interceptor.attach(CreateProcessA, {onLeave: function (args) {send("CreateProcessA");}});

var CreateProcessAsUserA = Module.findExportByName("KernelBase.dll", "CreateProcessAsUserA")
Interceptor.attach(CreateProcessAsUserA, {onLeave: function (args) {send("CreateProcessAsUserA");}});

var CreateProcessAsUserW = Module.findExportByName("KernelBase.dll", "CreateProcessAsUserW")
Interceptor.attach(CreateProcessAsUserW, {onLeave: function (args) {send("CreateProcessAsUserW");}});

var CreateProcessInternalA = Module.findExportByName("KernelBase.dll", "CreateProcessInternalA")
Interceptor.attach(CreateProcessInternalA, {onLeave: function (args) {send("CreateProcessInternalA");}});

var CreateProcessInternalW = Module.findExportByName("KernelBase.dll", "CreateProcessInternalW")
Interceptor.attach(CreateProcessInternalW, {onLeave: function (args) {send("CreateProcessInternalW");}});

var CreateProcessW = Module.findExportByName("KernelBase.dll", "CreateProcessW")
Interceptor.attach(CreateProcessW, {onLeave: function (args) {send("CreateProcessW");}});

var CreatePseudoConsole = Module.findExportByName("KernelBase.dll", "CreatePseudoConsole")
Interceptor.attach(CreatePseudoConsole, {onLeave: function (args) {send("CreatePseudoConsole");}});

var CreatePseudoConsoleAsUser = Module.findExportByName("KernelBase.dll", "CreatePseudoConsoleAsUser")
Interceptor.attach(CreatePseudoConsoleAsUser, {onLeave: function (args) {send("CreatePseudoConsoleAsUser");}});

var CreateRemoteThread = Module.findExportByName("KernelBase.dll", "CreateRemoteThread")
Interceptor.attach(CreateRemoteThread, {onLeave: function (args) {send("CreateRemoteThread");}});

var CreateRemoteThreadEx = Module.findExportByName("KernelBase.dll", "CreateRemoteThreadEx")
Interceptor.attach(CreateRemoteThreadEx, {onLeave: function (args) {send("CreateRemoteThreadEx");}});

var CreateRestrictedToken = Module.findExportByName("KernelBase.dll", "CreateRestrictedToken")
Interceptor.attach(CreateRestrictedToken, {onLeave: function (args) {send("CreateRestrictedToken");}});

var CreateSemaphoreExW = Module.findExportByName("KernelBase.dll", "CreateSemaphoreExW")
Interceptor.attach(CreateSemaphoreExW, {onLeave: function (args) {send("CreateSemaphoreExW");}});

var CreateSemaphoreW = Module.findExportByName("KernelBase.dll", "CreateSemaphoreW")
Interceptor.attach(CreateSemaphoreW, {onLeave: function (args) {send("CreateSemaphoreW");}});

var CreateStateAtom = Module.findExportByName("KernelBase.dll", "CreateStateAtom")
Interceptor.attach(CreateStateAtom, {onLeave: function (args) {send("CreateStateAtom");}});

var CreateStateChangeNotification = Module.findExportByName("KernelBase.dll", "CreateStateChangeNotification")
Interceptor.attach(CreateStateChangeNotification, {onLeave: function (args) {send("CreateStateChangeNotification");}});

var CreateStateContainer = Module.findExportByName("KernelBase.dll", "CreateStateContainer")
Interceptor.attach(CreateStateContainer, {onLeave: function (args) {send("CreateStateContainer");}});

var CreateStateLock = Module.findExportByName("KernelBase.dll", "CreateStateLock")
Interceptor.attach(CreateStateLock, {onLeave: function (args) {send("CreateStateLock");}});

var CreateStateSubcontainer = Module.findExportByName("KernelBase.dll", "CreateStateSubcontainer")
Interceptor.attach(CreateStateSubcontainer, {onLeave: function (args) {send("CreateStateSubcontainer");}});

var CreateSymbolicLinkW = Module.findExportByName("KernelBase.dll", "CreateSymbolicLinkW")
Interceptor.attach(CreateSymbolicLinkW, {onLeave: function (args) {send("CreateSymbolicLinkW");}});

var CreateThread = Module.findExportByName("KernelBase.dll", "CreateThread")
Interceptor.attach(CreateThread, {onLeave: function (args) {send("CreateThread");}});

var CreateThreadpool = Module.findExportByName("KernelBase.dll", "CreateThreadpool")
Interceptor.attach(CreateThreadpool, {onLeave: function (args) {send("CreateThreadpool");}});

var CreateThreadpoolCleanupGroup = Module.findExportByName("KernelBase.dll", "CreateThreadpoolCleanupGroup")
Interceptor.attach(CreateThreadpoolCleanupGroup, {onLeave: function (args) {send("CreateThreadpoolCleanupGroup");}});

var CreateThreadpoolIo = Module.findExportByName("KernelBase.dll", "CreateThreadpoolIo")
Interceptor.attach(CreateThreadpoolIo, {onLeave: function (args) {send("CreateThreadpoolIo");}});

var CreateThreadpoolTimer = Module.findExportByName("KernelBase.dll", "CreateThreadpoolTimer")
Interceptor.attach(CreateThreadpoolTimer, {onLeave: function (args) {send("CreateThreadpoolTimer");}});

var CreateThreadpoolWait = Module.findExportByName("KernelBase.dll", "CreateThreadpoolWait")
Interceptor.attach(CreateThreadpoolWait, {onLeave: function (args) {send("CreateThreadpoolWait");}});

var CreateThreadpoolWork = Module.findExportByName("KernelBase.dll", "CreateThreadpoolWork")
Interceptor.attach(CreateThreadpoolWork, {onLeave: function (args) {send("CreateThreadpoolWork");}});

var CreateTimerQueue = Module.findExportByName("KernelBase.dll", "CreateTimerQueue")
Interceptor.attach(CreateTimerQueue, {onLeave: function (args) {send("CreateTimerQueue");}});

var CreateTimerQueueTimer = Module.findExportByName("KernelBase.dll", "CreateTimerQueueTimer")
Interceptor.attach(CreateTimerQueueTimer, {onLeave: function (args) {send("CreateTimerQueueTimer");}});

var CreateWaitableTimerExW = Module.findExportByName("KernelBase.dll", "CreateWaitableTimerExW")
Interceptor.attach(CreateWaitableTimerExW, {onLeave: function (args) {send("CreateWaitableTimerExW");}});

var CreateWaitableTimerW = Module.findExportByName("KernelBase.dll", "CreateWaitableTimerW")
Interceptor.attach(CreateWaitableTimerW, {onLeave: function (args) {send("CreateWaitableTimerW");}});

var CreateWellKnownSid = Module.findExportByName("KernelBase.dll", "CreateWellKnownSid")
Interceptor.attach(CreateWellKnownSid, {onLeave: function (args) {send("CreateWellKnownSid");}});

var CtrlRoutine = Module.findExportByName("KernelBase.dll", "CtrlRoutine")
Interceptor.attach(CtrlRoutine, {onLeave: function (args) {send("CtrlRoutine");}});

var CveEventWrite = Module.findExportByName("KernelBase.dll", "CveEventWrite")
Interceptor.attach(CveEventWrite, {onLeave: function (args) {send("CveEventWrite");}});

var DeactivateActCtx = Module.findExportByName("KernelBase.dll", "DeactivateActCtx")
Interceptor.attach(DeactivateActCtx, {onLeave: function (args) {send("DeactivateActCtx");}});

var DebugActiveProcess = Module.findExportByName("KernelBase.dll", "DebugActiveProcess")
Interceptor.attach(DebugActiveProcess, {onLeave: function (args) {send("DebugActiveProcess");}});

var DebugActiveProcessStop = Module.findExportByName("KernelBase.dll", "DebugActiveProcessStop")
Interceptor.attach(DebugActiveProcessStop, {onLeave: function (args) {send("DebugActiveProcessStop");}});

var DebugBreak = Module.findExportByName("KernelBase.dll", "DebugBreak")
Interceptor.attach(DebugBreak, {onLeave: function (args) {send("DebugBreak");}});

var DecodePointer = Module.findExportByName("KernelBase.dll", "DecodePointer")
Interceptor.attach(DecodePointer, {onLeave: function (args) {send("DecodePointer");}});

var DecodeRemotePointer = Module.findExportByName("KernelBase.dll", "DecodeRemotePointer")
Interceptor.attach(DecodeRemotePointer, {onLeave: function (args) {send("DecodeRemotePointer");}});

var DecodeSystemPointer = Module.findExportByName("KernelBase.dll", "DecodeSystemPointer")
Interceptor.attach(DecodeSystemPointer, {onLeave: function (args) {send("DecodeSystemPointer");}});

var DefineDosDeviceW = Module.findExportByName("KernelBase.dll", "DefineDosDeviceW")
Interceptor.attach(DefineDosDeviceW, {onLeave: function (args) {send("DefineDosDeviceW");}});

var DelayLoadFailureHook = Module.findExportByName("KernelBase.dll", "DelayLoadFailureHook")
Interceptor.attach(DelayLoadFailureHook, {onLeave: function (args) {send("DelayLoadFailureHook");}});

var DelayLoadFailureHookLookup = Module.findExportByName("KernelBase.dll", "DelayLoadFailureHookLookup")
Interceptor.attach(DelayLoadFailureHookLookup, {onLeave: function (args) {send("DelayLoadFailureHookLookup");}});

var DeleteAce = Module.findExportByName("KernelBase.dll", "DeleteAce")
Interceptor.attach(DeleteAce, {onLeave: function (args) {send("DeleteAce");}});

var DeleteBoundaryDescriptor = Module.findExportByName("KernelBase.dll", "DeleteBoundaryDescriptor")
Interceptor.attach(DeleteBoundaryDescriptor, {onLeave: function (args) {send("DeleteBoundaryDescriptor");}});

var DeleteCriticalSection = Module.findExportByName("KernelBase.dll", "DeleteCriticalSection")
Interceptor.attach(DeleteCriticalSection, {onLeave: function (args) {send("DeleteCriticalSection");}});

var DeleteEnclave = Module.findExportByName("KernelBase.dll", "DeleteEnclave")
Interceptor.attach(DeleteEnclave, {onLeave: function (args) {send("DeleteEnclave");}});

var DeleteFiber = Module.findExportByName("KernelBase.dll", "DeleteFiber")
Interceptor.attach(DeleteFiber, {onLeave: function (args) {send("DeleteFiber");}});

var DeleteFileA = Module.findExportByName("KernelBase.dll", "DeleteFileA")
Interceptor.attach(DeleteFileA, {onLeave: function (args) {send("DeleteFileA");}});

var DeleteFileFromAppW = Module.findExportByName("KernelBase.dll", "DeleteFileFromAppW")
Interceptor.attach(DeleteFileFromAppW, {onLeave: function (args) {send("DeleteFileFromAppW");}});

var DeleteFileW = Module.findExportByName("KernelBase.dll", "DeleteFileW")
Interceptor.attach(DeleteFileW, {onLeave: function (args) {send("DeleteFileW");}});

var DeletePackageDependency = Module.findExportByName("KernelBase.dll", "DeletePackageDependency")
Interceptor.attach(DeletePackageDependency, {onLeave: function (args) {send("DeletePackageDependency");}});

var DeleteProcThreadAttributeList = Module.findExportByName("KernelBase.dll", "DeleteProcThreadAttributeList")
Interceptor.attach(DeleteProcThreadAttributeList, {onLeave: function (args) {send("DeleteProcThreadAttributeList");}});

var DeleteStateAtomValue = Module.findExportByName("KernelBase.dll", "DeleteStateAtomValue")
Interceptor.attach(DeleteStateAtomValue, {onLeave: function (args) {send("DeleteStateAtomValue");}});

var DeleteStateContainer = Module.findExportByName("KernelBase.dll", "DeleteStateContainer")
Interceptor.attach(DeleteStateContainer, {onLeave: function (args) {send("DeleteStateContainer");}});

var DeleteStateContainerValue = Module.findExportByName("KernelBase.dll", "DeleteStateContainerValue")
Interceptor.attach(DeleteStateContainerValue, {onLeave: function (args) {send("DeleteStateContainerValue");}});

var DeleteSynchronizationBarrier = Module.findExportByName("KernelBase.dll", "DeleteSynchronizationBarrier")
Interceptor.attach(DeleteSynchronizationBarrier, {onLeave: function (args) {send("DeleteSynchronizationBarrier");}});

var DeleteTimerQueue = Module.findExportByName("KernelBase.dll", "DeleteTimerQueue")
Interceptor.attach(DeleteTimerQueue, {onLeave: function (args) {send("DeleteTimerQueue");}});

var DeleteTimerQueueEx = Module.findExportByName("KernelBase.dll", "DeleteTimerQueueEx")
Interceptor.attach(DeleteTimerQueueEx, {onLeave: function (args) {send("DeleteTimerQueueEx");}});

var DeleteTimerQueueTimer = Module.findExportByName("KernelBase.dll", "DeleteTimerQueueTimer")
Interceptor.attach(DeleteTimerQueueTimer, {onLeave: function (args) {send("DeleteTimerQueueTimer");}});

var DeleteVolumeMountPointW = Module.findExportByName("KernelBase.dll", "DeleteVolumeMountPointW")
Interceptor.attach(DeleteVolumeMountPointW, {onLeave: function (args) {send("DeleteVolumeMountPointW");}});

var DeriveCapabilitySidsFromName = Module.findExportByName("KernelBase.dll", "DeriveCapabilitySidsFromName")
Interceptor.attach(DeriveCapabilitySidsFromName, {onLeave: function (args) {send("DeriveCapabilitySidsFromName");}});

var DestroyPrivateObjectSecurity = Module.findExportByName("KernelBase.dll", "DestroyPrivateObjectSecurity")
Interceptor.attach(DestroyPrivateObjectSecurity, {onLeave: function (args) {send("DestroyPrivateObjectSecurity");}});

var DeviceIoControl = Module.findExportByName("KernelBase.dll", "DeviceIoControl")
Interceptor.attach(DeviceIoControl, {onLeave: function (args) {send("DeviceIoControl");}});

var DisablePredefinedHandleTableInternal = Module.findExportByName("KernelBase.dll", "DisablePredefinedHandleTableInternal")
Interceptor.attach(DisablePredefinedHandleTableInternal, {onLeave: function (args) {send("DisablePredefinedHandleTableInternal");}});

var DisableThreadLibraryCalls = Module.findExportByName("KernelBase.dll", "DisableThreadLibraryCalls")
Interceptor.attach(DisableThreadLibraryCalls, {onLeave: function (args) {send("DisableThreadLibraryCalls");}});

var DisassociateCurrentThreadFromCallback = Module.findExportByName("KernelBase.dll", "DisassociateCurrentThreadFromCallback")
Interceptor.attach(DisassociateCurrentThreadFromCallback, {onLeave: function (args) {send("DisassociateCurrentThreadFromCallback");}});

var DiscardVirtualMemory = Module.findExportByName("KernelBase.dll", "DiscardVirtualMemory")
Interceptor.attach(DiscardVirtualMemory, {onLeave: function (args) {send("DiscardVirtualMemory");}});

var DisconnectNamedPipe = Module.findExportByName("KernelBase.dll", "DisconnectNamedPipe")
Interceptor.attach(DisconnectNamedPipe, {onLeave: function (args) {send("DisconnectNamedPipe");}});

var DnsHostnameToComputerNameExW = Module.findExportByName("KernelBase.dll", "DnsHostnameToComputerNameExW")
Interceptor.attach(DnsHostnameToComputerNameExW, {onLeave: function (args) {send("DnsHostnameToComputerNameExW");}});

var DsBindWithSpnExW = Module.findExportByName("KernelBase.dll", "DsBindWithSpnExW")
Interceptor.attach(DsBindWithSpnExW, {onLeave: function (args) {send("DsBindWithSpnExW");}});

var DsCrackNamesW = Module.findExportByName("KernelBase.dll", "DsCrackNamesW")
Interceptor.attach(DsCrackNamesW, {onLeave: function (args) {send("DsCrackNamesW");}});

var DsFreeDomainControllerInfoW = Module.findExportByName("KernelBase.dll", "DsFreeDomainControllerInfoW")
Interceptor.attach(DsFreeDomainControllerInfoW, {onLeave: function (args) {send("DsFreeDomainControllerInfoW");}});

var DsFreeNameResultW = Module.findExportByName("KernelBase.dll", "DsFreeNameResultW")
Interceptor.attach(DsFreeNameResultW, {onLeave: function (args) {send("DsFreeNameResultW");}});

var DsFreeNgcKey = Module.findExportByName("KernelBase.dll", "DsFreeNgcKey")
Interceptor.attach(DsFreeNgcKey, {onLeave: function (args) {send("DsFreeNgcKey");}});

var DsFreePasswordCredentials = Module.findExportByName("KernelBase.dll", "DsFreePasswordCredentials")
Interceptor.attach(DsFreePasswordCredentials, {onLeave: function (args) {send("DsFreePasswordCredentials");}});

var DsGetDomainControllerInfoW = Module.findExportByName("KernelBase.dll", "DsGetDomainControllerInfoW")
Interceptor.attach(DsGetDomainControllerInfoW, {onLeave: function (args) {send("DsGetDomainControllerInfoW");}});

var DsMakePasswordCredentialsW = Module.findExportByName("KernelBase.dll", "DsMakePasswordCredentialsW")
Interceptor.attach(DsMakePasswordCredentialsW, {onLeave: function (args) {send("DsMakePasswordCredentialsW");}});

var DsReadNgcKeyW = Module.findExportByName("KernelBase.dll", "DsReadNgcKeyW")
Interceptor.attach(DsReadNgcKeyW, {onLeave: function (args) {send("DsReadNgcKeyW");}});

var DsUnBindW = Module.findExportByName("KernelBase.dll", "DsUnBindW")
Interceptor.attach(DsUnBindW, {onLeave: function (args) {send("DsUnBindW");}});

var DsWriteNgcKeyW = Module.findExportByName("KernelBase.dll", "DsWriteNgcKeyW")
Interceptor.attach(DsWriteNgcKeyW, {onLeave: function (args) {send("DsWriteNgcKeyW");}});

var DuplicateHandle = Module.findExportByName("KernelBase.dll", "DuplicateHandle")
Interceptor.attach(DuplicateHandle, {onLeave: function (args) {send("DuplicateHandle");}});

var DuplicateStateContainerHandle = Module.findExportByName("KernelBase.dll", "DuplicateStateContainerHandle")
Interceptor.attach(DuplicateStateContainerHandle, {onLeave: function (args) {send("DuplicateStateContainerHandle");}});

var DuplicateToken = Module.findExportByName("KernelBase.dll", "DuplicateToken")
Interceptor.attach(DuplicateToken, {onLeave: function (args) {send("DuplicateToken");}});

var DuplicateTokenEx = Module.findExportByName("KernelBase.dll", "DuplicateTokenEx")
Interceptor.attach(DuplicateTokenEx, {onLeave: function (args) {send("DuplicateTokenEx");}});

var EmptyWorkingSet = Module.findExportByName("KernelBase.dll", "EmptyWorkingSet")
Interceptor.attach(EmptyWorkingSet, {onLeave: function (args) {send("EmptyWorkingSet");}});

var EnableProcessOptionalXStateFeatures = Module.findExportByName("KernelBase.dll", "EnableProcessOptionalXStateFeatures")
Interceptor.attach(EnableProcessOptionalXStateFeatures, {onLeave: function (args) {send("EnableProcessOptionalXStateFeatures");}});

var EncodePointer = Module.findExportByName("KernelBase.dll", "EncodePointer")
Interceptor.attach(EncodePointer, {onLeave: function (args) {send("EncodePointer");}});

var EncodeRemotePointer = Module.findExportByName("KernelBase.dll", "EncodeRemotePointer")
Interceptor.attach(EncodeRemotePointer, {onLeave: function (args) {send("EncodeRemotePointer");}});

var EncodeSystemPointer = Module.findExportByName("KernelBase.dll", "EncodeSystemPointer")
Interceptor.attach(EncodeSystemPointer, {onLeave: function (args) {send("EncodeSystemPointer");}});

var EnterCriticalPolicySectionInternal = Module.findExportByName("KernelBase.dll", "EnterCriticalPolicySectionInternal")
Interceptor.attach(EnterCriticalPolicySectionInternal, {onLeave: function (args) {send("EnterCriticalPolicySectionInternal");}});

var EnterCriticalSection = Module.findExportByName("KernelBase.dll", "EnterCriticalSection")
Interceptor.attach(EnterCriticalSection, {onLeave: function (args) {send("EnterCriticalSection");}});

var EnterSynchronizationBarrier = Module.findExportByName("KernelBase.dll", "EnterSynchronizationBarrier")
Interceptor.attach(EnterSynchronizationBarrier, {onLeave: function (args) {send("EnterSynchronizationBarrier");}});

var EnumCalendarInfoExEx = Module.findExportByName("KernelBase.dll", "EnumCalendarInfoExEx")
Interceptor.attach(EnumCalendarInfoExEx, {onLeave: function (args) {send("EnumCalendarInfoExEx");}});

var EnumCalendarInfoExW = Module.findExportByName("KernelBase.dll", "EnumCalendarInfoExW")
Interceptor.attach(EnumCalendarInfoExW, {onLeave: function (args) {send("EnumCalendarInfoExW");}});

var EnumCalendarInfoW = Module.findExportByName("KernelBase.dll", "EnumCalendarInfoW")
Interceptor.attach(EnumCalendarInfoW, {onLeave: function (args) {send("EnumCalendarInfoW");}});

var EnumDateFormatsExEx = Module.findExportByName("KernelBase.dll", "EnumDateFormatsExEx")
Interceptor.attach(EnumDateFormatsExEx, {onLeave: function (args) {send("EnumDateFormatsExEx");}});

var EnumDateFormatsExW = Module.findExportByName("KernelBase.dll", "EnumDateFormatsExW")
Interceptor.attach(EnumDateFormatsExW, {onLeave: function (args) {send("EnumDateFormatsExW");}});

var EnumDateFormatsW = Module.findExportByName("KernelBase.dll", "EnumDateFormatsW")
Interceptor.attach(EnumDateFormatsW, {onLeave: function (args) {send("EnumDateFormatsW");}});

var EnumDeviceDrivers = Module.findExportByName("KernelBase.dll", "EnumDeviceDrivers")
Interceptor.attach(EnumDeviceDrivers, {onLeave: function (args) {send("EnumDeviceDrivers");}});

var EnumDynamicTimeZoneInformation = Module.findExportByName("KernelBase.dll", "EnumDynamicTimeZoneInformation")
Interceptor.attach(EnumDynamicTimeZoneInformation, {onLeave: function (args) {send("EnumDynamicTimeZoneInformation");}});

var EnumLanguageGroupLocalesW = Module.findExportByName("KernelBase.dll", "EnumLanguageGroupLocalesW")
Interceptor.attach(EnumLanguageGroupLocalesW, {onLeave: function (args) {send("EnumLanguageGroupLocalesW");}});

var EnumPageFilesA = Module.findExportByName("KernelBase.dll", "EnumPageFilesA")
Interceptor.attach(EnumPageFilesA, {onLeave: function (args) {send("EnumPageFilesA");}});

var EnumPageFilesW = Module.findExportByName("KernelBase.dll", "EnumPageFilesW")
Interceptor.attach(EnumPageFilesW, {onLeave: function (args) {send("EnumPageFilesW");}});

var EnumProcessModules = Module.findExportByName("KernelBase.dll", "EnumProcessModules")
Interceptor.attach(EnumProcessModules, {onLeave: function (args) {send("EnumProcessModules");}});

var EnumProcessModulesEx = Module.findExportByName("KernelBase.dll", "EnumProcessModulesEx")
Interceptor.attach(EnumProcessModulesEx, {onLeave: function (args) {send("EnumProcessModulesEx");}});

var EnumProcesses = Module.findExportByName("KernelBase.dll", "EnumProcesses")
Interceptor.attach(EnumProcesses, {onLeave: function (args) {send("EnumProcesses");}});

var EnumResourceLanguagesExA = Module.findExportByName("KernelBase.dll", "EnumResourceLanguagesExA")
Interceptor.attach(EnumResourceLanguagesExA, {onLeave: function (args) {send("EnumResourceLanguagesExA");}});

var EnumResourceLanguagesExW = Module.findExportByName("KernelBase.dll", "EnumResourceLanguagesExW")
Interceptor.attach(EnumResourceLanguagesExW, {onLeave: function (args) {send("EnumResourceLanguagesExW");}});

var EnumResourceNamesA = Module.findExportByName("KernelBase.dll", "EnumResourceNamesA")
Interceptor.attach(EnumResourceNamesA, {onLeave: function (args) {send("EnumResourceNamesA");}});

var EnumResourceNamesExA = Module.findExportByName("KernelBase.dll", "EnumResourceNamesExA")
Interceptor.attach(EnumResourceNamesExA, {onLeave: function (args) {send("EnumResourceNamesExA");}});

var EnumResourceNamesExW = Module.findExportByName("KernelBase.dll", "EnumResourceNamesExW")
Interceptor.attach(EnumResourceNamesExW, {onLeave: function (args) {send("EnumResourceNamesExW");}});

var EnumResourceNamesW = Module.findExportByName("KernelBase.dll", "EnumResourceNamesW")
Interceptor.attach(EnumResourceNamesW, {onLeave: function (args) {send("EnumResourceNamesW");}});

var EnumResourceTypesExA = Module.findExportByName("KernelBase.dll", "EnumResourceTypesExA")
Interceptor.attach(EnumResourceTypesExA, {onLeave: function (args) {send("EnumResourceTypesExA");}});

var EnumResourceTypesExW = Module.findExportByName("KernelBase.dll", "EnumResourceTypesExW")
Interceptor.attach(EnumResourceTypesExW, {onLeave: function (args) {send("EnumResourceTypesExW");}});

var EnumSystemCodePagesW = Module.findExportByName("KernelBase.dll", "EnumSystemCodePagesW")
Interceptor.attach(EnumSystemCodePagesW, {onLeave: function (args) {send("EnumSystemCodePagesW");}});

var EnumSystemFirmwareTables = Module.findExportByName("KernelBase.dll", "EnumSystemFirmwareTables")
Interceptor.attach(EnumSystemFirmwareTables, {onLeave: function (args) {send("EnumSystemFirmwareTables");}});

var EnumSystemGeoID = Module.findExportByName("KernelBase.dll", "EnumSystemGeoID")
Interceptor.attach(EnumSystemGeoID, {onLeave: function (args) {send("EnumSystemGeoID");}});

var EnumSystemGeoNames = Module.findExportByName("KernelBase.dll", "EnumSystemGeoNames")
Interceptor.attach(EnumSystemGeoNames, {onLeave: function (args) {send("EnumSystemGeoNames");}});

var EnumSystemLanguageGroupsW = Module.findExportByName("KernelBase.dll", "EnumSystemLanguageGroupsW")
Interceptor.attach(EnumSystemLanguageGroupsW, {onLeave: function (args) {send("EnumSystemLanguageGroupsW");}});

var EnumSystemLocalesA = Module.findExportByName("KernelBase.dll", "EnumSystemLocalesA")
Interceptor.attach(EnumSystemLocalesA, {onLeave: function (args) {send("EnumSystemLocalesA");}});

var EnumSystemLocalesEx = Module.findExportByName("KernelBase.dll", "EnumSystemLocalesEx")
Interceptor.attach(EnumSystemLocalesEx, {onLeave: function (args) {send("EnumSystemLocalesEx");}});

var EnumSystemLocalesW = Module.findExportByName("KernelBase.dll", "EnumSystemLocalesW")
Interceptor.attach(EnumSystemLocalesW, {onLeave: function (args) {send("EnumSystemLocalesW");}});

var EnumTimeFormatsEx = Module.findExportByName("KernelBase.dll", "EnumTimeFormatsEx")
Interceptor.attach(EnumTimeFormatsEx, {onLeave: function (args) {send("EnumTimeFormatsEx");}});

var EnumTimeFormatsW = Module.findExportByName("KernelBase.dll", "EnumTimeFormatsW")
Interceptor.attach(EnumTimeFormatsW, {onLeave: function (args) {send("EnumTimeFormatsW");}});

var EnumUILanguagesW = Module.findExportByName("KernelBase.dll", "EnumUILanguagesW")
Interceptor.attach(EnumUILanguagesW, {onLeave: function (args) {send("EnumUILanguagesW");}});

var EnumerateExtensionNames = Module.findExportByName("KernelBase.dll", "EnumerateExtensionNames")
Interceptor.attach(EnumerateExtensionNames, {onLeave: function (args) {send("EnumerateExtensionNames");}});

var EnumerateStateAtomValues = Module.findExportByName("KernelBase.dll", "EnumerateStateAtomValues")
Interceptor.attach(EnumerateStateAtomValues, {onLeave: function (args) {send("EnumerateStateAtomValues");}});

var EnumerateStateContainerItems = Module.findExportByName("KernelBase.dll", "EnumerateStateContainerItems")
Interceptor.attach(EnumerateStateContainerItems, {onLeave: function (args) {send("EnumerateStateContainerItems");}});

var EqualDomainSid = Module.findExportByName("KernelBase.dll", "EqualDomainSid")
Interceptor.attach(EqualDomainSid, {onLeave: function (args) {send("EqualDomainSid");}});

var EqualPrefixSid = Module.findExportByName("KernelBase.dll", "EqualPrefixSid")
Interceptor.attach(EqualPrefixSid, {onLeave: function (args) {send("EqualPrefixSid");}});

var EqualSid = Module.findExportByName("KernelBase.dll", "EqualSid")
Interceptor.attach(EqualSid, {onLeave: function (args) {send("EqualSid");}});

var EscapeCommFunction = Module.findExportByName("KernelBase.dll", "EscapeCommFunction")
Interceptor.attach(EscapeCommFunction, {onLeave: function (args) {send("EscapeCommFunction");}});

var EventActivityIdControl = Module.findExportByName("KernelBase.dll", "EventActivityIdControl")
Interceptor.attach(EventActivityIdControl, {onLeave: function (args) {send("EventActivityIdControl");}});

var EventEnabled = Module.findExportByName("KernelBase.dll", "EventEnabled")
Interceptor.attach(EventEnabled, {onLeave: function (args) {send("EventEnabled");}});

var EventProviderEnabled = Module.findExportByName("KernelBase.dll", "EventProviderEnabled")
Interceptor.attach(EventProviderEnabled, {onLeave: function (args) {send("EventProviderEnabled");}});

var EventRegister = Module.findExportByName("KernelBase.dll", "EventRegister")
Interceptor.attach(EventRegister, {onLeave: function (args) {send("EventRegister");}});

var EventSetInformation = Module.findExportByName("KernelBase.dll", "EventSetInformation")
Interceptor.attach(EventSetInformation, {onLeave: function (args) {send("EventSetInformation");}});

var EventUnregister = Module.findExportByName("KernelBase.dll", "EventUnregister")
Interceptor.attach(EventUnregister, {onLeave: function (args) {send("EventUnregister");}});

var EventWrite = Module.findExportByName("KernelBase.dll", "EventWrite")
Interceptor.attach(EventWrite, {onLeave: function (args) {send("EventWrite");}});

var EventWriteEx = Module.findExportByName("KernelBase.dll", "EventWriteEx")
Interceptor.attach(EventWriteEx, {onLeave: function (args) {send("EventWriteEx");}});

var EventWriteString = Module.findExportByName("KernelBase.dll", "EventWriteString")
Interceptor.attach(EventWriteString, {onLeave: function (args) {send("EventWriteString");}});

var EventWriteTransfer = Module.findExportByName("KernelBase.dll", "EventWriteTransfer")
Interceptor.attach(EventWriteTransfer, {onLeave: function (args) {send("EventWriteTransfer");}});

var ExitProcess = Module.findExportByName("KernelBase.dll", "ExitProcess")
Interceptor.attach(ExitProcess, {onLeave: function (args) {send("ExitProcess");}});

var ExitThread = Module.findExportByName("KernelBase.dll", "ExitThread")
Interceptor.attach(ExitThread, {onLeave: function (args) {send("ExitThread");}});

var ExpandEnvironmentStringsA = Module.findExportByName("KernelBase.dll", "ExpandEnvironmentStringsA")
Interceptor.attach(ExpandEnvironmentStringsA, {onLeave: function (args) {send("ExpandEnvironmentStringsA");}});

var ExpandEnvironmentStringsW = Module.findExportByName("KernelBase.dll", "ExpandEnvironmentStringsW")
Interceptor.attach(ExpandEnvironmentStringsW, {onLeave: function (args) {send("ExpandEnvironmentStringsW");}});

var ExpungeConsoleCommandHistoryA = Module.findExportByName("KernelBase.dll", "ExpungeConsoleCommandHistoryA")
Interceptor.attach(ExpungeConsoleCommandHistoryA, {onLeave: function (args) {send("ExpungeConsoleCommandHistoryA");}});

var ExpungeConsoleCommandHistoryW = Module.findExportByName("KernelBase.dll", "ExpungeConsoleCommandHistoryW")
Interceptor.attach(ExpungeConsoleCommandHistoryW, {onLeave: function (args) {send("ExpungeConsoleCommandHistoryW");}});

var ExtensionProgIdExists = Module.findExportByName("KernelBase.dll", "ExtensionProgIdExists")
Interceptor.attach(ExtensionProgIdExists, {onLeave: function (args) {send("ExtensionProgIdExists");}});

var FatalAppExitA = Module.findExportByName("KernelBase.dll", "FatalAppExitA")
Interceptor.attach(FatalAppExitA, {onLeave: function (args) {send("FatalAppExitA");}});

var FatalAppExitW = Module.findExportByName("KernelBase.dll", "FatalAppExitW")
Interceptor.attach(FatalAppExitW, {onLeave: function (args) {send("FatalAppExitW");}});

var FileTimeToLocalFileTime = Module.findExportByName("KernelBase.dll", "FileTimeToLocalFileTime")
Interceptor.attach(FileTimeToLocalFileTime, {onLeave: function (args) {send("FileTimeToLocalFileTime");}});

var FileTimeToSystemTime = Module.findExportByName("KernelBase.dll", "FileTimeToSystemTime")
Interceptor.attach(FileTimeToSystemTime, {onLeave: function (args) {send("FileTimeToSystemTime");}});

var FillConsoleOutputAttribute = Module.findExportByName("KernelBase.dll", "FillConsoleOutputAttribute")
Interceptor.attach(FillConsoleOutputAttribute, {onLeave: function (args) {send("FillConsoleOutputAttribute");}});

var FillConsoleOutputCharacterA = Module.findExportByName("KernelBase.dll", "FillConsoleOutputCharacterA")
Interceptor.attach(FillConsoleOutputCharacterA, {onLeave: function (args) {send("FillConsoleOutputCharacterA");}});

var FillConsoleOutputCharacterW = Module.findExportByName("KernelBase.dll", "FillConsoleOutputCharacterW")
Interceptor.attach(FillConsoleOutputCharacterW, {onLeave: function (args) {send("FillConsoleOutputCharacterW");}});

var FindActCtxSectionGuid = Module.findExportByName("KernelBase.dll", "FindActCtxSectionGuid")
Interceptor.attach(FindActCtxSectionGuid, {onLeave: function (args) {send("FindActCtxSectionGuid");}});

var FindActCtxSectionStringW = Module.findExportByName("KernelBase.dll", "FindActCtxSectionStringW")
Interceptor.attach(FindActCtxSectionStringW, {onLeave: function (args) {send("FindActCtxSectionStringW");}});

var FindClose = Module.findExportByName("KernelBase.dll", "FindClose")
Interceptor.attach(FindClose, {onLeave: function (args) {send("FindClose");}});

var FindCloseChangeNotification = Module.findExportByName("KernelBase.dll", "FindCloseChangeNotification")
Interceptor.attach(FindCloseChangeNotification, {onLeave: function (args) {send("FindCloseChangeNotification");}});

var FindFirstChangeNotificationA = Module.findExportByName("KernelBase.dll", "FindFirstChangeNotificationA")
Interceptor.attach(FindFirstChangeNotificationA, {onLeave: function (args) {send("FindFirstChangeNotificationA");}});

var FindFirstChangeNotificationW = Module.findExportByName("KernelBase.dll", "FindFirstChangeNotificationW")
Interceptor.attach(FindFirstChangeNotificationW, {onLeave: function (args) {send("FindFirstChangeNotificationW");}});

var FindFirstFileA = Module.findExportByName("KernelBase.dll", "FindFirstFileA")
Interceptor.attach(FindFirstFileA, {onLeave: function (args) {send("FindFirstFileA");}});

var FindFirstFileExA = Module.findExportByName("KernelBase.dll", "FindFirstFileExA")
Interceptor.attach(FindFirstFileExA, {onLeave: function (args) {send("FindFirstFileExA");}});

var FindFirstFileExFromAppW = Module.findExportByName("KernelBase.dll", "FindFirstFileExFromAppW")
Interceptor.attach(FindFirstFileExFromAppW, {onLeave: function (args) {send("FindFirstFileExFromAppW");}});

var FindFirstFileExW = Module.findExportByName("KernelBase.dll", "FindFirstFileExW")
Interceptor.attach(FindFirstFileExW, {onLeave: function (args) {send("FindFirstFileExW");}});

var FindFirstFileNameW = Module.findExportByName("KernelBase.dll", "FindFirstFileNameW")
Interceptor.attach(FindFirstFileNameW, {onLeave: function (args) {send("FindFirstFileNameW");}});

var FindFirstFileW = Module.findExportByName("KernelBase.dll", "FindFirstFileW")
Interceptor.attach(FindFirstFileW, {onLeave: function (args) {send("FindFirstFileW");}});

var FindFirstFreeAce = Module.findExportByName("KernelBase.dll", "FindFirstFreeAce")
Interceptor.attach(FindFirstFreeAce, {onLeave: function (args) {send("FindFirstFreeAce");}});

var FindFirstStreamW = Module.findExportByName("KernelBase.dll", "FindFirstStreamW")
Interceptor.attach(FindFirstStreamW, {onLeave: function (args) {send("FindFirstStreamW");}});

var FindFirstVolumeW = Module.findExportByName("KernelBase.dll", "FindFirstVolumeW")
Interceptor.attach(FindFirstVolumeW, {onLeave: function (args) {send("FindFirstVolumeW");}});

var FindNLSString = Module.findExportByName("KernelBase.dll", "FindNLSString")
Interceptor.attach(FindNLSString, {onLeave: function (args) {send("FindNLSString");}});

var FindNLSStringEx = Module.findExportByName("KernelBase.dll", "FindNLSStringEx")
Interceptor.attach(FindNLSStringEx, {onLeave: function (args) {send("FindNLSStringEx");}});

var FindNextChangeNotification = Module.findExportByName("KernelBase.dll", "FindNextChangeNotification")
Interceptor.attach(FindNextChangeNotification, {onLeave: function (args) {send("FindNextChangeNotification");}});

var FindNextFileA = Module.findExportByName("KernelBase.dll", "FindNextFileA")
Interceptor.attach(FindNextFileA, {onLeave: function (args) {send("FindNextFileA");}});

var FindNextFileNameW = Module.findExportByName("KernelBase.dll", "FindNextFileNameW")
Interceptor.attach(FindNextFileNameW, {onLeave: function (args) {send("FindNextFileNameW");}});

var FindNextFileW = Module.findExportByName("KernelBase.dll", "FindNextFileW")
Interceptor.attach(FindNextFileW, {onLeave: function (args) {send("FindNextFileW");}});

var FindNextStreamW = Module.findExportByName("KernelBase.dll", "FindNextStreamW")
Interceptor.attach(FindNextStreamW, {onLeave: function (args) {send("FindNextStreamW");}});

var FindNextVolumeW = Module.findExportByName("KernelBase.dll", "FindNextVolumeW")
Interceptor.attach(FindNextVolumeW, {onLeave: function (args) {send("FindNextVolumeW");}});

var FindPackagesByPackageFamily = Module.findExportByName("KernelBase.dll", "FindPackagesByPackageFamily")
Interceptor.attach(FindPackagesByPackageFamily, {onLeave: function (args) {send("FindPackagesByPackageFamily");}});

var FindResourceExW = Module.findExportByName("KernelBase.dll", "FindResourceExW")
Interceptor.attach(FindResourceExW, {onLeave: function (args) {send("FindResourceExW");}});

var FindResourceW = Module.findExportByName("KernelBase.dll", "FindResourceW")
Interceptor.attach(FindResourceW, {onLeave: function (args) {send("FindResourceW");}});

var FindStringOrdinal = Module.findExportByName("KernelBase.dll", "FindStringOrdinal")
Interceptor.attach(FindStringOrdinal, {onLeave: function (args) {send("FindStringOrdinal");}});

var FindVolumeClose = Module.findExportByName("KernelBase.dll", "FindVolumeClose")
Interceptor.attach(FindVolumeClose, {onLeave: function (args) {send("FindVolumeClose");}});

var FlsAlloc = Module.findExportByName("KernelBase.dll", "FlsAlloc")
Interceptor.attach(FlsAlloc, {onLeave: function (args) {send("FlsAlloc");}});

var FlsFree = Module.findExportByName("KernelBase.dll", "FlsFree")
Interceptor.attach(FlsFree, {onLeave: function (args) {send("FlsFree");}});

var FlsGetValue = Module.findExportByName("KernelBase.dll", "FlsGetValue")
Interceptor.attach(FlsGetValue, {onLeave: function (args) {send("FlsGetValue");}});

var FlsSetValue = Module.findExportByName("KernelBase.dll", "FlsSetValue")
Interceptor.attach(FlsSetValue, {onLeave: function (args) {send("FlsSetValue");}});

var FlushConsoleInputBuffer = Module.findExportByName("KernelBase.dll", "FlushConsoleInputBuffer")
Interceptor.attach(FlushConsoleInputBuffer, {onLeave: function (args) {send("FlushConsoleInputBuffer");}});

var FlushFileBuffers = Module.findExportByName("KernelBase.dll", "FlushFileBuffers")
Interceptor.attach(FlushFileBuffers, {onLeave: function (args) {send("FlushFileBuffers");}});

var FlushInstructionCache = Module.findExportByName("KernelBase.dll", "FlushInstructionCache")
Interceptor.attach(FlushInstructionCache, {onLeave: function (args) {send("FlushInstructionCache");}});

var FlushProcessWriteBuffers = Module.findExportByName("KernelBase.dll", "FlushProcessWriteBuffers")
Interceptor.attach(FlushProcessWriteBuffers, {onLeave: function (args) {send("FlushProcessWriteBuffers");}});

var FlushViewOfFile = Module.findExportByName("KernelBase.dll", "FlushViewOfFile")
Interceptor.attach(FlushViewOfFile, {onLeave: function (args) {send("FlushViewOfFile");}});

var FoldStringW = Module.findExportByName("KernelBase.dll", "FoldStringW")
Interceptor.attach(FoldStringW, {onLeave: function (args) {send("FoldStringW");}});

var ForceSyncFgPolicyInternal = Module.findExportByName("KernelBase.dll", "ForceSyncFgPolicyInternal")
Interceptor.attach(ForceSyncFgPolicyInternal, {onLeave: function (args) {send("ForceSyncFgPolicyInternal");}});

var FormatApplicationUserModelId = Module.findExportByName("KernelBase.dll", "FormatApplicationUserModelId")
Interceptor.attach(FormatApplicationUserModelId, {onLeave: function (args) {send("FormatApplicationUserModelId");}});

var FormatApplicationUserModelIdA = Module.findExportByName("KernelBase.dll", "FormatApplicationUserModelIdA")
Interceptor.attach(FormatApplicationUserModelIdA, {onLeave: function (args) {send("FormatApplicationUserModelIdA");}});

var FormatMessageA = Module.findExportByName("KernelBase.dll", "FormatMessageA")
Interceptor.attach(FormatMessageA, {onLeave: function (args) {send("FormatMessageA");}});

var FormatMessageW = Module.findExportByName("KernelBase.dll", "FormatMessageW")
Interceptor.attach(FormatMessageW, {onLeave: function (args) {send("FormatMessageW");}});

var FreeConsole = Module.findExportByName("KernelBase.dll", "FreeConsole")
Interceptor.attach(FreeConsole, {onLeave: function (args) {send("FreeConsole");}});

var FreeEnvironmentStringsA = Module.findExportByName("KernelBase.dll", "FreeEnvironmentStringsA")
Interceptor.attach(FreeEnvironmentStringsA, {onLeave: function (args) {send("FreeEnvironmentStringsA");}});

var FreeEnvironmentStringsW = Module.findExportByName("KernelBase.dll", "FreeEnvironmentStringsW")
Interceptor.attach(FreeEnvironmentStringsW, {onLeave: function (args) {send("FreeEnvironmentStringsW");}});

var FreeGPOListInternalA = Module.findExportByName("KernelBase.dll", "FreeGPOListInternalA")
Interceptor.attach(FreeGPOListInternalA, {onLeave: function (args) {send("FreeGPOListInternalA");}});

var FreeGPOListInternalW = Module.findExportByName("KernelBase.dll", "FreeGPOListInternalW")
Interceptor.attach(FreeGPOListInternalW, {onLeave: function (args) {send("FreeGPOListInternalW");}});

var FreeLibrary = Module.findExportByName("KernelBase.dll", "FreeLibrary")
Interceptor.attach(FreeLibrary, {onLeave: function (args) {send("FreeLibrary");}});

var FreeLibraryAndExitThread = Module.findExportByName("KernelBase.dll", "FreeLibraryAndExitThread")
Interceptor.attach(FreeLibraryAndExitThread, {onLeave: function (args) {send("FreeLibraryAndExitThread");}});

var FreeLibraryWhenCallbackReturns = Module.findExportByName("KernelBase.dll", "FreeLibraryWhenCallbackReturns")
Interceptor.attach(FreeLibraryWhenCallbackReturns, {onLeave: function (args) {send("FreeLibraryWhenCallbackReturns");}});

var FreeResource = Module.findExportByName("KernelBase.dll", "FreeResource")
Interceptor.attach(FreeResource, {onLeave: function (args) {send("FreeResource");}});

var FreeSid = Module.findExportByName("KernelBase.dll", "FreeSid")
Interceptor.attach(FreeSid, {onLeave: function (args) {send("FreeSid");}});

var FreeUserPhysicalPages = Module.findExportByName("KernelBase.dll", "FreeUserPhysicalPages")
Interceptor.attach(FreeUserPhysicalPages, {onLeave: function (args) {send("FreeUserPhysicalPages");}});

var GenerateConsoleCtrlEvent = Module.findExportByName("KernelBase.dll", "GenerateConsoleCtrlEvent")
Interceptor.attach(GenerateConsoleCtrlEvent, {onLeave: function (args) {send("GenerateConsoleCtrlEvent");}});

var GenerateGPNotificationInternal = Module.findExportByName("KernelBase.dll", "GenerateGPNotificationInternal")
Interceptor.attach(GenerateGPNotificationInternal, {onLeave: function (args) {send("GenerateGPNotificationInternal");}});

var GetACP = Module.findExportByName("KernelBase.dll", "GetACP")
Interceptor.attach(GetACP, {onLeave: function (args) {send("GetACP");}});

var GetAcceptLanguagesA = Module.findExportByName("KernelBase.dll", "GetAcceptLanguagesA")
Interceptor.attach(GetAcceptLanguagesA, {onLeave: function (args) {send("GetAcceptLanguagesA");}});

var GetAcceptLanguagesW = Module.findExportByName("KernelBase.dll", "GetAcceptLanguagesW")
Interceptor.attach(GetAcceptLanguagesW, {onLeave: function (args) {send("GetAcceptLanguagesW");}});

var GetAce = Module.findExportByName("KernelBase.dll", "GetAce")
Interceptor.attach(GetAce, {onLeave: function (args) {send("GetAce");}});

var GetAclInformation = Module.findExportByName("KernelBase.dll", "GetAclInformation")
Interceptor.attach(GetAclInformation, {onLeave: function (args) {send("GetAclInformation");}});

var GetAdjustObjectAttributesForPrivateNamespaceRoutine = Module.findExportByName("KernelBase.dll", "GetAdjustObjectAttributesForPrivateNamespaceRoutine")
Interceptor.attach(GetAdjustObjectAttributesForPrivateNamespaceRoutine, {onLeave: function (args) {send("GetAdjustObjectAttributesForPrivateNamespaceRoutine");}});

var GetAlternatePackageRoots = Module.findExportByName("KernelBase.dll", "GetAlternatePackageRoots")
Interceptor.attach(GetAlternatePackageRoots, {onLeave: function (args) {send("GetAlternatePackageRoots");}});

var GetAppContainerAce = Module.findExportByName("KernelBase.dll", "GetAppContainerAce")
Interceptor.attach(GetAppContainerAce, {onLeave: function (args) {send("GetAppContainerAce");}});

var GetAppContainerNamedObjectPath = Module.findExportByName("KernelBase.dll", "GetAppContainerNamedObjectPath")
Interceptor.attach(GetAppContainerNamedObjectPath, {onLeave: function (args) {send("GetAppContainerNamedObjectPath");}});

var GetAppDataFolder = Module.findExportByName("KernelBase.dll", "GetAppDataFolder")
Interceptor.attach(GetAppDataFolder, {onLeave: function (args) {send("GetAppDataFolder");}});

var GetAppModelVersion = Module.findExportByName("KernelBase.dll", "GetAppModelVersion")
Interceptor.attach(GetAppModelVersion, {onLeave: function (args) {send("GetAppModelVersion");}});

var GetApplicationRecoveryCallback = Module.findExportByName("KernelBase.dll", "GetApplicationRecoveryCallback")
Interceptor.attach(GetApplicationRecoveryCallback, {onLeave: function (args) {send("GetApplicationRecoveryCallback");}});

var GetApplicationRestartSettings = Module.findExportByName("KernelBase.dll", "GetApplicationRestartSettings")
Interceptor.attach(GetApplicationRestartSettings, {onLeave: function (args) {send("GetApplicationRestartSettings");}});

var GetApplicationUserModelId = Module.findExportByName("KernelBase.dll", "GetApplicationUserModelId")
Interceptor.attach(GetApplicationUserModelId, {onLeave: function (args) {send("GetApplicationUserModelId");}});

var GetApplicationUserModelIdFromToken = Module.findExportByName("KernelBase.dll", "GetApplicationUserModelIdFromToken")
Interceptor.attach(GetApplicationUserModelIdFromToken, {onLeave: function (args) {send("GetApplicationUserModelIdFromToken");}});

var GetAppliedGPOListInternalA = Module.findExportByName("KernelBase.dll", "GetAppliedGPOListInternalA")
Interceptor.attach(GetAppliedGPOListInternalA, {onLeave: function (args) {send("GetAppliedGPOListInternalA");}});

var GetAppliedGPOListInternalW = Module.findExportByName("KernelBase.dll", "GetAppliedGPOListInternalW")
Interceptor.attach(GetAppliedGPOListInternalW, {onLeave: function (args) {send("GetAppliedGPOListInternalW");}});

var GetCPFileNameFromRegistry = Module.findExportByName("KernelBase.dll", "GetCPFileNameFromRegistry")
Interceptor.attach(GetCPFileNameFromRegistry, {onLeave: function (args) {send("GetCPFileNameFromRegistry");}});

var GetCPHashNode = Module.findExportByName("KernelBase.dll", "GetCPHashNode")
Interceptor.attach(GetCPHashNode, {onLeave: function (args) {send("GetCPHashNode");}});

var GetCPInfo = Module.findExportByName("KernelBase.dll", "GetCPInfo")
Interceptor.attach(GetCPInfo, {onLeave: function (args) {send("GetCPInfo");}});

var GetCPInfoExW = Module.findExportByName("KernelBase.dll", "GetCPInfoExW")
Interceptor.attach(GetCPInfoExW, {onLeave: function (args) {send("GetCPInfoExW");}});

var GetCachedSigningLevel = Module.findExportByName("KernelBase.dll", "GetCachedSigningLevel")
Interceptor.attach(GetCachedSigningLevel, {onLeave: function (args) {send("GetCachedSigningLevel");}});

var GetCalendar = Module.findExportByName("KernelBase.dll", "GetCalendar")
Interceptor.attach(GetCalendar, {onLeave: function (args) {send("GetCalendar");}});

var GetCalendarInfoEx = Module.findExportByName("KernelBase.dll", "GetCalendarInfoEx")
Interceptor.attach(GetCalendarInfoEx, {onLeave: function (args) {send("GetCalendarInfoEx");}});

var GetCalendarInfoW = Module.findExportByName("KernelBase.dll", "GetCalendarInfoW")
Interceptor.attach(GetCalendarInfoW, {onLeave: function (args) {send("GetCalendarInfoW");}});

var GetCommConfig = Module.findExportByName("KernelBase.dll", "GetCommConfig")
Interceptor.attach(GetCommConfig, {onLeave: function (args) {send("GetCommConfig");}});

var GetCommMask = Module.findExportByName("KernelBase.dll", "GetCommMask")
Interceptor.attach(GetCommMask, {onLeave: function (args) {send("GetCommMask");}});

var GetCommModemStatus = Module.findExportByName("KernelBase.dll", "GetCommModemStatus")
Interceptor.attach(GetCommModemStatus, {onLeave: function (args) {send("GetCommModemStatus");}});

var GetCommPorts = Module.findExportByName("KernelBase.dll", "GetCommPorts")
Interceptor.attach(GetCommPorts, {onLeave: function (args) {send("GetCommPorts");}});

var GetCommProperties = Module.findExportByName("KernelBase.dll", "GetCommProperties")
Interceptor.attach(GetCommProperties, {onLeave: function (args) {send("GetCommProperties");}});

var GetCommState = Module.findExportByName("KernelBase.dll", "GetCommState")
Interceptor.attach(GetCommState, {onLeave: function (args) {send("GetCommState");}});

var GetCommTimeouts = Module.findExportByName("KernelBase.dll", "GetCommTimeouts")
Interceptor.attach(GetCommTimeouts, {onLeave: function (args) {send("GetCommTimeouts");}});

var GetCommandLineA = Module.findExportByName("KernelBase.dll", "GetCommandLineA")
Interceptor.attach(GetCommandLineA, {onLeave: function (args) {send("GetCommandLineA");}});

var GetCommandLineW = Module.findExportByName("KernelBase.dll", "GetCommandLineW")
Interceptor.attach(GetCommandLineW, {onLeave: function (args) {send("GetCommandLineW");}});

var GetCompressedFileSizeA = Module.findExportByName("KernelBase.dll", "GetCompressedFileSizeA")
Interceptor.attach(GetCompressedFileSizeA, {onLeave: function (args) {send("GetCompressedFileSizeA");}});

var GetCompressedFileSizeW = Module.findExportByName("KernelBase.dll", "GetCompressedFileSizeW")
Interceptor.attach(GetCompressedFileSizeW, {onLeave: function (args) {send("GetCompressedFileSizeW");}});

var GetComputerNameExA = Module.findExportByName("KernelBase.dll", "GetComputerNameExA")
Interceptor.attach(GetComputerNameExA, {onLeave: function (args) {send("GetComputerNameExA");}});

var GetComputerNameExW = Module.findExportByName("KernelBase.dll", "GetComputerNameExW")
Interceptor.attach(GetComputerNameExW, {onLeave: function (args) {send("GetComputerNameExW");}});

var GetConsoleAliasA = Module.findExportByName("KernelBase.dll", "GetConsoleAliasA")
Interceptor.attach(GetConsoleAliasA, {onLeave: function (args) {send("GetConsoleAliasA");}});

var GetConsoleAliasExesA = Module.findExportByName("KernelBase.dll", "GetConsoleAliasExesA")
Interceptor.attach(GetConsoleAliasExesA, {onLeave: function (args) {send("GetConsoleAliasExesA");}});

var GetConsoleAliasExesLengthA = Module.findExportByName("KernelBase.dll", "GetConsoleAliasExesLengthA")
Interceptor.attach(GetConsoleAliasExesLengthA, {onLeave: function (args) {send("GetConsoleAliasExesLengthA");}});

var GetConsoleAliasExesLengthW = Module.findExportByName("KernelBase.dll", "GetConsoleAliasExesLengthW")
Interceptor.attach(GetConsoleAliasExesLengthW, {onLeave: function (args) {send("GetConsoleAliasExesLengthW");}});

var GetConsoleAliasExesW = Module.findExportByName("KernelBase.dll", "GetConsoleAliasExesW")
Interceptor.attach(GetConsoleAliasExesW, {onLeave: function (args) {send("GetConsoleAliasExesW");}});

var GetConsoleAliasW = Module.findExportByName("KernelBase.dll", "GetConsoleAliasW")
Interceptor.attach(GetConsoleAliasW, {onLeave: function (args) {send("GetConsoleAliasW");}});

var GetConsoleAliasesA = Module.findExportByName("KernelBase.dll", "GetConsoleAliasesA")
Interceptor.attach(GetConsoleAliasesA, {onLeave: function (args) {send("GetConsoleAliasesA");}});

var GetConsoleAliasesLengthA = Module.findExportByName("KernelBase.dll", "GetConsoleAliasesLengthA")
Interceptor.attach(GetConsoleAliasesLengthA, {onLeave: function (args) {send("GetConsoleAliasesLengthA");}});

var GetConsoleAliasesLengthW = Module.findExportByName("KernelBase.dll", "GetConsoleAliasesLengthW")
Interceptor.attach(GetConsoleAliasesLengthW, {onLeave: function (args) {send("GetConsoleAliasesLengthW");}});

var GetConsoleAliasesW = Module.findExportByName("KernelBase.dll", "GetConsoleAliasesW")
Interceptor.attach(GetConsoleAliasesW, {onLeave: function (args) {send("GetConsoleAliasesW");}});

var GetConsoleCP = Module.findExportByName("KernelBase.dll", "GetConsoleCP")
Interceptor.attach(GetConsoleCP, {onLeave: function (args) {send("GetConsoleCP");}});

var GetConsoleCommandHistoryA = Module.findExportByName("KernelBase.dll", "GetConsoleCommandHistoryA")
Interceptor.attach(GetConsoleCommandHistoryA, {onLeave: function (args) {send("GetConsoleCommandHistoryA");}});

var GetConsoleCommandHistoryLengthA = Module.findExportByName("KernelBase.dll", "GetConsoleCommandHistoryLengthA")
Interceptor.attach(GetConsoleCommandHistoryLengthA, {onLeave: function (args) {send("GetConsoleCommandHistoryLengthA");}});

var GetConsoleCommandHistoryLengthW = Module.findExportByName("KernelBase.dll", "GetConsoleCommandHistoryLengthW")
Interceptor.attach(GetConsoleCommandHistoryLengthW, {onLeave: function (args) {send("GetConsoleCommandHistoryLengthW");}});

var GetConsoleCommandHistoryW = Module.findExportByName("KernelBase.dll", "GetConsoleCommandHistoryW")
Interceptor.attach(GetConsoleCommandHistoryW, {onLeave: function (args) {send("GetConsoleCommandHistoryW");}});

var GetConsoleCursorInfo = Module.findExportByName("KernelBase.dll", "GetConsoleCursorInfo")
Interceptor.attach(GetConsoleCursorInfo, {onLeave: function (args) {send("GetConsoleCursorInfo");}});

var GetConsoleDisplayMode = Module.findExportByName("KernelBase.dll", "GetConsoleDisplayMode")
Interceptor.attach(GetConsoleDisplayMode, {onLeave: function (args) {send("GetConsoleDisplayMode");}});

var GetConsoleFontSize = Module.findExportByName("KernelBase.dll", "GetConsoleFontSize")
Interceptor.attach(GetConsoleFontSize, {onLeave: function (args) {send("GetConsoleFontSize");}});

var GetConsoleHistoryInfo = Module.findExportByName("KernelBase.dll", "GetConsoleHistoryInfo")
Interceptor.attach(GetConsoleHistoryInfo, {onLeave: function (args) {send("GetConsoleHistoryInfo");}});

var GetConsoleInputExeNameA = Module.findExportByName("KernelBase.dll", "GetConsoleInputExeNameA")
Interceptor.attach(GetConsoleInputExeNameA, {onLeave: function (args) {send("GetConsoleInputExeNameA");}});

var GetConsoleInputExeNameW = Module.findExportByName("KernelBase.dll", "GetConsoleInputExeNameW")
Interceptor.attach(GetConsoleInputExeNameW, {onLeave: function (args) {send("GetConsoleInputExeNameW");}});

var GetConsoleMode = Module.findExportByName("KernelBase.dll", "GetConsoleMode")
Interceptor.attach(GetConsoleMode, {onLeave: function (args) {send("GetConsoleMode");}});

var GetConsoleOriginalTitleA = Module.findExportByName("KernelBase.dll", "GetConsoleOriginalTitleA")
Interceptor.attach(GetConsoleOriginalTitleA, {onLeave: function (args) {send("GetConsoleOriginalTitleA");}});

var GetConsoleOriginalTitleW = Module.findExportByName("KernelBase.dll", "GetConsoleOriginalTitleW")
Interceptor.attach(GetConsoleOriginalTitleW, {onLeave: function (args) {send("GetConsoleOriginalTitleW");}});

var GetConsoleOutputCP = Module.findExportByName("KernelBase.dll", "GetConsoleOutputCP")
Interceptor.attach(GetConsoleOutputCP, {onLeave: function (args) {send("GetConsoleOutputCP");}});

var GetConsoleProcessList = Module.findExportByName("KernelBase.dll", "GetConsoleProcessList")
Interceptor.attach(GetConsoleProcessList, {onLeave: function (args) {send("GetConsoleProcessList");}});

var GetConsoleScreenBufferInfo = Module.findExportByName("KernelBase.dll", "GetConsoleScreenBufferInfo")
Interceptor.attach(GetConsoleScreenBufferInfo, {onLeave: function (args) {send("GetConsoleScreenBufferInfo");}});

var GetConsoleScreenBufferInfoEx = Module.findExportByName("KernelBase.dll", "GetConsoleScreenBufferInfoEx")
Interceptor.attach(GetConsoleScreenBufferInfoEx, {onLeave: function (args) {send("GetConsoleScreenBufferInfoEx");}});

var GetConsoleSelectionInfo = Module.findExportByName("KernelBase.dll", "GetConsoleSelectionInfo")
Interceptor.attach(GetConsoleSelectionInfo, {onLeave: function (args) {send("GetConsoleSelectionInfo");}});

var GetConsoleTitleA = Module.findExportByName("KernelBase.dll", "GetConsoleTitleA")
Interceptor.attach(GetConsoleTitleA, {onLeave: function (args) {send("GetConsoleTitleA");}});

var GetConsoleTitleW = Module.findExportByName("KernelBase.dll", "GetConsoleTitleW")
Interceptor.attach(GetConsoleTitleW, {onLeave: function (args) {send("GetConsoleTitleW");}});

var GetConsoleWindow = Module.findExportByName("KernelBase.dll", "GetConsoleWindow")
Interceptor.attach(GetConsoleWindow, {onLeave: function (args) {send("GetConsoleWindow");}});

var GetCurrencyFormatEx = Module.findExportByName("KernelBase.dll", "GetCurrencyFormatEx")
Interceptor.attach(GetCurrencyFormatEx, {onLeave: function (args) {send("GetCurrencyFormatEx");}});

var GetCurrencyFormatW = Module.findExportByName("KernelBase.dll", "GetCurrencyFormatW")
Interceptor.attach(GetCurrencyFormatW, {onLeave: function (args) {send("GetCurrencyFormatW");}});

var GetCurrentActCtx = Module.findExportByName("KernelBase.dll", "GetCurrentActCtx")
Interceptor.attach(GetCurrentActCtx, {onLeave: function (args) {send("GetCurrentActCtx");}});

var GetCurrentApplicationUserModelId = Module.findExportByName("KernelBase.dll", "GetCurrentApplicationUserModelId")
Interceptor.attach(GetCurrentApplicationUserModelId, {onLeave: function (args) {send("GetCurrentApplicationUserModelId");}});

var GetCurrentConsoleFont = Module.findExportByName("KernelBase.dll", "GetCurrentConsoleFont")
Interceptor.attach(GetCurrentConsoleFont, {onLeave: function (args) {send("GetCurrentConsoleFont");}});

var GetCurrentConsoleFontEx = Module.findExportByName("KernelBase.dll", "GetCurrentConsoleFontEx")
Interceptor.attach(GetCurrentConsoleFontEx, {onLeave: function (args) {send("GetCurrentConsoleFontEx");}});

var GetCurrentDirectoryA = Module.findExportByName("KernelBase.dll", "GetCurrentDirectoryA")
Interceptor.attach(GetCurrentDirectoryA, {onLeave: function (args) {send("GetCurrentDirectoryA");}});

var GetCurrentDirectoryW = Module.findExportByName("KernelBase.dll", "GetCurrentDirectoryW")
Interceptor.attach(GetCurrentDirectoryW, {onLeave: function (args) {send("GetCurrentDirectoryW");}});

var GetCurrentPackageApplicationContext = Module.findExportByName("KernelBase.dll", "GetCurrentPackageApplicationContext")
Interceptor.attach(GetCurrentPackageApplicationContext, {onLeave: function (args) {send("GetCurrentPackageApplicationContext");}});

var GetCurrentPackageApplicationResourcesContext = Module.findExportByName("KernelBase.dll", "GetCurrentPackageApplicationResourcesContext")
Interceptor.attach(GetCurrentPackageApplicationResourcesContext, {onLeave: function (args) {send("GetCurrentPackageApplicationResourcesContext");}});

var GetCurrentPackageContext = Module.findExportByName("KernelBase.dll", "GetCurrentPackageContext")
Interceptor.attach(GetCurrentPackageContext, {onLeave: function (args) {send("GetCurrentPackageContext");}});

var GetCurrentPackageFamilyName = Module.findExportByName("KernelBase.dll", "GetCurrentPackageFamilyName")
Interceptor.attach(GetCurrentPackageFamilyName, {onLeave: function (args) {send("GetCurrentPackageFamilyName");}});

var GetCurrentPackageFullName = Module.findExportByName("KernelBase.dll", "GetCurrentPackageFullName")
Interceptor.attach(GetCurrentPackageFullName, {onLeave: function (args) {send("GetCurrentPackageFullName");}});

var GetCurrentPackageGlobalizationContext = Module.findExportByName("KernelBase.dll", "GetCurrentPackageGlobalizationContext")
Interceptor.attach(GetCurrentPackageGlobalizationContext, {onLeave: function (args) {send("GetCurrentPackageGlobalizationContext");}});

var GetCurrentPackageId = Module.findExportByName("KernelBase.dll", "GetCurrentPackageId")
Interceptor.attach(GetCurrentPackageId, {onLeave: function (args) {send("GetCurrentPackageId");}});

var GetCurrentPackageInfo = Module.findExportByName("KernelBase.dll", "GetCurrentPackageInfo")
Interceptor.attach(GetCurrentPackageInfo, {onLeave: function (args) {send("GetCurrentPackageInfo");}});

var GetCurrentPackageInfo2 = Module.findExportByName("KernelBase.dll", "GetCurrentPackageInfo2")
Interceptor.attach(GetCurrentPackageInfo2, {onLeave: function (args) {send("GetCurrentPackageInfo2");}});

var GetCurrentPackageInfo3 = Module.findExportByName("KernelBase.dll", "GetCurrentPackageInfo3")
Interceptor.attach(GetCurrentPackageInfo3, {onLeave: function (args) {send("GetCurrentPackageInfo3");}});

var GetCurrentPackagePath = Module.findExportByName("KernelBase.dll", "GetCurrentPackagePath")
Interceptor.attach(GetCurrentPackagePath, {onLeave: function (args) {send("GetCurrentPackagePath");}});

var GetCurrentPackagePath2 = Module.findExportByName("KernelBase.dll", "GetCurrentPackagePath2")
Interceptor.attach(GetCurrentPackagePath2, {onLeave: function (args) {send("GetCurrentPackagePath2");}});

var GetCurrentPackageResourcesContext = Module.findExportByName("KernelBase.dll", "GetCurrentPackageResourcesContext")
Interceptor.attach(GetCurrentPackageResourcesContext, {onLeave: function (args) {send("GetCurrentPackageResourcesContext");}});

var GetCurrentPackageSecurityContext = Module.findExportByName("KernelBase.dll", "GetCurrentPackageSecurityContext")
Interceptor.attach(GetCurrentPackageSecurityContext, {onLeave: function (args) {send("GetCurrentPackageSecurityContext");}});

var GetCurrentProcess = Module.findExportByName("KernelBase.dll", "GetCurrentProcess")
Interceptor.attach(GetCurrentProcess, {onLeave: function (args) {send("GetCurrentProcess");}});

var GetCurrentProcessId = Module.findExportByName("KernelBase.dll", "GetCurrentProcessId")
Interceptor.attach(GetCurrentProcessId, {onLeave: function (args) {send("GetCurrentProcessId");}});

var GetCurrentProcessorNumber = Module.findExportByName("KernelBase.dll", "GetCurrentProcessorNumber")
Interceptor.attach(GetCurrentProcessorNumber, {onLeave: function (args) {send("GetCurrentProcessorNumber");}});

var GetCurrentProcessorNumberEx = Module.findExportByName("KernelBase.dll", "GetCurrentProcessorNumberEx")
Interceptor.attach(GetCurrentProcessorNumberEx, {onLeave: function (args) {send("GetCurrentProcessorNumberEx");}});

var GetCurrentTargetPlatformContext = Module.findExportByName("KernelBase.dll", "GetCurrentTargetPlatformContext")
Interceptor.attach(GetCurrentTargetPlatformContext, {onLeave: function (args) {send("GetCurrentTargetPlatformContext");}});

var GetCurrentThread = Module.findExportByName("KernelBase.dll", "GetCurrentThread")
Interceptor.attach(GetCurrentThread, {onLeave: function (args) {send("GetCurrentThread");}});

var GetCurrentThreadId = Module.findExportByName("KernelBase.dll", "GetCurrentThreadId")
Interceptor.attach(GetCurrentThreadId, {onLeave: function (args) {send("GetCurrentThreadId");}});

var GetCurrentThreadStackLimits = Module.findExportByName("KernelBase.dll", "GetCurrentThreadStackLimits")
Interceptor.attach(GetCurrentThreadStackLimits, {onLeave: function (args) {send("GetCurrentThreadStackLimits");}});

var GetDateFormatA = Module.findExportByName("KernelBase.dll", "GetDateFormatA")
Interceptor.attach(GetDateFormatA, {onLeave: function (args) {send("GetDateFormatA");}});

var GetDateFormatEx = Module.findExportByName("KernelBase.dll", "GetDateFormatEx")
Interceptor.attach(GetDateFormatEx, {onLeave: function (args) {send("GetDateFormatEx");}});

var GetDateFormatW = Module.findExportByName("KernelBase.dll", "GetDateFormatW")
Interceptor.attach(GetDateFormatW, {onLeave: function (args) {send("GetDateFormatW");}});

var GetDeveloperDriveEnablementState = Module.findExportByName("KernelBase.dll", "GetDeveloperDriveEnablementState")
Interceptor.attach(GetDeveloperDriveEnablementState, {onLeave: function (args) {send("GetDeveloperDriveEnablementState");}});

var GetDeviceDriverBaseNameA = Module.findExportByName("KernelBase.dll", "GetDeviceDriverBaseNameA")
Interceptor.attach(GetDeviceDriverBaseNameA, {onLeave: function (args) {send("GetDeviceDriverBaseNameA");}});

var GetDeviceDriverBaseNameW = Module.findExportByName("KernelBase.dll", "GetDeviceDriverBaseNameW")
Interceptor.attach(GetDeviceDriverBaseNameW, {onLeave: function (args) {send("GetDeviceDriverBaseNameW");}});

var GetDeviceDriverFileNameA = Module.findExportByName("KernelBase.dll", "GetDeviceDriverFileNameA")
Interceptor.attach(GetDeviceDriverFileNameA, {onLeave: function (args) {send("GetDeviceDriverFileNameA");}});

var GetDeviceDriverFileNameW = Module.findExportByName("KernelBase.dll", "GetDeviceDriverFileNameW")
Interceptor.attach(GetDeviceDriverFileNameW, {onLeave: function (args) {send("GetDeviceDriverFileNameW");}});

var GetDiskFreeSpaceA = Module.findExportByName("KernelBase.dll", "GetDiskFreeSpaceA")
Interceptor.attach(GetDiskFreeSpaceA, {onLeave: function (args) {send("GetDiskFreeSpaceA");}});

var GetDiskFreeSpaceExA = Module.findExportByName("KernelBase.dll", "GetDiskFreeSpaceExA")
Interceptor.attach(GetDiskFreeSpaceExA, {onLeave: function (args) {send("GetDiskFreeSpaceExA");}});

var GetDiskFreeSpaceExW = Module.findExportByName("KernelBase.dll", "GetDiskFreeSpaceExW")
Interceptor.attach(GetDiskFreeSpaceExW, {onLeave: function (args) {send("GetDiskFreeSpaceExW");}});

var GetDiskFreeSpaceW = Module.findExportByName("KernelBase.dll", "GetDiskFreeSpaceW")
Interceptor.attach(GetDiskFreeSpaceW, {onLeave: function (args) {send("GetDiskFreeSpaceW");}});

var GetDiskSpaceInformationA = Module.findExportByName("KernelBase.dll", "GetDiskSpaceInformationA")
Interceptor.attach(GetDiskSpaceInformationA, {onLeave: function (args) {send("GetDiskSpaceInformationA");}});

var GetDiskSpaceInformationW = Module.findExportByName("KernelBase.dll", "GetDiskSpaceInformationW")
Interceptor.attach(GetDiskSpaceInformationW, {onLeave: function (args) {send("GetDiskSpaceInformationW");}});

var GetDiskSpaceInformationWCOS = Module.findExportByName("KernelBase.dll", "GetDiskSpaceInformationWCOS")
Interceptor.attach(GetDiskSpaceInformationWCOS, {onLeave: function (args) {send("GetDiskSpaceInformationWCOS");}});

var GetDriveTypeA = Module.findExportByName("KernelBase.dll", "GetDriveTypeA")
Interceptor.attach(GetDriveTypeA, {onLeave: function (args) {send("GetDriveTypeA");}});

var GetDriveTypeW = Module.findExportByName("KernelBase.dll", "GetDriveTypeW")
Interceptor.attach(GetDriveTypeW, {onLeave: function (args) {send("GetDriveTypeW");}});

var GetDurationFormatEx = Module.findExportByName("KernelBase.dll", "GetDurationFormatEx")
Interceptor.attach(GetDurationFormatEx, {onLeave: function (args) {send("GetDurationFormatEx");}});

var GetDynamicTimeZoneInformation = Module.findExportByName("KernelBase.dll", "GetDynamicTimeZoneInformation")
Interceptor.attach(GetDynamicTimeZoneInformation, {onLeave: function (args) {send("GetDynamicTimeZoneInformation");}});

var GetDynamicTimeZoneInformationEffectiveYears = Module.findExportByName("KernelBase.dll", "GetDynamicTimeZoneInformationEffectiveYears")
Interceptor.attach(GetDynamicTimeZoneInformationEffectiveYears, {onLeave: function (args) {send("GetDynamicTimeZoneInformationEffectiveYears");}});

var GetEffectivePackageStatusForUser = Module.findExportByName("KernelBase.dll", "GetEffectivePackageStatusForUser")
Interceptor.attach(GetEffectivePackageStatusForUser, {onLeave: function (args) {send("GetEffectivePackageStatusForUser");}});

var GetEffectivePackageStatusForUserSid = Module.findExportByName("KernelBase.dll", "GetEffectivePackageStatusForUserSid")
Interceptor.attach(GetEffectivePackageStatusForUserSid, {onLeave: function (args) {send("GetEffectivePackageStatusForUserSid");}});

var GetEightBitStringToUnicodeSizeRoutine = Module.findExportByName("KernelBase.dll", "GetEightBitStringToUnicodeSizeRoutine")
Interceptor.attach(GetEightBitStringToUnicodeSizeRoutine, {onLeave: function (args) {send("GetEightBitStringToUnicodeSizeRoutine");}});

var GetEightBitStringToUnicodeStringRoutine = Module.findExportByName("KernelBase.dll", "GetEightBitStringToUnicodeStringRoutine")
Interceptor.attach(GetEightBitStringToUnicodeStringRoutine, {onLeave: function (args) {send("GetEightBitStringToUnicodeStringRoutine");}});

var GetEnabledXStateFeatures = Module.findExportByName("KernelBase.dll", "GetEnabledXStateFeatures")
Interceptor.attach(GetEnabledXStateFeatures, {onLeave: function (args) {send("GetEnabledXStateFeatures");}});

var GetEnvironmentStrings = Module.findExportByName("KernelBase.dll", "GetEnvironmentStrings")
Interceptor.attach(GetEnvironmentStrings, {onLeave: function (args) {send("GetEnvironmentStrings");}});

var GetEnvironmentStringsA = Module.findExportByName("KernelBase.dll", "GetEnvironmentStringsA")
Interceptor.attach(GetEnvironmentStringsA, {onLeave: function (args) {send("GetEnvironmentStringsA");}});

var GetEnvironmentStringsW = Module.findExportByName("KernelBase.dll", "GetEnvironmentStringsW")
Interceptor.attach(GetEnvironmentStringsW, {onLeave: function (args) {send("GetEnvironmentStringsW");}});

var GetEnvironmentVariableA = Module.findExportByName("KernelBase.dll", "GetEnvironmentVariableA")
Interceptor.attach(GetEnvironmentVariableA, {onLeave: function (args) {send("GetEnvironmentVariableA");}});

var GetEnvironmentVariableW = Module.findExportByName("KernelBase.dll", "GetEnvironmentVariableW")
Interceptor.attach(GetEnvironmentVariableW, {onLeave: function (args) {send("GetEnvironmentVariableW");}});

var GetEraNameCountedString = Module.findExportByName("KernelBase.dll", "GetEraNameCountedString")
Interceptor.attach(GetEraNameCountedString, {onLeave: function (args) {send("GetEraNameCountedString");}});

var GetErrorMode = Module.findExportByName("KernelBase.dll", "GetErrorMode")
Interceptor.attach(GetErrorMode, {onLeave: function (args) {send("GetErrorMode");}});

var GetExitCodeProcess = Module.findExportByName("KernelBase.dll", "GetExitCodeProcess")
Interceptor.attach(GetExitCodeProcess, {onLeave: function (args) {send("GetExitCodeProcess");}});

var GetExitCodeThread = Module.findExportByName("KernelBase.dll", "GetExitCodeThread")
Interceptor.attach(GetExitCodeThread, {onLeave: function (args) {send("GetExitCodeThread");}});

var GetExtensionApplicationUserModelId = Module.findExportByName("KernelBase.dll", "GetExtensionApplicationUserModelId")
Interceptor.attach(GetExtensionApplicationUserModelId, {onLeave: function (args) {send("GetExtensionApplicationUserModelId");}});

var GetExtensionProgIds = Module.findExportByName("KernelBase.dll", "GetExtensionProgIds")
Interceptor.attach(GetExtensionProgIds, {onLeave: function (args) {send("GetExtensionProgIds");}});

var GetExtensionProperty = Module.findExportByName("KernelBase.dll", "GetExtensionProperty")
Interceptor.attach(GetExtensionProperty, {onLeave: function (args) {send("GetExtensionProperty");}});

var GetExtensionProperty2 = Module.findExportByName("KernelBase.dll", "GetExtensionProperty2")
Interceptor.attach(GetExtensionProperty2, {onLeave: function (args) {send("GetExtensionProperty2");}});

var GetFallbackDisplayName = Module.findExportByName("KernelBase.dll", "GetFallbackDisplayName")
Interceptor.attach(GetFallbackDisplayName, {onLeave: function (args) {send("GetFallbackDisplayName");}});

var GetFileAttributesA = Module.findExportByName("KernelBase.dll", "GetFileAttributesA")
Interceptor.attach(GetFileAttributesA, {onLeave: function (args) {send("GetFileAttributesA");}});

var GetFileAttributesExA = Module.findExportByName("KernelBase.dll", "GetFileAttributesExA")
Interceptor.attach(GetFileAttributesExA, {onLeave: function (args) {send("GetFileAttributesExA");}});

var GetFileAttributesExFromAppW = Module.findExportByName("KernelBase.dll", "GetFileAttributesExFromAppW")
Interceptor.attach(GetFileAttributesExFromAppW, {onLeave: function (args) {send("GetFileAttributesExFromAppW");}});

var GetFileAttributesExW = Module.findExportByName("KernelBase.dll", "GetFileAttributesExW")
Interceptor.attach(GetFileAttributesExW, {onLeave: function (args) {send("GetFileAttributesExW");}});

var GetFileAttributesW = Module.findExportByName("KernelBase.dll", "GetFileAttributesW")
Interceptor.attach(GetFileAttributesW, {onLeave: function (args) {send("GetFileAttributesW");}});

var GetFileInformationByHandle = Module.findExportByName("KernelBase.dll", "GetFileInformationByHandle")
Interceptor.attach(GetFileInformationByHandle, {onLeave: function (args) {send("GetFileInformationByHandle");}});

var GetFileInformationByHandleEx = Module.findExportByName("KernelBase.dll", "GetFileInformationByHandleEx")
Interceptor.attach(GetFileInformationByHandleEx, {onLeave: function (args) {send("GetFileInformationByHandleEx");}});

var GetFileMUIInfo = Module.findExportByName("KernelBase.dll", "GetFileMUIInfo")
Interceptor.attach(GetFileMUIInfo, {onLeave: function (args) {send("GetFileMUIInfo");}});

var GetFileMUIPath = Module.findExportByName("KernelBase.dll", "GetFileMUIPath")
Interceptor.attach(GetFileMUIPath, {onLeave: function (args) {send("GetFileMUIPath");}});

var GetFileSecurityW = Module.findExportByName("KernelBase.dll", "GetFileSecurityW")
Interceptor.attach(GetFileSecurityW, {onLeave: function (args) {send("GetFileSecurityW");}});

var GetFileSize = Module.findExportByName("KernelBase.dll", "GetFileSize")
Interceptor.attach(GetFileSize, {onLeave: function (args) {send("GetFileSize");}});

var GetFileSizeEx = Module.findExportByName("KernelBase.dll", "GetFileSizeEx")
Interceptor.attach(GetFileSizeEx, {onLeave: function (args) {send("GetFileSizeEx");}});

var GetFileTime = Module.findExportByName("KernelBase.dll", "GetFileTime")
Interceptor.attach(GetFileTime, {onLeave: function (args) {send("GetFileTime");}});

var GetFileType = Module.findExportByName("KernelBase.dll", "GetFileType")
Interceptor.attach(GetFileType, {onLeave: function (args) {send("GetFileType");}});

var GetFileVersionInfoA = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoA")
Interceptor.attach(GetFileVersionInfoA, {onLeave: function (args) {send("GetFileVersionInfoA");}});

var GetFileVersionInfoByHandle = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoByHandle")
Interceptor.attach(GetFileVersionInfoByHandle, {onLeave: function (args) {send("GetFileVersionInfoByHandle");}});

var GetFileVersionInfoExA = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoExA")
Interceptor.attach(GetFileVersionInfoExA, {onLeave: function (args) {send("GetFileVersionInfoExA");}});

var GetFileVersionInfoExW = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoExW")
Interceptor.attach(GetFileVersionInfoExW, {onLeave: function (args) {send("GetFileVersionInfoExW");}});

var GetFileVersionInfoSizeA = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoSizeA")
Interceptor.attach(GetFileVersionInfoSizeA, {onLeave: function (args) {send("GetFileVersionInfoSizeA");}});

var GetFileVersionInfoSizeExA = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoSizeExA")
Interceptor.attach(GetFileVersionInfoSizeExA, {onLeave: function (args) {send("GetFileVersionInfoSizeExA");}});

var GetFileVersionInfoSizeExW = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoSizeExW")
Interceptor.attach(GetFileVersionInfoSizeExW, {onLeave: function (args) {send("GetFileVersionInfoSizeExW");}});

var GetFileVersionInfoSizeW = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoSizeW")
Interceptor.attach(GetFileVersionInfoSizeW, {onLeave: function (args) {send("GetFileVersionInfoSizeW");}});

var GetFileVersionInfoW = Module.findExportByName("KernelBase.dll", "GetFileVersionInfoW")
Interceptor.attach(GetFileVersionInfoW, {onLeave: function (args) {send("GetFileVersionInfoW");}});

var GetFinalPathNameByHandleA = Module.findExportByName("KernelBase.dll", "GetFinalPathNameByHandleA")
Interceptor.attach(GetFinalPathNameByHandleA, {onLeave: function (args) {send("GetFinalPathNameByHandleA");}});

var GetFinalPathNameByHandleW = Module.findExportByName("KernelBase.dll", "GetFinalPathNameByHandleW")
Interceptor.attach(GetFinalPathNameByHandleW, {onLeave: function (args) {send("GetFinalPathNameByHandleW");}});

var GetFullPathNameA = Module.findExportByName("KernelBase.dll", "GetFullPathNameA")
Interceptor.attach(GetFullPathNameA, {onLeave: function (args) {send("GetFullPathNameA");}});

var GetFullPathNameW = Module.findExportByName("KernelBase.dll", "GetFullPathNameW")
Interceptor.attach(GetFullPathNameW, {onLeave: function (args) {send("GetFullPathNameW");}});

var GetGPOListInternalA = Module.findExportByName("KernelBase.dll", "GetGPOListInternalA")
Interceptor.attach(GetGPOListInternalA, {onLeave: function (args) {send("GetGPOListInternalA");}});

var GetGPOListInternalW = Module.findExportByName("KernelBase.dll", "GetGPOListInternalW")
Interceptor.attach(GetGPOListInternalW, {onLeave: function (args) {send("GetGPOListInternalW");}});

var GetGamingDeviceModelInformation = Module.findExportByName("KernelBase.dll", "GetGamingDeviceModelInformation")
Interceptor.attach(GetGamingDeviceModelInformation, {onLeave: function (args) {send("GetGamingDeviceModelInformation");}});

var GetGeoInfoEx = Module.findExportByName("KernelBase.dll", "GetGeoInfoEx")
Interceptor.attach(GetGeoInfoEx, {onLeave: function (args) {send("GetGeoInfoEx");}});

var GetGeoInfoW = Module.findExportByName("KernelBase.dll", "GetGeoInfoW")
Interceptor.attach(GetGeoInfoW, {onLeave: function (args) {send("GetGeoInfoW");}});

var GetHandleInformation = Module.findExportByName("KernelBase.dll", "GetHandleInformation")
Interceptor.attach(GetHandleInformation, {onLeave: function (args) {send("GetHandleInformation");}});

var GetHivePath = Module.findExportByName("KernelBase.dll", "GetHivePath")
Interceptor.attach(GetHivePath, {onLeave: function (args) {send("GetHivePath");}});

var GetIdForPackageDependencyContext = Module.findExportByName("KernelBase.dll", "GetIdForPackageDependencyContext")
Interceptor.attach(GetIdForPackageDependencyContext, {onLeave: function (args) {send("GetIdForPackageDependencyContext");}});

var GetIntegratedDisplaySize = Module.findExportByName("KernelBase.dll", "GetIntegratedDisplaySize")
Interceptor.attach(GetIntegratedDisplaySize, {onLeave: function (args) {send("GetIntegratedDisplaySize");}});

var GetIoRingInfo = Module.findExportByName("KernelBase.dll", "GetIoRingInfo")
Interceptor.attach(GetIoRingInfo, {onLeave: function (args) {send("GetIoRingInfo");}});

var GetIsEdpEnabled = Module.findExportByName("KernelBase.dll", "GetIsEdpEnabled")
Interceptor.attach(GetIsEdpEnabled, {onLeave: function (args) {send("GetIsEdpEnabled");}});

var GetIsWdagEnabled = Module.findExportByName("KernelBase.dll", "GetIsWdagEnabled")
Interceptor.attach(GetIsWdagEnabled, {onLeave: function (args) {send("GetIsWdagEnabled");}});

var GetKernelObjectSecurity = Module.findExportByName("KernelBase.dll", "GetKernelObjectSecurity")
Interceptor.attach(GetKernelObjectSecurity, {onLeave: function (args) {send("GetKernelObjectSecurity");}});

var GetLargePageMinimum = Module.findExportByName("KernelBase.dll", "GetLargePageMinimum")
Interceptor.attach(GetLargePageMinimum, {onLeave: function (args) {send("GetLargePageMinimum");}});

var GetLargestConsoleWindowSize = Module.findExportByName("KernelBase.dll", "GetLargestConsoleWindowSize")
Interceptor.attach(GetLargestConsoleWindowSize, {onLeave: function (args) {send("GetLargestConsoleWindowSize");}});

var GetLastError = Module.findExportByName("KernelBase.dll", "GetLastError")
Interceptor.attach(GetLastError, {onLeave: function (args) {send("GetLastError");}});

var GetLengthSid = Module.findExportByName("KernelBase.dll", "GetLengthSid")
Interceptor.attach(GetLengthSid, {onLeave: function (args) {send("GetLengthSid");}});

var GetLocalTime = Module.findExportByName("KernelBase.dll", "GetLocalTime")
Interceptor.attach(GetLocalTime, {onLeave: function (args) {send("GetLocalTime");}});

var GetLocaleInfoA = Module.findExportByName("KernelBase.dll", "GetLocaleInfoA")
Interceptor.attach(GetLocaleInfoA, {onLeave: function (args) {send("GetLocaleInfoA");}});

var GetLocaleInfoEx = Module.findExportByName("KernelBase.dll", "GetLocaleInfoEx")
Interceptor.attach(GetLocaleInfoEx, {onLeave: function (args) {send("GetLocaleInfoEx");}});

var GetLocaleInfoHelper = Module.findExportByName("KernelBase.dll", "GetLocaleInfoHelper")
Interceptor.attach(GetLocaleInfoHelper, {onLeave: function (args) {send("GetLocaleInfoHelper");}});

var GetLocaleInfoW = Module.findExportByName("KernelBase.dll", "GetLocaleInfoW")
Interceptor.attach(GetLocaleInfoW, {onLeave: function (args) {send("GetLocaleInfoW");}});

var GetLogicalDriveStringsW = Module.findExportByName("KernelBase.dll", "GetLogicalDriveStringsW")
Interceptor.attach(GetLogicalDriveStringsW, {onLeave: function (args) {send("GetLogicalDriveStringsW");}});

var GetLogicalDrives = Module.findExportByName("KernelBase.dll", "GetLogicalDrives")
Interceptor.attach(GetLogicalDrives, {onLeave: function (args) {send("GetLogicalDrives");}});

var GetLogicalProcessorInformation = Module.findExportByName("KernelBase.dll", "GetLogicalProcessorInformation")
Interceptor.attach(GetLogicalProcessorInformation, {onLeave: function (args) {send("GetLogicalProcessorInformation");}});

var GetLogicalProcessorInformationEx = Module.findExportByName("KernelBase.dll", "GetLogicalProcessorInformationEx")
Interceptor.attach(GetLogicalProcessorInformationEx, {onLeave: function (args) {send("GetLogicalProcessorInformationEx");}});

var GetLongPathNameA = Module.findExportByName("KernelBase.dll", "GetLongPathNameA")
Interceptor.attach(GetLongPathNameA, {onLeave: function (args) {send("GetLongPathNameA");}});

var GetLongPathNameW = Module.findExportByName("KernelBase.dll", "GetLongPathNameW")
Interceptor.attach(GetLongPathNameW, {onLeave: function (args) {send("GetLongPathNameW");}});

var GetMachineTypeAttributes = Module.findExportByName("KernelBase.dll", "GetMachineTypeAttributes")
Interceptor.attach(GetMachineTypeAttributes, {onLeave: function (args) {send("GetMachineTypeAttributes");}});

var GetMappedFileNameA = Module.findExportByName("KernelBase.dll", "GetMappedFileNameA")
Interceptor.attach(GetMappedFileNameA, {onLeave: function (args) {send("GetMappedFileNameA");}});

var GetMappedFileNameW = Module.findExportByName("KernelBase.dll", "GetMappedFileNameW")
Interceptor.attach(GetMappedFileNameW, {onLeave: function (args) {send("GetMappedFileNameW");}});

var GetMemoryErrorHandlingCapabilities = Module.findExportByName("KernelBase.dll", "GetMemoryErrorHandlingCapabilities")
Interceptor.attach(GetMemoryErrorHandlingCapabilities, {onLeave: function (args) {send("GetMemoryErrorHandlingCapabilities");}});

var GetModuleBaseNameA = Module.findExportByName("KernelBase.dll", "GetModuleBaseNameA")
Interceptor.attach(GetModuleBaseNameA, {onLeave: function (args) {send("GetModuleBaseNameA");}});

var GetModuleBaseNameW = Module.findExportByName("KernelBase.dll", "GetModuleBaseNameW")
Interceptor.attach(GetModuleBaseNameW, {onLeave: function (args) {send("GetModuleBaseNameW");}});

var GetModuleFileNameA = Module.findExportByName("KernelBase.dll", "GetModuleFileNameA")
Interceptor.attach(GetModuleFileNameA, {onLeave: function (args) {send("GetModuleFileNameA");}});

var GetModuleFileNameExA = Module.findExportByName("KernelBase.dll", "GetModuleFileNameExA")
Interceptor.attach(GetModuleFileNameExA, {onLeave: function (args) {send("GetModuleFileNameExA");}});

var GetModuleFileNameExW = Module.findExportByName("KernelBase.dll", "GetModuleFileNameExW")
Interceptor.attach(GetModuleFileNameExW, {onLeave: function (args) {send("GetModuleFileNameExW");}});

var GetModuleFileNameW = Module.findExportByName("KernelBase.dll", "GetModuleFileNameW")
Interceptor.attach(GetModuleFileNameW, {onLeave: function (args) {send("GetModuleFileNameW");}});

var GetModuleHandleA = Module.findExportByName("KernelBase.dll", "GetModuleHandleA")
Interceptor.attach(GetModuleHandleA, {onLeave: function (args) {send("GetModuleHandleA");}});

var GetModuleHandleExA = Module.findExportByName("KernelBase.dll", "GetModuleHandleExA")
Interceptor.attach(GetModuleHandleExA, {onLeave: function (args) {send("GetModuleHandleExA");}});

var GetModuleHandleExW = Module.findExportByName("KernelBase.dll", "GetModuleHandleExW")
Interceptor.attach(GetModuleHandleExW, {onLeave: function (args) {send("GetModuleHandleExW");}});

var GetModuleHandleW = Module.findExportByName("KernelBase.dll", "GetModuleHandleW")
Interceptor.attach(GetModuleHandleW, {onLeave: function (args) {send("GetModuleHandleW");}});

var GetModuleInformation = Module.findExportByName("KernelBase.dll", "GetModuleInformation")
Interceptor.attach(GetModuleInformation, {onLeave: function (args) {send("GetModuleInformation");}});

var GetNLSVersion = Module.findExportByName("KernelBase.dll", "GetNLSVersion")
Interceptor.attach(GetNLSVersion, {onLeave: function (args) {send("GetNLSVersion");}});

var GetNLSVersionEx = Module.findExportByName("KernelBase.dll", "GetNLSVersionEx")
Interceptor.attach(GetNLSVersionEx, {onLeave: function (args) {send("GetNLSVersionEx");}});

var GetNamedLocaleHashNode = Module.findExportByName("KernelBase.dll", "GetNamedLocaleHashNode")
Interceptor.attach(GetNamedLocaleHashNode, {onLeave: function (args) {send("GetNamedLocaleHashNode");}});

var GetNamedPipeAttribute = Module.findExportByName("KernelBase.dll", "GetNamedPipeAttribute")
Interceptor.attach(GetNamedPipeAttribute, {onLeave: function (args) {send("GetNamedPipeAttribute");}});

var GetNamedPipeClientComputerNameW = Module.findExportByName("KernelBase.dll", "GetNamedPipeClientComputerNameW")
Interceptor.attach(GetNamedPipeClientComputerNameW, {onLeave: function (args) {send("GetNamedPipeClientComputerNameW");}});

var GetNamedPipeHandleStateW = Module.findExportByName("KernelBase.dll", "GetNamedPipeHandleStateW")
Interceptor.attach(GetNamedPipeHandleStateW, {onLeave: function (args) {send("GetNamedPipeHandleStateW");}});

var GetNamedPipeInfo = Module.findExportByName("KernelBase.dll", "GetNamedPipeInfo")
Interceptor.attach(GetNamedPipeInfo, {onLeave: function (args) {send("GetNamedPipeInfo");}});

var GetNativeSystemInfo = Module.findExportByName("KernelBase.dll", "GetNativeSystemInfo")
Interceptor.attach(GetNativeSystemInfo, {onLeave: function (args) {send("GetNativeSystemInfo");}});

var GetNextFgPolicyRefreshInfoInternal = Module.findExportByName("KernelBase.dll", "GetNextFgPolicyRefreshInfoInternal")
Interceptor.attach(GetNextFgPolicyRefreshInfoInternal, {onLeave: function (args) {send("GetNextFgPolicyRefreshInfoInternal");}});

var GetNumaHighestNodeNumber = Module.findExportByName("KernelBase.dll", "GetNumaHighestNodeNumber")
Interceptor.attach(GetNumaHighestNodeNumber, {onLeave: function (args) {send("GetNumaHighestNodeNumber");}});

var GetNumaNodeProcessorMask2 = Module.findExportByName("KernelBase.dll", "GetNumaNodeProcessorMask2")
Interceptor.attach(GetNumaNodeProcessorMask2, {onLeave: function (args) {send("GetNumaNodeProcessorMask2");}});

var GetNumaNodeProcessorMaskEx = Module.findExportByName("KernelBase.dll", "GetNumaNodeProcessorMaskEx")
Interceptor.attach(GetNumaNodeProcessorMaskEx, {onLeave: function (args) {send("GetNumaNodeProcessorMaskEx");}});

var GetNumaProximityNodeEx = Module.findExportByName("KernelBase.dll", "GetNumaProximityNodeEx")
Interceptor.attach(GetNumaProximityNodeEx, {onLeave: function (args) {send("GetNumaProximityNodeEx");}});

var GetNumberFormatEx = Module.findExportByName("KernelBase.dll", "GetNumberFormatEx")
Interceptor.attach(GetNumberFormatEx, {onLeave: function (args) {send("GetNumberFormatEx");}});

var GetNumberFormatW = Module.findExportByName("KernelBase.dll", "GetNumberFormatW")
Interceptor.attach(GetNumberFormatW, {onLeave: function (args) {send("GetNumberFormatW");}});

var GetNumberOfConsoleInputEvents = Module.findExportByName("KernelBase.dll", "GetNumberOfConsoleInputEvents")
Interceptor.attach(GetNumberOfConsoleInputEvents, {onLeave: function (args) {send("GetNumberOfConsoleInputEvents");}});

var GetNumberOfConsoleMouseButtons = Module.findExportByName("KernelBase.dll", "GetNumberOfConsoleMouseButtons")
Interceptor.attach(GetNumberOfConsoleMouseButtons, {onLeave: function (args) {send("GetNumberOfConsoleMouseButtons");}});

var GetOEMCP = Module.findExportByName("KernelBase.dll", "GetOEMCP")
Interceptor.attach(GetOEMCP, {onLeave: function (args) {send("GetOEMCP");}});

var GetOsManufacturingMode = Module.findExportByName("KernelBase.dll", "GetOsManufacturingMode")
Interceptor.attach(GetOsManufacturingMode, {onLeave: function (args) {send("GetOsManufacturingMode");}});

var GetOsSafeBootMode = Module.findExportByName("KernelBase.dll", "GetOsSafeBootMode")
Interceptor.attach(GetOsSafeBootMode, {onLeave: function (args) {send("GetOsSafeBootMode");}});

var GetOverlappedResult = Module.findExportByName("KernelBase.dll", "GetOverlappedResult")
Interceptor.attach(GetOverlappedResult, {onLeave: function (args) {send("GetOverlappedResult");}});

var GetOverlappedResultEx = Module.findExportByName("KernelBase.dll", "GetOverlappedResultEx")
Interceptor.attach(GetOverlappedResultEx, {onLeave: function (args) {send("GetOverlappedResultEx");}});

var GetPackageApplicationContext = Module.findExportByName("KernelBase.dll", "GetPackageApplicationContext")
Interceptor.attach(GetPackageApplicationContext, {onLeave: function (args) {send("GetPackageApplicationContext");}});

var GetPackageApplicationIds = Module.findExportByName("KernelBase.dll", "GetPackageApplicationIds")
Interceptor.attach(GetPackageApplicationIds, {onLeave: function (args) {send("GetPackageApplicationIds");}});

var GetPackageApplicationProperty = Module.findExportByName("KernelBase.dll", "GetPackageApplicationProperty")
Interceptor.attach(GetPackageApplicationProperty, {onLeave: function (args) {send("GetPackageApplicationProperty");}});

var GetPackageApplicationPropertyString = Module.findExportByName("KernelBase.dll", "GetPackageApplicationPropertyString")
Interceptor.attach(GetPackageApplicationPropertyString, {onLeave: function (args) {send("GetPackageApplicationPropertyString");}});

var GetPackageApplicationResourcesContext = Module.findExportByName("KernelBase.dll", "GetPackageApplicationResourcesContext")
Interceptor.attach(GetPackageApplicationResourcesContext, {onLeave: function (args) {send("GetPackageApplicationResourcesContext");}});

var GetPackageContext = Module.findExportByName("KernelBase.dll", "GetPackageContext")
Interceptor.attach(GetPackageContext, {onLeave: function (args) {send("GetPackageContext");}});

var GetPackageFamilyName = Module.findExportByName("KernelBase.dll", "GetPackageFamilyName")
Interceptor.attach(GetPackageFamilyName, {onLeave: function (args) {send("GetPackageFamilyName");}});

var GetPackageFamilyNameFromFilePath = Module.findExportByName("KernelBase.dll", "GetPackageFamilyNameFromFilePath")
Interceptor.attach(GetPackageFamilyNameFromFilePath, {onLeave: function (args) {send("GetPackageFamilyNameFromFilePath");}});

var GetPackageFamilyNameFromProgId = Module.findExportByName("KernelBase.dll", "GetPackageFamilyNameFromProgId")
Interceptor.attach(GetPackageFamilyNameFromProgId, {onLeave: function (args) {send("GetPackageFamilyNameFromProgId");}});

var GetPackageFamilyNameFromToken = Module.findExportByName("KernelBase.dll", "GetPackageFamilyNameFromToken")
Interceptor.attach(GetPackageFamilyNameFromToken, {onLeave: function (args) {send("GetPackageFamilyNameFromToken");}});

var GetPackageFullName = Module.findExportByName("KernelBase.dll", "GetPackageFullName")
Interceptor.attach(GetPackageFullName, {onLeave: function (args) {send("GetPackageFullName");}});

var GetPackageFullNameFromToken = Module.findExportByName("KernelBase.dll", "GetPackageFullNameFromToken")
Interceptor.attach(GetPackageFullNameFromToken, {onLeave: function (args) {send("GetPackageFullNameFromToken");}});

var GetPackageGlobalizationContext = Module.findExportByName("KernelBase.dll", "GetPackageGlobalizationContext")
Interceptor.attach(GetPackageGlobalizationContext, {onLeave: function (args) {send("GetPackageGlobalizationContext");}});

var GetPackageGlobalizationProperty = Module.findExportByName("KernelBase.dll", "GetPackageGlobalizationProperty")
Interceptor.attach(GetPackageGlobalizationProperty, {onLeave: function (args) {send("GetPackageGlobalizationProperty");}});

var GetPackageGraphRevisionId = Module.findExportByName("KernelBase.dll", "GetPackageGraphRevisionId")
Interceptor.attach(GetPackageGraphRevisionId, {onLeave: function (args) {send("GetPackageGraphRevisionId");}});

var GetPackageId = Module.findExportByName("KernelBase.dll", "GetPackageId")
Interceptor.attach(GetPackageId, {onLeave: function (args) {send("GetPackageId");}});

var GetPackageInfo = Module.findExportByName("KernelBase.dll", "GetPackageInfo")
Interceptor.attach(GetPackageInfo, {onLeave: function (args) {send("GetPackageInfo");}});

var GetPackageInfo2 = Module.findExportByName("KernelBase.dll", "GetPackageInfo2")
Interceptor.attach(GetPackageInfo2, {onLeave: function (args) {send("GetPackageInfo2");}});

var GetPackageInfo3 = Module.findExportByName("KernelBase.dll", "GetPackageInfo3")
Interceptor.attach(GetPackageInfo3, {onLeave: function (args) {send("GetPackageInfo3");}});

var GetPackageOSMaxVersionTested = Module.findExportByName("KernelBase.dll", "GetPackageOSMaxVersionTested")
Interceptor.attach(GetPackageOSMaxVersionTested, {onLeave: function (args) {send("GetPackageOSMaxVersionTested");}});

var GetPackagePath = Module.findExportByName("KernelBase.dll", "GetPackagePath")
Interceptor.attach(GetPackagePath, {onLeave: function (args) {send("GetPackagePath");}});

var GetPackagePathByFullName = Module.findExportByName("KernelBase.dll", "GetPackagePathByFullName")
Interceptor.attach(GetPackagePathByFullName, {onLeave: function (args) {send("GetPackagePathByFullName");}});

var GetPackagePathByFullName2 = Module.findExportByName("KernelBase.dll", "GetPackagePathByFullName2")
Interceptor.attach(GetPackagePathByFullName2, {onLeave: function (args) {send("GetPackagePathByFullName2");}});

var GetPackagePathOnVolume = Module.findExportByName("KernelBase.dll", "GetPackagePathOnVolume")
Interceptor.attach(GetPackagePathOnVolume, {onLeave: function (args) {send("GetPackagePathOnVolume");}});

var GetPackageProperty = Module.findExportByName("KernelBase.dll", "GetPackageProperty")
Interceptor.attach(GetPackageProperty, {onLeave: function (args) {send("GetPackageProperty");}});

var GetPackagePropertyString = Module.findExportByName("KernelBase.dll", "GetPackagePropertyString")
Interceptor.attach(GetPackagePropertyString, {onLeave: function (args) {send("GetPackagePropertyString");}});

var GetPackageResourcesContext = Module.findExportByName("KernelBase.dll", "GetPackageResourcesContext")
Interceptor.attach(GetPackageResourcesContext, {onLeave: function (args) {send("GetPackageResourcesContext");}});

var GetPackageResourcesProperty = Module.findExportByName("KernelBase.dll", "GetPackageResourcesProperty")
Interceptor.attach(GetPackageResourcesProperty, {onLeave: function (args) {send("GetPackageResourcesProperty");}});

var GetPackageSecurityContext = Module.findExportByName("KernelBase.dll", "GetPackageSecurityContext")
Interceptor.attach(GetPackageSecurityContext, {onLeave: function (args) {send("GetPackageSecurityContext");}});

var GetPackageSecurityProperty = Module.findExportByName("KernelBase.dll", "GetPackageSecurityProperty")
Interceptor.attach(GetPackageSecurityProperty, {onLeave: function (args) {send("GetPackageSecurityProperty");}});

var GetPackageStatus = Module.findExportByName("KernelBase.dll", "GetPackageStatus")
Interceptor.attach(GetPackageStatus, {onLeave: function (args) {send("GetPackageStatus");}});

var GetPackageStatusForUser = Module.findExportByName("KernelBase.dll", "GetPackageStatusForUser")
Interceptor.attach(GetPackageStatusForUser, {onLeave: function (args) {send("GetPackageStatusForUser");}});

var GetPackageStatusForUserSid = Module.findExportByName("KernelBase.dll", "GetPackageStatusForUserSid")
Interceptor.attach(GetPackageStatusForUserSid, {onLeave: function (args) {send("GetPackageStatusForUserSid");}});

var GetPackageTargetPlatformProperty = Module.findExportByName("KernelBase.dll", "GetPackageTargetPlatformProperty")
Interceptor.attach(GetPackageTargetPlatformProperty, {onLeave: function (args) {send("GetPackageTargetPlatformProperty");}});

var GetPackageVolumeSisPath = Module.findExportByName("KernelBase.dll", "GetPackageVolumeSisPath")
Interceptor.attach(GetPackageVolumeSisPath, {onLeave: function (args) {send("GetPackageVolumeSisPath");}});

var GetPackagedDataForFile = Module.findExportByName("KernelBase.dll", "GetPackagedDataForFile")
Interceptor.attach(GetPackagedDataForFile, {onLeave: function (args) {send("GetPackagedDataForFile");}});

var GetPackagesByPackageFamily = Module.findExportByName("KernelBase.dll", "GetPackagesByPackageFamily")
Interceptor.attach(GetPackagesByPackageFamily, {onLeave: function (args) {send("GetPackagesByPackageFamily");}});

var GetPerformanceInfo = Module.findExportByName("KernelBase.dll", "GetPerformanceInfo")
Interceptor.attach(GetPerformanceInfo, {onLeave: function (args) {send("GetPerformanceInfo");}});

var GetPersistedFileLocationW = Module.findExportByName("KernelBase.dll", "GetPersistedFileLocationW")
Interceptor.attach(GetPersistedFileLocationW, {onLeave: function (args) {send("GetPersistedFileLocationW");}});

var GetPersistedRegistryLocationW = Module.findExportByName("KernelBase.dll", "GetPersistedRegistryLocationW")
Interceptor.attach(GetPersistedRegistryLocationW, {onLeave: function (args) {send("GetPersistedRegistryLocationW");}});

var GetPersistedRegistryValueW = Module.findExportByName("KernelBase.dll", "GetPersistedRegistryValueW")
Interceptor.attach(GetPersistedRegistryValueW, {onLeave: function (args) {send("GetPersistedRegistryValueW");}});

var GetPhysicallyInstalledSystemMemory = Module.findExportByName("KernelBase.dll", "GetPhysicallyInstalledSystemMemory")
Interceptor.attach(GetPhysicallyInstalledSystemMemory, {onLeave: function (args) {send("GetPhysicallyInstalledSystemMemory");}});

var GetPreviousFgPolicyRefreshInfoInternal = Module.findExportByName("KernelBase.dll", "GetPreviousFgPolicyRefreshInfoInternal")
Interceptor.attach(GetPreviousFgPolicyRefreshInfoInternal, {onLeave: function (args) {send("GetPreviousFgPolicyRefreshInfoInternal");}});

var GetPriorityClass = Module.findExportByName("KernelBase.dll", "GetPriorityClass")
Interceptor.attach(GetPriorityClass, {onLeave: function (args) {send("GetPriorityClass");}});

var GetPrivateObjectSecurity = Module.findExportByName("KernelBase.dll", "GetPrivateObjectSecurity")
Interceptor.attach(GetPrivateObjectSecurity, {onLeave: function (args) {send("GetPrivateObjectSecurity");}});

var GetProcAddress = Module.findExportByName("KernelBase.dll", "GetProcAddress")
Interceptor.attach(GetProcAddress, {onLeave: function (args) {send("GetProcAddress");}});

var GetProcAddressForCaller = Module.findExportByName("KernelBase.dll", "GetProcAddressForCaller")
Interceptor.attach(GetProcAddressForCaller, {onLeave: function (args) {send("GetProcAddressForCaller");}});

var GetProcessDefaultCpuSetMasks = Module.findExportByName("KernelBase.dll", "GetProcessDefaultCpuSetMasks")
Interceptor.attach(GetProcessDefaultCpuSetMasks, {onLeave: function (args) {send("GetProcessDefaultCpuSetMasks");}});

var GetProcessDefaultCpuSets = Module.findExportByName("KernelBase.dll", "GetProcessDefaultCpuSets")
Interceptor.attach(GetProcessDefaultCpuSets, {onLeave: function (args) {send("GetProcessDefaultCpuSets");}});

var GetProcessGroupAffinity = Module.findExportByName("KernelBase.dll", "GetProcessGroupAffinity")
Interceptor.attach(GetProcessGroupAffinity, {onLeave: function (args) {send("GetProcessGroupAffinity");}});

var GetProcessHandleCount = Module.findExportByName("KernelBase.dll", "GetProcessHandleCount")
Interceptor.attach(GetProcessHandleCount, {onLeave: function (args) {send("GetProcessHandleCount");}});

var GetProcessHeap = Module.findExportByName("KernelBase.dll", "GetProcessHeap")
Interceptor.attach(GetProcessHeap, {onLeave: function (args) {send("GetProcessHeap");}});

var GetProcessHeaps = Module.findExportByName("KernelBase.dll", "GetProcessHeaps")
Interceptor.attach(GetProcessHeaps, {onLeave: function (args) {send("GetProcessHeaps");}});

var GetProcessId = Module.findExportByName("KernelBase.dll", "GetProcessId")
Interceptor.attach(GetProcessId, {onLeave: function (args) {send("GetProcessId");}});

var GetProcessIdOfThread = Module.findExportByName("KernelBase.dll", "GetProcessIdOfThread")
Interceptor.attach(GetProcessIdOfThread, {onLeave: function (args) {send("GetProcessIdOfThread");}});

var GetProcessImageFileNameA = Module.findExportByName("KernelBase.dll", "GetProcessImageFileNameA")
Interceptor.attach(GetProcessImageFileNameA, {onLeave: function (args) {send("GetProcessImageFileNameA");}});

var GetProcessImageFileNameW = Module.findExportByName("KernelBase.dll", "GetProcessImageFileNameW")
Interceptor.attach(GetProcessImageFileNameW, {onLeave: function (args) {send("GetProcessImageFileNameW");}});

var GetProcessInformation = Module.findExportByName("KernelBase.dll", "GetProcessInformation")
Interceptor.attach(GetProcessInformation, {onLeave: function (args) {send("GetProcessInformation");}});

var GetProcessMemoryInfo = Module.findExportByName("KernelBase.dll", "GetProcessMemoryInfo")
Interceptor.attach(GetProcessMemoryInfo, {onLeave: function (args) {send("GetProcessMemoryInfo");}});

var GetProcessMitigationPolicy = Module.findExportByName("KernelBase.dll", "GetProcessMitigationPolicy")
Interceptor.attach(GetProcessMitigationPolicy, {onLeave: function (args) {send("GetProcessMitigationPolicy");}});

var GetProcessPreferredUILanguages = Module.findExportByName("KernelBase.dll", "GetProcessPreferredUILanguages")
Interceptor.attach(GetProcessPreferredUILanguages, {onLeave: function (args) {send("GetProcessPreferredUILanguages");}});

var GetProcessPriorityBoost = Module.findExportByName("KernelBase.dll", "GetProcessPriorityBoost")
Interceptor.attach(GetProcessPriorityBoost, {onLeave: function (args) {send("GetProcessPriorityBoost");}});

var GetProcessShutdownParameters = Module.findExportByName("KernelBase.dll", "GetProcessShutdownParameters")
Interceptor.attach(GetProcessShutdownParameters, {onLeave: function (args) {send("GetProcessShutdownParameters");}});

var GetProcessTimes = Module.findExportByName("KernelBase.dll", "GetProcessTimes")
Interceptor.attach(GetProcessTimes, {onLeave: function (args) {send("GetProcessTimes");}});

var GetProcessVersion = Module.findExportByName("KernelBase.dll", "GetProcessVersion")
Interceptor.attach(GetProcessVersion, {onLeave: function (args) {send("GetProcessVersion");}});

var GetProcessWorkingSetSize = Module.findExportByName("KernelBase.dll", "GetProcessWorkingSetSize")
Interceptor.attach(GetProcessWorkingSetSize, {onLeave: function (args) {send("GetProcessWorkingSetSize");}});

var GetProcessWorkingSetSizeEx = Module.findExportByName("KernelBase.dll", "GetProcessWorkingSetSizeEx")
Interceptor.attach(GetProcessWorkingSetSizeEx, {onLeave: function (args) {send("GetProcessWorkingSetSizeEx");}});

var GetProcessorSystemCycleTime = Module.findExportByName("KernelBase.dll", "GetProcessorSystemCycleTime")
Interceptor.attach(GetProcessorSystemCycleTime, {onLeave: function (args) {send("GetProcessorSystemCycleTime");}});

var GetProductInfo = Module.findExportByName("KernelBase.dll", "GetProductInfo")
Interceptor.attach(GetProductInfo, {onLeave: function (args) {send("GetProductInfo");}});

var GetProtocolAumid = Module.findExportByName("KernelBase.dll", "GetProtocolAumid")
Interceptor.attach(GetProtocolAumid, {onLeave: function (args) {send("GetProtocolAumid");}});

var GetProtocolProperty = Module.findExportByName("KernelBase.dll", "GetProtocolProperty")
Interceptor.attach(GetProtocolProperty, {onLeave: function (args) {send("GetProtocolProperty");}});

var GetPtrCalData = Module.findExportByName("KernelBase.dll", "GetPtrCalData")
Interceptor.attach(GetPtrCalData, {onLeave: function (args) {send("GetPtrCalData");}});

var GetPtrCalDataArray = Module.findExportByName("KernelBase.dll", "GetPtrCalDataArray")
Interceptor.attach(GetPtrCalDataArray, {onLeave: function (args) {send("GetPtrCalDataArray");}});

var GetPublisherCacheFolder = Module.findExportByName("KernelBase.dll", "GetPublisherCacheFolder")
Interceptor.attach(GetPublisherCacheFolder, {onLeave: function (args) {send("GetPublisherCacheFolder");}});

var GetPublisherRootFolder = Module.findExportByName("KernelBase.dll", "GetPublisherRootFolder")
Interceptor.attach(GetPublisherRootFolder, {onLeave: function (args) {send("GetPublisherRootFolder");}});

var GetQueuedCompletionStatus = Module.findExportByName("KernelBase.dll", "GetQueuedCompletionStatus")
Interceptor.attach(GetQueuedCompletionStatus, {onLeave: function (args) {send("GetQueuedCompletionStatus");}});

var GetQueuedCompletionStatusEx = Module.findExportByName("KernelBase.dll", "GetQueuedCompletionStatusEx")
Interceptor.attach(GetQueuedCompletionStatusEx, {onLeave: function (args) {send("GetQueuedCompletionStatusEx");}});

var GetRegistryExtensionFlags = Module.findExportByName("KernelBase.dll", "GetRegistryExtensionFlags")
Interceptor.attach(GetRegistryExtensionFlags, {onLeave: function (args) {send("GetRegistryExtensionFlags");}});

var GetRegistryValueWithFallbackW = Module.findExportByName("KernelBase.dll", "GetRegistryValueWithFallbackW")
Interceptor.attach(GetRegistryValueWithFallbackW, {onLeave: function (args) {send("GetRegistryValueWithFallbackW");}});

var GetResolvedPackageFullNameForPackageDependency = Module.findExportByName("KernelBase.dll", "GetResolvedPackageFullNameForPackageDependency")
Interceptor.attach(GetResolvedPackageFullNameForPackageDependency, {onLeave: function (args) {send("GetResolvedPackageFullNameForPackageDependency");}});

var GetRoamingLastObservedChangeTime = Module.findExportByName("KernelBase.dll", "GetRoamingLastObservedChangeTime")
Interceptor.attach(GetRoamingLastObservedChangeTime, {onLeave: function (args) {send("GetRoamingLastObservedChangeTime");}});

var GetSecureSystemAppDataFolder = Module.findExportByName("KernelBase.dll", "GetSecureSystemAppDataFolder")
Interceptor.attach(GetSecureSystemAppDataFolder, {onLeave: function (args) {send("GetSecureSystemAppDataFolder");}});

var GetSecurityDescriptorControl = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorControl")
Interceptor.attach(GetSecurityDescriptorControl, {onLeave: function (args) {send("GetSecurityDescriptorControl");}});

var GetSecurityDescriptorDacl = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorDacl")
Interceptor.attach(GetSecurityDescriptorDacl, {onLeave: function (args) {send("GetSecurityDescriptorDacl");}});

var GetSecurityDescriptorGroup = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorGroup")
Interceptor.attach(GetSecurityDescriptorGroup, {onLeave: function (args) {send("GetSecurityDescriptorGroup");}});

var GetSecurityDescriptorLength = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorLength")
Interceptor.attach(GetSecurityDescriptorLength, {onLeave: function (args) {send("GetSecurityDescriptorLength");}});

var GetSecurityDescriptorOwner = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorOwner")
Interceptor.attach(GetSecurityDescriptorOwner, {onLeave: function (args) {send("GetSecurityDescriptorOwner");}});

var GetSecurityDescriptorRMControl = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorRMControl")
Interceptor.attach(GetSecurityDescriptorRMControl, {onLeave: function (args) {send("GetSecurityDescriptorRMControl");}});

var GetSecurityDescriptorSacl = Module.findExportByName("KernelBase.dll", "GetSecurityDescriptorSacl")
Interceptor.attach(GetSecurityDescriptorSacl, {onLeave: function (args) {send("GetSecurityDescriptorSacl");}});

var GetSerializedAtomBytes = Module.findExportByName("KernelBase.dll", "GetSerializedAtomBytes")
Interceptor.attach(GetSerializedAtomBytes, {onLeave: function (args) {send("GetSerializedAtomBytes");}});

var GetSharedLocalFolder = Module.findExportByName("KernelBase.dll", "GetSharedLocalFolder")
Interceptor.attach(GetSharedLocalFolder, {onLeave: function (args) {send("GetSharedLocalFolder");}});

var GetShortPathNameW = Module.findExportByName("KernelBase.dll", "GetShortPathNameW")
Interceptor.attach(GetShortPathNameW, {onLeave: function (args) {send("GetShortPathNameW");}});

var GetSidIdentifierAuthority = Module.findExportByName("KernelBase.dll", "GetSidIdentifierAuthority")
Interceptor.attach(GetSidIdentifierAuthority, {onLeave: function (args) {send("GetSidIdentifierAuthority");}});

var GetSidLengthRequired = Module.findExportByName("KernelBase.dll", "GetSidLengthRequired")
Interceptor.attach(GetSidLengthRequired, {onLeave: function (args) {send("GetSidLengthRequired");}});

var GetSidSubAuthority = Module.findExportByName("KernelBase.dll", "GetSidSubAuthority")
Interceptor.attach(GetSidSubAuthority, {onLeave: function (args) {send("GetSidSubAuthority");}});

var GetSidSubAuthorityCount = Module.findExportByName("KernelBase.dll", "GetSidSubAuthorityCount")
Interceptor.attach(GetSidSubAuthorityCount, {onLeave: function (args) {send("GetSidSubAuthorityCount");}});

var GetStagedPackageOrigin = Module.findExportByName("KernelBase.dll", "GetStagedPackageOrigin")
Interceptor.attach(GetStagedPackageOrigin, {onLeave: function (args) {send("GetStagedPackageOrigin");}});

var GetStagedPackagePathByFullName = Module.findExportByName("KernelBase.dll", "GetStagedPackagePathByFullName")
Interceptor.attach(GetStagedPackagePathByFullName, {onLeave: function (args) {send("GetStagedPackagePathByFullName");}});

var GetStagedPackagePathByFullName2 = Module.findExportByName("KernelBase.dll", "GetStagedPackagePathByFullName2")
Interceptor.attach(GetStagedPackagePathByFullName2, {onLeave: function (args) {send("GetStagedPackagePathByFullName2");}});

var GetStartupInfoW = Module.findExportByName("KernelBase.dll", "GetStartupInfoW")
Interceptor.attach(GetStartupInfoW, {onLeave: function (args) {send("GetStartupInfoW");}});

var GetStateContainerDepth = Module.findExportByName("KernelBase.dll", "GetStateContainerDepth")
Interceptor.attach(GetStateContainerDepth, {onLeave: function (args) {send("GetStateContainerDepth");}});

var GetStateFolder = Module.findExportByName("KernelBase.dll", "GetStateFolder")
Interceptor.attach(GetStateFolder, {onLeave: function (args) {send("GetStateFolder");}});

var GetStateRootFolder = Module.findExportByName("KernelBase.dll", "GetStateRootFolder")
Interceptor.attach(GetStateRootFolder, {onLeave: function (args) {send("GetStateRootFolder");}});

var GetStateRootFolderBase = Module.findExportByName("KernelBase.dll", "GetStateRootFolderBase")
Interceptor.attach(GetStateRootFolderBase, {onLeave: function (args) {send("GetStateRootFolderBase");}});

var GetStateSettingsFolder = Module.findExportByName("KernelBase.dll", "GetStateSettingsFolder")
Interceptor.attach(GetStateSettingsFolder, {onLeave: function (args) {send("GetStateSettingsFolder");}});

var GetStateVersion = Module.findExportByName("KernelBase.dll", "GetStateVersion")
Interceptor.attach(GetStateVersion, {onLeave: function (args) {send("GetStateVersion");}});

var GetStdHandle = Module.findExportByName("KernelBase.dll", "GetStdHandle")
Interceptor.attach(GetStdHandle, {onLeave: function (args) {send("GetStdHandle");}});

var GetStringScripts = Module.findExportByName("KernelBase.dll", "GetStringScripts")
Interceptor.attach(GetStringScripts, {onLeave: function (args) {send("GetStringScripts");}});

var GetStringTableEntry = Module.findExportByName("KernelBase.dll", "GetStringTableEntry")
Interceptor.attach(GetStringTableEntry, {onLeave: function (args) {send("GetStringTableEntry");}});

var GetStringTypeA = Module.findExportByName("KernelBase.dll", "GetStringTypeA")
Interceptor.attach(GetStringTypeA, {onLeave: function (args) {send("GetStringTypeA");}});

var GetStringTypeExW = Module.findExportByName("KernelBase.dll", "GetStringTypeExW")
Interceptor.attach(GetStringTypeExW, {onLeave: function (args) {send("GetStringTypeExW");}});

var GetStringTypeW = Module.findExportByName("KernelBase.dll", "GetStringTypeW")
Interceptor.attach(GetStringTypeW, {onLeave: function (args) {send("GetStringTypeW");}});

var GetSystemAppDataFolder = Module.findExportByName("KernelBase.dll", "GetSystemAppDataFolder")
Interceptor.attach(GetSystemAppDataFolder, {onLeave: function (args) {send("GetSystemAppDataFolder");}});

var GetSystemAppDataKey = Module.findExportByName("KernelBase.dll", "GetSystemAppDataKey")
Interceptor.attach(GetSystemAppDataKey, {onLeave: function (args) {send("GetSystemAppDataKey");}});

var GetSystemCpuSetInformation = Module.findExportByName("KernelBase.dll", "GetSystemCpuSetInformation")
Interceptor.attach(GetSystemCpuSetInformation, {onLeave: function (args) {send("GetSystemCpuSetInformation");}});

var GetSystemDefaultLCID = Module.findExportByName("KernelBase.dll", "GetSystemDefaultLCID")
Interceptor.attach(GetSystemDefaultLCID, {onLeave: function (args) {send("GetSystemDefaultLCID");}});

var GetSystemDefaultLangID = Module.findExportByName("KernelBase.dll", "GetSystemDefaultLangID")
Interceptor.attach(GetSystemDefaultLangID, {onLeave: function (args) {send("GetSystemDefaultLangID");}});

var GetSystemDefaultLocaleName = Module.findExportByName("KernelBase.dll", "GetSystemDefaultLocaleName")
Interceptor.attach(GetSystemDefaultLocaleName, {onLeave: function (args) {send("GetSystemDefaultLocaleName");}});

var GetSystemDefaultUILanguage = Module.findExportByName("KernelBase.dll", "GetSystemDefaultUILanguage")
Interceptor.attach(GetSystemDefaultUILanguage, {onLeave: function (args) {send("GetSystemDefaultUILanguage");}});

var GetSystemDirectoryA = Module.findExportByName("KernelBase.dll", "GetSystemDirectoryA")
Interceptor.attach(GetSystemDirectoryA, {onLeave: function (args) {send("GetSystemDirectoryA");}});

var GetSystemDirectoryW = Module.findExportByName("KernelBase.dll", "GetSystemDirectoryW")
Interceptor.attach(GetSystemDirectoryW, {onLeave: function (args) {send("GetSystemDirectoryW");}});

var GetSystemFileCacheSize = Module.findExportByName("KernelBase.dll", "GetSystemFileCacheSize")
Interceptor.attach(GetSystemFileCacheSize, {onLeave: function (args) {send("GetSystemFileCacheSize");}});

var GetSystemFirmwareTable = Module.findExportByName("KernelBase.dll", "GetSystemFirmwareTable")
Interceptor.attach(GetSystemFirmwareTable, {onLeave: function (args) {send("GetSystemFirmwareTable");}});

var GetSystemInfo = Module.findExportByName("KernelBase.dll", "GetSystemInfo")
Interceptor.attach(GetSystemInfo, {onLeave: function (args) {send("GetSystemInfo");}});

var GetSystemLeapSecondInformation = Module.findExportByName("KernelBase.dll", "GetSystemLeapSecondInformation")
Interceptor.attach(GetSystemLeapSecondInformation, {onLeave: function (args) {send("GetSystemLeapSecondInformation");}});

var GetSystemMetadataPath = Module.findExportByName("KernelBase.dll", "GetSystemMetadataPath")
Interceptor.attach(GetSystemMetadataPath, {onLeave: function (args) {send("GetSystemMetadataPath");}});

var GetSystemMetadataPathForPackage = Module.findExportByName("KernelBase.dll", "GetSystemMetadataPathForPackage")
Interceptor.attach(GetSystemMetadataPathForPackage, {onLeave: function (args) {send("GetSystemMetadataPathForPackage");}});

var GetSystemMetadataPathForPackageFamily = Module.findExportByName("KernelBase.dll", "GetSystemMetadataPathForPackageFamily")
Interceptor.attach(GetSystemMetadataPathForPackageFamily, {onLeave: function (args) {send("GetSystemMetadataPathForPackageFamily");}});

var GetSystemPreferredUILanguages = Module.findExportByName("KernelBase.dll", "GetSystemPreferredUILanguages")
Interceptor.attach(GetSystemPreferredUILanguages, {onLeave: function (args) {send("GetSystemPreferredUILanguages");}});

var GetSystemStateRootFolder = Module.findExportByName("KernelBase.dll", "GetSystemStateRootFolder")
Interceptor.attach(GetSystemStateRootFolder, {onLeave: function (args) {send("GetSystemStateRootFolder");}});

var GetSystemTime = Module.findExportByName("KernelBase.dll", "GetSystemTime")
Interceptor.attach(GetSystemTime, {onLeave: function (args) {send("GetSystemTime");}});

var GetSystemTimeAdjustment = Module.findExportByName("KernelBase.dll", "GetSystemTimeAdjustment")
Interceptor.attach(GetSystemTimeAdjustment, {onLeave: function (args) {send("GetSystemTimeAdjustment");}});

var GetSystemTimeAdjustmentPrecise = Module.findExportByName("KernelBase.dll", "GetSystemTimeAdjustmentPrecise")
Interceptor.attach(GetSystemTimeAdjustmentPrecise, {onLeave: function (args) {send("GetSystemTimeAdjustmentPrecise");}});

var GetSystemTimeAsFileTime = Module.findExportByName("KernelBase.dll", "GetSystemTimeAsFileTime")
Interceptor.attach(GetSystemTimeAsFileTime, {onLeave: function (args) {send("GetSystemTimeAsFileTime");}});

var GetSystemTimePreciseAsFileTime = Module.findExportByName("KernelBase.dll", "GetSystemTimePreciseAsFileTime")
Interceptor.attach(GetSystemTimePreciseAsFileTime, {onLeave: function (args) {send("GetSystemTimePreciseAsFileTime");}});

var GetSystemTimes = Module.findExportByName("KernelBase.dll", "GetSystemTimes")
Interceptor.attach(GetSystemTimes, {onLeave: function (args) {send("GetSystemTimes");}});

var GetSystemWindowsDirectoryA = Module.findExportByName("KernelBase.dll", "GetSystemWindowsDirectoryA")
Interceptor.attach(GetSystemWindowsDirectoryA, {onLeave: function (args) {send("GetSystemWindowsDirectoryA");}});

var GetSystemWindowsDirectoryW = Module.findExportByName("KernelBase.dll", "GetSystemWindowsDirectoryW")
Interceptor.attach(GetSystemWindowsDirectoryW, {onLeave: function (args) {send("GetSystemWindowsDirectoryW");}});

var GetSystemWow64Directory2A = Module.findExportByName("KernelBase.dll", "GetSystemWow64Directory2A")
Interceptor.attach(GetSystemWow64Directory2A, {onLeave: function (args) {send("GetSystemWow64Directory2A");}});

var GetSystemWow64Directory2W = Module.findExportByName("KernelBase.dll", "GetSystemWow64Directory2W")
Interceptor.attach(GetSystemWow64Directory2W, {onLeave: function (args) {send("GetSystemWow64Directory2W");}});

var GetSystemWow64DirectoryA = Module.findExportByName("KernelBase.dll", "GetSystemWow64DirectoryA")
Interceptor.attach(GetSystemWow64DirectoryA, {onLeave: function (args) {send("GetSystemWow64DirectoryA");}});

var GetSystemWow64DirectoryW = Module.findExportByName("KernelBase.dll", "GetSystemWow64DirectoryW")
Interceptor.attach(GetSystemWow64DirectoryW, {onLeave: function (args) {send("GetSystemWow64DirectoryW");}});

var GetTargetPlatformContext = Module.findExportByName("KernelBase.dll", "GetTargetPlatformContext")
Interceptor.attach(GetTargetPlatformContext, {onLeave: function (args) {send("GetTargetPlatformContext");}});

var GetTempFileNameA = Module.findExportByName("KernelBase.dll", "GetTempFileNameA")
Interceptor.attach(GetTempFileNameA, {onLeave: function (args) {send("GetTempFileNameA");}});

var GetTempFileNameW = Module.findExportByName("KernelBase.dll", "GetTempFileNameW")
Interceptor.attach(GetTempFileNameW, {onLeave: function (args) {send("GetTempFileNameW");}});

var GetTempPath2A = Module.findExportByName("KernelBase.dll", "GetTempPath2A")
Interceptor.attach(GetTempPath2A, {onLeave: function (args) {send("GetTempPath2A");}});

var GetTempPath2W = Module.findExportByName("KernelBase.dll", "GetTempPath2W")
Interceptor.attach(GetTempPath2W, {onLeave: function (args) {send("GetTempPath2W");}});

var GetTempPathA = Module.findExportByName("KernelBase.dll", "GetTempPathA")
Interceptor.attach(GetTempPathA, {onLeave: function (args) {send("GetTempPathA");}});

var GetTempPathW = Module.findExportByName("KernelBase.dll", "GetTempPathW")
Interceptor.attach(GetTempPathW, {onLeave: function (args) {send("GetTempPathW");}});

var GetThreadContext = Module.findExportByName("KernelBase.dll", "GetThreadContext")
Interceptor.attach(GetThreadContext, {onLeave: function (args) {send("GetThreadContext");}});

var GetThreadDescription = Module.findExportByName("KernelBase.dll", "GetThreadDescription")
Interceptor.attach(GetThreadDescription, {onLeave: function (args) {send("GetThreadDescription");}});

var GetThreadEnabledXStateFeatures = Module.findExportByName("KernelBase.dll", "GetThreadEnabledXStateFeatures")
Interceptor.attach(GetThreadEnabledXStateFeatures, {onLeave: function (args) {send("GetThreadEnabledXStateFeatures");}});

var GetThreadErrorMode = Module.findExportByName("KernelBase.dll", "GetThreadErrorMode")
Interceptor.attach(GetThreadErrorMode, {onLeave: function (args) {send("GetThreadErrorMode");}});

var GetThreadGroupAffinity = Module.findExportByName("KernelBase.dll", "GetThreadGroupAffinity")
Interceptor.attach(GetThreadGroupAffinity, {onLeave: function (args) {send("GetThreadGroupAffinity");}});

var GetThreadIOPendingFlag = Module.findExportByName("KernelBase.dll", "GetThreadIOPendingFlag")
Interceptor.attach(GetThreadIOPendingFlag, {onLeave: function (args) {send("GetThreadIOPendingFlag");}});

var GetThreadId = Module.findExportByName("KernelBase.dll", "GetThreadId")
Interceptor.attach(GetThreadId, {onLeave: function (args) {send("GetThreadId");}});

var GetThreadIdealProcessorEx = Module.findExportByName("KernelBase.dll", "GetThreadIdealProcessorEx")
Interceptor.attach(GetThreadIdealProcessorEx, {onLeave: function (args) {send("GetThreadIdealProcessorEx");}});

var GetThreadInformation = Module.findExportByName("KernelBase.dll", "GetThreadInformation")
Interceptor.attach(GetThreadInformation, {onLeave: function (args) {send("GetThreadInformation");}});

var GetThreadLocale = Module.findExportByName("KernelBase.dll", "GetThreadLocale")
Interceptor.attach(GetThreadLocale, {onLeave: function (args) {send("GetThreadLocale");}});

var GetThreadPreferredUILanguages = Module.findExportByName("KernelBase.dll", "GetThreadPreferredUILanguages")
Interceptor.attach(GetThreadPreferredUILanguages, {onLeave: function (args) {send("GetThreadPreferredUILanguages");}});

var GetThreadPriority = Module.findExportByName("KernelBase.dll", "GetThreadPriority")
Interceptor.attach(GetThreadPriority, {onLeave: function (args) {send("GetThreadPriority");}});

var GetThreadPriorityBoost = Module.findExportByName("KernelBase.dll", "GetThreadPriorityBoost")
Interceptor.attach(GetThreadPriorityBoost, {onLeave: function (args) {send("GetThreadPriorityBoost");}});

var GetThreadSelectedCpuSetMasks = Module.findExportByName("KernelBase.dll", "GetThreadSelectedCpuSetMasks")
Interceptor.attach(GetThreadSelectedCpuSetMasks, {onLeave: function (args) {send("GetThreadSelectedCpuSetMasks");}});

var GetThreadSelectedCpuSets = Module.findExportByName("KernelBase.dll", "GetThreadSelectedCpuSets")
Interceptor.attach(GetThreadSelectedCpuSets, {onLeave: function (args) {send("GetThreadSelectedCpuSets");}});

var GetThreadTimes = Module.findExportByName("KernelBase.dll", "GetThreadTimes")
Interceptor.attach(GetThreadTimes, {onLeave: function (args) {send("GetThreadTimes");}});

var GetThreadUILanguage = Module.findExportByName("KernelBase.dll", "GetThreadUILanguage")
Interceptor.attach(GetThreadUILanguage, {onLeave: function (args) {send("GetThreadUILanguage");}});

var GetTickCount = Module.findExportByName("KernelBase.dll", "GetTickCount")
Interceptor.attach(GetTickCount, {onLeave: function (args) {send("GetTickCount");}});

var GetTickCount64 = Module.findExportByName("KernelBase.dll", "GetTickCount64")
Interceptor.attach(GetTickCount64, {onLeave: function (args) {send("GetTickCount64");}});

var GetTimeFormatA = Module.findExportByName("KernelBase.dll", "GetTimeFormatA")
Interceptor.attach(GetTimeFormatA, {onLeave: function (args) {send("GetTimeFormatA");}});

var GetTimeFormatEx = Module.findExportByName("KernelBase.dll", "GetTimeFormatEx")
Interceptor.attach(GetTimeFormatEx, {onLeave: function (args) {send("GetTimeFormatEx");}});

var GetTimeFormatW = Module.findExportByName("KernelBase.dll", "GetTimeFormatW")
Interceptor.attach(GetTimeFormatW, {onLeave: function (args) {send("GetTimeFormatW");}});

var GetTimeZoneInformation = Module.findExportByName("KernelBase.dll", "GetTimeZoneInformation")
Interceptor.attach(GetTimeZoneInformation, {onLeave: function (args) {send("GetTimeZoneInformation");}});

var GetTimeZoneInformationForYear = Module.findExportByName("KernelBase.dll", "GetTimeZoneInformationForYear")
Interceptor.attach(GetTimeZoneInformationForYear, {onLeave: function (args) {send("GetTimeZoneInformationForYear");}});

var GetTokenInformation = Module.findExportByName("KernelBase.dll", "GetTokenInformation")
Interceptor.attach(GetTokenInformation, {onLeave: function (args) {send("GetTokenInformation");}});

var GetTraceEnableFlags = Module.findExportByName("KernelBase.dll", "GetTraceEnableFlags")
Interceptor.attach(GetTraceEnableFlags, {onLeave: function (args) {send("GetTraceEnableFlags");}});

var GetTraceEnableLevel = Module.findExportByName("KernelBase.dll", "GetTraceEnableLevel")
Interceptor.attach(GetTraceEnableLevel, {onLeave: function (args) {send("GetTraceEnableLevel");}});

var GetTraceLoggerHandle = Module.findExportByName("KernelBase.dll", "GetTraceLoggerHandle")
Interceptor.attach(GetTraceLoggerHandle, {onLeave: function (args) {send("GetTraceLoggerHandle");}});

var GetUILanguageInfo = Module.findExportByName("KernelBase.dll", "GetUILanguageInfo")
Interceptor.attach(GetUILanguageInfo, {onLeave: function (args) {send("GetUILanguageInfo");}});

var GetUnicodeStringToEightBitSizeRoutine = Module.findExportByName("KernelBase.dll", "GetUnicodeStringToEightBitSizeRoutine")
Interceptor.attach(GetUnicodeStringToEightBitSizeRoutine, {onLeave: function (args) {send("GetUnicodeStringToEightBitSizeRoutine");}});

var GetUnicodeStringToEightBitStringRoutine = Module.findExportByName("KernelBase.dll", "GetUnicodeStringToEightBitStringRoutine")
Interceptor.attach(GetUnicodeStringToEightBitStringRoutine, {onLeave: function (args) {send("GetUnicodeStringToEightBitStringRoutine");}});

var GetUserDefaultGeoName = Module.findExportByName("KernelBase.dll", "GetUserDefaultGeoName")
Interceptor.attach(GetUserDefaultGeoName, {onLeave: function (args) {send("GetUserDefaultGeoName");}});

var GetUserDefaultLCID = Module.findExportByName("KernelBase.dll", "GetUserDefaultLCID")
Interceptor.attach(GetUserDefaultLCID, {onLeave: function (args) {send("GetUserDefaultLCID");}});

var GetUserDefaultLangID = Module.findExportByName("KernelBase.dll", "GetUserDefaultLangID")
Interceptor.attach(GetUserDefaultLangID, {onLeave: function (args) {send("GetUserDefaultLangID");}});

var GetUserDefaultLocaleName = Module.findExportByName("KernelBase.dll", "GetUserDefaultLocaleName")
Interceptor.attach(GetUserDefaultLocaleName, {onLeave: function (args) {send("GetUserDefaultLocaleName");}});

var GetUserDefaultUILanguage = Module.findExportByName("KernelBase.dll", "GetUserDefaultUILanguage")
Interceptor.attach(GetUserDefaultUILanguage, {onLeave: function (args) {send("GetUserDefaultUILanguage");}});

var GetUserGeoID = Module.findExportByName("KernelBase.dll", "GetUserGeoID")
Interceptor.attach(GetUserGeoID, {onLeave: function (args) {send("GetUserGeoID");}});

var GetUserInfo = Module.findExportByName("KernelBase.dll", "GetUserInfo")
Interceptor.attach(GetUserInfo, {onLeave: function (args) {send("GetUserInfo");}});

var GetUserInfoWord = Module.findExportByName("KernelBase.dll", "GetUserInfoWord")
Interceptor.attach(GetUserInfoWord, {onLeave: function (args) {send("GetUserInfoWord");}});

var GetUserOverrideString = Module.findExportByName("KernelBase.dll", "GetUserOverrideString")
Interceptor.attach(GetUserOverrideString, {onLeave: function (args) {send("GetUserOverrideString");}});

var GetUserOverrideWord = Module.findExportByName("KernelBase.dll", "GetUserOverrideWord")
Interceptor.attach(GetUserOverrideWord, {onLeave: function (args) {send("GetUserOverrideWord");}});

var GetUserPreferredUILanguages = Module.findExportByName("KernelBase.dll", "GetUserPreferredUILanguages")
Interceptor.attach(GetUserPreferredUILanguages, {onLeave: function (args) {send("GetUserPreferredUILanguages");}});

var GetVersion = Module.findExportByName("KernelBase.dll", "GetVersion")
Interceptor.attach(GetVersion, {onLeave: function (args) {send("GetVersion");}});

var GetVersionExA = Module.findExportByName("KernelBase.dll", "GetVersionExA")
Interceptor.attach(GetVersionExA, {onLeave: function (args) {send("GetVersionExA");}});

var GetVersionExW = Module.findExportByName("KernelBase.dll", "GetVersionExW")
Interceptor.attach(GetVersionExW, {onLeave: function (args) {send("GetVersionExW");}});

var GetVolumeInformationA = Module.findExportByName("KernelBase.dll", "GetVolumeInformationA")
Interceptor.attach(GetVolumeInformationA, {onLeave: function (args) {send("GetVolumeInformationA");}});

var GetVolumeInformationByHandleW = Module.findExportByName("KernelBase.dll", "GetVolumeInformationByHandleW")
Interceptor.attach(GetVolumeInformationByHandleW, {onLeave: function (args) {send("GetVolumeInformationByHandleW");}});

var GetVolumeInformationW = Module.findExportByName("KernelBase.dll", "GetVolumeInformationW")
Interceptor.attach(GetVolumeInformationW, {onLeave: function (args) {send("GetVolumeInformationW");}});

var GetVolumeNameForVolumeMountPointW = Module.findExportByName("KernelBase.dll", "GetVolumeNameForVolumeMountPointW")
Interceptor.attach(GetVolumeNameForVolumeMountPointW, {onLeave: function (args) {send("GetVolumeNameForVolumeMountPointW");}});

var GetVolumePathNameW = Module.findExportByName("KernelBase.dll", "GetVolumePathNameW")
Interceptor.attach(GetVolumePathNameW, {onLeave: function (args) {send("GetVolumePathNameW");}});

var GetVolumePathNamesForVolumeNameW = Module.findExportByName("KernelBase.dll", "GetVolumePathNamesForVolumeNameW")
Interceptor.attach(GetVolumePathNamesForVolumeNameW, {onLeave: function (args) {send("GetVolumePathNamesForVolumeNameW");}});

var GetWindowsAccountDomainSid = Module.findExportByName("KernelBase.dll", "GetWindowsAccountDomainSid")
Interceptor.attach(GetWindowsAccountDomainSid, {onLeave: function (args) {send("GetWindowsAccountDomainSid");}});

var GetWindowsDirectoryA = Module.findExportByName("KernelBase.dll", "GetWindowsDirectoryA")
Interceptor.attach(GetWindowsDirectoryA, {onLeave: function (args) {send("GetWindowsDirectoryA");}});

var GetWindowsDirectoryW = Module.findExportByName("KernelBase.dll", "GetWindowsDirectoryW")
Interceptor.attach(GetWindowsDirectoryW, {onLeave: function (args) {send("GetWindowsDirectoryW");}});

var GetWriteWatch = Module.findExportByName("KernelBase.dll", "GetWriteWatch")
Interceptor.attach(GetWriteWatch, {onLeave: function (args) {send("GetWriteWatch");}});

var GetWsChanges = Module.findExportByName("KernelBase.dll", "GetWsChanges")
Interceptor.attach(GetWsChanges, {onLeave: function (args) {send("GetWsChanges");}});

var GetWsChangesEx = Module.findExportByName("KernelBase.dll", "GetWsChangesEx")
Interceptor.attach(GetWsChangesEx, {onLeave: function (args) {send("GetWsChangesEx");}});

var GetXStateFeaturesMask = Module.findExportByName("KernelBase.dll", "GetXStateFeaturesMask")
Interceptor.attach(GetXStateFeaturesMask, {onLeave: function (args) {send("GetXStateFeaturesMask");}});

var GlobalAlloc = Module.findExportByName("KernelBase.dll", "GlobalAlloc")
Interceptor.attach(GlobalAlloc, {onLeave: function (args) {send("GlobalAlloc");}});

var GlobalFlags = Module.findExportByName("KernelBase.dll", "GlobalFlags")
Interceptor.attach(GlobalFlags, {onLeave: function (args) {send("GlobalFlags");}});

var GlobalFree = Module.findExportByName("KernelBase.dll", "GlobalFree")
Interceptor.attach(GlobalFree, {onLeave: function (args) {send("GlobalFree");}});

var GlobalHandle = Module.findExportByName("KernelBase.dll", "GlobalHandle")
Interceptor.attach(GlobalHandle, {onLeave: function (args) {send("GlobalHandle");}});

var GlobalLock = Module.findExportByName("KernelBase.dll", "GlobalLock")
Interceptor.attach(GlobalLock, {onLeave: function (args) {send("GlobalLock");}});

var GlobalMemoryStatusEx = Module.findExportByName("KernelBase.dll", "GlobalMemoryStatusEx")
Interceptor.attach(GlobalMemoryStatusEx, {onLeave: function (args) {send("GlobalMemoryStatusEx");}});

var GlobalReAlloc = Module.findExportByName("KernelBase.dll", "GlobalReAlloc")
Interceptor.attach(GlobalReAlloc, {onLeave: function (args) {send("GlobalReAlloc");}});

var GlobalSize = Module.findExportByName("KernelBase.dll", "GlobalSize")
Interceptor.attach(GlobalSize, {onLeave: function (args) {send("GlobalSize");}});

var GlobalUnlock = Module.findExportByName("KernelBase.dll", "GlobalUnlock")
Interceptor.attach(GlobalUnlock, {onLeave: function (args) {send("GlobalUnlock");}});

var GuardCheckLongJumpTarget = Module.findExportByName("KernelBase.dll", "GuardCheckLongJumpTarget")
Interceptor.attach(GuardCheckLongJumpTarget, {onLeave: function (args) {send("GuardCheckLongJumpTarget");}});

var HasPolicyForegroundProcessingCompletedInternal = Module.findExportByName("KernelBase.dll", "HasPolicyForegroundProcessingCompletedInternal")
Interceptor.attach(HasPolicyForegroundProcessingCompletedInternal, {onLeave: function (args) {send("HasPolicyForegroundProcessingCompletedInternal");}});

var HashData = Module.findExportByName("KernelBase.dll", "HashData")
Interceptor.attach(HashData, {onLeave: function (args) {send("HashData");}});

var HeapAlloc = Module.findExportByName("KernelBase.dll", "HeapAlloc")
Interceptor.attach(HeapAlloc, {onLeave: function (args) {send("HeapAlloc");}});

var HeapCompact = Module.findExportByName("KernelBase.dll", "HeapCompact")
Interceptor.attach(HeapCompact, {onLeave: function (args) {send("HeapCompact");}});

var HeapCreate = Module.findExportByName("KernelBase.dll", "HeapCreate")
Interceptor.attach(HeapCreate, {onLeave: function (args) {send("HeapCreate");}});

var HeapDestroy = Module.findExportByName("KernelBase.dll", "HeapDestroy")
Interceptor.attach(HeapDestroy, {onLeave: function (args) {send("HeapDestroy");}});

var HeapFree = Module.findExportByName("KernelBase.dll", "HeapFree")
Interceptor.attach(HeapFree, {onLeave: function (args) {send("HeapFree");}});

var HeapLock = Module.findExportByName("KernelBase.dll", "HeapLock")
Interceptor.attach(HeapLock, {onLeave: function (args) {send("HeapLock");}});

var HeapQueryInformation = Module.findExportByName("KernelBase.dll", "HeapQueryInformation")
Interceptor.attach(HeapQueryInformation, {onLeave: function (args) {send("HeapQueryInformation");}});

var HeapReAlloc = Module.findExportByName("KernelBase.dll", "HeapReAlloc")
Interceptor.attach(HeapReAlloc, {onLeave: function (args) {send("HeapReAlloc");}});

var HeapSetInformation = Module.findExportByName("KernelBase.dll", "HeapSetInformation")
Interceptor.attach(HeapSetInformation, {onLeave: function (args) {send("HeapSetInformation");}});

var HeapSize = Module.findExportByName("KernelBase.dll", "HeapSize")
Interceptor.attach(HeapSize, {onLeave: function (args) {send("HeapSize");}});

var HeapSummary = Module.findExportByName("KernelBase.dll", "HeapSummary")
Interceptor.attach(HeapSummary, {onLeave: function (args) {send("HeapSummary");}});

var HeapUnlock = Module.findExportByName("KernelBase.dll", "HeapUnlock")
Interceptor.attach(HeapUnlock, {onLeave: function (args) {send("HeapUnlock");}});

var HeapValidate = Module.findExportByName("KernelBase.dll", "HeapValidate")
Interceptor.attach(HeapValidate, {onLeave: function (args) {send("HeapValidate");}});

var HeapWalk = Module.findExportByName("KernelBase.dll", "HeapWalk")
Interceptor.attach(HeapWalk, {onLeave: function (args) {send("HeapWalk");}});

var IdnToAscii = Module.findExportByName("KernelBase.dll", "IdnToAscii")
Interceptor.attach(IdnToAscii, {onLeave: function (args) {send("IdnToAscii");}});

var IdnToNameprepUnicode = Module.findExportByName("KernelBase.dll", "IdnToNameprepUnicode")
Interceptor.attach(IdnToNameprepUnicode, {onLeave: function (args) {send("IdnToNameprepUnicode");}});

var IdnToUnicode = Module.findExportByName("KernelBase.dll", "IdnToUnicode")
Interceptor.attach(IdnToUnicode, {onLeave: function (args) {send("IdnToUnicode");}});

var ImpersonateAnonymousToken = Module.findExportByName("KernelBase.dll", "ImpersonateAnonymousToken")
Interceptor.attach(ImpersonateAnonymousToken, {onLeave: function (args) {send("ImpersonateAnonymousToken");}});

var ImpersonateLoggedOnUser = Module.findExportByName("KernelBase.dll", "ImpersonateLoggedOnUser")
Interceptor.attach(ImpersonateLoggedOnUser, {onLeave: function (args) {send("ImpersonateLoggedOnUser");}});

var ImpersonateNamedPipeClient = Module.findExportByName("KernelBase.dll", "ImpersonateNamedPipeClient")
Interceptor.attach(ImpersonateNamedPipeClient, {onLeave: function (args) {send("ImpersonateNamedPipeClient");}});

var ImpersonateSelf = Module.findExportByName("KernelBase.dll", "ImpersonateSelf")
Interceptor.attach(ImpersonateSelf, {onLeave: function (args) {send("ImpersonateSelf");}});

var IncrementPackageStatusVersion = Module.findExportByName("KernelBase.dll", "IncrementPackageStatusVersion")
Interceptor.attach(IncrementPackageStatusVersion, {onLeave: function (args) {send("IncrementPackageStatusVersion");}});

var InitOnceBeginInitialize = Module.findExportByName("KernelBase.dll", "InitOnceBeginInitialize")
Interceptor.attach(InitOnceBeginInitialize, {onLeave: function (args) {send("InitOnceBeginInitialize");}});

var InitOnceComplete = Module.findExportByName("KernelBase.dll", "InitOnceComplete")
Interceptor.attach(InitOnceComplete, {onLeave: function (args) {send("InitOnceComplete");}});

var InitOnceExecuteOnce = Module.findExportByName("KernelBase.dll", "InitOnceExecuteOnce")
Interceptor.attach(InitOnceExecuteOnce, {onLeave: function (args) {send("InitOnceExecuteOnce");}});

var InitOnceInitialize = Module.findExportByName("KernelBase.dll", "InitOnceInitialize")
Interceptor.attach(InitOnceInitialize, {onLeave: function (args) {send("InitOnceInitialize");}});

var InitializeAcl = Module.findExportByName("KernelBase.dll", "InitializeAcl")
Interceptor.attach(InitializeAcl, {onLeave: function (args) {send("InitializeAcl");}});

var InitializeConditionVariable = Module.findExportByName("KernelBase.dll", "InitializeConditionVariable")
Interceptor.attach(InitializeConditionVariable, {onLeave: function (args) {send("InitializeConditionVariable");}});

var InitializeContext = Module.findExportByName("KernelBase.dll", "InitializeContext")
Interceptor.attach(InitializeContext, {onLeave: function (args) {send("InitializeContext");}});

var InitializeContext2 = Module.findExportByName("KernelBase.dll", "InitializeContext2")
Interceptor.attach(InitializeContext2, {onLeave: function (args) {send("InitializeContext2");}});

var InitializeCriticalSection = Module.findExportByName("KernelBase.dll", "InitializeCriticalSection")
Interceptor.attach(InitializeCriticalSection, {onLeave: function (args) {send("InitializeCriticalSection");}});

var InitializeCriticalSectionAndSpinCount = Module.findExportByName("KernelBase.dll", "InitializeCriticalSectionAndSpinCount")
Interceptor.attach(InitializeCriticalSectionAndSpinCount, {onLeave: function (args) {send("InitializeCriticalSectionAndSpinCount");}});

var InitializeCriticalSectionEx = Module.findExportByName("KernelBase.dll", "InitializeCriticalSectionEx")
Interceptor.attach(InitializeCriticalSectionEx, {onLeave: function (args) {send("InitializeCriticalSectionEx");}});

var InitializeEnclave = Module.findExportByName("KernelBase.dll", "InitializeEnclave")
Interceptor.attach(InitializeEnclave, {onLeave: function (args) {send("InitializeEnclave");}});

var InitializeProcThreadAttributeList = Module.findExportByName("KernelBase.dll", "InitializeProcThreadAttributeList")
Interceptor.attach(InitializeProcThreadAttributeList, {onLeave: function (args) {send("InitializeProcThreadAttributeList");}});

var InitializeProcessForWsWatch = Module.findExportByName("KernelBase.dll", "InitializeProcessForWsWatch")
Interceptor.attach(InitializeProcessForWsWatch, {onLeave: function (args) {send("InitializeProcessForWsWatch");}});

var InitializeSListHead = Module.findExportByName("KernelBase.dll", "InitializeSListHead")
Interceptor.attach(InitializeSListHead, {onLeave: function (args) {send("InitializeSListHead");}});

var InitializeSRWLock = Module.findExportByName("KernelBase.dll", "InitializeSRWLock")
Interceptor.attach(InitializeSRWLock, {onLeave: function (args) {send("InitializeSRWLock");}});

var InitializeSecurityDescriptor = Module.findExportByName("KernelBase.dll", "InitializeSecurityDescriptor")
Interceptor.attach(InitializeSecurityDescriptor, {onLeave: function (args) {send("InitializeSecurityDescriptor");}});

var InitializeSid = Module.findExportByName("KernelBase.dll", "InitializeSid")
Interceptor.attach(InitializeSid, {onLeave: function (args) {send("InitializeSid");}});

var InitializeSynchronizationBarrier = Module.findExportByName("KernelBase.dll", "InitializeSynchronizationBarrier")
Interceptor.attach(InitializeSynchronizationBarrier, {onLeave: function (args) {send("InitializeSynchronizationBarrier");}});

var InstallELAMCertificateInfo = Module.findExportByName("KernelBase.dll", "InstallELAMCertificateInfo")
Interceptor.attach(InstallELAMCertificateInfo, {onLeave: function (args) {send("InstallELAMCertificateInfo");}});

var InterlockedFlushSList = Module.findExportByName("KernelBase.dll", "InterlockedFlushSList")
Interceptor.attach(InterlockedFlushSList, {onLeave: function (args) {send("InterlockedFlushSList");}});

var InterlockedPopEntrySList = Module.findExportByName("KernelBase.dll", "InterlockedPopEntrySList")
Interceptor.attach(InterlockedPopEntrySList, {onLeave: function (args) {send("InterlockedPopEntrySList");}});

var InterlockedPushEntrySList = Module.findExportByName("KernelBase.dll", "InterlockedPushEntrySList")
Interceptor.attach(InterlockedPushEntrySList, {onLeave: function (args) {send("InterlockedPushEntrySList");}});

var InterlockedPushListSList = Module.findExportByName("KernelBase.dll", "InterlockedPushListSList")
Interceptor.attach(InterlockedPushListSList, {onLeave: function (args) {send("InterlockedPushListSList");}});

var InterlockedPushListSListEx = Module.findExportByName("KernelBase.dll", "InterlockedPushListSListEx")
Interceptor.attach(InterlockedPushListSListEx, {onLeave: function (args) {send("InterlockedPushListSListEx");}});

var InternalLcidToName = Module.findExportByName("KernelBase.dll", "InternalLcidToName")
Interceptor.attach(InternalLcidToName, {onLeave: function (args) {send("InternalLcidToName");}});

var Internal_EnumCalendarInfo = Module.findExportByName("KernelBase.dll", "Internal_EnumCalendarInfo")
Interceptor.attach(Internal_EnumCalendarInfo, {onLeave: function (args) {send("Internal_EnumCalendarInfo");}});

var Internal_EnumDateFormats = Module.findExportByName("KernelBase.dll", "Internal_EnumDateFormats")
Interceptor.attach(Internal_EnumDateFormats, {onLeave: function (args) {send("Internal_EnumDateFormats");}});

var Internal_EnumLanguageGroupLocales = Module.findExportByName("KernelBase.dll", "Internal_EnumLanguageGroupLocales")
Interceptor.attach(Internal_EnumLanguageGroupLocales, {onLeave: function (args) {send("Internal_EnumLanguageGroupLocales");}});

var Internal_EnumSystemCodePages = Module.findExportByName("KernelBase.dll", "Internal_EnumSystemCodePages")
Interceptor.attach(Internal_EnumSystemCodePages, {onLeave: function (args) {send("Internal_EnumSystemCodePages");}});

var Internal_EnumSystemLanguageGroups = Module.findExportByName("KernelBase.dll", "Internal_EnumSystemLanguageGroups")
Interceptor.attach(Internal_EnumSystemLanguageGroups, {onLeave: function (args) {send("Internal_EnumSystemLanguageGroups");}});

var Internal_EnumSystemLocales = Module.findExportByName("KernelBase.dll", "Internal_EnumSystemLocales")
Interceptor.attach(Internal_EnumSystemLocales, {onLeave: function (args) {send("Internal_EnumSystemLocales");}});

var Internal_EnumTimeFormats = Module.findExportByName("KernelBase.dll", "Internal_EnumTimeFormats")
Interceptor.attach(Internal_EnumTimeFormats, {onLeave: function (args) {send("Internal_EnumTimeFormats");}});

var Internal_EnumUILanguages = Module.findExportByName("KernelBase.dll", "Internal_EnumUILanguages")
Interceptor.attach(Internal_EnumUILanguages, {onLeave: function (args) {send("Internal_EnumUILanguages");}});

var InternetTimeFromSystemTimeA = Module.findExportByName("KernelBase.dll", "InternetTimeFromSystemTimeA")
Interceptor.attach(InternetTimeFromSystemTimeA, {onLeave: function (args) {send("InternetTimeFromSystemTimeA");}});

var InternetTimeFromSystemTimeW = Module.findExportByName("KernelBase.dll", "InternetTimeFromSystemTimeW")
Interceptor.attach(InternetTimeFromSystemTimeW, {onLeave: function (args) {send("InternetTimeFromSystemTimeW");}});

var InternetTimeToSystemTimeA = Module.findExportByName("KernelBase.dll", "InternetTimeToSystemTimeA")
Interceptor.attach(InternetTimeToSystemTimeA, {onLeave: function (args) {send("InternetTimeToSystemTimeA");}});

var InternetTimeToSystemTimeW = Module.findExportByName("KernelBase.dll", "InternetTimeToSystemTimeW")
Interceptor.attach(InternetTimeToSystemTimeW, {onLeave: function (args) {send("InternetTimeToSystemTimeW");}});

var InvalidateAppModelVersionCache = Module.findExportByName("KernelBase.dll", "InvalidateAppModelVersionCache")
Interceptor.attach(InvalidateAppModelVersionCache, {onLeave: function (args) {send("InvalidateAppModelVersionCache");}});

var IsApiSetImplemented = Module.findExportByName("KernelBase.dll", "IsApiSetImplemented")
Interceptor.attach(IsApiSetImplemented, {onLeave: function (args) {send("IsApiSetImplemented");}});

var IsCharAlphaA = Module.findExportByName("KernelBase.dll", "IsCharAlphaA")
Interceptor.attach(IsCharAlphaA, {onLeave: function (args) {send("IsCharAlphaA");}});

var IsCharAlphaNumericA = Module.findExportByName("KernelBase.dll", "IsCharAlphaNumericA")
Interceptor.attach(IsCharAlphaNumericA, {onLeave: function (args) {send("IsCharAlphaNumericA");}});

var IsCharAlphaNumericW = Module.findExportByName("KernelBase.dll", "IsCharAlphaNumericW")
Interceptor.attach(IsCharAlphaNumericW, {onLeave: function (args) {send("IsCharAlphaNumericW");}});

var IsCharAlphaW = Module.findExportByName("KernelBase.dll", "IsCharAlphaW")
Interceptor.attach(IsCharAlphaW, {onLeave: function (args) {send("IsCharAlphaW");}});

var IsCharBlankW = Module.findExportByName("KernelBase.dll", "IsCharBlankW")
Interceptor.attach(IsCharBlankW, {onLeave: function (args) {send("IsCharBlankW");}});

var IsCharCntrlW = Module.findExportByName("KernelBase.dll", "IsCharCntrlW")
Interceptor.attach(IsCharCntrlW, {onLeave: function (args) {send("IsCharCntrlW");}});

var IsCharDigitW = Module.findExportByName("KernelBase.dll", "IsCharDigitW")
Interceptor.attach(IsCharDigitW, {onLeave: function (args) {send("IsCharDigitW");}});

var IsCharLowerA = Module.findExportByName("KernelBase.dll", "IsCharLowerA")
Interceptor.attach(IsCharLowerA, {onLeave: function (args) {send("IsCharLowerA");}});

var IsCharLowerW = Module.findExportByName("KernelBase.dll", "IsCharLowerW")
Interceptor.attach(IsCharLowerW, {onLeave: function (args) {send("IsCharLowerW");}});

var IsCharPunctW = Module.findExportByName("KernelBase.dll", "IsCharPunctW")
Interceptor.attach(IsCharPunctW, {onLeave: function (args) {send("IsCharPunctW");}});

var IsCharSpaceA = Module.findExportByName("KernelBase.dll", "IsCharSpaceA")
Interceptor.attach(IsCharSpaceA, {onLeave: function (args) {send("IsCharSpaceA");}});

var IsCharSpaceW = Module.findExportByName("KernelBase.dll", "IsCharSpaceW")
Interceptor.attach(IsCharSpaceW, {onLeave: function (args) {send("IsCharSpaceW");}});

var IsCharUpperA = Module.findExportByName("KernelBase.dll", "IsCharUpperA")
Interceptor.attach(IsCharUpperA, {onLeave: function (args) {send("IsCharUpperA");}});

var IsCharUpperW = Module.findExportByName("KernelBase.dll", "IsCharUpperW")
Interceptor.attach(IsCharUpperW, {onLeave: function (args) {send("IsCharUpperW");}});

var IsCharXDigitW = Module.findExportByName("KernelBase.dll", "IsCharXDigitW")
Interceptor.attach(IsCharXDigitW, {onLeave: function (args) {send("IsCharXDigitW");}});

var IsDBCSLeadByte = Module.findExportByName("KernelBase.dll", "IsDBCSLeadByte")
Interceptor.attach(IsDBCSLeadByte, {onLeave: function (args) {send("IsDBCSLeadByte");}});

var IsDBCSLeadByteEx = Module.findExportByName("KernelBase.dll", "IsDBCSLeadByteEx")
Interceptor.attach(IsDBCSLeadByteEx, {onLeave: function (args) {send("IsDBCSLeadByteEx");}});

var IsDebuggerPresent = Module.findExportByName("KernelBase.dll", "IsDebuggerPresent")
Interceptor.attach(IsDebuggerPresent, {onLeave: function (args) {send("IsDebuggerPresent");}});

var IsDeveloperModeEnabled = Module.findExportByName("KernelBase.dll", "IsDeveloperModeEnabled")
Interceptor.attach(IsDeveloperModeEnabled, {onLeave: function (args) {send("IsDeveloperModeEnabled");}});

var IsDeveloperModePolicyApplied = Module.findExportByName("KernelBase.dll", "IsDeveloperModePolicyApplied")
Interceptor.attach(IsDeveloperModePolicyApplied, {onLeave: function (args) {send("IsDeveloperModePolicyApplied");}});

var IsEnclaveTypeSupported = Module.findExportByName("KernelBase.dll", "IsEnclaveTypeSupported")
Interceptor.attach(IsEnclaveTypeSupported, {onLeave: function (args) {send("IsEnclaveTypeSupported");}});

var IsInternetESCEnabled = Module.findExportByName("KernelBase.dll", "IsInternetESCEnabled")
Interceptor.attach(IsInternetESCEnabled, {onLeave: function (args) {send("IsInternetESCEnabled");}});

var IsIoRingOpSupported = Module.findExportByName("KernelBase.dll", "IsIoRingOpSupported")
Interceptor.attach(IsIoRingOpSupported, {onLeave: function (args) {send("IsIoRingOpSupported");}});

var IsMrtResourceRedirectionEnabled = Module.findExportByName("KernelBase.dll", "IsMrtResourceRedirectionEnabled")
Interceptor.attach(IsMrtResourceRedirectionEnabled, {onLeave: function (args) {send("IsMrtResourceRedirectionEnabled");}});

var IsNLSDefinedString = Module.findExportByName("KernelBase.dll", "IsNLSDefinedString")
Interceptor.attach(IsNLSDefinedString, {onLeave: function (args) {send("IsNLSDefinedString");}});

var IsNormalizedString = Module.findExportByName("KernelBase.dll", "IsNormalizedString")
Interceptor.attach(IsNormalizedString, {onLeave: function (args) {send("IsNormalizedString");}});

var IsOnDemandRegistrationSupportedForExtensionCategory = Module.findExportByName("KernelBase.dll", "IsOnDemandRegistrationSupportedForExtensionCategory")
Interceptor.attach(IsOnDemandRegistrationSupportedForExtensionCategory, {onLeave: function (args) {send("IsOnDemandRegistrationSupportedForExtensionCategory");}});

var IsProcessCritical = Module.findExportByName("KernelBase.dll", "IsProcessCritical")
Interceptor.attach(IsProcessCritical, {onLeave: function (args) {send("IsProcessCritical");}});

var IsProcessInJob = Module.findExportByName("KernelBase.dll", "IsProcessInJob")
Interceptor.attach(IsProcessInJob, {onLeave: function (args) {send("IsProcessInJob");}});

var IsProcessorFeaturePresent = Module.findExportByName("KernelBase.dll", "IsProcessorFeaturePresent")
Interceptor.attach(IsProcessorFeaturePresent, {onLeave: function (args) {send("IsProcessorFeaturePresent");}});

var IsSideloadingEnabled = Module.findExportByName("KernelBase.dll", "IsSideloadingEnabled")
Interceptor.attach(IsSideloadingEnabled, {onLeave: function (args) {send("IsSideloadingEnabled");}});

var IsSideloadingPolicyApplied = Module.findExportByName("KernelBase.dll", "IsSideloadingPolicyApplied")
Interceptor.attach(IsSideloadingPolicyApplied, {onLeave: function (args) {send("IsSideloadingPolicyApplied");}});

var IsSyncForegroundPolicyRefresh = Module.findExportByName("KernelBase.dll", "IsSyncForegroundPolicyRefresh")
Interceptor.attach(IsSyncForegroundPolicyRefresh, {onLeave: function (args) {send("IsSyncForegroundPolicyRefresh");}});

var IsThreadAFiber = Module.findExportByName("KernelBase.dll", "IsThreadAFiber")
Interceptor.attach(IsThreadAFiber, {onLeave: function (args) {send("IsThreadAFiber");}});

var IsThreadpoolTimerSet = Module.findExportByName("KernelBase.dll", "IsThreadpoolTimerSet")
Interceptor.attach(IsThreadpoolTimerSet, {onLeave: function (args) {send("IsThreadpoolTimerSet");}});

var IsTimeZoneRedirectionEnabled = Module.findExportByName("KernelBase.dll", "IsTimeZoneRedirectionEnabled")
Interceptor.attach(IsTimeZoneRedirectionEnabled, {onLeave: function (args) {send("IsTimeZoneRedirectionEnabled");}});

var IsTokenRestricted = Module.findExportByName("KernelBase.dll", "IsTokenRestricted")
Interceptor.attach(IsTokenRestricted, {onLeave: function (args) {send("IsTokenRestricted");}});

var IsUserCetAvailableInEnvironment = Module.findExportByName("KernelBase.dll", "IsUserCetAvailableInEnvironment")
Interceptor.attach(IsUserCetAvailableInEnvironment, {onLeave: function (args) {send("IsUserCetAvailableInEnvironment");}});

var IsValidAcl = Module.findExportByName("KernelBase.dll", "IsValidAcl")
Interceptor.attach(IsValidAcl, {onLeave: function (args) {send("IsValidAcl");}});

var IsValidCodePage = Module.findExportByName("KernelBase.dll", "IsValidCodePage")
Interceptor.attach(IsValidCodePage, {onLeave: function (args) {send("IsValidCodePage");}});

var IsValidLanguageGroup = Module.findExportByName("KernelBase.dll", "IsValidLanguageGroup")
Interceptor.attach(IsValidLanguageGroup, {onLeave: function (args) {send("IsValidLanguageGroup");}});

var IsValidLocale = Module.findExportByName("KernelBase.dll", "IsValidLocale")
Interceptor.attach(IsValidLocale, {onLeave: function (args) {send("IsValidLocale");}});

var IsValidLocaleName = Module.findExportByName("KernelBase.dll", "IsValidLocaleName")
Interceptor.attach(IsValidLocaleName, {onLeave: function (args) {send("IsValidLocaleName");}});

var IsValidNLSVersion = Module.findExportByName("KernelBase.dll", "IsValidNLSVersion")
Interceptor.attach(IsValidNLSVersion, {onLeave: function (args) {send("IsValidNLSVersion");}});

var IsValidRelativeSecurityDescriptor = Module.findExportByName("KernelBase.dll", "IsValidRelativeSecurityDescriptor")
Interceptor.attach(IsValidRelativeSecurityDescriptor, {onLeave: function (args) {send("IsValidRelativeSecurityDescriptor");}});

var IsValidSecurityDescriptor = Module.findExportByName("KernelBase.dll", "IsValidSecurityDescriptor")
Interceptor.attach(IsValidSecurityDescriptor, {onLeave: function (args) {send("IsValidSecurityDescriptor");}});

var IsValidSid = Module.findExportByName("KernelBase.dll", "IsValidSid")
Interceptor.attach(IsValidSid, {onLeave: function (args) {send("IsValidSid");}});

var IsWellKnownSid = Module.findExportByName("KernelBase.dll", "IsWellKnownSid")
Interceptor.attach(IsWellKnownSid, {onLeave: function (args) {send("IsWellKnownSid");}});

var IsWow64GuestMachineSupported = Module.findExportByName("KernelBase.dll", "IsWow64GuestMachineSupported")
Interceptor.attach(IsWow64GuestMachineSupported, {onLeave: function (args) {send("IsWow64GuestMachineSupported");}});

var IsWow64Process = Module.findExportByName("KernelBase.dll", "IsWow64Process")
Interceptor.attach(IsWow64Process, {onLeave: function (args) {send("IsWow64Process");}});

var IsWow64Process2 = Module.findExportByName("KernelBase.dll", "IsWow64Process2")
Interceptor.attach(IsWow64Process2, {onLeave: function (args) {send("IsWow64Process2");}});

var K32EmptyWorkingSet = Module.findExportByName("KernelBase.dll", "K32EmptyWorkingSet")
Interceptor.attach(K32EmptyWorkingSet, {onLeave: function (args) {send("K32EmptyWorkingSet");}});

var K32EnumDeviceDrivers = Module.findExportByName("KernelBase.dll", "K32EnumDeviceDrivers")
Interceptor.attach(K32EnumDeviceDrivers, {onLeave: function (args) {send("K32EnumDeviceDrivers");}});

var K32EnumPageFilesA = Module.findExportByName("KernelBase.dll", "K32EnumPageFilesA")
Interceptor.attach(K32EnumPageFilesA, {onLeave: function (args) {send("K32EnumPageFilesA");}});

var K32EnumPageFilesW = Module.findExportByName("KernelBase.dll", "K32EnumPageFilesW")
Interceptor.attach(K32EnumPageFilesW, {onLeave: function (args) {send("K32EnumPageFilesW");}});

var K32EnumProcessModules = Module.findExportByName("KernelBase.dll", "K32EnumProcessModules")
Interceptor.attach(K32EnumProcessModules, {onLeave: function (args) {send("K32EnumProcessModules");}});

var K32EnumProcessModulesEx = Module.findExportByName("KernelBase.dll", "K32EnumProcessModulesEx")
Interceptor.attach(K32EnumProcessModulesEx, {onLeave: function (args) {send("K32EnumProcessModulesEx");}});

var K32EnumProcesses = Module.findExportByName("KernelBase.dll", "K32EnumProcesses")
Interceptor.attach(K32EnumProcesses, {onLeave: function (args) {send("K32EnumProcesses");}});

var K32GetDeviceDriverBaseNameA = Module.findExportByName("KernelBase.dll", "K32GetDeviceDriverBaseNameA")
Interceptor.attach(K32GetDeviceDriverBaseNameA, {onLeave: function (args) {send("K32GetDeviceDriverBaseNameA");}});

var K32GetDeviceDriverBaseNameW = Module.findExportByName("KernelBase.dll", "K32GetDeviceDriverBaseNameW")
Interceptor.attach(K32GetDeviceDriverBaseNameW, {onLeave: function (args) {send("K32GetDeviceDriverBaseNameW");}});

var K32GetDeviceDriverFileNameA = Module.findExportByName("KernelBase.dll", "K32GetDeviceDriverFileNameA")
Interceptor.attach(K32GetDeviceDriverFileNameA, {onLeave: function (args) {send("K32GetDeviceDriverFileNameA");}});

var K32GetDeviceDriverFileNameW = Module.findExportByName("KernelBase.dll", "K32GetDeviceDriverFileNameW")
Interceptor.attach(K32GetDeviceDriverFileNameW, {onLeave: function (args) {send("K32GetDeviceDriverFileNameW");}});

var K32GetMappedFileNameA = Module.findExportByName("KernelBase.dll", "K32GetMappedFileNameA")
Interceptor.attach(K32GetMappedFileNameA, {onLeave: function (args) {send("K32GetMappedFileNameA");}});

var K32GetMappedFileNameW = Module.findExportByName("KernelBase.dll", "K32GetMappedFileNameW")
Interceptor.attach(K32GetMappedFileNameW, {onLeave: function (args) {send("K32GetMappedFileNameW");}});

var K32GetModuleBaseNameA = Module.findExportByName("KernelBase.dll", "K32GetModuleBaseNameA")
Interceptor.attach(K32GetModuleBaseNameA, {onLeave: function (args) {send("K32GetModuleBaseNameA");}});

var K32GetModuleBaseNameW = Module.findExportByName("KernelBase.dll", "K32GetModuleBaseNameW")
Interceptor.attach(K32GetModuleBaseNameW, {onLeave: function (args) {send("K32GetModuleBaseNameW");}});

var K32GetModuleFileNameExA = Module.findExportByName("KernelBase.dll", "K32GetModuleFileNameExA")
Interceptor.attach(K32GetModuleFileNameExA, {onLeave: function (args) {send("K32GetModuleFileNameExA");}});

var K32GetModuleFileNameExW = Module.findExportByName("KernelBase.dll", "K32GetModuleFileNameExW")
Interceptor.attach(K32GetModuleFileNameExW, {onLeave: function (args) {send("K32GetModuleFileNameExW");}});

var K32GetModuleInformation = Module.findExportByName("KernelBase.dll", "K32GetModuleInformation")
Interceptor.attach(K32GetModuleInformation, {onLeave: function (args) {send("K32GetModuleInformation");}});

var K32GetPerformanceInfo = Module.findExportByName("KernelBase.dll", "K32GetPerformanceInfo")
Interceptor.attach(K32GetPerformanceInfo, {onLeave: function (args) {send("K32GetPerformanceInfo");}});

var K32GetProcessImageFileNameA = Module.findExportByName("KernelBase.dll", "K32GetProcessImageFileNameA")
Interceptor.attach(K32GetProcessImageFileNameA, {onLeave: function (args) {send("K32GetProcessImageFileNameA");}});

var K32GetProcessImageFileNameW = Module.findExportByName("KernelBase.dll", "K32GetProcessImageFileNameW")
Interceptor.attach(K32GetProcessImageFileNameW, {onLeave: function (args) {send("K32GetProcessImageFileNameW");}});

var K32GetProcessMemoryInfo = Module.findExportByName("KernelBase.dll", "K32GetProcessMemoryInfo")
Interceptor.attach(K32GetProcessMemoryInfo, {onLeave: function (args) {send("K32GetProcessMemoryInfo");}});

var K32GetWsChanges = Module.findExportByName("KernelBase.dll", "K32GetWsChanges")
Interceptor.attach(K32GetWsChanges, {onLeave: function (args) {send("K32GetWsChanges");}});

var K32GetWsChangesEx = Module.findExportByName("KernelBase.dll", "K32GetWsChangesEx")
Interceptor.attach(K32GetWsChangesEx, {onLeave: function (args) {send("K32GetWsChangesEx");}});

var K32InitializeProcessForWsWatch = Module.findExportByName("KernelBase.dll", "K32InitializeProcessForWsWatch")
Interceptor.attach(K32InitializeProcessForWsWatch, {onLeave: function (args) {send("K32InitializeProcessForWsWatch");}});

var K32QueryWorkingSet = Module.findExportByName("KernelBase.dll", "K32QueryWorkingSet")
Interceptor.attach(K32QueryWorkingSet, {onLeave: function (args) {send("K32QueryWorkingSet");}});

var K32QueryWorkingSetEx = Module.findExportByName("KernelBase.dll", "K32QueryWorkingSetEx")
Interceptor.attach(K32QueryWorkingSetEx, {onLeave: function (args) {send("K32QueryWorkingSetEx");}});

var KernelBaseGetGlobalData = Module.findExportByName("KernelBase.dll", "KernelBaseGetGlobalData")
Interceptor.attach(KernelBaseGetGlobalData, {onLeave: function (args) {send("KernelBaseGetGlobalData");}});

var KernelbasePostInit = Module.findExportByName("KernelBase.dll", "KernelbasePostInit")
Interceptor.attach(KernelbasePostInit, {onLeave: function (args) {send("KernelbasePostInit");}});

var LCIDToLocaleName = Module.findExportByName("KernelBase.dll", "LCIDToLocaleName")
Interceptor.attach(LCIDToLocaleName, {onLeave: function (args) {send("LCIDToLocaleName");}});

var LCMapStringA = Module.findExportByName("KernelBase.dll", "LCMapStringA")
Interceptor.attach(LCMapStringA, {onLeave: function (args) {send("LCMapStringA");}});

var LCMapStringEx = Module.findExportByName("KernelBase.dll", "LCMapStringEx")
Interceptor.attach(LCMapStringEx, {onLeave: function (args) {send("LCMapStringEx");}});

var LCMapStringW = Module.findExportByName("KernelBase.dll", "LCMapStringW")
Interceptor.attach(LCMapStringW, {onLeave: function (args) {send("LCMapStringW");}});

var LeaveCriticalPolicySectionInternal = Module.findExportByName("KernelBase.dll", "LeaveCriticalPolicySectionInternal")
Interceptor.attach(LeaveCriticalPolicySectionInternal, {onLeave: function (args) {send("LeaveCriticalPolicySectionInternal");}});

var LeaveCriticalSection = Module.findExportByName("KernelBase.dll", "LeaveCriticalSection")
Interceptor.attach(LeaveCriticalSection, {onLeave: function (args) {send("LeaveCriticalSection");}});

var LeaveCriticalSectionWhenCallbackReturns = Module.findExportByName("KernelBase.dll", "LeaveCriticalSectionWhenCallbackReturns")
Interceptor.attach(LeaveCriticalSectionWhenCallbackReturns, {onLeave: function (args) {send("LeaveCriticalSectionWhenCallbackReturns");}});

var LoadAppInitDlls = Module.findExportByName("KernelBase.dll", "LoadAppInitDlls")
Interceptor.attach(LoadAppInitDlls, {onLeave: function (args) {send("LoadAppInitDlls");}});

var LoadEnclaveData = Module.findExportByName("KernelBase.dll", "LoadEnclaveData")
Interceptor.attach(LoadEnclaveData, {onLeave: function (args) {send("LoadEnclaveData");}});

var LoadEnclaveImageA = Module.findExportByName("KernelBase.dll", "LoadEnclaveImageA")
Interceptor.attach(LoadEnclaveImageA, {onLeave: function (args) {send("LoadEnclaveImageA");}});

var LoadEnclaveImageW = Module.findExportByName("KernelBase.dll", "LoadEnclaveImageW")
Interceptor.attach(LoadEnclaveImageW, {onLeave: function (args) {send("LoadEnclaveImageW");}});

var LoadLibraryA = Module.findExportByName("KernelBase.dll", "LoadLibraryA")
Interceptor.attach(LoadLibraryA, {onLeave: function (args) {send("LoadLibraryA");}});

var LoadLibraryExA = Module.findExportByName("KernelBase.dll", "LoadLibraryExA")
Interceptor.attach(LoadLibraryExA, {onLeave: function (args) {send("LoadLibraryExA");}});

var LoadLibraryExW = Module.findExportByName("KernelBase.dll", "LoadLibraryExW")
Interceptor.attach(LoadLibraryExW, {onLeave: function (args) {send("LoadLibraryExW");}});

var LoadLibraryW = Module.findExportByName("KernelBase.dll", "LoadLibraryW")
Interceptor.attach(LoadLibraryW, {onLeave: function (args) {send("LoadLibraryW");}});

var LoadPackagedLibrary = Module.findExportByName("KernelBase.dll", "LoadPackagedLibrary")
Interceptor.attach(LoadPackagedLibrary, {onLeave: function (args) {send("LoadPackagedLibrary");}});

var LoadResource = Module.findExportByName("KernelBase.dll", "LoadResource")
Interceptor.attach(LoadResource, {onLeave: function (args) {send("LoadResource");}});

var LoadStringA = Module.findExportByName("KernelBase.dll", "LoadStringA")
Interceptor.attach(LoadStringA, {onLeave: function (args) {send("LoadStringA");}});

var LoadStringBaseExW = Module.findExportByName("KernelBase.dll", "LoadStringBaseExW")
Interceptor.attach(LoadStringBaseExW, {onLeave: function (args) {send("LoadStringBaseExW");}});

var LoadStringByReference = Module.findExportByName("KernelBase.dll", "LoadStringByReference")
Interceptor.attach(LoadStringByReference, {onLeave: function (args) {send("LoadStringByReference");}});

var LoadStringW = Module.findExportByName("KernelBase.dll", "LoadStringW")
Interceptor.attach(LoadStringW, {onLeave: function (args) {send("LoadStringW");}});

var LocalAlloc = Module.findExportByName("KernelBase.dll", "LocalAlloc")
Interceptor.attach(LocalAlloc, {onLeave: function (args) {send("LocalAlloc");}});

var LocalFileTimeToFileTime = Module.findExportByName("KernelBase.dll", "LocalFileTimeToFileTime")
Interceptor.attach(LocalFileTimeToFileTime, {onLeave: function (args) {send("LocalFileTimeToFileTime");}});

var LocalFileTimeToLocalSystemTime = Module.findExportByName("KernelBase.dll", "LocalFileTimeToLocalSystemTime")
Interceptor.attach(LocalFileTimeToLocalSystemTime, {onLeave: function (args) {send("LocalFileTimeToLocalSystemTime");}});

var LocalFlags = Module.findExportByName("KernelBase.dll", "LocalFlags")
Interceptor.attach(LocalFlags, {onLeave: function (args) {send("LocalFlags");}});

var LocalFree = Module.findExportByName("KernelBase.dll", "LocalFree")
Interceptor.attach(LocalFree, {onLeave: function (args) {send("LocalFree");}});

var LocalLock = Module.findExportByName("KernelBase.dll", "LocalLock")
Interceptor.attach(LocalLock, {onLeave: function (args) {send("LocalLock");}});

var LocalReAlloc = Module.findExportByName("KernelBase.dll", "LocalReAlloc")
Interceptor.attach(LocalReAlloc, {onLeave: function (args) {send("LocalReAlloc");}});

var LocalSize = Module.findExportByName("KernelBase.dll", "LocalSize")
Interceptor.attach(LocalSize, {onLeave: function (args) {send("LocalSize");}});

var LocalSystemTimeToLocalFileTime = Module.findExportByName("KernelBase.dll", "LocalSystemTimeToLocalFileTime")
Interceptor.attach(LocalSystemTimeToLocalFileTime, {onLeave: function (args) {send("LocalSystemTimeToLocalFileTime");}});

var LocalUnlock = Module.findExportByName("KernelBase.dll", "LocalUnlock")
Interceptor.attach(LocalUnlock, {onLeave: function (args) {send("LocalUnlock");}});

var LocaleNameToLCID = Module.findExportByName("KernelBase.dll", "LocaleNameToLCID")
Interceptor.attach(LocaleNameToLCID, {onLeave: function (args) {send("LocaleNameToLCID");}});

var LocateXStateFeature = Module.findExportByName("KernelBase.dll", "LocateXStateFeature")
Interceptor.attach(LocateXStateFeature, {onLeave: function (args) {send("LocateXStateFeature");}});

var LockFile = Module.findExportByName("KernelBase.dll", "LockFile")
Interceptor.attach(LockFile, {onLeave: function (args) {send("LockFile");}});

var LockFileEx = Module.findExportByName("KernelBase.dll", "LockFileEx")
Interceptor.attach(LockFileEx, {onLeave: function (args) {send("LockFileEx");}});

var LockResource = Module.findExportByName("KernelBase.dll", "LockResource")
Interceptor.attach(LockResource, {onLeave: function (args) {send("LockResource");}});

var LogStagedFeatureUsage = Module.findExportByName("KernelBase.dll", "LogStagedFeatureUsage")
Interceptor.attach(LogStagedFeatureUsage, {onLeave: function (args) {send("LogStagedFeatureUsage");}});

var MakeAbsoluteSD = Module.findExportByName("KernelBase.dll", "MakeAbsoluteSD")
Interceptor.attach(MakeAbsoluteSD, {onLeave: function (args) {send("MakeAbsoluteSD");}});

var MakeAbsoluteSD2 = Module.findExportByName("KernelBase.dll", "MakeAbsoluteSD2")
Interceptor.attach(MakeAbsoluteSD2, {onLeave: function (args) {send("MakeAbsoluteSD2");}});

var MakeSelfRelativeSD = Module.findExportByName("KernelBase.dll", "MakeSelfRelativeSD")
Interceptor.attach(MakeSelfRelativeSD, {onLeave: function (args) {send("MakeSelfRelativeSD");}});

var MapGenericMask = Module.findExportByName("KernelBase.dll", "MapGenericMask")
Interceptor.attach(MapGenericMask, {onLeave: function (args) {send("MapGenericMask");}});

var MapPredefinedHandleInternal = Module.findExportByName("KernelBase.dll", "MapPredefinedHandleInternal")
Interceptor.attach(MapPredefinedHandleInternal, {onLeave: function (args) {send("MapPredefinedHandleInternal");}});

var MapUserPhysicalPages = Module.findExportByName("KernelBase.dll", "MapUserPhysicalPages")
Interceptor.attach(MapUserPhysicalPages, {onLeave: function (args) {send("MapUserPhysicalPages");}});

var MapViewOfFile = Module.findExportByName("KernelBase.dll", "MapViewOfFile")
Interceptor.attach(MapViewOfFile, {onLeave: function (args) {send("MapViewOfFile");}});

var MapViewOfFile3 = Module.findExportByName("KernelBase.dll", "MapViewOfFile3")
Interceptor.attach(MapViewOfFile3, {onLeave: function (args) {send("MapViewOfFile3");}});

var MapViewOfFile3FromApp = Module.findExportByName("KernelBase.dll", "MapViewOfFile3FromApp")
Interceptor.attach(MapViewOfFile3FromApp, {onLeave: function (args) {send("MapViewOfFile3FromApp");}});

var MapViewOfFileEx = Module.findExportByName("KernelBase.dll", "MapViewOfFileEx")
Interceptor.attach(MapViewOfFileEx, {onLeave: function (args) {send("MapViewOfFileEx");}});

var MapViewOfFileExNuma = Module.findExportByName("KernelBase.dll", "MapViewOfFileExNuma")
Interceptor.attach(MapViewOfFileExNuma, {onLeave: function (args) {send("MapViewOfFileExNuma");}});

var MapViewOfFileFromApp = Module.findExportByName("KernelBase.dll", "MapViewOfFileFromApp")
Interceptor.attach(MapViewOfFileFromApp, {onLeave: function (args) {send("MapViewOfFileFromApp");}});

var MapViewOfFileNuma2 = Module.findExportByName("KernelBase.dll", "MapViewOfFileNuma2")
Interceptor.attach(MapViewOfFileNuma2, {onLeave: function (args) {send("MapViewOfFileNuma2");}});

var MoveFileExW = Module.findExportByName("KernelBase.dll", "MoveFileExW")
Interceptor.attach(MoveFileExW, {onLeave: function (args) {send("MoveFileExW");}});

var MoveFileFromAppW = Module.findExportByName("KernelBase.dll", "MoveFileFromAppW")
Interceptor.attach(MoveFileFromAppW, {onLeave: function (args) {send("MoveFileFromAppW");}});

var MoveFileWithProgressTransactedW = Module.findExportByName("KernelBase.dll", "MoveFileWithProgressTransactedW")
Interceptor.attach(MoveFileWithProgressTransactedW, {onLeave: function (args) {send("MoveFileWithProgressTransactedW");}});

var MoveFileWithProgressW = Module.findExportByName("KernelBase.dll", "MoveFileWithProgressW")
Interceptor.attach(MoveFileWithProgressW, {onLeave: function (args) {send("MoveFileWithProgressW");}});

var MulDiv = Module.findExportByName("KernelBase.dll", "MulDiv")
Interceptor.attach(MulDiv, {onLeave: function (args) {send("MulDiv");}});

var MultiByteToWideChar = Module.findExportByName("KernelBase.dll", "MultiByteToWideChar")
Interceptor.attach(MultiByteToWideChar, {onLeave: function (args) {send("MultiByteToWideChar");}});

var NamedPipeEventEnum = Module.findExportByName("KernelBase.dll", "NamedPipeEventEnum")
Interceptor.attach(NamedPipeEventEnum, {onLeave: function (args) {send("NamedPipeEventEnum");}});

var NamedPipeEventSelect = Module.findExportByName("KernelBase.dll", "NamedPipeEventSelect")
Interceptor.attach(NamedPipeEventSelect, {onLeave: function (args) {send("NamedPipeEventSelect");}});

var NeedCurrentDirectoryForExePathA = Module.findExportByName("KernelBase.dll", "NeedCurrentDirectoryForExePathA")
Interceptor.attach(NeedCurrentDirectoryForExePathA, {onLeave: function (args) {send("NeedCurrentDirectoryForExePathA");}});

var NeedCurrentDirectoryForExePathW = Module.findExportByName("KernelBase.dll", "NeedCurrentDirectoryForExePathW")
Interceptor.attach(NeedCurrentDirectoryForExePathW, {onLeave: function (args) {send("NeedCurrentDirectoryForExePathW");}});

var NlsCheckPolicy = Module.findExportByName("KernelBase.dll", "NlsCheckPolicy")
Interceptor.attach(NlsCheckPolicy, {onLeave: function (args) {send("NlsCheckPolicy");}});

var NlsDispatchAnsiEnumProc = Module.findExportByName("KernelBase.dll", "NlsDispatchAnsiEnumProc")
Interceptor.attach(NlsDispatchAnsiEnumProc, {onLeave: function (args) {send("NlsDispatchAnsiEnumProc");}});

var NlsGetACPFromLocale = Module.findExportByName("KernelBase.dll", "NlsGetACPFromLocale")
Interceptor.attach(NlsGetACPFromLocale, {onLeave: function (args) {send("NlsGetACPFromLocale");}});

var NlsGetCacheUpdateCount = Module.findExportByName("KernelBase.dll", "NlsGetCacheUpdateCount")
Interceptor.attach(NlsGetCacheUpdateCount, {onLeave: function (args) {send("NlsGetCacheUpdateCount");}});

var NlsIsUserDefaultLocale = Module.findExportByName("KernelBase.dll", "NlsIsUserDefaultLocale")
Interceptor.attach(NlsIsUserDefaultLocale, {onLeave: function (args) {send("NlsIsUserDefaultLocale");}});

var NlsUpdateLocale = Module.findExportByName("KernelBase.dll", "NlsUpdateLocale")
Interceptor.attach(NlsUpdateLocale, {onLeave: function (args) {send("NlsUpdateLocale");}});

var NlsUpdateSystemLocale = Module.findExportByName("KernelBase.dll", "NlsUpdateSystemLocale")
Interceptor.attach(NlsUpdateSystemLocale, {onLeave: function (args) {send("NlsUpdateSystemLocale");}});

var NlsValidateLocale = Module.findExportByName("KernelBase.dll", "NlsValidateLocale")
Interceptor.attach(NlsValidateLocale, {onLeave: function (args) {send("NlsValidateLocale");}});

var NormalizeString = Module.findExportByName("KernelBase.dll", "NormalizeString")
Interceptor.attach(NormalizeString, {onLeave: function (args) {send("NormalizeString");}});

var NotifyMountMgr = Module.findExportByName("KernelBase.dll", "NotifyMountMgr")
Interceptor.attach(NotifyMountMgr, {onLeave: function (args) {send("NotifyMountMgr");}});

var NotifyRedirectedStringChange = Module.findExportByName("KernelBase.dll", "NotifyRedirectedStringChange")
Interceptor.attach(NotifyRedirectedStringChange, {onLeave: function (args) {send("NotifyRedirectedStringChange");}});

var ObjectCloseAuditAlarmW = Module.findExportByName("KernelBase.dll", "ObjectCloseAuditAlarmW")
Interceptor.attach(ObjectCloseAuditAlarmW, {onLeave: function (args) {send("ObjectCloseAuditAlarmW");}});

var ObjectDeleteAuditAlarmW = Module.findExportByName("KernelBase.dll", "ObjectDeleteAuditAlarmW")
Interceptor.attach(ObjectDeleteAuditAlarmW, {onLeave: function (args) {send("ObjectDeleteAuditAlarmW");}});

var ObjectOpenAuditAlarmW = Module.findExportByName("KernelBase.dll", "ObjectOpenAuditAlarmW")
Interceptor.attach(ObjectOpenAuditAlarmW, {onLeave: function (args) {send("ObjectOpenAuditAlarmW");}});

var ObjectPrivilegeAuditAlarmW = Module.findExportByName("KernelBase.dll", "ObjectPrivilegeAuditAlarmW")
Interceptor.attach(ObjectPrivilegeAuditAlarmW, {onLeave: function (args) {send("ObjectPrivilegeAuditAlarmW");}});

var OfferVirtualMemory = Module.findExportByName("KernelBase.dll", "OfferVirtualMemory")
Interceptor.attach(OfferVirtualMemory, {onLeave: function (args) {send("OfferVirtualMemory");}});

var OpenCommPort = Module.findExportByName("KernelBase.dll", "OpenCommPort")
Interceptor.attach(OpenCommPort, {onLeave: function (args) {send("OpenCommPort");}});

var OpenDedicatedMemoryPartition = Module.findExportByName("KernelBase.dll", "OpenDedicatedMemoryPartition")
Interceptor.attach(OpenDedicatedMemoryPartition, {onLeave: function (args) {send("OpenDedicatedMemoryPartition");}});

var OpenEventA = Module.findExportByName("KernelBase.dll", "OpenEventA")
Interceptor.attach(OpenEventA, {onLeave: function (args) {send("OpenEventA");}});

var OpenEventW = Module.findExportByName("KernelBase.dll", "OpenEventW")
Interceptor.attach(OpenEventW, {onLeave: function (args) {send("OpenEventW");}});

var OpenFileById = Module.findExportByName("KernelBase.dll", "OpenFileById")
Interceptor.attach(OpenFileById, {onLeave: function (args) {send("OpenFileById");}});

var OpenFileMappingFromApp = Module.findExportByName("KernelBase.dll", "OpenFileMappingFromApp")
Interceptor.attach(OpenFileMappingFromApp, {onLeave: function (args) {send("OpenFileMappingFromApp");}});

var OpenFileMappingW = Module.findExportByName("KernelBase.dll", "OpenFileMappingW")
Interceptor.attach(OpenFileMappingW, {onLeave: function (args) {send("OpenFileMappingW");}});

var OpenGlobalizationUserSettingsKey = Module.findExportByName("KernelBase.dll", "OpenGlobalizationUserSettingsKey")
Interceptor.attach(OpenGlobalizationUserSettingsKey, {onLeave: function (args) {send("OpenGlobalizationUserSettingsKey");}});

var OpenMutexW = Module.findExportByName("KernelBase.dll", "OpenMutexW")
Interceptor.attach(OpenMutexW, {onLeave: function (args) {send("OpenMutexW");}});

var OpenPackageInfoByFullName = Module.findExportByName("KernelBase.dll", "OpenPackageInfoByFullName")
Interceptor.attach(OpenPackageInfoByFullName, {onLeave: function (args) {send("OpenPackageInfoByFullName");}});

var OpenPackageInfoByFullNameForMachine = Module.findExportByName("KernelBase.dll", "OpenPackageInfoByFullNameForMachine")
Interceptor.attach(OpenPackageInfoByFullNameForMachine, {onLeave: function (args) {send("OpenPackageInfoByFullNameForMachine");}});

var OpenPackageInfoByFullNameForUser = Module.findExportByName("KernelBase.dll", "OpenPackageInfoByFullNameForUser")
Interceptor.attach(OpenPackageInfoByFullNameForUser, {onLeave: function (args) {send("OpenPackageInfoByFullNameForUser");}});

var OpenPrivateNamespaceW = Module.findExportByName("KernelBase.dll", "OpenPrivateNamespaceW")
Interceptor.attach(OpenPrivateNamespaceW, {onLeave: function (args) {send("OpenPrivateNamespaceW");}});

var OpenProcess = Module.findExportByName("KernelBase.dll", "OpenProcess")
Interceptor.attach(OpenProcess, {onLeave: function (args) {send("OpenProcess");}});

var OpenProcessToken = Module.findExportByName("KernelBase.dll", "OpenProcessToken")
Interceptor.attach(OpenProcessToken, {onLeave: function (args) {send("OpenProcessToken");}});

var OpenRegKey = Module.findExportByName("KernelBase.dll", "OpenRegKey")
Interceptor.attach(OpenRegKey, {onLeave: function (args) {send("OpenRegKey");}});

var OpenSemaphoreW = Module.findExportByName("KernelBase.dll", "OpenSemaphoreW")
Interceptor.attach(OpenSemaphoreW, {onLeave: function (args) {send("OpenSemaphoreW");}});

var OpenState = Module.findExportByName("KernelBase.dll", "OpenState")
Interceptor.attach(OpenState, {onLeave: function (args) {send("OpenState");}});

var OpenStateAtom = Module.findExportByName("KernelBase.dll", "OpenStateAtom")
Interceptor.attach(OpenStateAtom, {onLeave: function (args) {send("OpenStateAtom");}});

var OpenStateExplicit = Module.findExportByName("KernelBase.dll", "OpenStateExplicit")
Interceptor.attach(OpenStateExplicit, {onLeave: function (args) {send("OpenStateExplicit");}});

var OpenStateExplicitForUserSid = Module.findExportByName("KernelBase.dll", "OpenStateExplicitForUserSid")
Interceptor.attach(OpenStateExplicitForUserSid, {onLeave: function (args) {send("OpenStateExplicitForUserSid");}});

var OpenStateExplicitForUserSidString = Module.findExportByName("KernelBase.dll", "OpenStateExplicitForUserSidString")
Interceptor.attach(OpenStateExplicitForUserSidString, {onLeave: function (args) {send("OpenStateExplicitForUserSidString");}});

var OpenThread = Module.findExportByName("KernelBase.dll", "OpenThread")
Interceptor.attach(OpenThread, {onLeave: function (args) {send("OpenThread");}});

var OpenThreadToken = Module.findExportByName("KernelBase.dll", "OpenThreadToken")
Interceptor.attach(OpenThreadToken, {onLeave: function (args) {send("OpenThreadToken");}});

var OpenWaitableTimerW = Module.findExportByName("KernelBase.dll", "OpenWaitableTimerW")
Interceptor.attach(OpenWaitableTimerW, {onLeave: function (args) {send("OpenWaitableTimerW");}});

var OutputDebugStringA = Module.findExportByName("KernelBase.dll", "OutputDebugStringA")
Interceptor.attach(OutputDebugStringA, {onLeave: function (args) {send("OutputDebugStringA");}});

var OutputDebugStringW = Module.findExportByName("KernelBase.dll", "OutputDebugStringW")
Interceptor.attach(OutputDebugStringW, {onLeave: function (args) {send("OutputDebugStringW");}});

var OverrideRoamingDataModificationTimesInRange = Module.findExportByName("KernelBase.dll", "OverrideRoamingDataModificationTimesInRange")
Interceptor.attach(OverrideRoamingDataModificationTimesInRange, {onLeave: function (args) {send("OverrideRoamingDataModificationTimesInRange");}});

var PackageFamilyNameFromFullName = Module.findExportByName("KernelBase.dll", "PackageFamilyNameFromFullName")
Interceptor.attach(PackageFamilyNameFromFullName, {onLeave: function (args) {send("PackageFamilyNameFromFullName");}});

var PackageFamilyNameFromFullNameA = Module.findExportByName("KernelBase.dll", "PackageFamilyNameFromFullNameA")
Interceptor.attach(PackageFamilyNameFromFullNameA, {onLeave: function (args) {send("PackageFamilyNameFromFullNameA");}});

var PackageFamilyNameFromId = Module.findExportByName("KernelBase.dll", "PackageFamilyNameFromId")
Interceptor.attach(PackageFamilyNameFromId, {onLeave: function (args) {send("PackageFamilyNameFromId");}});

var PackageFamilyNameFromIdA = Module.findExportByName("KernelBase.dll", "PackageFamilyNameFromIdA")
Interceptor.attach(PackageFamilyNameFromIdA, {onLeave: function (args) {send("PackageFamilyNameFromIdA");}});

var PackageFamilyNameFromProductId = Module.findExportByName("KernelBase.dll", "PackageFamilyNameFromProductId")
Interceptor.attach(PackageFamilyNameFromProductId, {onLeave: function (args) {send("PackageFamilyNameFromProductId");}});

var PackageFullNameFromId = Module.findExportByName("KernelBase.dll", "PackageFullNameFromId")
Interceptor.attach(PackageFullNameFromId, {onLeave: function (args) {send("PackageFullNameFromId");}});

var PackageFullNameFromIdA = Module.findExportByName("KernelBase.dll", "PackageFullNameFromIdA")
Interceptor.attach(PackageFullNameFromIdA, {onLeave: function (args) {send("PackageFullNameFromIdA");}});

var PackageFullNameFromProductId = Module.findExportByName("KernelBase.dll", "PackageFullNameFromProductId")
Interceptor.attach(PackageFullNameFromProductId, {onLeave: function (args) {send("PackageFullNameFromProductId");}});

var PackageIdFromFullName = Module.findExportByName("KernelBase.dll", "PackageIdFromFullName")
Interceptor.attach(PackageIdFromFullName, {onLeave: function (args) {send("PackageIdFromFullName");}});

var PackageIdFromFullNameA = Module.findExportByName("KernelBase.dll", "PackageIdFromFullNameA")
Interceptor.attach(PackageIdFromFullNameA, {onLeave: function (args) {send("PackageIdFromFullNameA");}});

var PackageIdFromProductId = Module.findExportByName("KernelBase.dll", "PackageIdFromProductId")
Interceptor.attach(PackageIdFromProductId, {onLeave: function (args) {send("PackageIdFromProductId");}});

var PackageIsEffectiveSupportedUsersMultiple = Module.findExportByName("KernelBase.dll", "PackageIsEffectiveSupportedUsersMultiple")
Interceptor.attach(PackageIsEffectiveSupportedUsersMultiple, {onLeave: function (args) {send("PackageIsEffectiveSupportedUsersMultiple");}});

var PackageNameAndPublisherIdFromFamilyName = Module.findExportByName("KernelBase.dll", "PackageNameAndPublisherIdFromFamilyName")
Interceptor.attach(PackageNameAndPublisherIdFromFamilyName, {onLeave: function (args) {send("PackageNameAndPublisherIdFromFamilyName");}});

var PackageNameAndPublisherIdFromFamilyNameA = Module.findExportByName("KernelBase.dll", "PackageNameAndPublisherIdFromFamilyNameA")
Interceptor.attach(PackageNameAndPublisherIdFromFamilyNameA, {onLeave: function (args) {send("PackageNameAndPublisherIdFromFamilyNameA");}});

var PackagePublisherIdFromPublisher = Module.findExportByName("KernelBase.dll", "PackagePublisherIdFromPublisher")
Interceptor.attach(PackagePublisherIdFromPublisher, {onLeave: function (args) {send("PackagePublisherIdFromPublisher");}});

var PackageRelativeApplicationIdFromProductId = Module.findExportByName("KernelBase.dll", "PackageRelativeApplicationIdFromProductId")
Interceptor.attach(PackageRelativeApplicationIdFromProductId, {onLeave: function (args) {send("PackageRelativeApplicationIdFromProductId");}});

var PackageSidFromFamilyName = Module.findExportByName("KernelBase.dll", "PackageSidFromFamilyName")
Interceptor.attach(PackageSidFromFamilyName, {onLeave: function (args) {send("PackageSidFromFamilyName");}});

var PackageSidFromProductId = Module.findExportByName("KernelBase.dll", "PackageSidFromProductId")
Interceptor.attach(PackageSidFromProductId, {onLeave: function (args) {send("PackageSidFromProductId");}});

var ParseApplicationUserModelId = Module.findExportByName("KernelBase.dll", "ParseApplicationUserModelId")
Interceptor.attach(ParseApplicationUserModelId, {onLeave: function (args) {send("ParseApplicationUserModelId");}});

var ParseApplicationUserModelIdA = Module.findExportByName("KernelBase.dll", "ParseApplicationUserModelIdA")
Interceptor.attach(ParseApplicationUserModelIdA, {onLeave: function (args) {send("ParseApplicationUserModelIdA");}});

var ParseURLA = Module.findExportByName("KernelBase.dll", "ParseURLA")
Interceptor.attach(ParseURLA, {onLeave: function (args) {send("ParseURLA");}});

var ParseURLW = Module.findExportByName("KernelBase.dll", "ParseURLW")
Interceptor.attach(ParseURLW, {onLeave: function (args) {send("ParseURLW");}});

var PathAddBackslashA = Module.findExportByName("KernelBase.dll", "PathAddBackslashA")
Interceptor.attach(PathAddBackslashA, {onLeave: function (args) {send("PathAddBackslashA");}});

var PathAddBackslashW = Module.findExportByName("KernelBase.dll", "PathAddBackslashW")
Interceptor.attach(PathAddBackslashW, {onLeave: function (args) {send("PathAddBackslashW");}});

var PathAddExtensionA = Module.findExportByName("KernelBase.dll", "PathAddExtensionA")
Interceptor.attach(PathAddExtensionA, {onLeave: function (args) {send("PathAddExtensionA");}});

var PathAddExtensionW = Module.findExportByName("KernelBase.dll", "PathAddExtensionW")
Interceptor.attach(PathAddExtensionW, {onLeave: function (args) {send("PathAddExtensionW");}});

var PathAllocCanonicalize = Module.findExportByName("KernelBase.dll", "PathAllocCanonicalize")
Interceptor.attach(PathAllocCanonicalize, {onLeave: function (args) {send("PathAllocCanonicalize");}});

var PathAllocCombine = Module.findExportByName("KernelBase.dll", "PathAllocCombine")
Interceptor.attach(PathAllocCombine, {onLeave: function (args) {send("PathAllocCombine");}});

var PathAppendA = Module.findExportByName("KernelBase.dll", "PathAppendA")
Interceptor.attach(PathAppendA, {onLeave: function (args) {send("PathAppendA");}});

var PathAppendW = Module.findExportByName("KernelBase.dll", "PathAppendW")
Interceptor.attach(PathAppendW, {onLeave: function (args) {send("PathAppendW");}});

var PathCanonicalizeA = Module.findExportByName("KernelBase.dll", "PathCanonicalizeA")
Interceptor.attach(PathCanonicalizeA, {onLeave: function (args) {send("PathCanonicalizeA");}});

var PathCanonicalizeW = Module.findExportByName("KernelBase.dll", "PathCanonicalizeW")
Interceptor.attach(PathCanonicalizeW, {onLeave: function (args) {send("PathCanonicalizeW");}});

var PathCchAddBackslash = Module.findExportByName("KernelBase.dll", "PathCchAddBackslash")
Interceptor.attach(PathCchAddBackslash, {onLeave: function (args) {send("PathCchAddBackslash");}});

var PathCchAddBackslashEx = Module.findExportByName("KernelBase.dll", "PathCchAddBackslashEx")
Interceptor.attach(PathCchAddBackslashEx, {onLeave: function (args) {send("PathCchAddBackslashEx");}});

var PathCchAddExtension = Module.findExportByName("KernelBase.dll", "PathCchAddExtension")
Interceptor.attach(PathCchAddExtension, {onLeave: function (args) {send("PathCchAddExtension");}});

var PathCchAppend = Module.findExportByName("KernelBase.dll", "PathCchAppend")
Interceptor.attach(PathCchAppend, {onLeave: function (args) {send("PathCchAppend");}});

var PathCchAppendEx = Module.findExportByName("KernelBase.dll", "PathCchAppendEx")
Interceptor.attach(PathCchAppendEx, {onLeave: function (args) {send("PathCchAppendEx");}});

var PathCchCanonicalize = Module.findExportByName("KernelBase.dll", "PathCchCanonicalize")
Interceptor.attach(PathCchCanonicalize, {onLeave: function (args) {send("PathCchCanonicalize");}});

var PathCchCanonicalizeEx = Module.findExportByName("KernelBase.dll", "PathCchCanonicalizeEx")
Interceptor.attach(PathCchCanonicalizeEx, {onLeave: function (args) {send("PathCchCanonicalizeEx");}});

var PathCchCombine = Module.findExportByName("KernelBase.dll", "PathCchCombine")
Interceptor.attach(PathCchCombine, {onLeave: function (args) {send("PathCchCombine");}});

var PathCchCombineEx = Module.findExportByName("KernelBase.dll", "PathCchCombineEx")
Interceptor.attach(PathCchCombineEx, {onLeave: function (args) {send("PathCchCombineEx");}});

var PathCchFindExtension = Module.findExportByName("KernelBase.dll", "PathCchFindExtension")
Interceptor.attach(PathCchFindExtension, {onLeave: function (args) {send("PathCchFindExtension");}});

var PathCchIsRoot = Module.findExportByName("KernelBase.dll", "PathCchIsRoot")
Interceptor.attach(PathCchIsRoot, {onLeave: function (args) {send("PathCchIsRoot");}});

var PathCchRemoveBackslash = Module.findExportByName("KernelBase.dll", "PathCchRemoveBackslash")
Interceptor.attach(PathCchRemoveBackslash, {onLeave: function (args) {send("PathCchRemoveBackslash");}});

var PathCchRemoveBackslashEx = Module.findExportByName("KernelBase.dll", "PathCchRemoveBackslashEx")
Interceptor.attach(PathCchRemoveBackslashEx, {onLeave: function (args) {send("PathCchRemoveBackslashEx");}});

var PathCchRemoveExtension = Module.findExportByName("KernelBase.dll", "PathCchRemoveExtension")
Interceptor.attach(PathCchRemoveExtension, {onLeave: function (args) {send("PathCchRemoveExtension");}});

var PathCchRemoveFileSpec = Module.findExportByName("KernelBase.dll", "PathCchRemoveFileSpec")
Interceptor.attach(PathCchRemoveFileSpec, {onLeave: function (args) {send("PathCchRemoveFileSpec");}});

var PathCchRenameExtension = Module.findExportByName("KernelBase.dll", "PathCchRenameExtension")
Interceptor.attach(PathCchRenameExtension, {onLeave: function (args) {send("PathCchRenameExtension");}});

var PathCchSkipRoot = Module.findExportByName("KernelBase.dll", "PathCchSkipRoot")
Interceptor.attach(PathCchSkipRoot, {onLeave: function (args) {send("PathCchSkipRoot");}});

var PathCchStripPrefix = Module.findExportByName("KernelBase.dll", "PathCchStripPrefix")
Interceptor.attach(PathCchStripPrefix, {onLeave: function (args) {send("PathCchStripPrefix");}});

var PathCchStripToRoot = Module.findExportByName("KernelBase.dll", "PathCchStripToRoot")
Interceptor.attach(PathCchStripToRoot, {onLeave: function (args) {send("PathCchStripToRoot");}});

var PathCombineA = Module.findExportByName("KernelBase.dll", "PathCombineA")
Interceptor.attach(PathCombineA, {onLeave: function (args) {send("PathCombineA");}});

var PathCombineW = Module.findExportByName("KernelBase.dll", "PathCombineW")
Interceptor.attach(PathCombineW, {onLeave: function (args) {send("PathCombineW");}});

var PathCommonPrefixA = Module.findExportByName("KernelBase.dll", "PathCommonPrefixA")
Interceptor.attach(PathCommonPrefixA, {onLeave: function (args) {send("PathCommonPrefixA");}});

var PathCommonPrefixW = Module.findExportByName("KernelBase.dll", "PathCommonPrefixW")
Interceptor.attach(PathCommonPrefixW, {onLeave: function (args) {send("PathCommonPrefixW");}});

var PathCreateFromUrlA = Module.findExportByName("KernelBase.dll", "PathCreateFromUrlA")
Interceptor.attach(PathCreateFromUrlA, {onLeave: function (args) {send("PathCreateFromUrlA");}});

var PathCreateFromUrlAlloc = Module.findExportByName("KernelBase.dll", "PathCreateFromUrlAlloc")
Interceptor.attach(PathCreateFromUrlAlloc, {onLeave: function (args) {send("PathCreateFromUrlAlloc");}});

var PathCreateFromUrlW = Module.findExportByName("KernelBase.dll", "PathCreateFromUrlW")
Interceptor.attach(PathCreateFromUrlW, {onLeave: function (args) {send("PathCreateFromUrlW");}});

var PathFileExistsA = Module.findExportByName("KernelBase.dll", "PathFileExistsA")
Interceptor.attach(PathFileExistsA, {onLeave: function (args) {send("PathFileExistsA");}});

var PathFileExistsW = Module.findExportByName("KernelBase.dll", "PathFileExistsW")
Interceptor.attach(PathFileExistsW, {onLeave: function (args) {send("PathFileExistsW");}});

var PathFindExtensionA = Module.findExportByName("KernelBase.dll", "PathFindExtensionA")
Interceptor.attach(PathFindExtensionA, {onLeave: function (args) {send("PathFindExtensionA");}});

var PathFindExtensionW = Module.findExportByName("KernelBase.dll", "PathFindExtensionW")
Interceptor.attach(PathFindExtensionW, {onLeave: function (args) {send("PathFindExtensionW");}});

var PathFindFileNameA = Module.findExportByName("KernelBase.dll", "PathFindFileNameA")
Interceptor.attach(PathFindFileNameA, {onLeave: function (args) {send("PathFindFileNameA");}});

var PathFindFileNameW = Module.findExportByName("KernelBase.dll", "PathFindFileNameW")
Interceptor.attach(PathFindFileNameW, {onLeave: function (args) {send("PathFindFileNameW");}});

var PathFindNextComponentA = Module.findExportByName("KernelBase.dll", "PathFindNextComponentA")
Interceptor.attach(PathFindNextComponentA, {onLeave: function (args) {send("PathFindNextComponentA");}});

var PathFindNextComponentW = Module.findExportByName("KernelBase.dll", "PathFindNextComponentW")
Interceptor.attach(PathFindNextComponentW, {onLeave: function (args) {send("PathFindNextComponentW");}});

var PathGetArgsA = Module.findExportByName("KernelBase.dll", "PathGetArgsA")
Interceptor.attach(PathGetArgsA, {onLeave: function (args) {send("PathGetArgsA");}});

var PathGetArgsW = Module.findExportByName("KernelBase.dll", "PathGetArgsW")
Interceptor.attach(PathGetArgsW, {onLeave: function (args) {send("PathGetArgsW");}});

var PathGetCharTypeA = Module.findExportByName("KernelBase.dll", "PathGetCharTypeA")
Interceptor.attach(PathGetCharTypeA, {onLeave: function (args) {send("PathGetCharTypeA");}});

var PathGetCharTypeW = Module.findExportByName("KernelBase.dll", "PathGetCharTypeW")
Interceptor.attach(PathGetCharTypeW, {onLeave: function (args) {send("PathGetCharTypeW");}});

var PathGetDriveNumberA = Module.findExportByName("KernelBase.dll", "PathGetDriveNumberA")
Interceptor.attach(PathGetDriveNumberA, {onLeave: function (args) {send("PathGetDriveNumberA");}});

var PathGetDriveNumberW = Module.findExportByName("KernelBase.dll", "PathGetDriveNumberW")
Interceptor.attach(PathGetDriveNumberW, {onLeave: function (args) {send("PathGetDriveNumberW");}});

var PathIsFileSpecA = Module.findExportByName("KernelBase.dll", "PathIsFileSpecA")
Interceptor.attach(PathIsFileSpecA, {onLeave: function (args) {send("PathIsFileSpecA");}});

var PathIsFileSpecW = Module.findExportByName("KernelBase.dll", "PathIsFileSpecW")
Interceptor.attach(PathIsFileSpecW, {onLeave: function (args) {send("PathIsFileSpecW");}});

var PathIsLFNFileSpecA = Module.findExportByName("KernelBase.dll", "PathIsLFNFileSpecA")
Interceptor.attach(PathIsLFNFileSpecA, {onLeave: function (args) {send("PathIsLFNFileSpecA");}});

var PathIsLFNFileSpecW = Module.findExportByName("KernelBase.dll", "PathIsLFNFileSpecW")
Interceptor.attach(PathIsLFNFileSpecW, {onLeave: function (args) {send("PathIsLFNFileSpecW");}});

var PathIsPrefixA = Module.findExportByName("KernelBase.dll", "PathIsPrefixA")
Interceptor.attach(PathIsPrefixA, {onLeave: function (args) {send("PathIsPrefixA");}});

var PathIsPrefixW = Module.findExportByName("KernelBase.dll", "PathIsPrefixW")
Interceptor.attach(PathIsPrefixW, {onLeave: function (args) {send("PathIsPrefixW");}});

var PathIsRelativeA = Module.findExportByName("KernelBase.dll", "PathIsRelativeA")
Interceptor.attach(PathIsRelativeA, {onLeave: function (args) {send("PathIsRelativeA");}});

var PathIsRelativeW = Module.findExportByName("KernelBase.dll", "PathIsRelativeW")
Interceptor.attach(PathIsRelativeW, {onLeave: function (args) {send("PathIsRelativeW");}});

var PathIsRootA = Module.findExportByName("KernelBase.dll", "PathIsRootA")
Interceptor.attach(PathIsRootA, {onLeave: function (args) {send("PathIsRootA");}});

var PathIsRootW = Module.findExportByName("KernelBase.dll", "PathIsRootW")
Interceptor.attach(PathIsRootW, {onLeave: function (args) {send("PathIsRootW");}});

var PathIsSameRootA = Module.findExportByName("KernelBase.dll", "PathIsSameRootA")
Interceptor.attach(PathIsSameRootA, {onLeave: function (args) {send("PathIsSameRootA");}});

var PathIsSameRootW = Module.findExportByName("KernelBase.dll", "PathIsSameRootW")
Interceptor.attach(PathIsSameRootW, {onLeave: function (args) {send("PathIsSameRootW");}});

var PathIsUNCA = Module.findExportByName("KernelBase.dll", "PathIsUNCA")
Interceptor.attach(PathIsUNCA, {onLeave: function (args) {send("PathIsUNCA");}});

var PathIsUNCEx = Module.findExportByName("KernelBase.dll", "PathIsUNCEx")
Interceptor.attach(PathIsUNCEx, {onLeave: function (args) {send("PathIsUNCEx");}});

var PathIsUNCServerA = Module.findExportByName("KernelBase.dll", "PathIsUNCServerA")
Interceptor.attach(PathIsUNCServerA, {onLeave: function (args) {send("PathIsUNCServerA");}});

var PathIsUNCServerShareA = Module.findExportByName("KernelBase.dll", "PathIsUNCServerShareA")
Interceptor.attach(PathIsUNCServerShareA, {onLeave: function (args) {send("PathIsUNCServerShareA");}});

var PathIsUNCServerShareW = Module.findExportByName("KernelBase.dll", "PathIsUNCServerShareW")
Interceptor.attach(PathIsUNCServerShareW, {onLeave: function (args) {send("PathIsUNCServerShareW");}});

var PathIsUNCServerW = Module.findExportByName("KernelBase.dll", "PathIsUNCServerW")
Interceptor.attach(PathIsUNCServerW, {onLeave: function (args) {send("PathIsUNCServerW");}});

var PathIsUNCW = Module.findExportByName("KernelBase.dll", "PathIsUNCW")
Interceptor.attach(PathIsUNCW, {onLeave: function (args) {send("PathIsUNCW");}});

var PathIsURLA = Module.findExportByName("KernelBase.dll", "PathIsURLA")
Interceptor.attach(PathIsURLA, {onLeave: function (args) {send("PathIsURLA");}});

var PathIsURLW = Module.findExportByName("KernelBase.dll", "PathIsURLW")
Interceptor.attach(PathIsURLW, {onLeave: function (args) {send("PathIsURLW");}});

var PathIsValidCharA = Module.findExportByName("KernelBase.dll", "PathIsValidCharA")
Interceptor.attach(PathIsValidCharA, {onLeave: function (args) {send("PathIsValidCharA");}});

var PathIsValidCharW = Module.findExportByName("KernelBase.dll", "PathIsValidCharW")
Interceptor.attach(PathIsValidCharW, {onLeave: function (args) {send("PathIsValidCharW");}});

var PathMatchSpecA = Module.findExportByName("KernelBase.dll", "PathMatchSpecA")
Interceptor.attach(PathMatchSpecA, {onLeave: function (args) {send("PathMatchSpecA");}});

var PathMatchSpecExA = Module.findExportByName("KernelBase.dll", "PathMatchSpecExA")
Interceptor.attach(PathMatchSpecExA, {onLeave: function (args) {send("PathMatchSpecExA");}});

var PathMatchSpecExW = Module.findExportByName("KernelBase.dll", "PathMatchSpecExW")
Interceptor.attach(PathMatchSpecExW, {onLeave: function (args) {send("PathMatchSpecExW");}});

var PathMatchSpecW = Module.findExportByName("KernelBase.dll", "PathMatchSpecW")
Interceptor.attach(PathMatchSpecW, {onLeave: function (args) {send("PathMatchSpecW");}});

var PathParseIconLocationA = Module.findExportByName("KernelBase.dll", "PathParseIconLocationA")
Interceptor.attach(PathParseIconLocationA, {onLeave: function (args) {send("PathParseIconLocationA");}});

var PathParseIconLocationW = Module.findExportByName("KernelBase.dll", "PathParseIconLocationW")
Interceptor.attach(PathParseIconLocationW, {onLeave: function (args) {send("PathParseIconLocationW");}});

var PathQuoteSpacesA = Module.findExportByName("KernelBase.dll", "PathQuoteSpacesA")
Interceptor.attach(PathQuoteSpacesA, {onLeave: function (args) {send("PathQuoteSpacesA");}});

var PathQuoteSpacesW = Module.findExportByName("KernelBase.dll", "PathQuoteSpacesW")
Interceptor.attach(PathQuoteSpacesW, {onLeave: function (args) {send("PathQuoteSpacesW");}});

var PathRelativePathToA = Module.findExportByName("KernelBase.dll", "PathRelativePathToA")
Interceptor.attach(PathRelativePathToA, {onLeave: function (args) {send("PathRelativePathToA");}});

var PathRelativePathToW = Module.findExportByName("KernelBase.dll", "PathRelativePathToW")
Interceptor.attach(PathRelativePathToW, {onLeave: function (args) {send("PathRelativePathToW");}});

var PathRemoveBackslashA = Module.findExportByName("KernelBase.dll", "PathRemoveBackslashA")
Interceptor.attach(PathRemoveBackslashA, {onLeave: function (args) {send("PathRemoveBackslashA");}});

var PathRemoveBackslashW = Module.findExportByName("KernelBase.dll", "PathRemoveBackslashW")
Interceptor.attach(PathRemoveBackslashW, {onLeave: function (args) {send("PathRemoveBackslashW");}});

var PathRemoveBlanksA = Module.findExportByName("KernelBase.dll", "PathRemoveBlanksA")
Interceptor.attach(PathRemoveBlanksA, {onLeave: function (args) {send("PathRemoveBlanksA");}});

var PathRemoveBlanksW = Module.findExportByName("KernelBase.dll", "PathRemoveBlanksW")
Interceptor.attach(PathRemoveBlanksW, {onLeave: function (args) {send("PathRemoveBlanksW");}});

var PathRemoveExtensionA = Module.findExportByName("KernelBase.dll", "PathRemoveExtensionA")
Interceptor.attach(PathRemoveExtensionA, {onLeave: function (args) {send("PathRemoveExtensionA");}});

var PathRemoveExtensionW = Module.findExportByName("KernelBase.dll", "PathRemoveExtensionW")
Interceptor.attach(PathRemoveExtensionW, {onLeave: function (args) {send("PathRemoveExtensionW");}});

var PathRemoveFileSpecA = Module.findExportByName("KernelBase.dll", "PathRemoveFileSpecA")
Interceptor.attach(PathRemoveFileSpecA, {onLeave: function (args) {send("PathRemoveFileSpecA");}});

var PathRemoveFileSpecW = Module.findExportByName("KernelBase.dll", "PathRemoveFileSpecW")
Interceptor.attach(PathRemoveFileSpecW, {onLeave: function (args) {send("PathRemoveFileSpecW");}});

var PathRenameExtensionA = Module.findExportByName("KernelBase.dll", "PathRenameExtensionA")
Interceptor.attach(PathRenameExtensionA, {onLeave: function (args) {send("PathRenameExtensionA");}});

var PathRenameExtensionW = Module.findExportByName("KernelBase.dll", "PathRenameExtensionW")
Interceptor.attach(PathRenameExtensionW, {onLeave: function (args) {send("PathRenameExtensionW");}});

var PathSearchAndQualifyA = Module.findExportByName("KernelBase.dll", "PathSearchAndQualifyA")
Interceptor.attach(PathSearchAndQualifyA, {onLeave: function (args) {send("PathSearchAndQualifyA");}});

var PathSearchAndQualifyW = Module.findExportByName("KernelBase.dll", "PathSearchAndQualifyW")
Interceptor.attach(PathSearchAndQualifyW, {onLeave: function (args) {send("PathSearchAndQualifyW");}});

var PathSkipRootA = Module.findExportByName("KernelBase.dll", "PathSkipRootA")
Interceptor.attach(PathSkipRootA, {onLeave: function (args) {send("PathSkipRootA");}});

var PathSkipRootW = Module.findExportByName("KernelBase.dll", "PathSkipRootW")
Interceptor.attach(PathSkipRootW, {onLeave: function (args) {send("PathSkipRootW");}});

var PathStripPathA = Module.findExportByName("KernelBase.dll", "PathStripPathA")
Interceptor.attach(PathStripPathA, {onLeave: function (args) {send("PathStripPathA");}});

var PathStripPathW = Module.findExportByName("KernelBase.dll", "PathStripPathW")
Interceptor.attach(PathStripPathW, {onLeave: function (args) {send("PathStripPathW");}});

var PathStripToRootA = Module.findExportByName("KernelBase.dll", "PathStripToRootA")
Interceptor.attach(PathStripToRootA, {onLeave: function (args) {send("PathStripToRootA");}});

var PathStripToRootW = Module.findExportByName("KernelBase.dll", "PathStripToRootW")
Interceptor.attach(PathStripToRootW, {onLeave: function (args) {send("PathStripToRootW");}});

var PathUnExpandEnvStringsA = Module.findExportByName("KernelBase.dll", "PathUnExpandEnvStringsA")
Interceptor.attach(PathUnExpandEnvStringsA, {onLeave: function (args) {send("PathUnExpandEnvStringsA");}});

var PathUnExpandEnvStringsW = Module.findExportByName("KernelBase.dll", "PathUnExpandEnvStringsW")
Interceptor.attach(PathUnExpandEnvStringsW, {onLeave: function (args) {send("PathUnExpandEnvStringsW");}});

var PathUnquoteSpacesA = Module.findExportByName("KernelBase.dll", "PathUnquoteSpacesA")
Interceptor.attach(PathUnquoteSpacesA, {onLeave: function (args) {send("PathUnquoteSpacesA");}});

var PathUnquoteSpacesW = Module.findExportByName("KernelBase.dll", "PathUnquoteSpacesW")
Interceptor.attach(PathUnquoteSpacesW, {onLeave: function (args) {send("PathUnquoteSpacesW");}});

var PcwAddQueryItem = Module.findExportByName("KernelBase.dll", "PcwAddQueryItem")
Interceptor.attach(PcwAddQueryItem, {onLeave: function (args) {send("PcwAddQueryItem");}});

var PcwClearCounterSetSecurity = Module.findExportByName("KernelBase.dll", "PcwClearCounterSetSecurity")
Interceptor.attach(PcwClearCounterSetSecurity, {onLeave: function (args) {send("PcwClearCounterSetSecurity");}});

var PcwCollectData = Module.findExportByName("KernelBase.dll", "PcwCollectData")
Interceptor.attach(PcwCollectData, {onLeave: function (args) {send("PcwCollectData");}});

var PcwCompleteNotification = Module.findExportByName("KernelBase.dll", "PcwCompleteNotification")
Interceptor.attach(PcwCompleteNotification, {onLeave: function (args) {send("PcwCompleteNotification");}});

var PcwCreateNotifier = Module.findExportByName("KernelBase.dll", "PcwCreateNotifier")
Interceptor.attach(PcwCreateNotifier, {onLeave: function (args) {send("PcwCreateNotifier");}});

var PcwCreateQuery = Module.findExportByName("KernelBase.dll", "PcwCreateQuery")
Interceptor.attach(PcwCreateQuery, {onLeave: function (args) {send("PcwCreateQuery");}});

var PcwDisconnectCounterSet = Module.findExportByName("KernelBase.dll", "PcwDisconnectCounterSet")
Interceptor.attach(PcwDisconnectCounterSet, {onLeave: function (args) {send("PcwDisconnectCounterSet");}});

var PcwEnumerateInstances = Module.findExportByName("KernelBase.dll", "PcwEnumerateInstances")
Interceptor.attach(PcwEnumerateInstances, {onLeave: function (args) {send("PcwEnumerateInstances");}});

var PcwIsNotifierAlive = Module.findExportByName("KernelBase.dll", "PcwIsNotifierAlive")
Interceptor.attach(PcwIsNotifierAlive, {onLeave: function (args) {send("PcwIsNotifierAlive");}});

var PcwQueryCounterSetSecurity = Module.findExportByName("KernelBase.dll", "PcwQueryCounterSetSecurity")
Interceptor.attach(PcwQueryCounterSetSecurity, {onLeave: function (args) {send("PcwQueryCounterSetSecurity");}});

var PcwReadNotificationData = Module.findExportByName("KernelBase.dll", "PcwReadNotificationData")
Interceptor.attach(PcwReadNotificationData, {onLeave: function (args) {send("PcwReadNotificationData");}});

var PcwRegisterCounterSet = Module.findExportByName("KernelBase.dll", "PcwRegisterCounterSet")
Interceptor.attach(PcwRegisterCounterSet, {onLeave: function (args) {send("PcwRegisterCounterSet");}});

var PcwRemoveQueryItem = Module.findExportByName("KernelBase.dll", "PcwRemoveQueryItem")
Interceptor.attach(PcwRemoveQueryItem, {onLeave: function (args) {send("PcwRemoveQueryItem");}});

var PcwSendNotification = Module.findExportByName("KernelBase.dll", "PcwSendNotification")
Interceptor.attach(PcwSendNotification, {onLeave: function (args) {send("PcwSendNotification");}});

var PcwSendStatelessNotification = Module.findExportByName("KernelBase.dll", "PcwSendStatelessNotification")
Interceptor.attach(PcwSendStatelessNotification, {onLeave: function (args) {send("PcwSendStatelessNotification");}});

var PcwSetCounterSetSecurity = Module.findExportByName("KernelBase.dll", "PcwSetCounterSetSecurity")
Interceptor.attach(PcwSetCounterSetSecurity, {onLeave: function (args) {send("PcwSetCounterSetSecurity");}});

var PcwSetQueryItemUserData = Module.findExportByName("KernelBase.dll", "PcwSetQueryItemUserData")
Interceptor.attach(PcwSetQueryItemUserData, {onLeave: function (args) {send("PcwSetQueryItemUserData");}});

var PeekConsoleInputA = Module.findExportByName("KernelBase.dll", "PeekConsoleInputA")
Interceptor.attach(PeekConsoleInputA, {onLeave: function (args) {send("PeekConsoleInputA");}});

var PeekConsoleInputW = Module.findExportByName("KernelBase.dll", "PeekConsoleInputW")
Interceptor.attach(PeekConsoleInputW, {onLeave: function (args) {send("PeekConsoleInputW");}});

var PeekNamedPipe = Module.findExportByName("KernelBase.dll", "PeekNamedPipe")
Interceptor.attach(PeekNamedPipe, {onLeave: function (args) {send("PeekNamedPipe");}});

var PerfCreateInstance = Module.findExportByName("KernelBase.dll", "PerfCreateInstance")
Interceptor.attach(PerfCreateInstance, {onLeave: function (args) {send("PerfCreateInstance");}});

var PerfDecrementULongCounterValue = Module.findExportByName("KernelBase.dll", "PerfDecrementULongCounterValue")
Interceptor.attach(PerfDecrementULongCounterValue, {onLeave: function (args) {send("PerfDecrementULongCounterValue");}});

var PerfDecrementULongLongCounterValue = Module.findExportByName("KernelBase.dll", "PerfDecrementULongLongCounterValue")
Interceptor.attach(PerfDecrementULongLongCounterValue, {onLeave: function (args) {send("PerfDecrementULongLongCounterValue");}});

var PerfDeleteInstance = Module.findExportByName("KernelBase.dll", "PerfDeleteInstance")
Interceptor.attach(PerfDeleteInstance, {onLeave: function (args) {send("PerfDeleteInstance");}});

var PerfIncrementULongCounterValue = Module.findExportByName("KernelBase.dll", "PerfIncrementULongCounterValue")
Interceptor.attach(PerfIncrementULongCounterValue, {onLeave: function (args) {send("PerfIncrementULongCounterValue");}});

var PerfIncrementULongLongCounterValue = Module.findExportByName("KernelBase.dll", "PerfIncrementULongLongCounterValue")
Interceptor.attach(PerfIncrementULongLongCounterValue, {onLeave: function (args) {send("PerfIncrementULongLongCounterValue");}});

var PerfQueryInstance = Module.findExportByName("KernelBase.dll", "PerfQueryInstance")
Interceptor.attach(PerfQueryInstance, {onLeave: function (args) {send("PerfQueryInstance");}});

var PerfSetCounterRefValue = Module.findExportByName("KernelBase.dll", "PerfSetCounterRefValue")
Interceptor.attach(PerfSetCounterRefValue, {onLeave: function (args) {send("PerfSetCounterRefValue");}});

var PerfSetCounterSetInfo = Module.findExportByName("KernelBase.dll", "PerfSetCounterSetInfo")
Interceptor.attach(PerfSetCounterSetInfo, {onLeave: function (args) {send("PerfSetCounterSetInfo");}});

var PerfSetULongCounterValue = Module.findExportByName("KernelBase.dll", "PerfSetULongCounterValue")
Interceptor.attach(PerfSetULongCounterValue, {onLeave: function (args) {send("PerfSetULongCounterValue");}});

var PerfSetULongLongCounterValue = Module.findExportByName("KernelBase.dll", "PerfSetULongLongCounterValue")
Interceptor.attach(PerfSetULongLongCounterValue, {onLeave: function (args) {send("PerfSetULongLongCounterValue");}});

var PerfStartProvider = Module.findExportByName("KernelBase.dll", "PerfStartProvider")
Interceptor.attach(PerfStartProvider, {onLeave: function (args) {send("PerfStartProvider");}});

var PerfStartProviderEx = Module.findExportByName("KernelBase.dll", "PerfStartProviderEx")
Interceptor.attach(PerfStartProviderEx, {onLeave: function (args) {send("PerfStartProviderEx");}});

var PerfStopProvider = Module.findExportByName("KernelBase.dll", "PerfStopProvider")
Interceptor.attach(PerfStopProvider, {onLeave: function (args) {send("PerfStopProvider");}});

var PoolPerAppKeyStateInternal = Module.findExportByName("KernelBase.dll", "PoolPerAppKeyStateInternal")
Interceptor.attach(PoolPerAppKeyStateInternal, {onLeave: function (args) {send("PoolPerAppKeyStateInternal");}});

var PopIoRingCompletion = Module.findExportByName("KernelBase.dll", "PopIoRingCompletion")
Interceptor.attach(PopIoRingCompletion, {onLeave: function (args) {send("PopIoRingCompletion");}});

var PostQueuedCompletionStatus = Module.findExportByName("KernelBase.dll", "PostQueuedCompletionStatus")
Interceptor.attach(PostQueuedCompletionStatus, {onLeave: function (args) {send("PostQueuedCompletionStatus");}});

var PrefetchVirtualMemory = Module.findExportByName("KernelBase.dll", "PrefetchVirtualMemory")
Interceptor.attach(PrefetchVirtualMemory, {onLeave: function (args) {send("PrefetchVirtualMemory");}});

var PrivCopyFileExW = Module.findExportByName("KernelBase.dll", "PrivCopyFileExW")
Interceptor.attach(PrivCopyFileExW, {onLeave: function (args) {send("PrivCopyFileExW");}});

var PrivilegeCheck = Module.findExportByName("KernelBase.dll", "PrivilegeCheck")
Interceptor.attach(PrivilegeCheck, {onLeave: function (args) {send("PrivilegeCheck");}});

var PrivilegedServiceAuditAlarmW = Module.findExportByName("KernelBase.dll", "PrivilegedServiceAuditAlarmW")
Interceptor.attach(PrivilegedServiceAuditAlarmW, {onLeave: function (args) {send("PrivilegedServiceAuditAlarmW");}});

var ProcessIdToSessionId = Module.findExportByName("KernelBase.dll", "ProcessIdToSessionId")
Interceptor.attach(ProcessIdToSessionId, {onLeave: function (args) {send("ProcessIdToSessionId");}});

var ProductIdFromPackageFamilyName = Module.findExportByName("KernelBase.dll", "ProductIdFromPackageFamilyName")
Interceptor.attach(ProductIdFromPackageFamilyName, {onLeave: function (args) {send("ProductIdFromPackageFamilyName");}});

var PsmCreateKey = Module.findExportByName("KernelBase.dll", "PsmCreateKey")
Interceptor.attach(PsmCreateKey, {onLeave: function (args) {send("PsmCreateKey");}});

var PsmCreateKeyWithDynamicId = Module.findExportByName("KernelBase.dll", "PsmCreateKeyWithDynamicId")
Interceptor.attach(PsmCreateKeyWithDynamicId, {onLeave: function (args) {send("PsmCreateKeyWithDynamicId");}});

var PsmEqualApplication = Module.findExportByName("KernelBase.dll", "PsmEqualApplication")
Interceptor.attach(PsmEqualApplication, {onLeave: function (args) {send("PsmEqualApplication");}});

var PsmEqualPackage = Module.findExportByName("KernelBase.dll", "PsmEqualPackage")
Interceptor.attach(PsmEqualPackage, {onLeave: function (args) {send("PsmEqualPackage");}});

var PsmGetApplicationNameFromKey = Module.findExportByName("KernelBase.dll", "PsmGetApplicationNameFromKey")
Interceptor.attach(PsmGetApplicationNameFromKey, {onLeave: function (args) {send("PsmGetApplicationNameFromKey");}});

var PsmGetAumidFromKey = Module.findExportByName("KernelBase.dll", "PsmGetAumidFromKey")
Interceptor.attach(PsmGetAumidFromKey, {onLeave: function (args) {send("PsmGetAumidFromKey");}});

var PsmGetDynamicIdFromKey = Module.findExportByName("KernelBase.dll", "PsmGetDynamicIdFromKey")
Interceptor.attach(PsmGetDynamicIdFromKey, {onLeave: function (args) {send("PsmGetDynamicIdFromKey");}});

var PsmGetKeyFromProcess = Module.findExportByName("KernelBase.dll", "PsmGetKeyFromProcess")
Interceptor.attach(PsmGetKeyFromProcess, {onLeave: function (args) {send("PsmGetKeyFromProcess");}});

var PsmGetKeyFromToken = Module.findExportByName("KernelBase.dll", "PsmGetKeyFromToken")
Interceptor.attach(PsmGetKeyFromToken, {onLeave: function (args) {send("PsmGetKeyFromToken");}});

var PsmGetPackageFullNameFromKey = Module.findExportByName("KernelBase.dll", "PsmGetPackageFullNameFromKey")
Interceptor.attach(PsmGetPackageFullNameFromKey, {onLeave: function (args) {send("PsmGetPackageFullNameFromKey");}});

var PsmIsChildKey = Module.findExportByName("KernelBase.dll", "PsmIsChildKey")
Interceptor.attach(PsmIsChildKey, {onLeave: function (args) {send("PsmIsChildKey");}});

var PsmIsDynamicKey = Module.findExportByName("KernelBase.dll", "PsmIsDynamicKey")
Interceptor.attach(PsmIsDynamicKey, {onLeave: function (args) {send("PsmIsDynamicKey");}});

var PsmIsValidKey = Module.findExportByName("KernelBase.dll", "PsmIsValidKey")
Interceptor.attach(PsmIsValidKey, {onLeave: function (args) {send("PsmIsValidKey");}});

var PssCaptureSnapshot = Module.findExportByName("KernelBase.dll", "PssCaptureSnapshot")
Interceptor.attach(PssCaptureSnapshot, {onLeave: function (args) {send("PssCaptureSnapshot");}});

var PssDuplicateSnapshot = Module.findExportByName("KernelBase.dll", "PssDuplicateSnapshot")
Interceptor.attach(PssDuplicateSnapshot, {onLeave: function (args) {send("PssDuplicateSnapshot");}});

var PssFreeSnapshot = Module.findExportByName("KernelBase.dll", "PssFreeSnapshot")
Interceptor.attach(PssFreeSnapshot, {onLeave: function (args) {send("PssFreeSnapshot");}});

var PssQuerySnapshot = Module.findExportByName("KernelBase.dll", "PssQuerySnapshot")
Interceptor.attach(PssQuerySnapshot, {onLeave: function (args) {send("PssQuerySnapshot");}});

var PssWalkMarkerCreate = Module.findExportByName("KernelBase.dll", "PssWalkMarkerCreate")
Interceptor.attach(PssWalkMarkerCreate, {onLeave: function (args) {send("PssWalkMarkerCreate");}});

var PssWalkMarkerFree = Module.findExportByName("KernelBase.dll", "PssWalkMarkerFree")
Interceptor.attach(PssWalkMarkerFree, {onLeave: function (args) {send("PssWalkMarkerFree");}});

var PssWalkMarkerGetPosition = Module.findExportByName("KernelBase.dll", "PssWalkMarkerGetPosition")
Interceptor.attach(PssWalkMarkerGetPosition, {onLeave: function (args) {send("PssWalkMarkerGetPosition");}});

var PssWalkMarkerSeekToBeginning = Module.findExportByName("KernelBase.dll", "PssWalkMarkerSeekToBeginning")
Interceptor.attach(PssWalkMarkerSeekToBeginning, {onLeave: function (args) {send("PssWalkMarkerSeekToBeginning");}});

var PssWalkMarkerSetPosition = Module.findExportByName("KernelBase.dll", "PssWalkMarkerSetPosition")
Interceptor.attach(PssWalkMarkerSetPosition, {onLeave: function (args) {send("PssWalkMarkerSetPosition");}});

var PssWalkSnapshot = Module.findExportByName("KernelBase.dll", "PssWalkSnapshot")
Interceptor.attach(PssWalkSnapshot, {onLeave: function (args) {send("PssWalkSnapshot");}});

var PublishStateChangeNotification = Module.findExportByName("KernelBase.dll", "PublishStateChangeNotification")
Interceptor.attach(PublishStateChangeNotification, {onLeave: function (args) {send("PublishStateChangeNotification");}});

var PublisherFromPackageFullName = Module.findExportByName("KernelBase.dll", "PublisherFromPackageFullName")
Interceptor.attach(PublisherFromPackageFullName, {onLeave: function (args) {send("PublisherFromPackageFullName");}});

var PulseEvent = Module.findExportByName("KernelBase.dll", "PulseEvent")
Interceptor.attach(PulseEvent, {onLeave: function (args) {send("PulseEvent");}});

var PurgeComm = Module.findExportByName("KernelBase.dll", "PurgeComm")
Interceptor.attach(PurgeComm, {onLeave: function (args) {send("PurgeComm");}});

var QISearch = Module.findExportByName("KernelBase.dll", "QISearch")
Interceptor.attach(QISearch, {onLeave: function (args) {send("QISearch");}});

var QueryActCtxSettingsW = Module.findExportByName("KernelBase.dll", "QueryActCtxSettingsW")
Interceptor.attach(QueryActCtxSettingsW, {onLeave: function (args) {send("QueryActCtxSettingsW");}});

var QueryActCtxW = Module.findExportByName("KernelBase.dll", "QueryActCtxW")
Interceptor.attach(QueryActCtxW, {onLeave: function (args) {send("QueryActCtxW");}});

var QueryAuxiliaryCounterFrequency = Module.findExportByName("KernelBase.dll", "QueryAuxiliaryCounterFrequency")
Interceptor.attach(QueryAuxiliaryCounterFrequency, {onLeave: function (args) {send("QueryAuxiliaryCounterFrequency");}});

var QueryDepthSList = Module.findExportByName("KernelBase.dll", "QueryDepthSList")
Interceptor.attach(QueryDepthSList, {onLeave: function (args) {send("QueryDepthSList");}});

var QueryDosDeviceW = Module.findExportByName("KernelBase.dll", "QueryDosDeviceW")
Interceptor.attach(QueryDosDeviceW, {onLeave: function (args) {send("QueryDosDeviceW");}});

var QueryFullProcessImageNameA = Module.findExportByName("KernelBase.dll", "QueryFullProcessImageNameA")
Interceptor.attach(QueryFullProcessImageNameA, {onLeave: function (args) {send("QueryFullProcessImageNameA");}});

var QueryFullProcessImageNameW = Module.findExportByName("KernelBase.dll", "QueryFullProcessImageNameW")
Interceptor.attach(QueryFullProcessImageNameW, {onLeave: function (args) {send("QueryFullProcessImageNameW");}});

var QueryGlobalizationUserSettingsStatus = Module.findExportByName("KernelBase.dll", "QueryGlobalizationUserSettingsStatus")
Interceptor.attach(QueryGlobalizationUserSettingsStatus, {onLeave: function (args) {send("QueryGlobalizationUserSettingsStatus");}});

var QueryIdleProcessorCycleTime = Module.findExportByName("KernelBase.dll", "QueryIdleProcessorCycleTime")
Interceptor.attach(QueryIdleProcessorCycleTime, {onLeave: function (args) {send("QueryIdleProcessorCycleTime");}});

var QueryIdleProcessorCycleTimeEx = Module.findExportByName("KernelBase.dll", "QueryIdleProcessorCycleTimeEx")
Interceptor.attach(QueryIdleProcessorCycleTimeEx, {onLeave: function (args) {send("QueryIdleProcessorCycleTimeEx");}});

var QueryInterruptTime = Module.findExportByName("KernelBase.dll", "QueryInterruptTime")
Interceptor.attach(QueryInterruptTime, {onLeave: function (args) {send("QueryInterruptTime");}});

var QueryInterruptTimePrecise = Module.findExportByName("KernelBase.dll", "QueryInterruptTimePrecise")
Interceptor.attach(QueryInterruptTimePrecise, {onLeave: function (args) {send("QueryInterruptTimePrecise");}});

var QueryIoRingCapabilities = Module.findExportByName("KernelBase.dll", "QueryIoRingCapabilities")
Interceptor.attach(QueryIoRingCapabilities, {onLeave: function (args) {send("QueryIoRingCapabilities");}});

var QueryMemoryResourceNotification = Module.findExportByName("KernelBase.dll", "QueryMemoryResourceNotification")
Interceptor.attach(QueryMemoryResourceNotification, {onLeave: function (args) {send("QueryMemoryResourceNotification");}});

var QueryOptionalDelayLoadedAPI = Module.findExportByName("KernelBase.dll", "QueryOptionalDelayLoadedAPI")
Interceptor.attach(QueryOptionalDelayLoadedAPI, {onLeave: function (args) {send("QueryOptionalDelayLoadedAPI");}});

var QueryPartitionInformation = Module.findExportByName("KernelBase.dll", "QueryPartitionInformation")
Interceptor.attach(QueryPartitionInformation, {onLeave: function (args) {send("QueryPartitionInformation");}});

var QueryPerformanceCounter = Module.findExportByName("KernelBase.dll", "QueryPerformanceCounter")
Interceptor.attach(QueryPerformanceCounter, {onLeave: function (args) {send("QueryPerformanceCounter");}});

var QueryPerformanceFrequency = Module.findExportByName("KernelBase.dll", "QueryPerformanceFrequency")
Interceptor.attach(QueryPerformanceFrequency, {onLeave: function (args) {send("QueryPerformanceFrequency");}});

var QueryProcessAffinityUpdateMode = Module.findExportByName("KernelBase.dll", "QueryProcessAffinityUpdateMode")
Interceptor.attach(QueryProcessAffinityUpdateMode, {onLeave: function (args) {send("QueryProcessAffinityUpdateMode");}});

var QueryProcessCycleTime = Module.findExportByName("KernelBase.dll", "QueryProcessCycleTime")
Interceptor.attach(QueryProcessCycleTime, {onLeave: function (args) {send("QueryProcessCycleTime");}});

var QueryProtectedPolicy = Module.findExportByName("KernelBase.dll", "QueryProtectedPolicy")
Interceptor.attach(QueryProtectedPolicy, {onLeave: function (args) {send("QueryProtectedPolicy");}});

var QuerySecurityAccessMask = Module.findExportByName("KernelBase.dll", "QuerySecurityAccessMask")
Interceptor.attach(QuerySecurityAccessMask, {onLeave: function (args) {send("QuerySecurityAccessMask");}});

var QueryStateAtomValueInfo = Module.findExportByName("KernelBase.dll", "QueryStateAtomValueInfo")
Interceptor.attach(QueryStateAtomValueInfo, {onLeave: function (args) {send("QueryStateAtomValueInfo");}});

var QueryStateContainerCreatedNew = Module.findExportByName("KernelBase.dll", "QueryStateContainerCreatedNew")
Interceptor.attach(QueryStateContainerCreatedNew, {onLeave: function (args) {send("QueryStateContainerCreatedNew");}});

var QueryStateContainerItemInfo = Module.findExportByName("KernelBase.dll", "QueryStateContainerItemInfo")
Interceptor.attach(QueryStateContainerItemInfo, {onLeave: function (args) {send("QueryStateContainerItemInfo");}});

var QueryThreadCycleTime = Module.findExportByName("KernelBase.dll", "QueryThreadCycleTime")
Interceptor.attach(QueryThreadCycleTime, {onLeave: function (args) {send("QueryThreadCycleTime");}});

var QueryThreadpoolStackInformation = Module.findExportByName("KernelBase.dll", "QueryThreadpoolStackInformation")
Interceptor.attach(QueryThreadpoolStackInformation, {onLeave: function (args) {send("QueryThreadpoolStackInformation");}});

var QueryUnbiasedInterruptTime = Module.findExportByName("KernelBase.dll", "QueryUnbiasedInterruptTime")
Interceptor.attach(QueryUnbiasedInterruptTime, {onLeave: function (args) {send("QueryUnbiasedInterruptTime");}});

var QueryUnbiasedInterruptTimePrecise = Module.findExportByName("KernelBase.dll", "QueryUnbiasedInterruptTimePrecise")
Interceptor.attach(QueryUnbiasedInterruptTimePrecise, {onLeave: function (args) {send("QueryUnbiasedInterruptTimePrecise");}});

var QueryVirtualMemoryInformation = Module.findExportByName("KernelBase.dll", "QueryVirtualMemoryInformation")
Interceptor.attach(QueryVirtualMemoryInformation, {onLeave: function (args) {send("QueryVirtualMemoryInformation");}});

var QueryWorkingSet = Module.findExportByName("KernelBase.dll", "QueryWorkingSet")
Interceptor.attach(QueryWorkingSet, {onLeave: function (args) {send("QueryWorkingSet");}});

var QueryWorkingSetEx = Module.findExportByName("KernelBase.dll", "QueryWorkingSetEx")
Interceptor.attach(QueryWorkingSetEx, {onLeave: function (args) {send("QueryWorkingSetEx");}});

var QueueUserAPC = Module.findExportByName("KernelBase.dll", "QueueUserAPC")
Interceptor.attach(QueueUserAPC, {onLeave: function (args) {send("QueueUserAPC");}});

var QueueUserAPC2 = Module.findExportByName("KernelBase.dll", "QueueUserAPC2")
Interceptor.attach(QueueUserAPC2, {onLeave: function (args) {send("QueueUserAPC2");}});

var QueueUserWorkItem = Module.findExportByName("KernelBase.dll", "QueueUserWorkItem")
Interceptor.attach(QueueUserWorkItem, {onLeave: function (args) {send("QueueUserWorkItem");}});

var QuirkGetData = Module.findExportByName("KernelBase.dll", "QuirkGetData")
Interceptor.attach(QuirkGetData, {onLeave: function (args) {send("QuirkGetData");}});

var QuirkGetData2 = Module.findExportByName("KernelBase.dll", "QuirkGetData2")
Interceptor.attach(QuirkGetData2, {onLeave: function (args) {send("QuirkGetData2");}});

var QuirkIsEnabled = Module.findExportByName("KernelBase.dll", "QuirkIsEnabled")
Interceptor.attach(QuirkIsEnabled, {onLeave: function (args) {send("QuirkIsEnabled");}});

var QuirkIsEnabled2 = Module.findExportByName("KernelBase.dll", "QuirkIsEnabled2")
Interceptor.attach(QuirkIsEnabled2, {onLeave: function (args) {send("QuirkIsEnabled2");}});

var QuirkIsEnabled3 = Module.findExportByName("KernelBase.dll", "QuirkIsEnabled3")
Interceptor.attach(QuirkIsEnabled3, {onLeave: function (args) {send("QuirkIsEnabled3");}});

var QuirkIsEnabledForPackage = Module.findExportByName("KernelBase.dll", "QuirkIsEnabledForPackage")
Interceptor.attach(QuirkIsEnabledForPackage, {onLeave: function (args) {send("QuirkIsEnabledForPackage");}});

var QuirkIsEnabledForPackage2 = Module.findExportByName("KernelBase.dll", "QuirkIsEnabledForPackage2")
Interceptor.attach(QuirkIsEnabledForPackage2, {onLeave: function (args) {send("QuirkIsEnabledForPackage2");}});

var QuirkIsEnabledForPackage3 = Module.findExportByName("KernelBase.dll", "QuirkIsEnabledForPackage3")
Interceptor.attach(QuirkIsEnabledForPackage3, {onLeave: function (args) {send("QuirkIsEnabledForPackage3");}});

var QuirkIsEnabledForPackage4 = Module.findExportByName("KernelBase.dll", "QuirkIsEnabledForPackage4")
Interceptor.attach(QuirkIsEnabledForPackage4, {onLeave: function (args) {send("QuirkIsEnabledForPackage4");}});

var QuirkIsEnabledForProcess = Module.findExportByName("KernelBase.dll", "QuirkIsEnabledForProcess")
Interceptor.attach(QuirkIsEnabledForProcess, {onLeave: function (args) {send("QuirkIsEnabledForProcess");}});

var RaiseCustomSystemEventTrigger = Module.findExportByName("KernelBase.dll", "RaiseCustomSystemEventTrigger")
Interceptor.attach(RaiseCustomSystemEventTrigger, {onLeave: function (args) {send("RaiseCustomSystemEventTrigger");}});

var RaiseException = Module.findExportByName("KernelBase.dll", "RaiseException")
Interceptor.attach(RaiseException, {onLeave: function (args) {send("RaiseException");}});

var RaiseFailFastException = Module.findExportByName("KernelBase.dll", "RaiseFailFastException")
Interceptor.attach(RaiseFailFastException, {onLeave: function (args) {send("RaiseFailFastException");}});

var ReOpenFile = Module.findExportByName("KernelBase.dll", "ReOpenFile")
Interceptor.attach(ReOpenFile, {onLeave: function (args) {send("ReOpenFile");}});

var ReadConsoleA = Module.findExportByName("KernelBase.dll", "ReadConsoleA")
Interceptor.attach(ReadConsoleA, {onLeave: function (args) {send("ReadConsoleA");}});

var ReadConsoleInputA = Module.findExportByName("KernelBase.dll", "ReadConsoleInputA")
Interceptor.attach(ReadConsoleInputA, {onLeave: function (args) {send("ReadConsoleInputA");}});

var ReadConsoleInputExA = Module.findExportByName("KernelBase.dll", "ReadConsoleInputExA")
Interceptor.attach(ReadConsoleInputExA, {onLeave: function (args) {send("ReadConsoleInputExA");}});

var ReadConsoleInputExW = Module.findExportByName("KernelBase.dll", "ReadConsoleInputExW")
Interceptor.attach(ReadConsoleInputExW, {onLeave: function (args) {send("ReadConsoleInputExW");}});

var ReadConsoleInputW = Module.findExportByName("KernelBase.dll", "ReadConsoleInputW")
Interceptor.attach(ReadConsoleInputW, {onLeave: function (args) {send("ReadConsoleInputW");}});

var ReadConsoleOutputA = Module.findExportByName("KernelBase.dll", "ReadConsoleOutputA")
Interceptor.attach(ReadConsoleOutputA, {onLeave: function (args) {send("ReadConsoleOutputA");}});

var ReadConsoleOutputAttribute = Module.findExportByName("KernelBase.dll", "ReadConsoleOutputAttribute")
Interceptor.attach(ReadConsoleOutputAttribute, {onLeave: function (args) {send("ReadConsoleOutputAttribute");}});

var ReadConsoleOutputCharacterA = Module.findExportByName("KernelBase.dll", "ReadConsoleOutputCharacterA")
Interceptor.attach(ReadConsoleOutputCharacterA, {onLeave: function (args) {send("ReadConsoleOutputCharacterA");}});

var ReadConsoleOutputCharacterW = Module.findExportByName("KernelBase.dll", "ReadConsoleOutputCharacterW")
Interceptor.attach(ReadConsoleOutputCharacterW, {onLeave: function (args) {send("ReadConsoleOutputCharacterW");}});

var ReadConsoleOutputW = Module.findExportByName("KernelBase.dll", "ReadConsoleOutputW")
Interceptor.attach(ReadConsoleOutputW, {onLeave: function (args) {send("ReadConsoleOutputW");}});

var ReadConsoleW = Module.findExportByName("KernelBase.dll", "ReadConsoleW")
Interceptor.attach(ReadConsoleW, {onLeave: function (args) {send("ReadConsoleW");}});

var ReadDirectoryChangesExW = Module.findExportByName("KernelBase.dll", "ReadDirectoryChangesExW")
Interceptor.attach(ReadDirectoryChangesExW, {onLeave: function (args) {send("ReadDirectoryChangesExW");}});

var ReadDirectoryChangesW = Module.findExportByName("KernelBase.dll", "ReadDirectoryChangesW")
Interceptor.attach(ReadDirectoryChangesW, {onLeave: function (args) {send("ReadDirectoryChangesW");}});

var ReadFile = Module.findExportByName("KernelBase.dll", "ReadFile")
Interceptor.attach(ReadFile, {onLeave: function (args) {send("ReadFile");}});

var ReadFileEx = Module.findExportByName("KernelBase.dll", "ReadFileEx")
Interceptor.attach(ReadFileEx, {onLeave: function (args) {send("ReadFileEx");}});

var ReadFileScatter = Module.findExportByName("KernelBase.dll", "ReadFileScatter")
Interceptor.attach(ReadFileScatter, {onLeave: function (args) {send("ReadFileScatter");}});

var ReadProcessMemory = Module.findExportByName("KernelBase.dll", "ReadProcessMemory")
Interceptor.attach(ReadProcessMemory, {onLeave: function (args) {send("ReadProcessMemory");}});

var ReadStateAtomValue = Module.findExportByName("KernelBase.dll", "ReadStateAtomValue")
Interceptor.attach(ReadStateAtomValue, {onLeave: function (args) {send("ReadStateAtomValue");}});

var ReadStateContainerValue = Module.findExportByName("KernelBase.dll", "ReadStateContainerValue")
Interceptor.attach(ReadStateContainerValue, {onLeave: function (args) {send("ReadStateContainerValue");}});

var ReclaimVirtualMemory = Module.findExportByName("KernelBase.dll", "ReclaimVirtualMemory")
Interceptor.attach(ReclaimVirtualMemory, {onLeave: function (args) {send("ReclaimVirtualMemory");}});

var RecordFeatureUsage2 = Module.findExportByName("KernelBase.dll", "RecordFeatureUsage2")
Interceptor.attach(RecordFeatureUsage2, {onLeave: function (args) {send("RecordFeatureUsage2");}});

var RefreshPackageInfo = Module.findExportByName("KernelBase.dll", "RefreshPackageInfo")
Interceptor.attach(RefreshPackageInfo, {onLeave: function (args) {send("RefreshPackageInfo");}});

var RefreshPolicyExInternal = Module.findExportByName("KernelBase.dll", "RefreshPolicyExInternal")
Interceptor.attach(RefreshPolicyExInternal, {onLeave: function (args) {send("RefreshPolicyExInternal");}});

var RefreshPolicyInternal = Module.findExportByName("KernelBase.dll", "RefreshPolicyInternal")
Interceptor.attach(RefreshPolicyInternal, {onLeave: function (args) {send("RefreshPolicyInternal");}});

var RegCloseKey = Module.findExportByName("KernelBase.dll", "RegCloseKey")
Interceptor.attach(RegCloseKey, {onLeave: function (args) {send("RegCloseKey");}});

var RegCopyTreeW = Module.findExportByName("KernelBase.dll", "RegCopyTreeW")
Interceptor.attach(RegCopyTreeW, {onLeave: function (args) {send("RegCopyTreeW");}});

var RegCreateKeyExA = Module.findExportByName("KernelBase.dll", "RegCreateKeyExA")
Interceptor.attach(RegCreateKeyExA, {onLeave: function (args) {send("RegCreateKeyExA");}});

var RegCreateKeyExInternalA = Module.findExportByName("KernelBase.dll", "RegCreateKeyExInternalA")
Interceptor.attach(RegCreateKeyExInternalA, {onLeave: function (args) {send("RegCreateKeyExInternalA");}});

var RegCreateKeyExInternalW = Module.findExportByName("KernelBase.dll", "RegCreateKeyExInternalW")
Interceptor.attach(RegCreateKeyExInternalW, {onLeave: function (args) {send("RegCreateKeyExInternalW");}});

var RegCreateKeyExW = Module.findExportByName("KernelBase.dll", "RegCreateKeyExW")
Interceptor.attach(RegCreateKeyExW, {onLeave: function (args) {send("RegCreateKeyExW");}});

var RegDeleteKeyExA = Module.findExportByName("KernelBase.dll", "RegDeleteKeyExA")
Interceptor.attach(RegDeleteKeyExA, {onLeave: function (args) {send("RegDeleteKeyExA");}});

var RegDeleteKeyExInternalA = Module.findExportByName("KernelBase.dll", "RegDeleteKeyExInternalA")
Interceptor.attach(RegDeleteKeyExInternalA, {onLeave: function (args) {send("RegDeleteKeyExInternalA");}});

var RegDeleteKeyExInternalW = Module.findExportByName("KernelBase.dll", "RegDeleteKeyExInternalW")
Interceptor.attach(RegDeleteKeyExInternalW, {onLeave: function (args) {send("RegDeleteKeyExInternalW");}});

var RegDeleteKeyExW = Module.findExportByName("KernelBase.dll", "RegDeleteKeyExW")
Interceptor.attach(RegDeleteKeyExW, {onLeave: function (args) {send("RegDeleteKeyExW");}});

var RegDeleteKeyValueA = Module.findExportByName("KernelBase.dll", "RegDeleteKeyValueA")
Interceptor.attach(RegDeleteKeyValueA, {onLeave: function (args) {send("RegDeleteKeyValueA");}});

var RegDeleteKeyValueW = Module.findExportByName("KernelBase.dll", "RegDeleteKeyValueW")
Interceptor.attach(RegDeleteKeyValueW, {onLeave: function (args) {send("RegDeleteKeyValueW");}});

var RegDeleteTreeA = Module.findExportByName("KernelBase.dll", "RegDeleteTreeA")
Interceptor.attach(RegDeleteTreeA, {onLeave: function (args) {send("RegDeleteTreeA");}});

var RegDeleteTreeW = Module.findExportByName("KernelBase.dll", "RegDeleteTreeW")
Interceptor.attach(RegDeleteTreeW, {onLeave: function (args) {send("RegDeleteTreeW");}});

var RegDeleteValueA = Module.findExportByName("KernelBase.dll", "RegDeleteValueA")
Interceptor.attach(RegDeleteValueA, {onLeave: function (args) {send("RegDeleteValueA");}});

var RegDeleteValueW = Module.findExportByName("KernelBase.dll", "RegDeleteValueW")
Interceptor.attach(RegDeleteValueW, {onLeave: function (args) {send("RegDeleteValueW");}});

var RegDisablePredefinedCacheEx = Module.findExportByName("KernelBase.dll", "RegDisablePredefinedCacheEx")
Interceptor.attach(RegDisablePredefinedCacheEx, {onLeave: function (args) {send("RegDisablePredefinedCacheEx");}});

var RegEnumKeyExA = Module.findExportByName("KernelBase.dll", "RegEnumKeyExA")
Interceptor.attach(RegEnumKeyExA, {onLeave: function (args) {send("RegEnumKeyExA");}});

var RegEnumKeyExW = Module.findExportByName("KernelBase.dll", "RegEnumKeyExW")
Interceptor.attach(RegEnumKeyExW, {onLeave: function (args) {send("RegEnumKeyExW");}});

var RegEnumValueA = Module.findExportByName("KernelBase.dll", "RegEnumValueA")
Interceptor.attach(RegEnumValueA, {onLeave: function (args) {send("RegEnumValueA");}});

var RegEnumValueW = Module.findExportByName("KernelBase.dll", "RegEnumValueW")
Interceptor.attach(RegEnumValueW, {onLeave: function (args) {send("RegEnumValueW");}});

var RegFlushKey = Module.findExportByName("KernelBase.dll", "RegFlushKey")
Interceptor.attach(RegFlushKey, {onLeave: function (args) {send("RegFlushKey");}});

var RegGetKeySecurity = Module.findExportByName("KernelBase.dll", "RegGetKeySecurity")
Interceptor.attach(RegGetKeySecurity, {onLeave: function (args) {send("RegGetKeySecurity");}});

var RegGetValueA = Module.findExportByName("KernelBase.dll", "RegGetValueA")
Interceptor.attach(RegGetValueA, {onLeave: function (args) {send("RegGetValueA");}});

var RegGetValueW = Module.findExportByName("KernelBase.dll", "RegGetValueW")
Interceptor.attach(RegGetValueW, {onLeave: function (args) {send("RegGetValueW");}});

var RegKrnGetAppKeyEventAddressInternal = Module.findExportByName("KernelBase.dll", "RegKrnGetAppKeyEventAddressInternal")
Interceptor.attach(RegKrnGetAppKeyEventAddressInternal, {onLeave: function (args) {send("RegKrnGetAppKeyEventAddressInternal");}});

var RegKrnGetAppKeyLoaded = Module.findExportByName("KernelBase.dll", "RegKrnGetAppKeyLoaded")
Interceptor.attach(RegKrnGetAppKeyLoaded, {onLeave: function (args) {send("RegKrnGetAppKeyLoaded");}});

var RegKrnGetClassesEnumTableAddressInternal = Module.findExportByName("KernelBase.dll", "RegKrnGetClassesEnumTableAddressInternal")
Interceptor.attach(RegKrnGetClassesEnumTableAddressInternal, {onLeave: function (args) {send("RegKrnGetClassesEnumTableAddressInternal");}});

var RegKrnGetHKEY_ClassesRootAddress = Module.findExportByName("KernelBase.dll", "RegKrnGetHKEY_ClassesRootAddress")
Interceptor.attach(RegKrnGetHKEY_ClassesRootAddress, {onLeave: function (args) {send("RegKrnGetHKEY_ClassesRootAddress");}});

var RegKrnGetTermsrvRegistryExtensionFlags = Module.findExportByName("KernelBase.dll", "RegKrnGetTermsrvRegistryExtensionFlags")
Interceptor.attach(RegKrnGetTermsrvRegistryExtensionFlags, {onLeave: function (args) {send("RegKrnGetTermsrvRegistryExtensionFlags");}});

var RegKrnResetAppKeyLoaded = Module.findExportByName("KernelBase.dll", "RegKrnResetAppKeyLoaded")
Interceptor.attach(RegKrnResetAppKeyLoaded, {onLeave: function (args) {send("RegKrnResetAppKeyLoaded");}});

var RegKrnSetDllHasThreadStateGlobal = Module.findExportByName("KernelBase.dll", "RegKrnSetDllHasThreadStateGlobal")
Interceptor.attach(RegKrnSetDllHasThreadStateGlobal, {onLeave: function (args) {send("RegKrnSetDllHasThreadStateGlobal");}});

var RegKrnSetTermsrvRegistryExtensionFlags = Module.findExportByName("KernelBase.dll", "RegKrnSetTermsrvRegistryExtensionFlags")
Interceptor.attach(RegKrnSetTermsrvRegistryExtensionFlags, {onLeave: function (args) {send("RegKrnSetTermsrvRegistryExtensionFlags");}});

var RegLoadAppKeyA = Module.findExportByName("KernelBase.dll", "RegLoadAppKeyA")
Interceptor.attach(RegLoadAppKeyA, {onLeave: function (args) {send("RegLoadAppKeyA");}});

var RegLoadAppKeyW = Module.findExportByName("KernelBase.dll", "RegLoadAppKeyW")
Interceptor.attach(RegLoadAppKeyW, {onLeave: function (args) {send("RegLoadAppKeyW");}});

var RegLoadKeyA = Module.findExportByName("KernelBase.dll", "RegLoadKeyA")
Interceptor.attach(RegLoadKeyA, {onLeave: function (args) {send("RegLoadKeyA");}});

var RegLoadKeyW = Module.findExportByName("KernelBase.dll", "RegLoadKeyW")
Interceptor.attach(RegLoadKeyW, {onLeave: function (args) {send("RegLoadKeyW");}});

var RegLoadMUIStringA = Module.findExportByName("KernelBase.dll", "RegLoadMUIStringA")
Interceptor.attach(RegLoadMUIStringA, {onLeave: function (args) {send("RegLoadMUIStringA");}});

var RegLoadMUIStringW = Module.findExportByName("KernelBase.dll", "RegLoadMUIStringW")
Interceptor.attach(RegLoadMUIStringW, {onLeave: function (args) {send("RegLoadMUIStringW");}});

var RegNotifyChangeKeyValue = Module.findExportByName("KernelBase.dll", "RegNotifyChangeKeyValue")
Interceptor.attach(RegNotifyChangeKeyValue, {onLeave: function (args) {send("RegNotifyChangeKeyValue");}});

var RegOpenCurrentUser = Module.findExportByName("KernelBase.dll", "RegOpenCurrentUser")
Interceptor.attach(RegOpenCurrentUser, {onLeave: function (args) {send("RegOpenCurrentUser");}});

var RegOpenKeyExA = Module.findExportByName("KernelBase.dll", "RegOpenKeyExA")
Interceptor.attach(RegOpenKeyExA, {onLeave: function (args) {send("RegOpenKeyExA");}});

var RegOpenKeyExInternalA = Module.findExportByName("KernelBase.dll", "RegOpenKeyExInternalA")
Interceptor.attach(RegOpenKeyExInternalA, {onLeave: function (args) {send("RegOpenKeyExInternalA");}});

var RegOpenKeyExInternalW = Module.findExportByName("KernelBase.dll", "RegOpenKeyExInternalW")
Interceptor.attach(RegOpenKeyExInternalW, {onLeave: function (args) {send("RegOpenKeyExInternalW");}});

var RegOpenKeyExW = Module.findExportByName("KernelBase.dll", "RegOpenKeyExW")
Interceptor.attach(RegOpenKeyExW, {onLeave: function (args) {send("RegOpenKeyExW");}});

var RegOpenUserClassesRoot = Module.findExportByName("KernelBase.dll", "RegOpenUserClassesRoot")
Interceptor.attach(RegOpenUserClassesRoot, {onLeave: function (args) {send("RegOpenUserClassesRoot");}});

var RegQueryInfoKeyA = Module.findExportByName("KernelBase.dll", "RegQueryInfoKeyA")
Interceptor.attach(RegQueryInfoKeyA, {onLeave: function (args) {send("RegQueryInfoKeyA");}});

var RegQueryInfoKeyW = Module.findExportByName("KernelBase.dll", "RegQueryInfoKeyW")
Interceptor.attach(RegQueryInfoKeyW, {onLeave: function (args) {send("RegQueryInfoKeyW");}});

var RegQueryMultipleValuesA = Module.findExportByName("KernelBase.dll", "RegQueryMultipleValuesA")
Interceptor.attach(RegQueryMultipleValuesA, {onLeave: function (args) {send("RegQueryMultipleValuesA");}});

var RegQueryMultipleValuesW = Module.findExportByName("KernelBase.dll", "RegQueryMultipleValuesW")
Interceptor.attach(RegQueryMultipleValuesW, {onLeave: function (args) {send("RegQueryMultipleValuesW");}});

var RegQueryValueExA = Module.findExportByName("KernelBase.dll", "RegQueryValueExA")
Interceptor.attach(RegQueryValueExA, {onLeave: function (args) {send("RegQueryValueExA");}});

var RegQueryValueExW = Module.findExportByName("KernelBase.dll", "RegQueryValueExW")
Interceptor.attach(RegQueryValueExW, {onLeave: function (args) {send("RegQueryValueExW");}});

var RegRestoreKeyA = Module.findExportByName("KernelBase.dll", "RegRestoreKeyA")
Interceptor.attach(RegRestoreKeyA, {onLeave: function (args) {send("RegRestoreKeyA");}});

var RegRestoreKeyW = Module.findExportByName("KernelBase.dll", "RegRestoreKeyW")
Interceptor.attach(RegRestoreKeyW, {onLeave: function (args) {send("RegRestoreKeyW");}});

var RegSaveKeyExA = Module.findExportByName("KernelBase.dll", "RegSaveKeyExA")
Interceptor.attach(RegSaveKeyExA, {onLeave: function (args) {send("RegSaveKeyExA");}});

var RegSaveKeyExW = Module.findExportByName("KernelBase.dll", "RegSaveKeyExW")
Interceptor.attach(RegSaveKeyExW, {onLeave: function (args) {send("RegSaveKeyExW");}});

var RegSetKeySecurity = Module.findExportByName("KernelBase.dll", "RegSetKeySecurity")
Interceptor.attach(RegSetKeySecurity, {onLeave: function (args) {send("RegSetKeySecurity");}});

var RegSetKeyValueA = Module.findExportByName("KernelBase.dll", "RegSetKeyValueA")
Interceptor.attach(RegSetKeyValueA, {onLeave: function (args) {send("RegSetKeyValueA");}});

var RegSetKeyValueW = Module.findExportByName("KernelBase.dll", "RegSetKeyValueW")
Interceptor.attach(RegSetKeyValueW, {onLeave: function (args) {send("RegSetKeyValueW");}});

var RegSetValueExA = Module.findExportByName("KernelBase.dll", "RegSetValueExA")
Interceptor.attach(RegSetValueExA, {onLeave: function (args) {send("RegSetValueExA");}});

var RegSetValueExW = Module.findExportByName("KernelBase.dll", "RegSetValueExW")
Interceptor.attach(RegSetValueExW, {onLeave: function (args) {send("RegSetValueExW");}});

var RegUnLoadKeyA = Module.findExportByName("KernelBase.dll", "RegUnLoadKeyA")
Interceptor.attach(RegUnLoadKeyA, {onLeave: function (args) {send("RegUnLoadKeyA");}});

var RegUnLoadKeyW = Module.findExportByName("KernelBase.dll", "RegUnLoadKeyW")
Interceptor.attach(RegUnLoadKeyW, {onLeave: function (args) {send("RegUnLoadKeyW");}});

var RegisterApplicationRestart = Module.findExportByName("KernelBase.dll", "RegisterApplicationRestart")
Interceptor.attach(RegisterApplicationRestart, {onLeave: function (args) {send("RegisterApplicationRestart");}});

var RegisterBadMemoryNotification = Module.findExportByName("KernelBase.dll", "RegisterBadMemoryNotification")
Interceptor.attach(RegisterBadMemoryNotification, {onLeave: function (args) {send("RegisterBadMemoryNotification");}});

var RegisterGPNotificationInternal = Module.findExportByName("KernelBase.dll", "RegisterGPNotificationInternal")
Interceptor.attach(RegisterGPNotificationInternal, {onLeave: function (args) {send("RegisterGPNotificationInternal");}});

var RegisterStateChangeNotification = Module.findExportByName("KernelBase.dll", "RegisterStateChangeNotification")
Interceptor.attach(RegisterStateChangeNotification, {onLeave: function (args) {send("RegisterStateChangeNotification");}});

var RegisterStateLock = Module.findExportByName("KernelBase.dll", "RegisterStateLock")
Interceptor.attach(RegisterStateLock, {onLeave: function (args) {send("RegisterStateLock");}});

var RegisterTraceGuidsW = Module.findExportByName("KernelBase.dll", "RegisterTraceGuidsW")
Interceptor.attach(RegisterTraceGuidsW, {onLeave: function (args) {send("RegisterTraceGuidsW");}});

var RegisterWaitForSingleObjectEx = Module.findExportByName("KernelBase.dll", "RegisterWaitForSingleObjectEx")
Interceptor.attach(RegisterWaitForSingleObjectEx, {onLeave: function (args) {send("RegisterWaitForSingleObjectEx");}});

var ReleaseActCtx = Module.findExportByName("KernelBase.dll", "ReleaseActCtx")
Interceptor.attach(ReleaseActCtx, {onLeave: function (args) {send("ReleaseActCtx");}});

var ReleaseMutex = Module.findExportByName("KernelBase.dll", "ReleaseMutex")
Interceptor.attach(ReleaseMutex, {onLeave: function (args) {send("ReleaseMutex");}});

var ReleaseMutexWhenCallbackReturns = Module.findExportByName("KernelBase.dll", "ReleaseMutexWhenCallbackReturns")
Interceptor.attach(ReleaseMutexWhenCallbackReturns, {onLeave: function (args) {send("ReleaseMutexWhenCallbackReturns");}});

var ReleasePackagedDataForFile = Module.findExportByName("KernelBase.dll", "ReleasePackagedDataForFile")
Interceptor.attach(ReleasePackagedDataForFile, {onLeave: function (args) {send("ReleasePackagedDataForFile");}});

var ReleaseSRWLockExclusive = Module.findExportByName("KernelBase.dll", "ReleaseSRWLockExclusive")
Interceptor.attach(ReleaseSRWLockExclusive, {onLeave: function (args) {send("ReleaseSRWLockExclusive");}});

var ReleaseSRWLockShared = Module.findExportByName("KernelBase.dll", "ReleaseSRWLockShared")
Interceptor.attach(ReleaseSRWLockShared, {onLeave: function (args) {send("ReleaseSRWLockShared");}});

var ReleaseSemaphore = Module.findExportByName("KernelBase.dll", "ReleaseSemaphore")
Interceptor.attach(ReleaseSemaphore, {onLeave: function (args) {send("ReleaseSemaphore");}});

var ReleaseSemaphoreWhenCallbackReturns = Module.findExportByName("KernelBase.dll", "ReleaseSemaphoreWhenCallbackReturns")
Interceptor.attach(ReleaseSemaphoreWhenCallbackReturns, {onLeave: function (args) {send("ReleaseSemaphoreWhenCallbackReturns");}});

var ReleaseStateLock = Module.findExportByName("KernelBase.dll", "ReleaseStateLock")
Interceptor.attach(ReleaseStateLock, {onLeave: function (args) {send("ReleaseStateLock");}});

var RemapPredefinedHandleInternal = Module.findExportByName("KernelBase.dll", "RemapPredefinedHandleInternal")
Interceptor.attach(RemapPredefinedHandleInternal, {onLeave: function (args) {send("RemapPredefinedHandleInternal");}});

var RemoveDirectoryA = Module.findExportByName("KernelBase.dll", "RemoveDirectoryA")
Interceptor.attach(RemoveDirectoryA, {onLeave: function (args) {send("RemoveDirectoryA");}});

var RemoveDirectoryFromAppW = Module.findExportByName("KernelBase.dll", "RemoveDirectoryFromAppW")
Interceptor.attach(RemoveDirectoryFromAppW, {onLeave: function (args) {send("RemoveDirectoryFromAppW");}});

var RemoveDirectoryW = Module.findExportByName("KernelBase.dll", "RemoveDirectoryW")
Interceptor.attach(RemoveDirectoryW, {onLeave: function (args) {send("RemoveDirectoryW");}});

var RemoveDllDirectory = Module.findExportByName("KernelBase.dll", "RemoveDllDirectory")
Interceptor.attach(RemoveDllDirectory, {onLeave: function (args) {send("RemoveDllDirectory");}});

var RemoveExtensionProgIds = Module.findExportByName("KernelBase.dll", "RemoveExtensionProgIds")
Interceptor.attach(RemoveExtensionProgIds, {onLeave: function (args) {send("RemoveExtensionProgIds");}});

var RemovePackageDependency = Module.findExportByName("KernelBase.dll", "RemovePackageDependency")
Interceptor.attach(RemovePackageDependency, {onLeave: function (args) {send("RemovePackageDependency");}});

var RemovePackageStatus = Module.findExportByName("KernelBase.dll", "RemovePackageStatus")
Interceptor.attach(RemovePackageStatus, {onLeave: function (args) {send("RemovePackageStatus");}});

var RemovePackageStatusForUser = Module.findExportByName("KernelBase.dll", "RemovePackageStatusForUser")
Interceptor.attach(RemovePackageStatusForUser, {onLeave: function (args) {send("RemovePackageStatusForUser");}});

var RemoveVectoredContinueHandler = Module.findExportByName("KernelBase.dll", "RemoveVectoredContinueHandler")
Interceptor.attach(RemoveVectoredContinueHandler, {onLeave: function (args) {send("RemoveVectoredContinueHandler");}});

var RemoveVectoredExceptionHandler = Module.findExportByName("KernelBase.dll", "RemoveVectoredExceptionHandler")
Interceptor.attach(RemoveVectoredExceptionHandler, {onLeave: function (args) {send("RemoveVectoredExceptionHandler");}});

var ReplaceFileExInternal = Module.findExportByName("KernelBase.dll", "ReplaceFileExInternal")
Interceptor.attach(ReplaceFileExInternal, {onLeave: function (args) {send("ReplaceFileExInternal");}});

var ReplaceFileFromAppW = Module.findExportByName("KernelBase.dll", "ReplaceFileFromAppW")
Interceptor.attach(ReplaceFileFromAppW, {onLeave: function (args) {send("ReplaceFileFromAppW");}});

var ReplaceFileW = Module.findExportByName("KernelBase.dll", "ReplaceFileW")
Interceptor.attach(ReplaceFileW, {onLeave: function (args) {send("ReplaceFileW");}});

var ResetEvent = Module.findExportByName("KernelBase.dll", "ResetEvent")
Interceptor.attach(ResetEvent, {onLeave: function (args) {send("ResetEvent");}});

var ResetState = Module.findExportByName("KernelBase.dll", "ResetState")
Interceptor.attach(ResetState, {onLeave: function (args) {send("ResetState");}});

var ResetWriteWatch = Module.findExportByName("KernelBase.dll", "ResetWriteWatch")
Interceptor.attach(ResetWriteWatch, {onLeave: function (args) {send("ResetWriteWatch");}});

var ResizePseudoConsole = Module.findExportByName("KernelBase.dll", "ResizePseudoConsole")
Interceptor.attach(ResizePseudoConsole, {onLeave: function (args) {send("ResizePseudoConsole");}});

var ResolveDelayLoadedAPI = Module.findExportByName("KernelBase.dll", "ResolveDelayLoadedAPI")
Interceptor.attach(ResolveDelayLoadedAPI, {onLeave: function (args) {send("ResolveDelayLoadedAPI");}});

var ResolveDelayLoadsFromDll = Module.findExportByName("KernelBase.dll", "ResolveDelayLoadsFromDll")
Interceptor.attach(ResolveDelayLoadsFromDll, {onLeave: function (args) {send("ResolveDelayLoadsFromDll");}});

var ResolveLocaleName = Module.findExportByName("KernelBase.dll", "ResolveLocaleName")
Interceptor.attach(ResolveLocaleName, {onLeave: function (args) {send("ResolveLocaleName");}});

var RestoreLastError = Module.findExportByName("KernelBase.dll", "RestoreLastError")
Interceptor.attach(RestoreLastError, {onLeave: function (args) {send("RestoreLastError");}});

var RestoreThreadPreferredUILanguages = Module.findExportByName("KernelBase.dll", "RestoreThreadPreferredUILanguages")
Interceptor.attach(RestoreThreadPreferredUILanguages, {onLeave: function (args) {send("RestoreThreadPreferredUILanguages");}});

var ResumeThread = Module.findExportByName("KernelBase.dll", "ResumeThread")
Interceptor.attach(ResumeThread, {onLeave: function (args) {send("ResumeThread");}});

var RevertToSelf = Module.findExportByName("KernelBase.dll", "RevertToSelf")
Interceptor.attach(RevertToSelf, {onLeave: function (args) {send("RevertToSelf");}});

var RsopLoggingEnabledInternal = Module.findExportByName("KernelBase.dll", "RsopLoggingEnabledInternal")
Interceptor.attach(RsopLoggingEnabledInternal, {onLeave: function (args) {send("RsopLoggingEnabledInternal");}});

var SHCoCreateInstance = Module.findExportByName("KernelBase.dll", "SHCoCreateInstance")
Interceptor.attach(SHCoCreateInstance, {onLeave: function (args) {send("SHCoCreateInstance");}});

var SHExpandEnvironmentStringsA = Module.findExportByName("KernelBase.dll", "SHExpandEnvironmentStringsA")
Interceptor.attach(SHExpandEnvironmentStringsA, {onLeave: function (args) {send("SHExpandEnvironmentStringsA");}});

var SHExpandEnvironmentStringsW = Module.findExportByName("KernelBase.dll", "SHExpandEnvironmentStringsW")
Interceptor.attach(SHExpandEnvironmentStringsW, {onLeave: function (args) {send("SHExpandEnvironmentStringsW");}});

var SHLoadIndirectString = Module.findExportByName("KernelBase.dll", "SHLoadIndirectString")
Interceptor.attach(SHLoadIndirectString, {onLeave: function (args) {send("SHLoadIndirectString");}});

var SHLoadIndirectStringInternal = Module.findExportByName("KernelBase.dll", "SHLoadIndirectStringInternal")
Interceptor.attach(SHLoadIndirectStringInternal, {onLeave: function (args) {send("SHLoadIndirectStringInternal");}});

var SHRegCloseUSKey = Module.findExportByName("KernelBase.dll", "SHRegCloseUSKey")
Interceptor.attach(SHRegCloseUSKey, {onLeave: function (args) {send("SHRegCloseUSKey");}});

var SHRegCreateUSKeyA = Module.findExportByName("KernelBase.dll", "SHRegCreateUSKeyA")
Interceptor.attach(SHRegCreateUSKeyA, {onLeave: function (args) {send("SHRegCreateUSKeyA");}});

var SHRegCreateUSKeyW = Module.findExportByName("KernelBase.dll", "SHRegCreateUSKeyW")
Interceptor.attach(SHRegCreateUSKeyW, {onLeave: function (args) {send("SHRegCreateUSKeyW");}});

var SHRegDeleteEmptyUSKeyA = Module.findExportByName("KernelBase.dll", "SHRegDeleteEmptyUSKeyA")
Interceptor.attach(SHRegDeleteEmptyUSKeyA, {onLeave: function (args) {send("SHRegDeleteEmptyUSKeyA");}});

var SHRegDeleteEmptyUSKeyW = Module.findExportByName("KernelBase.dll", "SHRegDeleteEmptyUSKeyW")
Interceptor.attach(SHRegDeleteEmptyUSKeyW, {onLeave: function (args) {send("SHRegDeleteEmptyUSKeyW");}});

var SHRegDeleteUSValueA = Module.findExportByName("KernelBase.dll", "SHRegDeleteUSValueA")
Interceptor.attach(SHRegDeleteUSValueA, {onLeave: function (args) {send("SHRegDeleteUSValueA");}});

var SHRegDeleteUSValueW = Module.findExportByName("KernelBase.dll", "SHRegDeleteUSValueW")
Interceptor.attach(SHRegDeleteUSValueW, {onLeave: function (args) {send("SHRegDeleteUSValueW");}});

var SHRegEnumUSKeyA = Module.findExportByName("KernelBase.dll", "SHRegEnumUSKeyA")
Interceptor.attach(SHRegEnumUSKeyA, {onLeave: function (args) {send("SHRegEnumUSKeyA");}});

var SHRegEnumUSKeyW = Module.findExportByName("KernelBase.dll", "SHRegEnumUSKeyW")
Interceptor.attach(SHRegEnumUSKeyW, {onLeave: function (args) {send("SHRegEnumUSKeyW");}});

var SHRegEnumUSValueA = Module.findExportByName("KernelBase.dll", "SHRegEnumUSValueA")
Interceptor.attach(SHRegEnumUSValueA, {onLeave: function (args) {send("SHRegEnumUSValueA");}});

var SHRegEnumUSValueW = Module.findExportByName("KernelBase.dll", "SHRegEnumUSValueW")
Interceptor.attach(SHRegEnumUSValueW, {onLeave: function (args) {send("SHRegEnumUSValueW");}});

var SHRegGetBoolUSValueA = Module.findExportByName("KernelBase.dll", "SHRegGetBoolUSValueA")
Interceptor.attach(SHRegGetBoolUSValueA, {onLeave: function (args) {send("SHRegGetBoolUSValueA");}});

var SHRegGetBoolUSValueW = Module.findExportByName("KernelBase.dll", "SHRegGetBoolUSValueW")
Interceptor.attach(SHRegGetBoolUSValueW, {onLeave: function (args) {send("SHRegGetBoolUSValueW");}});

var SHRegGetUSValueA = Module.findExportByName("KernelBase.dll", "SHRegGetUSValueA")
Interceptor.attach(SHRegGetUSValueA, {onLeave: function (args) {send("SHRegGetUSValueA");}});

var SHRegGetUSValueW = Module.findExportByName("KernelBase.dll", "SHRegGetUSValueW")
Interceptor.attach(SHRegGetUSValueW, {onLeave: function (args) {send("SHRegGetUSValueW");}});

var SHRegOpenUSKeyA = Module.findExportByName("KernelBase.dll", "SHRegOpenUSKeyA")
Interceptor.attach(SHRegOpenUSKeyA, {onLeave: function (args) {send("SHRegOpenUSKeyA");}});

var SHRegOpenUSKeyW = Module.findExportByName("KernelBase.dll", "SHRegOpenUSKeyW")
Interceptor.attach(SHRegOpenUSKeyW, {onLeave: function (args) {send("SHRegOpenUSKeyW");}});

var SHRegQueryInfoUSKeyA = Module.findExportByName("KernelBase.dll", "SHRegQueryInfoUSKeyA")
Interceptor.attach(SHRegQueryInfoUSKeyA, {onLeave: function (args) {send("SHRegQueryInfoUSKeyA");}});

var SHRegQueryInfoUSKeyW = Module.findExportByName("KernelBase.dll", "SHRegQueryInfoUSKeyW")
Interceptor.attach(SHRegQueryInfoUSKeyW, {onLeave: function (args) {send("SHRegQueryInfoUSKeyW");}});

var SHRegQueryUSValueA = Module.findExportByName("KernelBase.dll", "SHRegQueryUSValueA")
Interceptor.attach(SHRegQueryUSValueA, {onLeave: function (args) {send("SHRegQueryUSValueA");}});

var SHRegQueryUSValueW = Module.findExportByName("KernelBase.dll", "SHRegQueryUSValueW")
Interceptor.attach(SHRegQueryUSValueW, {onLeave: function (args) {send("SHRegQueryUSValueW");}});

var SHRegSetUSValueA = Module.findExportByName("KernelBase.dll", "SHRegSetUSValueA")
Interceptor.attach(SHRegSetUSValueA, {onLeave: function (args) {send("SHRegSetUSValueA");}});

var SHRegSetUSValueW = Module.findExportByName("KernelBase.dll", "SHRegSetUSValueW")
Interceptor.attach(SHRegSetUSValueW, {onLeave: function (args) {send("SHRegSetUSValueW");}});

var SHRegWriteUSValueA = Module.findExportByName("KernelBase.dll", "SHRegWriteUSValueA")
Interceptor.attach(SHRegWriteUSValueA, {onLeave: function (args) {send("SHRegWriteUSValueA");}});

var SHRegWriteUSValueW = Module.findExportByName("KernelBase.dll", "SHRegWriteUSValueW")
Interceptor.attach(SHRegWriteUSValueW, {onLeave: function (args) {send("SHRegWriteUSValueW");}});

var SHTruncateString = Module.findExportByName("KernelBase.dll", "SHTruncateString")
Interceptor.attach(SHTruncateString, {onLeave: function (args) {send("SHTruncateString");}});

var SaveAlternatePackageRootPath = Module.findExportByName("KernelBase.dll", "SaveAlternatePackageRootPath")
Interceptor.attach(SaveAlternatePackageRootPath, {onLeave: function (args) {send("SaveAlternatePackageRootPath");}});

var SaveStateRootFolderPath = Module.findExportByName("KernelBase.dll", "SaveStateRootFolderPath")
Interceptor.attach(SaveStateRootFolderPath, {onLeave: function (args) {send("SaveStateRootFolderPath");}});

var ScrollConsoleScreenBufferA = Module.findExportByName("KernelBase.dll", "ScrollConsoleScreenBufferA")
Interceptor.attach(ScrollConsoleScreenBufferA, {onLeave: function (args) {send("ScrollConsoleScreenBufferA");}});

var ScrollConsoleScreenBufferW = Module.findExportByName("KernelBase.dll", "ScrollConsoleScreenBufferW")
Interceptor.attach(ScrollConsoleScreenBufferW, {onLeave: function (args) {send("ScrollConsoleScreenBufferW");}});

var SearchPathA = Module.findExportByName("KernelBase.dll", "SearchPathA")
Interceptor.attach(SearchPathA, {onLeave: function (args) {send("SearchPathA");}});

var SearchPathW = Module.findExportByName("KernelBase.dll", "SearchPathW")
Interceptor.attach(SearchPathW, {onLeave: function (args) {send("SearchPathW");}});

var SetAclInformation = Module.findExportByName("KernelBase.dll", "SetAclInformation")
Interceptor.attach(SetAclInformation, {onLeave: function (args) {send("SetAclInformation");}});

var SetCachedSigningLevel = Module.findExportByName("KernelBase.dll", "SetCachedSigningLevel")
Interceptor.attach(SetCachedSigningLevel, {onLeave: function (args) {send("SetCachedSigningLevel");}});

var SetCalendarInfoW = Module.findExportByName("KernelBase.dll", "SetCalendarInfoW")
Interceptor.attach(SetCalendarInfoW, {onLeave: function (args) {send("SetCalendarInfoW");}});

var SetClientDynamicTimeZoneInformation = Module.findExportByName("KernelBase.dll", "SetClientDynamicTimeZoneInformation")
Interceptor.attach(SetClientDynamicTimeZoneInformation, {onLeave: function (args) {send("SetClientDynamicTimeZoneInformation");}});

var SetClientTimeZoneInformation = Module.findExportByName("KernelBase.dll", "SetClientTimeZoneInformation")
Interceptor.attach(SetClientTimeZoneInformation, {onLeave: function (args) {send("SetClientTimeZoneInformation");}});

var SetCommBreak = Module.findExportByName("KernelBase.dll", "SetCommBreak")
Interceptor.attach(SetCommBreak, {onLeave: function (args) {send("SetCommBreak");}});

var SetCommConfig = Module.findExportByName("KernelBase.dll", "SetCommConfig")
Interceptor.attach(SetCommConfig, {onLeave: function (args) {send("SetCommConfig");}});

var SetCommMask = Module.findExportByName("KernelBase.dll", "SetCommMask")
Interceptor.attach(SetCommMask, {onLeave: function (args) {send("SetCommMask");}});

var SetCommState = Module.findExportByName("KernelBase.dll", "SetCommState")
Interceptor.attach(SetCommState, {onLeave: function (args) {send("SetCommState");}});

var SetCommTimeouts = Module.findExportByName("KernelBase.dll", "SetCommTimeouts")
Interceptor.attach(SetCommTimeouts, {onLeave: function (args) {send("SetCommTimeouts");}});

var SetComputerNameA = Module.findExportByName("KernelBase.dll", "SetComputerNameA")
Interceptor.attach(SetComputerNameA, {onLeave: function (args) {send("SetComputerNameA");}});

var SetComputerNameEx2W = Module.findExportByName("KernelBase.dll", "SetComputerNameEx2W")
Interceptor.attach(SetComputerNameEx2W, {onLeave: function (args) {send("SetComputerNameEx2W");}});

var SetComputerNameExA = Module.findExportByName("KernelBase.dll", "SetComputerNameExA")
Interceptor.attach(SetComputerNameExA, {onLeave: function (args) {send("SetComputerNameExA");}});

var SetComputerNameExW = Module.findExportByName("KernelBase.dll", "SetComputerNameExW")
Interceptor.attach(SetComputerNameExW, {onLeave: function (args) {send("SetComputerNameExW");}});

var SetComputerNameW = Module.findExportByName("KernelBase.dll", "SetComputerNameW")
Interceptor.attach(SetComputerNameW, {onLeave: function (args) {send("SetComputerNameW");}});

var SetConsoleActiveScreenBuffer = Module.findExportByName("KernelBase.dll", "SetConsoleActiveScreenBuffer")
Interceptor.attach(SetConsoleActiveScreenBuffer, {onLeave: function (args) {send("SetConsoleActiveScreenBuffer");}});

var SetConsoleCP = Module.findExportByName("KernelBase.dll", "SetConsoleCP")
Interceptor.attach(SetConsoleCP, {onLeave: function (args) {send("SetConsoleCP");}});

var SetConsoleCtrlHandler = Module.findExportByName("KernelBase.dll", "SetConsoleCtrlHandler")
Interceptor.attach(SetConsoleCtrlHandler, {onLeave: function (args) {send("SetConsoleCtrlHandler");}});

var SetConsoleCursorInfo = Module.findExportByName("KernelBase.dll", "SetConsoleCursorInfo")
Interceptor.attach(SetConsoleCursorInfo, {onLeave: function (args) {send("SetConsoleCursorInfo");}});

var SetConsoleCursorPosition = Module.findExportByName("KernelBase.dll", "SetConsoleCursorPosition")
Interceptor.attach(SetConsoleCursorPosition, {onLeave: function (args) {send("SetConsoleCursorPosition");}});

var SetConsoleDisplayMode = Module.findExportByName("KernelBase.dll", "SetConsoleDisplayMode")
Interceptor.attach(SetConsoleDisplayMode, {onLeave: function (args) {send("SetConsoleDisplayMode");}});

var SetConsoleHistoryInfo = Module.findExportByName("KernelBase.dll", "SetConsoleHistoryInfo")
Interceptor.attach(SetConsoleHistoryInfo, {onLeave: function (args) {send("SetConsoleHistoryInfo");}});

var SetConsoleInputExeNameA = Module.findExportByName("KernelBase.dll", "SetConsoleInputExeNameA")
Interceptor.attach(SetConsoleInputExeNameA, {onLeave: function (args) {send("SetConsoleInputExeNameA");}});

var SetConsoleInputExeNameW = Module.findExportByName("KernelBase.dll", "SetConsoleInputExeNameW")
Interceptor.attach(SetConsoleInputExeNameW, {onLeave: function (args) {send("SetConsoleInputExeNameW");}});

var SetConsoleMode = Module.findExportByName("KernelBase.dll", "SetConsoleMode")
Interceptor.attach(SetConsoleMode, {onLeave: function (args) {send("SetConsoleMode");}});

var SetConsoleNumberOfCommandsA = Module.findExportByName("KernelBase.dll", "SetConsoleNumberOfCommandsA")
Interceptor.attach(SetConsoleNumberOfCommandsA, {onLeave: function (args) {send("SetConsoleNumberOfCommandsA");}});

var SetConsoleNumberOfCommandsW = Module.findExportByName("KernelBase.dll", "SetConsoleNumberOfCommandsW")
Interceptor.attach(SetConsoleNumberOfCommandsW, {onLeave: function (args) {send("SetConsoleNumberOfCommandsW");}});

var SetConsoleOutputCP = Module.findExportByName("KernelBase.dll", "SetConsoleOutputCP")
Interceptor.attach(SetConsoleOutputCP, {onLeave: function (args) {send("SetConsoleOutputCP");}});

var SetConsoleScreenBufferInfoEx = Module.findExportByName("KernelBase.dll", "SetConsoleScreenBufferInfoEx")
Interceptor.attach(SetConsoleScreenBufferInfoEx, {onLeave: function (args) {send("SetConsoleScreenBufferInfoEx");}});

var SetConsoleScreenBufferSize = Module.findExportByName("KernelBase.dll", "SetConsoleScreenBufferSize")
Interceptor.attach(SetConsoleScreenBufferSize, {onLeave: function (args) {send("SetConsoleScreenBufferSize");}});

var SetConsoleTextAttribute = Module.findExportByName("KernelBase.dll", "SetConsoleTextAttribute")
Interceptor.attach(SetConsoleTextAttribute, {onLeave: function (args) {send("SetConsoleTextAttribute");}});

var SetConsoleTitleA = Module.findExportByName("KernelBase.dll", "SetConsoleTitleA")
Interceptor.attach(SetConsoleTitleA, {onLeave: function (args) {send("SetConsoleTitleA");}});

var SetConsoleTitleW = Module.findExportByName("KernelBase.dll", "SetConsoleTitleW")
Interceptor.attach(SetConsoleTitleW, {onLeave: function (args) {send("SetConsoleTitleW");}});

var SetConsoleWindowInfo = Module.findExportByName("KernelBase.dll", "SetConsoleWindowInfo")
Interceptor.attach(SetConsoleWindowInfo, {onLeave: function (args) {send("SetConsoleWindowInfo");}});

var SetCriticalSectionSpinCount = Module.findExportByName("KernelBase.dll", "SetCriticalSectionSpinCount")
Interceptor.attach(SetCriticalSectionSpinCount, {onLeave: function (args) {send("SetCriticalSectionSpinCount");}});

var SetCurrentConsoleFontEx = Module.findExportByName("KernelBase.dll", "SetCurrentConsoleFontEx")
Interceptor.attach(SetCurrentConsoleFontEx, {onLeave: function (args) {send("SetCurrentConsoleFontEx");}});

var SetCurrentDirectoryA = Module.findExportByName("KernelBase.dll", "SetCurrentDirectoryA")
Interceptor.attach(SetCurrentDirectoryA, {onLeave: function (args) {send("SetCurrentDirectoryA");}});

var SetCurrentDirectoryW = Module.findExportByName("KernelBase.dll", "SetCurrentDirectoryW")
Interceptor.attach(SetCurrentDirectoryW, {onLeave: function (args) {send("SetCurrentDirectoryW");}});

var SetDefaultDllDirectories = Module.findExportByName("KernelBase.dll", "SetDefaultDllDirectories")
Interceptor.attach(SetDefaultDllDirectories, {onLeave: function (args) {send("SetDefaultDllDirectories");}});

var SetDynamicTimeZoneInformation = Module.findExportByName("KernelBase.dll", "SetDynamicTimeZoneInformation")
Interceptor.attach(SetDynamicTimeZoneInformation, {onLeave: function (args) {send("SetDynamicTimeZoneInformation");}});

var SetEndOfFile = Module.findExportByName("KernelBase.dll", "SetEndOfFile")
Interceptor.attach(SetEndOfFile, {onLeave: function (args) {send("SetEndOfFile");}});

var SetEnvironmentStringsW = Module.findExportByName("KernelBase.dll", "SetEnvironmentStringsW")
Interceptor.attach(SetEnvironmentStringsW, {onLeave: function (args) {send("SetEnvironmentStringsW");}});

var SetEnvironmentVariableA = Module.findExportByName("KernelBase.dll", "SetEnvironmentVariableA")
Interceptor.attach(SetEnvironmentVariableA, {onLeave: function (args) {send("SetEnvironmentVariableA");}});

var SetEnvironmentVariableW = Module.findExportByName("KernelBase.dll", "SetEnvironmentVariableW")
Interceptor.attach(SetEnvironmentVariableW, {onLeave: function (args) {send("SetEnvironmentVariableW");}});

var SetErrorMode = Module.findExportByName("KernelBase.dll", "SetErrorMode")
Interceptor.attach(SetErrorMode, {onLeave: function (args) {send("SetErrorMode");}});

var SetEvent = Module.findExportByName("KernelBase.dll", "SetEvent")
Interceptor.attach(SetEvent, {onLeave: function (args) {send("SetEvent");}});

var SetEventWhenCallbackReturns = Module.findExportByName("KernelBase.dll", "SetEventWhenCallbackReturns")
Interceptor.attach(SetEventWhenCallbackReturns, {onLeave: function (args) {send("SetEventWhenCallbackReturns");}});

var SetExtensionProperty = Module.findExportByName("KernelBase.dll", "SetExtensionProperty")
Interceptor.attach(SetExtensionProperty, {onLeave: function (args) {send("SetExtensionProperty");}});

var SetFileApisToANSI = Module.findExportByName("KernelBase.dll", "SetFileApisToANSI")
Interceptor.attach(SetFileApisToANSI, {onLeave: function (args) {send("SetFileApisToANSI");}});

var SetFileApisToOEM = Module.findExportByName("KernelBase.dll", "SetFileApisToOEM")
Interceptor.attach(SetFileApisToOEM, {onLeave: function (args) {send("SetFileApisToOEM");}});

var SetFileAttributesA = Module.findExportByName("KernelBase.dll", "SetFileAttributesA")
Interceptor.attach(SetFileAttributesA, {onLeave: function (args) {send("SetFileAttributesA");}});

var SetFileAttributesFromAppW = Module.findExportByName("KernelBase.dll", "SetFileAttributesFromAppW")
Interceptor.attach(SetFileAttributesFromAppW, {onLeave: function (args) {send("SetFileAttributesFromAppW");}});

var SetFileAttributesW = Module.findExportByName("KernelBase.dll", "SetFileAttributesW")
Interceptor.attach(SetFileAttributesW, {onLeave: function (args) {send("SetFileAttributesW");}});

var SetFileInformationByHandle = Module.findExportByName("KernelBase.dll", "SetFileInformationByHandle")
Interceptor.attach(SetFileInformationByHandle, {onLeave: function (args) {send("SetFileInformationByHandle");}});

var SetFileIoOverlappedRange = Module.findExportByName("KernelBase.dll", "SetFileIoOverlappedRange")
Interceptor.attach(SetFileIoOverlappedRange, {onLeave: function (args) {send("SetFileIoOverlappedRange");}});

var SetFilePointer = Module.findExportByName("KernelBase.dll", "SetFilePointer")
Interceptor.attach(SetFilePointer, {onLeave: function (args) {send("SetFilePointer");}});

var SetFilePointerEx = Module.findExportByName("KernelBase.dll", "SetFilePointerEx")
Interceptor.attach(SetFilePointerEx, {onLeave: function (args) {send("SetFilePointerEx");}});

var SetFileSecurityW = Module.findExportByName("KernelBase.dll", "SetFileSecurityW")
Interceptor.attach(SetFileSecurityW, {onLeave: function (args) {send("SetFileSecurityW");}});

var SetFileTime = Module.findExportByName("KernelBase.dll", "SetFileTime")
Interceptor.attach(SetFileTime, {onLeave: function (args) {send("SetFileTime");}});

var SetFileValidData = Module.findExportByName("KernelBase.dll", "SetFileValidData")
Interceptor.attach(SetFileValidData, {onLeave: function (args) {send("SetFileValidData");}});

var SetHandleCount = Module.findExportByName("KernelBase.dll", "SetHandleCount")
Interceptor.attach(SetHandleCount, {onLeave: function (args) {send("SetHandleCount");}});

var SetHandleInformation = Module.findExportByName("KernelBase.dll", "SetHandleInformation")
Interceptor.attach(SetHandleInformation, {onLeave: function (args) {send("SetHandleInformation");}});

var SetIoRingCompletionEvent = Module.findExportByName("KernelBase.dll", "SetIoRingCompletionEvent")
Interceptor.attach(SetIoRingCompletionEvent, {onLeave: function (args) {send("SetIoRingCompletionEvent");}});

var SetIsDeveloperModeEnabled = Module.findExportByName("KernelBase.dll", "SetIsDeveloperModeEnabled")
Interceptor.attach(SetIsDeveloperModeEnabled, {onLeave: function (args) {send("SetIsDeveloperModeEnabled");}});

var SetIsSideloadingEnabled = Module.findExportByName("KernelBase.dll", "SetIsSideloadingEnabled")
Interceptor.attach(SetIsSideloadingEnabled, {onLeave: function (args) {send("SetIsSideloadingEnabled");}});

var SetKernelObjectSecurity = Module.findExportByName("KernelBase.dll", "SetKernelObjectSecurity")
Interceptor.attach(SetKernelObjectSecurity, {onLeave: function (args) {send("SetKernelObjectSecurity");}});

var SetLastConsoleEventActive = Module.findExportByName("KernelBase.dll", "SetLastConsoleEventActive")
Interceptor.attach(SetLastConsoleEventActive, {onLeave: function (args) {send("SetLastConsoleEventActive");}});

var SetLastError = Module.findExportByName("KernelBase.dll", "SetLastError")
Interceptor.attach(SetLastError, {onLeave: function (args) {send("SetLastError");}});

var SetLocalTime = Module.findExportByName("KernelBase.dll", "SetLocalTime")
Interceptor.attach(SetLocalTime, {onLeave: function (args) {send("SetLocalTime");}});

var SetLocaleInfoW = Module.findExportByName("KernelBase.dll", "SetLocaleInfoW")
Interceptor.attach(SetLocaleInfoW, {onLeave: function (args) {send("SetLocaleInfoW");}});

var SetNamedPipeHandleState = Module.findExportByName("KernelBase.dll", "SetNamedPipeHandleState")
Interceptor.attach(SetNamedPipeHandleState, {onLeave: function (args) {send("SetNamedPipeHandleState");}});

var SetPriorityClass = Module.findExportByName("KernelBase.dll", "SetPriorityClass")
Interceptor.attach(SetPriorityClass, {onLeave: function (args) {send("SetPriorityClass");}});

var SetPrivateObjectSecurity = Module.findExportByName("KernelBase.dll", "SetPrivateObjectSecurity")
Interceptor.attach(SetPrivateObjectSecurity, {onLeave: function (args) {send("SetPrivateObjectSecurity");}});

var SetPrivateObjectSecurityEx = Module.findExportByName("KernelBase.dll", "SetPrivateObjectSecurityEx")
Interceptor.attach(SetPrivateObjectSecurityEx, {onLeave: function (args) {send("SetPrivateObjectSecurityEx");}});

var SetProcessAffinityUpdateMode = Module.findExportByName("KernelBase.dll", "SetProcessAffinityUpdateMode")
Interceptor.attach(SetProcessAffinityUpdateMode, {onLeave: function (args) {send("SetProcessAffinityUpdateMode");}});

var SetProcessDefaultCpuSetMasks = Module.findExportByName("KernelBase.dll", "SetProcessDefaultCpuSetMasks")
Interceptor.attach(SetProcessDefaultCpuSetMasks, {onLeave: function (args) {send("SetProcessDefaultCpuSetMasks");}});

var SetProcessDefaultCpuSets = Module.findExportByName("KernelBase.dll", "SetProcessDefaultCpuSets")
Interceptor.attach(SetProcessDefaultCpuSets, {onLeave: function (args) {send("SetProcessDefaultCpuSets");}});

var SetProcessDynamicEHContinuationTargets = Module.findExportByName("KernelBase.dll", "SetProcessDynamicEHContinuationTargets")
Interceptor.attach(SetProcessDynamicEHContinuationTargets, {onLeave: function (args) {send("SetProcessDynamicEHContinuationTargets");}});

var SetProcessDynamicEnforcedCetCompatibleRanges = Module.findExportByName("KernelBase.dll", "SetProcessDynamicEnforcedCetCompatibleRanges")
Interceptor.attach(SetProcessDynamicEnforcedCetCompatibleRanges, {onLeave: function (args) {send("SetProcessDynamicEnforcedCetCompatibleRanges");}});

var SetProcessGroupAffinity = Module.findExportByName("KernelBase.dll", "SetProcessGroupAffinity")
Interceptor.attach(SetProcessGroupAffinity, {onLeave: function (args) {send("SetProcessGroupAffinity");}});

var SetProcessInformation = Module.findExportByName("KernelBase.dll", "SetProcessInformation")
Interceptor.attach(SetProcessInformation, {onLeave: function (args) {send("SetProcessInformation");}});

var SetProcessMitigationPolicy = Module.findExportByName("KernelBase.dll", "SetProcessMitigationPolicy")
Interceptor.attach(SetProcessMitigationPolicy, {onLeave: function (args) {send("SetProcessMitigationPolicy");}});

var SetProcessPreferredUILanguages = Module.findExportByName("KernelBase.dll", "SetProcessPreferredUILanguages")
Interceptor.attach(SetProcessPreferredUILanguages, {onLeave: function (args) {send("SetProcessPreferredUILanguages");}});

var SetProcessPriorityBoost = Module.findExportByName("KernelBase.dll", "SetProcessPriorityBoost")
Interceptor.attach(SetProcessPriorityBoost, {onLeave: function (args) {send("SetProcessPriorityBoost");}});

var SetProcessShutdownParameters = Module.findExportByName("KernelBase.dll", "SetProcessShutdownParameters")
Interceptor.attach(SetProcessShutdownParameters, {onLeave: function (args) {send("SetProcessShutdownParameters");}});

var SetProcessValidCallTargets = Module.findExportByName("KernelBase.dll", "SetProcessValidCallTargets")
Interceptor.attach(SetProcessValidCallTargets, {onLeave: function (args) {send("SetProcessValidCallTargets");}});

var SetProcessValidCallTargetsForMappedView = Module.findExportByName("KernelBase.dll", "SetProcessValidCallTargetsForMappedView")
Interceptor.attach(SetProcessValidCallTargetsForMappedView, {onLeave: function (args) {send("SetProcessValidCallTargetsForMappedView");}});

var SetProcessWorkingSetSize = Module.findExportByName("KernelBase.dll", "SetProcessWorkingSetSize")
Interceptor.attach(SetProcessWorkingSetSize, {onLeave: function (args) {send("SetProcessWorkingSetSize");}});

var SetProcessWorkingSetSizeEx = Module.findExportByName("KernelBase.dll", "SetProcessWorkingSetSizeEx")
Interceptor.attach(SetProcessWorkingSetSizeEx, {onLeave: function (args) {send("SetProcessWorkingSetSizeEx");}});

var SetProtectedPolicy = Module.findExportByName("KernelBase.dll", "SetProtectedPolicy")
Interceptor.attach(SetProtectedPolicy, {onLeave: function (args) {send("SetProtectedPolicy");}});

var SetProtocolProperty = Module.findExportByName("KernelBase.dll", "SetProtocolProperty")
Interceptor.attach(SetProtocolProperty, {onLeave: function (args) {send("SetProtocolProperty");}});

var SetRoamingLastObservedChangeTime = Module.findExportByName("KernelBase.dll", "SetRoamingLastObservedChangeTime")
Interceptor.attach(SetRoamingLastObservedChangeTime, {onLeave: function (args) {send("SetRoamingLastObservedChangeTime");}});

var SetSecurityAccessMask = Module.findExportByName("KernelBase.dll", "SetSecurityAccessMask")
Interceptor.attach(SetSecurityAccessMask, {onLeave: function (args) {send("SetSecurityAccessMask");}});

var SetSecurityDescriptorControl = Module.findExportByName("KernelBase.dll", "SetSecurityDescriptorControl")
Interceptor.attach(SetSecurityDescriptorControl, {onLeave: function (args) {send("SetSecurityDescriptorControl");}});

var SetSecurityDescriptorDacl = Module.findExportByName("KernelBase.dll", "SetSecurityDescriptorDacl")
Interceptor.attach(SetSecurityDescriptorDacl, {onLeave: function (args) {send("SetSecurityDescriptorDacl");}});

var SetSecurityDescriptorGroup = Module.findExportByName("KernelBase.dll", "SetSecurityDescriptorGroup")
Interceptor.attach(SetSecurityDescriptorGroup, {onLeave: function (args) {send("SetSecurityDescriptorGroup");}});

var SetSecurityDescriptorOwner = Module.findExportByName("KernelBase.dll", "SetSecurityDescriptorOwner")
Interceptor.attach(SetSecurityDescriptorOwner, {onLeave: function (args) {send("SetSecurityDescriptorOwner");}});

var SetSecurityDescriptorRMControl = Module.findExportByName("KernelBase.dll", "SetSecurityDescriptorRMControl")
Interceptor.attach(SetSecurityDescriptorRMControl, {onLeave: function (args) {send("SetSecurityDescriptorRMControl");}});

var SetSecurityDescriptorSacl = Module.findExportByName("KernelBase.dll", "SetSecurityDescriptorSacl")
Interceptor.attach(SetSecurityDescriptorSacl, {onLeave: function (args) {send("SetSecurityDescriptorSacl");}});

var SetStateVersion = Module.findExportByName("KernelBase.dll", "SetStateVersion")
Interceptor.attach(SetStateVersion, {onLeave: function (args) {send("SetStateVersion");}});

var SetStdHandle = Module.findExportByName("KernelBase.dll", "SetStdHandle")
Interceptor.attach(SetStdHandle, {onLeave: function (args) {send("SetStdHandle");}});

var SetStdHandleEx = Module.findExportByName("KernelBase.dll", "SetStdHandleEx")
Interceptor.attach(SetStdHandleEx, {onLeave: function (args) {send("SetStdHandleEx");}});

var SetSystemFileCacheSize = Module.findExportByName("KernelBase.dll", "SetSystemFileCacheSize")
Interceptor.attach(SetSystemFileCacheSize, {onLeave: function (args) {send("SetSystemFileCacheSize");}});

var SetSystemTime = Module.findExportByName("KernelBase.dll", "SetSystemTime")
Interceptor.attach(SetSystemTime, {onLeave: function (args) {send("SetSystemTime");}});

var SetSystemTimeAdjustment = Module.findExportByName("KernelBase.dll", "SetSystemTimeAdjustment")
Interceptor.attach(SetSystemTimeAdjustment, {onLeave: function (args) {send("SetSystemTimeAdjustment");}});

var SetSystemTimeAdjustmentPrecise = Module.findExportByName("KernelBase.dll", "SetSystemTimeAdjustmentPrecise")
Interceptor.attach(SetSystemTimeAdjustmentPrecise, {onLeave: function (args) {send("SetSystemTimeAdjustmentPrecise");}});

var SetThreadContext = Module.findExportByName("KernelBase.dll", "SetThreadContext")
Interceptor.attach(SetThreadContext, {onLeave: function (args) {send("SetThreadContext");}});

var SetThreadDescription = Module.findExportByName("KernelBase.dll", "SetThreadDescription")
Interceptor.attach(SetThreadDescription, {onLeave: function (args) {send("SetThreadDescription");}});

var SetThreadErrorMode = Module.findExportByName("KernelBase.dll", "SetThreadErrorMode")
Interceptor.attach(SetThreadErrorMode, {onLeave: function (args) {send("SetThreadErrorMode");}});

var SetThreadGroupAffinity = Module.findExportByName("KernelBase.dll", "SetThreadGroupAffinity")
Interceptor.attach(SetThreadGroupAffinity, {onLeave: function (args) {send("SetThreadGroupAffinity");}});

var SetThreadIdealProcessor = Module.findExportByName("KernelBase.dll", "SetThreadIdealProcessor")
Interceptor.attach(SetThreadIdealProcessor, {onLeave: function (args) {send("SetThreadIdealProcessor");}});

var SetThreadIdealProcessorEx = Module.findExportByName("KernelBase.dll", "SetThreadIdealProcessorEx")
Interceptor.attach(SetThreadIdealProcessorEx, {onLeave: function (args) {send("SetThreadIdealProcessorEx");}});

var SetThreadInformation = Module.findExportByName("KernelBase.dll", "SetThreadInformation")
Interceptor.attach(SetThreadInformation, {onLeave: function (args) {send("SetThreadInformation");}});

var SetThreadLocale = Module.findExportByName("KernelBase.dll", "SetThreadLocale")
Interceptor.attach(SetThreadLocale, {onLeave: function (args) {send("SetThreadLocale");}});

var SetThreadPreferredUILanguages = Module.findExportByName("KernelBase.dll", "SetThreadPreferredUILanguages")
Interceptor.attach(SetThreadPreferredUILanguages, {onLeave: function (args) {send("SetThreadPreferredUILanguages");}});

var SetThreadPreferredUILanguages2 = Module.findExportByName("KernelBase.dll", "SetThreadPreferredUILanguages2")
Interceptor.attach(SetThreadPreferredUILanguages2, {onLeave: function (args) {send("SetThreadPreferredUILanguages2");}});

var SetThreadPriority = Module.findExportByName("KernelBase.dll", "SetThreadPriority")
Interceptor.attach(SetThreadPriority, {onLeave: function (args) {send("SetThreadPriority");}});

var SetThreadPriorityBoost = Module.findExportByName("KernelBase.dll", "SetThreadPriorityBoost")
Interceptor.attach(SetThreadPriorityBoost, {onLeave: function (args) {send("SetThreadPriorityBoost");}});

var SetThreadSelectedCpuSetMasks = Module.findExportByName("KernelBase.dll", "SetThreadSelectedCpuSetMasks")
Interceptor.attach(SetThreadSelectedCpuSetMasks, {onLeave: function (args) {send("SetThreadSelectedCpuSetMasks");}});

var SetThreadSelectedCpuSets = Module.findExportByName("KernelBase.dll", "SetThreadSelectedCpuSets")
Interceptor.attach(SetThreadSelectedCpuSets, {onLeave: function (args) {send("SetThreadSelectedCpuSets");}});

var SetThreadStackGuarantee = Module.findExportByName("KernelBase.dll", "SetThreadStackGuarantee")
Interceptor.attach(SetThreadStackGuarantee, {onLeave: function (args) {send("SetThreadStackGuarantee");}});

var SetThreadToken = Module.findExportByName("KernelBase.dll", "SetThreadToken")
Interceptor.attach(SetThreadToken, {onLeave: function (args) {send("SetThreadToken");}});

var SetThreadUILanguage = Module.findExportByName("KernelBase.dll", "SetThreadUILanguage")
Interceptor.attach(SetThreadUILanguage, {onLeave: function (args) {send("SetThreadUILanguage");}});

var SetThreadpoolStackInformation = Module.findExportByName("KernelBase.dll", "SetThreadpoolStackInformation")
Interceptor.attach(SetThreadpoolStackInformation, {onLeave: function (args) {send("SetThreadpoolStackInformation");}});

var SetThreadpoolThreadMaximum = Module.findExportByName("KernelBase.dll", "SetThreadpoolThreadMaximum")
Interceptor.attach(SetThreadpoolThreadMaximum, {onLeave: function (args) {send("SetThreadpoolThreadMaximum");}});

var SetThreadpoolThreadMinimum = Module.findExportByName("KernelBase.dll", "SetThreadpoolThreadMinimum")
Interceptor.attach(SetThreadpoolThreadMinimum, {onLeave: function (args) {send("SetThreadpoolThreadMinimum");}});

var SetThreadpoolTimer = Module.findExportByName("KernelBase.dll", "SetThreadpoolTimer")
Interceptor.attach(SetThreadpoolTimer, {onLeave: function (args) {send("SetThreadpoolTimer");}});

var SetThreadpoolTimerEx = Module.findExportByName("KernelBase.dll", "SetThreadpoolTimerEx")
Interceptor.attach(SetThreadpoolTimerEx, {onLeave: function (args) {send("SetThreadpoolTimerEx");}});

var SetThreadpoolWait = Module.findExportByName("KernelBase.dll", "SetThreadpoolWait")
Interceptor.attach(SetThreadpoolWait, {onLeave: function (args) {send("SetThreadpoolWait");}});

var SetThreadpoolWaitEx = Module.findExportByName("KernelBase.dll", "SetThreadpoolWaitEx")
Interceptor.attach(SetThreadpoolWaitEx, {onLeave: function (args) {send("SetThreadpoolWaitEx");}});

var SetTimeZoneInformation = Module.findExportByName("KernelBase.dll", "SetTimeZoneInformation")
Interceptor.attach(SetTimeZoneInformation, {onLeave: function (args) {send("SetTimeZoneInformation");}});

var SetTokenInformation = Module.findExportByName("KernelBase.dll", "SetTokenInformation")
Interceptor.attach(SetTokenInformation, {onLeave: function (args) {send("SetTokenInformation");}});

var SetUnhandledExceptionFilter = Module.findExportByName("KernelBase.dll", "SetUnhandledExceptionFilter")
Interceptor.attach(SetUnhandledExceptionFilter, {onLeave: function (args) {send("SetUnhandledExceptionFilter");}});

var SetUserGeoID = Module.findExportByName("KernelBase.dll", "SetUserGeoID")
Interceptor.attach(SetUserGeoID, {onLeave: function (args) {send("SetUserGeoID");}});

var SetUserGeoName = Module.findExportByName("KernelBase.dll", "SetUserGeoName")
Interceptor.attach(SetUserGeoName, {onLeave: function (args) {send("SetUserGeoName");}});

var SetWaitableTimer = Module.findExportByName("KernelBase.dll", "SetWaitableTimer")
Interceptor.attach(SetWaitableTimer, {onLeave: function (args) {send("SetWaitableTimer");}});

var SetWaitableTimerEx = Module.findExportByName("KernelBase.dll", "SetWaitableTimerEx")
Interceptor.attach(SetWaitableTimerEx, {onLeave: function (args) {send("SetWaitableTimerEx");}});

var SetXStateFeaturesMask = Module.findExportByName("KernelBase.dll", "SetXStateFeaturesMask")
Interceptor.attach(SetXStateFeaturesMask, {onLeave: function (args) {send("SetXStateFeaturesMask");}});

var SetupComm = Module.findExportByName("KernelBase.dll", "SetupComm")
Interceptor.attach(SetupComm, {onLeave: function (args) {send("SetupComm");}});

var SharedLocalIsEnabled = Module.findExportByName("KernelBase.dll", "SharedLocalIsEnabled")
Interceptor.attach(SharedLocalIsEnabled, {onLeave: function (args) {send("SharedLocalIsEnabled");}});

var SignalObjectAndWait = Module.findExportByName("KernelBase.dll", "SignalObjectAndWait")
Interceptor.attach(SignalObjectAndWait, {onLeave: function (args) {send("SignalObjectAndWait");}});

var SizeofResource = Module.findExportByName("KernelBase.dll", "SizeofResource")
Interceptor.attach(SizeofResource, {onLeave: function (args) {send("SizeofResource");}});

var Sleep = Module.findExportByName("KernelBase.dll", "Sleep")
Interceptor.attach(Sleep, {onLeave: function (args) {send("Sleep");}});

var SleepConditionVariableCS = Module.findExportByName("KernelBase.dll", "SleepConditionVariableCS")
Interceptor.attach(SleepConditionVariableCS, {onLeave: function (args) {send("SleepConditionVariableCS");}});

var SleepConditionVariableSRW = Module.findExportByName("KernelBase.dll", "SleepConditionVariableSRW")
Interceptor.attach(SleepConditionVariableSRW, {onLeave: function (args) {send("SleepConditionVariableSRW");}});

var SleepEx = Module.findExportByName("KernelBase.dll", "SleepEx")
Interceptor.attach(SleepEx, {onLeave: function (args) {send("SleepEx");}});

var SpecialMBToWC = Module.findExportByName("KernelBase.dll", "SpecialMBToWC")
Interceptor.attach(SpecialMBToWC, {onLeave: function (args) {send("SpecialMBToWC");}});

var StartThreadpoolIo = Module.findExportByName("KernelBase.dll", "StartThreadpoolIo")
Interceptor.attach(StartThreadpoolIo, {onLeave: function (args) {send("StartThreadpoolIo");}});

var StrCSpnA = Module.findExportByName("KernelBase.dll", "StrCSpnA")
Interceptor.attach(StrCSpnA, {onLeave: function (args) {send("StrCSpnA");}});

var StrCSpnIA = Module.findExportByName("KernelBase.dll", "StrCSpnIA")
Interceptor.attach(StrCSpnIA, {onLeave: function (args) {send("StrCSpnIA");}});

var StrCSpnIW = Module.findExportByName("KernelBase.dll", "StrCSpnIW")
Interceptor.attach(StrCSpnIW, {onLeave: function (args) {send("StrCSpnIW");}});

var StrCSpnW = Module.findExportByName("KernelBase.dll", "StrCSpnW")
Interceptor.attach(StrCSpnW, {onLeave: function (args) {send("StrCSpnW");}});

var StrCatBuffA = Module.findExportByName("KernelBase.dll", "StrCatBuffA")
Interceptor.attach(StrCatBuffA, {onLeave: function (args) {send("StrCatBuffA");}});

var StrCatBuffW = Module.findExportByName("KernelBase.dll", "StrCatBuffW")
Interceptor.attach(StrCatBuffW, {onLeave: function (args) {send("StrCatBuffW");}});

var StrCatChainW = Module.findExportByName("KernelBase.dll", "StrCatChainW")
Interceptor.attach(StrCatChainW, {onLeave: function (args) {send("StrCatChainW");}});

var StrChrA = Module.findExportByName("KernelBase.dll", "StrChrA")
Interceptor.attach(StrChrA, {onLeave: function (args) {send("StrChrA");}});

var StrChrA_MB = Module.findExportByName("KernelBase.dll", "StrChrA_MB")
Interceptor.attach(StrChrA_MB, {onLeave: function (args) {send("StrChrA_MB");}});

var StrChrIA = Module.findExportByName("KernelBase.dll", "StrChrIA")
Interceptor.attach(StrChrIA, {onLeave: function (args) {send("StrChrIA");}});

var StrChrIW = Module.findExportByName("KernelBase.dll", "StrChrIW")
Interceptor.attach(StrChrIW, {onLeave: function (args) {send("StrChrIW");}});

var StrChrNIW = Module.findExportByName("KernelBase.dll", "StrChrNIW")
Interceptor.attach(StrChrNIW, {onLeave: function (args) {send("StrChrNIW");}});

var StrChrNW = Module.findExportByName("KernelBase.dll", "StrChrNW")
Interceptor.attach(StrChrNW, {onLeave: function (args) {send("StrChrNW");}});

var StrChrW = Module.findExportByName("KernelBase.dll", "StrChrW")
Interceptor.attach(StrChrW, {onLeave: function (args) {send("StrChrW");}});

var StrCmpCA = Module.findExportByName("KernelBase.dll", "StrCmpCA")
Interceptor.attach(StrCmpCA, {onLeave: function (args) {send("StrCmpCA");}});

var StrCmpCW = Module.findExportByName("KernelBase.dll", "StrCmpCW")
Interceptor.attach(StrCmpCW, {onLeave: function (args) {send("StrCmpCW");}});

var StrCmpICA = Module.findExportByName("KernelBase.dll", "StrCmpICA")
Interceptor.attach(StrCmpICA, {onLeave: function (args) {send("StrCmpICA");}});

var StrCmpICW = Module.findExportByName("KernelBase.dll", "StrCmpICW")
Interceptor.attach(StrCmpICW, {onLeave: function (args) {send("StrCmpICW");}});

var StrCmpIW = Module.findExportByName("KernelBase.dll", "StrCmpIW")
Interceptor.attach(StrCmpIW, {onLeave: function (args) {send("StrCmpIW");}});

var StrCmpLogicalW = Module.findExportByName("KernelBase.dll", "StrCmpLogicalW")
Interceptor.attach(StrCmpLogicalW, {onLeave: function (args) {send("StrCmpLogicalW");}});

var StrCmpNA = Module.findExportByName("KernelBase.dll", "StrCmpNA")
Interceptor.attach(StrCmpNA, {onLeave: function (args) {send("StrCmpNA");}});

var StrCmpNCA = Module.findExportByName("KernelBase.dll", "StrCmpNCA")
Interceptor.attach(StrCmpNCA, {onLeave: function (args) {send("StrCmpNCA");}});

var StrCmpNCW = Module.findExportByName("KernelBase.dll", "StrCmpNCW")
Interceptor.attach(StrCmpNCW, {onLeave: function (args) {send("StrCmpNCW");}});

var StrCmpNIA = Module.findExportByName("KernelBase.dll", "StrCmpNIA")
Interceptor.attach(StrCmpNIA, {onLeave: function (args) {send("StrCmpNIA");}});

var StrCmpNICA = Module.findExportByName("KernelBase.dll", "StrCmpNICA")
Interceptor.attach(StrCmpNICA, {onLeave: function (args) {send("StrCmpNICA");}});

var StrCmpNICW = Module.findExportByName("KernelBase.dll", "StrCmpNICW")
Interceptor.attach(StrCmpNICW, {onLeave: function (args) {send("StrCmpNICW");}});

var StrCmpNIW = Module.findExportByName("KernelBase.dll", "StrCmpNIW")
Interceptor.attach(StrCmpNIW, {onLeave: function (args) {send("StrCmpNIW");}});

var StrCmpNW = Module.findExportByName("KernelBase.dll", "StrCmpNW")
Interceptor.attach(StrCmpNW, {onLeave: function (args) {send("StrCmpNW");}});

var StrCmpW = Module.findExportByName("KernelBase.dll", "StrCmpW")
Interceptor.attach(StrCmpW, {onLeave: function (args) {send("StrCmpW");}});

var StrCpyNW = Module.findExportByName("KernelBase.dll", "StrCpyNW")
Interceptor.attach(StrCpyNW, {onLeave: function (args) {send("StrCpyNW");}});

var StrCpyNXA = Module.findExportByName("KernelBase.dll", "StrCpyNXA")
Interceptor.attach(StrCpyNXA, {onLeave: function (args) {send("StrCpyNXA");}});

var StrCpyNXW = Module.findExportByName("KernelBase.dll", "StrCpyNXW")
Interceptor.attach(StrCpyNXW, {onLeave: function (args) {send("StrCpyNXW");}});

var StrDupA = Module.findExportByName("KernelBase.dll", "StrDupA")
Interceptor.attach(StrDupA, {onLeave: function (args) {send("StrDupA");}});

var StrDupW = Module.findExportByName("KernelBase.dll", "StrDupW")
Interceptor.attach(StrDupW, {onLeave: function (args) {send("StrDupW");}});

var StrIsIntlEqualA = Module.findExportByName("KernelBase.dll", "StrIsIntlEqualA")
Interceptor.attach(StrIsIntlEqualA, {onLeave: function (args) {send("StrIsIntlEqualA");}});

var StrIsIntlEqualW = Module.findExportByName("KernelBase.dll", "StrIsIntlEqualW")
Interceptor.attach(StrIsIntlEqualW, {onLeave: function (args) {send("StrIsIntlEqualW");}});

var StrPBrkA = Module.findExportByName("KernelBase.dll", "StrPBrkA")
Interceptor.attach(StrPBrkA, {onLeave: function (args) {send("StrPBrkA");}});

var StrPBrkW = Module.findExportByName("KernelBase.dll", "StrPBrkW")
Interceptor.attach(StrPBrkW, {onLeave: function (args) {send("StrPBrkW");}});

var StrRChrA = Module.findExportByName("KernelBase.dll", "StrRChrA")
Interceptor.attach(StrRChrA, {onLeave: function (args) {send("StrRChrA");}});

var StrRChrIA = Module.findExportByName("KernelBase.dll", "StrRChrIA")
Interceptor.attach(StrRChrIA, {onLeave: function (args) {send("StrRChrIA");}});

var StrRChrIW = Module.findExportByName("KernelBase.dll", "StrRChrIW")
Interceptor.attach(StrRChrIW, {onLeave: function (args) {send("StrRChrIW");}});

var StrRChrW = Module.findExportByName("KernelBase.dll", "StrRChrW")
Interceptor.attach(StrRChrW, {onLeave: function (args) {send("StrRChrW");}});

var StrRStrIA = Module.findExportByName("KernelBase.dll", "StrRStrIA")
Interceptor.attach(StrRStrIA, {onLeave: function (args) {send("StrRStrIA");}});

var StrRStrIW = Module.findExportByName("KernelBase.dll", "StrRStrIW")
Interceptor.attach(StrRStrIW, {onLeave: function (args) {send("StrRStrIW");}});

var StrSpnA = Module.findExportByName("KernelBase.dll", "StrSpnA")
Interceptor.attach(StrSpnA, {onLeave: function (args) {send("StrSpnA");}});

var StrSpnW = Module.findExportByName("KernelBase.dll", "StrSpnW")
Interceptor.attach(StrSpnW, {onLeave: function (args) {send("StrSpnW");}});

var StrStrA = Module.findExportByName("KernelBase.dll", "StrStrA")
Interceptor.attach(StrStrA, {onLeave: function (args) {send("StrStrA");}});

var StrStrIA = Module.findExportByName("KernelBase.dll", "StrStrIA")
Interceptor.attach(StrStrIA, {onLeave: function (args) {send("StrStrIA");}});

var StrStrIW = Module.findExportByName("KernelBase.dll", "StrStrIW")
Interceptor.attach(StrStrIW, {onLeave: function (args) {send("StrStrIW");}});

var StrStrNIW = Module.findExportByName("KernelBase.dll", "StrStrNIW")
Interceptor.attach(StrStrNIW, {onLeave: function (args) {send("StrStrNIW");}});

var StrStrNW = Module.findExportByName("KernelBase.dll", "StrStrNW")
Interceptor.attach(StrStrNW, {onLeave: function (args) {send("StrStrNW");}});

var StrStrW = Module.findExportByName("KernelBase.dll", "StrStrW")
Interceptor.attach(StrStrW, {onLeave: function (args) {send("StrStrW");}});

var StrToInt64ExA = Module.findExportByName("KernelBase.dll", "StrToInt64ExA")
Interceptor.attach(StrToInt64ExA, {onLeave: function (args) {send("StrToInt64ExA");}});

var StrToInt64ExW = Module.findExportByName("KernelBase.dll", "StrToInt64ExW")
Interceptor.attach(StrToInt64ExW, {onLeave: function (args) {send("StrToInt64ExW");}});

var StrToIntA = Module.findExportByName("KernelBase.dll", "StrToIntA")
Interceptor.attach(StrToIntA, {onLeave: function (args) {send("StrToIntA");}});

var StrToIntExA = Module.findExportByName("KernelBase.dll", "StrToIntExA")
Interceptor.attach(StrToIntExA, {onLeave: function (args) {send("StrToIntExA");}});

var StrToIntExW = Module.findExportByName("KernelBase.dll", "StrToIntExW")
Interceptor.attach(StrToIntExW, {onLeave: function (args) {send("StrToIntExW");}});

var StrToIntW = Module.findExportByName("KernelBase.dll", "StrToIntW")
Interceptor.attach(StrToIntW, {onLeave: function (args) {send("StrToIntW");}});

var StrTrimA = Module.findExportByName("KernelBase.dll", "StrTrimA")
Interceptor.attach(StrTrimA, {onLeave: function (args) {send("StrTrimA");}});

var StrTrimW = Module.findExportByName("KernelBase.dll", "StrTrimW")
Interceptor.attach(StrTrimW, {onLeave: function (args) {send("StrTrimW");}});

var SubmitIoRing = Module.findExportByName("KernelBase.dll", "SubmitIoRing")
Interceptor.attach(SubmitIoRing, {onLeave: function (args) {send("SubmitIoRing");}});

var SubmitThreadpoolWork = Module.findExportByName("KernelBase.dll", "SubmitThreadpoolWork")
Interceptor.attach(SubmitThreadpoolWork, {onLeave: function (args) {send("SubmitThreadpoolWork");}});

var SubscribeEdpEnabledStateChange = Module.findExportByName("KernelBase.dll", "SubscribeEdpEnabledStateChange")
Interceptor.attach(SubscribeEdpEnabledStateChange, {onLeave: function (args) {send("SubscribeEdpEnabledStateChange");}});

var SubscribeFeatureUsageFlush = Module.findExportByName("KernelBase.dll", "SubscribeFeatureUsageFlush")
Interceptor.attach(SubscribeFeatureUsageFlush, {onLeave: function (args) {send("SubscribeFeatureUsageFlush");}});

var SubscribeStateChangeNotification = Module.findExportByName("KernelBase.dll", "SubscribeStateChangeNotification")
Interceptor.attach(SubscribeStateChangeNotification, {onLeave: function (args) {send("SubscribeStateChangeNotification");}});

var SubscribeWdagEnabledStateChange = Module.findExportByName("KernelBase.dll", "SubscribeWdagEnabledStateChange")
Interceptor.attach(SubscribeWdagEnabledStateChange, {onLeave: function (args) {send("SubscribeWdagEnabledStateChange");}});

var SuspendThread = Module.findExportByName("KernelBase.dll", "SuspendThread")
Interceptor.attach(SuspendThread, {onLeave: function (args) {send("SuspendThread");}});

var SwitchToFiber = Module.findExportByName("KernelBase.dll", "SwitchToFiber")
Interceptor.attach(SwitchToFiber, {onLeave: function (args) {send("SwitchToFiber");}});

var SwitchToThread = Module.findExportByName("KernelBase.dll", "SwitchToThread")
Interceptor.attach(SwitchToThread, {onLeave: function (args) {send("SwitchToThread");}});

var SystemTimeToFileTime = Module.findExportByName("KernelBase.dll", "SystemTimeToFileTime")
Interceptor.attach(SystemTimeToFileTime, {onLeave: function (args) {send("SystemTimeToFileTime");}});

var SystemTimeToTzSpecificLocalTime = Module.findExportByName("KernelBase.dll", "SystemTimeToTzSpecificLocalTime")
Interceptor.attach(SystemTimeToTzSpecificLocalTime, {onLeave: function (args) {send("SystemTimeToTzSpecificLocalTime");}});

var SystemTimeToTzSpecificLocalTimeEx = Module.findExportByName("KernelBase.dll", "SystemTimeToTzSpecificLocalTimeEx")
Interceptor.attach(SystemTimeToTzSpecificLocalTimeEx, {onLeave: function (args) {send("SystemTimeToTzSpecificLocalTimeEx");}});

var TerminateEnclave = Module.findExportByName("KernelBase.dll", "TerminateEnclave")
Interceptor.attach(TerminateEnclave, {onLeave: function (args) {send("TerminateEnclave");}});

var TerminateProcess = Module.findExportByName("KernelBase.dll", "TerminateProcess")
Interceptor.attach(TerminateProcess, {onLeave: function (args) {send("TerminateProcess");}});

var TerminateProcessOnMemoryExhaustion = Module.findExportByName("KernelBase.dll", "TerminateProcessOnMemoryExhaustion")
Interceptor.attach(TerminateProcessOnMemoryExhaustion, {onLeave: function (args) {send("TerminateProcessOnMemoryExhaustion");}});

var TerminateThread = Module.findExportByName("KernelBase.dll", "TerminateThread")
Interceptor.attach(TerminateThread, {onLeave: function (args) {send("TerminateThread");}});

var TestClose = Module.findExportByName("KernelBase.dll", "TestClose")
Interceptor.attach(TestClose, {onLeave: function (args) {send("TestClose");}});

var TestControlReporting = Module.findExportByName("KernelBase.dll", "TestControlReporting")
Interceptor.attach(TestControlReporting, {onLeave: function (args) {send("TestControlReporting");}});

var TestCreate = Module.findExportByName("KernelBase.dll", "TestCreate")
Interceptor.attach(TestCreate, {onLeave: function (args) {send("TestCreate");}});

var TestOpen = Module.findExportByName("KernelBase.dll", "TestOpen")
Interceptor.attach(TestOpen, {onLeave: function (args) {send("TestOpen");}});

var TestQueryData = Module.findExportByName("KernelBase.dll", "TestQueryData")
Interceptor.attach(TestQueryData, {onLeave: function (args) {send("TestQueryData");}});

var TestReport = Module.findExportByName("KernelBase.dll", "TestReport")
Interceptor.attach(TestReport, {onLeave: function (args) {send("TestReport");}});

var TestUnlockData = Module.findExportByName("KernelBase.dll", "TestUnlockData")
Interceptor.attach(TestUnlockData, {onLeave: function (args) {send("TestUnlockData");}});

var TlsAlloc = Module.findExportByName("KernelBase.dll", "TlsAlloc")
Interceptor.attach(TlsAlloc, {onLeave: function (args) {send("TlsAlloc");}});

var TlsFree = Module.findExportByName("KernelBase.dll", "TlsFree")
Interceptor.attach(TlsFree, {onLeave: function (args) {send("TlsFree");}});

var TlsGetValue = Module.findExportByName("KernelBase.dll", "TlsGetValue")
Interceptor.attach(TlsGetValue, {onLeave: function (args) {send("TlsGetValue");}});

var TlsSetValue = Module.findExportByName("KernelBase.dll", "TlsSetValue")
Interceptor.attach(TlsSetValue, {onLeave: function (args) {send("TlsSetValue");}});

var TraceEvent = Module.findExportByName("KernelBase.dll", "TraceEvent")
Interceptor.attach(TraceEvent, {onLeave: function (args) {send("TraceEvent");}});

var TraceMessage = Module.findExportByName("KernelBase.dll", "TraceMessage")
Interceptor.attach(TraceMessage, {onLeave: function (args) {send("TraceMessage");}});

var TraceMessageVa = Module.findExportByName("KernelBase.dll", "TraceMessageVa")
Interceptor.attach(TraceMessageVa, {onLeave: function (args) {send("TraceMessageVa");}});

var TransactNamedPipe = Module.findExportByName("KernelBase.dll", "TransactNamedPipe")
Interceptor.attach(TransactNamedPipe, {onLeave: function (args) {send("TransactNamedPipe");}});

var TransmitCommChar = Module.findExportByName("KernelBase.dll", "TransmitCommChar")
Interceptor.attach(TransmitCommChar, {onLeave: function (args) {send("TransmitCommChar");}});

var TryAcquireSRWLockExclusive = Module.findExportByName("KernelBase.dll", "TryAcquireSRWLockExclusive")
Interceptor.attach(TryAcquireSRWLockExclusive, {onLeave: function (args) {send("TryAcquireSRWLockExclusive");}});

var TryAcquireSRWLockShared = Module.findExportByName("KernelBase.dll", "TryAcquireSRWLockShared")
Interceptor.attach(TryAcquireSRWLockShared, {onLeave: function (args) {send("TryAcquireSRWLockShared");}});

var TryCreatePackageDependency = Module.findExportByName("KernelBase.dll", "TryCreatePackageDependency")
Interceptor.attach(TryCreatePackageDependency, {onLeave: function (args) {send("TryCreatePackageDependency");}});

var TryEnterCriticalSection = Module.findExportByName("KernelBase.dll", "TryEnterCriticalSection")
Interceptor.attach(TryEnterCriticalSection, {onLeave: function (args) {send("TryEnterCriticalSection");}});

var TrySubmitThreadpoolCallback = Module.findExportByName("KernelBase.dll", "TrySubmitThreadpoolCallback")
Interceptor.attach(TrySubmitThreadpoolCallback, {onLeave: function (args) {send("TrySubmitThreadpoolCallback");}});

var TzSpecificLocalTimeToSystemTime = Module.findExportByName("KernelBase.dll", "TzSpecificLocalTimeToSystemTime")
Interceptor.attach(TzSpecificLocalTimeToSystemTime, {onLeave: function (args) {send("TzSpecificLocalTimeToSystemTime");}});

var TzSpecificLocalTimeToSystemTimeEx = Module.findExportByName("KernelBase.dll", "TzSpecificLocalTimeToSystemTimeEx")
Interceptor.attach(TzSpecificLocalTimeToSystemTimeEx, {onLeave: function (args) {send("TzSpecificLocalTimeToSystemTimeEx");}});

var UnhandledExceptionFilter = Module.findExportByName("KernelBase.dll", "UnhandledExceptionFilter")
Interceptor.attach(UnhandledExceptionFilter, {onLeave: function (args) {send("UnhandledExceptionFilter");}});

var UnlockFile = Module.findExportByName("KernelBase.dll", "UnlockFile")
Interceptor.attach(UnlockFile, {onLeave: function (args) {send("UnlockFile");}});

var UnlockFileEx = Module.findExportByName("KernelBase.dll", "UnlockFileEx")
Interceptor.attach(UnlockFileEx, {onLeave: function (args) {send("UnlockFileEx");}});

var UnmapViewOfFile = Module.findExportByName("KernelBase.dll", "UnmapViewOfFile")
Interceptor.attach(UnmapViewOfFile, {onLeave: function (args) {send("UnmapViewOfFile");}});

var UnmapViewOfFile2 = Module.findExportByName("KernelBase.dll", "UnmapViewOfFile2")
Interceptor.attach(UnmapViewOfFile2, {onLeave: function (args) {send("UnmapViewOfFile2");}});

var UnmapViewOfFileEx = Module.findExportByName("KernelBase.dll", "UnmapViewOfFileEx")
Interceptor.attach(UnmapViewOfFileEx, {onLeave: function (args) {send("UnmapViewOfFileEx");}});

var UnregisterApplicationRestart = Module.findExportByName("KernelBase.dll", "UnregisterApplicationRestart")
Interceptor.attach(UnregisterApplicationRestart, {onLeave: function (args) {send("UnregisterApplicationRestart");}});

var UnregisterBadMemoryNotification = Module.findExportByName("KernelBase.dll", "UnregisterBadMemoryNotification")
Interceptor.attach(UnregisterBadMemoryNotification, {onLeave: function (args) {send("UnregisterBadMemoryNotification");}});

var UnregisterGPNotificationInternal = Module.findExportByName("KernelBase.dll", "UnregisterGPNotificationInternal")
Interceptor.attach(UnregisterGPNotificationInternal, {onLeave: function (args) {send("UnregisterGPNotificationInternal");}});

var UnregisterStateChangeNotification = Module.findExportByName("KernelBase.dll", "UnregisterStateChangeNotification")
Interceptor.attach(UnregisterStateChangeNotification, {onLeave: function (args) {send("UnregisterStateChangeNotification");}});

var UnregisterStateLock = Module.findExportByName("KernelBase.dll", "UnregisterStateLock")
Interceptor.attach(UnregisterStateLock, {onLeave: function (args) {send("UnregisterStateLock");}});

var UnregisterTraceGuids = Module.findExportByName("KernelBase.dll", "UnregisterTraceGuids")
Interceptor.attach(UnregisterTraceGuids, {onLeave: function (args) {send("UnregisterTraceGuids");}});

var UnregisterWaitEx = Module.findExportByName("KernelBase.dll", "UnregisterWaitEx")
Interceptor.attach(UnregisterWaitEx, {onLeave: function (args) {send("UnregisterWaitEx");}});

var UnsubscribeEdpEnabledStateChange = Module.findExportByName("KernelBase.dll", "UnsubscribeEdpEnabledStateChange")
Interceptor.attach(UnsubscribeEdpEnabledStateChange, {onLeave: function (args) {send("UnsubscribeEdpEnabledStateChange");}});

var UnsubscribeFeatureUsageFlush = Module.findExportByName("KernelBase.dll", "UnsubscribeFeatureUsageFlush")
Interceptor.attach(UnsubscribeFeatureUsageFlush, {onLeave: function (args) {send("UnsubscribeFeatureUsageFlush");}});

var UnsubscribeStateChangeNotification = Module.findExportByName("KernelBase.dll", "UnsubscribeStateChangeNotification")
Interceptor.attach(UnsubscribeStateChangeNotification, {onLeave: function (args) {send("UnsubscribeStateChangeNotification");}});

var UnsubscribeWdagEnabledStateChange = Module.findExportByName("KernelBase.dll", "UnsubscribeWdagEnabledStateChange")
Interceptor.attach(UnsubscribeWdagEnabledStateChange, {onLeave: function (args) {send("UnsubscribeWdagEnabledStateChange");}});

var UpdatePackageStatus = Module.findExportByName("KernelBase.dll", "UpdatePackageStatus")
Interceptor.attach(UpdatePackageStatus, {onLeave: function (args) {send("UpdatePackageStatus");}});

var UpdatePackageStatusForUser = Module.findExportByName("KernelBase.dll", "UpdatePackageStatusForUser")
Interceptor.attach(UpdatePackageStatusForUser, {onLeave: function (args) {send("UpdatePackageStatusForUser");}});

var UpdatePackageStatusForUserSid = Module.findExportByName("KernelBase.dll", "UpdatePackageStatusForUserSid")
Interceptor.attach(UpdatePackageStatusForUserSid, {onLeave: function (args) {send("UpdatePackageStatusForUserSid");}});

var UpdateProcThreadAttribute = Module.findExportByName("KernelBase.dll", "UpdateProcThreadAttribute")
Interceptor.attach(UpdateProcThreadAttribute, {onLeave: function (args) {send("UpdateProcThreadAttribute");}});

var UrlApplySchemeA = Module.findExportByName("KernelBase.dll", "UrlApplySchemeA")
Interceptor.attach(UrlApplySchemeA, {onLeave: function (args) {send("UrlApplySchemeA");}});

var UrlApplySchemeW = Module.findExportByName("KernelBase.dll", "UrlApplySchemeW")
Interceptor.attach(UrlApplySchemeW, {onLeave: function (args) {send("UrlApplySchemeW");}});

var UrlCanonicalizeA = Module.findExportByName("KernelBase.dll", "UrlCanonicalizeA")
Interceptor.attach(UrlCanonicalizeA, {onLeave: function (args) {send("UrlCanonicalizeA");}});

var UrlCanonicalizeW = Module.findExportByName("KernelBase.dll", "UrlCanonicalizeW")
Interceptor.attach(UrlCanonicalizeW, {onLeave: function (args) {send("UrlCanonicalizeW");}});

var UrlCombineA = Module.findExportByName("KernelBase.dll", "UrlCombineA")
Interceptor.attach(UrlCombineA, {onLeave: function (args) {send("UrlCombineA");}});

var UrlCombineW = Module.findExportByName("KernelBase.dll", "UrlCombineW")
Interceptor.attach(UrlCombineW, {onLeave: function (args) {send("UrlCombineW");}});

var UrlCompareA = Module.findExportByName("KernelBase.dll", "UrlCompareA")
Interceptor.attach(UrlCompareA, {onLeave: function (args) {send("UrlCompareA");}});

var UrlCompareW = Module.findExportByName("KernelBase.dll", "UrlCompareW")
Interceptor.attach(UrlCompareW, {onLeave: function (args) {send("UrlCompareW");}});

var UrlCreateFromPathA = Module.findExportByName("KernelBase.dll", "UrlCreateFromPathA")
Interceptor.attach(UrlCreateFromPathA, {onLeave: function (args) {send("UrlCreateFromPathA");}});

var UrlCreateFromPathW = Module.findExportByName("KernelBase.dll", "UrlCreateFromPathW")
Interceptor.attach(UrlCreateFromPathW, {onLeave: function (args) {send("UrlCreateFromPathW");}});

var UrlEscapeA = Module.findExportByName("KernelBase.dll", "UrlEscapeA")
Interceptor.attach(UrlEscapeA, {onLeave: function (args) {send("UrlEscapeA");}});

var UrlEscapeW = Module.findExportByName("KernelBase.dll", "UrlEscapeW")
Interceptor.attach(UrlEscapeW, {onLeave: function (args) {send("UrlEscapeW");}});

var UrlFixupW = Module.findExportByName("KernelBase.dll", "UrlFixupW")
Interceptor.attach(UrlFixupW, {onLeave: function (args) {send("UrlFixupW");}});

var UrlGetLocationA = Module.findExportByName("KernelBase.dll", "UrlGetLocationA")
Interceptor.attach(UrlGetLocationA, {onLeave: function (args) {send("UrlGetLocationA");}});

var UrlGetLocationW = Module.findExportByName("KernelBase.dll", "UrlGetLocationW")
Interceptor.attach(UrlGetLocationW, {onLeave: function (args) {send("UrlGetLocationW");}});

var UrlGetPartA = Module.findExportByName("KernelBase.dll", "UrlGetPartA")
Interceptor.attach(UrlGetPartA, {onLeave: function (args) {send("UrlGetPartA");}});

var UrlGetPartW = Module.findExportByName("KernelBase.dll", "UrlGetPartW")
Interceptor.attach(UrlGetPartW, {onLeave: function (args) {send("UrlGetPartW");}});

var UrlHashA = Module.findExportByName("KernelBase.dll", "UrlHashA")
Interceptor.attach(UrlHashA, {onLeave: function (args) {send("UrlHashA");}});

var UrlHashW = Module.findExportByName("KernelBase.dll", "UrlHashW")
Interceptor.attach(UrlHashW, {onLeave: function (args) {send("UrlHashW");}});

var UrlIsA = Module.findExportByName("KernelBase.dll", "UrlIsA")
Interceptor.attach(UrlIsA, {onLeave: function (args) {send("UrlIsA");}});

var UrlIsNoHistoryA = Module.findExportByName("KernelBase.dll", "UrlIsNoHistoryA")
Interceptor.attach(UrlIsNoHistoryA, {onLeave: function (args) {send("UrlIsNoHistoryA");}});

var UrlIsNoHistoryW = Module.findExportByName("KernelBase.dll", "UrlIsNoHistoryW")
Interceptor.attach(UrlIsNoHistoryW, {onLeave: function (args) {send("UrlIsNoHistoryW");}});

var UrlIsOpaqueA = Module.findExportByName("KernelBase.dll", "UrlIsOpaqueA")
Interceptor.attach(UrlIsOpaqueA, {onLeave: function (args) {send("UrlIsOpaqueA");}});

var UrlIsOpaqueW = Module.findExportByName("KernelBase.dll", "UrlIsOpaqueW")
Interceptor.attach(UrlIsOpaqueW, {onLeave: function (args) {send("UrlIsOpaqueW");}});

var UrlIsW = Module.findExportByName("KernelBase.dll", "UrlIsW")
Interceptor.attach(UrlIsW, {onLeave: function (args) {send("UrlIsW");}});

var UrlUnescapeA = Module.findExportByName("KernelBase.dll", "UrlUnescapeA")
Interceptor.attach(UrlUnescapeA, {onLeave: function (args) {send("UrlUnescapeA");}});

var UrlUnescapeW = Module.findExportByName("KernelBase.dll", "UrlUnescapeW")
Interceptor.attach(UrlUnescapeW, {onLeave: function (args) {send("UrlUnescapeW");}});

var VerFindFileA = Module.findExportByName("KernelBase.dll", "VerFindFileA")
Interceptor.attach(VerFindFileA, {onLeave: function (args) {send("VerFindFileA");}});

var VerFindFileW = Module.findExportByName("KernelBase.dll", "VerFindFileW")
Interceptor.attach(VerFindFileW, {onLeave: function (args) {send("VerFindFileW");}});

var VerLanguageNameA = Module.findExportByName("KernelBase.dll", "VerLanguageNameA")
Interceptor.attach(VerLanguageNameA, {onLeave: function (args) {send("VerLanguageNameA");}});

var VerLanguageNameW = Module.findExportByName("KernelBase.dll", "VerLanguageNameW")
Interceptor.attach(VerLanguageNameW, {onLeave: function (args) {send("VerLanguageNameW");}});

var VerQueryValueA = Module.findExportByName("KernelBase.dll", "VerQueryValueA")
Interceptor.attach(VerQueryValueA, {onLeave: function (args) {send("VerQueryValueA");}});

var VerQueryValueW = Module.findExportByName("KernelBase.dll", "VerQueryValueW")
Interceptor.attach(VerQueryValueW, {onLeave: function (args) {send("VerQueryValueW");}});

var VerSetConditionMask = Module.findExportByName("KernelBase.dll", "VerSetConditionMask")
Interceptor.attach(VerSetConditionMask, {onLeave: function (args) {send("VerSetConditionMask");}});

var VerifyApplicationUserModelId = Module.findExportByName("KernelBase.dll", "VerifyApplicationUserModelId")
Interceptor.attach(VerifyApplicationUserModelId, {onLeave: function (args) {send("VerifyApplicationUserModelId");}});

var VerifyApplicationUserModelIdA = Module.findExportByName("KernelBase.dll", "VerifyApplicationUserModelIdA")
Interceptor.attach(VerifyApplicationUserModelIdA, {onLeave: function (args) {send("VerifyApplicationUserModelIdA");}});

var VerifyPackageFamilyName = Module.findExportByName("KernelBase.dll", "VerifyPackageFamilyName")
Interceptor.attach(VerifyPackageFamilyName, {onLeave: function (args) {send("VerifyPackageFamilyName");}});

var VerifyPackageFamilyNameA = Module.findExportByName("KernelBase.dll", "VerifyPackageFamilyNameA")
Interceptor.attach(VerifyPackageFamilyNameA, {onLeave: function (args) {send("VerifyPackageFamilyNameA");}});

var VerifyPackageFullName = Module.findExportByName("KernelBase.dll", "VerifyPackageFullName")
Interceptor.attach(VerifyPackageFullName, {onLeave: function (args) {send("VerifyPackageFullName");}});

var VerifyPackageFullNameA = Module.findExportByName("KernelBase.dll", "VerifyPackageFullNameA")
Interceptor.attach(VerifyPackageFullNameA, {onLeave: function (args) {send("VerifyPackageFullNameA");}});

var VerifyPackageId = Module.findExportByName("KernelBase.dll", "VerifyPackageId")
Interceptor.attach(VerifyPackageId, {onLeave: function (args) {send("VerifyPackageId");}});

var VerifyPackageIdA = Module.findExportByName("KernelBase.dll", "VerifyPackageIdA")
Interceptor.attach(VerifyPackageIdA, {onLeave: function (args) {send("VerifyPackageIdA");}});

var VerifyPackagePublisher = Module.findExportByName("KernelBase.dll", "VerifyPackagePublisher")
Interceptor.attach(VerifyPackagePublisher, {onLeave: function (args) {send("VerifyPackagePublisher");}});

var VerifyPackagePublisherA = Module.findExportByName("KernelBase.dll", "VerifyPackagePublisherA")
Interceptor.attach(VerifyPackagePublisherA, {onLeave: function (args) {send("VerifyPackagePublisherA");}});

var VerifyPackageRelativeApplicationId = Module.findExportByName("KernelBase.dll", "VerifyPackageRelativeApplicationId")
Interceptor.attach(VerifyPackageRelativeApplicationId, {onLeave: function (args) {send("VerifyPackageRelativeApplicationId");}});

var VerifyPackageRelativeApplicationIdA = Module.findExportByName("KernelBase.dll", "VerifyPackageRelativeApplicationIdA")
Interceptor.attach(VerifyPackageRelativeApplicationIdA, {onLeave: function (args) {send("VerifyPackageRelativeApplicationIdA");}});

var VerifyScripts = Module.findExportByName("KernelBase.dll", "VerifyScripts")
Interceptor.attach(VerifyScripts, {onLeave: function (args) {send("VerifyScripts");}});

var VirtualAlloc = Module.findExportByName("KernelBase.dll", "VirtualAlloc")
Interceptor.attach(VirtualAlloc, {onLeave: function (args) {send("VirtualAlloc");}});

var VirtualAlloc2 = Module.findExportByName("KernelBase.dll", "VirtualAlloc2")
Interceptor.attach(VirtualAlloc2, {onLeave: function (args) {send("VirtualAlloc2");}});

var VirtualAlloc2FromApp = Module.findExportByName("KernelBase.dll", "VirtualAlloc2FromApp")
Interceptor.attach(VirtualAlloc2FromApp, {onLeave: function (args) {send("VirtualAlloc2FromApp");}});

var VirtualAllocEx = Module.findExportByName("KernelBase.dll", "VirtualAllocEx")
Interceptor.attach(VirtualAllocEx, {onLeave: function (args) {send("VirtualAllocEx");}});

var VirtualAllocExNuma = Module.findExportByName("KernelBase.dll", "VirtualAllocExNuma")
Interceptor.attach(VirtualAllocExNuma, {onLeave: function (args) {send("VirtualAllocExNuma");}});

var VirtualAllocFromApp = Module.findExportByName("KernelBase.dll", "VirtualAllocFromApp")
Interceptor.attach(VirtualAllocFromApp, {onLeave: function (args) {send("VirtualAllocFromApp");}});

var VirtualFree = Module.findExportByName("KernelBase.dll", "VirtualFree")
Interceptor.attach(VirtualFree, {onLeave: function (args) {send("VirtualFree");}});

var VirtualFreeEx = Module.findExportByName("KernelBase.dll", "VirtualFreeEx")
Interceptor.attach(VirtualFreeEx, {onLeave: function (args) {send("VirtualFreeEx");}});

var VirtualLock = Module.findExportByName("KernelBase.dll", "VirtualLock")
Interceptor.attach(VirtualLock, {onLeave: function (args) {send("VirtualLock");}});

var VirtualProtect = Module.findExportByName("KernelBase.dll", "VirtualProtect")
Interceptor.attach(VirtualProtect, {onLeave: function (args) {send("VirtualProtect");}});

var VirtualProtectEx = Module.findExportByName("KernelBase.dll", "VirtualProtectEx")
Interceptor.attach(VirtualProtectEx, {onLeave: function (args) {send("VirtualProtectEx");}});

var VirtualProtectFromApp = Module.findExportByName("KernelBase.dll", "VirtualProtectFromApp")
Interceptor.attach(VirtualProtectFromApp, {onLeave: function (args) {send("VirtualProtectFromApp");}});

var VirtualQuery = Module.findExportByName("KernelBase.dll", "VirtualQuery")
Interceptor.attach(VirtualQuery, {onLeave: function (args) {send("VirtualQuery");}});

var VirtualQueryEx = Module.findExportByName("KernelBase.dll", "VirtualQueryEx")
Interceptor.attach(VirtualQueryEx, {onLeave: function (args) {send("VirtualQueryEx");}});

var VirtualUnlock = Module.findExportByName("KernelBase.dll", "VirtualUnlock")
Interceptor.attach(VirtualUnlock, {onLeave: function (args) {send("VirtualUnlock");}});

var VirtualUnlockEx = Module.findExportByName("KernelBase.dll", "VirtualUnlockEx")
Interceptor.attach(VirtualUnlockEx, {onLeave: function (args) {send("VirtualUnlockEx");}});

var WTSGetServiceSessionId = Module.findExportByName("KernelBase.dll", "WTSGetServiceSessionId")
Interceptor.attach(WTSGetServiceSessionId, {onLeave: function (args) {send("WTSGetServiceSessionId");}});

var WTSIsServerContainer = Module.findExportByName("KernelBase.dll", "WTSIsServerContainer")
Interceptor.attach(WTSIsServerContainer, {onLeave: function (args) {send("WTSIsServerContainer");}});

var WaitCommEvent = Module.findExportByName("KernelBase.dll", "WaitCommEvent")
Interceptor.attach(WaitCommEvent, {onLeave: function (args) {send("WaitCommEvent");}});

var WaitForDebugEvent = Module.findExportByName("KernelBase.dll", "WaitForDebugEvent")
Interceptor.attach(WaitForDebugEvent, {onLeave: function (args) {send("WaitForDebugEvent");}});

var WaitForDebugEventEx = Module.findExportByName("KernelBase.dll", "WaitForDebugEventEx")
Interceptor.attach(WaitForDebugEventEx, {onLeave: function (args) {send("WaitForDebugEventEx");}});

var WaitForMachinePolicyForegroundProcessingInternal = Module.findExportByName("KernelBase.dll", "WaitForMachinePolicyForegroundProcessingInternal")
Interceptor.attach(WaitForMachinePolicyForegroundProcessingInternal, {onLeave: function (args) {send("WaitForMachinePolicyForegroundProcessingInternal");}});

var WaitForMultipleObjects = Module.findExportByName("KernelBase.dll", "WaitForMultipleObjects")
Interceptor.attach(WaitForMultipleObjects, {onLeave: function (args) {send("WaitForMultipleObjects");}});

var WaitForMultipleObjectsEx = Module.findExportByName("KernelBase.dll", "WaitForMultipleObjectsEx")
Interceptor.attach(WaitForMultipleObjectsEx, {onLeave: function (args) {send("WaitForMultipleObjectsEx");}});

var WaitForSingleObject = Module.findExportByName("KernelBase.dll", "WaitForSingleObject")
Interceptor.attach(WaitForSingleObject, {onLeave: function (args) {send("WaitForSingleObject");}});

var WaitForSingleObjectEx = Module.findExportByName("KernelBase.dll", "WaitForSingleObjectEx")
Interceptor.attach(WaitForSingleObjectEx, {onLeave: function (args) {send("WaitForSingleObjectEx");}});

var WaitForThreadpoolIoCallbacks = Module.findExportByName("KernelBase.dll", "WaitForThreadpoolIoCallbacks")
Interceptor.attach(WaitForThreadpoolIoCallbacks, {onLeave: function (args) {send("WaitForThreadpoolIoCallbacks");}});

var WaitForThreadpoolTimerCallbacks = Module.findExportByName("KernelBase.dll", "WaitForThreadpoolTimerCallbacks")
Interceptor.attach(WaitForThreadpoolTimerCallbacks, {onLeave: function (args) {send("WaitForThreadpoolTimerCallbacks");}});

var WaitForThreadpoolWaitCallbacks = Module.findExportByName("KernelBase.dll", "WaitForThreadpoolWaitCallbacks")
Interceptor.attach(WaitForThreadpoolWaitCallbacks, {onLeave: function (args) {send("WaitForThreadpoolWaitCallbacks");}});

var WaitForThreadpoolWorkCallbacks = Module.findExportByName("KernelBase.dll", "WaitForThreadpoolWorkCallbacks")
Interceptor.attach(WaitForThreadpoolWorkCallbacks, {onLeave: function (args) {send("WaitForThreadpoolWorkCallbacks");}});

var WaitForUserPolicyForegroundProcessingInternal = Module.findExportByName("KernelBase.dll", "WaitForUserPolicyForegroundProcessingInternal")
Interceptor.attach(WaitForUserPolicyForegroundProcessingInternal, {onLeave: function (args) {send("WaitForUserPolicyForegroundProcessingInternal");}});

var WaitNamedPipeW = Module.findExportByName("KernelBase.dll", "WaitNamedPipeW")
Interceptor.attach(WaitNamedPipeW, {onLeave: function (args) {send("WaitNamedPipeW");}});

var WaitOnAddress = Module.findExportByName("KernelBase.dll", "WaitOnAddress")
Interceptor.attach(WaitOnAddress, {onLeave: function (args) {send("WaitOnAddress");}});

var WakeAllConditionVariable = Module.findExportByName("KernelBase.dll", "WakeAllConditionVariable")
Interceptor.attach(WakeAllConditionVariable, {onLeave: function (args) {send("WakeAllConditionVariable");}});

var WakeByAddressAll = Module.findExportByName("KernelBase.dll", "WakeByAddressAll")
Interceptor.attach(WakeByAddressAll, {onLeave: function (args) {send("WakeByAddressAll");}});

var WakeByAddressSingle = Module.findExportByName("KernelBase.dll", "WakeByAddressSingle")
Interceptor.attach(WakeByAddressSingle, {onLeave: function (args) {send("WakeByAddressSingle");}});

var WakeConditionVariable = Module.findExportByName("KernelBase.dll", "WakeConditionVariable")
Interceptor.attach(WakeConditionVariable, {onLeave: function (args) {send("WakeConditionVariable");}});

var WerGetFlags = Module.findExportByName("KernelBase.dll", "WerGetFlags")
Interceptor.attach(WerGetFlags, {onLeave: function (args) {send("WerGetFlags");}});

var WerRegisterAdditionalProcess = Module.findExportByName("KernelBase.dll", "WerRegisterAdditionalProcess")
Interceptor.attach(WerRegisterAdditionalProcess, {onLeave: function (args) {send("WerRegisterAdditionalProcess");}});

var WerRegisterAppLocalDump = Module.findExportByName("KernelBase.dll", "WerRegisterAppLocalDump")
Interceptor.attach(WerRegisterAppLocalDump, {onLeave: function (args) {send("WerRegisterAppLocalDump");}});

var WerRegisterCustomMetadata = Module.findExportByName("KernelBase.dll", "WerRegisterCustomMetadata")
Interceptor.attach(WerRegisterCustomMetadata, {onLeave: function (args) {send("WerRegisterCustomMetadata");}});

var WerRegisterExcludedMemoryBlock = Module.findExportByName("KernelBase.dll", "WerRegisterExcludedMemoryBlock")
Interceptor.attach(WerRegisterExcludedMemoryBlock, {onLeave: function (args) {send("WerRegisterExcludedMemoryBlock");}});

var WerRegisterFile = Module.findExportByName("KernelBase.dll", "WerRegisterFile")
Interceptor.attach(WerRegisterFile, {onLeave: function (args) {send("WerRegisterFile");}});

var WerRegisterMemoryBlock = Module.findExportByName("KernelBase.dll", "WerRegisterMemoryBlock")
Interceptor.attach(WerRegisterMemoryBlock, {onLeave: function (args) {send("WerRegisterMemoryBlock");}});

var WerRegisterRuntimeExceptionModule = Module.findExportByName("KernelBase.dll", "WerRegisterRuntimeExceptionModule")
Interceptor.attach(WerRegisterRuntimeExceptionModule, {onLeave: function (args) {send("WerRegisterRuntimeExceptionModule");}});

var WerSetFlags = Module.findExportByName("KernelBase.dll", "WerSetFlags")
Interceptor.attach(WerSetFlags, {onLeave: function (args) {send("WerSetFlags");}});

var WerSetMaxProcessHoldMilliseconds = Module.findExportByName("KernelBase.dll", "WerSetMaxProcessHoldMilliseconds")
Interceptor.attach(WerSetMaxProcessHoldMilliseconds, {onLeave: function (args) {send("WerSetMaxProcessHoldMilliseconds");}});

var WerUnregisterAdditionalProcess = Module.findExportByName("KernelBase.dll", "WerUnregisterAdditionalProcess")
Interceptor.attach(WerUnregisterAdditionalProcess, {onLeave: function (args) {send("WerUnregisterAdditionalProcess");}});

var WerUnregisterAppLocalDump = Module.findExportByName("KernelBase.dll", "WerUnregisterAppLocalDump")
Interceptor.attach(WerUnregisterAppLocalDump, {onLeave: function (args) {send("WerUnregisterAppLocalDump");}});

var WerUnregisterCustomMetadata = Module.findExportByName("KernelBase.dll", "WerUnregisterCustomMetadata")
Interceptor.attach(WerUnregisterCustomMetadata, {onLeave: function (args) {send("WerUnregisterCustomMetadata");}});

var WerUnregisterExcludedMemoryBlock = Module.findExportByName("KernelBase.dll", "WerUnregisterExcludedMemoryBlock")
Interceptor.attach(WerUnregisterExcludedMemoryBlock, {onLeave: function (args) {send("WerUnregisterExcludedMemoryBlock");}});

var WerUnregisterFile = Module.findExportByName("KernelBase.dll", "WerUnregisterFile")
Interceptor.attach(WerUnregisterFile, {onLeave: function (args) {send("WerUnregisterFile");}});

var WerUnregisterMemoryBlock = Module.findExportByName("KernelBase.dll", "WerUnregisterMemoryBlock")
Interceptor.attach(WerUnregisterMemoryBlock, {onLeave: function (args) {send("WerUnregisterMemoryBlock");}});

var WerUnregisterRuntimeExceptionModule = Module.findExportByName("KernelBase.dll", "WerUnregisterRuntimeExceptionModule")
Interceptor.attach(WerUnregisterRuntimeExceptionModule, {onLeave: function (args) {send("WerUnregisterRuntimeExceptionModule");}});

var WerpNotifyLoadStringResource = Module.findExportByName("KernelBase.dll", "WerpNotifyLoadStringResource")
Interceptor.attach(WerpNotifyLoadStringResource, {onLeave: function (args) {send("WerpNotifyLoadStringResource");}});

var WerpNotifyUseStringResource = Module.findExportByName("KernelBase.dll", "WerpNotifyUseStringResource")
Interceptor.attach(WerpNotifyUseStringResource, {onLeave: function (args) {send("WerpNotifyUseStringResource");}});

var WideCharToMultiByte = Module.findExportByName("KernelBase.dll", "WideCharToMultiByte")
Interceptor.attach(WideCharToMultiByte, {onLeave: function (args) {send("WideCharToMultiByte");}});

var WilFailureNotifyWatchers = Module.findExportByName("KernelBase.dll", "WilFailureNotifyWatchers")
Interceptor.attach(WilFailureNotifyWatchers, {onLeave: function (args) {send("WilFailureNotifyWatchers");}});

var WilFailureWatcherResume = Module.findExportByName("KernelBase.dll", "WilFailureWatcherResume")
Interceptor.attach(WilFailureWatcherResume, {onLeave: function (args) {send("WilFailureWatcherResume");}});

var WilFailureWatcherSubscribe = Module.findExportByName("KernelBase.dll", "WilFailureWatcherSubscribe")
Interceptor.attach(WilFailureWatcherSubscribe, {onLeave: function (args) {send("WilFailureWatcherSubscribe");}});

var WilFailureWatcherSuspend = Module.findExportByName("KernelBase.dll", "WilFailureWatcherSuspend")
Interceptor.attach(WilFailureWatcherSuspend, {onLeave: function (args) {send("WilFailureWatcherSuspend");}});

var WilFailureWatcherUnsubscribe = Module.findExportByName("KernelBase.dll", "WilFailureWatcherUnsubscribe")
Interceptor.attach(WilFailureWatcherUnsubscribe, {onLeave: function (args) {send("WilFailureWatcherUnsubscribe");}});

var Wow64DisableWow64FsRedirection = Module.findExportByName("KernelBase.dll", "Wow64DisableWow64FsRedirection")
Interceptor.attach(Wow64DisableWow64FsRedirection, {onLeave: function (args) {send("Wow64DisableWow64FsRedirection");}});

var Wow64EnableWow64FsRedirection = Module.findExportByName("KernelBase.dll", "Wow64EnableWow64FsRedirection")
Interceptor.attach(Wow64EnableWow64FsRedirection, {onLeave: function (args) {send("Wow64EnableWow64FsRedirection");}});

var Wow64GetThreadContext = Module.findExportByName("KernelBase.dll", "Wow64GetThreadContext")
Interceptor.attach(Wow64GetThreadContext, {onLeave: function (args) {send("Wow64GetThreadContext");}});

var Wow64RevertWow64FsRedirection = Module.findExportByName("KernelBase.dll", "Wow64RevertWow64FsRedirection")
Interceptor.attach(Wow64RevertWow64FsRedirection, {onLeave: function (args) {send("Wow64RevertWow64FsRedirection");}});

var Wow64SetThreadContext = Module.findExportByName("KernelBase.dll", "Wow64SetThreadContext")
Interceptor.attach(Wow64SetThreadContext, {onLeave: function (args) {send("Wow64SetThreadContext");}});

var Wow64SetThreadDefaultGuestMachine = Module.findExportByName("KernelBase.dll", "Wow64SetThreadDefaultGuestMachine")
Interceptor.attach(Wow64SetThreadDefaultGuestMachine, {onLeave: function (args) {send("Wow64SetThreadDefaultGuestMachine");}});

var Wow64SuspendThread = Module.findExportByName("KernelBase.dll", "Wow64SuspendThread")
Interceptor.attach(Wow64SuspendThread, {onLeave: function (args) {send("Wow64SuspendThread");}});

var WriteConsoleA = Module.findExportByName("KernelBase.dll", "WriteConsoleA")
Interceptor.attach(WriteConsoleA, {onLeave: function (args) {send("WriteConsoleA");}});

var WriteConsoleInputA = Module.findExportByName("KernelBase.dll", "WriteConsoleInputA")
Interceptor.attach(WriteConsoleInputA, {onLeave: function (args) {send("WriteConsoleInputA");}});

var WriteConsoleInputW = Module.findExportByName("KernelBase.dll", "WriteConsoleInputW")
Interceptor.attach(WriteConsoleInputW, {onLeave: function (args) {send("WriteConsoleInputW");}});

var WriteConsoleOutputA = Module.findExportByName("KernelBase.dll", "WriteConsoleOutputA")
Interceptor.attach(WriteConsoleOutputA, {onLeave: function (args) {send("WriteConsoleOutputA");}});

var WriteConsoleOutputAttribute = Module.findExportByName("KernelBase.dll", "WriteConsoleOutputAttribute")
Interceptor.attach(WriteConsoleOutputAttribute, {onLeave: function (args) {send("WriteConsoleOutputAttribute");}});

var WriteConsoleOutputCharacterA = Module.findExportByName("KernelBase.dll", "WriteConsoleOutputCharacterA")
Interceptor.attach(WriteConsoleOutputCharacterA, {onLeave: function (args) {send("WriteConsoleOutputCharacterA");}});

var WriteConsoleOutputCharacterW = Module.findExportByName("KernelBase.dll", "WriteConsoleOutputCharacterW")
Interceptor.attach(WriteConsoleOutputCharacterW, {onLeave: function (args) {send("WriteConsoleOutputCharacterW");}});

var WriteConsoleOutputW = Module.findExportByName("KernelBase.dll", "WriteConsoleOutputW")
Interceptor.attach(WriteConsoleOutputW, {onLeave: function (args) {send("WriteConsoleOutputW");}});

var WriteConsoleW = Module.findExportByName("KernelBase.dll", "WriteConsoleW")
Interceptor.attach(WriteConsoleW, {onLeave: function (args) {send("WriteConsoleW");}});

var WriteFile = Module.findExportByName("KernelBase.dll", "WriteFile")
Interceptor.attach(WriteFile, {onLeave: function (args) {send("WriteFile");}});

var WriteFileEx = Module.findExportByName("KernelBase.dll", "WriteFileEx")
Interceptor.attach(WriteFileEx, {onLeave: function (args) {send("WriteFileEx");}});

var WriteFileGather = Module.findExportByName("KernelBase.dll", "WriteFileGather")
Interceptor.attach(WriteFileGather, {onLeave: function (args) {send("WriteFileGather");}});

var WriteProcessMemory = Module.findExportByName("KernelBase.dll", "WriteProcessMemory")
Interceptor.attach(WriteProcessMemory, {onLeave: function (args) {send("WriteProcessMemory");}});

var WriteStateAtomValue = Module.findExportByName("KernelBase.dll", "WriteStateAtomValue")
Interceptor.attach(WriteStateAtomValue, {onLeave: function (args) {send("WriteStateAtomValue");}});

var WriteStateContainerValue = Module.findExportByName("KernelBase.dll", "WriteStateContainerValue")
Interceptor.attach(WriteStateContainerValue, {onLeave: function (args) {send("WriteStateContainerValue");}});

var ZombifyActCtx = Module.findExportByName("KernelBase.dll", "ZombifyActCtx")
Interceptor.attach(ZombifyActCtx, {onLeave: function (args) {send("ZombifyActCtx");}});

var _AddMUIStringToCache = Module.findExportByName("KernelBase.dll", "_AddMUIStringToCache")
Interceptor.attach(_AddMUIStringToCache, {onLeave: function (args) {send("_AddMUIStringToCache");}});

var _GetMUIStringFromCache = Module.findExportByName("KernelBase.dll", "_GetMUIStringFromCache")
Interceptor.attach(_GetMUIStringFromCache, {onLeave: function (args) {send("_GetMUIStringFromCache");}});

var _OpenMuiStringCache = Module.findExportByName("KernelBase.dll", "_OpenMuiStringCache")
Interceptor.attach(_OpenMuiStringCache, {onLeave: function (args) {send("_OpenMuiStringCache");}});

var __C_specific_handler = Module.findExportByName("KernelBase.dll", "__C_specific_handler")
Interceptor.attach(__C_specific_handler, {onLeave: function (args) {send("__C_specific_handler");}});

var __argc = Module.findExportByName("KernelBase.dll", "__argc")
Interceptor.attach(__argc, {onLeave: function (args) {send("__argc");}});

var __chkstk = Module.findExportByName("KernelBase.dll", "__chkstk")
Interceptor.attach(__chkstk, {onLeave: function (args) {send("__chkstk");}});

var __dllonexit3 = Module.findExportByName("KernelBase.dll", "__dllonexit3")
Interceptor.attach(__dllonexit3, {onLeave: function (args) {send("__dllonexit3");}});

var __misaligned_access = Module.findExportByName("KernelBase.dll", "__misaligned_access")
Interceptor.attach(__misaligned_access, {onLeave: function (args) {send("__misaligned_access");}});

var __wargv = Module.findExportByName("KernelBase.dll", "__wargv")
Interceptor.attach(__wargv, {onLeave: function (args) {send("__wargv");}});

var __wgetmainargs = Module.findExportByName("KernelBase.dll", "__wgetmainargs")
Interceptor.attach(__wgetmainargs, {onLeave: function (args) {send("__wgetmainargs");}});

var _amsg_exit = Module.findExportByName("KernelBase.dll", "_amsg_exit")
Interceptor.attach(_amsg_exit, {onLeave: function (args) {send("_amsg_exit");}});

var _c_exit = Module.findExportByName("KernelBase.dll", "_c_exit")
Interceptor.attach(_c_exit, {onLeave: function (args) {send("_c_exit");}});

var _cexit = Module.findExportByName("KernelBase.dll", "_cexit")
Interceptor.attach(_cexit, {onLeave: function (args) {send("_cexit");}});

var _exit = Module.findExportByName("KernelBase.dll", "_exit")
Interceptor.attach(_exit, {onLeave: function (args) {send("_exit");}});

var _initterm = Module.findExportByName("KernelBase.dll", "_initterm")
Interceptor.attach(_initterm, {onLeave: function (args) {send("_initterm");}});

var _initterm_e = Module.findExportByName("KernelBase.dll", "_initterm_e")
Interceptor.attach(_initterm_e, {onLeave: function (args) {send("_initterm_e");}});

var _invalid_parameter = Module.findExportByName("KernelBase.dll", "_invalid_parameter")
Interceptor.attach(_invalid_parameter, {onLeave: function (args) {send("_invalid_parameter");}});

var _local_unwind = Module.findExportByName("KernelBase.dll", "_local_unwind")
Interceptor.attach(_local_unwind, {onLeave: function (args) {send("_local_unwind");}});

var _onexit = Module.findExportByName("KernelBase.dll", "_onexit")
Interceptor.attach(_onexit, {onLeave: function (args) {send("_onexit");}});

var _purecall = Module.findExportByName("KernelBase.dll", "_purecall")
Interceptor.attach(_purecall, {onLeave: function (args) {send("_purecall");}});

var _time64 = Module.findExportByName("KernelBase.dll", "_time64")
Interceptor.attach(_time64, {onLeave: function (args) {send("_time64");}});

var atexit = Module.findExportByName("KernelBase.dll", "atexit")
Interceptor.attach(atexit, {onLeave: function (args) {send("atexit");}});

var exit = Module.findExportByName("KernelBase.dll", "exit")
Interceptor.attach(exit, {onLeave: function (args) {send("exit");}});

var hgets = Module.findExportByName("KernelBase.dll", "hgets")
Interceptor.attach(hgets, {onLeave: function (args) {send("hgets");}});

var hwprintf = Module.findExportByName("KernelBase.dll", "hwprintf")
Interceptor.attach(hwprintf, {onLeave: function (args) {send("hwprintf");}});

var lstrcmp = Module.findExportByName("KernelBase.dll", "lstrcmp")
Interceptor.attach(lstrcmp, {onLeave: function (args) {send("lstrcmp");}});

var lstrcmpA = Module.findExportByName("KernelBase.dll", "lstrcmpA")
Interceptor.attach(lstrcmpA, {onLeave: function (args) {send("lstrcmpA");}});

var lstrcmpW = Module.findExportByName("KernelBase.dll", "lstrcmpW")
Interceptor.attach(lstrcmpW, {onLeave: function (args) {send("lstrcmpW");}});

var lstrcmpi = Module.findExportByName("KernelBase.dll", "lstrcmpi")
Interceptor.attach(lstrcmpi, {onLeave: function (args) {send("lstrcmpi");}});

var lstrcmpiA = Module.findExportByName("KernelBase.dll", "lstrcmpiA")
Interceptor.attach(lstrcmpiA, {onLeave: function (args) {send("lstrcmpiA");}});

var lstrcmpiW = Module.findExportByName("KernelBase.dll", "lstrcmpiW")
Interceptor.attach(lstrcmpiW, {onLeave: function (args) {send("lstrcmpiW");}});

var lstrcpyn = Module.findExportByName("KernelBase.dll", "lstrcpyn")
Interceptor.attach(lstrcpyn, {onLeave: function (args) {send("lstrcpyn");}});

var lstrcpynA = Module.findExportByName("KernelBase.dll", "lstrcpynA")
Interceptor.attach(lstrcpynA, {onLeave: function (args) {send("lstrcpynA");}});

var lstrcpynW = Module.findExportByName("KernelBase.dll", "lstrcpynW")
Interceptor.attach(lstrcpynW, {onLeave: function (args) {send("lstrcpynW");}});

var lstrlen = Module.findExportByName("KernelBase.dll", "lstrlen")
Interceptor.attach(lstrlen, {onLeave: function (args) {send("lstrlen");}});

var lstrlenA = Module.findExportByName("KernelBase.dll", "lstrlenA")
Interceptor.attach(lstrlenA, {onLeave: function (args) {send("lstrlenA");}});

var lstrlenW = Module.findExportByName("KernelBase.dll", "lstrlenW")
Interceptor.attach(lstrlenW, {onLeave: function (args) {send("lstrlenW");}});

var time = Module.findExportByName("KernelBase.dll", "time")
Interceptor.attach(time, {onLeave: function (args) {send("time");}});

var wprintf = Module.findExportByName("KernelBase.dll", "wprintf")
Interceptor.attach(wprintf, {onLeave: function (args) {send("wprintf");}});

