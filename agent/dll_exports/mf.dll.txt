var AppendPropVariant = Module.findExportByName("mf.dll", "AppendPropVariant")
Interceptor.attach(AppendPropVariant, {onLeave: function (args) {send("AppendPropVariant");}});

var ConvertPropVariant = Module.findExportByName("mf.dll", "ConvertPropVariant")
Interceptor.attach(ConvertPropVariant, {onLeave: function (args) {send("ConvertPropVariant");}});

var CopyPropertyStore = Module.findExportByName("mf.dll", "CopyPropertyStore")
Interceptor.attach(CopyPropertyStore, {onLeave: function (args) {send("CopyPropertyStore");}});

var CreateNamedPropertyStore = Module.findExportByName("mf.dll", "CreateNamedPropertyStore")
Interceptor.attach(CreateNamedPropertyStore, {onLeave: function (args) {send("CreateNamedPropertyStore");}});

var DllCanUnloadNow = Module.findExportByName("mf.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

var DllGetActivationFactory = Module.findExportByName("mf.dll", "DllGetActivationFactory")
Interceptor.attach(DllGetActivationFactory, {onLeave: function (args) {send("DllGetActivationFactory");}});

var DllGetClassObject = Module.findExportByName("mf.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var ExtractPropVariant = Module.findExportByName("mf.dll", "ExtractPropVariant")
Interceptor.attach(ExtractPropVariant, {onLeave: function (args) {send("ExtractPropVariant");}});

var MFCreate3GPMediaSink = Module.findExportByName("mf.dll", "MFCreate3GPMediaSink")
Interceptor.attach(MFCreate3GPMediaSink, {onLeave: function (args) {send("MFCreate3GPMediaSink");}});

var MFCreateAC3MediaSink = Module.findExportByName("mf.dll", "MFCreateAC3MediaSink")
Interceptor.attach(MFCreateAC3MediaSink, {onLeave: function (args) {send("MFCreateAC3MediaSink");}});

var MFCreateADTSMediaSink = Module.findExportByName("mf.dll", "MFCreateADTSMediaSink")
Interceptor.attach(MFCreateADTSMediaSink, {onLeave: function (args) {send("MFCreateADTSMediaSink");}});

var MFCreateASFByteStreamPlugin = Module.findExportByName("mf.dll", "MFCreateASFByteStreamPlugin")
Interceptor.attach(MFCreateASFByteStreamPlugin, {onLeave: function (args) {send("MFCreateASFByteStreamPlugin");}});

var MFCreateASFContentInfo = Module.findExportByName("mf.dll", "MFCreateASFContentInfo")
Interceptor.attach(MFCreateASFContentInfo, {onLeave: function (args) {send("MFCreateASFContentInfo");}});

var MFCreateASFIndexer = Module.findExportByName("mf.dll", "MFCreateASFIndexer")
Interceptor.attach(MFCreateASFIndexer, {onLeave: function (args) {send("MFCreateASFIndexer");}});

var MFCreateASFIndexerByteStream = Module.findExportByName("mf.dll", "MFCreateASFIndexerByteStream")
Interceptor.attach(MFCreateASFIndexerByteStream, {onLeave: function (args) {send("MFCreateASFIndexerByteStream");}});

var MFCreateASFMediaSink = Module.findExportByName("mf.dll", "MFCreateASFMediaSink")
Interceptor.attach(MFCreateASFMediaSink, {onLeave: function (args) {send("MFCreateASFMediaSink");}});

var MFCreateASFMediaSinkActivate = Module.findExportByName("mf.dll", "MFCreateASFMediaSinkActivate")
Interceptor.attach(MFCreateASFMediaSinkActivate, {onLeave: function (args) {send("MFCreateASFMediaSinkActivate");}});

var MFCreateASFMultiplexer = Module.findExportByName("mf.dll", "MFCreateASFMultiplexer")
Interceptor.attach(MFCreateASFMultiplexer, {onLeave: function (args) {send("MFCreateASFMultiplexer");}});

var MFCreateASFProfile = Module.findExportByName("mf.dll", "MFCreateASFProfile")
Interceptor.attach(MFCreateASFProfile, {onLeave: function (args) {send("MFCreateASFProfile");}});

var MFCreateASFProfileFromPresentationDescriptor = Module.findExportByName("mf.dll", "MFCreateASFProfileFromPresentationDescriptor")
Interceptor.attach(MFCreateASFProfileFromPresentationDescriptor, {onLeave: function (args) {send("MFCreateASFProfileFromPresentationDescriptor");}});

var MFCreateASFSplitter = Module.findExportByName("mf.dll", "MFCreateASFSplitter")
Interceptor.attach(MFCreateASFSplitter, {onLeave: function (args) {send("MFCreateASFSplitter");}});

var MFCreateASFStreamSelector = Module.findExportByName("mf.dll", "MFCreateASFStreamSelector")
Interceptor.attach(MFCreateASFStreamSelector, {onLeave: function (args) {send("MFCreateASFStreamSelector");}});

var MFCreateASFStreamingMediaSink = Module.findExportByName("mf.dll", "MFCreateASFStreamingMediaSink")
Interceptor.attach(MFCreateASFStreamingMediaSink, {onLeave: function (args) {send("MFCreateASFStreamingMediaSink");}});

var MFCreateASFStreamingMediaSinkActivate = Module.findExportByName("mf.dll", "MFCreateASFStreamingMediaSinkActivate")
Interceptor.attach(MFCreateASFStreamingMediaSinkActivate, {onLeave: function (args) {send("MFCreateASFStreamingMediaSinkActivate");}});

var MFCreateAggregateSource = Module.findExportByName("mf.dll", "MFCreateAggregateSource")
Interceptor.attach(MFCreateAggregateSource, {onLeave: function (args) {send("MFCreateAggregateSource");}});

var MFCreateAppSourceProxy = Module.findExportByName("mf.dll", "MFCreateAppSourceProxy")
Interceptor.attach(MFCreateAppSourceProxy, {onLeave: function (args) {send("MFCreateAppSourceProxy");}});

var MFCreateAudioRenderer = Module.findExportByName("mf.dll", "MFCreateAudioRenderer")
Interceptor.attach(MFCreateAudioRenderer, {onLeave: function (args) {send("MFCreateAudioRenderer");}});

var MFCreateAudioRendererActivate = Module.findExportByName("mf.dll", "MFCreateAudioRendererActivate")
Interceptor.attach(MFCreateAudioRendererActivate, {onLeave: function (args) {send("MFCreateAudioRendererActivate");}});

var MFCreateByteCacheFile = Module.findExportByName("mf.dll", "MFCreateByteCacheFile")
Interceptor.attach(MFCreateByteCacheFile, {onLeave: function (args) {send("MFCreateByteCacheFile");}});

var MFCreateCacheManager = Module.findExportByName("mf.dll", "MFCreateCacheManager")
Interceptor.attach(MFCreateCacheManager, {onLeave: function (args) {send("MFCreateCacheManager");}});

var MFCreateCredentialCache = Module.findExportByName("mf.dll", "MFCreateCredentialCache")
Interceptor.attach(MFCreateCredentialCache, {onLeave: function (args) {send("MFCreateCredentialCache");}});

var MFCreateDeviceSource = Module.findExportByName("mf.dll", "MFCreateDeviceSource")
Interceptor.attach(MFCreateDeviceSource, {onLeave: function (args) {send("MFCreateDeviceSource");}});

var MFCreateDeviceSourceActivate = Module.findExportByName("mf.dll", "MFCreateDeviceSourceActivate")
Interceptor.attach(MFCreateDeviceSourceActivate, {onLeave: function (args) {send("MFCreateDeviceSourceActivate");}});

var MFCreateDrmNetNDSchemePlugin = Module.findExportByName("mf.dll", "MFCreateDrmNetNDSchemePlugin")
Interceptor.attach(MFCreateDrmNetNDSchemePlugin, {onLeave: function (args) {send("MFCreateDrmNetNDSchemePlugin");}});

var MFCreateEncryptedMediaExtensionsStoreActivate = Module.findExportByName("mf.dll", "MFCreateEncryptedMediaExtensionsStoreActivate")
Interceptor.attach(MFCreateEncryptedMediaExtensionsStoreActivate, {onLeave: function (args) {send("MFCreateEncryptedMediaExtensionsStoreActivate");}});

var MFCreateFMPEG4MediaSink = Module.findExportByName("mf.dll", "MFCreateFMPEG4MediaSink")
Interceptor.attach(MFCreateFMPEG4MediaSink, {onLeave: function (args) {send("MFCreateFMPEG4MediaSink");}});

var MFCreateFileBlockMap = Module.findExportByName("mf.dll", "MFCreateFileBlockMap")
Interceptor.attach(MFCreateFileBlockMap, {onLeave: function (args) {send("MFCreateFileBlockMap");}});

var MFCreateFileSchemePlugin = Module.findExportByName("mf.dll", "MFCreateFileSchemePlugin")
Interceptor.attach(MFCreateFileSchemePlugin, {onLeave: function (args) {send("MFCreateFileSchemePlugin");}});

var MFCreateHttpSchemePlugin = Module.findExportByName("mf.dll", "MFCreateHttpSchemePlugin")
Interceptor.attach(MFCreateHttpSchemePlugin, {onLeave: function (args) {send("MFCreateHttpSchemePlugin");}});

var MFCreateLPCMByteStreamPlugin = Module.findExportByName("mf.dll", "MFCreateLPCMByteStreamPlugin")
Interceptor.attach(MFCreateLPCMByteStreamPlugin, {onLeave: function (args) {send("MFCreateLPCMByteStreamPlugin");}});

var MFCreateMP3ByteStreamPlugin = Module.findExportByName("mf.dll", "MFCreateMP3ByteStreamPlugin")
Interceptor.attach(MFCreateMP3ByteStreamPlugin, {onLeave: function (args) {send("MFCreateMP3ByteStreamPlugin");}});

var MFCreateMP3MediaSink = Module.findExportByName("mf.dll", "MFCreateMP3MediaSink")
Interceptor.attach(MFCreateMP3MediaSink, {onLeave: function (args) {send("MFCreateMP3MediaSink");}});

var MFCreateMPEG4MediaSink = Module.findExportByName("mf.dll", "MFCreateMPEG4MediaSink")
Interceptor.attach(MFCreateMPEG4MediaSink, {onLeave: function (args) {send("MFCreateMPEG4MediaSink");}});

var MFCreateMediaProcessor = Module.findExportByName("mf.dll", "MFCreateMediaProcessor")
Interceptor.attach(MFCreateMediaProcessor, {onLeave: function (args) {send("MFCreateMediaProcessor");}});

var MFCreateMediaSession = Module.findExportByName("mf.dll", "MFCreateMediaSession")
Interceptor.attach(MFCreateMediaSession, {onLeave: function (args) {send("MFCreateMediaSession");}});

var MFCreateMuxSink = Module.findExportByName("mf.dll", "MFCreateMuxSink")
Interceptor.attach(MFCreateMuxSink, {onLeave: function (args) {send("MFCreateMuxSink");}});

var MFCreateNSCByteStreamPlugin = Module.findExportByName("mf.dll", "MFCreateNSCByteStreamPlugin")
Interceptor.attach(MFCreateNSCByteStreamPlugin, {onLeave: function (args) {send("MFCreateNSCByteStreamPlugin");}});

var MFCreateNetSchemePlugin = Module.findExportByName("mf.dll", "MFCreateNetSchemePlugin")
Interceptor.attach(MFCreateNetSchemePlugin, {onLeave: function (args) {send("MFCreateNetSchemePlugin");}});

var MFCreatePMPHost = Module.findExportByName("mf.dll", "MFCreatePMPHost")
Interceptor.attach(MFCreatePMPHost, {onLeave: function (args) {send("MFCreatePMPHost");}});

var MFCreatePMPMediaSession = Module.findExportByName("mf.dll", "MFCreatePMPMediaSession")
Interceptor.attach(MFCreatePMPMediaSession, {onLeave: function (args) {send("MFCreatePMPMediaSession");}});

var MFCreatePMPServer = Module.findExportByName("mf.dll", "MFCreatePMPServer")
Interceptor.attach(MFCreatePMPServer, {onLeave: function (args) {send("MFCreatePMPServer");}});

var MFCreatePresentationClock = Module.findExportByName("mf.dll", "MFCreatePresentationClock")
Interceptor.attach(MFCreatePresentationClock, {onLeave: function (args) {send("MFCreatePresentationClock");}});

var MFCreatePresentationDescriptorFromASFProfile = Module.findExportByName("mf.dll", "MFCreatePresentationDescriptorFromASFProfile")
Interceptor.attach(MFCreatePresentationDescriptorFromASFProfile, {onLeave: function (args) {send("MFCreatePresentationDescriptorFromASFProfile");}});

var MFCreateProtectedEnvironmentAccess = Module.findExportByName("mf.dll", "MFCreateProtectedEnvironmentAccess")
Interceptor.attach(MFCreateProtectedEnvironmentAccess, {onLeave: function (args) {send("MFCreateProtectedEnvironmentAccess");}});

var MFCreateProxyLocator = Module.findExportByName("mf.dll", "MFCreateProxyLocator")
Interceptor.attach(MFCreateProxyLocator, {onLeave: function (args) {send("MFCreateProxyLocator");}});

var MFCreateRemoteDesktopPlugin = Module.findExportByName("mf.dll", "MFCreateRemoteDesktopPlugin")
Interceptor.attach(MFCreateRemoteDesktopPlugin, {onLeave: function (args) {send("MFCreateRemoteDesktopPlugin");}});

var MFCreateSAMIByteStreamPlugin = Module.findExportByName("mf.dll", "MFCreateSAMIByteStreamPlugin")
Interceptor.attach(MFCreateSAMIByteStreamPlugin, {onLeave: function (args) {send("MFCreateSAMIByteStreamPlugin");}});

var MFCreateSampleCopierMFT = Module.findExportByName("mf.dll", "MFCreateSampleCopierMFT")
Interceptor.attach(MFCreateSampleCopierMFT, {onLeave: function (args) {send("MFCreateSampleCopierMFT");}});

var MFCreateSampleGrabberSinkActivate = Module.findExportByName("mf.dll", "MFCreateSampleGrabberSinkActivate")
Interceptor.attach(MFCreateSampleGrabberSinkActivate, {onLeave: function (args) {send("MFCreateSampleGrabberSinkActivate");}});

var MFCreateSecureHttpSchemePlugin = Module.findExportByName("mf.dll", "MFCreateSecureHttpSchemePlugin")
Interceptor.attach(MFCreateSecureHttpSchemePlugin, {onLeave: function (args) {send("MFCreateSecureHttpSchemePlugin");}});

var MFCreateSequencerSegmentOffset = Module.findExportByName("mf.dll", "MFCreateSequencerSegmentOffset")
Interceptor.attach(MFCreateSequencerSegmentOffset, {onLeave: function (args) {send("MFCreateSequencerSegmentOffset");}});

var MFCreateSequencerSource = Module.findExportByName("mf.dll", "MFCreateSequencerSource")
Interceptor.attach(MFCreateSequencerSource, {onLeave: function (args) {send("MFCreateSequencerSource");}});

var MFCreateSequencerSourceRemoteStream = Module.findExportByName("mf.dll", "MFCreateSequencerSourceRemoteStream")
Interceptor.attach(MFCreateSequencerSourceRemoteStream, {onLeave: function (args) {send("MFCreateSequencerSourceRemoteStream");}});

var MFCreateSimpleTypeHandler = Module.findExportByName("mf.dll", "MFCreateSimpleTypeHandler")
Interceptor.attach(MFCreateSimpleTypeHandler, {onLeave: function (args) {send("MFCreateSimpleTypeHandler");}});

var MFCreateSoundEventSchemePlugin = Module.findExportByName("mf.dll", "MFCreateSoundEventSchemePlugin")
Interceptor.attach(MFCreateSoundEventSchemePlugin, {onLeave: function (args) {send("MFCreateSoundEventSchemePlugin");}});

var MFCreateSourceResolver = Module.findExportByName("mf.dll", "MFCreateSourceResolver")
Interceptor.attach(MFCreateSourceResolver, {onLeave: function (args) {send("MFCreateSourceResolver");}});

var MFCreateStandardQualityManager = Module.findExportByName("mf.dll", "MFCreateStandardQualityManager")
Interceptor.attach(MFCreateStandardQualityManager, {onLeave: function (args) {send("MFCreateStandardQualityManager");}});

var MFCreateTopoLoader = Module.findExportByName("mf.dll", "MFCreateTopoLoader")
Interceptor.attach(MFCreateTopoLoader, {onLeave: function (args) {send("MFCreateTopoLoader");}});

var MFCreateTopology = Module.findExportByName("mf.dll", "MFCreateTopology")
Interceptor.attach(MFCreateTopology, {onLeave: function (args) {send("MFCreateTopology");}});

var MFCreateTopologyNode = Module.findExportByName("mf.dll", "MFCreateTopologyNode")
Interceptor.attach(MFCreateTopologyNode, {onLeave: function (args) {send("MFCreateTopologyNode");}});

var MFCreateTranscodeProfile = Module.findExportByName("mf.dll", "MFCreateTranscodeProfile")
Interceptor.attach(MFCreateTranscodeProfile, {onLeave: function (args) {send("MFCreateTranscodeProfile");}});

var MFCreateTranscodeSinkActivate = Module.findExportByName("mf.dll", "MFCreateTranscodeSinkActivate")
Interceptor.attach(MFCreateTranscodeSinkActivate, {onLeave: function (args) {send("MFCreateTranscodeSinkActivate");}});

var MFCreateTranscodeTopology = Module.findExportByName("mf.dll", "MFCreateTranscodeTopology")
Interceptor.attach(MFCreateTranscodeTopology, {onLeave: function (args) {send("MFCreateTranscodeTopology");}});

var MFCreateTranscodeTopologyFromByteStream = Module.findExportByName("mf.dll", "MFCreateTranscodeTopologyFromByteStream")
Interceptor.attach(MFCreateTranscodeTopologyFromByteStream, {onLeave: function (args) {send("MFCreateTranscodeTopologyFromByteStream");}});

var MFCreateUrlmonSchemePlugin = Module.findExportByName("mf.dll", "MFCreateUrlmonSchemePlugin")
Interceptor.attach(MFCreateUrlmonSchemePlugin, {onLeave: function (args) {send("MFCreateUrlmonSchemePlugin");}});

var MFCreateVideoRenderer = Module.findExportByName("mf.dll", "MFCreateVideoRenderer")
Interceptor.attach(MFCreateVideoRenderer, {onLeave: function (args) {send("MFCreateVideoRenderer");}});

var MFCreateVideoRendererActivate = Module.findExportByName("mf.dll", "MFCreateVideoRendererActivate")
Interceptor.attach(MFCreateVideoRendererActivate, {onLeave: function (args) {send("MFCreateVideoRendererActivate");}});

var MFCreateWMAEncoderActivate = Module.findExportByName("mf.dll", "MFCreateWMAEncoderActivate")
Interceptor.attach(MFCreateWMAEncoderActivate, {onLeave: function (args) {send("MFCreateWMAEncoderActivate");}});

var MFCreateWMVEncoderActivate = Module.findExportByName("mf.dll", "MFCreateWMVEncoderActivate")
Interceptor.attach(MFCreateWMVEncoderActivate, {onLeave: function (args) {send("MFCreateWMVEncoderActivate");}});

var MFEnumDeviceSources = Module.findExportByName("mf.dll", "MFEnumDeviceSources")
Interceptor.attach(MFEnumDeviceSources, {onLeave: function (args) {send("MFEnumDeviceSources");}});

var MFGetLocalId = Module.findExportByName("mf.dll", "MFGetLocalId")
Interceptor.attach(MFGetLocalId, {onLeave: function (args) {send("MFGetLocalId");}});

var MFGetMultipleServiceProviders = Module.findExportByName("mf.dll", "MFGetMultipleServiceProviders")
Interceptor.attach(MFGetMultipleServiceProviders, {onLeave: function (args) {send("MFGetMultipleServiceProviders");}});

var MFGetService = Module.findExportByName("mf.dll", "MFGetService")
Interceptor.attach(MFGetService, {onLeave: function (args) {send("MFGetService");}});

var MFGetSupportedMimeTypes = Module.findExportByName("mf.dll", "MFGetSupportedMimeTypes")
Interceptor.attach(MFGetSupportedMimeTypes, {onLeave: function (args) {send("MFGetSupportedMimeTypes");}});

var MFGetSupportedSchemes = Module.findExportByName("mf.dll", "MFGetSupportedSchemes")
Interceptor.attach(MFGetSupportedSchemes, {onLeave: function (args) {send("MFGetSupportedSchemes");}});

var MFGetSystemId = Module.findExportByName("mf.dll", "MFGetSystemId")
Interceptor.attach(MFGetSystemId, {onLeave: function (args) {send("MFGetSystemId");}});

var MFGetTopoNodeCurrentType = Module.findExportByName("mf.dll", "MFGetTopoNodeCurrentType")
Interceptor.attach(MFGetTopoNodeCurrentType, {onLeave: function (args) {send("MFGetTopoNodeCurrentType");}});

var MFLoadSignedLibrary = Module.findExportByName("mf.dll", "MFLoadSignedLibrary")
Interceptor.attach(MFLoadSignedLibrary, {onLeave: function (args) {send("MFLoadSignedLibrary");}});

var MFRR_CreateActivate = Module.findExportByName("mf.dll", "MFRR_CreateActivate")
Interceptor.attach(MFRR_CreateActivate, {onLeave: function (args) {send("MFRR_CreateActivate");}});

var MFReadSequencerSegmentOffset = Module.findExportByName("mf.dll", "MFReadSequencerSegmentOffset")
Interceptor.attach(MFReadSequencerSegmentOffset, {onLeave: function (args) {send("MFReadSequencerSegmentOffset");}});

var MFRequireProtectedEnvironment = Module.findExportByName("mf.dll", "MFRequireProtectedEnvironment")
Interceptor.attach(MFRequireProtectedEnvironment, {onLeave: function (args) {send("MFRequireProtectedEnvironment");}});

var MFShutdownObject = Module.findExportByName("mf.dll", "MFShutdownObject")
Interceptor.attach(MFShutdownObject, {onLeave: function (args) {send("MFShutdownObject");}});

var MFTranscodeGetAudioOutputAvailableTypes = Module.findExportByName("mf.dll", "MFTranscodeGetAudioOutputAvailableTypes")
Interceptor.attach(MFTranscodeGetAudioOutputAvailableTypes, {onLeave: function (args) {send("MFTranscodeGetAudioOutputAvailableTypes");}});

var MergePropertyStore = Module.findExportByName("mf.dll", "MergePropertyStore")
Interceptor.attach(MergePropertyStore, {onLeave: function (args) {send("MergePropertyStore");}});

