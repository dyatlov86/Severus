var AddDeprovisionedPackageMarking = Module.findExportByName("AppxAllUserStore.dll", "AddDeprovisionedPackageMarking")
Interceptor.attach(AddDeprovisionedPackageMarking, {onLeave: function (args) {send("AddDeprovisionedPackageMarking");}});

var AddDeprovisionedSharedPackageContainerMarking = Module.findExportByName("AppxAllUserStore.dll", "AddDeprovisionedSharedPackageContainerMarking")
Interceptor.attach(AddDeprovisionedSharedPackageContainerMarking, {onLeave: function (args) {send("AddDeprovisionedSharedPackageContainerMarking");}});

var AddDownlevelInstalledPackageToRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "AddDownlevelInstalledPackageToRegistryStore")
Interceptor.attach(AddDownlevelInstalledPackageToRegistryStore, {onLeave: function (args) {send("AddDownlevelInstalledPackageToRegistryStore");}});

var AddEndOfLifePackageMarking = Module.findExportByName("AppxAllUserStore.dll", "AddEndOfLifePackageMarking")
Interceptor.attach(AddEndOfLifePackageMarking, {onLeave: function (args) {send("AddEndOfLifePackageMarking");}});

var AddEndOfLifePackageMarkingForAllUsers = Module.findExportByName("AppxAllUserStore.dll", "AddEndOfLifePackageMarkingForAllUsers")
Interceptor.attach(AddEndOfLifePackageMarkingForAllUsers, {onLeave: function (args) {send("AddEndOfLifePackageMarkingForAllUsers");}});

var AddPackageToPreinstalledAppsVolume = Module.findExportByName("AppxAllUserStore.dll", "AddPackageToPreinstalledAppsVolume")
Interceptor.attach(AddPackageToPreinstalledAppsVolume, {onLeave: function (args) {send("AddPackageToPreinstalledAppsVolume");}});

var AddPackageToRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "AddPackageToRegistryStore")
Interceptor.attach(AddPackageToRegistryStore, {onLeave: function (args) {send("AddPackageToRegistryStore");}});

var AddSharedPackageContainerToRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "AddSharedPackageContainerToRegistryStore")
Interceptor.attach(AddSharedPackageContainerToRegistryStore, {onLeave: function (args) {send("AddSharedPackageContainerToRegistryStore");}});

var AddStagedPackageToPreinstalledAppsVolume = Module.findExportByName("AppxAllUserStore.dll", "AddStagedPackageToPreinstalledAppsVolume")
Interceptor.attach(AddStagedPackageToPreinstalledAppsVolume, {onLeave: function (args) {send("AddStagedPackageToPreinstalledAppsVolume");}});

var AddStagedPackageToRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "AddStagedPackageToRegistryStore")
Interceptor.attach(AddStagedPackageToRegistryStore, {onLeave: function (args) {send("AddStagedPackageToRegistryStore");}});

var AddUpgradePackageAndStubPreferenceToPreinstalledVolume = Module.findExportByName("AppxAllUserStore.dll", "AddUpgradePackageAndStubPreferenceToPreinstalledVolume")
Interceptor.attach(AddUpgradePackageAndStubPreferenceToPreinstalledVolume, {onLeave: function (args) {send("AddUpgradePackageAndStubPreferenceToPreinstalledVolume");}});

var AddUpgradePackageToPreinstalledVolume = Module.findExportByName("AppxAllUserStore.dll", "AddUpgradePackageToPreinstalledVolume")
Interceptor.attach(AddUpgradePackageToPreinstalledVolume, {onLeave: function (args) {send("AddUpgradePackageToPreinstalledVolume");}});

var AddUpgradePackageToRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "AddUpgradePackageToRegistryStore")
Interceptor.attach(AddUpgradePackageToRegistryStore, {onLeave: function (args) {send("AddUpgradePackageToRegistryStore");}});

var ApplyFrameworkPackageRootFolderACLs = Module.findExportByName("AppxAllUserStore.dll", "ApplyFrameworkPackageRootFolderACLs")
Interceptor.attach(ApplyFrameworkPackageRootFolderACLs, {onLeave: function (args) {send("ApplyFrameworkPackageRootFolderACLs");}});

var ApplyPackageRootFolderACLs = Module.findExportByName("AppxAllUserStore.dll", "ApplyPackageRootFolderACLs")
Interceptor.attach(ApplyPackageRootFolderACLs, {onLeave: function (args) {send("ApplyPackageRootFolderACLs");}});

var ApplySharedFileACLs = Module.findExportByName("AppxAllUserStore.dll", "ApplySharedFileACLs")
Interceptor.attach(ApplySharedFileACLs, {onLeave: function (args) {send("ApplySharedFileACLs");}});

var CheckPackagePreinstallPolicy = Module.findExportByName("AppxAllUserStore.dll", "CheckPackagePreinstallPolicy")
Interceptor.attach(CheckPackagePreinstallPolicy, {onLeave: function (args) {send("CheckPackagePreinstallPolicy");}});

var CleanupPreinstalledPackageForRemoval = Module.findExportByName("AppxAllUserStore.dll", "CleanupPreinstalledPackageForRemoval")
Interceptor.attach(CleanupPreinstalledPackageForRemoval, {onLeave: function (args) {send("CleanupPreinstalledPackageForRemoval");}});

var CommitTakeOwnershipSession = Module.findExportByName("AppxAllUserStore.dll", "CommitTakeOwnershipSession")
Interceptor.attach(CommitTakeOwnershipSession, {onLeave: function (args) {send("CommitTakeOwnershipSession");}});

var DeleteAllContainersFromContainerArray = Module.findExportByName("AppxAllUserStore.dll", "DeleteAllContainersFromContainerArray")
Interceptor.attach(DeleteAllContainersFromContainerArray, {onLeave: function (args) {send("DeleteAllContainersFromContainerArray");}});

var DeleteAllPackagesFromMainPackageArray = Module.findExportByName("AppxAllUserStore.dll", "DeleteAllPackagesFromMainPackageArray")
Interceptor.attach(DeleteAllPackagesFromMainPackageArray, {onLeave: function (args) {send("DeleteAllPackagesFromMainPackageArray");}});

var DeleteAllPackagesFromPackageArray = Module.findExportByName("AppxAllUserStore.dll", "DeleteAllPackagesFromPackageArray")
Interceptor.attach(DeleteAllPackagesFromPackageArray, {onLeave: function (args) {send("DeleteAllPackagesFromPackageArray");}});

var DeletePackageInfo = Module.findExportByName("AppxAllUserStore.dll", "DeletePackageInfo")
Interceptor.attach(DeletePackageInfo, {onLeave: function (args) {send("DeletePackageInfo");}});

var DeleteUpdatedPackageKey = Module.findExportByName("AppxAllUserStore.dll", "DeleteUpdatedPackageKey")
Interceptor.attach(DeleteUpdatedPackageKey, {onLeave: function (args) {send("DeleteUpdatedPackageKey");}});

var DeleteUserRegistryKeyFromAllUserStore = Module.findExportByName("AppxAllUserStore.dll", "DeleteUserRegistryKeyFromAllUserStore")
Interceptor.attach(DeleteUserRegistryKeyFromAllUserStore, {onLeave: function (args) {send("DeleteUserRegistryKeyFromAllUserStore");}});

var DidAppSurviveOSUpgradeForUser = Module.findExportByName("AppxAllUserStore.dll", "DidAppSurviveOSUpgradeForUser")
Interceptor.attach(DidAppSurviveOSUpgradeForUser, {onLeave: function (args) {send("DidAppSurviveOSUpgradeForUser");}});

var DoesPerUserStoreExist = Module.findExportByName("AppxAllUserStore.dll", "DoesPerUserStoreExist")
Interceptor.attach(DoesPerUserStoreExist, {onLeave: function (args) {send("DoesPerUserStoreExist");}});

var FamilyMonikerStringToSid = Module.findExportByName("AppxAllUserStore.dll", "FamilyMonikerStringToSid")
Interceptor.attach(FamilyMonikerStringToSid, {onLeave: function (args) {send("FamilyMonikerStringToSid");}});

var FindExistingVersionInRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "FindExistingVersionInRegistryStore")
Interceptor.attach(FindExistingVersionInRegistryStore, {onLeave: function (args) {send("FindExistingVersionInRegistryStore");}});

var FindFullNameForFamilyNameInAppxAllUserStore = Module.findExportByName("AppxAllUserStore.dll", "FindFullNameForFamilyNameInAppxAllUserStore")
Interceptor.attach(FindFullNameForFamilyNameInAppxAllUserStore, {onLeave: function (args) {send("FindFullNameForFamilyNameInAppxAllUserStore");}});

var FixPreInstalledAppxAllUserStoreIntegrity = Module.findExportByName("AppxAllUserStore.dll", "FixPreInstalledAppxAllUserStoreIntegrity")
Interceptor.attach(FixPreInstalledAppxAllUserStoreIntegrity, {onLeave: function (args) {send("FixPreInstalledAppxAllUserStoreIntegrity");}});

var GetAllInboxPackages = Module.findExportByName("AppxAllUserStore.dll", "GetAllInboxPackages")
Interceptor.attach(GetAllInboxPackages, {onLeave: function (args) {send("GetAllInboxPackages");}});

var GetAllNonInboxPackagesFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "GetAllNonInboxPackagesFromRegistryStore")
Interceptor.attach(GetAllNonInboxPackagesFromRegistryStore, {onLeave: function (args) {send("GetAllNonInboxPackagesFromRegistryStore");}});

var GetAllPackagesToBeInstalledForSetupPhase = Module.findExportByName("AppxAllUserStore.dll", "GetAllPackagesToBeInstalledForSetupPhase")
Interceptor.attach(GetAllPackagesToBeInstalledForSetupPhase, {onLeave: function (args) {send("GetAllPackagesToBeInstalledForSetupPhase");}});

var GetAllPackagesToBeInstalledForUser = Module.findExportByName("AppxAllUserStore.dll", "GetAllPackagesToBeInstalledForUser")
Interceptor.attach(GetAllPackagesToBeInstalledForUser, {onLeave: function (args) {send("GetAllPackagesToBeInstalledForUser");}});

var GetAllStagedPackagesForMainPackageFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "GetAllStagedPackagesForMainPackageFromRegistryStore")
Interceptor.attach(GetAllStagedPackagesForMainPackageFromRegistryStore, {onLeave: function (args) {send("GetAllStagedPackagesForMainPackageFromRegistryStore");}});

var GetAllUpdatedPackages = Module.findExportByName("AppxAllUserStore.dll", "GetAllUpdatedPackages")
Interceptor.attach(GetAllUpdatedPackages, {onLeave: function (args) {send("GetAllUpdatedPackages");}});

var GetAppxProvisionFactory = Module.findExportByName("AppxAllUserStore.dll", "GetAppxProvisionFactory")
Interceptor.attach(GetAppxProvisionFactory, {onLeave: function (args) {send("GetAppxProvisionFactory");}});

var GetFoldersToKeepForPBR = Module.findExportByName("AppxAllUserStore.dll", "GetFoldersToKeepForPBR")
Interceptor.attach(GetFoldersToKeepForPBR, {onLeave: function (args) {send("GetFoldersToKeepForPBR");}});

var GetOptionalPackageInfoForPackage = Module.findExportByName("AppxAllUserStore.dll", "GetOptionalPackageInfoForPackage")
Interceptor.attach(GetOptionalPackageInfoForPackage, {onLeave: function (args) {send("GetOptionalPackageInfoForPackage");}});

var GetPackageOverrideSetupPhase = Module.findExportByName("AppxAllUserStore.dll", "GetPackageOverrideSetupPhase")
Interceptor.attach(GetPackageOverrideSetupPhase, {onLeave: function (args) {send("GetPackageOverrideSetupPhase");}});

var GetPackageSetupPhase = Module.findExportByName("AppxAllUserStore.dll", "GetPackageSetupPhase")
Interceptor.attach(GetPackageSetupPhase, {onLeave: function (args) {send("GetPackageSetupPhase");}});

var GetPackagesThatMayNeedPreinstallPackageStatusMarked = Module.findExportByName("AppxAllUserStore.dll", "GetPackagesThatMayNeedPreinstallPackageStatusMarked")
Interceptor.attach(GetPackagesThatMayNeedPreinstallPackageStatusMarked, {onLeave: function (args) {send("GetPackagesThatMayNeedPreinstallPackageStatusMarked");}});

var GetProvisionedSharedPackageContainersFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "GetProvisionedSharedPackageContainersFromRegistryStore")
Interceptor.attach(GetProvisionedSharedPackageContainersFromRegistryStore, {onLeave: function (args) {send("GetProvisionedSharedPackageContainersFromRegistryStore");}});

var GetRegionExcludedPreinstalledPackages = Module.findExportByName("AppxAllUserStore.dll", "GetRegionExcludedPreinstalledPackages")
Interceptor.attach(GetRegionExcludedPreinstalledPackages, {onLeave: function (args) {send("GetRegionExcludedPreinstalledPackages");}});

var GetStatusOfPackageFamilyForUser = Module.findExportByName("AppxAllUserStore.dll", "GetStatusOfPackageFamilyForUser")
Interceptor.attach(GetStatusOfPackageFamilyForUser, {onLeave: function (args) {send("GetStatusOfPackageFamilyForUser");}});

var GetUpgradePackageVolumeKey = Module.findExportByName("AppxAllUserStore.dll", "GetUpgradePackageVolumeKey")
Interceptor.attach(GetUpgradePackageVolumeKey, {onLeave: function (args) {send("GetUpgradePackageVolumeKey");}});

var HasCentennial = Module.findExportByName("AppxAllUserStore.dll", "HasCentennial")
Interceptor.attach(HasCentennial, {onLeave: function (args) {send("HasCentennial");}});

var HasStagedPackages = Module.findExportByName("AppxAllUserStore.dll", "HasStagedPackages")
Interceptor.attach(HasStagedPackages, {onLeave: function (args) {send("HasStagedPackages");}});

var IsCleanupTaskComplete = Module.findExportByName("AppxAllUserStore.dll", "IsCleanupTaskComplete")
Interceptor.attach(IsCleanupTaskComplete, {onLeave: function (args) {send("IsCleanupTaskComplete");}});

var IsEnterprisePolicyEnabled = Module.findExportByName("AppxAllUserStore.dll", "IsEnterprisePolicyEnabled")
Interceptor.attach(IsEnterprisePolicyEnabled, {onLeave: function (args) {send("IsEnterprisePolicyEnabled");}});

var IsInboxPackage = Module.findExportByName("AppxAllUserStore.dll", "IsInboxPackage")
Interceptor.attach(IsInboxPackage, {onLeave: function (args) {send("IsInboxPackage");}});

var IsInboxPackageAndPath = Module.findExportByName("AppxAllUserStore.dll", "IsInboxPackageAndPath")
Interceptor.attach(IsInboxPackageAndPath, {onLeave: function (args) {send("IsInboxPackageAndPath");}});

var IsNonInboxAllUserPackage = Module.findExportByName("AppxAllUserStore.dll", "IsNonInboxAllUserPackage")
Interceptor.attach(IsNonInboxAllUserPackage, {onLeave: function (args) {send("IsNonInboxAllUserPackage");}});

var IsNonInboxAllUserPackageSpecificPackage = Module.findExportByName("AppxAllUserStore.dll", "IsNonInboxAllUserPackageSpecificPackage")
Interceptor.attach(IsNonInboxAllUserPackageSpecificPackage, {onLeave: function (args) {send("IsNonInboxAllUserPackageSpecificPackage");}});

var IsPackageEndOfLife = Module.findExportByName("AppxAllUserStore.dll", "IsPackageEndOfLife")
Interceptor.attach(IsPackageEndOfLife, {onLeave: function (args) {send("IsPackageEndOfLife");}});

var IsPackageFamilyInUninstallBlocklist = Module.findExportByName("AppxAllUserStore.dll", "IsPackageFamilyInUninstallBlocklist")
Interceptor.attach(IsPackageFamilyInUninstallBlocklist, {onLeave: function (args) {send("IsPackageFamilyInUninstallBlocklist");}});

var IsPackageFamilyInUninstallBlocklistByPackageFullName = Module.findExportByName("AppxAllUserStore.dll", "IsPackageFamilyInUninstallBlocklistByPackageFullName")
Interceptor.attach(IsPackageFamilyInUninstallBlocklistByPackageFullName, {onLeave: function (args) {send("IsPackageFamilyInUninstallBlocklistByPackageFullName");}});

var IsPackageFamilyOnPreInstalledDeletedKey = Module.findExportByName("AppxAllUserStore.dll", "IsPackageFamilyOnPreInstalledDeletedKey")
Interceptor.attach(IsPackageFamilyOnPreInstalledDeletedKey, {onLeave: function (args) {send("IsPackageFamilyOnPreInstalledDeletedKey");}});

var IsPackageInDownlevelInstalledKey = Module.findExportByName("AppxAllUserStore.dll", "IsPackageInDownlevelInstalledKey")
Interceptor.attach(IsPackageInDownlevelInstalledKey, {onLeave: function (args) {send("IsPackageInDownlevelInstalledKey");}});

var IsPackageInEndOfLifeKey = Module.findExportByName("AppxAllUserStore.dll", "IsPackageInEndOfLifeKey")
Interceptor.attach(IsPackageInEndOfLifeKey, {onLeave: function (args) {send("IsPackageInEndOfLifeKey");}});

var IsPackageInStagedKey = Module.findExportByName("AppxAllUserStore.dll", "IsPackageInStagedKey")
Interceptor.attach(IsPackageInStagedKey, {onLeave: function (args) {send("IsPackageInStagedKey");}});

var IsPackageInUpgradeKey = Module.findExportByName("AppxAllUserStore.dll", "IsPackageInUpgradeKey")
Interceptor.attach(IsPackageInUpgradeKey, {onLeave: function (args) {send("IsPackageInUpgradeKey");}});

var IsPackageInUsersUpgradeKey = Module.findExportByName("AppxAllUserStore.dll", "IsPackageInUsersUpgradeKey")
Interceptor.attach(IsPackageInUsersUpgradeKey, {onLeave: function (args) {send("IsPackageInUsersUpgradeKey");}});

var IsPackageOnPreinstalledVolume = Module.findExportByName("AppxAllUserStore.dll", "IsPackageOnPreinstalledVolume")
Interceptor.attach(IsPackageOnPreinstalledVolume, {onLeave: function (args) {send("IsPackageOnPreinstalledVolume");}});

var IsSystemInAuditBoot = Module.findExportByName("AppxAllUserStore.dll", "IsSystemInAuditBoot")
Interceptor.attach(IsSystemInAuditBoot, {onLeave: function (args) {send("IsSystemInAuditBoot");}});

var MarkPackageAsRequiringAllUserStoreRefresh = Module.findExportByName("AppxAllUserStore.dll", "MarkPackageAsRequiringAllUserStoreRefresh")
Interceptor.attach(MarkPackageAsRequiringAllUserStoreRefresh, {onLeave: function (args) {send("MarkPackageAsRequiringAllUserStoreRefresh");}});

var MarkStatusOfMainPackageForUser = Module.findExportByName("AppxAllUserStore.dll", "MarkStatusOfMainPackageForUser")
Interceptor.attach(MarkStatusOfMainPackageForUser, {onLeave: function (args) {send("MarkStatusOfMainPackageForUser");}});

var MoveEndOfLifePackageToDeletedStoreExternal = Module.findExportByName("AppxAllUserStore.dll", "MoveEndOfLifePackageToDeletedStoreExternal")
Interceptor.attach(MoveEndOfLifePackageToDeletedStoreExternal, {onLeave: function (args) {send("MoveEndOfLifePackageToDeletedStoreExternal");}});

var PackageFamilyNameFromId = Module.findExportByName("AppxAllUserStore.dll", "PackageFamilyNameFromId")
Interceptor.attach(PackageFamilyNameFromId, {onLeave: function (args) {send("PackageFamilyNameFromId");}});

var PackageIdBasicFromFullName = Module.findExportByName("AppxAllUserStore.dll", "PackageIdBasicFromFullName")
Interceptor.attach(PackageIdBasicFromFullName, {onLeave: function (args) {send("PackageIdBasicFromFullName");}});

var PackageSidToPackageCapabilitySid = Module.findExportByName("AppxAllUserStore.dll", "PackageSidToPackageCapabilitySid")
Interceptor.attach(PackageSidToPackageCapabilitySid, {onLeave: function (args) {send("PackageSidToPackageCapabilitySid");}});

var RemoveDeprovisionedPackageMarking = Module.findExportByName("AppxAllUserStore.dll", "RemoveDeprovisionedPackageMarking")
Interceptor.attach(RemoveDeprovisionedPackageMarking, {onLeave: function (args) {send("RemoveDeprovisionedPackageMarking");}});

var RemoveDeprovisionedSharedPackageContainerMarking = Module.findExportByName("AppxAllUserStore.dll", "RemoveDeprovisionedSharedPackageContainerMarking")
Interceptor.attach(RemoveDeprovisionedSharedPackageContainerMarking, {onLeave: function (args) {send("RemoveDeprovisionedSharedPackageContainerMarking");}});

var RemoveDownlevelInstalledPackagesFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "RemoveDownlevelInstalledPackagesFromRegistryStore")
Interceptor.attach(RemoveDownlevelInstalledPackagesFromRegistryStore, {onLeave: function (args) {send("RemoveDownlevelInstalledPackagesFromRegistryStore");}});

var RemoveEndOfLifePackageMarkingForAllUsers = Module.findExportByName("AppxAllUserStore.dll", "RemoveEndOfLifePackageMarkingForAllUsers")
Interceptor.attach(RemoveEndOfLifePackageMarkingForAllUsers, {onLeave: function (args) {send("RemoveEndOfLifePackageMarkingForAllUsers");}});

var RemoveInboxInstalledStatusOfPackageForUser = Module.findExportByName("AppxAllUserStore.dll", "RemoveInboxInstalledStatusOfPackageForUser")
Interceptor.attach(RemoveInboxInstalledStatusOfPackageForUser, {onLeave: function (args) {send("RemoveInboxInstalledStatusOfPackageForUser");}});

var RemovePackageFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "RemovePackageFromRegistryStore")
Interceptor.attach(RemovePackageFromRegistryStore, {onLeave: function (args) {send("RemovePackageFromRegistryStore");}});

var RemovePackageFromRegistryStoreConfigIfExists = Module.findExportByName("AppxAllUserStore.dll", "RemovePackageFromRegistryStoreConfigIfExists")
Interceptor.attach(RemovePackageFromRegistryStoreConfigIfExists, {onLeave: function (args) {send("RemovePackageFromRegistryStoreConfigIfExists");}});

var RemoveSharedPackageContainerFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "RemoveSharedPackageContainerFromRegistryStore")
Interceptor.attach(RemoveSharedPackageContainerFromRegistryStore, {onLeave: function (args) {send("RemoveSharedPackageContainerFromRegistryStore");}});

var RemoveStagedPackageFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "RemoveStagedPackageFromRegistryStore")
Interceptor.attach(RemoveStagedPackageFromRegistryStore, {onLeave: function (args) {send("RemoveStagedPackageFromRegistryStore");}});

var RemoveStatusOfMainPackageForAllUsers = Module.findExportByName("AppxAllUserStore.dll", "RemoveStatusOfMainPackageForAllUsers")
Interceptor.attach(RemoveStatusOfMainPackageForAllUsers, {onLeave: function (args) {send("RemoveStatusOfMainPackageForAllUsers");}});

var RemoveUpgradePackagesFromRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "RemoveUpgradePackagesFromRegistryStore")
Interceptor.attach(RemoveUpgradePackagesFromRegistryStore, {onLeave: function (args) {send("RemoveUpgradePackagesFromRegistryStore");}});

var RestoreDownlevelAllUserStore = Module.findExportByName("AppxAllUserStore.dll", "RestoreDownlevelAllUserStore")
Interceptor.attach(RestoreDownlevelAllUserStore, {onLeave: function (args) {send("RestoreDownlevelAllUserStore");}});

var RollbackTakeOwnershipSession = Module.findExportByName("AppxAllUserStore.dll", "RollbackTakeOwnershipSession")
Interceptor.attach(RollbackTakeOwnershipSession, {onLeave: function (args) {send("RollbackTakeOwnershipSession");}});

var SetAllUserStorePathForTest = Module.findExportByName("AppxAllUserStore.dll", "SetAllUserStorePathForTest")
Interceptor.attach(SetAllUserStorePathForTest, {onLeave: function (args) {send("SetAllUserStorePathForTest");}});

var SetPackageOverrideSetupPhase = Module.findExportByName("AppxAllUserStore.dll", "SetPackageOverrideSetupPhase")
Interceptor.attach(SetPackageOverrideSetupPhase, {onLeave: function (args) {send("SetPackageOverrideSetupPhase");}});

var SetPreinstalledRegionPolicyChecked = Module.findExportByName("AppxAllUserStore.dll", "SetPreinstalledRegionPolicyChecked")
Interceptor.attach(SetPreinstalledRegionPolicyChecked, {onLeave: function (args) {send("SetPreinstalledRegionPolicyChecked");}});

var SetTargetOsVersionOnPreinstalledVolume = Module.findExportByName("AppxAllUserStore.dll", "SetTargetOsVersionOnPreinstalledVolume")
Interceptor.attach(SetTargetOsVersionOnPreinstalledVolume, {onLeave: function (args) {send("SetTargetOsVersionOnPreinstalledVolume");}});

var TakeOwnershipOnFolder = Module.findExportByName("AppxAllUserStore.dll", "TakeOwnershipOnFolder")
Interceptor.attach(TakeOwnershipOnFolder, {onLeave: function (args) {send("TakeOwnershipOnFolder");}});

var TryGetDownlevelInstalledPackageFullName = Module.findExportByName("AppxAllUserStore.dll", "TryGetDownlevelInstalledPackageFullName")
Interceptor.attach(TryGetDownlevelInstalledPackageFullName, {onLeave: function (args) {send("TryGetDownlevelInstalledPackageFullName");}});

var TryGetEndOfLifePackageFullName = Module.findExportByName("AppxAllUserStore.dll", "TryGetEndOfLifePackageFullName")
Interceptor.attach(TryGetEndOfLifePackageFullName, {onLeave: function (args) {send("TryGetEndOfLifePackageFullName");}});

var UpdateFrameworkPackageInRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "UpdateFrameworkPackageInRegistryStore")
Interceptor.attach(UpdateFrameworkPackageInRegistryStore, {onLeave: function (args) {send("UpdateFrameworkPackageInRegistryStore");}});

var UpdatePackageInRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "UpdatePackageInRegistryStore")
Interceptor.attach(UpdatePackageInRegistryStore, {onLeave: function (args) {send("UpdatePackageInRegistryStore");}});

var UpdatePackageSetupPhase = Module.findExportByName("AppxAllUserStore.dll", "UpdatePackageSetupPhase")
Interceptor.attach(UpdatePackageSetupPhase, {onLeave: function (args) {send("UpdatePackageSetupPhase");}});

var UpdateUpgradePackageInRegistryStore = Module.findExportByName("AppxAllUserStore.dll", "UpdateUpgradePackageInRegistryStore")
Interceptor.attach(UpdateUpgradePackageInRegistryStore, {onLeave: function (args) {send("UpdateUpgradePackageInRegistryStore");}});

