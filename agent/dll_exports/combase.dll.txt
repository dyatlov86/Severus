var CLIPFORMAT_UserFree = Module.findExportByName("combase.dll", "CLIPFORMAT_UserFree")
Interceptor.attach(CLIPFORMAT_UserFree, {onLeave: function (args) {send("CLIPFORMAT_UserFree");}});

var CLIPFORMAT_UserFree64 = Module.findExportByName("combase.dll", "CLIPFORMAT_UserFree64")
Interceptor.attach(CLIPFORMAT_UserFree64, {onLeave: function (args) {send("CLIPFORMAT_UserFree64");}});

var CLIPFORMAT_UserMarshal = Module.findExportByName("combase.dll", "CLIPFORMAT_UserMarshal")
Interceptor.attach(CLIPFORMAT_UserMarshal, {onLeave: function (args) {send("CLIPFORMAT_UserMarshal");}});

var CLIPFORMAT_UserMarshal64 = Module.findExportByName("combase.dll", "CLIPFORMAT_UserMarshal64")
Interceptor.attach(CLIPFORMAT_UserMarshal64, {onLeave: function (args) {send("CLIPFORMAT_UserMarshal64");}});

var CLIPFORMAT_UserSize = Module.findExportByName("combase.dll", "CLIPFORMAT_UserSize")
Interceptor.attach(CLIPFORMAT_UserSize, {onLeave: function (args) {send("CLIPFORMAT_UserSize");}});

var CLIPFORMAT_UserSize64 = Module.findExportByName("combase.dll", "CLIPFORMAT_UserSize64")
Interceptor.attach(CLIPFORMAT_UserSize64, {onLeave: function (args) {send("CLIPFORMAT_UserSize64");}});

var CLIPFORMAT_UserUnmarshal = Module.findExportByName("combase.dll", "CLIPFORMAT_UserUnmarshal")
Interceptor.attach(CLIPFORMAT_UserUnmarshal, {onLeave: function (args) {send("CLIPFORMAT_UserUnmarshal");}});

var CLIPFORMAT_UserUnmarshal64 = Module.findExportByName("combase.dll", "CLIPFORMAT_UserUnmarshal64")
Interceptor.attach(CLIPFORMAT_UserUnmarshal64, {onLeave: function (args) {send("CLIPFORMAT_UserUnmarshal64");}});

var CLSIDFromOle1Class = Module.findExportByName("combase.dll", "CLSIDFromOle1Class")
Interceptor.attach(CLSIDFromOle1Class, {onLeave: function (args) {send("CLSIDFromOle1Class");}});

var CLSIDFromProgID = Module.findExportByName("combase.dll", "CLSIDFromProgID")
Interceptor.attach(CLSIDFromProgID, {onLeave: function (args) {send("CLSIDFromProgID");}});

var CLSIDFromProgIDEx = Module.findExportByName("combase.dll", "CLSIDFromProgIDEx")
Interceptor.attach(CLSIDFromProgIDEx, {onLeave: function (args) {send("CLSIDFromProgIDEx");}});

var CLSIDFromString = Module.findExportByName("combase.dll", "CLSIDFromString")
Interceptor.attach(CLSIDFromString, {onLeave: function (args) {send("CLSIDFromString");}});

var CStdAsyncStubBuffer2_Connect = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer2_Connect")
Interceptor.attach(CStdAsyncStubBuffer2_Connect, {onLeave: function (args) {send("CStdAsyncStubBuffer2_Connect");}});

var CStdAsyncStubBuffer2_Disconnect = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer2_Disconnect")
Interceptor.attach(CStdAsyncStubBuffer2_Disconnect, {onLeave: function (args) {send("CStdAsyncStubBuffer2_Disconnect");}});

var CStdAsyncStubBuffer2_Release = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer2_Release")
Interceptor.attach(CStdAsyncStubBuffer2_Release, {onLeave: function (args) {send("CStdAsyncStubBuffer2_Release");}});

var CStdAsyncStubBuffer_AddRef = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer_AddRef")
Interceptor.attach(CStdAsyncStubBuffer_AddRef, {onLeave: function (args) {send("CStdAsyncStubBuffer_AddRef");}});

var CStdAsyncStubBuffer_Connect = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer_Connect")
Interceptor.attach(CStdAsyncStubBuffer_Connect, {onLeave: function (args) {send("CStdAsyncStubBuffer_Connect");}});

var CStdAsyncStubBuffer_Disconnect = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer_Disconnect")
Interceptor.attach(CStdAsyncStubBuffer_Disconnect, {onLeave: function (args) {send("CStdAsyncStubBuffer_Disconnect");}});

var CStdAsyncStubBuffer_Invoke = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer_Invoke")
Interceptor.attach(CStdAsyncStubBuffer_Invoke, {onLeave: function (args) {send("CStdAsyncStubBuffer_Invoke");}});

var CStdAsyncStubBuffer_QueryInterface = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer_QueryInterface")
Interceptor.attach(CStdAsyncStubBuffer_QueryInterface, {onLeave: function (args) {send("CStdAsyncStubBuffer_QueryInterface");}});

var CStdAsyncStubBuffer_Release = Module.findExportByName("combase.dll", "CStdAsyncStubBuffer_Release")
Interceptor.attach(CStdAsyncStubBuffer_Release, {onLeave: function (args) {send("CStdAsyncStubBuffer_Release");}});

var CStdStubBuffer2_Connect = Module.findExportByName("combase.dll", "CStdStubBuffer2_Connect")
Interceptor.attach(CStdStubBuffer2_Connect, {onLeave: function (args) {send("CStdStubBuffer2_Connect");}});

var CStdStubBuffer2_CountRefs = Module.findExportByName("combase.dll", "CStdStubBuffer2_CountRefs")
Interceptor.attach(CStdStubBuffer2_CountRefs, {onLeave: function (args) {send("CStdStubBuffer2_CountRefs");}});

var CStdStubBuffer2_Disconnect = Module.findExportByName("combase.dll", "CStdStubBuffer2_Disconnect")
Interceptor.attach(CStdStubBuffer2_Disconnect, {onLeave: function (args) {send("CStdStubBuffer2_Disconnect");}});

var CStdStubBuffer2_QueryInterface = Module.findExportByName("combase.dll", "CStdStubBuffer2_QueryInterface")
Interceptor.attach(CStdStubBuffer2_QueryInterface, {onLeave: function (args) {send("CStdStubBuffer2_QueryInterface");}});

var CStdStubBuffer_AddRef = Module.findExportByName("combase.dll", "CStdStubBuffer_AddRef")
Interceptor.attach(CStdStubBuffer_AddRef, {onLeave: function (args) {send("CStdStubBuffer_AddRef");}});

var CStdStubBuffer_Connect = Module.findExportByName("combase.dll", "CStdStubBuffer_Connect")
Interceptor.attach(CStdStubBuffer_Connect, {onLeave: function (args) {send("CStdStubBuffer_Connect");}});

var CStdStubBuffer_CountRefs = Module.findExportByName("combase.dll", "CStdStubBuffer_CountRefs")
Interceptor.attach(CStdStubBuffer_CountRefs, {onLeave: function (args) {send("CStdStubBuffer_CountRefs");}});

var CStdStubBuffer_DebugServerQueryInterface = Module.findExportByName("combase.dll", "CStdStubBuffer_DebugServerQueryInterface")
Interceptor.attach(CStdStubBuffer_DebugServerQueryInterface, {onLeave: function (args) {send("CStdStubBuffer_DebugServerQueryInterface");}});

var CStdStubBuffer_DebugServerRelease = Module.findExportByName("combase.dll", "CStdStubBuffer_DebugServerRelease")
Interceptor.attach(CStdStubBuffer_DebugServerRelease, {onLeave: function (args) {send("CStdStubBuffer_DebugServerRelease");}});

var CStdStubBuffer_Disconnect = Module.findExportByName("combase.dll", "CStdStubBuffer_Disconnect")
Interceptor.attach(CStdStubBuffer_Disconnect, {onLeave: function (args) {send("CStdStubBuffer_Disconnect");}});

var CStdStubBuffer_Invoke = Module.findExportByName("combase.dll", "CStdStubBuffer_Invoke")
Interceptor.attach(CStdStubBuffer_Invoke, {onLeave: function (args) {send("CStdStubBuffer_Invoke");}});

var CStdStubBuffer_IsIIDSupported = Module.findExportByName("combase.dll", "CStdStubBuffer_IsIIDSupported")
Interceptor.attach(CStdStubBuffer_IsIIDSupported, {onLeave: function (args) {send("CStdStubBuffer_IsIIDSupported");}});

var CStdStubBuffer_QueryInterface = Module.findExportByName("combase.dll", "CStdStubBuffer_QueryInterface")
Interceptor.attach(CStdStubBuffer_QueryInterface, {onLeave: function (args) {send("CStdStubBuffer_QueryInterface");}});

var CleanupComl2StateInAllTls = Module.findExportByName("combase.dll", "CleanupComl2StateInAllTls")
Interceptor.attach(CleanupComl2StateInAllTls, {onLeave: function (args) {send("CleanupComl2StateInAllTls");}});

var CleanupOleStateInAllTls = Module.findExportByName("combase.dll", "CleanupOleStateInAllTls")
Interceptor.attach(CleanupOleStateInAllTls, {onLeave: function (args) {send("CleanupOleStateInAllTls");}});

var CleanupTlsComl2State = Module.findExportByName("combase.dll", "CleanupTlsComl2State")
Interceptor.attach(CleanupTlsComl2State, {onLeave: function (args) {send("CleanupTlsComl2State");}});

var CleanupTlsOleState = Module.findExportByName("combase.dll", "CleanupTlsOleState")
Interceptor.attach(CleanupTlsOleState, {onLeave: function (args) {send("CleanupTlsOleState");}});

var ClearCleanupFlag = Module.findExportByName("combase.dll", "ClearCleanupFlag")
Interceptor.attach(ClearCleanupFlag, {onLeave: function (args) {send("ClearCleanupFlag");}});

var CoAddRefServerProcess = Module.findExportByName("combase.dll", "CoAddRefServerProcess")
Interceptor.attach(CoAddRefServerProcess, {onLeave: function (args) {send("CoAddRefServerProcess");}});

var CoAllowUnmarshalerCLSID = Module.findExportByName("combase.dll", "CoAllowUnmarshalerCLSID")
Interceptor.attach(CoAllowUnmarshalerCLSID, {onLeave: function (args) {send("CoAllowUnmarshalerCLSID");}});

var CoCancelCall = Module.findExportByName("combase.dll", "CoCancelCall")
Interceptor.attach(CoCancelCall, {onLeave: function (args) {send("CoCancelCall");}});

var CoCopyProxy = Module.findExportByName("combase.dll", "CoCopyProxy")
Interceptor.attach(CoCopyProxy, {onLeave: function (args) {send("CoCopyProxy");}});

var CoCreateErrorInfo = Module.findExportByName("combase.dll", "CoCreateErrorInfo")
Interceptor.attach(CoCreateErrorInfo, {onLeave: function (args) {send("CoCreateErrorInfo");}});

var CoCreateFreeThreadedMarshaler = Module.findExportByName("combase.dll", "CoCreateFreeThreadedMarshaler")
Interceptor.attach(CoCreateFreeThreadedMarshaler, {onLeave: function (args) {send("CoCreateFreeThreadedMarshaler");}});

var CoCreateGuid = Module.findExportByName("combase.dll", "CoCreateGuid")
Interceptor.attach(CoCreateGuid, {onLeave: function (args) {send("CoCreateGuid");}});

var CoCreateInstance = Module.findExportByName("combase.dll", "CoCreateInstance")
Interceptor.attach(CoCreateInstance, {onLeave: function (args) {send("CoCreateInstance");}});

var CoCreateInstanceEx = Module.findExportByName("combase.dll", "CoCreateInstanceEx")
Interceptor.attach(CoCreateInstanceEx, {onLeave: function (args) {send("CoCreateInstanceEx");}});

var CoCreateInstanceFromApp = Module.findExportByName("combase.dll", "CoCreateInstanceFromApp")
Interceptor.attach(CoCreateInstanceFromApp, {onLeave: function (args) {send("CoCreateInstanceFromApp");}});

var CoCreateObjectInContext = Module.findExportByName("combase.dll", "CoCreateObjectInContext")
Interceptor.attach(CoCreateObjectInContext, {onLeave: function (args) {send("CoCreateObjectInContext");}});

var CoDeactivateObject = Module.findExportByName("combase.dll", "CoDeactivateObject")
Interceptor.attach(CoDeactivateObject, {onLeave: function (args) {send("CoDeactivateObject");}});

var CoDecodeProxy = Module.findExportByName("combase.dll", "CoDecodeProxy")
Interceptor.attach(CoDecodeProxy, {onLeave: function (args) {send("CoDecodeProxy");}});

var CoDecrementMTAUsage = Module.findExportByName("combase.dll", "CoDecrementMTAUsage")
Interceptor.attach(CoDecrementMTAUsage, {onLeave: function (args) {send("CoDecrementMTAUsage");}});

var CoDisableCallCancellation = Module.findExportByName("combase.dll", "CoDisableCallCancellation")
Interceptor.attach(CoDisableCallCancellation, {onLeave: function (args) {send("CoDisableCallCancellation");}});

var CoDisconnectContext = Module.findExportByName("combase.dll", "CoDisconnectContext")
Interceptor.attach(CoDisconnectContext, {onLeave: function (args) {send("CoDisconnectContext");}});

var CoDisconnectObject = Module.findExportByName("combase.dll", "CoDisconnectObject")
Interceptor.attach(CoDisconnectObject, {onLeave: function (args) {send("CoDisconnectObject");}});

var CoEnableCallCancellation = Module.findExportByName("combase.dll", "CoEnableCallCancellation")
Interceptor.attach(CoEnableCallCancellation, {onLeave: function (args) {send("CoEnableCallCancellation");}});

var CoFileTimeNow = Module.findExportByName("combase.dll", "CoFileTimeNow")
Interceptor.attach(CoFileTimeNow, {onLeave: function (args) {send("CoFileTimeNow");}});

var CoFreeUnusedLibraries = Module.findExportByName("combase.dll", "CoFreeUnusedLibraries")
Interceptor.attach(CoFreeUnusedLibraries, {onLeave: function (args) {send("CoFreeUnusedLibraries");}});

var CoFreeUnusedLibrariesEx = Module.findExportByName("combase.dll", "CoFreeUnusedLibrariesEx")
Interceptor.attach(CoFreeUnusedLibrariesEx, {onLeave: function (args) {send("CoFreeUnusedLibrariesEx");}});

var CoGetActivationState = Module.findExportByName("combase.dll", "CoGetActivationState")
Interceptor.attach(CoGetActivationState, {onLeave: function (args) {send("CoGetActivationState");}});

var CoGetApartmentID = Module.findExportByName("combase.dll", "CoGetApartmentID")
Interceptor.attach(CoGetApartmentID, {onLeave: function (args) {send("CoGetApartmentID");}});

var CoGetApartmentType = Module.findExportByName("combase.dll", "CoGetApartmentType")
Interceptor.attach(CoGetApartmentType, {onLeave: function (args) {send("CoGetApartmentType");}});

var CoGetCallContext = Module.findExportByName("combase.dll", "CoGetCallContext")
Interceptor.attach(CoGetCallContext, {onLeave: function (args) {send("CoGetCallContext");}});

var CoGetCallState = Module.findExportByName("combase.dll", "CoGetCallState")
Interceptor.attach(CoGetCallState, {onLeave: function (args) {send("CoGetCallState");}});

var CoGetCallerTID = Module.findExportByName("combase.dll", "CoGetCallerTID")
Interceptor.attach(CoGetCallerTID, {onLeave: function (args) {send("CoGetCallerTID");}});

var CoGetCancelObject = Module.findExportByName("combase.dll", "CoGetCancelObject")
Interceptor.attach(CoGetCancelObject, {onLeave: function (args) {send("CoGetCancelObject");}});

var CoGetClassObject = Module.findExportByName("combase.dll", "CoGetClassObject")
Interceptor.attach(CoGetClassObject, {onLeave: function (args) {send("CoGetClassObject");}});

var CoGetClassVersion = Module.findExportByName("combase.dll", "CoGetClassVersion")
Interceptor.attach(CoGetClassVersion, {onLeave: function (args) {send("CoGetClassVersion");}});

var CoGetContextToken = Module.findExportByName("combase.dll", "CoGetContextToken")
Interceptor.attach(CoGetContextToken, {onLeave: function (args) {send("CoGetContextToken");}});

var CoGetCurrentLogicalThreadId = Module.findExportByName("combase.dll", "CoGetCurrentLogicalThreadId")
Interceptor.attach(CoGetCurrentLogicalThreadId, {onLeave: function (args) {send("CoGetCurrentLogicalThreadId");}});

var CoGetCurrentProcess = Module.findExportByName("combase.dll", "CoGetCurrentProcess")
Interceptor.attach(CoGetCurrentProcess, {onLeave: function (args) {send("CoGetCurrentProcess");}});

var CoGetDefaultContext = Module.findExportByName("combase.dll", "CoGetDefaultContext")
Interceptor.attach(CoGetDefaultContext, {onLeave: function (args) {send("CoGetDefaultContext");}});

var CoGetErrorInfo = Module.findExportByName("combase.dll", "CoGetErrorInfo")
Interceptor.attach(CoGetErrorInfo, {onLeave: function (args) {send("CoGetErrorInfo");}});

var CoGetInstanceFromFile = Module.findExportByName("combase.dll", "CoGetInstanceFromFile")
Interceptor.attach(CoGetInstanceFromFile, {onLeave: function (args) {send("CoGetInstanceFromFile");}});

var CoGetInstanceFromIStorage = Module.findExportByName("combase.dll", "CoGetInstanceFromIStorage")
Interceptor.attach(CoGetInstanceFromIStorage, {onLeave: function (args) {send("CoGetInstanceFromIStorage");}});

var CoGetInterfaceAndReleaseStream = Module.findExportByName("combase.dll", "CoGetInterfaceAndReleaseStream")
Interceptor.attach(CoGetInterfaceAndReleaseStream, {onLeave: function (args) {send("CoGetInterfaceAndReleaseStream");}});

var CoGetMalloc = Module.findExportByName("combase.dll", "CoGetMalloc")
Interceptor.attach(CoGetMalloc, {onLeave: function (args) {send("CoGetMalloc");}});

var CoGetMarshalSizeMax = Module.findExportByName("combase.dll", "CoGetMarshalSizeMax")
Interceptor.attach(CoGetMarshalSizeMax, {onLeave: function (args) {send("CoGetMarshalSizeMax");}});

var CoGetModuleArchitecture = Module.findExportByName("combase.dll", "CoGetModuleArchitecture")
Interceptor.attach(CoGetModuleArchitecture, {onLeave: function (args) {send("CoGetModuleArchitecture");}});

var CoGetModuleType = Module.findExportByName("combase.dll", "CoGetModuleType")
Interceptor.attach(CoGetModuleType, {onLeave: function (args) {send("CoGetModuleType");}});

var CoGetObjectContext = Module.findExportByName("combase.dll", "CoGetObjectContext")
Interceptor.attach(CoGetObjectContext, {onLeave: function (args) {send("CoGetObjectContext");}});

var CoGetPSClsid = Module.findExportByName("combase.dll", "CoGetPSClsid")
Interceptor.attach(CoGetPSClsid, {onLeave: function (args) {send("CoGetPSClsid");}});

var CoGetProcessIdentifier = Module.findExportByName("combase.dll", "CoGetProcessIdentifier")
Interceptor.attach(CoGetProcessIdentifier, {onLeave: function (args) {send("CoGetProcessIdentifier");}});

var CoGetStandardMarshal = Module.findExportByName("combase.dll", "CoGetStandardMarshal")
Interceptor.attach(CoGetStandardMarshal, {onLeave: function (args) {send("CoGetStandardMarshal");}});

var CoGetStdMarshalEx = Module.findExportByName("combase.dll", "CoGetStdMarshalEx")
Interceptor.attach(CoGetStdMarshalEx, {onLeave: function (args) {send("CoGetStdMarshalEx");}});

var CoGetSystemSecurityPermissions = Module.findExportByName("combase.dll", "CoGetSystemSecurityPermissions")
Interceptor.attach(CoGetSystemSecurityPermissions, {onLeave: function (args) {send("CoGetSystemSecurityPermissions");}});

var CoGetTreatAsClass = Module.findExportByName("combase.dll", "CoGetTreatAsClass")
Interceptor.attach(CoGetTreatAsClass, {onLeave: function (args) {send("CoGetTreatAsClass");}});

var CoImpersonateClient = Module.findExportByName("combase.dll", "CoImpersonateClient")
Interceptor.attach(CoImpersonateClient, {onLeave: function (args) {send("CoImpersonateClient");}});

var CoIncrementMTAUsage = Module.findExportByName("combase.dll", "CoIncrementMTAUsage")
Interceptor.attach(CoIncrementMTAUsage, {onLeave: function (args) {send("CoIncrementMTAUsage");}});

var CoInitializeEx = Module.findExportByName("combase.dll", "CoInitializeEx")
Interceptor.attach(CoInitializeEx, {onLeave: function (args) {send("CoInitializeEx");}});

var CoInitializeSecurity = Module.findExportByName("combase.dll", "CoInitializeSecurity")
Interceptor.attach(CoInitializeSecurity, {onLeave: function (args) {send("CoInitializeSecurity");}});

var CoInitializeWOW = Module.findExportByName("combase.dll", "CoInitializeWOW")
Interceptor.attach(CoInitializeWOW, {onLeave: function (args) {send("CoInitializeWOW");}});

var CoInvalidateRemoteMachineBindings = Module.findExportByName("combase.dll", "CoInvalidateRemoteMachineBindings")
Interceptor.attach(CoInvalidateRemoteMachineBindings, {onLeave: function (args) {send("CoInvalidateRemoteMachineBindings");}});

var CoIsHandlerConnected = Module.findExportByName("combase.dll", "CoIsHandlerConnected")
Interceptor.attach(CoIsHandlerConnected, {onLeave: function (args) {send("CoIsHandlerConnected");}});

var CoIsOle1Class = Module.findExportByName("combase.dll", "CoIsOle1Class")
Interceptor.attach(CoIsOle1Class, {onLeave: function (args) {send("CoIsOle1Class");}});

var CoLockObjectExternal = Module.findExportByName("combase.dll", "CoLockObjectExternal")
Interceptor.attach(CoLockObjectExternal, {onLeave: function (args) {send("CoLockObjectExternal");}});

var CoMarshalHresult = Module.findExportByName("combase.dll", "CoMarshalHresult")
Interceptor.attach(CoMarshalHresult, {onLeave: function (args) {send("CoMarshalHresult");}});

var CoMarshalInterThreadInterfaceInStream = Module.findExportByName("combase.dll", "CoMarshalInterThreadInterfaceInStream")
Interceptor.attach(CoMarshalInterThreadInterfaceInStream, {onLeave: function (args) {send("CoMarshalInterThreadInterfaceInStream");}});

var CoMarshalInterface = Module.findExportByName("combase.dll", "CoMarshalInterface")
Interceptor.attach(CoMarshalInterface, {onLeave: function (args) {send("CoMarshalInterface");}});

var CoPopServiceDomain = Module.findExportByName("combase.dll", "CoPopServiceDomain")
Interceptor.attach(CoPopServiceDomain, {onLeave: function (args) {send("CoPopServiceDomain");}});

var CoPushServiceDomain = Module.findExportByName("combase.dll", "CoPushServiceDomain")
Interceptor.attach(CoPushServiceDomain, {onLeave: function (args) {send("CoPushServiceDomain");}});

var CoQueryAuthenticationServices = Module.findExportByName("combase.dll", "CoQueryAuthenticationServices")
Interceptor.attach(CoQueryAuthenticationServices, {onLeave: function (args) {send("CoQueryAuthenticationServices");}});

var CoQueryClientBlanket = Module.findExportByName("combase.dll", "CoQueryClientBlanket")
Interceptor.attach(CoQueryClientBlanket, {onLeave: function (args) {send("CoQueryClientBlanket");}});

var CoQueryProxyBlanket = Module.findExportByName("combase.dll", "CoQueryProxyBlanket")
Interceptor.attach(CoQueryProxyBlanket, {onLeave: function (args) {send("CoQueryProxyBlanket");}});

var CoReactivateObject = Module.findExportByName("combase.dll", "CoReactivateObject")
Interceptor.attach(CoReactivateObject, {onLeave: function (args) {send("CoReactivateObject");}});

var CoRegisterActivationFilter = Module.findExportByName("combase.dll", "CoRegisterActivationFilter")
Interceptor.attach(CoRegisterActivationFilter, {onLeave: function (args) {send("CoRegisterActivationFilter");}});

var CoRegisterClassObject = Module.findExportByName("combase.dll", "CoRegisterClassObject")
Interceptor.attach(CoRegisterClassObject, {onLeave: function (args) {send("CoRegisterClassObject");}});

var CoRegisterConsoleHandles = Module.findExportByName("combase.dll", "CoRegisterConsoleHandles")
Interceptor.attach(CoRegisterConsoleHandles, {onLeave: function (args) {send("CoRegisterConsoleHandles");}});

var CoRegisterDeviceCatalog = Module.findExportByName("combase.dll", "CoRegisterDeviceCatalog")
Interceptor.attach(CoRegisterDeviceCatalog, {onLeave: function (args) {send("CoRegisterDeviceCatalog");}});

var CoRegisterInitializeSpy = Module.findExportByName("combase.dll", "CoRegisterInitializeSpy")
Interceptor.attach(CoRegisterInitializeSpy, {onLeave: function (args) {send("CoRegisterInitializeSpy");}});

var CoRegisterMallocSpy = Module.findExportByName("combase.dll", "CoRegisterMallocSpy")
Interceptor.attach(CoRegisterMallocSpy, {onLeave: function (args) {send("CoRegisterMallocSpy");}});

var CoRegisterMessageFilter = Module.findExportByName("combase.dll", "CoRegisterMessageFilter")
Interceptor.attach(CoRegisterMessageFilter, {onLeave: function (args) {send("CoRegisterMessageFilter");}});

var CoRegisterPSClsid = Module.findExportByName("combase.dll", "CoRegisterPSClsid")
Interceptor.attach(CoRegisterPSClsid, {onLeave: function (args) {send("CoRegisterPSClsid");}});

var CoRegisterRacActivationToken = Module.findExportByName("combase.dll", "CoRegisterRacActivationToken")
Interceptor.attach(CoRegisterRacActivationToken, {onLeave: function (args) {send("CoRegisterRacActivationToken");}});

var CoRegisterSurrogate = Module.findExportByName("combase.dll", "CoRegisterSurrogate")
Interceptor.attach(CoRegisterSurrogate, {onLeave: function (args) {send("CoRegisterSurrogate");}});

var CoRegisterSurrogateEx = Module.findExportByName("combase.dll", "CoRegisterSurrogateEx")
Interceptor.attach(CoRegisterSurrogateEx, {onLeave: function (args) {send("CoRegisterSurrogateEx");}});

var CoReleaseMarshalData = Module.findExportByName("combase.dll", "CoReleaseMarshalData")
Interceptor.attach(CoReleaseMarshalData, {onLeave: function (args) {send("CoReleaseMarshalData");}});

var CoReleaseServerProcess = Module.findExportByName("combase.dll", "CoReleaseServerProcess")
Interceptor.attach(CoReleaseServerProcess, {onLeave: function (args) {send("CoReleaseServerProcess");}});

var CoResumeClassObjects = Module.findExportByName("combase.dll", "CoResumeClassObjects")
Interceptor.attach(CoResumeClassObjects, {onLeave: function (args) {send("CoResumeClassObjects");}});

var CoRetireServer = Module.findExportByName("combase.dll", "CoRetireServer")
Interceptor.attach(CoRetireServer, {onLeave: function (args) {send("CoRetireServer");}});

var CoRevertToSelf = Module.findExportByName("combase.dll", "CoRevertToSelf")
Interceptor.attach(CoRevertToSelf, {onLeave: function (args) {send("CoRevertToSelf");}});

var CoRevokeClassObject = Module.findExportByName("combase.dll", "CoRevokeClassObject")
Interceptor.attach(CoRevokeClassObject, {onLeave: function (args) {send("CoRevokeClassObject");}});

var CoRevokeConsoleHandles = Module.findExportByName("combase.dll", "CoRevokeConsoleHandles")
Interceptor.attach(CoRevokeConsoleHandles, {onLeave: function (args) {send("CoRevokeConsoleHandles");}});

var CoRevokeDeviceCatalog = Module.findExportByName("combase.dll", "CoRevokeDeviceCatalog")
Interceptor.attach(CoRevokeDeviceCatalog, {onLeave: function (args) {send("CoRevokeDeviceCatalog");}});

var CoRevokeInitializeSpy = Module.findExportByName("combase.dll", "CoRevokeInitializeSpy")
Interceptor.attach(CoRevokeInitializeSpy, {onLeave: function (args) {send("CoRevokeInitializeSpy");}});

var CoRevokeMallocSpy = Module.findExportByName("combase.dll", "CoRevokeMallocSpy")
Interceptor.attach(CoRevokeMallocSpy, {onLeave: function (args) {send("CoRevokeMallocSpy");}});

var CoRevokeRacActivationToken = Module.findExportByName("combase.dll", "CoRevokeRacActivationToken")
Interceptor.attach(CoRevokeRacActivationToken, {onLeave: function (args) {send("CoRevokeRacActivationToken");}});

var CoSetCancelObject = Module.findExportByName("combase.dll", "CoSetCancelObject")
Interceptor.attach(CoSetCancelObject, {onLeave: function (args) {send("CoSetCancelObject");}});

var CoSetErrorInfo = Module.findExportByName("combase.dll", "CoSetErrorInfo")
Interceptor.attach(CoSetErrorInfo, {onLeave: function (args) {send("CoSetErrorInfo");}});

var CoSetProxyBlanket = Module.findExportByName("combase.dll", "CoSetProxyBlanket")
Interceptor.attach(CoSetProxyBlanket, {onLeave: function (args) {send("CoSetProxyBlanket");}});

var CoSuspendClassObjects = Module.findExportByName("combase.dll", "CoSuspendClassObjects")
Interceptor.attach(CoSuspendClassObjects, {onLeave: function (args) {send("CoSuspendClassObjects");}});

var CoSwitchCallContext = Module.findExportByName("combase.dll", "CoSwitchCallContext")
Interceptor.attach(CoSwitchCallContext, {onLeave: function (args) {send("CoSwitchCallContext");}});

var CoTaskMemAlloc = Module.findExportByName("combase.dll", "CoTaskMemAlloc")
Interceptor.attach(CoTaskMemAlloc, {onLeave: function (args) {send("CoTaskMemAlloc");}});

var CoTaskMemFree = Module.findExportByName("combase.dll", "CoTaskMemFree")
Interceptor.attach(CoTaskMemFree, {onLeave: function (args) {send("CoTaskMemFree");}});

var CoTaskMemRealloc = Module.findExportByName("combase.dll", "CoTaskMemRealloc")
Interceptor.attach(CoTaskMemRealloc, {onLeave: function (args) {send("CoTaskMemRealloc");}});

var CoTestCancel = Module.findExportByName("combase.dll", "CoTestCancel")
Interceptor.attach(CoTestCancel, {onLeave: function (args) {send("CoTestCancel");}});

var CoTreatAsClass = Module.findExportByName("combase.dll", "CoTreatAsClass")
Interceptor.attach(CoTreatAsClass, {onLeave: function (args) {send("CoTreatAsClass");}});

var CoUninitialize = Module.findExportByName("combase.dll", "CoUninitialize")
Interceptor.attach(CoUninitialize, {onLeave: function (args) {send("CoUninitialize");}});

var CoUnloadingWOW = Module.findExportByName("combase.dll", "CoUnloadingWOW")
Interceptor.attach(CoUnloadingWOW, {onLeave: function (args) {send("CoUnloadingWOW");}});

var CoUnmarshalHresult = Module.findExportByName("combase.dll", "CoUnmarshalHresult")
Interceptor.attach(CoUnmarshalHresult, {onLeave: function (args) {send("CoUnmarshalHresult");}});

var CoUnmarshalInterface = Module.findExportByName("combase.dll", "CoUnmarshalInterface")
Interceptor.attach(CoUnmarshalInterface, {onLeave: function (args) {send("CoUnmarshalInterface");}});

var CoVrfCheckThreadState = Module.findExportByName("combase.dll", "CoVrfCheckThreadState")
Interceptor.attach(CoVrfCheckThreadState, {onLeave: function (args) {send("CoVrfCheckThreadState");}});

var CoVrfGetThreadState = Module.findExportByName("combase.dll", "CoVrfGetThreadState")
Interceptor.attach(CoVrfGetThreadState, {onLeave: function (args) {send("CoVrfGetThreadState");}});

var CoVrfReleaseThreadState = Module.findExportByName("combase.dll", "CoVrfReleaseThreadState")
Interceptor.attach(CoVrfReleaseThreadState, {onLeave: function (args) {send("CoVrfReleaseThreadState");}});

var CoWaitForMultipleHandles = Module.findExportByName("combase.dll", "CoWaitForMultipleHandles")
Interceptor.attach(CoWaitForMultipleHandles, {onLeave: function (args) {send("CoWaitForMultipleHandles");}});

var CoWaitForMultipleObjects = Module.findExportByName("combase.dll", "CoWaitForMultipleObjects")
Interceptor.attach(CoWaitForMultipleObjects, {onLeave: function (args) {send("CoWaitForMultipleObjects");}});

var CreateErrorInfo = Module.findExportByName("combase.dll", "CreateErrorInfo")
Interceptor.attach(CreateErrorInfo, {onLeave: function (args) {send("CreateErrorInfo");}});

var CreateStreamOnHGlobal = Module.findExportByName("combase.dll", "CreateStreamOnHGlobal")
Interceptor.attach(CreateStreamOnHGlobal, {onLeave: function (args) {send("CreateStreamOnHGlobal");}});

var DcomChannelSetHResult = Module.findExportByName("combase.dll", "DcomChannelSetHResult")
Interceptor.attach(DcomChannelSetHResult, {onLeave: function (args) {send("DcomChannelSetHResult");}});

var DllDebugObjectRPCHook = Module.findExportByName("combase.dll", "DllDebugObjectRPCHook")
Interceptor.attach(DllDebugObjectRPCHook, {onLeave: function (args) {send("DllDebugObjectRPCHook");}});

var DllGetActivationFactory = Module.findExportByName("combase.dll", "DllGetActivationFactory")
Interceptor.attach(DllGetActivationFactory, {onLeave: function (args) {send("DllGetActivationFactory");}});

var DllGetClassObject = Module.findExportByName("combase.dll", "DllGetClassObject")
Interceptor.attach(DllGetClassObject, {onLeave: function (args) {send("DllGetClassObject");}});

var EnableHookObject = Module.findExportByName("combase.dll", "EnableHookObject")
Interceptor.attach(EnableHookObject, {onLeave: function (args) {send("EnableHookObject");}});

var FreePropVariantArray = Module.findExportByName("combase.dll", "FreePropVariantArray")
Interceptor.attach(FreePropVariantArray, {onLeave: function (args) {send("FreePropVariantArray");}});

var FreePropVariantArrayWorker = Module.findExportByName("combase.dll", "FreePropVariantArrayWorker")
Interceptor.attach(FreePropVariantArrayWorker, {onLeave: function (args) {send("FreePropVariantArrayWorker");}});

var GetCatalogHelper = Module.findExportByName("combase.dll", "GetCatalogHelper")
Interceptor.attach(GetCatalogHelper, {onLeave: function (args) {send("GetCatalogHelper");}});

var GetErrorInfo = Module.findExportByName("combase.dll", "GetErrorInfo")
Interceptor.attach(GetErrorInfo, {onLeave: function (args) {send("GetErrorInfo");}});

var GetFuncDescs = Module.findExportByName("combase.dll", "GetFuncDescs")
Interceptor.attach(GetFuncDescs, {onLeave: function (args) {send("GetFuncDescs");}});

var GetHGlobalFromStream = Module.findExportByName("combase.dll", "GetHGlobalFromStream")
Interceptor.attach(GetHGlobalFromStream, {onLeave: function (args) {send("GetHGlobalFromStream");}});

var GetHookInterface = Module.findExportByName("combase.dll", "GetHookInterface")
Interceptor.attach(GetHookInterface, {onLeave: function (args) {send("GetHookInterface");}});

var GetRestrictedErrorInfo = Module.findExportByName("combase.dll", "GetRestrictedErrorInfo")
Interceptor.attach(GetRestrictedErrorInfo, {onLeave: function (args) {send("GetRestrictedErrorInfo");}});

var HACCEL_UserFree = Module.findExportByName("combase.dll", "HACCEL_UserFree")
Interceptor.attach(HACCEL_UserFree, {onLeave: function (args) {send("HACCEL_UserFree");}});

var HACCEL_UserFree64 = Module.findExportByName("combase.dll", "HACCEL_UserFree64")
Interceptor.attach(HACCEL_UserFree64, {onLeave: function (args) {send("HACCEL_UserFree64");}});

var HACCEL_UserMarshal = Module.findExportByName("combase.dll", "HACCEL_UserMarshal")
Interceptor.attach(HACCEL_UserMarshal, {onLeave: function (args) {send("HACCEL_UserMarshal");}});

var HACCEL_UserMarshal64 = Module.findExportByName("combase.dll", "HACCEL_UserMarshal64")
Interceptor.attach(HACCEL_UserMarshal64, {onLeave: function (args) {send("HACCEL_UserMarshal64");}});

var HACCEL_UserSize = Module.findExportByName("combase.dll", "HACCEL_UserSize")
Interceptor.attach(HACCEL_UserSize, {onLeave: function (args) {send("HACCEL_UserSize");}});

var HACCEL_UserSize64 = Module.findExportByName("combase.dll", "HACCEL_UserSize64")
Interceptor.attach(HACCEL_UserSize64, {onLeave: function (args) {send("HACCEL_UserSize64");}});

var HACCEL_UserUnmarshal = Module.findExportByName("combase.dll", "HACCEL_UserUnmarshal")
Interceptor.attach(HACCEL_UserUnmarshal, {onLeave: function (args) {send("HACCEL_UserUnmarshal");}});

var HACCEL_UserUnmarshal64 = Module.findExportByName("combase.dll", "HACCEL_UserUnmarshal64")
Interceptor.attach(HACCEL_UserUnmarshal64, {onLeave: function (args) {send("HACCEL_UserUnmarshal64");}});

var HBITMAP_UserFree = Module.findExportByName("combase.dll", "HBITMAP_UserFree")
Interceptor.attach(HBITMAP_UserFree, {onLeave: function (args) {send("HBITMAP_UserFree");}});

var HBITMAP_UserFree64 = Module.findExportByName("combase.dll", "HBITMAP_UserFree64")
Interceptor.attach(HBITMAP_UserFree64, {onLeave: function (args) {send("HBITMAP_UserFree64");}});

var HBITMAP_UserMarshal = Module.findExportByName("combase.dll", "HBITMAP_UserMarshal")
Interceptor.attach(HBITMAP_UserMarshal, {onLeave: function (args) {send("HBITMAP_UserMarshal");}});

var HBITMAP_UserMarshal64 = Module.findExportByName("combase.dll", "HBITMAP_UserMarshal64")
Interceptor.attach(HBITMAP_UserMarshal64, {onLeave: function (args) {send("HBITMAP_UserMarshal64");}});

var HBITMAP_UserSize = Module.findExportByName("combase.dll", "HBITMAP_UserSize")
Interceptor.attach(HBITMAP_UserSize, {onLeave: function (args) {send("HBITMAP_UserSize");}});

var HBITMAP_UserSize64 = Module.findExportByName("combase.dll", "HBITMAP_UserSize64")
Interceptor.attach(HBITMAP_UserSize64, {onLeave: function (args) {send("HBITMAP_UserSize64");}});

var HBITMAP_UserUnmarshal = Module.findExportByName("combase.dll", "HBITMAP_UserUnmarshal")
Interceptor.attach(HBITMAP_UserUnmarshal, {onLeave: function (args) {send("HBITMAP_UserUnmarshal");}});

var HBITMAP_UserUnmarshal64 = Module.findExportByName("combase.dll", "HBITMAP_UserUnmarshal64")
Interceptor.attach(HBITMAP_UserUnmarshal64, {onLeave: function (args) {send("HBITMAP_UserUnmarshal64");}});

var HBRUSH_UserFree = Module.findExportByName("combase.dll", "HBRUSH_UserFree")
Interceptor.attach(HBRUSH_UserFree, {onLeave: function (args) {send("HBRUSH_UserFree");}});

var HBRUSH_UserFree64 = Module.findExportByName("combase.dll", "HBRUSH_UserFree64")
Interceptor.attach(HBRUSH_UserFree64, {onLeave: function (args) {send("HBRUSH_UserFree64");}});

var HBRUSH_UserMarshal = Module.findExportByName("combase.dll", "HBRUSH_UserMarshal")
Interceptor.attach(HBRUSH_UserMarshal, {onLeave: function (args) {send("HBRUSH_UserMarshal");}});

var HBRUSH_UserMarshal64 = Module.findExportByName("combase.dll", "HBRUSH_UserMarshal64")
Interceptor.attach(HBRUSH_UserMarshal64, {onLeave: function (args) {send("HBRUSH_UserMarshal64");}});

var HBRUSH_UserSize = Module.findExportByName("combase.dll", "HBRUSH_UserSize")
Interceptor.attach(HBRUSH_UserSize, {onLeave: function (args) {send("HBRUSH_UserSize");}});

var HBRUSH_UserSize64 = Module.findExportByName("combase.dll", "HBRUSH_UserSize64")
Interceptor.attach(HBRUSH_UserSize64, {onLeave: function (args) {send("HBRUSH_UserSize64");}});

var HBRUSH_UserUnmarshal = Module.findExportByName("combase.dll", "HBRUSH_UserUnmarshal")
Interceptor.attach(HBRUSH_UserUnmarshal, {onLeave: function (args) {send("HBRUSH_UserUnmarshal");}});

var HBRUSH_UserUnmarshal64 = Module.findExportByName("combase.dll", "HBRUSH_UserUnmarshal64")
Interceptor.attach(HBRUSH_UserUnmarshal64, {onLeave: function (args) {send("HBRUSH_UserUnmarshal64");}});

var HDC_UserFree = Module.findExportByName("combase.dll", "HDC_UserFree")
Interceptor.attach(HDC_UserFree, {onLeave: function (args) {send("HDC_UserFree");}});

var HDC_UserFree64 = Module.findExportByName("combase.dll", "HDC_UserFree64")
Interceptor.attach(HDC_UserFree64, {onLeave: function (args) {send("HDC_UserFree64");}});

var HDC_UserMarshal = Module.findExportByName("combase.dll", "HDC_UserMarshal")
Interceptor.attach(HDC_UserMarshal, {onLeave: function (args) {send("HDC_UserMarshal");}});

var HDC_UserMarshal64 = Module.findExportByName("combase.dll", "HDC_UserMarshal64")
Interceptor.attach(HDC_UserMarshal64, {onLeave: function (args) {send("HDC_UserMarshal64");}});

var HDC_UserSize = Module.findExportByName("combase.dll", "HDC_UserSize")
Interceptor.attach(HDC_UserSize, {onLeave: function (args) {send("HDC_UserSize");}});

var HDC_UserSize64 = Module.findExportByName("combase.dll", "HDC_UserSize64")
Interceptor.attach(HDC_UserSize64, {onLeave: function (args) {send("HDC_UserSize64");}});

var HDC_UserUnmarshal = Module.findExportByName("combase.dll", "HDC_UserUnmarshal")
Interceptor.attach(HDC_UserUnmarshal, {onLeave: function (args) {send("HDC_UserUnmarshal");}});

var HDC_UserUnmarshal64 = Module.findExportByName("combase.dll", "HDC_UserUnmarshal64")
Interceptor.attach(HDC_UserUnmarshal64, {onLeave: function (args) {send("HDC_UserUnmarshal64");}});

var HGLOBAL_UserFree = Module.findExportByName("combase.dll", "HGLOBAL_UserFree")
Interceptor.attach(HGLOBAL_UserFree, {onLeave: function (args) {send("HGLOBAL_UserFree");}});

var HGLOBAL_UserFree64 = Module.findExportByName("combase.dll", "HGLOBAL_UserFree64")
Interceptor.attach(HGLOBAL_UserFree64, {onLeave: function (args) {send("HGLOBAL_UserFree64");}});

var HGLOBAL_UserMarshal = Module.findExportByName("combase.dll", "HGLOBAL_UserMarshal")
Interceptor.attach(HGLOBAL_UserMarshal, {onLeave: function (args) {send("HGLOBAL_UserMarshal");}});

var HGLOBAL_UserMarshal64 = Module.findExportByName("combase.dll", "HGLOBAL_UserMarshal64")
Interceptor.attach(HGLOBAL_UserMarshal64, {onLeave: function (args) {send("HGLOBAL_UserMarshal64");}});

var HGLOBAL_UserSize = Module.findExportByName("combase.dll", "HGLOBAL_UserSize")
Interceptor.attach(HGLOBAL_UserSize, {onLeave: function (args) {send("HGLOBAL_UserSize");}});

var HGLOBAL_UserSize64 = Module.findExportByName("combase.dll", "HGLOBAL_UserSize64")
Interceptor.attach(HGLOBAL_UserSize64, {onLeave: function (args) {send("HGLOBAL_UserSize64");}});

var HGLOBAL_UserUnmarshal = Module.findExportByName("combase.dll", "HGLOBAL_UserUnmarshal")
Interceptor.attach(HGLOBAL_UserUnmarshal, {onLeave: function (args) {send("HGLOBAL_UserUnmarshal");}});

var HGLOBAL_UserUnmarshal64 = Module.findExportByName("combase.dll", "HGLOBAL_UserUnmarshal64")
Interceptor.attach(HGLOBAL_UserUnmarshal64, {onLeave: function (args) {send("HGLOBAL_UserUnmarshal64");}});

var HICON_UserFree = Module.findExportByName("combase.dll", "HICON_UserFree")
Interceptor.attach(HICON_UserFree, {onLeave: function (args) {send("HICON_UserFree");}});

var HICON_UserFree64 = Module.findExportByName("combase.dll", "HICON_UserFree64")
Interceptor.attach(HICON_UserFree64, {onLeave: function (args) {send("HICON_UserFree64");}});

var HICON_UserMarshal = Module.findExportByName("combase.dll", "HICON_UserMarshal")
Interceptor.attach(HICON_UserMarshal, {onLeave: function (args) {send("HICON_UserMarshal");}});

var HICON_UserMarshal64 = Module.findExportByName("combase.dll", "HICON_UserMarshal64")
Interceptor.attach(HICON_UserMarshal64, {onLeave: function (args) {send("HICON_UserMarshal64");}});

var HICON_UserSize = Module.findExportByName("combase.dll", "HICON_UserSize")
Interceptor.attach(HICON_UserSize, {onLeave: function (args) {send("HICON_UserSize");}});

var HICON_UserSize64 = Module.findExportByName("combase.dll", "HICON_UserSize64")
Interceptor.attach(HICON_UserSize64, {onLeave: function (args) {send("HICON_UserSize64");}});

var HICON_UserUnmarshal = Module.findExportByName("combase.dll", "HICON_UserUnmarshal")
Interceptor.attach(HICON_UserUnmarshal, {onLeave: function (args) {send("HICON_UserUnmarshal");}});

var HICON_UserUnmarshal64 = Module.findExportByName("combase.dll", "HICON_UserUnmarshal64")
Interceptor.attach(HICON_UserUnmarshal64, {onLeave: function (args) {send("HICON_UserUnmarshal64");}});

var HMENU_UserFree = Module.findExportByName("combase.dll", "HMENU_UserFree")
Interceptor.attach(HMENU_UserFree, {onLeave: function (args) {send("HMENU_UserFree");}});

var HMENU_UserFree64 = Module.findExportByName("combase.dll", "HMENU_UserFree64")
Interceptor.attach(HMENU_UserFree64, {onLeave: function (args) {send("HMENU_UserFree64");}});

var HMENU_UserMarshal = Module.findExportByName("combase.dll", "HMENU_UserMarshal")
Interceptor.attach(HMENU_UserMarshal, {onLeave: function (args) {send("HMENU_UserMarshal");}});

var HMENU_UserMarshal64 = Module.findExportByName("combase.dll", "HMENU_UserMarshal64")
Interceptor.attach(HMENU_UserMarshal64, {onLeave: function (args) {send("HMENU_UserMarshal64");}});

var HMENU_UserSize = Module.findExportByName("combase.dll", "HMENU_UserSize")
Interceptor.attach(HMENU_UserSize, {onLeave: function (args) {send("HMENU_UserSize");}});

var HMENU_UserSize64 = Module.findExportByName("combase.dll", "HMENU_UserSize64")
Interceptor.attach(HMENU_UserSize64, {onLeave: function (args) {send("HMENU_UserSize64");}});

var HMENU_UserUnmarshal = Module.findExportByName("combase.dll", "HMENU_UserUnmarshal")
Interceptor.attach(HMENU_UserUnmarshal, {onLeave: function (args) {send("HMENU_UserUnmarshal");}});

var HMENU_UserUnmarshal64 = Module.findExportByName("combase.dll", "HMENU_UserUnmarshal64")
Interceptor.attach(HMENU_UserUnmarshal64, {onLeave: function (args) {send("HMENU_UserUnmarshal64");}});

var HMONITOR_UserFree = Module.findExportByName("combase.dll", "HMONITOR_UserFree")
Interceptor.attach(HMONITOR_UserFree, {onLeave: function (args) {send("HMONITOR_UserFree");}});

var HMONITOR_UserFree64 = Module.findExportByName("combase.dll", "HMONITOR_UserFree64")
Interceptor.attach(HMONITOR_UserFree64, {onLeave: function (args) {send("HMONITOR_UserFree64");}});

var HMONITOR_UserMarshal = Module.findExportByName("combase.dll", "HMONITOR_UserMarshal")
Interceptor.attach(HMONITOR_UserMarshal, {onLeave: function (args) {send("HMONITOR_UserMarshal");}});

var HMONITOR_UserMarshal64 = Module.findExportByName("combase.dll", "HMONITOR_UserMarshal64")
Interceptor.attach(HMONITOR_UserMarshal64, {onLeave: function (args) {send("HMONITOR_UserMarshal64");}});

var HMONITOR_UserSize = Module.findExportByName("combase.dll", "HMONITOR_UserSize")
Interceptor.attach(HMONITOR_UserSize, {onLeave: function (args) {send("HMONITOR_UserSize");}});

var HMONITOR_UserSize64 = Module.findExportByName("combase.dll", "HMONITOR_UserSize64")
Interceptor.attach(HMONITOR_UserSize64, {onLeave: function (args) {send("HMONITOR_UserSize64");}});

var HMONITOR_UserUnmarshal = Module.findExportByName("combase.dll", "HMONITOR_UserUnmarshal")
Interceptor.attach(HMONITOR_UserUnmarshal, {onLeave: function (args) {send("HMONITOR_UserUnmarshal");}});

var HMONITOR_UserUnmarshal64 = Module.findExportByName("combase.dll", "HMONITOR_UserUnmarshal64")
Interceptor.attach(HMONITOR_UserUnmarshal64, {onLeave: function (args) {send("HMONITOR_UserUnmarshal64");}});

var HPALETTE_UserFree = Module.findExportByName("combase.dll", "HPALETTE_UserFree")
Interceptor.attach(HPALETTE_UserFree, {onLeave: function (args) {send("HPALETTE_UserFree");}});

var HPALETTE_UserFree64 = Module.findExportByName("combase.dll", "HPALETTE_UserFree64")
Interceptor.attach(HPALETTE_UserFree64, {onLeave: function (args) {send("HPALETTE_UserFree64");}});

var HPALETTE_UserMarshal = Module.findExportByName("combase.dll", "HPALETTE_UserMarshal")
Interceptor.attach(HPALETTE_UserMarshal, {onLeave: function (args) {send("HPALETTE_UserMarshal");}});

var HPALETTE_UserMarshal64 = Module.findExportByName("combase.dll", "HPALETTE_UserMarshal64")
Interceptor.attach(HPALETTE_UserMarshal64, {onLeave: function (args) {send("HPALETTE_UserMarshal64");}});

var HPALETTE_UserSize = Module.findExportByName("combase.dll", "HPALETTE_UserSize")
Interceptor.attach(HPALETTE_UserSize, {onLeave: function (args) {send("HPALETTE_UserSize");}});

var HPALETTE_UserSize64 = Module.findExportByName("combase.dll", "HPALETTE_UserSize64")
Interceptor.attach(HPALETTE_UserSize64, {onLeave: function (args) {send("HPALETTE_UserSize64");}});

var HPALETTE_UserUnmarshal = Module.findExportByName("combase.dll", "HPALETTE_UserUnmarshal")
Interceptor.attach(HPALETTE_UserUnmarshal, {onLeave: function (args) {send("HPALETTE_UserUnmarshal");}});

var HPALETTE_UserUnmarshal64 = Module.findExportByName("combase.dll", "HPALETTE_UserUnmarshal64")
Interceptor.attach(HPALETTE_UserUnmarshal64, {onLeave: function (args) {send("HPALETTE_UserUnmarshal64");}});

var HRGN_UserFree = Module.findExportByName("combase.dll", "HRGN_UserFree")
Interceptor.attach(HRGN_UserFree, {onLeave: function (args) {send("HRGN_UserFree");}});

var HRGN_UserFree64 = Module.findExportByName("combase.dll", "HRGN_UserFree64")
Interceptor.attach(HRGN_UserFree64, {onLeave: function (args) {send("HRGN_UserFree64");}});

var HRGN_UserMarshal = Module.findExportByName("combase.dll", "HRGN_UserMarshal")
Interceptor.attach(HRGN_UserMarshal, {onLeave: function (args) {send("HRGN_UserMarshal");}});

var HRGN_UserMarshal64 = Module.findExportByName("combase.dll", "HRGN_UserMarshal64")
Interceptor.attach(HRGN_UserMarshal64, {onLeave: function (args) {send("HRGN_UserMarshal64");}});

var HRGN_UserSize = Module.findExportByName("combase.dll", "HRGN_UserSize")
Interceptor.attach(HRGN_UserSize, {onLeave: function (args) {send("HRGN_UserSize");}});

var HRGN_UserSize64 = Module.findExportByName("combase.dll", "HRGN_UserSize64")
Interceptor.attach(HRGN_UserSize64, {onLeave: function (args) {send("HRGN_UserSize64");}});

var HRGN_UserUnmarshal = Module.findExportByName("combase.dll", "HRGN_UserUnmarshal")
Interceptor.attach(HRGN_UserUnmarshal, {onLeave: function (args) {send("HRGN_UserUnmarshal");}});

var HRGN_UserUnmarshal64 = Module.findExportByName("combase.dll", "HRGN_UserUnmarshal64")
Interceptor.attach(HRGN_UserUnmarshal64, {onLeave: function (args) {send("HRGN_UserUnmarshal64");}});

var HSTRING_UserFree = Module.findExportByName("combase.dll", "HSTRING_UserFree")
Interceptor.attach(HSTRING_UserFree, {onLeave: function (args) {send("HSTRING_UserFree");}});

var HSTRING_UserFree64 = Module.findExportByName("combase.dll", "HSTRING_UserFree64")
Interceptor.attach(HSTRING_UserFree64, {onLeave: function (args) {send("HSTRING_UserFree64");}});

var HSTRING_UserMarshal = Module.findExportByName("combase.dll", "HSTRING_UserMarshal")
Interceptor.attach(HSTRING_UserMarshal, {onLeave: function (args) {send("HSTRING_UserMarshal");}});

var HSTRING_UserMarshal64 = Module.findExportByName("combase.dll", "HSTRING_UserMarshal64")
Interceptor.attach(HSTRING_UserMarshal64, {onLeave: function (args) {send("HSTRING_UserMarshal64");}});

var HSTRING_UserSize = Module.findExportByName("combase.dll", "HSTRING_UserSize")
Interceptor.attach(HSTRING_UserSize, {onLeave: function (args) {send("HSTRING_UserSize");}});

var HSTRING_UserSize64 = Module.findExportByName("combase.dll", "HSTRING_UserSize64")
Interceptor.attach(HSTRING_UserSize64, {onLeave: function (args) {send("HSTRING_UserSize64");}});

var HSTRING_UserUnmarshal = Module.findExportByName("combase.dll", "HSTRING_UserUnmarshal")
Interceptor.attach(HSTRING_UserUnmarshal, {onLeave: function (args) {send("HSTRING_UserUnmarshal");}});

var HSTRING_UserUnmarshal64 = Module.findExportByName("combase.dll", "HSTRING_UserUnmarshal64")
Interceptor.attach(HSTRING_UserUnmarshal64, {onLeave: function (args) {send("HSTRING_UserUnmarshal64");}});

var HWND_UserFree = Module.findExportByName("combase.dll", "HWND_UserFree")
Interceptor.attach(HWND_UserFree, {onLeave: function (args) {send("HWND_UserFree");}});

var HWND_UserFree64 = Module.findExportByName("combase.dll", "HWND_UserFree64")
Interceptor.attach(HWND_UserFree64, {onLeave: function (args) {send("HWND_UserFree64");}});

var HWND_UserMarshal = Module.findExportByName("combase.dll", "HWND_UserMarshal")
Interceptor.attach(HWND_UserMarshal, {onLeave: function (args) {send("HWND_UserMarshal");}});

var HWND_UserMarshal64 = Module.findExportByName("combase.dll", "HWND_UserMarshal64")
Interceptor.attach(HWND_UserMarshal64, {onLeave: function (args) {send("HWND_UserMarshal64");}});

var HWND_UserSize = Module.findExportByName("combase.dll", "HWND_UserSize")
Interceptor.attach(HWND_UserSize, {onLeave: function (args) {send("HWND_UserSize");}});

var HWND_UserSize64 = Module.findExportByName("combase.dll", "HWND_UserSize64")
Interceptor.attach(HWND_UserSize64, {onLeave: function (args) {send("HWND_UserSize64");}});

var HWND_UserUnmarshal = Module.findExportByName("combase.dll", "HWND_UserUnmarshal")
Interceptor.attach(HWND_UserUnmarshal, {onLeave: function (args) {send("HWND_UserUnmarshal");}});

var HWND_UserUnmarshal64 = Module.findExportByName("combase.dll", "HWND_UserUnmarshal64")
Interceptor.attach(HWND_UserUnmarshal64, {onLeave: function (args) {send("HWND_UserUnmarshal64");}});

var HkOleRegisterObject = Module.findExportByName("combase.dll", "HkOleRegisterObject")
Interceptor.attach(HkOleRegisterObject, {onLeave: function (args) {send("HkOleRegisterObject");}});

var IIDFromString = Module.findExportByName("combase.dll", "IIDFromString")
Interceptor.attach(IIDFromString, {onLeave: function (args) {send("IIDFromString");}});

var InternalAppInvokeExceptionFilter = Module.findExportByName("combase.dll", "InternalAppInvokeExceptionFilter")
Interceptor.attach(InternalAppInvokeExceptionFilter, {onLeave: function (args) {send("InternalAppInvokeExceptionFilter");}});

var InternalCAggIdRelease = Module.findExportByName("combase.dll", "InternalCAggIdRelease")
Interceptor.attach(InternalCAggIdRelease, {onLeave: function (args) {send("InternalCAggIdRelease");}});

var InternalCAggIdSetHandler = Module.findExportByName("combase.dll", "InternalCAggIdSetHandler")
Interceptor.attach(InternalCAggIdSetHandler, {onLeave: function (args) {send("InternalCAggIdSetHandler");}});

var InternalCCFreeUnused = Module.findExportByName("combase.dll", "InternalCCFreeUnused")
Interceptor.attach(InternalCCFreeUnused, {onLeave: function (args) {send("InternalCCFreeUnused");}});

var InternalCCGetClassInformationForDde = Module.findExportByName("combase.dll", "InternalCCGetClassInformationForDde")
Interceptor.attach(InternalCCGetClassInformationForDde, {onLeave: function (args) {send("InternalCCGetClassInformationForDde");}});

var InternalCCGetClassInformationFromKey = Module.findExportByName("combase.dll", "InternalCCGetClassInformationFromKey")
Interceptor.attach(InternalCCGetClassInformationFromKey, {onLeave: function (args) {send("InternalCCGetClassInformationFromKey");}});

var InternalCCSetDdeServerWindow = Module.findExportByName("combase.dll", "InternalCCSetDdeServerWindow")
Interceptor.attach(InternalCCSetDdeServerWindow, {onLeave: function (args) {send("InternalCCSetDdeServerWindow");}});

var InternalCMLSendReceive = Module.findExportByName("combase.dll", "InternalCMLSendReceive")
Interceptor.attach(InternalCMLSendReceive, {onLeave: function (args) {send("InternalCMLSendReceive");}});

var InternalCMLSendReceive2 = Module.findExportByName("combase.dll", "InternalCMLSendReceive2")
Interceptor.attach(InternalCMLSendReceive2, {onLeave: function (args) {send("InternalCMLSendReceive2");}});

var InternalCStdIdentityGetIProxyManager = Module.findExportByName("combase.dll", "InternalCStdIdentityGetIProxyManager")
Interceptor.attach(InternalCStdIdentityGetIProxyManager, {onLeave: function (args) {send("InternalCStdIdentityGetIProxyManager");}});

var InternalCStdIdentityGetInternalUnk = Module.findExportByName("combase.dll", "InternalCStdIdentityGetInternalUnk")
Interceptor.attach(InternalCStdIdentityGetInternalUnk, {onLeave: function (args) {send("InternalCStdIdentityGetInternalUnk");}});

var InternalCStdIdentityUpdateFlags = Module.findExportByName("combase.dll", "InternalCStdIdentityUpdateFlags")
Interceptor.attach(InternalCStdIdentityUpdateFlags, {onLeave: function (args) {send("InternalCStdIdentityUpdateFlags");}});

var InternalCallAsProxyExceptionFilter = Module.findExportByName("combase.dll", "InternalCallAsProxyExceptionFilter")
Interceptor.attach(InternalCallAsProxyExceptionFilter, {onLeave: function (args) {send("InternalCallAsProxyExceptionFilter");}});

var InternalCallFrameExceptionFilter = Module.findExportByName("combase.dll", "InternalCallFrameExceptionFilter")
Interceptor.attach(InternalCallFrameExceptionFilter, {onLeave: function (args) {send("InternalCallFrameExceptionFilter");}});

var InternalCallerIsAppContainer = Module.findExportByName("combase.dll", "InternalCallerIsAppContainer")
Interceptor.attach(InternalCallerIsAppContainer, {onLeave: function (args) {send("InternalCallerIsAppContainer");}});

var InternalCanMakeOutCall = Module.findExportByName("combase.dll", "InternalCanMakeOutCall")
Interceptor.attach(InternalCanMakeOutCall, {onLeave: function (args) {send("InternalCanMakeOutCall");}});

var InternalCanMakeOutCall2 = Module.findExportByName("combase.dll", "InternalCanMakeOutCall2")
Interceptor.attach(InternalCanMakeOutCall2, {onLeave: function (args) {send("InternalCanMakeOutCall2");}});

var InternalCoIsSurrogateProcess = Module.findExportByName("combase.dll", "InternalCoIsSurrogateProcess")
Interceptor.attach(InternalCoIsSurrogateProcess, {onLeave: function (args) {send("InternalCoIsSurrogateProcess");}});

var InternalCoRegisterDisconnectCallback = Module.findExportByName("combase.dll", "InternalCoRegisterDisconnectCallback")
Interceptor.attach(InternalCoRegisterDisconnectCallback, {onLeave: function (args) {send("InternalCoRegisterDisconnectCallback");}});

var InternalCoRegisterSurrogatedObject = Module.findExportByName("combase.dll", "InternalCoRegisterSurrogatedObject")
Interceptor.attach(InternalCoRegisterSurrogatedObject, {onLeave: function (args) {send("InternalCoRegisterSurrogatedObject");}});

var InternalCoStdMarshalObject = Module.findExportByName("combase.dll", "InternalCoStdMarshalObject")
Interceptor.attach(InternalCoStdMarshalObject, {onLeave: function (args) {send("InternalCoStdMarshalObject");}});

var InternalCoUnregisterDisconnectCallback = Module.findExportByName("combase.dll", "InternalCoUnregisterDisconnectCallback")
Interceptor.attach(InternalCoUnregisterDisconnectCallback, {onLeave: function (args) {send("InternalCoUnregisterDisconnectCallback");}});

var InternalCompleteObjRef = Module.findExportByName("combase.dll", "InternalCompleteObjRef")
Interceptor.attach(InternalCompleteObjRef, {onLeave: function (args) {send("InternalCompleteObjRef");}});

var InternalCreateCAggId = Module.findExportByName("combase.dll", "InternalCreateCAggId")
Interceptor.attach(InternalCreateCAggId, {onLeave: function (args) {send("InternalCreateCAggId");}});

var InternalCreateIdentityHandler = Module.findExportByName("combase.dll", "InternalCreateIdentityHandler")
Interceptor.attach(InternalCreateIdentityHandler, {onLeave: function (args) {send("InternalCreateIdentityHandler");}});

var InternalDoATClassCreate = Module.findExportByName("combase.dll", "InternalDoATClassCreate")
Interceptor.attach(InternalDoATClassCreate, {onLeave: function (args) {send("InternalDoATClassCreate");}});

var InternalFillLocalOXIDInfo = Module.findExportByName("combase.dll", "InternalFillLocalOXIDInfo")
Interceptor.attach(InternalFillLocalOXIDInfo, {onLeave: function (args) {send("InternalFillLocalOXIDInfo");}});

var InternalFreeObjRef = Module.findExportByName("combase.dll", "InternalFreeObjRef")
Interceptor.attach(InternalFreeObjRef, {onLeave: function (args) {send("InternalFreeObjRef");}});

var InternalGetWindowPropInterface = Module.findExportByName("combase.dll", "InternalGetWindowPropInterface")
Interceptor.attach(InternalGetWindowPropInterface, {onLeave: function (args) {send("InternalGetWindowPropInterface");}});

var InternalGetWindowPropInterface2 = Module.findExportByName("combase.dll", "InternalGetWindowPropInterface2")
Interceptor.attach(InternalGetWindowPropInterface2, {onLeave: function (args) {send("InternalGetWindowPropInterface2");}});

var InternalIrotEnumRunning = Module.findExportByName("combase.dll", "InternalIrotEnumRunning")
Interceptor.attach(InternalIrotEnumRunning, {onLeave: function (args) {send("InternalIrotEnumRunning");}});

var InternalIrotEnumRunning2 = Module.findExportByName("combase.dll", "InternalIrotEnumRunning2")
Interceptor.attach(InternalIrotEnumRunning2, {onLeave: function (args) {send("InternalIrotEnumRunning2");}});

var InternalIrotGetObject = Module.findExportByName("combase.dll", "InternalIrotGetObject")
Interceptor.attach(InternalIrotGetObject, {onLeave: function (args) {send("InternalIrotGetObject");}});

var InternalIrotGetObject2 = Module.findExportByName("combase.dll", "InternalIrotGetObject2")
Interceptor.attach(InternalIrotGetObject2, {onLeave: function (args) {send("InternalIrotGetObject2");}});

var InternalIrotGetObject3 = Module.findExportByName("combase.dll", "InternalIrotGetObject3")
Interceptor.attach(InternalIrotGetObject3, {onLeave: function (args) {send("InternalIrotGetObject3");}});

var InternalIrotGetTimeOfLastChange = Module.findExportByName("combase.dll", "InternalIrotGetTimeOfLastChange")
Interceptor.attach(InternalIrotGetTimeOfLastChange, {onLeave: function (args) {send("InternalIrotGetTimeOfLastChange");}});

var InternalIrotGetTimeOfLastChange2 = Module.findExportByName("combase.dll", "InternalIrotGetTimeOfLastChange2")
Interceptor.attach(InternalIrotGetTimeOfLastChange2, {onLeave: function (args) {send("InternalIrotGetTimeOfLastChange2");}});

var InternalIrotIsRunning = Module.findExportByName("combase.dll", "InternalIrotIsRunning")
Interceptor.attach(InternalIrotIsRunning, {onLeave: function (args) {send("InternalIrotIsRunning");}});

var InternalIrotIsRunning2 = Module.findExportByName("combase.dll", "InternalIrotIsRunning2")
Interceptor.attach(InternalIrotIsRunning2, {onLeave: function (args) {send("InternalIrotIsRunning2");}});

var InternalIrotNoteChangeTime = Module.findExportByName("combase.dll", "InternalIrotNoteChangeTime")
Interceptor.attach(InternalIrotNoteChangeTime, {onLeave: function (args) {send("InternalIrotNoteChangeTime");}});

var InternalIrotRegister = Module.findExportByName("combase.dll", "InternalIrotRegister")
Interceptor.attach(InternalIrotRegister, {onLeave: function (args) {send("InternalIrotRegister");}});

var InternalIrotRevoke = Module.findExportByName("combase.dll", "InternalIrotRevoke")
Interceptor.attach(InternalIrotRevoke, {onLeave: function (args) {send("InternalIrotRevoke");}});

var InternalIsApartmentInitialized = Module.findExportByName("combase.dll", "InternalIsApartmentInitialized")
Interceptor.attach(InternalIsApartmentInitialized, {onLeave: function (args) {send("InternalIsApartmentInitialized");}});

var InternalIsProcessInitialized = Module.findExportByName("combase.dll", "InternalIsProcessInitialized")
Interceptor.attach(InternalIsProcessInitialized, {onLeave: function (args) {send("InternalIsProcessInitialized");}});

var InternalMarshalObjRef = Module.findExportByName("combase.dll", "InternalMarshalObjRef")
Interceptor.attach(InternalMarshalObjRef, {onLeave: function (args) {send("InternalMarshalObjRef");}});

var InternalNotifyDDStartOrStop = Module.findExportByName("combase.dll", "InternalNotifyDDStartOrStop")
Interceptor.attach(InternalNotifyDDStartOrStop, {onLeave: function (args) {send("InternalNotifyDDStartOrStop");}});

var InternalOle1ClassFromCLSID2 = Module.findExportByName("combase.dll", "InternalOle1ClassFromCLSID2")
Interceptor.attach(InternalOle1ClassFromCLSID2, {onLeave: function (args) {send("InternalOle1ClassFromCLSID2");}});

var InternalOleModalLoopBlockFn = Module.findExportByName("combase.dll", "InternalOleModalLoopBlockFn")
Interceptor.attach(InternalOleModalLoopBlockFn, {onLeave: function (args) {send("InternalOleModalLoopBlockFn");}});

var InternalRegOpenClassKey = Module.findExportByName("combase.dll", "InternalRegOpenClassKey")
Interceptor.attach(InternalRegOpenClassKey, {onLeave: function (args) {send("InternalRegOpenClassKey");}});

var InternalRegisterWindowPropInterface = Module.findExportByName("combase.dll", "InternalRegisterWindowPropInterface")
Interceptor.attach(InternalRegisterWindowPropInterface, {onLeave: function (args) {send("InternalRegisterWindowPropInterface");}});

var InternalRegisterWindowPropInterface2 = Module.findExportByName("combase.dll", "InternalRegisterWindowPropInterface2")
Interceptor.attach(InternalRegisterWindowPropInterface2, {onLeave: function (args) {send("InternalRegisterWindowPropInterface2");}});

var InternalReleaseMarshalObjRef = Module.findExportByName("combase.dll", "InternalReleaseMarshalObjRef")
Interceptor.attach(InternalReleaseMarshalObjRef, {onLeave: function (args) {send("InternalReleaseMarshalObjRef");}});

var InternalRevokeWindowPropInterface = Module.findExportByName("combase.dll", "InternalRevokeWindowPropInterface")
Interceptor.attach(InternalRevokeWindowPropInterface, {onLeave: function (args) {send("InternalRevokeWindowPropInterface");}});

var InternalSTAInvoke = Module.findExportByName("combase.dll", "InternalSTAInvoke")
Interceptor.attach(InternalSTAInvoke, {onLeave: function (args) {send("InternalSTAInvoke");}});

var InternalServerExceptionFilter = Module.findExportByName("combase.dll", "InternalServerExceptionFilter")
Interceptor.attach(InternalServerExceptionFilter, {onLeave: function (args) {send("InternalServerExceptionFilter");}});

var InternalSetAptCallCtrlOnTlsIfRequired = Module.findExportByName("combase.dll", "InternalSetAptCallCtrlOnTlsIfRequired")
Interceptor.attach(InternalSetAptCallCtrlOnTlsIfRequired, {onLeave: function (args) {send("InternalSetAptCallCtrlOnTlsIfRequired");}});

var InternalSetOleThunkWowPtr = Module.findExportByName("combase.dll", "InternalSetOleThunkWowPtr")
Interceptor.attach(InternalSetOleThunkWowPtr, {onLeave: function (args) {send("InternalSetOleThunkWowPtr");}});

var InternalStubInvoke = Module.findExportByName("combase.dll", "InternalStubInvoke")
Interceptor.attach(InternalStubInvoke, {onLeave: function (args) {send("InternalStubInvoke");}});

var InternalTlsAllocData = Module.findExportByName("combase.dll", "InternalTlsAllocData")
Interceptor.attach(InternalTlsAllocData, {onLeave: function (args) {send("InternalTlsAllocData");}});

var InternalUnmarshalObjRef = Module.findExportByName("combase.dll", "InternalUnmarshalObjRef")
Interceptor.attach(InternalUnmarshalObjRef, {onLeave: function (args) {send("InternalUnmarshalObjRef");}});

var IsErrorPropagationEnabled = Module.findExportByName("combase.dll", "IsErrorPropagationEnabled")
Interceptor.attach(IsErrorPropagationEnabled, {onLeave: function (args) {send("IsErrorPropagationEnabled");}});

var NdrCStdStubBuffer2_Release = Module.findExportByName("combase.dll", "NdrCStdStubBuffer2_Release")
Interceptor.attach(NdrCStdStubBuffer2_Release, {onLeave: function (args) {send("NdrCStdStubBuffer2_Release");}});

var NdrCStdStubBuffer_Release = Module.findExportByName("combase.dll", "NdrCStdStubBuffer_Release")
Interceptor.attach(NdrCStdStubBuffer_Release, {onLeave: function (args) {send("NdrCStdStubBuffer_Release");}});

var NdrExtStubInitialize = Module.findExportByName("combase.dll", "NdrExtStubInitialize")
Interceptor.attach(NdrExtStubInitialize, {onLeave: function (args) {send("NdrExtStubInitialize");}});

var NdrOleDllGetClassObject = Module.findExportByName("combase.dll", "NdrOleDllGetClassObject")
Interceptor.attach(NdrOleDllGetClassObject, {onLeave: function (args) {send("NdrOleDllGetClassObject");}});

var NdrOleInitializeExtension = Module.findExportByName("combase.dll", "NdrOleInitializeExtension")
Interceptor.attach(NdrOleInitializeExtension, {onLeave: function (args) {send("NdrOleInitializeExtension");}});

var NdrProxyForwardingFunction10 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction10")
Interceptor.attach(NdrProxyForwardingFunction10, {onLeave: function (args) {send("NdrProxyForwardingFunction10");}});

var NdrProxyForwardingFunction11 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction11")
Interceptor.attach(NdrProxyForwardingFunction11, {onLeave: function (args) {send("NdrProxyForwardingFunction11");}});

var NdrProxyForwardingFunction12 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction12")
Interceptor.attach(NdrProxyForwardingFunction12, {onLeave: function (args) {send("NdrProxyForwardingFunction12");}});

var NdrProxyForwardingFunction13 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction13")
Interceptor.attach(NdrProxyForwardingFunction13, {onLeave: function (args) {send("NdrProxyForwardingFunction13");}});

var NdrProxyForwardingFunction14 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction14")
Interceptor.attach(NdrProxyForwardingFunction14, {onLeave: function (args) {send("NdrProxyForwardingFunction14");}});

var NdrProxyForwardingFunction15 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction15")
Interceptor.attach(NdrProxyForwardingFunction15, {onLeave: function (args) {send("NdrProxyForwardingFunction15");}});

var NdrProxyForwardingFunction16 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction16")
Interceptor.attach(NdrProxyForwardingFunction16, {onLeave: function (args) {send("NdrProxyForwardingFunction16");}});

var NdrProxyForwardingFunction17 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction17")
Interceptor.attach(NdrProxyForwardingFunction17, {onLeave: function (args) {send("NdrProxyForwardingFunction17");}});

var NdrProxyForwardingFunction18 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction18")
Interceptor.attach(NdrProxyForwardingFunction18, {onLeave: function (args) {send("NdrProxyForwardingFunction18");}});

var NdrProxyForwardingFunction19 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction19")
Interceptor.attach(NdrProxyForwardingFunction19, {onLeave: function (args) {send("NdrProxyForwardingFunction19");}});

var NdrProxyForwardingFunction20 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction20")
Interceptor.attach(NdrProxyForwardingFunction20, {onLeave: function (args) {send("NdrProxyForwardingFunction20");}});

var NdrProxyForwardingFunction21 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction21")
Interceptor.attach(NdrProxyForwardingFunction21, {onLeave: function (args) {send("NdrProxyForwardingFunction21");}});

var NdrProxyForwardingFunction22 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction22")
Interceptor.attach(NdrProxyForwardingFunction22, {onLeave: function (args) {send("NdrProxyForwardingFunction22");}});

var NdrProxyForwardingFunction23 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction23")
Interceptor.attach(NdrProxyForwardingFunction23, {onLeave: function (args) {send("NdrProxyForwardingFunction23");}});

var NdrProxyForwardingFunction24 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction24")
Interceptor.attach(NdrProxyForwardingFunction24, {onLeave: function (args) {send("NdrProxyForwardingFunction24");}});

var NdrProxyForwardingFunction25 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction25")
Interceptor.attach(NdrProxyForwardingFunction25, {onLeave: function (args) {send("NdrProxyForwardingFunction25");}});

var NdrProxyForwardingFunction26 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction26")
Interceptor.attach(NdrProxyForwardingFunction26, {onLeave: function (args) {send("NdrProxyForwardingFunction26");}});

var NdrProxyForwardingFunction27 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction27")
Interceptor.attach(NdrProxyForwardingFunction27, {onLeave: function (args) {send("NdrProxyForwardingFunction27");}});

var NdrProxyForwardingFunction28 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction28")
Interceptor.attach(NdrProxyForwardingFunction28, {onLeave: function (args) {send("NdrProxyForwardingFunction28");}});

var NdrProxyForwardingFunction29 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction29")
Interceptor.attach(NdrProxyForwardingFunction29, {onLeave: function (args) {send("NdrProxyForwardingFunction29");}});

var NdrProxyForwardingFunction3 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction3")
Interceptor.attach(NdrProxyForwardingFunction3, {onLeave: function (args) {send("NdrProxyForwardingFunction3");}});

var NdrProxyForwardingFunction30 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction30")
Interceptor.attach(NdrProxyForwardingFunction30, {onLeave: function (args) {send("NdrProxyForwardingFunction30");}});

var NdrProxyForwardingFunction31 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction31")
Interceptor.attach(NdrProxyForwardingFunction31, {onLeave: function (args) {send("NdrProxyForwardingFunction31");}});

var NdrProxyForwardingFunction32 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction32")
Interceptor.attach(NdrProxyForwardingFunction32, {onLeave: function (args) {send("NdrProxyForwardingFunction32");}});

var NdrProxyForwardingFunction4 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction4")
Interceptor.attach(NdrProxyForwardingFunction4, {onLeave: function (args) {send("NdrProxyForwardingFunction4");}});

var NdrProxyForwardingFunction5 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction5")
Interceptor.attach(NdrProxyForwardingFunction5, {onLeave: function (args) {send("NdrProxyForwardingFunction5");}});

var NdrProxyForwardingFunction6 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction6")
Interceptor.attach(NdrProxyForwardingFunction6, {onLeave: function (args) {send("NdrProxyForwardingFunction6");}});

var NdrProxyForwardingFunction7 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction7")
Interceptor.attach(NdrProxyForwardingFunction7, {onLeave: function (args) {send("NdrProxyForwardingFunction7");}});

var NdrProxyForwardingFunction8 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction8")
Interceptor.attach(NdrProxyForwardingFunction8, {onLeave: function (args) {send("NdrProxyForwardingFunction8");}});

var NdrProxyForwardingFunction9 = Module.findExportByName("combase.dll", "NdrProxyForwardingFunction9")
Interceptor.attach(NdrProxyForwardingFunction9, {onLeave: function (args) {send("NdrProxyForwardingFunction9");}});

var NdrpFindInterface = Module.findExportByName("combase.dll", "NdrpFindInterface")
Interceptor.attach(NdrpFindInterface, {onLeave: function (args) {send("NdrpFindInterface");}});

var ObjectStublessClient10 = Module.findExportByName("combase.dll", "ObjectStublessClient10")
Interceptor.attach(ObjectStublessClient10, {onLeave: function (args) {send("ObjectStublessClient10");}});

var ObjectStublessClient11 = Module.findExportByName("combase.dll", "ObjectStublessClient11")
Interceptor.attach(ObjectStublessClient11, {onLeave: function (args) {send("ObjectStublessClient11");}});

var ObjectStublessClient12 = Module.findExportByName("combase.dll", "ObjectStublessClient12")
Interceptor.attach(ObjectStublessClient12, {onLeave: function (args) {send("ObjectStublessClient12");}});

var ObjectStublessClient13 = Module.findExportByName("combase.dll", "ObjectStublessClient13")
Interceptor.attach(ObjectStublessClient13, {onLeave: function (args) {send("ObjectStublessClient13");}});

var ObjectStublessClient14 = Module.findExportByName("combase.dll", "ObjectStublessClient14")
Interceptor.attach(ObjectStublessClient14, {onLeave: function (args) {send("ObjectStublessClient14");}});

var ObjectStublessClient15 = Module.findExportByName("combase.dll", "ObjectStublessClient15")
Interceptor.attach(ObjectStublessClient15, {onLeave: function (args) {send("ObjectStublessClient15");}});

var ObjectStublessClient16 = Module.findExportByName("combase.dll", "ObjectStublessClient16")
Interceptor.attach(ObjectStublessClient16, {onLeave: function (args) {send("ObjectStublessClient16");}});

var ObjectStublessClient17 = Module.findExportByName("combase.dll", "ObjectStublessClient17")
Interceptor.attach(ObjectStublessClient17, {onLeave: function (args) {send("ObjectStublessClient17");}});

var ObjectStublessClient18 = Module.findExportByName("combase.dll", "ObjectStublessClient18")
Interceptor.attach(ObjectStublessClient18, {onLeave: function (args) {send("ObjectStublessClient18");}});

var ObjectStublessClient19 = Module.findExportByName("combase.dll", "ObjectStublessClient19")
Interceptor.attach(ObjectStublessClient19, {onLeave: function (args) {send("ObjectStublessClient19");}});

var ObjectStublessClient20 = Module.findExportByName("combase.dll", "ObjectStublessClient20")
Interceptor.attach(ObjectStublessClient20, {onLeave: function (args) {send("ObjectStublessClient20");}});

var ObjectStublessClient21 = Module.findExportByName("combase.dll", "ObjectStublessClient21")
Interceptor.attach(ObjectStublessClient21, {onLeave: function (args) {send("ObjectStublessClient21");}});

var ObjectStublessClient22 = Module.findExportByName("combase.dll", "ObjectStublessClient22")
Interceptor.attach(ObjectStublessClient22, {onLeave: function (args) {send("ObjectStublessClient22");}});

var ObjectStublessClient23 = Module.findExportByName("combase.dll", "ObjectStublessClient23")
Interceptor.attach(ObjectStublessClient23, {onLeave: function (args) {send("ObjectStublessClient23");}});

var ObjectStublessClient24 = Module.findExportByName("combase.dll", "ObjectStublessClient24")
Interceptor.attach(ObjectStublessClient24, {onLeave: function (args) {send("ObjectStublessClient24");}});

var ObjectStublessClient25 = Module.findExportByName("combase.dll", "ObjectStublessClient25")
Interceptor.attach(ObjectStublessClient25, {onLeave: function (args) {send("ObjectStublessClient25");}});

var ObjectStublessClient26 = Module.findExportByName("combase.dll", "ObjectStublessClient26")
Interceptor.attach(ObjectStublessClient26, {onLeave: function (args) {send("ObjectStublessClient26");}});

var ObjectStublessClient27 = Module.findExportByName("combase.dll", "ObjectStublessClient27")
Interceptor.attach(ObjectStublessClient27, {onLeave: function (args) {send("ObjectStublessClient27");}});

var ObjectStublessClient28 = Module.findExportByName("combase.dll", "ObjectStublessClient28")
Interceptor.attach(ObjectStublessClient28, {onLeave: function (args) {send("ObjectStublessClient28");}});

var ObjectStublessClient29 = Module.findExportByName("combase.dll", "ObjectStublessClient29")
Interceptor.attach(ObjectStublessClient29, {onLeave: function (args) {send("ObjectStublessClient29");}});

var ObjectStublessClient3 = Module.findExportByName("combase.dll", "ObjectStublessClient3")
Interceptor.attach(ObjectStublessClient3, {onLeave: function (args) {send("ObjectStublessClient3");}});

var ObjectStublessClient30 = Module.findExportByName("combase.dll", "ObjectStublessClient30")
Interceptor.attach(ObjectStublessClient30, {onLeave: function (args) {send("ObjectStublessClient30");}});

var ObjectStublessClient31 = Module.findExportByName("combase.dll", "ObjectStublessClient31")
Interceptor.attach(ObjectStublessClient31, {onLeave: function (args) {send("ObjectStublessClient31");}});

var ObjectStublessClient32 = Module.findExportByName("combase.dll", "ObjectStublessClient32")
Interceptor.attach(ObjectStublessClient32, {onLeave: function (args) {send("ObjectStublessClient32");}});

var ObjectStublessClient4 = Module.findExportByName("combase.dll", "ObjectStublessClient4")
Interceptor.attach(ObjectStublessClient4, {onLeave: function (args) {send("ObjectStublessClient4");}});

var ObjectStublessClient5 = Module.findExportByName("combase.dll", "ObjectStublessClient5")
Interceptor.attach(ObjectStublessClient5, {onLeave: function (args) {send("ObjectStublessClient5");}});

var ObjectStublessClient6 = Module.findExportByName("combase.dll", "ObjectStublessClient6")
Interceptor.attach(ObjectStublessClient6, {onLeave: function (args) {send("ObjectStublessClient6");}});

var ObjectStublessClient7 = Module.findExportByName("combase.dll", "ObjectStublessClient7")
Interceptor.attach(ObjectStublessClient7, {onLeave: function (args) {send("ObjectStublessClient7");}});

var ObjectStublessClient8 = Module.findExportByName("combase.dll", "ObjectStublessClient8")
Interceptor.attach(ObjectStublessClient8, {onLeave: function (args) {send("ObjectStublessClient8");}});

var ObjectStublessClient9 = Module.findExportByName("combase.dll", "ObjectStublessClient9")
Interceptor.attach(ObjectStublessClient9, {onLeave: function (args) {send("ObjectStublessClient9");}});

var ProgIDFromCLSID = Module.findExportByName("combase.dll", "ProgIDFromCLSID")
Interceptor.attach(ProgIDFromCLSID, {onLeave: function (args) {send("ProgIDFromCLSID");}});

var PropVariantClear = Module.findExportByName("combase.dll", "PropVariantClear")
Interceptor.attach(PropVariantClear, {onLeave: function (args) {send("PropVariantClear");}});

var PropVariantCopy = Module.findExportByName("combase.dll", "PropVariantCopy")
Interceptor.attach(PropVariantCopy, {onLeave: function (args) {send("PropVariantCopy");}});

var ReleaseFuncDescs = Module.findExportByName("combase.dll", "ReleaseFuncDescs")
Interceptor.attach(ReleaseFuncDescs, {onLeave: function (args) {send("ReleaseFuncDescs");}});

var RoActivateInstance = Module.findExportByName("combase.dll", "RoActivateInstance")
Interceptor.attach(RoActivateInstance, {onLeave: function (args) {send("RoActivateInstance");}});

var RoCaptureErrorContext = Module.findExportByName("combase.dll", "RoCaptureErrorContext")
Interceptor.attach(RoCaptureErrorContext, {onLeave: function (args) {send("RoCaptureErrorContext");}});

var RoClearError = Module.findExportByName("combase.dll", "RoClearError")
Interceptor.attach(RoClearError, {onLeave: function (args) {send("RoClearError");}});

var RoFailFastWithErrorContext = Module.findExportByName("combase.dll", "RoFailFastWithErrorContext")
Interceptor.attach(RoFailFastWithErrorContext, {onLeave: function (args) {send("RoFailFastWithErrorContext");}});

var RoFailFastWithErrorContextInternal = Module.findExportByName("combase.dll", "RoFailFastWithErrorContextInternal")
Interceptor.attach(RoFailFastWithErrorContextInternal, {onLeave: function (args) {send("RoFailFastWithErrorContextInternal");}});

var RoFailFastWithErrorContextInternal2 = Module.findExportByName("combase.dll", "RoFailFastWithErrorContextInternal2")
Interceptor.attach(RoFailFastWithErrorContextInternal2, {onLeave: function (args) {send("RoFailFastWithErrorContextInternal2");}});

var RoFreeParameterizedTypeExtra = Module.findExportByName("combase.dll", "RoFreeParameterizedTypeExtra")
Interceptor.attach(RoFreeParameterizedTypeExtra, {onLeave: function (args) {send("RoFreeParameterizedTypeExtra");}});

var RoGetActivatableClassRegistration = Module.findExportByName("combase.dll", "RoGetActivatableClassRegistration")
Interceptor.attach(RoGetActivatableClassRegistration, {onLeave: function (args) {send("RoGetActivatableClassRegistration");}});

var RoGetActivationFactory = Module.findExportByName("combase.dll", "RoGetActivationFactory")
Interceptor.attach(RoGetActivationFactory, {onLeave: function (args) {send("RoGetActivationFactory");}});

var RoGetAgileReference = Module.findExportByName("combase.dll", "RoGetAgileReference")
Interceptor.attach(RoGetAgileReference, {onLeave: function (args) {send("RoGetAgileReference");}});

var RoGetApartmentIdentifier = Module.findExportByName("combase.dll", "RoGetApartmentIdentifier")
Interceptor.attach(RoGetApartmentIdentifier, {onLeave: function (args) {send("RoGetApartmentIdentifier");}});

var RoGetErrorReportingFlags = Module.findExportByName("combase.dll", "RoGetErrorReportingFlags")
Interceptor.attach(RoGetErrorReportingFlags, {onLeave: function (args) {send("RoGetErrorReportingFlags");}});

var RoGetMatchingRestrictedErrorInfo = Module.findExportByName("combase.dll", "RoGetMatchingRestrictedErrorInfo")
Interceptor.attach(RoGetMatchingRestrictedErrorInfo, {onLeave: function (args) {send("RoGetMatchingRestrictedErrorInfo");}});

var RoGetParameterizedTypeInstanceIID = Module.findExportByName("combase.dll", "RoGetParameterizedTypeInstanceIID")
Interceptor.attach(RoGetParameterizedTypeInstanceIID, {onLeave: function (args) {send("RoGetParameterizedTypeInstanceIID");}});

var RoGetServerActivatableClasses = Module.findExportByName("combase.dll", "RoGetServerActivatableClasses")
Interceptor.attach(RoGetServerActivatableClasses, {onLeave: function (args) {send("RoGetServerActivatableClasses");}});

var RoInitialize = Module.findExportByName("combase.dll", "RoInitialize")
Interceptor.attach(RoInitialize, {onLeave: function (args) {send("RoInitialize");}});

var RoInspectCapturedStackBackTrace = Module.findExportByName("combase.dll", "RoInspectCapturedStackBackTrace")
Interceptor.attach(RoInspectCapturedStackBackTrace, {onLeave: function (args) {send("RoInspectCapturedStackBackTrace");}});

var RoInspectThreadErrorInfo = Module.findExportByName("combase.dll", "RoInspectThreadErrorInfo")
Interceptor.attach(RoInspectThreadErrorInfo, {onLeave: function (args) {send("RoInspectThreadErrorInfo");}});

var RoOriginateError = Module.findExportByName("combase.dll", "RoOriginateError")
Interceptor.attach(RoOriginateError, {onLeave: function (args) {send("RoOriginateError");}});

var RoOriginateErrorW = Module.findExportByName("combase.dll", "RoOriginateErrorW")
Interceptor.attach(RoOriginateErrorW, {onLeave: function (args) {send("RoOriginateErrorW");}});

var RoOriginateLanguageException = Module.findExportByName("combase.dll", "RoOriginateLanguageException")
Interceptor.attach(RoOriginateLanguageException, {onLeave: function (args) {send("RoOriginateLanguageException");}});

var RoParameterizedTypeExtraGetTypeSignature = Module.findExportByName("combase.dll", "RoParameterizedTypeExtraGetTypeSignature")
Interceptor.attach(RoParameterizedTypeExtraGetTypeSignature, {onLeave: function (args) {send("RoParameterizedTypeExtraGetTypeSignature");}});

var RoRegisterActivationFactories = Module.findExportByName("combase.dll", "RoRegisterActivationFactories")
Interceptor.attach(RoRegisterActivationFactories, {onLeave: function (args) {send("RoRegisterActivationFactories");}});

var RoRegisterForApartmentShutdown = Module.findExportByName("combase.dll", "RoRegisterForApartmentShutdown")
Interceptor.attach(RoRegisterForApartmentShutdown, {onLeave: function (args) {send("RoRegisterForApartmentShutdown");}});

var RoReportCapabilityCheckFailure = Module.findExportByName("combase.dll", "RoReportCapabilityCheckFailure")
Interceptor.attach(RoReportCapabilityCheckFailure, {onLeave: function (args) {send("RoReportCapabilityCheckFailure");}});

var RoReportFailedDelegate = Module.findExportByName("combase.dll", "RoReportFailedDelegate")
Interceptor.attach(RoReportFailedDelegate, {onLeave: function (args) {send("RoReportFailedDelegate");}});

var RoReportUnhandledError = Module.findExportByName("combase.dll", "RoReportUnhandledError")
Interceptor.attach(RoReportUnhandledError, {onLeave: function (args) {send("RoReportUnhandledError");}});

var RoResolveRestrictedErrorInfoReference = Module.findExportByName("combase.dll", "RoResolveRestrictedErrorInfoReference")
Interceptor.attach(RoResolveRestrictedErrorInfoReference, {onLeave: function (args) {send("RoResolveRestrictedErrorInfoReference");}});

var RoRevokeActivationFactories = Module.findExportByName("combase.dll", "RoRevokeActivationFactories")
Interceptor.attach(RoRevokeActivationFactories, {onLeave: function (args) {send("RoRevokeActivationFactories");}});

var RoSetErrorReportingFlags = Module.findExportByName("combase.dll", "RoSetErrorReportingFlags")
Interceptor.attach(RoSetErrorReportingFlags, {onLeave: function (args) {send("RoSetErrorReportingFlags");}});

var RoTransformError = Module.findExportByName("combase.dll", "RoTransformError")
Interceptor.attach(RoTransformError, {onLeave: function (args) {send("RoTransformError");}});

var RoTransformErrorW = Module.findExportByName("combase.dll", "RoTransformErrorW")
Interceptor.attach(RoTransformErrorW, {onLeave: function (args) {send("RoTransformErrorW");}});

var RoUninitialize = Module.findExportByName("combase.dll", "RoUninitialize")
Interceptor.attach(RoUninitialize, {onLeave: function (args) {send("RoUninitialize");}});

var RoUnregisterForApartmentShutdown = Module.findExportByName("combase.dll", "RoUnregisterForApartmentShutdown")
Interceptor.attach(RoUnregisterForApartmentShutdown, {onLeave: function (args) {send("RoUnregisterForApartmentShutdown");}});

var SetCleanupFlag = Module.findExportByName("combase.dll", "SetCleanupFlag")
Interceptor.attach(SetCleanupFlag, {onLeave: function (args) {send("SetCleanupFlag");}});

var SetErrorInfo = Module.findExportByName("combase.dll", "SetErrorInfo")
Interceptor.attach(SetErrorInfo, {onLeave: function (args) {send("SetErrorInfo");}});

var SetRestrictedErrorInfo = Module.findExportByName("combase.dll", "SetRestrictedErrorInfo")
Interceptor.attach(SetRestrictedErrorInfo, {onLeave: function (args) {send("SetRestrictedErrorInfo");}});

var StringFromCLSID = Module.findExportByName("combase.dll", "StringFromCLSID")
Interceptor.attach(StringFromCLSID, {onLeave: function (args) {send("StringFromCLSID");}});

var StringFromGUID2 = Module.findExportByName("combase.dll", "StringFromGUID2")
Interceptor.attach(StringFromGUID2, {onLeave: function (args) {send("StringFromGUID2");}});

var StringFromIID = Module.findExportByName("combase.dll", "StringFromIID")
Interceptor.attach(StringFromIID, {onLeave: function (args) {send("StringFromIID");}});

var UpdateDCOMSettings = Module.findExportByName("combase.dll", "UpdateDCOMSettings")
Interceptor.attach(UpdateDCOMSettings, {onLeave: function (args) {send("UpdateDCOMSettings");}});

var UpdateProcessTracing = Module.findExportByName("combase.dll", "UpdateProcessTracing")
Interceptor.attach(UpdateProcessTracing, {onLeave: function (args) {send("UpdateProcessTracing");}});

var WdtpInterfacePointer_UserFree = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserFree")
Interceptor.attach(WdtpInterfacePointer_UserFree, {onLeave: function (args) {send("WdtpInterfacePointer_UserFree");}});

var WdtpInterfacePointer_UserFree64 = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserFree64")
Interceptor.attach(WdtpInterfacePointer_UserFree64, {onLeave: function (args) {send("WdtpInterfacePointer_UserFree64");}});

var WdtpInterfacePointer_UserMarshal = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserMarshal")
Interceptor.attach(WdtpInterfacePointer_UserMarshal, {onLeave: function (args) {send("WdtpInterfacePointer_UserMarshal");}});

var WdtpInterfacePointer_UserMarshal64 = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserMarshal64")
Interceptor.attach(WdtpInterfacePointer_UserMarshal64, {onLeave: function (args) {send("WdtpInterfacePointer_UserMarshal64");}});

var WdtpInterfacePointer_UserSize = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserSize")
Interceptor.attach(WdtpInterfacePointer_UserSize, {onLeave: function (args) {send("WdtpInterfacePointer_UserSize");}});

var WdtpInterfacePointer_UserSize64 = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserSize64")
Interceptor.attach(WdtpInterfacePointer_UserSize64, {onLeave: function (args) {send("WdtpInterfacePointer_UserSize64");}});

var WdtpInterfacePointer_UserUnmarshal = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserUnmarshal")
Interceptor.attach(WdtpInterfacePointer_UserUnmarshal, {onLeave: function (args) {send("WdtpInterfacePointer_UserUnmarshal");}});

var WdtpInterfacePointer_UserUnmarshal64 = Module.findExportByName("combase.dll", "WdtpInterfacePointer_UserUnmarshal64")
Interceptor.attach(WdtpInterfacePointer_UserUnmarshal64, {onLeave: function (args) {send("WdtpInterfacePointer_UserUnmarshal64");}});

var WindowsCompareStringOrdinal = Module.findExportByName("combase.dll", "WindowsCompareStringOrdinal")
Interceptor.attach(WindowsCompareStringOrdinal, {onLeave: function (args) {send("WindowsCompareStringOrdinal");}});

var WindowsConcatString = Module.findExportByName("combase.dll", "WindowsConcatString")
Interceptor.attach(WindowsConcatString, {onLeave: function (args) {send("WindowsConcatString");}});

var WindowsCreateString = Module.findExportByName("combase.dll", "WindowsCreateString")
Interceptor.attach(WindowsCreateString, {onLeave: function (args) {send("WindowsCreateString");}});

var WindowsCreateStringReference = Module.findExportByName("combase.dll", "WindowsCreateStringReference")
Interceptor.attach(WindowsCreateStringReference, {onLeave: function (args) {send("WindowsCreateStringReference");}});

var WindowsDeleteString = Module.findExportByName("combase.dll", "WindowsDeleteString")
Interceptor.attach(WindowsDeleteString, {onLeave: function (args) {send("WindowsDeleteString");}});

var WindowsDeleteStringBuffer = Module.findExportByName("combase.dll", "WindowsDeleteStringBuffer")
Interceptor.attach(WindowsDeleteStringBuffer, {onLeave: function (args) {send("WindowsDeleteStringBuffer");}});

var WindowsDuplicateString = Module.findExportByName("combase.dll", "WindowsDuplicateString")
Interceptor.attach(WindowsDuplicateString, {onLeave: function (args) {send("WindowsDuplicateString");}});

var WindowsGetStringLen = Module.findExportByName("combase.dll", "WindowsGetStringLen")
Interceptor.attach(WindowsGetStringLen, {onLeave: function (args) {send("WindowsGetStringLen");}});

var WindowsGetStringRawBuffer = Module.findExportByName("combase.dll", "WindowsGetStringRawBuffer")
Interceptor.attach(WindowsGetStringRawBuffer, {onLeave: function (args) {send("WindowsGetStringRawBuffer");}});

var WindowsInspectString = Module.findExportByName("combase.dll", "WindowsInspectString")
Interceptor.attach(WindowsInspectString, {onLeave: function (args) {send("WindowsInspectString");}});

var WindowsInspectString2 = Module.findExportByName("combase.dll", "WindowsInspectString2")
Interceptor.attach(WindowsInspectString2, {onLeave: function (args) {send("WindowsInspectString2");}});

var WindowsIsStringEmpty = Module.findExportByName("combase.dll", "WindowsIsStringEmpty")
Interceptor.attach(WindowsIsStringEmpty, {onLeave: function (args) {send("WindowsIsStringEmpty");}});

var WindowsPreallocateStringBuffer = Module.findExportByName("combase.dll", "WindowsPreallocateStringBuffer")
Interceptor.attach(WindowsPreallocateStringBuffer, {onLeave: function (args) {send("WindowsPreallocateStringBuffer");}});

var WindowsPromoteStringBuffer = Module.findExportByName("combase.dll", "WindowsPromoteStringBuffer")
Interceptor.attach(WindowsPromoteStringBuffer, {onLeave: function (args) {send("WindowsPromoteStringBuffer");}});

var WindowsReplaceString = Module.findExportByName("combase.dll", "WindowsReplaceString")
Interceptor.attach(WindowsReplaceString, {onLeave: function (args) {send("WindowsReplaceString");}});

var WindowsStringHasEmbeddedNull = Module.findExportByName("combase.dll", "WindowsStringHasEmbeddedNull")
Interceptor.attach(WindowsStringHasEmbeddedNull, {onLeave: function (args) {send("WindowsStringHasEmbeddedNull");}});

var WindowsSubstring = Module.findExportByName("combase.dll", "WindowsSubstring")
Interceptor.attach(WindowsSubstring, {onLeave: function (args) {send("WindowsSubstring");}});

var WindowsSubstringWithSpecifiedLength = Module.findExportByName("combase.dll", "WindowsSubstringWithSpecifiedLength")
Interceptor.attach(WindowsSubstringWithSpecifiedLength, {onLeave: function (args) {send("WindowsSubstringWithSpecifiedLength");}});

var WindowsTrimStringEnd = Module.findExportByName("combase.dll", "WindowsTrimStringEnd")
Interceptor.attach(WindowsTrimStringEnd, {onLeave: function (args) {send("WindowsTrimStringEnd");}});

var WindowsTrimStringStart = Module.findExportByName("combase.dll", "WindowsTrimStringStart")
Interceptor.attach(WindowsTrimStringStart, {onLeave: function (args) {send("WindowsTrimStringStart");}});

