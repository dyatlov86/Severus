var MFCheckProcessCapabilities = Module.findExportByName("mfsensorgroup.dll", "MFCheckProcessCapabilities")
Interceptor.attach(MFCheckProcessCapabilities, {onLeave: function (args) {send("MFCheckProcessCapabilities");}});

var MFCleanupVirtualCameraEntries = Module.findExportByName("mfsensorgroup.dll", "MFCleanupVirtualCameraEntries")
Interceptor.attach(MFCleanupVirtualCameraEntries, {onLeave: function (args) {send("MFCleanupVirtualCameraEntries");}});

var MFCloneSensorProfile = Module.findExportByName("mfsensorgroup.dll", "MFCloneSensorProfile")
Interceptor.attach(MFCloneSensorProfile, {onLeave: function (args) {send("MFCloneSensorProfile");}});

var MFCreateCameraControlMonitor = Module.findExportByName("mfsensorgroup.dll", "MFCreateCameraControlMonitor")
Interceptor.attach(MFCreateCameraControlMonitor, {onLeave: function (args) {send("MFCreateCameraControlMonitor");}});

var MFCreateCameraOcclusionStateMonitor = Module.findExportByName("mfsensorgroup.dll", "MFCreateCameraOcclusionStateMonitor")
Interceptor.attach(MFCreateCameraOcclusionStateMonitor, {onLeave: function (args) {send("MFCreateCameraOcclusionStateMonitor");}});

var MFCreateConfigurationEntry = Module.findExportByName("mfsensorgroup.dll", "MFCreateConfigurationEntry")
Interceptor.attach(MFCreateConfigurationEntry, {onLeave: function (args) {send("MFCreateConfigurationEntry");}});

var MFCreatePackageFamilyNameTag = Module.findExportByName("mfsensorgroup.dll", "MFCreatePackageFamilyNameTag")
Interceptor.attach(MFCreatePackageFamilyNameTag, {onLeave: function (args) {send("MFCreatePackageFamilyNameTag");}});

var MFCreatePassthroughTranslatedMediaType = Module.findExportByName("mfsensorgroup.dll", "MFCreatePassthroughTranslatedMediaType")
Interceptor.attach(MFCreatePassthroughTranslatedMediaType, {onLeave: function (args) {send("MFCreatePassthroughTranslatedMediaType");}});

var MFCreateRelativePanelWatcher = Module.findExportByName("mfsensorgroup.dll", "MFCreateRelativePanelWatcher")
Interceptor.attach(MFCreateRelativePanelWatcher, {onLeave: function (args) {send("MFCreateRelativePanelWatcher");}});

var MFCreateSensorActivityMonitor = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorActivityMonitor")
Interceptor.attach(MFCreateSensorActivityMonitor, {onLeave: function (args) {send("MFCreateSensorActivityMonitor");}});

var MFCreateSensorDeviceBlobByObject = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorDeviceBlobByObject")
Interceptor.attach(MFCreateSensorDeviceBlobByObject, {onLeave: function (args) {send("MFCreateSensorDeviceBlobByObject");}});

var MFCreateSensorGroup = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorGroup")
Interceptor.attach(MFCreateSensorGroup, {onLeave: function (args) {send("MFCreateSensorGroup");}});

var MFCreateSensorGroupById = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorGroupById")
Interceptor.attach(MFCreateSensorGroupById, {onLeave: function (args) {send("MFCreateSensorGroupById");}});

var MFCreateSensorGroupCollection = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorGroupCollection")
Interceptor.attach(MFCreateSensorGroupCollection, {onLeave: function (args) {send("MFCreateSensorGroupCollection");}});

var MFCreateSensorGroupIdManager = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorGroupIdManager")
Interceptor.attach(MFCreateSensorGroupIdManager, {onLeave: function (args) {send("MFCreateSensorGroupIdManager");}});

var MFCreateSensorGroupWithOptions = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorGroupWithOptions")
Interceptor.attach(MFCreateSensorGroupWithOptions, {onLeave: function (args) {send("MFCreateSensorGroupWithOptions");}});

var MFCreateSensorProfile = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorProfile")
Interceptor.attach(MFCreateSensorProfile, {onLeave: function (args) {send("MFCreateSensorProfile");}});

var MFCreateSensorProfileCollection = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorProfileCollection")
Interceptor.attach(MFCreateSensorProfileCollection, {onLeave: function (args) {send("MFCreateSensorProfileCollection");}});

var MFCreateSensorProfileWithFlags = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorProfileWithFlags")
Interceptor.attach(MFCreateSensorProfileWithFlags, {onLeave: function (args) {send("MFCreateSensorProfileWithFlags");}});

var MFCreateSensorStream = Module.findExportByName("mfsensorgroup.dll", "MFCreateSensorStream")
Interceptor.attach(MFCreateSensorStream, {onLeave: function (args) {send("MFCreateSensorStream");}});

var MFCreateTranslatedMediaType = Module.findExportByName("mfsensorgroup.dll", "MFCreateTranslatedMediaType")
Interceptor.attach(MFCreateTranslatedMediaType, {onLeave: function (args) {send("MFCreateTranslatedMediaType");}});

var MFCreateTranslatedMediaType2 = Module.findExportByName("mfsensorgroup.dll", "MFCreateTranslatedMediaType2")
Interceptor.attach(MFCreateTranslatedMediaType2, {onLeave: function (args) {send("MFCreateTranslatedMediaType2");}});

var MFCreateTranslatedMediaType3 = Module.findExportByName("mfsensorgroup.dll", "MFCreateTranslatedMediaType3")
Interceptor.attach(MFCreateTranslatedMediaType3, {onLeave: function (args) {send("MFCreateTranslatedMediaType3");}});

var MFCreateVirtualCamera = Module.findExportByName("mfsensorgroup.dll", "MFCreateVirtualCamera")
Interceptor.attach(MFCreateVirtualCamera, {onLeave: function (args) {send("MFCreateVirtualCamera");}});

var MFDeleteSensorGroupById = Module.findExportByName("mfsensorgroup.dll", "MFDeleteSensorGroupById")
Interceptor.attach(MFDeleteSensorGroupById, {onLeave: function (args) {send("MFDeleteSensorGroupById");}});

var MFGenerateAndPublishCameraTelemetry = Module.findExportByName("mfsensorgroup.dll", "MFGenerateAndPublishCameraTelemetry")
Interceptor.attach(MFGenerateAndPublishCameraTelemetry, {onLeave: function (args) {send("MFGenerateAndPublishCameraTelemetry");}});

var MFGetDeviceFromFSUniqueId = Module.findExportByName("mfsensorgroup.dll", "MFGetDeviceFromFSUniqueId")
Interceptor.attach(MFGetDeviceFromFSUniqueId, {onLeave: function (args) {send("MFGetDeviceFromFSUniqueId");}});

var MFGetDeviceFromSGHash = Module.findExportByName("mfsensorgroup.dll", "MFGetDeviceFromSGHash")
Interceptor.attach(MFGetDeviceFromSGHash, {onLeave: function (args) {send("MFGetDeviceFromSGHash");}});

var MFGetSGCH = Module.findExportByName("mfsensorgroup.dll", "MFGetSGCH")
Interceptor.attach(MFGetSGCH, {onLeave: function (args) {send("MFGetSGCH");}});

var MFGetSensorDeviceProperty = Module.findExportByName("mfsensorgroup.dll", "MFGetSensorDeviceProperty")
Interceptor.attach(MFGetSensorDeviceProperty, {onLeave: function (args) {send("MFGetSensorDeviceProperty");}});

var MFGetSensorDeviceRegistryProperty = Module.findExportByName("mfsensorgroup.dll", "MFGetSensorDeviceRegistryProperty")
Interceptor.attach(MFGetSensorDeviceRegistryProperty, {onLeave: function (args) {send("MFGetSensorDeviceRegistryProperty");}});

var MFGetSensorGroupAttributesFromId = Module.findExportByName("mfsensorgroup.dll", "MFGetSensorGroupAttributesFromId")
Interceptor.attach(MFGetSensorGroupAttributesFromId, {onLeave: function (args) {send("MFGetSensorGroupAttributesFromId");}});

var MFGetSensorGroupPropertyName = Module.findExportByName("mfsensorgroup.dll", "MFGetSensorGroupPropertyName")
Interceptor.attach(MFGetSensorGroupPropertyName, {onLeave: function (args) {send("MFGetSensorGroupPropertyName");}});

var MFGetSensorOrientation = Module.findExportByName("mfsensorgroup.dll", "MFGetSensorOrientation")
Interceptor.attach(MFGetSensorOrientation, {onLeave: function (args) {send("MFGetSensorOrientation");}});

var MFInitializeSensorGroupStore = Module.findExportByName("mfsensorgroup.dll", "MFInitializeSensorGroupStore")
Interceptor.attach(MFInitializeSensorGroupStore, {onLeave: function (args) {send("MFInitializeSensorGroupStore");}});

var MFIsSensorGroupName = Module.findExportByName("mfsensorgroup.dll", "MFIsSensorGroupName")
Interceptor.attach(MFIsSensorGroupName, {onLeave: function (args) {send("MFIsSensorGroupName");}});

var MFIsStreamAvailableToAppPackage = Module.findExportByName("mfsensorgroup.dll", "MFIsStreamAvailableToAppPackage")
Interceptor.attach(MFIsStreamAvailableToAppPackage, {onLeave: function (args) {send("MFIsStreamAvailableToAppPackage");}});

var MFIsVirtualCameraTypeSupported = Module.findExportByName("mfsensorgroup.dll", "MFIsVirtualCameraTypeSupported")
Interceptor.attach(MFIsVirtualCameraTypeSupported, {onLeave: function (args) {send("MFIsVirtualCameraTypeSupported");}});

var MFLoadSensorGroupFromRegistry = Module.findExportByName("mfsensorgroup.dll", "MFLoadSensorGroupFromRegistry")
Interceptor.attach(MFLoadSensorGroupFromRegistry, {onLeave: function (args) {send("MFLoadSensorGroupFromRegistry");}});

var MFLoadSensorProfiles = Module.findExportByName("mfsensorgroup.dll", "MFLoadSensorProfiles")
Interceptor.attach(MFLoadSensorProfiles, {onLeave: function (args) {send("MFLoadSensorProfiles");}});

var MFPublishSensorProfiles = Module.findExportByName("mfsensorgroup.dll", "MFPublishSensorProfiles")
Interceptor.attach(MFPublishSensorProfiles, {onLeave: function (args) {send("MFPublishSensorProfiles");}});

var MFSensorProfileParseFilterSetString = Module.findExportByName("mfsensorgroup.dll", "MFSensorProfileParseFilterSetString")
Interceptor.attach(MFSensorProfileParseFilterSetString, {onLeave: function (args) {send("MFSensorProfileParseFilterSetString");}});

var MFValidateSensorProfile = Module.findExportByName("mfsensorgroup.dll", "MFValidateSensorProfile")
Interceptor.attach(MFValidateSensorProfile, {onLeave: function (args) {send("MFValidateSensorProfile");}});

var MFWriteSensorGroupDataToRegistry = Module.findExportByName("mfsensorgroup.dll", "MFWriteSensorGroupDataToRegistry")
Interceptor.attach(MFWriteSensorGroupDataToRegistry, {onLeave: function (args) {send("MFWriteSensorGroupDataToRegistry");}});

