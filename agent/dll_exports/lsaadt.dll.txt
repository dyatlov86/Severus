var LsapAddClaimsToAdtParamsAt = Module.findExportByName("lsaadt.dll", "LsapAddClaimsToAdtParamsAt")
Interceptor.attach(LsapAddClaimsToAdtParamsAt, {onLeave: function (args) {send("LsapAddClaimsToAdtParamsAt");}});

var LsapAdtApplyGlobalSaclUpdate = Module.findExportByName("lsaadt.dll", "LsapAdtApplyGlobalSaclUpdate")
Interceptor.attach(LsapAdtApplyGlobalSaclUpdate, {onLeave: function (args) {send("LsapAdtApplyGlobalSaclUpdate");}});

var LsapAdtApplyOldPublicPolicyOnStorage = Module.findExportByName("lsaadt.dll", "LsapAdtApplyOldPublicPolicyOnStorage")
Interceptor.attach(LsapAdtApplyOldPublicPolicyOnStorage, {onLeave: function (args) {send("LsapAdtApplyOldPublicPolicyOnStorage");}});

var LsapAdtApplySystemPolicyUpdates = Module.findExportByName("lsaadt.dll", "LsapAdtApplySystemPolicyUpdates")
Interceptor.attach(LsapAdtApplySystemPolicyUpdates, {onLeave: function (args) {send("LsapAdtApplySystemPolicyUpdates");}});

var LsapAdtAuditCredentialsBackupRestore = Module.findExportByName("lsaadt.dll", "LsapAdtAuditCredentialsBackupRestore")
Interceptor.attach(LsapAdtAuditCredentialsBackupRestore, {onLeave: function (args) {send("LsapAdtAuditCredentialsBackupRestore");}});

var LsapAdtAuditCredentialsRead = Module.findExportByName("lsaadt.dll", "LsapAdtAuditCredentialsRead")
Interceptor.attach(LsapAdtAuditCredentialsRead, {onLeave: function (args) {send("LsapAdtAuditCredentialsRead");}});

var LsapAdtAuditGroupsInToken = Module.findExportByName("lsaadt.dll", "LsapAdtAuditGroupsInToken")
Interceptor.attach(LsapAdtAuditGroupsInToken, {onLeave: function (args) {send("LsapAdtAuditGroupsInToken");}});

var LsapAdtAuditLogoff = Module.findExportByName("lsaadt.dll", "LsapAdtAuditLogoff")
Interceptor.attach(LsapAdtAuditLogoff, {onLeave: function (args) {send("LsapAdtAuditLogoff");}});

var LsapAdtAuditLogon = Module.findExportByName("lsaadt.dll", "LsapAdtAuditLogon")
Interceptor.attach(LsapAdtAuditLogon, {onLeave: function (args) {send("LsapAdtAuditLogon");}});

var LsapAdtAuditLogonEx = Module.findExportByName("lsaadt.dll", "LsapAdtAuditLogonEx")
Interceptor.attach(LsapAdtAuditLogonEx, {onLeave: function (args) {send("LsapAdtAuditLogonEx");}});

var LsapAdtAuditLogonProcessRegistration = Module.findExportByName("lsaadt.dll", "LsapAdtAuditLogonProcessRegistration")
Interceptor.attach(LsapAdtAuditLogonProcessRegistration, {onLeave: function (args) {send("LsapAdtAuditLogonProcessRegistration");}});

var LsapAdtAuditPackageLoad = Module.findExportByName("lsaadt.dll", "LsapAdtAuditPackageLoad")
Interceptor.attach(LsapAdtAuditPackageLoad, {onLeave: function (args) {send("LsapAdtAuditPackageLoad");}});

var LsapAdtAuditPerUserTableCreation = Module.findExportByName("lsaadt.dll", "LsapAdtAuditPerUserTableCreation")
Interceptor.attach(LsapAdtAuditPerUserTableCreation, {onLeave: function (args) {send("LsapAdtAuditPerUserTableCreation");}});

var LsapAdtAuditSidFiltration = Module.findExportByName("lsaadt.dll", "LsapAdtAuditSidFiltration")
Interceptor.attach(LsapAdtAuditSidFiltration, {onLeave: function (args) {send("LsapAdtAuditSidFiltration");}});

var LsapAdtAuditSpecialPrivileges = Module.findExportByName("lsaadt.dll", "LsapAdtAuditSpecialPrivileges")
Interceptor.attach(LsapAdtAuditSpecialPrivileges, {onLeave: function (args) {send("LsapAdtAuditSpecialPrivileges");}});

var LsapAdtAuditingEnabledByLogonId = Module.findExportByName("lsaadt.dll", "LsapAdtAuditingEnabledByLogonId")
Interceptor.attach(LsapAdtAuditingEnabledByLogonId, {onLeave: function (args) {send("LsapAdtAuditingEnabledByLogonId");}});

var LsapAdtAuditingEnabledByPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtAuditingEnabledByPolicy")
Interceptor.attach(LsapAdtAuditingEnabledByPolicy, {onLeave: function (args) {send("LsapAdtAuditingEnabledByPolicy");}});

var LsapAdtAuditingEnabledBySid = Module.findExportByName("lsaadt.dll", "LsapAdtAuditingEnabledBySid")
Interceptor.attach(LsapAdtAuditingEnabledBySid, {onLeave: function (args) {send("LsapAdtAuditingEnabledBySid");}});

var LsapAdtAuditingEnabledBySubCategory = Module.findExportByName("lsaadt.dll", "LsapAdtAuditingEnabledBySubCategory")
Interceptor.attach(LsapAdtAuditingEnabledBySubCategory, {onLeave: function (args) {send("LsapAdtAuditingEnabledBySubCategory");}});

var LsapAdtAuditingEnabledHint = Module.findExportByName("lsaadt.dll", "LsapAdtAuditingEnabledHint")
Interceptor.attach(LsapAdtAuditingEnabledHint, {onLeave: function (args) {send("LsapAdtAuditingEnabledHint");}});

var LsapAdtAuditingEnabledHintByCategory = Module.findExportByName("lsaadt.dll", "LsapAdtAuditingEnabledHintByCategory")
Interceptor.attach(LsapAdtAuditingEnabledHintByCategory, {onLeave: function (args) {send("LsapAdtAuditingEnabledHintByCategory");}});

var LsapAdtConstructPolicyPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtConstructPolicyPerUserAuditing")
Interceptor.attach(LsapAdtConstructPolicyPerUserAuditing, {onLeave: function (args) {send("LsapAdtConstructPolicyPerUserAuditing");}});

var LsapAdtConstructTablePerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtConstructTablePerUserAuditing")
Interceptor.attach(LsapAdtConstructTablePerUserAuditing, {onLeave: function (args) {send("LsapAdtConstructTablePerUserAuditing");}});

var LsapAdtConvertAuditPolicyToCurrentFormat = Module.findExportByName("lsaadt.dll", "LsapAdtConvertAuditPolicyToCurrentFormat")
Interceptor.attach(LsapAdtConvertAuditPolicyToCurrentFormat, {onLeave: function (args) {send("LsapAdtConvertAuditPolicyToCurrentFormat");}});

var LsapAdtConvertSystemPolicyFromStorageToOldPublicFormat = Module.findExportByName("lsaadt.dll", "LsapAdtConvertSystemPolicyFromStorageToOldPublicFormat")
Interceptor.attach(LsapAdtConvertSystemPolicyFromStorageToOldPublicFormat, {onLeave: function (args) {send("LsapAdtConvertSystemPolicyFromStorageToOldPublicFormat");}});

var LsapAdtConvertTokenPolicyToStorageFormat = Module.findExportByName("lsaadt.dll", "LsapAdtConvertTokenPolicyToStorageFormat")
Interceptor.attach(LsapAdtConvertTokenPolicyToStorageFormat, {onLeave: function (args) {send("LsapAdtConvertTokenPolicyToStorageFormat");}});

var LsapAdtCreateDefaultPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtCreateDefaultPolicy")
Interceptor.attach(LsapAdtCreateDefaultPolicy, {onLeave: function (args) {send("LsapAdtCreateDefaultPolicy");}});

var LsapAdtCreateEmptyPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtCreateEmptyPolicy")
Interceptor.attach(LsapAdtCreateEmptyPolicy, {onLeave: function (args) {send("LsapAdtCreateEmptyPolicy");}});

var LsapAdtDecrementCountersPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtDecrementCountersPerUserAuditing")
Interceptor.attach(LsapAdtDecrementCountersPerUserAuditing, {onLeave: function (args) {send("LsapAdtDecrementCountersPerUserAuditing");}});

var LsapAdtDowngradeAuditPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtDowngradeAuditPolicy")
Interceptor.attach(LsapAdtDowngradeAuditPolicy, {onLeave: function (args) {send("LsapAdtDowngradeAuditPolicy");}});

var LsapAdtEnumeratePerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtEnumeratePerUserAuditing")
Interceptor.attach(LsapAdtEnumeratePerUserAuditing, {onLeave: function (args) {send("LsapAdtEnumeratePerUserAuditing");}});

var LsapAdtFilterAdminPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtFilterAdminPerUserAuditing")
Interceptor.attach(LsapAdtFilterAdminPerUserAuditing, {onLeave: function (args) {send("LsapAdtFilterAdminPerUserAuditing");}});

var LsapAdtFreeTablePerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtFreeTablePerUserAuditing")
Interceptor.attach(LsapAdtFreeTablePerUserAuditing, {onLeave: function (args) {send("LsapAdtFreeTablePerUserAuditing");}});

var LsapAdtGenerateDomainPolicyChangeAuditEvent = Module.findExportByName("lsaadt.dll", "LsapAdtGenerateDomainPolicyChangeAuditEvent")
Interceptor.attach(LsapAdtGenerateDomainPolicyChangeAuditEvent, {onLeave: function (args) {send("LsapAdtGenerateDomainPolicyChangeAuditEvent");}});

var LsapAdtGenerateLsaAuditEvent = Module.findExportByName("lsaadt.dll", "LsapAdtGenerateLsaAuditEvent")
Interceptor.attach(LsapAdtGenerateLsaAuditEvent, {onLeave: function (args) {send("LsapAdtGenerateLsaAuditEvent");}});

var LsapAdtGenerateLsaAuditEventWithClientSid = Module.findExportByName("lsaadt.dll", "LsapAdtGenerateLsaAuditEventWithClientSid")
Interceptor.attach(LsapAdtGenerateLsaAuditEventWithClientSid, {onLeave: function (args) {send("LsapAdtGenerateLsaAuditEventWithClientSid");}});

var LsapAdtGenerateLsaAuditSystemAccessChange = Module.findExportByName("lsaadt.dll", "LsapAdtGenerateLsaAuditSystemAccessChange")
Interceptor.attach(LsapAdtGenerateLsaAuditSystemAccessChange, {onLeave: function (args) {send("LsapAdtGenerateLsaAuditSystemAccessChange");}});

var LsapAdtGenerateObjectOperationAuditEvent = Module.findExportByName("lsaadt.dll", "LsapAdtGenerateObjectOperationAuditEvent")
Interceptor.attach(LsapAdtGenerateObjectOperationAuditEvent, {onLeave: function (args) {send("LsapAdtGenerateObjectOperationAuditEvent");}});

var LsapAdtGenerateSpecialGroupsLogonAudit = Module.findExportByName("lsaadt.dll", "LsapAdtGenerateSpecialGroupsLogonAudit")
Interceptor.attach(LsapAdtGenerateSpecialGroupsLogonAudit, {onLeave: function (args) {send("LsapAdtGenerateSpecialGroupsLogonAudit");}});

var LsapAdtInitGenericAudits = Module.findExportByName("lsaadt.dll", "LsapAdtInitGenericAudits")
Interceptor.attach(LsapAdtInitGenericAudits, {onLeave: function (args) {send("LsapAdtInitGenericAudits");}});

var LsapAdtInitParametersArray = Module.findExportByName("lsaadt.dll", "LsapAdtInitParametersArray")
Interceptor.attach(LsapAdtInitParametersArray, {onLeave: function (args) {send("LsapAdtInitParametersArray");}});

var LsapAdtInitParametersArrayWorker = Module.findExportByName("lsaadt.dll", "LsapAdtInitParametersArrayWorker")
Interceptor.attach(LsapAdtInitParametersArrayWorker, {onLeave: function (args) {send("LsapAdtInitParametersArrayWorker");}});

var LsapAdtInitialize = Module.findExportByName("lsaadt.dll", "LsapAdtInitialize")
Interceptor.attach(LsapAdtInitialize, {onLeave: function (args) {send("LsapAdtInitialize");}});

var LsapAdtInitializeCrashOnAuditFail = Module.findExportByName("lsaadt.dll", "LsapAdtInitializeCrashOnAuditFail")
Interceptor.attach(LsapAdtInitializeCrashOnAuditFail, {onLeave: function (args) {send("LsapAdtInitializeCrashOnAuditFail");}});

var LsapAdtInitializeExtensibleAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtInitializeExtensibleAuditing")
Interceptor.attach(LsapAdtInitializeExtensibleAuditing, {onLeave: function (args) {send("LsapAdtInitializeExtensibleAuditing");}});

var LsapAdtInitializePerUserAuditingAndSD = Module.findExportByName("lsaadt.dll", "LsapAdtInitializePerUserAuditingAndSD")
Interceptor.attach(LsapAdtInitializePerUserAuditingAndSD, {onLeave: function (args) {send("LsapAdtInitializePerUserAuditingAndSD");}});

var LsapAdtInitializeSpecialGroupsLogon = Module.findExportByName("lsaadt.dll", "LsapAdtInitializeSpecialGroupsLogon")
Interceptor.attach(LsapAdtInitializeSpecialGroupsLogon, {onLeave: function (args) {send("LsapAdtInitializeSpecialGroupsLogon");}});

var LsapAdtInitializeSpecializedProcessing = Module.findExportByName("lsaadt.dll", "LsapAdtInitializeSpecializedProcessing")
Interceptor.attach(LsapAdtInitializeSpecializedProcessing, {onLeave: function (args) {send("LsapAdtInitializeSpecializedProcessing");}});

var LsapAdtLoadPolicySecurityDescriptor = Module.findExportByName("lsaadt.dll", "LsapAdtLoadPolicySecurityDescriptor")
Interceptor.attach(LsapAdtLoadPolicySecurityDescriptor, {onLeave: function (args) {send("LsapAdtLoadPolicySecurityDescriptor");}});

var LsapAdtLoadProcessCreationParameters = Module.findExportByName("lsaadt.dll", "LsapAdtLoadProcessCreationParameters")
Interceptor.attach(LsapAdtLoadProcessCreationParameters, {onLeave: function (args) {send("LsapAdtLoadProcessCreationParameters");}});

var LsapAdtLoadSpecialGroups = Module.findExportByName("lsaadt.dll", "LsapAdtLoadSpecialGroups")
Interceptor.attach(LsapAdtLoadSpecialGroups, {onLeave: function (args) {send("LsapAdtLoadSpecialGroups");}});

var LsapAdtLogAuditFailureEvent = Module.findExportByName("lsaadt.dll", "LsapAdtLogAuditFailureEvent")
Interceptor.attach(LsapAdtLogAuditFailureEvent, {onLeave: function (args) {send("LsapAdtLogAuditFailureEvent");}});

var LsapAdtLogAuditFailureEventWithCount = Module.findExportByName("lsaadt.dll", "LsapAdtLogAuditFailureEventWithCount")
Interceptor.attach(LsapAdtLogAuditFailureEventWithCount, {onLeave: function (args) {send("LsapAdtLogAuditFailureEventWithCount");}});

var LsapAdtLogoffPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtLogoffPerUserAuditing")
Interceptor.attach(LsapAdtLogoffPerUserAuditing, {onLeave: function (args) {send("LsapAdtLogoffPerUserAuditing");}});

var LsapAdtLogonHoursSize = Module.findExportByName("lsaadt.dll", "LsapAdtLogonHoursSize")
Interceptor.attach(LsapAdtLogonHoursSize, {onLeave: function (args) {send("LsapAdtLogonHoursSize");}});

var LsapAdtLogonIncrementPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtLogonIncrementPerUserAuditing")
Interceptor.attach(LsapAdtLogonIncrementPerUserAuditing, {onLeave: function (args) {send("LsapAdtLogonIncrementPerUserAuditing");}});

var LsapAdtLogonPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtLogonPerUserAuditing")
Interceptor.attach(LsapAdtLogonPerUserAuditing, {onLeave: function (args) {send("LsapAdtLogonPerUserAuditing");}});

var LsapAdtLookupCategoryName = Module.findExportByName("lsaadt.dll", "LsapAdtLookupCategoryName")
Interceptor.attach(LsapAdtLookupCategoryName, {onLeave: function (args) {send("LsapAdtLookupCategoryName");}});

var LsapAdtLookupSubCategoryName = Module.findExportByName("lsaadt.dll", "LsapAdtLookupSubCategoryName")
Interceptor.attach(LsapAdtLookupSubCategoryName, {onLeave: function (args) {send("LsapAdtLookupSubCategoryName");}});

var LsapAdtMergeAuditPolicyOptions = Module.findExportByName("lsaadt.dll", "LsapAdtMergeAuditPolicyOptions")
Interceptor.attach(LsapAdtMergeAuditPolicyOptions, {onLeave: function (args) {send("LsapAdtMergeAuditPolicyOptions");}});

var LsapAdtNotifySpecialGroupLogonChange = Module.findExportByName("lsaadt.dll", "LsapAdtNotifySpecialGroupLogonChange")
Interceptor.attach(LsapAdtNotifySpecialGroupLogonChange, {onLeave: function (args) {send("LsapAdtNotifySpecialGroupLogonChange");}});

var LsapAdtNotifySpecializedProcessingChange = Module.findExportByName("lsaadt.dll", "LsapAdtNotifySpecializedProcessingChange")
Interceptor.attach(LsapAdtNotifySpecializedProcessingChange, {onLeave: function (args) {send("LsapAdtNotifySpecializedProcessingChange");}});

var LsapAdtOpenLog = Module.findExportByName("lsaadt.dll", "LsapAdtOpenLog")
Interceptor.attach(LsapAdtOpenLog, {onLeave: function (args) {send("LsapAdtOpenLog");}});

var LsapAdtOpenPerUserAuditingKey = Module.findExportByName("lsaadt.dll", "LsapAdtOpenPerUserAuditingKey")
Interceptor.attach(LsapAdtOpenPerUserAuditingKey, {onLeave: function (args) {send("LsapAdtOpenPerUserAuditingKey");}});

var LsapAdtOpenSpecializedProcessingAuditingKey = Module.findExportByName("lsaadt.dll", "LsapAdtOpenSpecializedProcessingAuditingKey")
Interceptor.attach(LsapAdtOpenSpecializedProcessingAuditingKey, {onLeave: function (args) {send("LsapAdtOpenSpecializedProcessingAuditingKey");}});

var LsapAdtPolicyChange = Module.findExportByName("lsaadt.dll", "LsapAdtPolicyChange")
Interceptor.attach(LsapAdtPolicyChange, {onLeave: function (args) {send("LsapAdtPolicyChange");}});

var LsapAdtQueryAuditPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtQueryAuditPolicy")
Interceptor.attach(LsapAdtQueryAuditPolicy, {onLeave: function (args) {send("LsapAdtQueryAuditPolicy");}});

var LsapAdtQueryFullPerUserAuditingByLuid = Module.findExportByName("lsaadt.dll", "LsapAdtQueryFullPerUserAuditingByLuid")
Interceptor.attach(LsapAdtQueryFullPerUserAuditingByLuid, {onLeave: function (args) {send("LsapAdtQueryFullPerUserAuditingByLuid");}});

var LsapAdtQueryFullPerUserAuditingBySid = Module.findExportByName("lsaadt.dll", "LsapAdtQueryFullPerUserAuditingBySid")
Interceptor.attach(LsapAdtQueryFullPerUserAuditingBySid, {onLeave: function (args) {send("LsapAdtQueryFullPerUserAuditingBySid");}});

var LsapAdtQueryPerUserAuditingByLuid = Module.findExportByName("lsaadt.dll", "LsapAdtQueryPerUserAuditingByLuid")
Interceptor.attach(LsapAdtQueryPerUserAuditingByLuid, {onLeave: function (args) {send("LsapAdtQueryPerUserAuditingByLuid");}});

var LsapAdtQueryPerUserAuditingBySid = Module.findExportByName("lsaadt.dll", "LsapAdtQueryPerUserAuditingBySid")
Interceptor.attach(LsapAdtQueryPerUserAuditingBySid, {onLeave: function (args) {send("LsapAdtQueryPerUserAuditingBySid");}});

var LsapAdtQuerySpecificPerUserAuditingByLuid = Module.findExportByName("lsaadt.dll", "LsapAdtQuerySpecificPerUserAuditingByLuid")
Interceptor.attach(LsapAdtQuerySpecificPerUserAuditingByLuid, {onLeave: function (args) {send("LsapAdtQuerySpecificPerUserAuditingByLuid");}});

var LsapAdtQuerySpecificPerUserAuditingBySid = Module.findExportByName("lsaadt.dll", "LsapAdtQuerySpecificPerUserAuditingBySid")
Interceptor.attach(LsapAdtQuerySpecificPerUserAuditingBySid, {onLeave: function (args) {send("LsapAdtQuerySpecificPerUserAuditingBySid");}});

var LsapAdtRegisterSecurityEventSource = Module.findExportByName("lsaadt.dll", "LsapAdtRegisterSecurityEventSource")
Interceptor.attach(LsapAdtRegisterSecurityEventSource, {onLeave: function (args) {send("LsapAdtRegisterSecurityEventSource");}});

var LsapAdtRemoveLuidQueryPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtRemoveLuidQueryPerUserAuditing")
Interceptor.attach(LsapAdtRemoveLuidQueryPerUserAuditing, {onLeave: function (args) {send("LsapAdtRemoveLuidQueryPerUserAuditing");}});

var LsapAdtReportSecurityEvent = Module.findExportByName("lsaadt.dll", "LsapAdtReportSecurityEvent")
Interceptor.attach(LsapAdtReportSecurityEvent, {onLeave: function (args) {send("LsapAdtReportSecurityEvent");}});

var LsapAdtRundownSecurityEventSource = Module.findExportByName("lsaadt.dll", "LsapAdtRundownSecurityEventSource")
Interceptor.attach(LsapAdtRundownSecurityEventSource, {onLeave: function (args) {send("LsapAdtRundownSecurityEventSource");}});

var LsapAdtSetAuditPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtSetAuditPolicy")
Interceptor.attach(LsapAdtSetAuditPolicy, {onLeave: function (args) {send("LsapAdtSetAuditPolicy");}});

var LsapAdtStorePolicyByLuidPerUserAuditing = Module.findExportByName("lsaadt.dll", "LsapAdtStorePolicyByLuidPerUserAuditing")
Interceptor.attach(LsapAdtStorePolicyByLuidPerUserAuditing, {onLeave: function (args) {send("LsapAdtStorePolicyByLuidPerUserAuditing");}});

var LsapAdtSubCategoryPolicyChange = Module.findExportByName("lsaadt.dll", "LsapAdtSubCategoryPolicyChange")
Interceptor.attach(LsapAdtSubCategoryPolicyChange, {onLeave: function (args) {send("LsapAdtSubCategoryPolicyChange");}});

var LsapAdtSystemRestart = Module.findExportByName("lsaadt.dll", "LsapAdtSystemRestart")
Interceptor.attach(LsapAdtSystemRestart, {onLeave: function (args) {send("LsapAdtSystemRestart");}});

var LsapAdtUnregisterSecurityEventSource = Module.findExportByName("lsaadt.dll", "LsapAdtUnregisterSecurityEventSource")
Interceptor.attach(LsapAdtUnregisterSecurityEventSource, {onLeave: function (args) {send("LsapAdtUnregisterSecurityEventSource");}});

var LsapAdtUpdatePerUserCache = Module.findExportByName("lsaadt.dll", "LsapAdtUpdatePerUserCache")
Interceptor.attach(LsapAdtUpdatePerUserCache, {onLeave: function (args) {send("LsapAdtUpdatePerUserCache");}});

var LsapAdtUpgradeAuditPolicy = Module.findExportByName("lsaadt.dll", "LsapAdtUpgradeAuditPolicy")
Interceptor.attach(LsapAdtUpgradeAuditPolicy, {onLeave: function (args) {send("LsapAdtUpgradeAuditPolicy");}});

var LsapAdtUserRightAssigned = Module.findExportByName("lsaadt.dll", "LsapAdtUserRightAssigned")
Interceptor.attach(LsapAdtUserRightAssigned, {onLeave: function (args) {send("LsapAdtUserRightAssigned");}});

var LsapAdtValidateAuditingPolicyInformation = Module.findExportByName("lsaadt.dll", "LsapAdtValidateAuditingPolicyInformation")
Interceptor.attach(LsapAdtValidateAuditingPolicyInformation, {onLeave: function (args) {send("LsapAdtValidateAuditingPolicyInformation");}});

var LsapAdtWriteLogEx = Module.findExportByName("lsaadt.dll", "LsapAdtWriteLogEx")
Interceptor.attach(LsapAdtWriteLogEx, {onLeave: function (args) {send("LsapAdtWriteLogEx");}});

var LsapAdtWriteLogWrkr = Module.findExportByName("lsaadt.dll", "LsapAdtWriteLogWrkr")
Interceptor.attach(LsapAdtWriteLogWrkr, {onLeave: function (args) {send("LsapAdtWriteLogWrkr");}});

var LsapAdtWritePerUserPolicyToStore = Module.findExportByName("lsaadt.dll", "LsapAdtWritePerUserPolicyToStore")
Interceptor.attach(LsapAdtWritePerUserPolicyToStore, {onLeave: function (args) {send("LsapAdtWritePerUserPolicyToStore");}});

var LsapAuditLogonHelper = Module.findExportByName("lsaadt.dll", "LsapAuditLogonHelper")
Interceptor.attach(LsapAuditLogonHelper, {onLeave: function (args) {send("LsapAuditLogonHelper");}});

var LsapAuditQueryGlobalSacl = Module.findExportByName("lsaadt.dll", "LsapAuditQueryGlobalSacl")
Interceptor.attach(LsapAuditQueryGlobalSacl, {onLeave: function (args) {send("LsapAuditQueryGlobalSacl");}});

var LsapAuditSetGlobalSacl = Module.findExportByName("lsaadt.dll", "LsapAuditSetGlobalSacl")
Interceptor.attach(LsapAuditSetGlobalSacl, {onLeave: function (args) {send("LsapAuditSetGlobalSacl");}});

var LsapFlushSecurityLog = Module.findExportByName("lsaadt.dll", "LsapFlushSecurityLog")
Interceptor.attach(LsapFlushSecurityLog, {onLeave: function (args) {send("LsapFlushSecurityLog");}});

var LsapFreeClaimsInAdtParams = Module.findExportByName("lsaadt.dll", "LsapFreeClaimsInAdtParams")
Interceptor.attach(LsapFreeClaimsInAdtParams, {onLeave: function (args) {send("LsapFreeClaimsInAdtParams");}});

var LsapFreeClaimsInfoFromToken = Module.findExportByName("lsaadt.dll", "LsapFreeClaimsInfoFromToken")
Interceptor.attach(LsapFreeClaimsInfoFromToken, {onLeave: function (args) {send("LsapFreeClaimsInfoFromToken");}});

var LsapGenAuditEvent = Module.findExportByName("lsaadt.dll", "LsapGenAuditEvent")
Interceptor.attach(LsapGenAuditEvent, {onLeave: function (args) {send("LsapGenAuditEvent");}});

var LsapGetClaimsInToken = Module.findExportByName("lsaadt.dll", "LsapGetClaimsInToken")
Interceptor.attach(LsapGetClaimsInToken, {onLeave: function (args) {send("LsapGetClaimsInToken");}});

var LsapGetImageNameFromProcessId = Module.findExportByName("lsaadt.dll", "LsapGetImageNameFromProcessId")
Interceptor.attach(LsapGetImageNameFromProcessId, {onLeave: function (args) {send("LsapGetImageNameFromProcessId");}});

var LsapQueryAuditSecurity = Module.findExportByName("lsaadt.dll", "LsapQueryAuditSecurity")
Interceptor.attach(LsapQueryAuditSecurity, {onLeave: function (args) {send("LsapQueryAuditSecurity");}});

var LsapRegisterAuditEvent = Module.findExportByName("lsaadt.dll", "LsapRegisterAuditEvent")
Interceptor.attach(LsapRegisterAuditEvent, {onLeave: function (args) {send("LsapRegisterAuditEvent");}});

var LsapReportClaimsAtLogonEvent = Module.findExportByName("lsaadt.dll", "LsapReportClaimsAtLogonEvent")
Interceptor.attach(LsapReportClaimsAtLogonEvent, {onLeave: function (args) {send("LsapReportClaimsAtLogonEvent");}});

var LsapReportGroupsAtLogonEvent = Module.findExportByName("lsaadt.dll", "LsapReportGroupsAtLogonEvent")
Interceptor.attach(LsapReportGroupsAtLogonEvent, {onLeave: function (args) {send("LsapReportGroupsAtLogonEvent");}});

var LsapReserveSlotsForClaims = Module.findExportByName("lsaadt.dll", "LsapReserveSlotsForClaims")
Interceptor.attach(LsapReserveSlotsForClaims, {onLeave: function (args) {send("LsapReserveSlotsForClaims");}});

var LsapSetAuditSecurity = Module.findExportByName("lsaadt.dll", "LsapSetAuditSecurity")
Interceptor.attach(LsapSetAuditSecurity, {onLeave: function (args) {send("LsapSetAuditSecurity");}});

var LsapStringListSize = Module.findExportByName("lsaadt.dll", "LsapStringListSize")
Interceptor.attach(LsapStringListSize, {onLeave: function (args) {send("LsapStringListSize");}});

var LsapUnregisterAuditEvent = Module.findExportByName("lsaadt.dll", "LsapUnregisterAuditEvent")
Interceptor.attach(LsapUnregisterAuditEvent, {onLeave: function (args) {send("LsapUnregisterAuditEvent");}});

var LsapUpdateSamAuditPolicy = Module.findExportByName("lsaadt.dll", "LsapUpdateSamAuditPolicy")
Interceptor.attach(LsapUpdateSamAuditPolicy, {onLeave: function (args) {send("LsapUpdateSamAuditPolicy");}});

