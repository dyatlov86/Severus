var archive_bzlib_version = Module.findExportByName("archiveint.dll", "archive_bzlib_version")
Interceptor.attach(archive_bzlib_version, {onLeave: function (args) {send("archive_bzlib_version");}});

var archive_clear_error = Module.findExportByName("archiveint.dll", "archive_clear_error")
Interceptor.attach(archive_clear_error, {onLeave: function (args) {send("archive_clear_error");}});

var archive_compression = Module.findExportByName("archiveint.dll", "archive_compression")
Interceptor.attach(archive_compression, {onLeave: function (args) {send("archive_compression");}});

var archive_compression_name = Module.findExportByName("archiveint.dll", "archive_compression_name")
Interceptor.attach(archive_compression_name, {onLeave: function (args) {send("archive_compression_name");}});

var archive_copy_error = Module.findExportByName("archiveint.dll", "archive_copy_error")
Interceptor.attach(archive_copy_error, {onLeave: function (args) {send("archive_copy_error");}});

var archive_entry_acl = Module.findExportByName("archiveint.dll", "archive_entry_acl")
Interceptor.attach(archive_entry_acl, {onLeave: function (args) {send("archive_entry_acl");}});

var archive_entry_acl_add_entry = Module.findExportByName("archiveint.dll", "archive_entry_acl_add_entry")
Interceptor.attach(archive_entry_acl_add_entry, {onLeave: function (args) {send("archive_entry_acl_add_entry");}});

var archive_entry_acl_add_entry_w = Module.findExportByName("archiveint.dll", "archive_entry_acl_add_entry_w")
Interceptor.attach(archive_entry_acl_add_entry_w, {onLeave: function (args) {send("archive_entry_acl_add_entry_w");}});

var archive_entry_acl_clear = Module.findExportByName("archiveint.dll", "archive_entry_acl_clear")
Interceptor.attach(archive_entry_acl_clear, {onLeave: function (args) {send("archive_entry_acl_clear");}});

var archive_entry_acl_count = Module.findExportByName("archiveint.dll", "archive_entry_acl_count")
Interceptor.attach(archive_entry_acl_count, {onLeave: function (args) {send("archive_entry_acl_count");}});

var archive_entry_acl_from_text = Module.findExportByName("archiveint.dll", "archive_entry_acl_from_text")
Interceptor.attach(archive_entry_acl_from_text, {onLeave: function (args) {send("archive_entry_acl_from_text");}});

var archive_entry_acl_from_text_w = Module.findExportByName("archiveint.dll", "archive_entry_acl_from_text_w")
Interceptor.attach(archive_entry_acl_from_text_w, {onLeave: function (args) {send("archive_entry_acl_from_text_w");}});

var archive_entry_acl_next = Module.findExportByName("archiveint.dll", "archive_entry_acl_next")
Interceptor.attach(archive_entry_acl_next, {onLeave: function (args) {send("archive_entry_acl_next");}});

var archive_entry_acl_reset = Module.findExportByName("archiveint.dll", "archive_entry_acl_reset")
Interceptor.attach(archive_entry_acl_reset, {onLeave: function (args) {send("archive_entry_acl_reset");}});

var archive_entry_acl_text = Module.findExportByName("archiveint.dll", "archive_entry_acl_text")
Interceptor.attach(archive_entry_acl_text, {onLeave: function (args) {send("archive_entry_acl_text");}});

var archive_entry_acl_text_w = Module.findExportByName("archiveint.dll", "archive_entry_acl_text_w")
Interceptor.attach(archive_entry_acl_text_w, {onLeave: function (args) {send("archive_entry_acl_text_w");}});

var archive_entry_acl_to_text = Module.findExportByName("archiveint.dll", "archive_entry_acl_to_text")
Interceptor.attach(archive_entry_acl_to_text, {onLeave: function (args) {send("archive_entry_acl_to_text");}});

var archive_entry_acl_to_text_w = Module.findExportByName("archiveint.dll", "archive_entry_acl_to_text_w")
Interceptor.attach(archive_entry_acl_to_text_w, {onLeave: function (args) {send("archive_entry_acl_to_text_w");}});

var archive_entry_acl_types = Module.findExportByName("archiveint.dll", "archive_entry_acl_types")
Interceptor.attach(archive_entry_acl_types, {onLeave: function (args) {send("archive_entry_acl_types");}});

var archive_entry_atime = Module.findExportByName("archiveint.dll", "archive_entry_atime")
Interceptor.attach(archive_entry_atime, {onLeave: function (args) {send("archive_entry_atime");}});

var archive_entry_atime_is_set = Module.findExportByName("archiveint.dll", "archive_entry_atime_is_set")
Interceptor.attach(archive_entry_atime_is_set, {onLeave: function (args) {send("archive_entry_atime_is_set");}});

var archive_entry_atime_nsec = Module.findExportByName("archiveint.dll", "archive_entry_atime_nsec")
Interceptor.attach(archive_entry_atime_nsec, {onLeave: function (args) {send("archive_entry_atime_nsec");}});

var archive_entry_birthtime = Module.findExportByName("archiveint.dll", "archive_entry_birthtime")
Interceptor.attach(archive_entry_birthtime, {onLeave: function (args) {send("archive_entry_birthtime");}});

var archive_entry_birthtime_is_set = Module.findExportByName("archiveint.dll", "archive_entry_birthtime_is_set")
Interceptor.attach(archive_entry_birthtime_is_set, {onLeave: function (args) {send("archive_entry_birthtime_is_set");}});

var archive_entry_birthtime_nsec = Module.findExportByName("archiveint.dll", "archive_entry_birthtime_nsec")
Interceptor.attach(archive_entry_birthtime_nsec, {onLeave: function (args) {send("archive_entry_birthtime_nsec");}});

var archive_entry_clear = Module.findExportByName("archiveint.dll", "archive_entry_clear")
Interceptor.attach(archive_entry_clear, {onLeave: function (args) {send("archive_entry_clear");}});

var archive_entry_clone = Module.findExportByName("archiveint.dll", "archive_entry_clone")
Interceptor.attach(archive_entry_clone, {onLeave: function (args) {send("archive_entry_clone");}});

var archive_entry_copy_bhfi = Module.findExportByName("archiveint.dll", "archive_entry_copy_bhfi")
Interceptor.attach(archive_entry_copy_bhfi, {onLeave: function (args) {send("archive_entry_copy_bhfi");}});

var archive_entry_copy_fflags_text = Module.findExportByName("archiveint.dll", "archive_entry_copy_fflags_text")
Interceptor.attach(archive_entry_copy_fflags_text, {onLeave: function (args) {send("archive_entry_copy_fflags_text");}});

var archive_entry_copy_fflags_text_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_fflags_text_w")
Interceptor.attach(archive_entry_copy_fflags_text_w, {onLeave: function (args) {send("archive_entry_copy_fflags_text_w");}});

var archive_entry_copy_gname = Module.findExportByName("archiveint.dll", "archive_entry_copy_gname")
Interceptor.attach(archive_entry_copy_gname, {onLeave: function (args) {send("archive_entry_copy_gname");}});

var archive_entry_copy_gname_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_gname_w")
Interceptor.attach(archive_entry_copy_gname_w, {onLeave: function (args) {send("archive_entry_copy_gname_w");}});

var archive_entry_copy_hardlink = Module.findExportByName("archiveint.dll", "archive_entry_copy_hardlink")
Interceptor.attach(archive_entry_copy_hardlink, {onLeave: function (args) {send("archive_entry_copy_hardlink");}});

var archive_entry_copy_hardlink_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_hardlink_w")
Interceptor.attach(archive_entry_copy_hardlink_w, {onLeave: function (args) {send("archive_entry_copy_hardlink_w");}});

var archive_entry_copy_link = Module.findExportByName("archiveint.dll", "archive_entry_copy_link")
Interceptor.attach(archive_entry_copy_link, {onLeave: function (args) {send("archive_entry_copy_link");}});

var archive_entry_copy_link_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_link_w")
Interceptor.attach(archive_entry_copy_link_w, {onLeave: function (args) {send("archive_entry_copy_link_w");}});

var archive_entry_copy_mac_metadata = Module.findExportByName("archiveint.dll", "archive_entry_copy_mac_metadata")
Interceptor.attach(archive_entry_copy_mac_metadata, {onLeave: function (args) {send("archive_entry_copy_mac_metadata");}});

var archive_entry_copy_pathname = Module.findExportByName("archiveint.dll", "archive_entry_copy_pathname")
Interceptor.attach(archive_entry_copy_pathname, {onLeave: function (args) {send("archive_entry_copy_pathname");}});

var archive_entry_copy_pathname_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_pathname_w")
Interceptor.attach(archive_entry_copy_pathname_w, {onLeave: function (args) {send("archive_entry_copy_pathname_w");}});

var archive_entry_copy_sourcepath = Module.findExportByName("archiveint.dll", "archive_entry_copy_sourcepath")
Interceptor.attach(archive_entry_copy_sourcepath, {onLeave: function (args) {send("archive_entry_copy_sourcepath");}});

var archive_entry_copy_sourcepath_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_sourcepath_w")
Interceptor.attach(archive_entry_copy_sourcepath_w, {onLeave: function (args) {send("archive_entry_copy_sourcepath_w");}});

var archive_entry_copy_stat = Module.findExportByName("archiveint.dll", "archive_entry_copy_stat")
Interceptor.attach(archive_entry_copy_stat, {onLeave: function (args) {send("archive_entry_copy_stat");}});

var archive_entry_copy_symlink = Module.findExportByName("archiveint.dll", "archive_entry_copy_symlink")
Interceptor.attach(archive_entry_copy_symlink, {onLeave: function (args) {send("archive_entry_copy_symlink");}});

var archive_entry_copy_symlink_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_symlink_w")
Interceptor.attach(archive_entry_copy_symlink_w, {onLeave: function (args) {send("archive_entry_copy_symlink_w");}});

var archive_entry_copy_uname = Module.findExportByName("archiveint.dll", "archive_entry_copy_uname")
Interceptor.attach(archive_entry_copy_uname, {onLeave: function (args) {send("archive_entry_copy_uname");}});

var archive_entry_copy_uname_w = Module.findExportByName("archiveint.dll", "archive_entry_copy_uname_w")
Interceptor.attach(archive_entry_copy_uname_w, {onLeave: function (args) {send("archive_entry_copy_uname_w");}});

var archive_entry_ctime = Module.findExportByName("archiveint.dll", "archive_entry_ctime")
Interceptor.attach(archive_entry_ctime, {onLeave: function (args) {send("archive_entry_ctime");}});

var archive_entry_ctime_is_set = Module.findExportByName("archiveint.dll", "archive_entry_ctime_is_set")
Interceptor.attach(archive_entry_ctime_is_set, {onLeave: function (args) {send("archive_entry_ctime_is_set");}});

var archive_entry_ctime_nsec = Module.findExportByName("archiveint.dll", "archive_entry_ctime_nsec")
Interceptor.attach(archive_entry_ctime_nsec, {onLeave: function (args) {send("archive_entry_ctime_nsec");}});

var archive_entry_dev = Module.findExportByName("archiveint.dll", "archive_entry_dev")
Interceptor.attach(archive_entry_dev, {onLeave: function (args) {send("archive_entry_dev");}});

var archive_entry_dev_is_set = Module.findExportByName("archiveint.dll", "archive_entry_dev_is_set")
Interceptor.attach(archive_entry_dev_is_set, {onLeave: function (args) {send("archive_entry_dev_is_set");}});

var archive_entry_devmajor = Module.findExportByName("archiveint.dll", "archive_entry_devmajor")
Interceptor.attach(archive_entry_devmajor, {onLeave: function (args) {send("archive_entry_devmajor");}});

var archive_entry_devminor = Module.findExportByName("archiveint.dll", "archive_entry_devminor")
Interceptor.attach(archive_entry_devminor, {onLeave: function (args) {send("archive_entry_devminor");}});

var archive_entry_digest = Module.findExportByName("archiveint.dll", "archive_entry_digest")
Interceptor.attach(archive_entry_digest, {onLeave: function (args) {send("archive_entry_digest");}});

var archive_entry_fflags = Module.findExportByName("archiveint.dll", "archive_entry_fflags")
Interceptor.attach(archive_entry_fflags, {onLeave: function (args) {send("archive_entry_fflags");}});

var archive_entry_fflags_text = Module.findExportByName("archiveint.dll", "archive_entry_fflags_text")
Interceptor.attach(archive_entry_fflags_text, {onLeave: function (args) {send("archive_entry_fflags_text");}});

var archive_entry_filetype = Module.findExportByName("archiveint.dll", "archive_entry_filetype")
Interceptor.attach(archive_entry_filetype, {onLeave: function (args) {send("archive_entry_filetype");}});

var archive_entry_free = Module.findExportByName("archiveint.dll", "archive_entry_free")
Interceptor.attach(archive_entry_free, {onLeave: function (args) {send("archive_entry_free");}});

var archive_entry_gid = Module.findExportByName("archiveint.dll", "archive_entry_gid")
Interceptor.attach(archive_entry_gid, {onLeave: function (args) {send("archive_entry_gid");}});

var archive_entry_gname = Module.findExportByName("archiveint.dll", "archive_entry_gname")
Interceptor.attach(archive_entry_gname, {onLeave: function (args) {send("archive_entry_gname");}});

var archive_entry_gname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_gname_utf8")
Interceptor.attach(archive_entry_gname_utf8, {onLeave: function (args) {send("archive_entry_gname_utf8");}});

var archive_entry_gname_w = Module.findExportByName("archiveint.dll", "archive_entry_gname_w")
Interceptor.attach(archive_entry_gname_w, {onLeave: function (args) {send("archive_entry_gname_w");}});

var archive_entry_hardlink = Module.findExportByName("archiveint.dll", "archive_entry_hardlink")
Interceptor.attach(archive_entry_hardlink, {onLeave: function (args) {send("archive_entry_hardlink");}});

var archive_entry_hardlink_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_hardlink_utf8")
Interceptor.attach(archive_entry_hardlink_utf8, {onLeave: function (args) {send("archive_entry_hardlink_utf8");}});

var archive_entry_hardlink_w = Module.findExportByName("archiveint.dll", "archive_entry_hardlink_w")
Interceptor.attach(archive_entry_hardlink_w, {onLeave: function (args) {send("archive_entry_hardlink_w");}});

var archive_entry_ino = Module.findExportByName("archiveint.dll", "archive_entry_ino")
Interceptor.attach(archive_entry_ino, {onLeave: function (args) {send("archive_entry_ino");}});

var archive_entry_ino64 = Module.findExportByName("archiveint.dll", "archive_entry_ino64")
Interceptor.attach(archive_entry_ino64, {onLeave: function (args) {send("archive_entry_ino64");}});

var archive_entry_ino_is_set = Module.findExportByName("archiveint.dll", "archive_entry_ino_is_set")
Interceptor.attach(archive_entry_ino_is_set, {onLeave: function (args) {send("archive_entry_ino_is_set");}});

var archive_entry_is_data_encrypted = Module.findExportByName("archiveint.dll", "archive_entry_is_data_encrypted")
Interceptor.attach(archive_entry_is_data_encrypted, {onLeave: function (args) {send("archive_entry_is_data_encrypted");}});

var archive_entry_is_encrypted = Module.findExportByName("archiveint.dll", "archive_entry_is_encrypted")
Interceptor.attach(archive_entry_is_encrypted, {onLeave: function (args) {send("archive_entry_is_encrypted");}});

var archive_entry_is_metadata_encrypted = Module.findExportByName("archiveint.dll", "archive_entry_is_metadata_encrypted")
Interceptor.attach(archive_entry_is_metadata_encrypted, {onLeave: function (args) {send("archive_entry_is_metadata_encrypted");}});

var archive_entry_linkify = Module.findExportByName("archiveint.dll", "archive_entry_linkify")
Interceptor.attach(archive_entry_linkify, {onLeave: function (args) {send("archive_entry_linkify");}});

var archive_entry_linkresolver_free = Module.findExportByName("archiveint.dll", "archive_entry_linkresolver_free")
Interceptor.attach(archive_entry_linkresolver_free, {onLeave: function (args) {send("archive_entry_linkresolver_free");}});

var archive_entry_linkresolver_new = Module.findExportByName("archiveint.dll", "archive_entry_linkresolver_new")
Interceptor.attach(archive_entry_linkresolver_new, {onLeave: function (args) {send("archive_entry_linkresolver_new");}});

var archive_entry_linkresolver_set_strategy = Module.findExportByName("archiveint.dll", "archive_entry_linkresolver_set_strategy")
Interceptor.attach(archive_entry_linkresolver_set_strategy, {onLeave: function (args) {send("archive_entry_linkresolver_set_strategy");}});

var archive_entry_mac_metadata = Module.findExportByName("archiveint.dll", "archive_entry_mac_metadata")
Interceptor.attach(archive_entry_mac_metadata, {onLeave: function (args) {send("archive_entry_mac_metadata");}});

var archive_entry_mode = Module.findExportByName("archiveint.dll", "archive_entry_mode")
Interceptor.attach(archive_entry_mode, {onLeave: function (args) {send("archive_entry_mode");}});

var archive_entry_mtime = Module.findExportByName("archiveint.dll", "archive_entry_mtime")
Interceptor.attach(archive_entry_mtime, {onLeave: function (args) {send("archive_entry_mtime");}});

var archive_entry_mtime_is_set = Module.findExportByName("archiveint.dll", "archive_entry_mtime_is_set")
Interceptor.attach(archive_entry_mtime_is_set, {onLeave: function (args) {send("archive_entry_mtime_is_set");}});

var archive_entry_mtime_nsec = Module.findExportByName("archiveint.dll", "archive_entry_mtime_nsec")
Interceptor.attach(archive_entry_mtime_nsec, {onLeave: function (args) {send("archive_entry_mtime_nsec");}});

var archive_entry_new = Module.findExportByName("archiveint.dll", "archive_entry_new")
Interceptor.attach(archive_entry_new, {onLeave: function (args) {send("archive_entry_new");}});

var archive_entry_new2 = Module.findExportByName("archiveint.dll", "archive_entry_new2")
Interceptor.attach(archive_entry_new2, {onLeave: function (args) {send("archive_entry_new2");}});

var archive_entry_nlink = Module.findExportByName("archiveint.dll", "archive_entry_nlink")
Interceptor.attach(archive_entry_nlink, {onLeave: function (args) {send("archive_entry_nlink");}});

var archive_entry_partial_links = Module.findExportByName("archiveint.dll", "archive_entry_partial_links")
Interceptor.attach(archive_entry_partial_links, {onLeave: function (args) {send("archive_entry_partial_links");}});

var archive_entry_pathname = Module.findExportByName("archiveint.dll", "archive_entry_pathname")
Interceptor.attach(archive_entry_pathname, {onLeave: function (args) {send("archive_entry_pathname");}});

var archive_entry_pathname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_pathname_utf8")
Interceptor.attach(archive_entry_pathname_utf8, {onLeave: function (args) {send("archive_entry_pathname_utf8");}});

var archive_entry_pathname_w = Module.findExportByName("archiveint.dll", "archive_entry_pathname_w")
Interceptor.attach(archive_entry_pathname_w, {onLeave: function (args) {send("archive_entry_pathname_w");}});

var archive_entry_perm = Module.findExportByName("archiveint.dll", "archive_entry_perm")
Interceptor.attach(archive_entry_perm, {onLeave: function (args) {send("archive_entry_perm");}});

var archive_entry_rdev = Module.findExportByName("archiveint.dll", "archive_entry_rdev")
Interceptor.attach(archive_entry_rdev, {onLeave: function (args) {send("archive_entry_rdev");}});

var archive_entry_rdevmajor = Module.findExportByName("archiveint.dll", "archive_entry_rdevmajor")
Interceptor.attach(archive_entry_rdevmajor, {onLeave: function (args) {send("archive_entry_rdevmajor");}});

var archive_entry_rdevminor = Module.findExportByName("archiveint.dll", "archive_entry_rdevminor")
Interceptor.attach(archive_entry_rdevminor, {onLeave: function (args) {send("archive_entry_rdevminor");}});

var archive_entry_set_atime = Module.findExportByName("archiveint.dll", "archive_entry_set_atime")
Interceptor.attach(archive_entry_set_atime, {onLeave: function (args) {send("archive_entry_set_atime");}});

var archive_entry_set_birthtime = Module.findExportByName("archiveint.dll", "archive_entry_set_birthtime")
Interceptor.attach(archive_entry_set_birthtime, {onLeave: function (args) {send("archive_entry_set_birthtime");}});

var archive_entry_set_ctime = Module.findExportByName("archiveint.dll", "archive_entry_set_ctime")
Interceptor.attach(archive_entry_set_ctime, {onLeave: function (args) {send("archive_entry_set_ctime");}});

var archive_entry_set_dev = Module.findExportByName("archiveint.dll", "archive_entry_set_dev")
Interceptor.attach(archive_entry_set_dev, {onLeave: function (args) {send("archive_entry_set_dev");}});

var archive_entry_set_devmajor = Module.findExportByName("archiveint.dll", "archive_entry_set_devmajor")
Interceptor.attach(archive_entry_set_devmajor, {onLeave: function (args) {send("archive_entry_set_devmajor");}});

var archive_entry_set_devminor = Module.findExportByName("archiveint.dll", "archive_entry_set_devminor")
Interceptor.attach(archive_entry_set_devminor, {onLeave: function (args) {send("archive_entry_set_devminor");}});

var archive_entry_set_fflags = Module.findExportByName("archiveint.dll", "archive_entry_set_fflags")
Interceptor.attach(archive_entry_set_fflags, {onLeave: function (args) {send("archive_entry_set_fflags");}});

var archive_entry_set_filetype = Module.findExportByName("archiveint.dll", "archive_entry_set_filetype")
Interceptor.attach(archive_entry_set_filetype, {onLeave: function (args) {send("archive_entry_set_filetype");}});

var archive_entry_set_gid = Module.findExportByName("archiveint.dll", "archive_entry_set_gid")
Interceptor.attach(archive_entry_set_gid, {onLeave: function (args) {send("archive_entry_set_gid");}});

var archive_entry_set_gname = Module.findExportByName("archiveint.dll", "archive_entry_set_gname")
Interceptor.attach(archive_entry_set_gname, {onLeave: function (args) {send("archive_entry_set_gname");}});

var archive_entry_set_gname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_set_gname_utf8")
Interceptor.attach(archive_entry_set_gname_utf8, {onLeave: function (args) {send("archive_entry_set_gname_utf8");}});

var archive_entry_set_hardlink = Module.findExportByName("archiveint.dll", "archive_entry_set_hardlink")
Interceptor.attach(archive_entry_set_hardlink, {onLeave: function (args) {send("archive_entry_set_hardlink");}});

var archive_entry_set_hardlink_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_set_hardlink_utf8")
Interceptor.attach(archive_entry_set_hardlink_utf8, {onLeave: function (args) {send("archive_entry_set_hardlink_utf8");}});

var archive_entry_set_ino = Module.findExportByName("archiveint.dll", "archive_entry_set_ino")
Interceptor.attach(archive_entry_set_ino, {onLeave: function (args) {send("archive_entry_set_ino");}});

var archive_entry_set_ino64 = Module.findExportByName("archiveint.dll", "archive_entry_set_ino64")
Interceptor.attach(archive_entry_set_ino64, {onLeave: function (args) {send("archive_entry_set_ino64");}});

var archive_entry_set_is_data_encrypted = Module.findExportByName("archiveint.dll", "archive_entry_set_is_data_encrypted")
Interceptor.attach(archive_entry_set_is_data_encrypted, {onLeave: function (args) {send("archive_entry_set_is_data_encrypted");}});

var archive_entry_set_is_metadata_encrypted = Module.findExportByName("archiveint.dll", "archive_entry_set_is_metadata_encrypted")
Interceptor.attach(archive_entry_set_is_metadata_encrypted, {onLeave: function (args) {send("archive_entry_set_is_metadata_encrypted");}});

var archive_entry_set_link = Module.findExportByName("archiveint.dll", "archive_entry_set_link")
Interceptor.attach(archive_entry_set_link, {onLeave: function (args) {send("archive_entry_set_link");}});

var archive_entry_set_link_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_set_link_utf8")
Interceptor.attach(archive_entry_set_link_utf8, {onLeave: function (args) {send("archive_entry_set_link_utf8");}});

var archive_entry_set_mode = Module.findExportByName("archiveint.dll", "archive_entry_set_mode")
Interceptor.attach(archive_entry_set_mode, {onLeave: function (args) {send("archive_entry_set_mode");}});

var archive_entry_set_mtime = Module.findExportByName("archiveint.dll", "archive_entry_set_mtime")
Interceptor.attach(archive_entry_set_mtime, {onLeave: function (args) {send("archive_entry_set_mtime");}});

var archive_entry_set_nlink = Module.findExportByName("archiveint.dll", "archive_entry_set_nlink")
Interceptor.attach(archive_entry_set_nlink, {onLeave: function (args) {send("archive_entry_set_nlink");}});

var archive_entry_set_pathname = Module.findExportByName("archiveint.dll", "archive_entry_set_pathname")
Interceptor.attach(archive_entry_set_pathname, {onLeave: function (args) {send("archive_entry_set_pathname");}});

var archive_entry_set_pathname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_set_pathname_utf8")
Interceptor.attach(archive_entry_set_pathname_utf8, {onLeave: function (args) {send("archive_entry_set_pathname_utf8");}});

var archive_entry_set_perm = Module.findExportByName("archiveint.dll", "archive_entry_set_perm")
Interceptor.attach(archive_entry_set_perm, {onLeave: function (args) {send("archive_entry_set_perm");}});

var archive_entry_set_rdev = Module.findExportByName("archiveint.dll", "archive_entry_set_rdev")
Interceptor.attach(archive_entry_set_rdev, {onLeave: function (args) {send("archive_entry_set_rdev");}});

var archive_entry_set_rdevmajor = Module.findExportByName("archiveint.dll", "archive_entry_set_rdevmajor")
Interceptor.attach(archive_entry_set_rdevmajor, {onLeave: function (args) {send("archive_entry_set_rdevmajor");}});

var archive_entry_set_rdevminor = Module.findExportByName("archiveint.dll", "archive_entry_set_rdevminor")
Interceptor.attach(archive_entry_set_rdevminor, {onLeave: function (args) {send("archive_entry_set_rdevminor");}});

var archive_entry_set_size = Module.findExportByName("archiveint.dll", "archive_entry_set_size")
Interceptor.attach(archive_entry_set_size, {onLeave: function (args) {send("archive_entry_set_size");}});

var archive_entry_set_symlink = Module.findExportByName("archiveint.dll", "archive_entry_set_symlink")
Interceptor.attach(archive_entry_set_symlink, {onLeave: function (args) {send("archive_entry_set_symlink");}});

var archive_entry_set_symlink_type = Module.findExportByName("archiveint.dll", "archive_entry_set_symlink_type")
Interceptor.attach(archive_entry_set_symlink_type, {onLeave: function (args) {send("archive_entry_set_symlink_type");}});

var archive_entry_set_symlink_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_set_symlink_utf8")
Interceptor.attach(archive_entry_set_symlink_utf8, {onLeave: function (args) {send("archive_entry_set_symlink_utf8");}});

var archive_entry_set_uid = Module.findExportByName("archiveint.dll", "archive_entry_set_uid")
Interceptor.attach(archive_entry_set_uid, {onLeave: function (args) {send("archive_entry_set_uid");}});

var archive_entry_set_uname = Module.findExportByName("archiveint.dll", "archive_entry_set_uname")
Interceptor.attach(archive_entry_set_uname, {onLeave: function (args) {send("archive_entry_set_uname");}});

var archive_entry_set_uname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_set_uname_utf8")
Interceptor.attach(archive_entry_set_uname_utf8, {onLeave: function (args) {send("archive_entry_set_uname_utf8");}});

var archive_entry_size = Module.findExportByName("archiveint.dll", "archive_entry_size")
Interceptor.attach(archive_entry_size, {onLeave: function (args) {send("archive_entry_size");}});

var archive_entry_size_is_set = Module.findExportByName("archiveint.dll", "archive_entry_size_is_set")
Interceptor.attach(archive_entry_size_is_set, {onLeave: function (args) {send("archive_entry_size_is_set");}});

var archive_entry_sourcepath = Module.findExportByName("archiveint.dll", "archive_entry_sourcepath")
Interceptor.attach(archive_entry_sourcepath, {onLeave: function (args) {send("archive_entry_sourcepath");}});

var archive_entry_sourcepath_w = Module.findExportByName("archiveint.dll", "archive_entry_sourcepath_w")
Interceptor.attach(archive_entry_sourcepath_w, {onLeave: function (args) {send("archive_entry_sourcepath_w");}});

var archive_entry_sparse_add_entry = Module.findExportByName("archiveint.dll", "archive_entry_sparse_add_entry")
Interceptor.attach(archive_entry_sparse_add_entry, {onLeave: function (args) {send("archive_entry_sparse_add_entry");}});

var archive_entry_sparse_clear = Module.findExportByName("archiveint.dll", "archive_entry_sparse_clear")
Interceptor.attach(archive_entry_sparse_clear, {onLeave: function (args) {send("archive_entry_sparse_clear");}});

var archive_entry_sparse_count = Module.findExportByName("archiveint.dll", "archive_entry_sparse_count")
Interceptor.attach(archive_entry_sparse_count, {onLeave: function (args) {send("archive_entry_sparse_count");}});

var archive_entry_sparse_next = Module.findExportByName("archiveint.dll", "archive_entry_sparse_next")
Interceptor.attach(archive_entry_sparse_next, {onLeave: function (args) {send("archive_entry_sparse_next");}});

var archive_entry_sparse_reset = Module.findExportByName("archiveint.dll", "archive_entry_sparse_reset")
Interceptor.attach(archive_entry_sparse_reset, {onLeave: function (args) {send("archive_entry_sparse_reset");}});

var archive_entry_stat = Module.findExportByName("archiveint.dll", "archive_entry_stat")
Interceptor.attach(archive_entry_stat, {onLeave: function (args) {send("archive_entry_stat");}});

var archive_entry_strmode = Module.findExportByName("archiveint.dll", "archive_entry_strmode")
Interceptor.attach(archive_entry_strmode, {onLeave: function (args) {send("archive_entry_strmode");}});

var archive_entry_symlink = Module.findExportByName("archiveint.dll", "archive_entry_symlink")
Interceptor.attach(archive_entry_symlink, {onLeave: function (args) {send("archive_entry_symlink");}});

var archive_entry_symlink_type = Module.findExportByName("archiveint.dll", "archive_entry_symlink_type")
Interceptor.attach(archive_entry_symlink_type, {onLeave: function (args) {send("archive_entry_symlink_type");}});

var archive_entry_symlink_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_symlink_utf8")
Interceptor.attach(archive_entry_symlink_utf8, {onLeave: function (args) {send("archive_entry_symlink_utf8");}});

var archive_entry_symlink_w = Module.findExportByName("archiveint.dll", "archive_entry_symlink_w")
Interceptor.attach(archive_entry_symlink_w, {onLeave: function (args) {send("archive_entry_symlink_w");}});

var archive_entry_uid = Module.findExportByName("archiveint.dll", "archive_entry_uid")
Interceptor.attach(archive_entry_uid, {onLeave: function (args) {send("archive_entry_uid");}});

var archive_entry_uname = Module.findExportByName("archiveint.dll", "archive_entry_uname")
Interceptor.attach(archive_entry_uname, {onLeave: function (args) {send("archive_entry_uname");}});

var archive_entry_uname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_uname_utf8")
Interceptor.attach(archive_entry_uname_utf8, {onLeave: function (args) {send("archive_entry_uname_utf8");}});

var archive_entry_uname_w = Module.findExportByName("archiveint.dll", "archive_entry_uname_w")
Interceptor.attach(archive_entry_uname_w, {onLeave: function (args) {send("archive_entry_uname_w");}});

var archive_entry_unset_atime = Module.findExportByName("archiveint.dll", "archive_entry_unset_atime")
Interceptor.attach(archive_entry_unset_atime, {onLeave: function (args) {send("archive_entry_unset_atime");}});

var archive_entry_unset_birthtime = Module.findExportByName("archiveint.dll", "archive_entry_unset_birthtime")
Interceptor.attach(archive_entry_unset_birthtime, {onLeave: function (args) {send("archive_entry_unset_birthtime");}});

var archive_entry_unset_ctime = Module.findExportByName("archiveint.dll", "archive_entry_unset_ctime")
Interceptor.attach(archive_entry_unset_ctime, {onLeave: function (args) {send("archive_entry_unset_ctime");}});

var archive_entry_unset_mtime = Module.findExportByName("archiveint.dll", "archive_entry_unset_mtime")
Interceptor.attach(archive_entry_unset_mtime, {onLeave: function (args) {send("archive_entry_unset_mtime");}});

var archive_entry_unset_size = Module.findExportByName("archiveint.dll", "archive_entry_unset_size")
Interceptor.attach(archive_entry_unset_size, {onLeave: function (args) {send("archive_entry_unset_size");}});

var archive_entry_update_gname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_update_gname_utf8")
Interceptor.attach(archive_entry_update_gname_utf8, {onLeave: function (args) {send("archive_entry_update_gname_utf8");}});

var archive_entry_update_hardlink_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_update_hardlink_utf8")
Interceptor.attach(archive_entry_update_hardlink_utf8, {onLeave: function (args) {send("archive_entry_update_hardlink_utf8");}});

var archive_entry_update_link_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_update_link_utf8")
Interceptor.attach(archive_entry_update_link_utf8, {onLeave: function (args) {send("archive_entry_update_link_utf8");}});

var archive_entry_update_pathname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_update_pathname_utf8")
Interceptor.attach(archive_entry_update_pathname_utf8, {onLeave: function (args) {send("archive_entry_update_pathname_utf8");}});

var archive_entry_update_symlink_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_update_symlink_utf8")
Interceptor.attach(archive_entry_update_symlink_utf8, {onLeave: function (args) {send("archive_entry_update_symlink_utf8");}});

var archive_entry_update_uname_utf8 = Module.findExportByName("archiveint.dll", "archive_entry_update_uname_utf8")
Interceptor.attach(archive_entry_update_uname_utf8, {onLeave: function (args) {send("archive_entry_update_uname_utf8");}});

var archive_entry_xattr_add_entry = Module.findExportByName("archiveint.dll", "archive_entry_xattr_add_entry")
Interceptor.attach(archive_entry_xattr_add_entry, {onLeave: function (args) {send("archive_entry_xattr_add_entry");}});

var archive_entry_xattr_clear = Module.findExportByName("archiveint.dll", "archive_entry_xattr_clear")
Interceptor.attach(archive_entry_xattr_clear, {onLeave: function (args) {send("archive_entry_xattr_clear");}});

var archive_entry_xattr_count = Module.findExportByName("archiveint.dll", "archive_entry_xattr_count")
Interceptor.attach(archive_entry_xattr_count, {onLeave: function (args) {send("archive_entry_xattr_count");}});

var archive_entry_xattr_next = Module.findExportByName("archiveint.dll", "archive_entry_xattr_next")
Interceptor.attach(archive_entry_xattr_next, {onLeave: function (args) {send("archive_entry_xattr_next");}});

var archive_entry_xattr_reset = Module.findExportByName("archiveint.dll", "archive_entry_xattr_reset")
Interceptor.attach(archive_entry_xattr_reset, {onLeave: function (args) {send("archive_entry_xattr_reset");}});

var archive_errno = Module.findExportByName("archiveint.dll", "archive_errno")
Interceptor.attach(archive_errno, {onLeave: function (args) {send("archive_errno");}});

var archive_error_string = Module.findExportByName("archiveint.dll", "archive_error_string")
Interceptor.attach(archive_error_string, {onLeave: function (args) {send("archive_error_string");}});

var archive_file_count = Module.findExportByName("archiveint.dll", "archive_file_count")
Interceptor.attach(archive_file_count, {onLeave: function (args) {send("archive_file_count");}});

var archive_filter_bytes = Module.findExportByName("archiveint.dll", "archive_filter_bytes")
Interceptor.attach(archive_filter_bytes, {onLeave: function (args) {send("archive_filter_bytes");}});

var archive_filter_code = Module.findExportByName("archiveint.dll", "archive_filter_code")
Interceptor.attach(archive_filter_code, {onLeave: function (args) {send("archive_filter_code");}});

var archive_filter_count = Module.findExportByName("archiveint.dll", "archive_filter_count")
Interceptor.attach(archive_filter_count, {onLeave: function (args) {send("archive_filter_count");}});

var archive_filter_name = Module.findExportByName("archiveint.dll", "archive_filter_name")
Interceptor.attach(archive_filter_name, {onLeave: function (args) {send("archive_filter_name");}});

var archive_format = Module.findExportByName("archiveint.dll", "archive_format")
Interceptor.attach(archive_format, {onLeave: function (args) {send("archive_format");}});

var archive_format_name = Module.findExportByName("archiveint.dll", "archive_format_name")
Interceptor.attach(archive_format_name, {onLeave: function (args) {send("archive_format_name");}});

var archive_free = Module.findExportByName("archiveint.dll", "archive_free")
Interceptor.attach(archive_free, {onLeave: function (args) {send("archive_free");}});

var archive_liblz4_version = Module.findExportByName("archiveint.dll", "archive_liblz4_version")
Interceptor.attach(archive_liblz4_version, {onLeave: function (args) {send("archive_liblz4_version");}});

var archive_liblzma_version = Module.findExportByName("archiveint.dll", "archive_liblzma_version")
Interceptor.attach(archive_liblzma_version, {onLeave: function (args) {send("archive_liblzma_version");}});

var archive_libzstd_version = Module.findExportByName("archiveint.dll", "archive_libzstd_version")
Interceptor.attach(archive_libzstd_version, {onLeave: function (args) {send("archive_libzstd_version");}});

var archive_match_exclude_entry = Module.findExportByName("archiveint.dll", "archive_match_exclude_entry")
Interceptor.attach(archive_match_exclude_entry, {onLeave: function (args) {send("archive_match_exclude_entry");}});

var archive_match_exclude_pattern = Module.findExportByName("archiveint.dll", "archive_match_exclude_pattern")
Interceptor.attach(archive_match_exclude_pattern, {onLeave: function (args) {send("archive_match_exclude_pattern");}});

var archive_match_exclude_pattern_from_file = Module.findExportByName("archiveint.dll", "archive_match_exclude_pattern_from_file")
Interceptor.attach(archive_match_exclude_pattern_from_file, {onLeave: function (args) {send("archive_match_exclude_pattern_from_file");}});

var archive_match_exclude_pattern_from_file_w = Module.findExportByName("archiveint.dll", "archive_match_exclude_pattern_from_file_w")
Interceptor.attach(archive_match_exclude_pattern_from_file_w, {onLeave: function (args) {send("archive_match_exclude_pattern_from_file_w");}});

var archive_match_exclude_pattern_w = Module.findExportByName("archiveint.dll", "archive_match_exclude_pattern_w")
Interceptor.attach(archive_match_exclude_pattern_w, {onLeave: function (args) {send("archive_match_exclude_pattern_w");}});

var archive_match_excluded = Module.findExportByName("archiveint.dll", "archive_match_excluded")
Interceptor.attach(archive_match_excluded, {onLeave: function (args) {send("archive_match_excluded");}});

var archive_match_free = Module.findExportByName("archiveint.dll", "archive_match_free")
Interceptor.attach(archive_match_free, {onLeave: function (args) {send("archive_match_free");}});

var archive_match_include_date = Module.findExportByName("archiveint.dll", "archive_match_include_date")
Interceptor.attach(archive_match_include_date, {onLeave: function (args) {send("archive_match_include_date");}});

var archive_match_include_date_w = Module.findExportByName("archiveint.dll", "archive_match_include_date_w")
Interceptor.attach(archive_match_include_date_w, {onLeave: function (args) {send("archive_match_include_date_w");}});

var archive_match_include_file_time = Module.findExportByName("archiveint.dll", "archive_match_include_file_time")
Interceptor.attach(archive_match_include_file_time, {onLeave: function (args) {send("archive_match_include_file_time");}});

var archive_match_include_file_time_w = Module.findExportByName("archiveint.dll", "archive_match_include_file_time_w")
Interceptor.attach(archive_match_include_file_time_w, {onLeave: function (args) {send("archive_match_include_file_time_w");}});

var archive_match_include_gid = Module.findExportByName("archiveint.dll", "archive_match_include_gid")
Interceptor.attach(archive_match_include_gid, {onLeave: function (args) {send("archive_match_include_gid");}});

var archive_match_include_gname = Module.findExportByName("archiveint.dll", "archive_match_include_gname")
Interceptor.attach(archive_match_include_gname, {onLeave: function (args) {send("archive_match_include_gname");}});

var archive_match_include_gname_w = Module.findExportByName("archiveint.dll", "archive_match_include_gname_w")
Interceptor.attach(archive_match_include_gname_w, {onLeave: function (args) {send("archive_match_include_gname_w");}});

var archive_match_include_pattern = Module.findExportByName("archiveint.dll", "archive_match_include_pattern")
Interceptor.attach(archive_match_include_pattern, {onLeave: function (args) {send("archive_match_include_pattern");}});

var archive_match_include_pattern_from_file = Module.findExportByName("archiveint.dll", "archive_match_include_pattern_from_file")
Interceptor.attach(archive_match_include_pattern_from_file, {onLeave: function (args) {send("archive_match_include_pattern_from_file");}});

var archive_match_include_pattern_from_file_w = Module.findExportByName("archiveint.dll", "archive_match_include_pattern_from_file_w")
Interceptor.attach(archive_match_include_pattern_from_file_w, {onLeave: function (args) {send("archive_match_include_pattern_from_file_w");}});

var archive_match_include_pattern_w = Module.findExportByName("archiveint.dll", "archive_match_include_pattern_w")
Interceptor.attach(archive_match_include_pattern_w, {onLeave: function (args) {send("archive_match_include_pattern_w");}});

var archive_match_include_time = Module.findExportByName("archiveint.dll", "archive_match_include_time")
Interceptor.attach(archive_match_include_time, {onLeave: function (args) {send("archive_match_include_time");}});

var archive_match_include_uid = Module.findExportByName("archiveint.dll", "archive_match_include_uid")
Interceptor.attach(archive_match_include_uid, {onLeave: function (args) {send("archive_match_include_uid");}});

var archive_match_include_uname = Module.findExportByName("archiveint.dll", "archive_match_include_uname")
Interceptor.attach(archive_match_include_uname, {onLeave: function (args) {send("archive_match_include_uname");}});

var archive_match_include_uname_w = Module.findExportByName("archiveint.dll", "archive_match_include_uname_w")
Interceptor.attach(archive_match_include_uname_w, {onLeave: function (args) {send("archive_match_include_uname_w");}});

var archive_match_new = Module.findExportByName("archiveint.dll", "archive_match_new")
Interceptor.attach(archive_match_new, {onLeave: function (args) {send("archive_match_new");}});

var archive_match_owner_excluded = Module.findExportByName("archiveint.dll", "archive_match_owner_excluded")
Interceptor.attach(archive_match_owner_excluded, {onLeave: function (args) {send("archive_match_owner_excluded");}});

var archive_match_path_excluded = Module.findExportByName("archiveint.dll", "archive_match_path_excluded")
Interceptor.attach(archive_match_path_excluded, {onLeave: function (args) {send("archive_match_path_excluded");}});

var archive_match_path_unmatched_inclusions = Module.findExportByName("archiveint.dll", "archive_match_path_unmatched_inclusions")
Interceptor.attach(archive_match_path_unmatched_inclusions, {onLeave: function (args) {send("archive_match_path_unmatched_inclusions");}});

var archive_match_path_unmatched_inclusions_next = Module.findExportByName("archiveint.dll", "archive_match_path_unmatched_inclusions_next")
Interceptor.attach(archive_match_path_unmatched_inclusions_next, {onLeave: function (args) {send("archive_match_path_unmatched_inclusions_next");}});

var archive_match_path_unmatched_inclusions_next_w = Module.findExportByName("archiveint.dll", "archive_match_path_unmatched_inclusions_next_w")
Interceptor.attach(archive_match_path_unmatched_inclusions_next_w, {onLeave: function (args) {send("archive_match_path_unmatched_inclusions_next_w");}});

var archive_match_set_inclusion_recursion = Module.findExportByName("archiveint.dll", "archive_match_set_inclusion_recursion")
Interceptor.attach(archive_match_set_inclusion_recursion, {onLeave: function (args) {send("archive_match_set_inclusion_recursion");}});

var archive_match_time_excluded = Module.findExportByName("archiveint.dll", "archive_match_time_excluded")
Interceptor.attach(archive_match_time_excluded, {onLeave: function (args) {send("archive_match_time_excluded");}});

var archive_position_compressed = Module.findExportByName("archiveint.dll", "archive_position_compressed")
Interceptor.attach(archive_position_compressed, {onLeave: function (args) {send("archive_position_compressed");}});

var archive_position_uncompressed = Module.findExportByName("archiveint.dll", "archive_position_uncompressed")
Interceptor.attach(archive_position_uncompressed, {onLeave: function (args) {send("archive_position_uncompressed");}});

var archive_read_add_callback_data = Module.findExportByName("archiveint.dll", "archive_read_add_callback_data")
Interceptor.attach(archive_read_add_callback_data, {onLeave: function (args) {send("archive_read_add_callback_data");}});

var archive_read_add_passphrase = Module.findExportByName("archiveint.dll", "archive_read_add_passphrase")
Interceptor.attach(archive_read_add_passphrase, {onLeave: function (args) {send("archive_read_add_passphrase");}});

var archive_read_append_callback_data = Module.findExportByName("archiveint.dll", "archive_read_append_callback_data")
Interceptor.attach(archive_read_append_callback_data, {onLeave: function (args) {send("archive_read_append_callback_data");}});

var archive_read_append_filter = Module.findExportByName("archiveint.dll", "archive_read_append_filter")
Interceptor.attach(archive_read_append_filter, {onLeave: function (args) {send("archive_read_append_filter");}});

var archive_read_append_filter_program = Module.findExportByName("archiveint.dll", "archive_read_append_filter_program")
Interceptor.attach(archive_read_append_filter_program, {onLeave: function (args) {send("archive_read_append_filter_program");}});

var archive_read_append_filter_program_signature = Module.findExportByName("archiveint.dll", "archive_read_append_filter_program_signature")
Interceptor.attach(archive_read_append_filter_program_signature, {onLeave: function (args) {send("archive_read_append_filter_program_signature");}});

var archive_read_close = Module.findExportByName("archiveint.dll", "archive_read_close")
Interceptor.attach(archive_read_close, {onLeave: function (args) {send("archive_read_close");}});

var archive_read_data = Module.findExportByName("archiveint.dll", "archive_read_data")
Interceptor.attach(archive_read_data, {onLeave: function (args) {send("archive_read_data");}});

var archive_read_data_block = Module.findExportByName("archiveint.dll", "archive_read_data_block")
Interceptor.attach(archive_read_data_block, {onLeave: function (args) {send("archive_read_data_block");}});

var archive_read_data_into_fd = Module.findExportByName("archiveint.dll", "archive_read_data_into_fd")
Interceptor.attach(archive_read_data_into_fd, {onLeave: function (args) {send("archive_read_data_into_fd");}});

var archive_read_data_skip = Module.findExportByName("archiveint.dll", "archive_read_data_skip")
Interceptor.attach(archive_read_data_skip, {onLeave: function (args) {send("archive_read_data_skip");}});

var archive_read_disk_can_descend = Module.findExportByName("archiveint.dll", "archive_read_disk_can_descend")
Interceptor.attach(archive_read_disk_can_descend, {onLeave: function (args) {send("archive_read_disk_can_descend");}});

var archive_read_disk_current_filesystem = Module.findExportByName("archiveint.dll", "archive_read_disk_current_filesystem")
Interceptor.attach(archive_read_disk_current_filesystem, {onLeave: function (args) {send("archive_read_disk_current_filesystem");}});

var archive_read_disk_current_filesystem_is_remote = Module.findExportByName("archiveint.dll", "archive_read_disk_current_filesystem_is_remote")
Interceptor.attach(archive_read_disk_current_filesystem_is_remote, {onLeave: function (args) {send("archive_read_disk_current_filesystem_is_remote");}});

var archive_read_disk_current_filesystem_is_synthetic = Module.findExportByName("archiveint.dll", "archive_read_disk_current_filesystem_is_synthetic")
Interceptor.attach(archive_read_disk_current_filesystem_is_synthetic, {onLeave: function (args) {send("archive_read_disk_current_filesystem_is_synthetic");}});

var archive_read_disk_descend = Module.findExportByName("archiveint.dll", "archive_read_disk_descend")
Interceptor.attach(archive_read_disk_descend, {onLeave: function (args) {send("archive_read_disk_descend");}});

var archive_read_disk_entry_from_file = Module.findExportByName("archiveint.dll", "archive_read_disk_entry_from_file")
Interceptor.attach(archive_read_disk_entry_from_file, {onLeave: function (args) {send("archive_read_disk_entry_from_file");}});

var archive_read_disk_gname = Module.findExportByName("archiveint.dll", "archive_read_disk_gname")
Interceptor.attach(archive_read_disk_gname, {onLeave: function (args) {send("archive_read_disk_gname");}});

var archive_read_disk_new = Module.findExportByName("archiveint.dll", "archive_read_disk_new")
Interceptor.attach(archive_read_disk_new, {onLeave: function (args) {send("archive_read_disk_new");}});

var archive_read_disk_open = Module.findExportByName("archiveint.dll", "archive_read_disk_open")
Interceptor.attach(archive_read_disk_open, {onLeave: function (args) {send("archive_read_disk_open");}});

var archive_read_disk_open_w = Module.findExportByName("archiveint.dll", "archive_read_disk_open_w")
Interceptor.attach(archive_read_disk_open_w, {onLeave: function (args) {send("archive_read_disk_open_w");}});

var archive_read_disk_set_atime_restored = Module.findExportByName("archiveint.dll", "archive_read_disk_set_atime_restored")
Interceptor.attach(archive_read_disk_set_atime_restored, {onLeave: function (args) {send("archive_read_disk_set_atime_restored");}});

var archive_read_disk_set_behavior = Module.findExportByName("archiveint.dll", "archive_read_disk_set_behavior")
Interceptor.attach(archive_read_disk_set_behavior, {onLeave: function (args) {send("archive_read_disk_set_behavior");}});

var archive_read_disk_set_gname_lookup = Module.findExportByName("archiveint.dll", "archive_read_disk_set_gname_lookup")
Interceptor.attach(archive_read_disk_set_gname_lookup, {onLeave: function (args) {send("archive_read_disk_set_gname_lookup");}});

var archive_read_disk_set_matching = Module.findExportByName("archiveint.dll", "archive_read_disk_set_matching")
Interceptor.attach(archive_read_disk_set_matching, {onLeave: function (args) {send("archive_read_disk_set_matching");}});

var archive_read_disk_set_metadata_filter_callback = Module.findExportByName("archiveint.dll", "archive_read_disk_set_metadata_filter_callback")
Interceptor.attach(archive_read_disk_set_metadata_filter_callback, {onLeave: function (args) {send("archive_read_disk_set_metadata_filter_callback");}});

var archive_read_disk_set_standard_lookup = Module.findExportByName("archiveint.dll", "archive_read_disk_set_standard_lookup")
Interceptor.attach(archive_read_disk_set_standard_lookup, {onLeave: function (args) {send("archive_read_disk_set_standard_lookup");}});

var archive_read_disk_set_symlink_hybrid = Module.findExportByName("archiveint.dll", "archive_read_disk_set_symlink_hybrid")
Interceptor.attach(archive_read_disk_set_symlink_hybrid, {onLeave: function (args) {send("archive_read_disk_set_symlink_hybrid");}});

var archive_read_disk_set_symlink_logical = Module.findExportByName("archiveint.dll", "archive_read_disk_set_symlink_logical")
Interceptor.attach(archive_read_disk_set_symlink_logical, {onLeave: function (args) {send("archive_read_disk_set_symlink_logical");}});

var archive_read_disk_set_symlink_physical = Module.findExportByName("archiveint.dll", "archive_read_disk_set_symlink_physical")
Interceptor.attach(archive_read_disk_set_symlink_physical, {onLeave: function (args) {send("archive_read_disk_set_symlink_physical");}});

var archive_read_disk_set_uname_lookup = Module.findExportByName("archiveint.dll", "archive_read_disk_set_uname_lookup")
Interceptor.attach(archive_read_disk_set_uname_lookup, {onLeave: function (args) {send("archive_read_disk_set_uname_lookup");}});

var archive_read_disk_uname = Module.findExportByName("archiveint.dll", "archive_read_disk_uname")
Interceptor.attach(archive_read_disk_uname, {onLeave: function (args) {send("archive_read_disk_uname");}});

var archive_read_extract = Module.findExportByName("archiveint.dll", "archive_read_extract")
Interceptor.attach(archive_read_extract, {onLeave: function (args) {send("archive_read_extract");}});

var archive_read_extract2 = Module.findExportByName("archiveint.dll", "archive_read_extract2")
Interceptor.attach(archive_read_extract2, {onLeave: function (args) {send("archive_read_extract2");}});

var archive_read_extract_set_progress_callback = Module.findExportByName("archiveint.dll", "archive_read_extract_set_progress_callback")
Interceptor.attach(archive_read_extract_set_progress_callback, {onLeave: function (args) {send("archive_read_extract_set_progress_callback");}});

var archive_read_extract_set_skip_file = Module.findExportByName("archiveint.dll", "archive_read_extract_set_skip_file")
Interceptor.attach(archive_read_extract_set_skip_file, {onLeave: function (args) {send("archive_read_extract_set_skip_file");}});

var archive_read_finish = Module.findExportByName("archiveint.dll", "archive_read_finish")
Interceptor.attach(archive_read_finish, {onLeave: function (args) {send("archive_read_finish");}});

var archive_read_format_capabilities = Module.findExportByName("archiveint.dll", "archive_read_format_capabilities")
Interceptor.attach(archive_read_format_capabilities, {onLeave: function (args) {send("archive_read_format_capabilities");}});

var archive_read_free = Module.findExportByName("archiveint.dll", "archive_read_free")
Interceptor.attach(archive_read_free, {onLeave: function (args) {send("archive_read_free");}});

var archive_read_has_encrypted_entries = Module.findExportByName("archiveint.dll", "archive_read_has_encrypted_entries")
Interceptor.attach(archive_read_has_encrypted_entries, {onLeave: function (args) {send("archive_read_has_encrypted_entries");}});

var archive_read_header_position = Module.findExportByName("archiveint.dll", "archive_read_header_position")
Interceptor.attach(archive_read_header_position, {onLeave: function (args) {send("archive_read_header_position");}});

var archive_read_new = Module.findExportByName("archiveint.dll", "archive_read_new")
Interceptor.attach(archive_read_new, {onLeave: function (args) {send("archive_read_new");}});

var archive_read_next_header = Module.findExportByName("archiveint.dll", "archive_read_next_header")
Interceptor.attach(archive_read_next_header, {onLeave: function (args) {send("archive_read_next_header");}});

var archive_read_next_header2 = Module.findExportByName("archiveint.dll", "archive_read_next_header2")
Interceptor.attach(archive_read_next_header2, {onLeave: function (args) {send("archive_read_next_header2");}});

var archive_read_open = Module.findExportByName("archiveint.dll", "archive_read_open")
Interceptor.attach(archive_read_open, {onLeave: function (args) {send("archive_read_open");}});

var archive_read_open1 = Module.findExportByName("archiveint.dll", "archive_read_open1")
Interceptor.attach(archive_read_open1, {onLeave: function (args) {send("archive_read_open1");}});

var archive_read_open2 = Module.findExportByName("archiveint.dll", "archive_read_open2")
Interceptor.attach(archive_read_open2, {onLeave: function (args) {send("archive_read_open2");}});

var archive_read_open_FILE = Module.findExportByName("archiveint.dll", "archive_read_open_FILE")
Interceptor.attach(archive_read_open_FILE, {onLeave: function (args) {send("archive_read_open_FILE");}});

var archive_read_open_fd = Module.findExportByName("archiveint.dll", "archive_read_open_fd")
Interceptor.attach(archive_read_open_fd, {onLeave: function (args) {send("archive_read_open_fd");}});

var archive_read_open_file = Module.findExportByName("archiveint.dll", "archive_read_open_file")
Interceptor.attach(archive_read_open_file, {onLeave: function (args) {send("archive_read_open_file");}});

var archive_read_open_filename = Module.findExportByName("archiveint.dll", "archive_read_open_filename")
Interceptor.attach(archive_read_open_filename, {onLeave: function (args) {send("archive_read_open_filename");}});

var archive_read_open_filename_w = Module.findExportByName("archiveint.dll", "archive_read_open_filename_w")
Interceptor.attach(archive_read_open_filename_w, {onLeave: function (args) {send("archive_read_open_filename_w");}});

var archive_read_open_filenames = Module.findExportByName("archiveint.dll", "archive_read_open_filenames")
Interceptor.attach(archive_read_open_filenames, {onLeave: function (args) {send("archive_read_open_filenames");}});

var archive_read_open_memory = Module.findExportByName("archiveint.dll", "archive_read_open_memory")
Interceptor.attach(archive_read_open_memory, {onLeave: function (args) {send("archive_read_open_memory");}});

var archive_read_open_memory2 = Module.findExportByName("archiveint.dll", "archive_read_open_memory2")
Interceptor.attach(archive_read_open_memory2, {onLeave: function (args) {send("archive_read_open_memory2");}});

var archive_read_prepend_callback_data = Module.findExportByName("archiveint.dll", "archive_read_prepend_callback_data")
Interceptor.attach(archive_read_prepend_callback_data, {onLeave: function (args) {send("archive_read_prepend_callback_data");}});

var archive_read_set_callback_data = Module.findExportByName("archiveint.dll", "archive_read_set_callback_data")
Interceptor.attach(archive_read_set_callback_data, {onLeave: function (args) {send("archive_read_set_callback_data");}});

var archive_read_set_callback_data2 = Module.findExportByName("archiveint.dll", "archive_read_set_callback_data2")
Interceptor.attach(archive_read_set_callback_data2, {onLeave: function (args) {send("archive_read_set_callback_data2");}});

var archive_read_set_close_callback = Module.findExportByName("archiveint.dll", "archive_read_set_close_callback")
Interceptor.attach(archive_read_set_close_callback, {onLeave: function (args) {send("archive_read_set_close_callback");}});

var archive_read_set_filter_option = Module.findExportByName("archiveint.dll", "archive_read_set_filter_option")
Interceptor.attach(archive_read_set_filter_option, {onLeave: function (args) {send("archive_read_set_filter_option");}});

var archive_read_set_format = Module.findExportByName("archiveint.dll", "archive_read_set_format")
Interceptor.attach(archive_read_set_format, {onLeave: function (args) {send("archive_read_set_format");}});

var archive_read_set_format_option = Module.findExportByName("archiveint.dll", "archive_read_set_format_option")
Interceptor.attach(archive_read_set_format_option, {onLeave: function (args) {send("archive_read_set_format_option");}});

var archive_read_set_open_callback = Module.findExportByName("archiveint.dll", "archive_read_set_open_callback")
Interceptor.attach(archive_read_set_open_callback, {onLeave: function (args) {send("archive_read_set_open_callback");}});

var archive_read_set_option = Module.findExportByName("archiveint.dll", "archive_read_set_option")
Interceptor.attach(archive_read_set_option, {onLeave: function (args) {send("archive_read_set_option");}});

var archive_read_set_options = Module.findExportByName("archiveint.dll", "archive_read_set_options")
Interceptor.attach(archive_read_set_options, {onLeave: function (args) {send("archive_read_set_options");}});

var archive_read_set_passphrase_callback = Module.findExportByName("archiveint.dll", "archive_read_set_passphrase_callback")
Interceptor.attach(archive_read_set_passphrase_callback, {onLeave: function (args) {send("archive_read_set_passphrase_callback");}});

var archive_read_set_read_callback = Module.findExportByName("archiveint.dll", "archive_read_set_read_callback")
Interceptor.attach(archive_read_set_read_callback, {onLeave: function (args) {send("archive_read_set_read_callback");}});

var archive_read_set_seek_callback = Module.findExportByName("archiveint.dll", "archive_read_set_seek_callback")
Interceptor.attach(archive_read_set_seek_callback, {onLeave: function (args) {send("archive_read_set_seek_callback");}});

var archive_read_set_skip_callback = Module.findExportByName("archiveint.dll", "archive_read_set_skip_callback")
Interceptor.attach(archive_read_set_skip_callback, {onLeave: function (args) {send("archive_read_set_skip_callback");}});

var archive_read_set_switch_callback = Module.findExportByName("archiveint.dll", "archive_read_set_switch_callback")
Interceptor.attach(archive_read_set_switch_callback, {onLeave: function (args) {send("archive_read_set_switch_callback");}});

var archive_read_support_compression_all = Module.findExportByName("archiveint.dll", "archive_read_support_compression_all")
Interceptor.attach(archive_read_support_compression_all, {onLeave: function (args) {send("archive_read_support_compression_all");}});

var archive_read_support_compression_bzip2 = Module.findExportByName("archiveint.dll", "archive_read_support_compression_bzip2")
Interceptor.attach(archive_read_support_compression_bzip2, {onLeave: function (args) {send("archive_read_support_compression_bzip2");}});

var archive_read_support_compression_compress = Module.findExportByName("archiveint.dll", "archive_read_support_compression_compress")
Interceptor.attach(archive_read_support_compression_compress, {onLeave: function (args) {send("archive_read_support_compression_compress");}});

var archive_read_support_compression_gzip = Module.findExportByName("archiveint.dll", "archive_read_support_compression_gzip")
Interceptor.attach(archive_read_support_compression_gzip, {onLeave: function (args) {send("archive_read_support_compression_gzip");}});

var archive_read_support_compression_lzip = Module.findExportByName("archiveint.dll", "archive_read_support_compression_lzip")
Interceptor.attach(archive_read_support_compression_lzip, {onLeave: function (args) {send("archive_read_support_compression_lzip");}});

var archive_read_support_compression_lzma = Module.findExportByName("archiveint.dll", "archive_read_support_compression_lzma")
Interceptor.attach(archive_read_support_compression_lzma, {onLeave: function (args) {send("archive_read_support_compression_lzma");}});

var archive_read_support_compression_none = Module.findExportByName("archiveint.dll", "archive_read_support_compression_none")
Interceptor.attach(archive_read_support_compression_none, {onLeave: function (args) {send("archive_read_support_compression_none");}});

var archive_read_support_compression_program = Module.findExportByName("archiveint.dll", "archive_read_support_compression_program")
Interceptor.attach(archive_read_support_compression_program, {onLeave: function (args) {send("archive_read_support_compression_program");}});

var archive_read_support_compression_program_signature = Module.findExportByName("archiveint.dll", "archive_read_support_compression_program_signature")
Interceptor.attach(archive_read_support_compression_program_signature, {onLeave: function (args) {send("archive_read_support_compression_program_signature");}});

var archive_read_support_compression_rpm = Module.findExportByName("archiveint.dll", "archive_read_support_compression_rpm")
Interceptor.attach(archive_read_support_compression_rpm, {onLeave: function (args) {send("archive_read_support_compression_rpm");}});

var archive_read_support_compression_uu = Module.findExportByName("archiveint.dll", "archive_read_support_compression_uu")
Interceptor.attach(archive_read_support_compression_uu, {onLeave: function (args) {send("archive_read_support_compression_uu");}});

var archive_read_support_compression_xz = Module.findExportByName("archiveint.dll", "archive_read_support_compression_xz")
Interceptor.attach(archive_read_support_compression_xz, {onLeave: function (args) {send("archive_read_support_compression_xz");}});

var archive_read_support_filter_all = Module.findExportByName("archiveint.dll", "archive_read_support_filter_all")
Interceptor.attach(archive_read_support_filter_all, {onLeave: function (args) {send("archive_read_support_filter_all");}});

var archive_read_support_filter_by_code = Module.findExportByName("archiveint.dll", "archive_read_support_filter_by_code")
Interceptor.attach(archive_read_support_filter_by_code, {onLeave: function (args) {send("archive_read_support_filter_by_code");}});

var archive_read_support_filter_bzip2 = Module.findExportByName("archiveint.dll", "archive_read_support_filter_bzip2")
Interceptor.attach(archive_read_support_filter_bzip2, {onLeave: function (args) {send("archive_read_support_filter_bzip2");}});

var archive_read_support_filter_compress = Module.findExportByName("archiveint.dll", "archive_read_support_filter_compress")
Interceptor.attach(archive_read_support_filter_compress, {onLeave: function (args) {send("archive_read_support_filter_compress");}});

var archive_read_support_filter_grzip = Module.findExportByName("archiveint.dll", "archive_read_support_filter_grzip")
Interceptor.attach(archive_read_support_filter_grzip, {onLeave: function (args) {send("archive_read_support_filter_grzip");}});

var archive_read_support_filter_gzip = Module.findExportByName("archiveint.dll", "archive_read_support_filter_gzip")
Interceptor.attach(archive_read_support_filter_gzip, {onLeave: function (args) {send("archive_read_support_filter_gzip");}});

var archive_read_support_filter_lrzip = Module.findExportByName("archiveint.dll", "archive_read_support_filter_lrzip")
Interceptor.attach(archive_read_support_filter_lrzip, {onLeave: function (args) {send("archive_read_support_filter_lrzip");}});

var archive_read_support_filter_lz4 = Module.findExportByName("archiveint.dll", "archive_read_support_filter_lz4")
Interceptor.attach(archive_read_support_filter_lz4, {onLeave: function (args) {send("archive_read_support_filter_lz4");}});

var archive_read_support_filter_lzip = Module.findExportByName("archiveint.dll", "archive_read_support_filter_lzip")
Interceptor.attach(archive_read_support_filter_lzip, {onLeave: function (args) {send("archive_read_support_filter_lzip");}});

var archive_read_support_filter_lzma = Module.findExportByName("archiveint.dll", "archive_read_support_filter_lzma")
Interceptor.attach(archive_read_support_filter_lzma, {onLeave: function (args) {send("archive_read_support_filter_lzma");}});

var archive_read_support_filter_lzop = Module.findExportByName("archiveint.dll", "archive_read_support_filter_lzop")
Interceptor.attach(archive_read_support_filter_lzop, {onLeave: function (args) {send("archive_read_support_filter_lzop");}});

var archive_read_support_filter_none = Module.findExportByName("archiveint.dll", "archive_read_support_filter_none")
Interceptor.attach(archive_read_support_filter_none, {onLeave: function (args) {send("archive_read_support_filter_none");}});

var archive_read_support_filter_program = Module.findExportByName("archiveint.dll", "archive_read_support_filter_program")
Interceptor.attach(archive_read_support_filter_program, {onLeave: function (args) {send("archive_read_support_filter_program");}});

var archive_read_support_filter_program_signature = Module.findExportByName("archiveint.dll", "archive_read_support_filter_program_signature")
Interceptor.attach(archive_read_support_filter_program_signature, {onLeave: function (args) {send("archive_read_support_filter_program_signature");}});

var archive_read_support_filter_rpm = Module.findExportByName("archiveint.dll", "archive_read_support_filter_rpm")
Interceptor.attach(archive_read_support_filter_rpm, {onLeave: function (args) {send("archive_read_support_filter_rpm");}});

var archive_read_support_filter_uu = Module.findExportByName("archiveint.dll", "archive_read_support_filter_uu")
Interceptor.attach(archive_read_support_filter_uu, {onLeave: function (args) {send("archive_read_support_filter_uu");}});

var archive_read_support_filter_xz = Module.findExportByName("archiveint.dll", "archive_read_support_filter_xz")
Interceptor.attach(archive_read_support_filter_xz, {onLeave: function (args) {send("archive_read_support_filter_xz");}});

var archive_read_support_filter_zstd = Module.findExportByName("archiveint.dll", "archive_read_support_filter_zstd")
Interceptor.attach(archive_read_support_filter_zstd, {onLeave: function (args) {send("archive_read_support_filter_zstd");}});

var archive_read_support_format_7zip = Module.findExportByName("archiveint.dll", "archive_read_support_format_7zip")
Interceptor.attach(archive_read_support_format_7zip, {onLeave: function (args) {send("archive_read_support_format_7zip");}});

var archive_read_support_format_all = Module.findExportByName("archiveint.dll", "archive_read_support_format_all")
Interceptor.attach(archive_read_support_format_all, {onLeave: function (args) {send("archive_read_support_format_all");}});

var archive_read_support_format_ar = Module.findExportByName("archiveint.dll", "archive_read_support_format_ar")
Interceptor.attach(archive_read_support_format_ar, {onLeave: function (args) {send("archive_read_support_format_ar");}});

var archive_read_support_format_by_code = Module.findExportByName("archiveint.dll", "archive_read_support_format_by_code")
Interceptor.attach(archive_read_support_format_by_code, {onLeave: function (args) {send("archive_read_support_format_by_code");}});

var archive_read_support_format_cab = Module.findExportByName("archiveint.dll", "archive_read_support_format_cab")
Interceptor.attach(archive_read_support_format_cab, {onLeave: function (args) {send("archive_read_support_format_cab");}});

var archive_read_support_format_cpio = Module.findExportByName("archiveint.dll", "archive_read_support_format_cpio")
Interceptor.attach(archive_read_support_format_cpio, {onLeave: function (args) {send("archive_read_support_format_cpio");}});

var archive_read_support_format_empty = Module.findExportByName("archiveint.dll", "archive_read_support_format_empty")
Interceptor.attach(archive_read_support_format_empty, {onLeave: function (args) {send("archive_read_support_format_empty");}});

var archive_read_support_format_gnutar = Module.findExportByName("archiveint.dll", "archive_read_support_format_gnutar")
Interceptor.attach(archive_read_support_format_gnutar, {onLeave: function (args) {send("archive_read_support_format_gnutar");}});

var archive_read_support_format_iso9660 = Module.findExportByName("archiveint.dll", "archive_read_support_format_iso9660")
Interceptor.attach(archive_read_support_format_iso9660, {onLeave: function (args) {send("archive_read_support_format_iso9660");}});

var archive_read_support_format_lha = Module.findExportByName("archiveint.dll", "archive_read_support_format_lha")
Interceptor.attach(archive_read_support_format_lha, {onLeave: function (args) {send("archive_read_support_format_lha");}});

var archive_read_support_format_mtree = Module.findExportByName("archiveint.dll", "archive_read_support_format_mtree")
Interceptor.attach(archive_read_support_format_mtree, {onLeave: function (args) {send("archive_read_support_format_mtree");}});

var archive_read_support_format_rar = Module.findExportByName("archiveint.dll", "archive_read_support_format_rar")
Interceptor.attach(archive_read_support_format_rar, {onLeave: function (args) {send("archive_read_support_format_rar");}});

var archive_read_support_format_rar5 = Module.findExportByName("archiveint.dll", "archive_read_support_format_rar5")
Interceptor.attach(archive_read_support_format_rar5, {onLeave: function (args) {send("archive_read_support_format_rar5");}});

var archive_read_support_format_raw = Module.findExportByName("archiveint.dll", "archive_read_support_format_raw")
Interceptor.attach(archive_read_support_format_raw, {onLeave: function (args) {send("archive_read_support_format_raw");}});

var archive_read_support_format_tar = Module.findExportByName("archiveint.dll", "archive_read_support_format_tar")
Interceptor.attach(archive_read_support_format_tar, {onLeave: function (args) {send("archive_read_support_format_tar");}});

var archive_read_support_format_warc = Module.findExportByName("archiveint.dll", "archive_read_support_format_warc")
Interceptor.attach(archive_read_support_format_warc, {onLeave: function (args) {send("archive_read_support_format_warc");}});

var archive_read_support_format_xar = Module.findExportByName("archiveint.dll", "archive_read_support_format_xar")
Interceptor.attach(archive_read_support_format_xar, {onLeave: function (args) {send("archive_read_support_format_xar");}});

var archive_read_support_format_zip = Module.findExportByName("archiveint.dll", "archive_read_support_format_zip")
Interceptor.attach(archive_read_support_format_zip, {onLeave: function (args) {send("archive_read_support_format_zip");}});

var archive_read_support_format_zip_seekable = Module.findExportByName("archiveint.dll", "archive_read_support_format_zip_seekable")
Interceptor.attach(archive_read_support_format_zip_seekable, {onLeave: function (args) {send("archive_read_support_format_zip_seekable");}});

var archive_read_support_format_zip_streamable = Module.findExportByName("archiveint.dll", "archive_read_support_format_zip_streamable")
Interceptor.attach(archive_read_support_format_zip_streamable, {onLeave: function (args) {send("archive_read_support_format_zip_streamable");}});

var archive_seek_data = Module.findExportByName("archiveint.dll", "archive_seek_data")
Interceptor.attach(archive_seek_data, {onLeave: function (args) {send("archive_seek_data");}});

var archive_set_error = Module.findExportByName("archiveint.dll", "archive_set_error")
Interceptor.attach(archive_set_error, {onLeave: function (args) {send("archive_set_error");}});

var archive_utility_string_sort = Module.findExportByName("archiveint.dll", "archive_utility_string_sort")
Interceptor.attach(archive_utility_string_sort, {onLeave: function (args) {send("archive_utility_string_sort");}});

var archive_version_details = Module.findExportByName("archiveint.dll", "archive_version_details")
Interceptor.attach(archive_version_details, {onLeave: function (args) {send("archive_version_details");}});

var archive_version_number = Module.findExportByName("archiveint.dll", "archive_version_number")
Interceptor.attach(archive_version_number, {onLeave: function (args) {send("archive_version_number");}});

var archive_version_string = Module.findExportByName("archiveint.dll", "archive_version_string")
Interceptor.attach(archive_version_string, {onLeave: function (args) {send("archive_version_string");}});

var archive_write_add_filter = Module.findExportByName("archiveint.dll", "archive_write_add_filter")
Interceptor.attach(archive_write_add_filter, {onLeave: function (args) {send("archive_write_add_filter");}});

var archive_write_add_filter_b64encode = Module.findExportByName("archiveint.dll", "archive_write_add_filter_b64encode")
Interceptor.attach(archive_write_add_filter_b64encode, {onLeave: function (args) {send("archive_write_add_filter_b64encode");}});

var archive_write_add_filter_by_name = Module.findExportByName("archiveint.dll", "archive_write_add_filter_by_name")
Interceptor.attach(archive_write_add_filter_by_name, {onLeave: function (args) {send("archive_write_add_filter_by_name");}});

var archive_write_add_filter_bzip2 = Module.findExportByName("archiveint.dll", "archive_write_add_filter_bzip2")
Interceptor.attach(archive_write_add_filter_bzip2, {onLeave: function (args) {send("archive_write_add_filter_bzip2");}});

var archive_write_add_filter_compress = Module.findExportByName("archiveint.dll", "archive_write_add_filter_compress")
Interceptor.attach(archive_write_add_filter_compress, {onLeave: function (args) {send("archive_write_add_filter_compress");}});

var archive_write_add_filter_grzip = Module.findExportByName("archiveint.dll", "archive_write_add_filter_grzip")
Interceptor.attach(archive_write_add_filter_grzip, {onLeave: function (args) {send("archive_write_add_filter_grzip");}});

var archive_write_add_filter_gzip = Module.findExportByName("archiveint.dll", "archive_write_add_filter_gzip")
Interceptor.attach(archive_write_add_filter_gzip, {onLeave: function (args) {send("archive_write_add_filter_gzip");}});

var archive_write_add_filter_lrzip = Module.findExportByName("archiveint.dll", "archive_write_add_filter_lrzip")
Interceptor.attach(archive_write_add_filter_lrzip, {onLeave: function (args) {send("archive_write_add_filter_lrzip");}});

var archive_write_add_filter_lz4 = Module.findExportByName("archiveint.dll", "archive_write_add_filter_lz4")
Interceptor.attach(archive_write_add_filter_lz4, {onLeave: function (args) {send("archive_write_add_filter_lz4");}});

var archive_write_add_filter_lzip = Module.findExportByName("archiveint.dll", "archive_write_add_filter_lzip")
Interceptor.attach(archive_write_add_filter_lzip, {onLeave: function (args) {send("archive_write_add_filter_lzip");}});

var archive_write_add_filter_lzma = Module.findExportByName("archiveint.dll", "archive_write_add_filter_lzma")
Interceptor.attach(archive_write_add_filter_lzma, {onLeave: function (args) {send("archive_write_add_filter_lzma");}});

var archive_write_add_filter_lzop = Module.findExportByName("archiveint.dll", "archive_write_add_filter_lzop")
Interceptor.attach(archive_write_add_filter_lzop, {onLeave: function (args) {send("archive_write_add_filter_lzop");}});

var archive_write_add_filter_none = Module.findExportByName("archiveint.dll", "archive_write_add_filter_none")
Interceptor.attach(archive_write_add_filter_none, {onLeave: function (args) {send("archive_write_add_filter_none");}});

var archive_write_add_filter_program = Module.findExportByName("archiveint.dll", "archive_write_add_filter_program")
Interceptor.attach(archive_write_add_filter_program, {onLeave: function (args) {send("archive_write_add_filter_program");}});

var archive_write_add_filter_uuencode = Module.findExportByName("archiveint.dll", "archive_write_add_filter_uuencode")
Interceptor.attach(archive_write_add_filter_uuencode, {onLeave: function (args) {send("archive_write_add_filter_uuencode");}});

var archive_write_add_filter_xz = Module.findExportByName("archiveint.dll", "archive_write_add_filter_xz")
Interceptor.attach(archive_write_add_filter_xz, {onLeave: function (args) {send("archive_write_add_filter_xz");}});

var archive_write_add_filter_zstd = Module.findExportByName("archiveint.dll", "archive_write_add_filter_zstd")
Interceptor.attach(archive_write_add_filter_zstd, {onLeave: function (args) {send("archive_write_add_filter_zstd");}});

var archive_write_close = Module.findExportByName("archiveint.dll", "archive_write_close")
Interceptor.attach(archive_write_close, {onLeave: function (args) {send("archive_write_close");}});

var archive_write_data = Module.findExportByName("archiveint.dll", "archive_write_data")
Interceptor.attach(archive_write_data, {onLeave: function (args) {send("archive_write_data");}});

var archive_write_data_block = Module.findExportByName("archiveint.dll", "archive_write_data_block")
Interceptor.attach(archive_write_data_block, {onLeave: function (args) {send("archive_write_data_block");}});

var archive_write_disk_gid = Module.findExportByName("archiveint.dll", "archive_write_disk_gid")
Interceptor.attach(archive_write_disk_gid, {onLeave: function (args) {send("archive_write_disk_gid");}});

var archive_write_disk_new = Module.findExportByName("archiveint.dll", "archive_write_disk_new")
Interceptor.attach(archive_write_disk_new, {onLeave: function (args) {send("archive_write_disk_new");}});

var archive_write_disk_set_group_lookup = Module.findExportByName("archiveint.dll", "archive_write_disk_set_group_lookup")
Interceptor.attach(archive_write_disk_set_group_lookup, {onLeave: function (args) {send("archive_write_disk_set_group_lookup");}});

var archive_write_disk_set_options = Module.findExportByName("archiveint.dll", "archive_write_disk_set_options")
Interceptor.attach(archive_write_disk_set_options, {onLeave: function (args) {send("archive_write_disk_set_options");}});

var archive_write_disk_set_skip_file = Module.findExportByName("archiveint.dll", "archive_write_disk_set_skip_file")
Interceptor.attach(archive_write_disk_set_skip_file, {onLeave: function (args) {send("archive_write_disk_set_skip_file");}});

var archive_write_disk_set_standard_lookup = Module.findExportByName("archiveint.dll", "archive_write_disk_set_standard_lookup")
Interceptor.attach(archive_write_disk_set_standard_lookup, {onLeave: function (args) {send("archive_write_disk_set_standard_lookup");}});

var archive_write_disk_set_user_lookup = Module.findExportByName("archiveint.dll", "archive_write_disk_set_user_lookup")
Interceptor.attach(archive_write_disk_set_user_lookup, {onLeave: function (args) {send("archive_write_disk_set_user_lookup");}});

var archive_write_disk_uid = Module.findExportByName("archiveint.dll", "archive_write_disk_uid")
Interceptor.attach(archive_write_disk_uid, {onLeave: function (args) {send("archive_write_disk_uid");}});

var archive_write_fail = Module.findExportByName("archiveint.dll", "archive_write_fail")
Interceptor.attach(archive_write_fail, {onLeave: function (args) {send("archive_write_fail");}});

var archive_write_finish = Module.findExportByName("archiveint.dll", "archive_write_finish")
Interceptor.attach(archive_write_finish, {onLeave: function (args) {send("archive_write_finish");}});

var archive_write_finish_entry = Module.findExportByName("archiveint.dll", "archive_write_finish_entry")
Interceptor.attach(archive_write_finish_entry, {onLeave: function (args) {send("archive_write_finish_entry");}});

var archive_write_free = Module.findExportByName("archiveint.dll", "archive_write_free")
Interceptor.attach(archive_write_free, {onLeave: function (args) {send("archive_write_free");}});

var archive_write_get_bytes_in_last_block = Module.findExportByName("archiveint.dll", "archive_write_get_bytes_in_last_block")
Interceptor.attach(archive_write_get_bytes_in_last_block, {onLeave: function (args) {send("archive_write_get_bytes_in_last_block");}});

var archive_write_get_bytes_per_block = Module.findExportByName("archiveint.dll", "archive_write_get_bytes_per_block")
Interceptor.attach(archive_write_get_bytes_per_block, {onLeave: function (args) {send("archive_write_get_bytes_per_block");}});

var archive_write_header = Module.findExportByName("archiveint.dll", "archive_write_header")
Interceptor.attach(archive_write_header, {onLeave: function (args) {send("archive_write_header");}});

var archive_write_new = Module.findExportByName("archiveint.dll", "archive_write_new")
Interceptor.attach(archive_write_new, {onLeave: function (args) {send("archive_write_new");}});

var archive_write_open = Module.findExportByName("archiveint.dll", "archive_write_open")
Interceptor.attach(archive_write_open, {onLeave: function (args) {send("archive_write_open");}});

var archive_write_open2 = Module.findExportByName("archiveint.dll", "archive_write_open2")
Interceptor.attach(archive_write_open2, {onLeave: function (args) {send("archive_write_open2");}});

var archive_write_open_FILE = Module.findExportByName("archiveint.dll", "archive_write_open_FILE")
Interceptor.attach(archive_write_open_FILE, {onLeave: function (args) {send("archive_write_open_FILE");}});

var archive_write_open_fd = Module.findExportByName("archiveint.dll", "archive_write_open_fd")
Interceptor.attach(archive_write_open_fd, {onLeave: function (args) {send("archive_write_open_fd");}});

var archive_write_open_file = Module.findExportByName("archiveint.dll", "archive_write_open_file")
Interceptor.attach(archive_write_open_file, {onLeave: function (args) {send("archive_write_open_file");}});

var archive_write_open_filename = Module.findExportByName("archiveint.dll", "archive_write_open_filename")
Interceptor.attach(archive_write_open_filename, {onLeave: function (args) {send("archive_write_open_filename");}});

var archive_write_open_filename_w = Module.findExportByName("archiveint.dll", "archive_write_open_filename_w")
Interceptor.attach(archive_write_open_filename_w, {onLeave: function (args) {send("archive_write_open_filename_w");}});

var archive_write_open_memory = Module.findExportByName("archiveint.dll", "archive_write_open_memory")
Interceptor.attach(archive_write_open_memory, {onLeave: function (args) {send("archive_write_open_memory");}});

var archive_write_set_bytes_in_last_block = Module.findExportByName("archiveint.dll", "archive_write_set_bytes_in_last_block")
Interceptor.attach(archive_write_set_bytes_in_last_block, {onLeave: function (args) {send("archive_write_set_bytes_in_last_block");}});

var archive_write_set_bytes_per_block = Module.findExportByName("archiveint.dll", "archive_write_set_bytes_per_block")
Interceptor.attach(archive_write_set_bytes_per_block, {onLeave: function (args) {send("archive_write_set_bytes_per_block");}});

var archive_write_set_compression_bzip2 = Module.findExportByName("archiveint.dll", "archive_write_set_compression_bzip2")
Interceptor.attach(archive_write_set_compression_bzip2, {onLeave: function (args) {send("archive_write_set_compression_bzip2");}});

var archive_write_set_compression_compress = Module.findExportByName("archiveint.dll", "archive_write_set_compression_compress")
Interceptor.attach(archive_write_set_compression_compress, {onLeave: function (args) {send("archive_write_set_compression_compress");}});

var archive_write_set_compression_gzip = Module.findExportByName("archiveint.dll", "archive_write_set_compression_gzip")
Interceptor.attach(archive_write_set_compression_gzip, {onLeave: function (args) {send("archive_write_set_compression_gzip");}});

var archive_write_set_compression_lzip = Module.findExportByName("archiveint.dll", "archive_write_set_compression_lzip")
Interceptor.attach(archive_write_set_compression_lzip, {onLeave: function (args) {send("archive_write_set_compression_lzip");}});

var archive_write_set_compression_lzma = Module.findExportByName("archiveint.dll", "archive_write_set_compression_lzma")
Interceptor.attach(archive_write_set_compression_lzma, {onLeave: function (args) {send("archive_write_set_compression_lzma");}});

var archive_write_set_compression_none = Module.findExportByName("archiveint.dll", "archive_write_set_compression_none")
Interceptor.attach(archive_write_set_compression_none, {onLeave: function (args) {send("archive_write_set_compression_none");}});

var archive_write_set_compression_program = Module.findExportByName("archiveint.dll", "archive_write_set_compression_program")
Interceptor.attach(archive_write_set_compression_program, {onLeave: function (args) {send("archive_write_set_compression_program");}});

var archive_write_set_compression_xz = Module.findExportByName("archiveint.dll", "archive_write_set_compression_xz")
Interceptor.attach(archive_write_set_compression_xz, {onLeave: function (args) {send("archive_write_set_compression_xz");}});

var archive_write_set_filter_option = Module.findExportByName("archiveint.dll", "archive_write_set_filter_option")
Interceptor.attach(archive_write_set_filter_option, {onLeave: function (args) {send("archive_write_set_filter_option");}});

var archive_write_set_format = Module.findExportByName("archiveint.dll", "archive_write_set_format")
Interceptor.attach(archive_write_set_format, {onLeave: function (args) {send("archive_write_set_format");}});

var archive_write_set_format_7zip = Module.findExportByName("archiveint.dll", "archive_write_set_format_7zip")
Interceptor.attach(archive_write_set_format_7zip, {onLeave: function (args) {send("archive_write_set_format_7zip");}});

var archive_write_set_format_ar_bsd = Module.findExportByName("archiveint.dll", "archive_write_set_format_ar_bsd")
Interceptor.attach(archive_write_set_format_ar_bsd, {onLeave: function (args) {send("archive_write_set_format_ar_bsd");}});

var archive_write_set_format_ar_svr4 = Module.findExportByName("archiveint.dll", "archive_write_set_format_ar_svr4")
Interceptor.attach(archive_write_set_format_ar_svr4, {onLeave: function (args) {send("archive_write_set_format_ar_svr4");}});

var archive_write_set_format_by_name = Module.findExportByName("archiveint.dll", "archive_write_set_format_by_name")
Interceptor.attach(archive_write_set_format_by_name, {onLeave: function (args) {send("archive_write_set_format_by_name");}});

var archive_write_set_format_cpio = Module.findExportByName("archiveint.dll", "archive_write_set_format_cpio")
Interceptor.attach(archive_write_set_format_cpio, {onLeave: function (args) {send("archive_write_set_format_cpio");}});

var archive_write_set_format_cpio_bin = Module.findExportByName("archiveint.dll", "archive_write_set_format_cpio_bin")
Interceptor.attach(archive_write_set_format_cpio_bin, {onLeave: function (args) {send("archive_write_set_format_cpio_bin");}});

var archive_write_set_format_cpio_newc = Module.findExportByName("archiveint.dll", "archive_write_set_format_cpio_newc")
Interceptor.attach(archive_write_set_format_cpio_newc, {onLeave: function (args) {send("archive_write_set_format_cpio_newc");}});

var archive_write_set_format_cpio_odc = Module.findExportByName("archiveint.dll", "archive_write_set_format_cpio_odc")
Interceptor.attach(archive_write_set_format_cpio_odc, {onLeave: function (args) {send("archive_write_set_format_cpio_odc");}});

var archive_write_set_format_cpio_pwb = Module.findExportByName("archiveint.dll", "archive_write_set_format_cpio_pwb")
Interceptor.attach(archive_write_set_format_cpio_pwb, {onLeave: function (args) {send("archive_write_set_format_cpio_pwb");}});

var archive_write_set_format_filter_by_ext = Module.findExportByName("archiveint.dll", "archive_write_set_format_filter_by_ext")
Interceptor.attach(archive_write_set_format_filter_by_ext, {onLeave: function (args) {send("archive_write_set_format_filter_by_ext");}});

var archive_write_set_format_filter_by_ext_def = Module.findExportByName("archiveint.dll", "archive_write_set_format_filter_by_ext_def")
Interceptor.attach(archive_write_set_format_filter_by_ext_def, {onLeave: function (args) {send("archive_write_set_format_filter_by_ext_def");}});

var archive_write_set_format_gnutar = Module.findExportByName("archiveint.dll", "archive_write_set_format_gnutar")
Interceptor.attach(archive_write_set_format_gnutar, {onLeave: function (args) {send("archive_write_set_format_gnutar");}});

var archive_write_set_format_iso9660 = Module.findExportByName("archiveint.dll", "archive_write_set_format_iso9660")
Interceptor.attach(archive_write_set_format_iso9660, {onLeave: function (args) {send("archive_write_set_format_iso9660");}});

var archive_write_set_format_mtree = Module.findExportByName("archiveint.dll", "archive_write_set_format_mtree")
Interceptor.attach(archive_write_set_format_mtree, {onLeave: function (args) {send("archive_write_set_format_mtree");}});

var archive_write_set_format_mtree_classic = Module.findExportByName("archiveint.dll", "archive_write_set_format_mtree_classic")
Interceptor.attach(archive_write_set_format_mtree_classic, {onLeave: function (args) {send("archive_write_set_format_mtree_classic");}});

var archive_write_set_format_option = Module.findExportByName("archiveint.dll", "archive_write_set_format_option")
Interceptor.attach(archive_write_set_format_option, {onLeave: function (args) {send("archive_write_set_format_option");}});

var archive_write_set_format_pax = Module.findExportByName("archiveint.dll", "archive_write_set_format_pax")
Interceptor.attach(archive_write_set_format_pax, {onLeave: function (args) {send("archive_write_set_format_pax");}});

var archive_write_set_format_pax_restricted = Module.findExportByName("archiveint.dll", "archive_write_set_format_pax_restricted")
Interceptor.attach(archive_write_set_format_pax_restricted, {onLeave: function (args) {send("archive_write_set_format_pax_restricted");}});

var archive_write_set_format_raw = Module.findExportByName("archiveint.dll", "archive_write_set_format_raw")
Interceptor.attach(archive_write_set_format_raw, {onLeave: function (args) {send("archive_write_set_format_raw");}});

var archive_write_set_format_shar = Module.findExportByName("archiveint.dll", "archive_write_set_format_shar")
Interceptor.attach(archive_write_set_format_shar, {onLeave: function (args) {send("archive_write_set_format_shar");}});

var archive_write_set_format_shar_dump = Module.findExportByName("archiveint.dll", "archive_write_set_format_shar_dump")
Interceptor.attach(archive_write_set_format_shar_dump, {onLeave: function (args) {send("archive_write_set_format_shar_dump");}});

var archive_write_set_format_ustar = Module.findExportByName("archiveint.dll", "archive_write_set_format_ustar")
Interceptor.attach(archive_write_set_format_ustar, {onLeave: function (args) {send("archive_write_set_format_ustar");}});

var archive_write_set_format_v7tar = Module.findExportByName("archiveint.dll", "archive_write_set_format_v7tar")
Interceptor.attach(archive_write_set_format_v7tar, {onLeave: function (args) {send("archive_write_set_format_v7tar");}});

var archive_write_set_format_warc = Module.findExportByName("archiveint.dll", "archive_write_set_format_warc")
Interceptor.attach(archive_write_set_format_warc, {onLeave: function (args) {send("archive_write_set_format_warc");}});

var archive_write_set_format_xar = Module.findExportByName("archiveint.dll", "archive_write_set_format_xar")
Interceptor.attach(archive_write_set_format_xar, {onLeave: function (args) {send("archive_write_set_format_xar");}});

var archive_write_set_format_zip = Module.findExportByName("archiveint.dll", "archive_write_set_format_zip")
Interceptor.attach(archive_write_set_format_zip, {onLeave: function (args) {send("archive_write_set_format_zip");}});

var archive_write_set_option = Module.findExportByName("archiveint.dll", "archive_write_set_option")
Interceptor.attach(archive_write_set_option, {onLeave: function (args) {send("archive_write_set_option");}});

var archive_write_set_options = Module.findExportByName("archiveint.dll", "archive_write_set_options")
Interceptor.attach(archive_write_set_options, {onLeave: function (args) {send("archive_write_set_options");}});

var archive_write_set_passphrase = Module.findExportByName("archiveint.dll", "archive_write_set_passphrase")
Interceptor.attach(archive_write_set_passphrase, {onLeave: function (args) {send("archive_write_set_passphrase");}});

var archive_write_set_passphrase_callback = Module.findExportByName("archiveint.dll", "archive_write_set_passphrase_callback")
Interceptor.attach(archive_write_set_passphrase_callback, {onLeave: function (args) {send("archive_write_set_passphrase_callback");}});

var archive_write_set_skip_file = Module.findExportByName("archiveint.dll", "archive_write_set_skip_file")
Interceptor.attach(archive_write_set_skip_file, {onLeave: function (args) {send("archive_write_set_skip_file");}});

var archive_write_zip_set_compression_deflate = Module.findExportByName("archiveint.dll", "archive_write_zip_set_compression_deflate")
Interceptor.attach(archive_write_zip_set_compression_deflate, {onLeave: function (args) {send("archive_write_zip_set_compression_deflate");}});

var archive_write_zip_set_compression_store = Module.findExportByName("archiveint.dll", "archive_write_zip_set_compression_store")
Interceptor.attach(archive_write_zip_set_compression_store, {onLeave: function (args) {send("archive_write_zip_set_compression_store");}});

var archive_zlib_version = Module.findExportByName("archiveint.dll", "archive_zlib_version")
Interceptor.attach(archive_zlib_version, {onLeave: function (args) {send("archive_zlib_version");}});

