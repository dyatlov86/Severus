var ??0AugLoop_HttpRequestCompletionCallback@@QEAA@XZ = Module.findExportByName("msedge.dll", "??0AugLoop_HttpRequestCompletionCallback@@QEAA@XZ")
Interceptor.attach(??0AugLoop_HttpRequestCompletionCallback@@QEAA@XZ, {onLeave: function (args) {send("??0AugLoop_HttpRequestCompletionCallback@@QEAA@XZ");}});

var ??0AugLoop_NetworkConnectionCompletionCallback@@QEAA@XZ = Module.findExportByName("msedge.dll", "??0AugLoop_NetworkConnectionCompletionCallback@@QEAA@XZ")
Interceptor.attach(??0AugLoop_NetworkConnectionCompletionCallback@@QEAA@XZ, {onLeave: function (args) {send("??0AugLoop_NetworkConnectionCompletionCallback@@QEAA@XZ");}});

var ??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z = Module.findExportByName("msedge.dll", "??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z")
Interceptor.attach(??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z, {onLeave: function (args) {send("??0IDataFieldVisitor@telemetry_client@@QEAA@AEBV01@@Z");}});

var ??0IDataFieldVisitor@telemetry_client@@QEAA@XZ = Module.findExportByName("msedge.dll", "??0IDataFieldVisitor@telemetry_client@@QEAA@XZ")
Interceptor.attach(??0IDataFieldVisitor@telemetry_client@@QEAA@XZ, {onLeave: function (args) {send("??0IDataFieldVisitor@telemetry_client@@QEAA@XZ");}});

var ??1IDataFieldVisitor@telemetry_client@@UEAA@XZ = Module.findExportByName("msedge.dll", "??1IDataFieldVisitor@telemetry_client@@UEAA@XZ")
Interceptor.attach(??1IDataFieldVisitor@telemetry_client@@UEAA@XZ, {onLeave: function (args) {send("??1IDataFieldVisitor@telemetry_client@@UEAA@XZ");}});

var ??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@$$QEAU0@@Z = Module.findExportByName("msedge.dll", "??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@$$QEAU0@@Z")
Interceptor.attach(??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@$$QEAU0@@Z, {onLeave: function (args) {send("??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@$$QEAU0@@Z");}});

var ??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@AEBU0@@Z = Module.findExportByName("msedge.dll", "??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@AEBU0@@Z")
Interceptor.attach(??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@AEBU0@@Z, {onLeave: function (args) {send("??4AugLoop_BinaryDataDownloadParams@@QEAAAEAU0@AEBU0@@Z");}});

var ??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z = Module.findExportByName("msedge.dll", "??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z")
Interceptor.attach(??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z, {onLeave: function (args) {send("??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z");}});

var ??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@AEBU0@@Z = Module.findExportByName("msedge.dll", "??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@AEBU0@@Z")
Interceptor.attach(??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@AEBU0@@Z, {onLeave: function (args) {send("??4AugLoop_HttpRequestCompletionCallback@@QEAAAEAU0@AEBU0@@Z");}});

var ??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z = Module.findExportByName("msedge.dll", "??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z")
Interceptor.attach(??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z, {onLeave: function (args) {send("??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@$$QEAU0@@Z");}});

var ??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@AEBU0@@Z = Module.findExportByName("msedge.dll", "??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@AEBU0@@Z")
Interceptor.attach(??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@AEBU0@@Z, {onLeave: function (args) {send("??4AugLoop_NetworkConnectionCompletionCallback@@QEAAAEAU0@AEBU0@@Z");}});

var ??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z = Module.findExportByName("msedge.dll", "??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z")
Interceptor.attach(??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z, {onLeave: function (args) {send("??4IDataFieldVisitor@telemetry_client@@QEAAAEAV01@AEBV01@@Z");}});

var ??_7IDataFieldVisitor@telemetry_client@@6B@ = Module.findExportByName("msedge.dll", "??_7IDataFieldVisitor@telemetry_client@@6B@")
Interceptor.attach(??_7IDataFieldVisitor@telemetry_client@@6B@, {onLeave: function (args) {send("??_7IDataFieldVisitor@telemetry_client@@6B@");}});

var ChromeMain = Module.findExportByName("msedge.dll", "ChromeMain")
Interceptor.attach(ChromeMain, {onLeave: function (args) {send("ChromeMain");}});

var CrashForExceptionInNonABICompliantCodeRange = Module.findExportByName("msedge.dll", "CrashForExceptionInNonABICompliantCodeRange")
Interceptor.attach(CrashForExceptionInNonABICompliantCodeRange, {onLeave: function (args) {send("CrashForExceptionInNonABICompliantCodeRange");}});

var EdgeLaunchBrowserToHandleBackgroundTaskEvent = Module.findExportByName("msedge.dll", "EdgeLaunchBrowserToHandleBackgroundTaskEvent")
Interceptor.attach(EdgeLaunchBrowserToHandleBackgroundTaskEvent, {onLeave: function (args) {send("EdgeLaunchBrowserToHandleBackgroundTaskEvent");}});

var ExportSpartanCookies = Module.findExportByName("msedge.dll", "ExportSpartanCookies")
Interceptor.attach(ExportSpartanCookies, {onLeave: function (args) {send("ExportSpartanCookies");}});

var GetHandleVerifier = Module.findExportByName("msedge.dll", "GetHandleVerifier")
Interceptor.attach(GetHandleVerifier, {onLeave: function (args) {send("GetHandleVerifier");}});

var IsSandboxedProcess = Module.findExportByName("msedge.dll", "IsSandboxedProcess")
Interceptor.attach(IsSandboxedProcess, {onLeave: function (args) {send("IsSandboxedProcess");}});

var OQS_CPU_has_extension = Module.findExportByName("msedge.dll", "OQS_CPU_has_extension")
Interceptor.attach(OQS_CPU_has_extension, {onLeave: function (args) {send("OQS_CPU_has_extension");}});

var OQS_KEM_alg_count = Module.findExportByName("msedge.dll", "OQS_KEM_alg_count")
Interceptor.attach(OQS_KEM_alg_count, {onLeave: function (args) {send("OQS_KEM_alg_count");}});

var OQS_KEM_alg_identifier = Module.findExportByName("msedge.dll", "OQS_KEM_alg_identifier")
Interceptor.attach(OQS_KEM_alg_identifier, {onLeave: function (args) {send("OQS_KEM_alg_identifier");}});

var OQS_KEM_alg_is_enabled = Module.findExportByName("msedge.dll", "OQS_KEM_alg_is_enabled")
Interceptor.attach(OQS_KEM_alg_is_enabled, {onLeave: function (args) {send("OQS_KEM_alg_is_enabled");}});

var OQS_KEM_decaps = Module.findExportByName("msedge.dll", "OQS_KEM_decaps")
Interceptor.attach(OQS_KEM_decaps, {onLeave: function (args) {send("OQS_KEM_decaps");}});

var OQS_KEM_encaps = Module.findExportByName("msedge.dll", "OQS_KEM_encaps")
Interceptor.attach(OQS_KEM_encaps, {onLeave: function (args) {send("OQS_KEM_encaps");}});

var OQS_KEM_free = Module.findExportByName("msedge.dll", "OQS_KEM_free")
Interceptor.attach(OQS_KEM_free, {onLeave: function (args) {send("OQS_KEM_free");}});

var OQS_KEM_keypair = Module.findExportByName("msedge.dll", "OQS_KEM_keypair")
Interceptor.attach(OQS_KEM_keypair, {onLeave: function (args) {send("OQS_KEM_keypair");}});

var OQS_KEM_kyber_768_decaps = Module.findExportByName("msedge.dll", "OQS_KEM_kyber_768_decaps")
Interceptor.attach(OQS_KEM_kyber_768_decaps, {onLeave: function (args) {send("OQS_KEM_kyber_768_decaps");}});

var OQS_KEM_kyber_768_encaps = Module.findExportByName("msedge.dll", "OQS_KEM_kyber_768_encaps")
Interceptor.attach(OQS_KEM_kyber_768_encaps, {onLeave: function (args) {send("OQS_KEM_kyber_768_encaps");}});

var OQS_KEM_kyber_768_keypair = Module.findExportByName("msedge.dll", "OQS_KEM_kyber_768_keypair")
Interceptor.attach(OQS_KEM_kyber_768_keypair, {onLeave: function (args) {send("OQS_KEM_kyber_768_keypair");}});

var OQS_KEM_new = Module.findExportByName("msedge.dll", "OQS_KEM_new")
Interceptor.attach(OQS_KEM_new, {onLeave: function (args) {send("OQS_KEM_new");}});

var OQS_MEM_cleanse = Module.findExportByName("msedge.dll", "OQS_MEM_cleanse")
Interceptor.attach(OQS_MEM_cleanse, {onLeave: function (args) {send("OQS_MEM_cleanse");}});

var OQS_MEM_insecure_free = Module.findExportByName("msedge.dll", "OQS_MEM_insecure_free")
Interceptor.attach(OQS_MEM_insecure_free, {onLeave: function (args) {send("OQS_MEM_insecure_free");}});

var OQS_MEM_secure_bcmp = Module.findExportByName("msedge.dll", "OQS_MEM_secure_bcmp")
Interceptor.attach(OQS_MEM_secure_bcmp, {onLeave: function (args) {send("OQS_MEM_secure_bcmp");}});

var OQS_MEM_secure_free = Module.findExportByName("msedge.dll", "OQS_MEM_secure_free")
Interceptor.attach(OQS_MEM_secure_free, {onLeave: function (args) {send("OQS_MEM_secure_free");}});

var OQS_SIG_alg_count = Module.findExportByName("msedge.dll", "OQS_SIG_alg_count")
Interceptor.attach(OQS_SIG_alg_count, {onLeave: function (args) {send("OQS_SIG_alg_count");}});

var OQS_SIG_alg_identifier = Module.findExportByName("msedge.dll", "OQS_SIG_alg_identifier")
Interceptor.attach(OQS_SIG_alg_identifier, {onLeave: function (args) {send("OQS_SIG_alg_identifier");}});

var OQS_SIG_alg_is_enabled = Module.findExportByName("msedge.dll", "OQS_SIG_alg_is_enabled")
Interceptor.attach(OQS_SIG_alg_is_enabled, {onLeave: function (args) {send("OQS_SIG_alg_is_enabled");}});

var OQS_SIG_free = Module.findExportByName("msedge.dll", "OQS_SIG_free")
Interceptor.attach(OQS_SIG_free, {onLeave: function (args) {send("OQS_SIG_free");}});

var OQS_SIG_keypair = Module.findExportByName("msedge.dll", "OQS_SIG_keypair")
Interceptor.attach(OQS_SIG_keypair, {onLeave: function (args) {send("OQS_SIG_keypair");}});

var OQS_SIG_new = Module.findExportByName("msedge.dll", "OQS_SIG_new")
Interceptor.attach(OQS_SIG_new, {onLeave: function (args) {send("OQS_SIG_new");}});

var OQS_SIG_sign = Module.findExportByName("msedge.dll", "OQS_SIG_sign")
Interceptor.attach(OQS_SIG_sign, {onLeave: function (args) {send("OQS_SIG_sign");}});

var OQS_SIG_verify = Module.findExportByName("msedge.dll", "OQS_SIG_verify")
Interceptor.attach(OQS_SIG_verify, {onLeave: function (args) {send("OQS_SIG_verify");}});

var OQS_init = Module.findExportByName("msedge.dll", "OQS_init")
Interceptor.attach(OQS_init, {onLeave: function (args) {send("OQS_init");}});

var OQS_randombytes = Module.findExportByName("msedge.dll", "OQS_randombytes")
Interceptor.attach(OQS_randombytes, {onLeave: function (args) {send("OQS_randombytes");}});

var OQS_randombytes_custom_algorithm = Module.findExportByName("msedge.dll", "OQS_randombytes_custom_algorithm")
Interceptor.attach(OQS_randombytes_custom_algorithm, {onLeave: function (args) {send("OQS_randombytes_custom_algorithm");}});

var OQS_randombytes_nist_kat_init_256bit = Module.findExportByName("msedge.dll", "OQS_randombytes_nist_kat_init_256bit")
Interceptor.attach(OQS_randombytes_nist_kat_init_256bit, {onLeave: function (args) {send("OQS_randombytes_nist_kat_init_256bit");}});

var OQS_randombytes_switch_algorithm = Module.findExportByName("msedge.dll", "OQS_randombytes_switch_algorithm")
Interceptor.attach(OQS_randombytes_switch_algorithm, {onLeave: function (args) {send("OQS_randombytes_switch_algorithm");}});

var OQS_version = Module.findExportByName("msedge.dll", "OQS_version")
Interceptor.attach(OQS_version, {onLeave: function (args) {send("OQS_version");}});

var RelaunchChromeBrowserWithNewCommandLineIfNeeded = Module.findExportByName("msedge.dll", "RelaunchChromeBrowserWithNewCommandLineIfNeeded")
Interceptor.attach(RelaunchChromeBrowserWithNewCommandLineIfNeeded, {onLeave: function (args) {send("RelaunchChromeBrowserWithNewCommandLineIfNeeded");}});

var _ovly_debug_event = Module.findExportByName("msedge.dll", "_ovly_debug_event")
Interceptor.attach(_ovly_debug_event, {onLeave: function (args) {send("_ovly_debug_event");}});

var argon2_ctx = Module.findExportByName("msedge.dll", "argon2_ctx")
Interceptor.attach(argon2_ctx, {onLeave: function (args) {send("argon2_ctx");}});

var argon2_encodedlen = Module.findExportByName("msedge.dll", "argon2_encodedlen")
Interceptor.attach(argon2_encodedlen, {onLeave: function (args) {send("argon2_encodedlen");}});

var argon2_error_message = Module.findExportByName("msedge.dll", "argon2_error_message")
Interceptor.attach(argon2_error_message, {onLeave: function (args) {send("argon2_error_message");}});

var argon2_hash = Module.findExportByName("msedge.dll", "argon2_hash")
Interceptor.attach(argon2_hash, {onLeave: function (args) {send("argon2_hash");}});

var argon2_type2string = Module.findExportByName("msedge.dll", "argon2_type2string")
Interceptor.attach(argon2_type2string, {onLeave: function (args) {send("argon2_type2string");}});

var argon2_verify = Module.findExportByName("msedge.dll", "argon2_verify")
Interceptor.attach(argon2_verify, {onLeave: function (args) {send("argon2_verify");}});

var argon2_verify_ctx = Module.findExportByName("msedge.dll", "argon2_verify_ctx")
Interceptor.attach(argon2_verify_ctx, {onLeave: function (args) {send("argon2_verify_ctx");}});

var argon2d_ctx = Module.findExportByName("msedge.dll", "argon2d_ctx")
Interceptor.attach(argon2d_ctx, {onLeave: function (args) {send("argon2d_ctx");}});

var argon2d_hash_encoded = Module.findExportByName("msedge.dll", "argon2d_hash_encoded")
Interceptor.attach(argon2d_hash_encoded, {onLeave: function (args) {send("argon2d_hash_encoded");}});

var argon2d_hash_raw = Module.findExportByName("msedge.dll", "argon2d_hash_raw")
Interceptor.attach(argon2d_hash_raw, {onLeave: function (args) {send("argon2d_hash_raw");}});

var argon2d_verify = Module.findExportByName("msedge.dll", "argon2d_verify")
Interceptor.attach(argon2d_verify, {onLeave: function (args) {send("argon2d_verify");}});

var argon2d_verify_ctx = Module.findExportByName("msedge.dll", "argon2d_verify_ctx")
Interceptor.attach(argon2d_verify_ctx, {onLeave: function (args) {send("argon2d_verify_ctx");}});

var argon2i_ctx = Module.findExportByName("msedge.dll", "argon2i_ctx")
Interceptor.attach(argon2i_ctx, {onLeave: function (args) {send("argon2i_ctx");}});

var argon2i_hash_encoded = Module.findExportByName("msedge.dll", "argon2i_hash_encoded")
Interceptor.attach(argon2i_hash_encoded, {onLeave: function (args) {send("argon2i_hash_encoded");}});

var argon2i_hash_raw = Module.findExportByName("msedge.dll", "argon2i_hash_raw")
Interceptor.attach(argon2i_hash_raw, {onLeave: function (args) {send("argon2i_hash_raw");}});

var argon2i_verify = Module.findExportByName("msedge.dll", "argon2i_verify")
Interceptor.attach(argon2i_verify, {onLeave: function (args) {send("argon2i_verify");}});

var argon2i_verify_ctx = Module.findExportByName("msedge.dll", "argon2i_verify_ctx")
Interceptor.attach(argon2i_verify_ctx, {onLeave: function (args) {send("argon2i_verify_ctx");}});

var argon2id_ctx = Module.findExportByName("msedge.dll", "argon2id_ctx")
Interceptor.attach(argon2id_ctx, {onLeave: function (args) {send("argon2id_ctx");}});

var argon2id_hash_encoded = Module.findExportByName("msedge.dll", "argon2id_hash_encoded")
Interceptor.attach(argon2id_hash_encoded, {onLeave: function (args) {send("argon2id_hash_encoded");}});

var argon2id_hash_raw = Module.findExportByName("msedge.dll", "argon2id_hash_raw")
Interceptor.attach(argon2id_hash_raw, {onLeave: function (args) {send("argon2id_hash_raw");}});

var argon2id_verify = Module.findExportByName("msedge.dll", "argon2id_verify")
Interceptor.attach(argon2id_verify, {onLeave: function (args) {send("argon2id_verify");}});

var argon2id_verify_ctx = Module.findExportByName("msedge.dll", "argon2id_verify_ctx")
Interceptor.attach(argon2id_verify_ctx, {onLeave: function (args) {send("argon2id_verify_ctx");}});

var nacl_global_xlate_base = Module.findExportByName("msedge.dll", "nacl_global_xlate_base")
Interceptor.attach(nacl_global_xlate_base, {onLeave: function (args) {send("nacl_global_xlate_base");}});

var nacl_thread_ids = Module.findExportByName("msedge.dll", "nacl_thread_ids")
Interceptor.attach(nacl_thread_ids, {onLeave: function (args) {send("nacl_thread_ids");}});

var nacl_user = Module.findExportByName("msedge.dll", "nacl_user")
Interceptor.attach(nacl_user, {onLeave: function (args) {send("nacl_user");}});

var sqlite3_dbdata_init = Module.findExportByName("msedge.dll", "sqlite3_dbdata_init")
Interceptor.attach(sqlite3_dbdata_init, {onLeave: function (args) {send("sqlite3_dbdata_init");}});

