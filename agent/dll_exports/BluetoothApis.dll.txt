var BluetoothAddressToString = Module.findExportByName("BluetoothApis.dll", "BluetoothAddressToString")
Interceptor.attach(BluetoothAddressToString, {onLeave: function (args) {send("BluetoothAddressToString");}});

var BluetoothCheckForUnsupportedGuid = Module.findExportByName("BluetoothApis.dll", "BluetoothCheckForUnsupportedGuid")
Interceptor.attach(BluetoothCheckForUnsupportedGuid, {onLeave: function (args) {send("BluetoothCheckForUnsupportedGuid");}});

var BluetoothDisconnectDevice = Module.findExportByName("BluetoothApis.dll", "BluetoothDisconnectDevice")
Interceptor.attach(BluetoothDisconnectDevice, {onLeave: function (args) {send("BluetoothDisconnectDevice");}});

var BluetoothEnableConnectableAndDiscoverable = Module.findExportByName("BluetoothApis.dll", "BluetoothEnableConnectableAndDiscoverable")
Interceptor.attach(BluetoothEnableConnectableAndDiscoverable, {onLeave: function (args) {send("BluetoothEnableConnectableAndDiscoverable");}});

var BluetoothEnableDiscovery = Module.findExportByName("BluetoothApis.dll", "BluetoothEnableDiscovery")
Interceptor.attach(BluetoothEnableDiscovery, {onLeave: function (args) {send("BluetoothEnableDiscovery");}});

var BluetoothEnableIncomingConnections = Module.findExportByName("BluetoothApis.dll", "BluetoothEnableIncomingConnections")
Interceptor.attach(BluetoothEnableIncomingConnections, {onLeave: function (args) {send("BluetoothEnableIncomingConnections");}});

var BluetoothEnumerateInstalledServices = Module.findExportByName("BluetoothApis.dll", "BluetoothEnumerateInstalledServices")
Interceptor.attach(BluetoothEnumerateInstalledServices, {onLeave: function (args) {send("BluetoothEnumerateInstalledServices");}});

var BluetoothEnumerateInstalledServicesEx = Module.findExportByName("BluetoothApis.dll", "BluetoothEnumerateInstalledServicesEx")
Interceptor.attach(BluetoothEnumerateInstalledServicesEx, {onLeave: function (args) {send("BluetoothEnumerateInstalledServicesEx");}});

var BluetoothEnumerateLocalServices = Module.findExportByName("BluetoothApis.dll", "BluetoothEnumerateLocalServices")
Interceptor.attach(BluetoothEnumerateLocalServices, {onLeave: function (args) {send("BluetoothEnumerateLocalServices");}});

var BluetoothFindBrowseGroupClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindBrowseGroupClose")
Interceptor.attach(BluetoothFindBrowseGroupClose, {onLeave: function (args) {send("BluetoothFindBrowseGroupClose");}});

var BluetoothFindClassIdClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindClassIdClose")
Interceptor.attach(BluetoothFindClassIdClose, {onLeave: function (args) {send("BluetoothFindClassIdClose");}});

var BluetoothFindDeviceClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindDeviceClose")
Interceptor.attach(BluetoothFindDeviceClose, {onLeave: function (args) {send("BluetoothFindDeviceClose");}});

var BluetoothFindFirstBrowseGroup = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstBrowseGroup")
Interceptor.attach(BluetoothFindFirstBrowseGroup, {onLeave: function (args) {send("BluetoothFindFirstBrowseGroup");}});

var BluetoothFindFirstClassId = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstClassId")
Interceptor.attach(BluetoothFindFirstClassId, {onLeave: function (args) {send("BluetoothFindFirstClassId");}});

var BluetoothFindFirstDevice = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstDevice")
Interceptor.attach(BluetoothFindFirstDevice, {onLeave: function (args) {send("BluetoothFindFirstDevice");}});

var BluetoothFindFirstProfileDescriptor = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstProfileDescriptor")
Interceptor.attach(BluetoothFindFirstProfileDescriptor, {onLeave: function (args) {send("BluetoothFindFirstProfileDescriptor");}});

var BluetoothFindFirstProtocolDescriptorStack = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstProtocolDescriptorStack")
Interceptor.attach(BluetoothFindFirstProtocolDescriptorStack, {onLeave: function (args) {send("BluetoothFindFirstProtocolDescriptorStack");}});

var BluetoothFindFirstProtocolEntry = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstProtocolEntry")
Interceptor.attach(BluetoothFindFirstProtocolEntry, {onLeave: function (args) {send("BluetoothFindFirstProtocolEntry");}});

var BluetoothFindFirstRadio = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstRadio")
Interceptor.attach(BluetoothFindFirstRadio, {onLeave: function (args) {send("BluetoothFindFirstRadio");}});

var BluetoothFindFirstService = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstService")
Interceptor.attach(BluetoothFindFirstService, {onLeave: function (args) {send("BluetoothFindFirstService");}});

var BluetoothFindFirstServiceEx = Module.findExportByName("BluetoothApis.dll", "BluetoothFindFirstServiceEx")
Interceptor.attach(BluetoothFindFirstServiceEx, {onLeave: function (args) {send("BluetoothFindFirstServiceEx");}});

var BluetoothFindNextBrowseGroup = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextBrowseGroup")
Interceptor.attach(BluetoothFindNextBrowseGroup, {onLeave: function (args) {send("BluetoothFindNextBrowseGroup");}});

var BluetoothFindNextClassId = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextClassId")
Interceptor.attach(BluetoothFindNextClassId, {onLeave: function (args) {send("BluetoothFindNextClassId");}});

var BluetoothFindNextDevice = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextDevice")
Interceptor.attach(BluetoothFindNextDevice, {onLeave: function (args) {send("BluetoothFindNextDevice");}});

var BluetoothFindNextProfileDescriptor = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextProfileDescriptor")
Interceptor.attach(BluetoothFindNextProfileDescriptor, {onLeave: function (args) {send("BluetoothFindNextProfileDescriptor");}});

var BluetoothFindNextProtocolDescriptorStack = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextProtocolDescriptorStack")
Interceptor.attach(BluetoothFindNextProtocolDescriptorStack, {onLeave: function (args) {send("BluetoothFindNextProtocolDescriptorStack");}});

var BluetoothFindNextProtocolEntry = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextProtocolEntry")
Interceptor.attach(BluetoothFindNextProtocolEntry, {onLeave: function (args) {send("BluetoothFindNextProtocolEntry");}});

var BluetoothFindNextRadio = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextRadio")
Interceptor.attach(BluetoothFindNextRadio, {onLeave: function (args) {send("BluetoothFindNextRadio");}});

var BluetoothFindNextService = Module.findExportByName("BluetoothApis.dll", "BluetoothFindNextService")
Interceptor.attach(BluetoothFindNextService, {onLeave: function (args) {send("BluetoothFindNextService");}});

var BluetoothFindProfileDescriptorClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindProfileDescriptorClose")
Interceptor.attach(BluetoothFindProfileDescriptorClose, {onLeave: function (args) {send("BluetoothFindProfileDescriptorClose");}});

var BluetoothFindProtocolDescriptorStackClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindProtocolDescriptorStackClose")
Interceptor.attach(BluetoothFindProtocolDescriptorStackClose, {onLeave: function (args) {send("BluetoothFindProtocolDescriptorStackClose");}});

var BluetoothFindProtocolEntryClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindProtocolEntryClose")
Interceptor.attach(BluetoothFindProtocolEntryClose, {onLeave: function (args) {send("BluetoothFindProtocolEntryClose");}});

var BluetoothFindRadioClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindRadioClose")
Interceptor.attach(BluetoothFindRadioClose, {onLeave: function (args) {send("BluetoothFindRadioClose");}});

var BluetoothFindServiceClose = Module.findExportByName("BluetoothApis.dll", "BluetoothFindServiceClose")
Interceptor.attach(BluetoothFindServiceClose, {onLeave: function (args) {send("BluetoothFindServiceClose");}});

var BluetoothGATTAbortReliableWrite = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTAbortReliableWrite")
Interceptor.attach(BluetoothGATTAbortReliableWrite, {onLeave: function (args) {send("BluetoothGATTAbortReliableWrite");}});

var BluetoothGATTBeginReliableWrite = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTBeginReliableWrite")
Interceptor.attach(BluetoothGATTBeginReliableWrite, {onLeave: function (args) {send("BluetoothGATTBeginReliableWrite");}});

var BluetoothGATTEndReliableWrite = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTEndReliableWrite")
Interceptor.attach(BluetoothGATTEndReliableWrite, {onLeave: function (args) {send("BluetoothGATTEndReliableWrite");}});

var BluetoothGATTGetCharacteristicValue = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTGetCharacteristicValue")
Interceptor.attach(BluetoothGATTGetCharacteristicValue, {onLeave: function (args) {send("BluetoothGATTGetCharacteristicValue");}});

var BluetoothGATTGetCharacteristics = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTGetCharacteristics")
Interceptor.attach(BluetoothGATTGetCharacteristics, {onLeave: function (args) {send("BluetoothGATTGetCharacteristics");}});

var BluetoothGATTGetDescriptorValue = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTGetDescriptorValue")
Interceptor.attach(BluetoothGATTGetDescriptorValue, {onLeave: function (args) {send("BluetoothGATTGetDescriptorValue");}});

var BluetoothGATTGetDescriptors = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTGetDescriptors")
Interceptor.attach(BluetoothGATTGetDescriptors, {onLeave: function (args) {send("BluetoothGATTGetDescriptors");}});

var BluetoothGATTGetIncludedServices = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTGetIncludedServices")
Interceptor.attach(BluetoothGATTGetIncludedServices, {onLeave: function (args) {send("BluetoothGATTGetIncludedServices");}});

var BluetoothGATTGetServices = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTGetServices")
Interceptor.attach(BluetoothGATTGetServices, {onLeave: function (args) {send("BluetoothGATTGetServices");}});

var BluetoothGATTRegisterEvent = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTRegisterEvent")
Interceptor.attach(BluetoothGATTRegisterEvent, {onLeave: function (args) {send("BluetoothGATTRegisterEvent");}});

var BluetoothGATTSetCharacteristicValue = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTSetCharacteristicValue")
Interceptor.attach(BluetoothGATTSetCharacteristicValue, {onLeave: function (args) {send("BluetoothGATTSetCharacteristicValue");}});

var BluetoothGATTSetDescriptorValue = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTSetDescriptorValue")
Interceptor.attach(BluetoothGATTSetDescriptorValue, {onLeave: function (args) {send("BluetoothGATTSetDescriptorValue");}});

var BluetoothGATTUnregisterEvent = Module.findExportByName("BluetoothApis.dll", "BluetoothGATTUnregisterEvent")
Interceptor.attach(BluetoothGATTUnregisterEvent, {onLeave: function (args) {send("BluetoothGATTUnregisterEvent");}});

var BluetoothGetDeviceInfo = Module.findExportByName("BluetoothApis.dll", "BluetoothGetDeviceInfo")
Interceptor.attach(BluetoothGetDeviceInfo, {onLeave: function (args) {send("BluetoothGetDeviceInfo");}});

var BluetoothGetLocalServiceInfo = Module.findExportByName("BluetoothApis.dll", "BluetoothGetLocalServiceInfo")
Interceptor.attach(BluetoothGetLocalServiceInfo, {onLeave: function (args) {send("BluetoothGetLocalServiceInfo");}});

var BluetoothGetRadioInfo = Module.findExportByName("BluetoothApis.dll", "BluetoothGetRadioInfo")
Interceptor.attach(BluetoothGetRadioInfo, {onLeave: function (args) {send("BluetoothGetRadioInfo");}});

var BluetoothGetServicePnpInstance = Module.findExportByName("BluetoothApis.dll", "BluetoothGetServicePnpInstance")
Interceptor.attach(BluetoothGetServicePnpInstance, {onLeave: function (args) {send("BluetoothGetServicePnpInstance");}});

var BluetoothIsBluetoothServiceRunning = Module.findExportByName("BluetoothApis.dll", "BluetoothIsBluetoothServiceRunning")
Interceptor.attach(BluetoothIsBluetoothServiceRunning, {onLeave: function (args) {send("BluetoothIsBluetoothServiceRunning");}});

var BluetoothIsConnectable = Module.findExportByName("BluetoothApis.dll", "BluetoothIsConnectable")
Interceptor.attach(BluetoothIsConnectable, {onLeave: function (args) {send("BluetoothIsConnectable");}});

var BluetoothIsConnectableByDefault = Module.findExportByName("BluetoothApis.dll", "BluetoothIsConnectableByDefault")
Interceptor.attach(BluetoothIsConnectableByDefault, {onLeave: function (args) {send("BluetoothIsConnectableByDefault");}});

var BluetoothIsDiscoverable = Module.findExportByName("BluetoothApis.dll", "BluetoothIsDiscoverable")
Interceptor.attach(BluetoothIsDiscoverable, {onLeave: function (args) {send("BluetoothIsDiscoverable");}});

var BluetoothIsDiscoverableByDefault = Module.findExportByName("BluetoothApis.dll", "BluetoothIsDiscoverableByDefault")
Interceptor.attach(BluetoothIsDiscoverableByDefault, {onLeave: function (args) {send("BluetoothIsDiscoverableByDefault");}});

var BluetoothIsSwiftPairEnabledByDefault = Module.findExportByName("BluetoothApis.dll", "BluetoothIsSwiftPairEnabledByDefault")
Interceptor.attach(BluetoothIsSwiftPairEnabledByDefault, {onLeave: function (args) {send("BluetoothIsSwiftPairEnabledByDefault");}});

var BluetoothIsTopOfServiceGroup = Module.findExportByName("BluetoothApis.dll", "BluetoothIsTopOfServiceGroup")
Interceptor.attach(BluetoothIsTopOfServiceGroup, {onLeave: function (args) {send("BluetoothIsTopOfServiceGroup");}});

var BluetoothIsVersionAvailable = Module.findExportByName("BluetoothApis.dll", "BluetoothIsVersionAvailable")
Interceptor.attach(BluetoothIsVersionAvailable, {onLeave: function (args) {send("BluetoothIsVersionAvailable");}});

var BluetoothMapStatusToError = Module.findExportByName("BluetoothApis.dll", "BluetoothMapStatusToError")
Interceptor.attach(BluetoothMapStatusToError, {onLeave: function (args) {send("BluetoothMapStatusToError");}});

var BluetoothRegisterForAuthentication = Module.findExportByName("BluetoothApis.dll", "BluetoothRegisterForAuthentication")
Interceptor.attach(BluetoothRegisterForAuthentication, {onLeave: function (args) {send("BluetoothRegisterForAuthentication");}});

var BluetoothRegisterForAuthenticationEx = Module.findExportByName("BluetoothApis.dll", "BluetoothRegisterForAuthenticationEx")
Interceptor.attach(BluetoothRegisterForAuthenticationEx, {onLeave: function (args) {send("BluetoothRegisterForAuthenticationEx");}});

var BluetoothRegisterForAuthenticationInternal = Module.findExportByName("BluetoothApis.dll", "BluetoothRegisterForAuthenticationInternal")
Interceptor.attach(BluetoothRegisterForAuthenticationInternal, {onLeave: function (args) {send("BluetoothRegisterForAuthenticationInternal");}});

var BluetoothRemoveDevice = Module.findExportByName("BluetoothApis.dll", "BluetoothRemoveDevice")
Interceptor.attach(BluetoothRemoveDevice, {onLeave: function (args) {send("BluetoothRemoveDevice");}});

var BluetoothSdpEnumAttributes = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpEnumAttributes")
Interceptor.attach(BluetoothSdpEnumAttributes, {onLeave: function (args) {send("BluetoothSdpEnumAttributes");}});

var BluetoothSdpGetAttributeValue = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpGetAttributeValue")
Interceptor.attach(BluetoothSdpGetAttributeValue, {onLeave: function (args) {send("BluetoothSdpGetAttributeValue");}});

var BluetoothSdpGetContainerElementData = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpGetContainerElementData")
Interceptor.attach(BluetoothSdpGetContainerElementData, {onLeave: function (args) {send("BluetoothSdpGetContainerElementData");}});

var BluetoothSdpGetElementData = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpGetElementData")
Interceptor.attach(BluetoothSdpGetElementData, {onLeave: function (args) {send("BluetoothSdpGetElementData");}});

var BluetoothSdpGetInnerRecord = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpGetInnerRecord")
Interceptor.attach(BluetoothSdpGetInnerRecord, {onLeave: function (args) {send("BluetoothSdpGetInnerRecord");}});

var BluetoothSdpGetNextRecord = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpGetNextRecord")
Interceptor.attach(BluetoothSdpGetNextRecord, {onLeave: function (args) {send("BluetoothSdpGetNextRecord");}});

var BluetoothSdpGetString = Module.findExportByName("BluetoothApis.dll", "BluetoothSdpGetString")
Interceptor.attach(BluetoothSdpGetString, {onLeave: function (args) {send("BluetoothSdpGetString");}});

var BluetoothSendAuthenticationResponse = Module.findExportByName("BluetoothApis.dll", "BluetoothSendAuthenticationResponse")
Interceptor.attach(BluetoothSendAuthenticationResponse, {onLeave: function (args) {send("BluetoothSendAuthenticationResponse");}});

var BluetoothSendAuthenticationResponseEx = Module.findExportByName("BluetoothApis.dll", "BluetoothSendAuthenticationResponseEx")
Interceptor.attach(BluetoothSendAuthenticationResponseEx, {onLeave: function (args) {send("BluetoothSendAuthenticationResponseEx");}});

var BluetoothSetLocalServiceInfo = Module.findExportByName("BluetoothApis.dll", "BluetoothSetLocalServiceInfo")
Interceptor.attach(BluetoothSetLocalServiceInfo, {onLeave: function (args) {send("BluetoothSetLocalServiceInfo");}});

var BluetoothSetServiceState = Module.findExportByName("BluetoothApis.dll", "BluetoothSetServiceState")
Interceptor.attach(BluetoothSetServiceState, {onLeave: function (args) {send("BluetoothSetServiceState");}});

var BluetoothSetServiceStateEx = Module.findExportByName("BluetoothApis.dll", "BluetoothSetServiceStateEx")
Interceptor.attach(BluetoothSetServiceStateEx, {onLeave: function (args) {send("BluetoothSetServiceStateEx");}});

var BluetoothSppEnableIncomingComPort = Module.findExportByName("BluetoothApis.dll", "BluetoothSppEnableIncomingComPort")
Interceptor.attach(BluetoothSppEnableIncomingComPort, {onLeave: function (args) {send("BluetoothSppEnableIncomingComPort");}});

var BluetoothSppFindNextOpenComPort = Module.findExportByName("BluetoothApis.dll", "BluetoothSppFindNextOpenComPort")
Interceptor.attach(BluetoothSppFindNextOpenComPort, {onLeave: function (args) {send("BluetoothSppFindNextOpenComPort");}});

var BluetoothUnregisterAuthentication = Module.findExportByName("BluetoothApis.dll", "BluetoothUnregisterAuthentication")
Interceptor.attach(BluetoothUnregisterAuthentication, {onLeave: function (args) {send("BluetoothUnregisterAuthentication");}});

var BluetoothUpdateDeviceRecord = Module.findExportByName("BluetoothApis.dll", "BluetoothUpdateDeviceRecord")
Interceptor.attach(BluetoothUpdateDeviceRecord, {onLeave: function (args) {send("BluetoothUpdateDeviceRecord");}});

var BthpCleanupBRDeviceNode = Module.findExportByName("BluetoothApis.dll", "BthpCleanupBRDeviceNode")
Interceptor.attach(BthpCleanupBRDeviceNode, {onLeave: function (args) {send("BthpCleanupBRDeviceNode");}});

var BthpCleanupDeviceLocalServices = Module.findExportByName("BluetoothApis.dll", "BthpCleanupDeviceLocalServices")
Interceptor.attach(BthpCleanupDeviceLocalServices, {onLeave: function (args) {send("BthpCleanupDeviceLocalServices");}});

var BthpCleanupDeviceRemoteServices = Module.findExportByName("BluetoothApis.dll", "BthpCleanupDeviceRemoteServices")
Interceptor.attach(BthpCleanupDeviceRemoteServices, {onLeave: function (args) {send("BthpCleanupDeviceRemoteServices");}});

var BthpCleanupLEDeviceNodes = Module.findExportByName("BluetoothApis.dll", "BthpCleanupLEDeviceNodes")
Interceptor.attach(BthpCleanupLEDeviceNodes, {onLeave: function (args) {send("BthpCleanupLEDeviceNodes");}});

var BthpEnableA2DPIfPresent = Module.findExportByName("BluetoothApis.dll", "BthpEnableA2DPIfPresent")
Interceptor.attach(BthpEnableA2DPIfPresent, {onLeave: function (args) {send("BthpEnableA2DPIfPresent");}});

var BthpEnableAllServices = Module.findExportByName("BluetoothApis.dll", "BthpEnableAllServices")
Interceptor.attach(BthpEnableAllServices, {onLeave: function (args) {send("BthpEnableAllServices");}});

var BthpEnableRadioSoftware = Module.findExportByName("BluetoothApis.dll", "BthpEnableRadioSoftware")
Interceptor.attach(BthpEnableRadioSoftware, {onLeave: function (args) {send("BthpEnableRadioSoftware");}});

var BthpFindPnpInfo = Module.findExportByName("BluetoothApis.dll", "BthpFindPnpInfo")
Interceptor.attach(BthpFindPnpInfo, {onLeave: function (args) {send("BthpFindPnpInfo");}});

var BthpGATTCloseSession = Module.findExportByName("BluetoothApis.dll", "BthpGATTCloseSession")
Interceptor.attach(BthpGATTCloseSession, {onLeave: function (args) {send("BthpGATTCloseSession");}});

var BthpInnerRecord = Module.findExportByName("BluetoothApis.dll", "BthpInnerRecord")
Interceptor.attach(BthpInnerRecord, {onLeave: function (args) {send("BthpInnerRecord");}});

var BthpIsRadioSoftwareEnabled = Module.findExportByName("BluetoothApis.dll", "BthpIsRadioSoftwareEnabled")
Interceptor.attach(BthpIsRadioSoftwareEnabled, {onLeave: function (args) {send("BthpIsRadioSoftwareEnabled");}});

var BthpNextRecord = Module.findExportByName("BluetoothApis.dll", "BthpNextRecord")
Interceptor.attach(BthpNextRecord, {onLeave: function (args) {send("BthpNextRecord");}});

var BthpRegisterForAuthentication = Module.findExportByName("BluetoothApis.dll", "BthpRegisterForAuthentication")
Interceptor.attach(BthpRegisterForAuthentication, {onLeave: function (args) {send("BthpRegisterForAuthentication");}});

var BthpSetServiceState = Module.findExportByName("BluetoothApis.dll", "BthpSetServiceState")
Interceptor.attach(BthpSetServiceState, {onLeave: function (args) {send("BthpSetServiceState");}});

var BthpSetServiceStateEx = Module.findExportByName("BluetoothApis.dll", "BthpSetServiceStateEx")
Interceptor.attach(BthpSetServiceStateEx, {onLeave: function (args) {send("BthpSetServiceStateEx");}});

var BthpShouldForceAuthentication = Module.findExportByName("BluetoothApis.dll", "BthpShouldForceAuthentication")
Interceptor.attach(BthpShouldForceAuthentication, {onLeave: function (args) {send("BthpShouldForceAuthentication");}});

var BthpTransposeAndExtendBytes = Module.findExportByName("BluetoothApis.dll", "BthpTransposeAndExtendBytes")
Interceptor.attach(BthpTransposeAndExtendBytes, {onLeave: function (args) {send("BthpTransposeAndExtendBytes");}});

var DllCanUnloadNow = Module.findExportByName("BluetoothApis.dll", "DllCanUnloadNow")
Interceptor.attach(DllCanUnloadNow, {onLeave: function (args) {send("DllCanUnloadNow");}});

