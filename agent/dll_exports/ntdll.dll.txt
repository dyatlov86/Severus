var A_SHAFinal = Module.findExportByName("ntdll.dll", "A_SHAFinal")
Interceptor.attach(A_SHAFinal, {onLeave: function (args) {send("A_SHAFinal");}});

var A_SHAInit = Module.findExportByName("ntdll.dll", "A_SHAInit")
Interceptor.attach(A_SHAInit, {onLeave: function (args) {send("A_SHAInit");}});

var A_SHAUpdate = Module.findExportByName("ntdll.dll", "A_SHAUpdate")
Interceptor.attach(A_SHAUpdate, {onLeave: function (args) {send("A_SHAUpdate");}});

var AlpcAdjustCompletionListConcurrencyCount = Module.findExportByName("ntdll.dll", "AlpcAdjustCompletionListConcurrencyCount")
Interceptor.attach(AlpcAdjustCompletionListConcurrencyCount, {onLeave: function (args) {send("AlpcAdjustCompletionListConcurrencyCount");}});

var AlpcFreeCompletionListMessage = Module.findExportByName("ntdll.dll", "AlpcFreeCompletionListMessage")
Interceptor.attach(AlpcFreeCompletionListMessage, {onLeave: function (args) {send("AlpcFreeCompletionListMessage");}});

var AlpcGetCompletionListLastMessageInformation = Module.findExportByName("ntdll.dll", "AlpcGetCompletionListLastMessageInformation")
Interceptor.attach(AlpcGetCompletionListLastMessageInformation, {onLeave: function (args) {send("AlpcGetCompletionListLastMessageInformation");}});

var AlpcGetCompletionListMessageAttributes = Module.findExportByName("ntdll.dll", "AlpcGetCompletionListMessageAttributes")
Interceptor.attach(AlpcGetCompletionListMessageAttributes, {onLeave: function (args) {send("AlpcGetCompletionListMessageAttributes");}});

var AlpcGetHeaderSize = Module.findExportByName("ntdll.dll", "AlpcGetHeaderSize")
Interceptor.attach(AlpcGetHeaderSize, {onLeave: function (args) {send("AlpcGetHeaderSize");}});

var AlpcGetMessageAttribute = Module.findExportByName("ntdll.dll", "AlpcGetMessageAttribute")
Interceptor.attach(AlpcGetMessageAttribute, {onLeave: function (args) {send("AlpcGetMessageAttribute");}});

var AlpcGetMessageFromCompletionList = Module.findExportByName("ntdll.dll", "AlpcGetMessageFromCompletionList")
Interceptor.attach(AlpcGetMessageFromCompletionList, {onLeave: function (args) {send("AlpcGetMessageFromCompletionList");}});

var AlpcGetOutstandingCompletionListMessageCount = Module.findExportByName("ntdll.dll", "AlpcGetOutstandingCompletionListMessageCount")
Interceptor.attach(AlpcGetOutstandingCompletionListMessageCount, {onLeave: function (args) {send("AlpcGetOutstandingCompletionListMessageCount");}});

var AlpcInitializeMessageAttribute = Module.findExportByName("ntdll.dll", "AlpcInitializeMessageAttribute")
Interceptor.attach(AlpcInitializeMessageAttribute, {onLeave: function (args) {send("AlpcInitializeMessageAttribute");}});

var AlpcMaxAllowedMessageLength = Module.findExportByName("ntdll.dll", "AlpcMaxAllowedMessageLength")
Interceptor.attach(AlpcMaxAllowedMessageLength, {onLeave: function (args) {send("AlpcMaxAllowedMessageLength");}});

var AlpcRegisterCompletionList = Module.findExportByName("ntdll.dll", "AlpcRegisterCompletionList")
Interceptor.attach(AlpcRegisterCompletionList, {onLeave: function (args) {send("AlpcRegisterCompletionList");}});

var AlpcRegisterCompletionListWorkerThread = Module.findExportByName("ntdll.dll", "AlpcRegisterCompletionListWorkerThread")
Interceptor.attach(AlpcRegisterCompletionListWorkerThread, {onLeave: function (args) {send("AlpcRegisterCompletionListWorkerThread");}});

var AlpcRundownCompletionList = Module.findExportByName("ntdll.dll", "AlpcRundownCompletionList")
Interceptor.attach(AlpcRundownCompletionList, {onLeave: function (args) {send("AlpcRundownCompletionList");}});

var AlpcUnregisterCompletionList = Module.findExportByName("ntdll.dll", "AlpcUnregisterCompletionList")
Interceptor.attach(AlpcUnregisterCompletionList, {onLeave: function (args) {send("AlpcUnregisterCompletionList");}});

var AlpcUnregisterCompletionListWorkerThread = Module.findExportByName("ntdll.dll", "AlpcUnregisterCompletionListWorkerThread")
Interceptor.attach(AlpcUnregisterCompletionListWorkerThread, {onLeave: function (args) {send("AlpcUnregisterCompletionListWorkerThread");}});

var ApiSetQueryApiSetPresence = Module.findExportByName("ntdll.dll", "ApiSetQueryApiSetPresence")
Interceptor.attach(ApiSetQueryApiSetPresence, {onLeave: function (args) {send("ApiSetQueryApiSetPresence");}});

var ApiSetQueryApiSetPresenceEx = Module.findExportByName("ntdll.dll", "ApiSetQueryApiSetPresenceEx")
Interceptor.attach(ApiSetQueryApiSetPresenceEx, {onLeave: function (args) {send("ApiSetQueryApiSetPresenceEx");}});

var CsrAllocateCaptureBuffer = Module.findExportByName("ntdll.dll", "CsrAllocateCaptureBuffer")
Interceptor.attach(CsrAllocateCaptureBuffer, {onLeave: function (args) {send("CsrAllocateCaptureBuffer");}});

var CsrAllocateMessagePointer = Module.findExportByName("ntdll.dll", "CsrAllocateMessagePointer")
Interceptor.attach(CsrAllocateMessagePointer, {onLeave: function (args) {send("CsrAllocateMessagePointer");}});

var CsrCaptureMessageBuffer = Module.findExportByName("ntdll.dll", "CsrCaptureMessageBuffer")
Interceptor.attach(CsrCaptureMessageBuffer, {onLeave: function (args) {send("CsrCaptureMessageBuffer");}});

var CsrCaptureMessageMultiUnicodeStringsInPlace = Module.findExportByName("ntdll.dll", "CsrCaptureMessageMultiUnicodeStringsInPlace")
Interceptor.attach(CsrCaptureMessageMultiUnicodeStringsInPlace, {onLeave: function (args) {send("CsrCaptureMessageMultiUnicodeStringsInPlace");}});

var CsrCaptureMessageString = Module.findExportByName("ntdll.dll", "CsrCaptureMessageString")
Interceptor.attach(CsrCaptureMessageString, {onLeave: function (args) {send("CsrCaptureMessageString");}});

var CsrCaptureTimeout = Module.findExportByName("ntdll.dll", "CsrCaptureTimeout")
Interceptor.attach(CsrCaptureTimeout, {onLeave: function (args) {send("CsrCaptureTimeout");}});

var CsrClientCallServer = Module.findExportByName("ntdll.dll", "CsrClientCallServer")
Interceptor.attach(CsrClientCallServer, {onLeave: function (args) {send("CsrClientCallServer");}});

var CsrClientConnectToServer = Module.findExportByName("ntdll.dll", "CsrClientConnectToServer")
Interceptor.attach(CsrClientConnectToServer, {onLeave: function (args) {send("CsrClientConnectToServer");}});

var CsrFreeCaptureBuffer = Module.findExportByName("ntdll.dll", "CsrFreeCaptureBuffer")
Interceptor.attach(CsrFreeCaptureBuffer, {onLeave: function (args) {send("CsrFreeCaptureBuffer");}});

var CsrGetProcessId = Module.findExportByName("ntdll.dll", "CsrGetProcessId")
Interceptor.attach(CsrGetProcessId, {onLeave: function (args) {send("CsrGetProcessId");}});

var CsrIdentifyAlertableThread = Module.findExportByName("ntdll.dll", "CsrIdentifyAlertableThread")
Interceptor.attach(CsrIdentifyAlertableThread, {onLeave: function (args) {send("CsrIdentifyAlertableThread");}});

var CsrSetPriorityClass = Module.findExportByName("ntdll.dll", "CsrSetPriorityClass")
Interceptor.attach(CsrSetPriorityClass, {onLeave: function (args) {send("CsrSetPriorityClass");}});

var CsrVerifyRegion = Module.findExportByName("ntdll.dll", "CsrVerifyRegion")
Interceptor.attach(CsrVerifyRegion, {onLeave: function (args) {send("CsrVerifyRegion");}});

var DbgBreakPoint = Module.findExportByName("ntdll.dll", "DbgBreakPoint")
Interceptor.attach(DbgBreakPoint, {onLeave: function (args) {send("DbgBreakPoint");}});

var DbgPrint = Module.findExportByName("ntdll.dll", "DbgPrint")
Interceptor.attach(DbgPrint, {onLeave: function (args) {send("DbgPrint");}});

var DbgPrintEx = Module.findExportByName("ntdll.dll", "DbgPrintEx")
Interceptor.attach(DbgPrintEx, {onLeave: function (args) {send("DbgPrintEx");}});

var DbgPrintReturnControlC = Module.findExportByName("ntdll.dll", "DbgPrintReturnControlC")
Interceptor.attach(DbgPrintReturnControlC, {onLeave: function (args) {send("DbgPrintReturnControlC");}});

var DbgPrompt = Module.findExportByName("ntdll.dll", "DbgPrompt")
Interceptor.attach(DbgPrompt, {onLeave: function (args) {send("DbgPrompt");}});

var DbgQueryDebugFilterState = Module.findExportByName("ntdll.dll", "DbgQueryDebugFilterState")
Interceptor.attach(DbgQueryDebugFilterState, {onLeave: function (args) {send("DbgQueryDebugFilterState");}});

var DbgSetDebugFilterState = Module.findExportByName("ntdll.dll", "DbgSetDebugFilterState")
Interceptor.attach(DbgSetDebugFilterState, {onLeave: function (args) {send("DbgSetDebugFilterState");}});

var DbgUiConnectToDbg = Module.findExportByName("ntdll.dll", "DbgUiConnectToDbg")
Interceptor.attach(DbgUiConnectToDbg, {onLeave: function (args) {send("DbgUiConnectToDbg");}});

var DbgUiContinue = Module.findExportByName("ntdll.dll", "DbgUiContinue")
Interceptor.attach(DbgUiContinue, {onLeave: function (args) {send("DbgUiContinue");}});

var DbgUiConvertStateChangeStructure = Module.findExportByName("ntdll.dll", "DbgUiConvertStateChangeStructure")
Interceptor.attach(DbgUiConvertStateChangeStructure, {onLeave: function (args) {send("DbgUiConvertStateChangeStructure");}});

var DbgUiConvertStateChangeStructureEx = Module.findExportByName("ntdll.dll", "DbgUiConvertStateChangeStructureEx")
Interceptor.attach(DbgUiConvertStateChangeStructureEx, {onLeave: function (args) {send("DbgUiConvertStateChangeStructureEx");}});

var DbgUiDebugActiveProcess = Module.findExportByName("ntdll.dll", "DbgUiDebugActiveProcess")
Interceptor.attach(DbgUiDebugActiveProcess, {onLeave: function (args) {send("DbgUiDebugActiveProcess");}});

var DbgUiGetThreadDebugObject = Module.findExportByName("ntdll.dll", "DbgUiGetThreadDebugObject")
Interceptor.attach(DbgUiGetThreadDebugObject, {onLeave: function (args) {send("DbgUiGetThreadDebugObject");}});

var DbgUiIssueRemoteBreakin = Module.findExportByName("ntdll.dll", "DbgUiIssueRemoteBreakin")
Interceptor.attach(DbgUiIssueRemoteBreakin, {onLeave: function (args) {send("DbgUiIssueRemoteBreakin");}});

var DbgUiRemoteBreakin = Module.findExportByName("ntdll.dll", "DbgUiRemoteBreakin")
Interceptor.attach(DbgUiRemoteBreakin, {onLeave: function (args) {send("DbgUiRemoteBreakin");}});

var DbgUiSetThreadDebugObject = Module.findExportByName("ntdll.dll", "DbgUiSetThreadDebugObject")
Interceptor.attach(DbgUiSetThreadDebugObject, {onLeave: function (args) {send("DbgUiSetThreadDebugObject");}});

var DbgUiStopDebugging = Module.findExportByName("ntdll.dll", "DbgUiStopDebugging")
Interceptor.attach(DbgUiStopDebugging, {onLeave: function (args) {send("DbgUiStopDebugging");}});

var DbgUiWaitStateChange = Module.findExportByName("ntdll.dll", "DbgUiWaitStateChange")
Interceptor.attach(DbgUiWaitStateChange, {onLeave: function (args) {send("DbgUiWaitStateChange");}});

var DbgUserBreakPoint = Module.findExportByName("ntdll.dll", "DbgUserBreakPoint")
Interceptor.attach(DbgUserBreakPoint, {onLeave: function (args) {send("DbgUserBreakPoint");}});

var EtwCheckCoverage = Module.findExportByName("ntdll.dll", "EtwCheckCoverage")
Interceptor.attach(EtwCheckCoverage, {onLeave: function (args) {send("EtwCheckCoverage");}});

var EtwCreateTraceInstanceId = Module.findExportByName("ntdll.dll", "EtwCreateTraceInstanceId")
Interceptor.attach(EtwCreateTraceInstanceId, {onLeave: function (args) {send("EtwCreateTraceInstanceId");}});

var EtwDeliverDataBlock = Module.findExportByName("ntdll.dll", "EtwDeliverDataBlock")
Interceptor.attach(EtwDeliverDataBlock, {onLeave: function (args) {send("EtwDeliverDataBlock");}});

var EtwEnumerateProcessRegGuids = Module.findExportByName("ntdll.dll", "EtwEnumerateProcessRegGuids")
Interceptor.attach(EtwEnumerateProcessRegGuids, {onLeave: function (args) {send("EtwEnumerateProcessRegGuids");}});

var EtwEventActivityIdControl = Module.findExportByName("ntdll.dll", "EtwEventActivityIdControl")
Interceptor.attach(EtwEventActivityIdControl, {onLeave: function (args) {send("EtwEventActivityIdControl");}});

var EtwEventEnabled = Module.findExportByName("ntdll.dll", "EtwEventEnabled")
Interceptor.attach(EtwEventEnabled, {onLeave: function (args) {send("EtwEventEnabled");}});

var EtwEventProviderEnabled = Module.findExportByName("ntdll.dll", "EtwEventProviderEnabled")
Interceptor.attach(EtwEventProviderEnabled, {onLeave: function (args) {send("EtwEventProviderEnabled");}});

var EtwEventRegister = Module.findExportByName("ntdll.dll", "EtwEventRegister")
Interceptor.attach(EtwEventRegister, {onLeave: function (args) {send("EtwEventRegister");}});

var EtwEventSetInformation = Module.findExportByName("ntdll.dll", "EtwEventSetInformation")
Interceptor.attach(EtwEventSetInformation, {onLeave: function (args) {send("EtwEventSetInformation");}});

var EtwEventUnregister = Module.findExportByName("ntdll.dll", "EtwEventUnregister")
Interceptor.attach(EtwEventUnregister, {onLeave: function (args) {send("EtwEventUnregister");}});

var EtwEventWrite = Module.findExportByName("ntdll.dll", "EtwEventWrite")
Interceptor.attach(EtwEventWrite, {onLeave: function (args) {send("EtwEventWrite");}});

var EtwEventWriteEndScenario = Module.findExportByName("ntdll.dll", "EtwEventWriteEndScenario")
Interceptor.attach(EtwEventWriteEndScenario, {onLeave: function (args) {send("EtwEventWriteEndScenario");}});

var EtwEventWriteEx = Module.findExportByName("ntdll.dll", "EtwEventWriteEx")
Interceptor.attach(EtwEventWriteEx, {onLeave: function (args) {send("EtwEventWriteEx");}});

var EtwEventWriteFull = Module.findExportByName("ntdll.dll", "EtwEventWriteFull")
Interceptor.attach(EtwEventWriteFull, {onLeave: function (args) {send("EtwEventWriteFull");}});

var EtwEventWriteNoRegistration = Module.findExportByName("ntdll.dll", "EtwEventWriteNoRegistration")
Interceptor.attach(EtwEventWriteNoRegistration, {onLeave: function (args) {send("EtwEventWriteNoRegistration");}});

var EtwEventWriteStartScenario = Module.findExportByName("ntdll.dll", "EtwEventWriteStartScenario")
Interceptor.attach(EtwEventWriteStartScenario, {onLeave: function (args) {send("EtwEventWriteStartScenario");}});

var EtwEventWriteString = Module.findExportByName("ntdll.dll", "EtwEventWriteString")
Interceptor.attach(EtwEventWriteString, {onLeave: function (args) {send("EtwEventWriteString");}});

var EtwEventWriteTransfer = Module.findExportByName("ntdll.dll", "EtwEventWriteTransfer")
Interceptor.attach(EtwEventWriteTransfer, {onLeave: function (args) {send("EtwEventWriteTransfer");}});

var EtwGetTraceEnableFlags = Module.findExportByName("ntdll.dll", "EtwGetTraceEnableFlags")
Interceptor.attach(EtwGetTraceEnableFlags, {onLeave: function (args) {send("EtwGetTraceEnableFlags");}});

var EtwGetTraceEnableLevel = Module.findExportByName("ntdll.dll", "EtwGetTraceEnableLevel")
Interceptor.attach(EtwGetTraceEnableLevel, {onLeave: function (args) {send("EtwGetTraceEnableLevel");}});

var EtwGetTraceLoggerHandle = Module.findExportByName("ntdll.dll", "EtwGetTraceLoggerHandle")
Interceptor.attach(EtwGetTraceLoggerHandle, {onLeave: function (args) {send("EtwGetTraceLoggerHandle");}});

var EtwLogTraceEvent = Module.findExportByName("ntdll.dll", "EtwLogTraceEvent")
Interceptor.attach(EtwLogTraceEvent, {onLeave: function (args) {send("EtwLogTraceEvent");}});

var EtwNotificationRegister = Module.findExportByName("ntdll.dll", "EtwNotificationRegister")
Interceptor.attach(EtwNotificationRegister, {onLeave: function (args) {send("EtwNotificationRegister");}});

var EtwNotificationUnregister = Module.findExportByName("ntdll.dll", "EtwNotificationUnregister")
Interceptor.attach(EtwNotificationUnregister, {onLeave: function (args) {send("EtwNotificationUnregister");}});

var EtwProcessPrivateLoggerRequest = Module.findExportByName("ntdll.dll", "EtwProcessPrivateLoggerRequest")
Interceptor.attach(EtwProcessPrivateLoggerRequest, {onLeave: function (args) {send("EtwProcessPrivateLoggerRequest");}});

var EtwRegisterSecurityProvider = Module.findExportByName("ntdll.dll", "EtwRegisterSecurityProvider")
Interceptor.attach(EtwRegisterSecurityProvider, {onLeave: function (args) {send("EtwRegisterSecurityProvider");}});

var EtwRegisterTraceGuidsA = Module.findExportByName("ntdll.dll", "EtwRegisterTraceGuidsA")
Interceptor.attach(EtwRegisterTraceGuidsA, {onLeave: function (args) {send("EtwRegisterTraceGuidsA");}});

var EtwRegisterTraceGuidsW = Module.findExportByName("ntdll.dll", "EtwRegisterTraceGuidsW")
Interceptor.attach(EtwRegisterTraceGuidsW, {onLeave: function (args) {send("EtwRegisterTraceGuidsW");}});

var EtwReplyNotification = Module.findExportByName("ntdll.dll", "EtwReplyNotification")
Interceptor.attach(EtwReplyNotification, {onLeave: function (args) {send("EtwReplyNotification");}});

var EtwSendNotification = Module.findExportByName("ntdll.dll", "EtwSendNotification")
Interceptor.attach(EtwSendNotification, {onLeave: function (args) {send("EtwSendNotification");}});

var EtwSetMark = Module.findExportByName("ntdll.dll", "EtwSetMark")
Interceptor.attach(EtwSetMark, {onLeave: function (args) {send("EtwSetMark");}});

var EtwTraceEventInstance = Module.findExportByName("ntdll.dll", "EtwTraceEventInstance")
Interceptor.attach(EtwTraceEventInstance, {onLeave: function (args) {send("EtwTraceEventInstance");}});

var EtwTraceMessage = Module.findExportByName("ntdll.dll", "EtwTraceMessage")
Interceptor.attach(EtwTraceMessage, {onLeave: function (args) {send("EtwTraceMessage");}});

var EtwTraceMessageVa = Module.findExportByName("ntdll.dll", "EtwTraceMessageVa")
Interceptor.attach(EtwTraceMessageVa, {onLeave: function (args) {send("EtwTraceMessageVa");}});

var EtwUnregisterTraceGuids = Module.findExportByName("ntdll.dll", "EtwUnregisterTraceGuids")
Interceptor.attach(EtwUnregisterTraceGuids, {onLeave: function (args) {send("EtwUnregisterTraceGuids");}});

var EtwWriteUMSecurityEvent = Module.findExportByName("ntdll.dll", "EtwWriteUMSecurityEvent")
Interceptor.attach(EtwWriteUMSecurityEvent, {onLeave: function (args) {send("EtwWriteUMSecurityEvent");}});

var EtwpCreateEtwThread = Module.findExportByName("ntdll.dll", "EtwpCreateEtwThread")
Interceptor.attach(EtwpCreateEtwThread, {onLeave: function (args) {send("EtwpCreateEtwThread");}});

var EtwpGetCpuSpeed = Module.findExportByName("ntdll.dll", "EtwpGetCpuSpeed")
Interceptor.attach(EtwpGetCpuSpeed, {onLeave: function (args) {send("EtwpGetCpuSpeed");}});

var EvtIntReportAuthzEventAndSourceAsync = Module.findExportByName("ntdll.dll", "EvtIntReportAuthzEventAndSourceAsync")
Interceptor.attach(EvtIntReportAuthzEventAndSourceAsync, {onLeave: function (args) {send("EvtIntReportAuthzEventAndSourceAsync");}});

var EvtIntReportEventAndSourceAsync = Module.findExportByName("ntdll.dll", "EvtIntReportEventAndSourceAsync")
Interceptor.attach(EvtIntReportEventAndSourceAsync, {onLeave: function (args) {send("EvtIntReportEventAndSourceAsync");}});

var ExpInterlockedPopEntrySListEnd = Module.findExportByName("ntdll.dll", "ExpInterlockedPopEntrySListEnd")
Interceptor.attach(ExpInterlockedPopEntrySListEnd, {onLeave: function (args) {send("ExpInterlockedPopEntrySListEnd");}});

var ExpInterlockedPopEntrySListFault = Module.findExportByName("ntdll.dll", "ExpInterlockedPopEntrySListFault")
Interceptor.attach(ExpInterlockedPopEntrySListFault, {onLeave: function (args) {send("ExpInterlockedPopEntrySListFault");}});

var ExpInterlockedPopEntrySListResume = Module.findExportByName("ntdll.dll", "ExpInterlockedPopEntrySListResume")
Interceptor.attach(ExpInterlockedPopEntrySListResume, {onLeave: function (args) {send("ExpInterlockedPopEntrySListResume");}});

var KiRaiseUserExceptionDispatcher = Module.findExportByName("ntdll.dll", "KiRaiseUserExceptionDispatcher")
Interceptor.attach(KiRaiseUserExceptionDispatcher, {onLeave: function (args) {send("KiRaiseUserExceptionDispatcher");}});

var KiUserApcDispatcher = Module.findExportByName("ntdll.dll", "KiUserApcDispatcher")
Interceptor.attach(KiUserApcDispatcher, {onLeave: function (args) {send("KiUserApcDispatcher");}});

var KiUserCallbackDispatcher = Module.findExportByName("ntdll.dll", "KiUserCallbackDispatcher")
Interceptor.attach(KiUserCallbackDispatcher, {onLeave: function (args) {send("KiUserCallbackDispatcher");}});

var KiUserExceptionDispatcher = Module.findExportByName("ntdll.dll", "KiUserExceptionDispatcher")
Interceptor.attach(KiUserExceptionDispatcher, {onLeave: function (args) {send("KiUserExceptionDispatcher");}});

var KiUserInvertedFunctionTable = Module.findExportByName("ntdll.dll", "KiUserInvertedFunctionTable")
Interceptor.attach(KiUserInvertedFunctionTable, {onLeave: function (args) {send("KiUserInvertedFunctionTable");}});

var LdrAccessResource = Module.findExportByName("ntdll.dll", "LdrAccessResource")
Interceptor.attach(LdrAccessResource, {onLeave: function (args) {send("LdrAccessResource");}});

var LdrAddDllDirectory = Module.findExportByName("ntdll.dll", "LdrAddDllDirectory")
Interceptor.attach(LdrAddDllDirectory, {onLeave: function (args) {send("LdrAddDllDirectory");}});

var LdrAddLoadAsDataTable = Module.findExportByName("ntdll.dll", "LdrAddLoadAsDataTable")
Interceptor.attach(LdrAddLoadAsDataTable, {onLeave: function (args) {send("LdrAddLoadAsDataTable");}});

var LdrAddRefDll = Module.findExportByName("ntdll.dll", "LdrAddRefDll")
Interceptor.attach(LdrAddRefDll, {onLeave: function (args) {send("LdrAddRefDll");}});

var LdrAppxHandleIntegrityFailure = Module.findExportByName("ntdll.dll", "LdrAppxHandleIntegrityFailure")
Interceptor.attach(LdrAppxHandleIntegrityFailure, {onLeave: function (args) {send("LdrAppxHandleIntegrityFailure");}});

var LdrCallEnclave = Module.findExportByName("ntdll.dll", "LdrCallEnclave")
Interceptor.attach(LdrCallEnclave, {onLeave: function (args) {send("LdrCallEnclave");}});

var LdrControlFlowGuardEnforced = Module.findExportByName("ntdll.dll", "LdrControlFlowGuardEnforced")
Interceptor.attach(LdrControlFlowGuardEnforced, {onLeave: function (args) {send("LdrControlFlowGuardEnforced");}});

var LdrCreateEnclave = Module.findExportByName("ntdll.dll", "LdrCreateEnclave")
Interceptor.attach(LdrCreateEnclave, {onLeave: function (args) {send("LdrCreateEnclave");}});

var LdrDeleteEnclave = Module.findExportByName("ntdll.dll", "LdrDeleteEnclave")
Interceptor.attach(LdrDeleteEnclave, {onLeave: function (args) {send("LdrDeleteEnclave");}});

var LdrDisableThreadCalloutsForDll = Module.findExportByName("ntdll.dll", "LdrDisableThreadCalloutsForDll")
Interceptor.attach(LdrDisableThreadCalloutsForDll, {onLeave: function (args) {send("LdrDisableThreadCalloutsForDll");}});

var LdrEnumResources = Module.findExportByName("ntdll.dll", "LdrEnumResources")
Interceptor.attach(LdrEnumResources, {onLeave: function (args) {send("LdrEnumResources");}});

var LdrEnumerateLoadedModules = Module.findExportByName("ntdll.dll", "LdrEnumerateLoadedModules")
Interceptor.attach(LdrEnumerateLoadedModules, {onLeave: function (args) {send("LdrEnumerateLoadedModules");}});

var LdrFastFailInLoaderCallout = Module.findExportByName("ntdll.dll", "LdrFastFailInLoaderCallout")
Interceptor.attach(LdrFastFailInLoaderCallout, {onLeave: function (args) {send("LdrFastFailInLoaderCallout");}});

var LdrFindEntryForAddress = Module.findExportByName("ntdll.dll", "LdrFindEntryForAddress")
Interceptor.attach(LdrFindEntryForAddress, {onLeave: function (args) {send("LdrFindEntryForAddress");}});

var LdrFindResourceDirectory_U = Module.findExportByName("ntdll.dll", "LdrFindResourceDirectory_U")
Interceptor.attach(LdrFindResourceDirectory_U, {onLeave: function (args) {send("LdrFindResourceDirectory_U");}});

var LdrFindResourceEx_U = Module.findExportByName("ntdll.dll", "LdrFindResourceEx_U")
Interceptor.attach(LdrFindResourceEx_U, {onLeave: function (args) {send("LdrFindResourceEx_U");}});

var LdrFindResource_U = Module.findExportByName("ntdll.dll", "LdrFindResource_U")
Interceptor.attach(LdrFindResource_U, {onLeave: function (args) {send("LdrFindResource_U");}});

var LdrFlushAlternateResourceModules = Module.findExportByName("ntdll.dll", "LdrFlushAlternateResourceModules")
Interceptor.attach(LdrFlushAlternateResourceModules, {onLeave: function (args) {send("LdrFlushAlternateResourceModules");}});

var LdrGetDllDirectory = Module.findExportByName("ntdll.dll", "LdrGetDllDirectory")
Interceptor.attach(LdrGetDllDirectory, {onLeave: function (args) {send("LdrGetDllDirectory");}});

var LdrGetDllFullName = Module.findExportByName("ntdll.dll", "LdrGetDllFullName")
Interceptor.attach(LdrGetDllFullName, {onLeave: function (args) {send("LdrGetDllFullName");}});

var LdrGetDllHandle = Module.findExportByName("ntdll.dll", "LdrGetDllHandle")
Interceptor.attach(LdrGetDllHandle, {onLeave: function (args) {send("LdrGetDllHandle");}});

var LdrGetDllHandleByMapping = Module.findExportByName("ntdll.dll", "LdrGetDllHandleByMapping")
Interceptor.attach(LdrGetDllHandleByMapping, {onLeave: function (args) {send("LdrGetDllHandleByMapping");}});

var LdrGetDllHandleByName = Module.findExportByName("ntdll.dll", "LdrGetDllHandleByName")
Interceptor.attach(LdrGetDllHandleByName, {onLeave: function (args) {send("LdrGetDllHandleByName");}});

var LdrGetDllHandleEx = Module.findExportByName("ntdll.dll", "LdrGetDllHandleEx")
Interceptor.attach(LdrGetDllHandleEx, {onLeave: function (args) {send("LdrGetDllHandleEx");}});

var LdrGetDllPath = Module.findExportByName("ntdll.dll", "LdrGetDllPath")
Interceptor.attach(LdrGetDllPath, {onLeave: function (args) {send("LdrGetDllPath");}});

var LdrGetFailureData = Module.findExportByName("ntdll.dll", "LdrGetFailureData")
Interceptor.attach(LdrGetFailureData, {onLeave: function (args) {send("LdrGetFailureData");}});

var LdrGetFileNameFromLoadAsDataTable = Module.findExportByName("ntdll.dll", "LdrGetFileNameFromLoadAsDataTable")
Interceptor.attach(LdrGetFileNameFromLoadAsDataTable, {onLeave: function (args) {send("LdrGetFileNameFromLoadAsDataTable");}});

var LdrGetKnownDllSectionHandle = Module.findExportByName("ntdll.dll", "LdrGetKnownDllSectionHandle")
Interceptor.attach(LdrGetKnownDllSectionHandle, {onLeave: function (args) {send("LdrGetKnownDllSectionHandle");}});

var LdrGetProcedureAddress = Module.findExportByName("ntdll.dll", "LdrGetProcedureAddress")
Interceptor.attach(LdrGetProcedureAddress, {onLeave: function (args) {send("LdrGetProcedureAddress");}});

var LdrGetProcedureAddressEx = Module.findExportByName("ntdll.dll", "LdrGetProcedureAddressEx")
Interceptor.attach(LdrGetProcedureAddressEx, {onLeave: function (args) {send("LdrGetProcedureAddressEx");}});

var LdrGetProcedureAddressForCaller = Module.findExportByName("ntdll.dll", "LdrGetProcedureAddressForCaller")
Interceptor.attach(LdrGetProcedureAddressForCaller, {onLeave: function (args) {send("LdrGetProcedureAddressForCaller");}});

var LdrHotPatchNotify = Module.findExportByName("ntdll.dll", "LdrHotPatchNotify")
Interceptor.attach(LdrHotPatchNotify, {onLeave: function (args) {send("LdrHotPatchNotify");}});

var LdrInitShimEngineDynamic = Module.findExportByName("ntdll.dll", "LdrInitShimEngineDynamic")
Interceptor.attach(LdrInitShimEngineDynamic, {onLeave: function (args) {send("LdrInitShimEngineDynamic");}});

var LdrInitializeEnclave = Module.findExportByName("ntdll.dll", "LdrInitializeEnclave")
Interceptor.attach(LdrInitializeEnclave, {onLeave: function (args) {send("LdrInitializeEnclave");}});

var LdrInitializeThunk = Module.findExportByName("ntdll.dll", "LdrInitializeThunk")
Interceptor.attach(LdrInitializeThunk, {onLeave: function (args) {send("LdrInitializeThunk");}});

var LdrIsModuleSxsRedirected = Module.findExportByName("ntdll.dll", "LdrIsModuleSxsRedirected")
Interceptor.attach(LdrIsModuleSxsRedirected, {onLeave: function (args) {send("LdrIsModuleSxsRedirected");}});

var LdrLoadAlternateResourceModule = Module.findExportByName("ntdll.dll", "LdrLoadAlternateResourceModule")
Interceptor.attach(LdrLoadAlternateResourceModule, {onLeave: function (args) {send("LdrLoadAlternateResourceModule");}});

var LdrLoadAlternateResourceModuleEx = Module.findExportByName("ntdll.dll", "LdrLoadAlternateResourceModuleEx")
Interceptor.attach(LdrLoadAlternateResourceModuleEx, {onLeave: function (args) {send("LdrLoadAlternateResourceModuleEx");}});

var LdrLoadDll = Module.findExportByName("ntdll.dll", "LdrLoadDll")
Interceptor.attach(LdrLoadDll, {onLeave: function (args) {send("LdrLoadDll");}});

var LdrLoadEnclaveModule = Module.findExportByName("ntdll.dll", "LdrLoadEnclaveModule")
Interceptor.attach(LdrLoadEnclaveModule, {onLeave: function (args) {send("LdrLoadEnclaveModule");}});

var LdrLockLoaderLock = Module.findExportByName("ntdll.dll", "LdrLockLoaderLock")
Interceptor.attach(LdrLockLoaderLock, {onLeave: function (args) {send("LdrLockLoaderLock");}});

var LdrOpenImageFileOptionsKey = Module.findExportByName("ntdll.dll", "LdrOpenImageFileOptionsKey")
Interceptor.attach(LdrOpenImageFileOptionsKey, {onLeave: function (args) {send("LdrOpenImageFileOptionsKey");}});

var LdrProcessInitializationComplete = Module.findExportByName("ntdll.dll", "LdrProcessInitializationComplete")
Interceptor.attach(LdrProcessInitializationComplete, {onLeave: function (args) {send("LdrProcessInitializationComplete");}});

var LdrProcessRelocationBlock = Module.findExportByName("ntdll.dll", "LdrProcessRelocationBlock")
Interceptor.attach(LdrProcessRelocationBlock, {onLeave: function (args) {send("LdrProcessRelocationBlock");}});

var LdrProcessRelocationBlockEx = Module.findExportByName("ntdll.dll", "LdrProcessRelocationBlockEx")
Interceptor.attach(LdrProcessRelocationBlockEx, {onLeave: function (args) {send("LdrProcessRelocationBlockEx");}});

var LdrQueryImageFileExecutionOptions = Module.findExportByName("ntdll.dll", "LdrQueryImageFileExecutionOptions")
Interceptor.attach(LdrQueryImageFileExecutionOptions, {onLeave: function (args) {send("LdrQueryImageFileExecutionOptions");}});

var LdrQueryImageFileExecutionOptionsEx = Module.findExportByName("ntdll.dll", "LdrQueryImageFileExecutionOptionsEx")
Interceptor.attach(LdrQueryImageFileExecutionOptionsEx, {onLeave: function (args) {send("LdrQueryImageFileExecutionOptionsEx");}});

var LdrQueryImageFileKeyOption = Module.findExportByName("ntdll.dll", "LdrQueryImageFileKeyOption")
Interceptor.attach(LdrQueryImageFileKeyOption, {onLeave: function (args) {send("LdrQueryImageFileKeyOption");}});

var LdrQueryModuleServiceTags = Module.findExportByName("ntdll.dll", "LdrQueryModuleServiceTags")
Interceptor.attach(LdrQueryModuleServiceTags, {onLeave: function (args) {send("LdrQueryModuleServiceTags");}});

var LdrQueryOptionalDelayLoadedAPI = Module.findExportByName("ntdll.dll", "LdrQueryOptionalDelayLoadedAPI")
Interceptor.attach(LdrQueryOptionalDelayLoadedAPI, {onLeave: function (args) {send("LdrQueryOptionalDelayLoadedAPI");}});

var LdrQueryProcessModuleInformation = Module.findExportByName("ntdll.dll", "LdrQueryProcessModuleInformation")
Interceptor.attach(LdrQueryProcessModuleInformation, {onLeave: function (args) {send("LdrQueryProcessModuleInformation");}});

var LdrRegisterDllNotification = Module.findExportByName("ntdll.dll", "LdrRegisterDllNotification")
Interceptor.attach(LdrRegisterDllNotification, {onLeave: function (args) {send("LdrRegisterDllNotification");}});

var LdrRemoveDllDirectory = Module.findExportByName("ntdll.dll", "LdrRemoveDllDirectory")
Interceptor.attach(LdrRemoveDllDirectory, {onLeave: function (args) {send("LdrRemoveDllDirectory");}});

var LdrRemoveLoadAsDataTable = Module.findExportByName("ntdll.dll", "LdrRemoveLoadAsDataTable")
Interceptor.attach(LdrRemoveLoadAsDataTable, {onLeave: function (args) {send("LdrRemoveLoadAsDataTable");}});

var LdrResFindResource = Module.findExportByName("ntdll.dll", "LdrResFindResource")
Interceptor.attach(LdrResFindResource, {onLeave: function (args) {send("LdrResFindResource");}});

var LdrResFindResourceDirectory = Module.findExportByName("ntdll.dll", "LdrResFindResourceDirectory")
Interceptor.attach(LdrResFindResourceDirectory, {onLeave: function (args) {send("LdrResFindResourceDirectory");}});

var LdrResGetRCConfig = Module.findExportByName("ntdll.dll", "LdrResGetRCConfig")
Interceptor.attach(LdrResGetRCConfig, {onLeave: function (args) {send("LdrResGetRCConfig");}});

var LdrResRelease = Module.findExportByName("ntdll.dll", "LdrResRelease")
Interceptor.attach(LdrResRelease, {onLeave: function (args) {send("LdrResRelease");}});

var LdrResSearchResource = Module.findExportByName("ntdll.dll", "LdrResSearchResource")
Interceptor.attach(LdrResSearchResource, {onLeave: function (args) {send("LdrResSearchResource");}});

var LdrResolveDelayLoadedAPI = Module.findExportByName("ntdll.dll", "LdrResolveDelayLoadedAPI")
Interceptor.attach(LdrResolveDelayLoadedAPI, {onLeave: function (args) {send("LdrResolveDelayLoadedAPI");}});

var LdrResolveDelayLoadsFromDll = Module.findExportByName("ntdll.dll", "LdrResolveDelayLoadsFromDll")
Interceptor.attach(LdrResolveDelayLoadsFromDll, {onLeave: function (args) {send("LdrResolveDelayLoadsFromDll");}});

var LdrRscIsTypeExist = Module.findExportByName("ntdll.dll", "LdrRscIsTypeExist")
Interceptor.attach(LdrRscIsTypeExist, {onLeave: function (args) {send("LdrRscIsTypeExist");}});

var LdrSetAppCompatDllRedirectionCallback = Module.findExportByName("ntdll.dll", "LdrSetAppCompatDllRedirectionCallback")
Interceptor.attach(LdrSetAppCompatDllRedirectionCallback, {onLeave: function (args) {send("LdrSetAppCompatDllRedirectionCallback");}});

var LdrSetDefaultDllDirectories = Module.findExportByName("ntdll.dll", "LdrSetDefaultDllDirectories")
Interceptor.attach(LdrSetDefaultDllDirectories, {onLeave: function (args) {send("LdrSetDefaultDllDirectories");}});

var LdrSetDllDirectory = Module.findExportByName("ntdll.dll", "LdrSetDllDirectory")
Interceptor.attach(LdrSetDllDirectory, {onLeave: function (args) {send("LdrSetDllDirectory");}});

var LdrSetDllManifestProber = Module.findExportByName("ntdll.dll", "LdrSetDllManifestProber")
Interceptor.attach(LdrSetDllManifestProber, {onLeave: function (args) {send("LdrSetDllManifestProber");}});

var LdrSetImplicitPathOptions = Module.findExportByName("ntdll.dll", "LdrSetImplicitPathOptions")
Interceptor.attach(LdrSetImplicitPathOptions, {onLeave: function (args) {send("LdrSetImplicitPathOptions");}});

var LdrSetMUICacheType = Module.findExportByName("ntdll.dll", "LdrSetMUICacheType")
Interceptor.attach(LdrSetMUICacheType, {onLeave: function (args) {send("LdrSetMUICacheType");}});

var LdrShutdownProcess = Module.findExportByName("ntdll.dll", "LdrShutdownProcess")
Interceptor.attach(LdrShutdownProcess, {onLeave: function (args) {send("LdrShutdownProcess");}});

var LdrShutdownThread = Module.findExportByName("ntdll.dll", "LdrShutdownThread")
Interceptor.attach(LdrShutdownThread, {onLeave: function (args) {send("LdrShutdownThread");}});

var LdrStandardizeSystemPath = Module.findExportByName("ntdll.dll", "LdrStandardizeSystemPath")
Interceptor.attach(LdrStandardizeSystemPath, {onLeave: function (args) {send("LdrStandardizeSystemPath");}});

var LdrSystemDllInitBlock = Module.findExportByName("ntdll.dll", "LdrSystemDllInitBlock")
Interceptor.attach(LdrSystemDllInitBlock, {onLeave: function (args) {send("LdrSystemDllInitBlock");}});

var LdrUnloadAlternateResourceModule = Module.findExportByName("ntdll.dll", "LdrUnloadAlternateResourceModule")
Interceptor.attach(LdrUnloadAlternateResourceModule, {onLeave: function (args) {send("LdrUnloadAlternateResourceModule");}});

var LdrUnloadAlternateResourceModuleEx = Module.findExportByName("ntdll.dll", "LdrUnloadAlternateResourceModuleEx")
Interceptor.attach(LdrUnloadAlternateResourceModuleEx, {onLeave: function (args) {send("LdrUnloadAlternateResourceModuleEx");}});

var LdrUnloadDll = Module.findExportByName("ntdll.dll", "LdrUnloadDll")
Interceptor.attach(LdrUnloadDll, {onLeave: function (args) {send("LdrUnloadDll");}});

var LdrUnlockLoaderLock = Module.findExportByName("ntdll.dll", "LdrUnlockLoaderLock")
Interceptor.attach(LdrUnlockLoaderLock, {onLeave: function (args) {send("LdrUnlockLoaderLock");}});

var LdrUnregisterDllNotification = Module.findExportByName("ntdll.dll", "LdrUnregisterDllNotification")
Interceptor.attach(LdrUnregisterDllNotification, {onLeave: function (args) {send("LdrUnregisterDllNotification");}});

var LdrUpdatePackageSearchPath = Module.findExportByName("ntdll.dll", "LdrUpdatePackageSearchPath")
Interceptor.attach(LdrUpdatePackageSearchPath, {onLeave: function (args) {send("LdrUpdatePackageSearchPath");}});

var LdrVerifyImageMatchesChecksum = Module.findExportByName("ntdll.dll", "LdrVerifyImageMatchesChecksum")
Interceptor.attach(LdrVerifyImageMatchesChecksum, {onLeave: function (args) {send("LdrVerifyImageMatchesChecksum");}});

var LdrVerifyImageMatchesChecksumEx = Module.findExportByName("ntdll.dll", "LdrVerifyImageMatchesChecksumEx")
Interceptor.attach(LdrVerifyImageMatchesChecksumEx, {onLeave: function (args) {send("LdrVerifyImageMatchesChecksumEx");}});

var LdrpResGetMappingSize = Module.findExportByName("ntdll.dll", "LdrpResGetMappingSize")
Interceptor.attach(LdrpResGetMappingSize, {onLeave: function (args) {send("LdrpResGetMappingSize");}});

var LdrpResGetResourceDirectory = Module.findExportByName("ntdll.dll", "LdrpResGetResourceDirectory")
Interceptor.attach(LdrpResGetResourceDirectory, {onLeave: function (args) {send("LdrpResGetResourceDirectory");}});

var MD4Final = Module.findExportByName("ntdll.dll", "MD4Final")
Interceptor.attach(MD4Final, {onLeave: function (args) {send("MD4Final");}});

var MD4Init = Module.findExportByName("ntdll.dll", "MD4Init")
Interceptor.attach(MD4Init, {onLeave: function (args) {send("MD4Init");}});

var MD4Update = Module.findExportByName("ntdll.dll", "MD4Update")
Interceptor.attach(MD4Update, {onLeave: function (args) {send("MD4Update");}});

var MD5Final = Module.findExportByName("ntdll.dll", "MD5Final")
Interceptor.attach(MD5Final, {onLeave: function (args) {send("MD5Final");}});

var MD5Init = Module.findExportByName("ntdll.dll", "MD5Init")
Interceptor.attach(MD5Init, {onLeave: function (args) {send("MD5Init");}});

var MD5Update = Module.findExportByName("ntdll.dll", "MD5Update")
Interceptor.attach(MD5Update, {onLeave: function (args) {send("MD5Update");}});

var MicrosoftTelemetryAssertTriggeredUM = Module.findExportByName("ntdll.dll", "MicrosoftTelemetryAssertTriggeredUM")
Interceptor.attach(MicrosoftTelemetryAssertTriggeredUM, {onLeave: function (args) {send("MicrosoftTelemetryAssertTriggeredUM");}});

var NlsAnsiCodePage = Module.findExportByName("ntdll.dll", "NlsAnsiCodePage")
Interceptor.attach(NlsAnsiCodePage, {onLeave: function (args) {send("NlsAnsiCodePage");}});

var NlsMbCodePageTag = Module.findExportByName("ntdll.dll", "NlsMbCodePageTag")
Interceptor.attach(NlsMbCodePageTag, {onLeave: function (args) {send("NlsMbCodePageTag");}});

var NlsMbOemCodePageTag = Module.findExportByName("ntdll.dll", "NlsMbOemCodePageTag")
Interceptor.attach(NlsMbOemCodePageTag, {onLeave: function (args) {send("NlsMbOemCodePageTag");}});

var NtAcceptConnectPort = Module.findExportByName("ntdll.dll", "NtAcceptConnectPort")
Interceptor.attach(NtAcceptConnectPort, {onLeave: function (args) {send("NtAcceptConnectPort");}});

var NtAccessCheck = Module.findExportByName("ntdll.dll", "NtAccessCheck")
Interceptor.attach(NtAccessCheck, {onLeave: function (args) {send("NtAccessCheck");}});

var NtAccessCheckAndAuditAlarm = Module.findExportByName("ntdll.dll", "NtAccessCheckAndAuditAlarm")
Interceptor.attach(NtAccessCheckAndAuditAlarm, {onLeave: function (args) {send("NtAccessCheckAndAuditAlarm");}});

var NtAccessCheckByType = Module.findExportByName("ntdll.dll", "NtAccessCheckByType")
Interceptor.attach(NtAccessCheckByType, {onLeave: function (args) {send("NtAccessCheckByType");}});

var NtAccessCheckByTypeAndAuditAlarm = Module.findExportByName("ntdll.dll", "NtAccessCheckByTypeAndAuditAlarm")
Interceptor.attach(NtAccessCheckByTypeAndAuditAlarm, {onLeave: function (args) {send("NtAccessCheckByTypeAndAuditAlarm");}});

var NtAccessCheckByTypeResultList = Module.findExportByName("ntdll.dll", "NtAccessCheckByTypeResultList")
Interceptor.attach(NtAccessCheckByTypeResultList, {onLeave: function (args) {send("NtAccessCheckByTypeResultList");}});

var NtAccessCheckByTypeResultListAndAuditAlarm = Module.findExportByName("ntdll.dll", "NtAccessCheckByTypeResultListAndAuditAlarm")
Interceptor.attach(NtAccessCheckByTypeResultListAndAuditAlarm, {onLeave: function (args) {send("NtAccessCheckByTypeResultListAndAuditAlarm");}});

var NtAccessCheckByTypeResultListAndAuditAlarmByHandle = Module.findExportByName("ntdll.dll", "NtAccessCheckByTypeResultListAndAuditAlarmByHandle")
Interceptor.attach(NtAccessCheckByTypeResultListAndAuditAlarmByHandle, {onLeave: function (args) {send("NtAccessCheckByTypeResultListAndAuditAlarmByHandle");}});

var NtAcquireCrossVmMutant = Module.findExportByName("ntdll.dll", "NtAcquireCrossVmMutant")
Interceptor.attach(NtAcquireCrossVmMutant, {onLeave: function (args) {send("NtAcquireCrossVmMutant");}});

var NtAcquireProcessActivityReference = Module.findExportByName("ntdll.dll", "NtAcquireProcessActivityReference")
Interceptor.attach(NtAcquireProcessActivityReference, {onLeave: function (args) {send("NtAcquireProcessActivityReference");}});

var NtAddAtom = Module.findExportByName("ntdll.dll", "NtAddAtom")
Interceptor.attach(NtAddAtom, {onLeave: function (args) {send("NtAddAtom");}});

var NtAddAtomEx = Module.findExportByName("ntdll.dll", "NtAddAtomEx")
Interceptor.attach(NtAddAtomEx, {onLeave: function (args) {send("NtAddAtomEx");}});

var NtAddBootEntry = Module.findExportByName("ntdll.dll", "NtAddBootEntry")
Interceptor.attach(NtAddBootEntry, {onLeave: function (args) {send("NtAddBootEntry");}});

var NtAddDriverEntry = Module.findExportByName("ntdll.dll", "NtAddDriverEntry")
Interceptor.attach(NtAddDriverEntry, {onLeave: function (args) {send("NtAddDriverEntry");}});

var NtAdjustGroupsToken = Module.findExportByName("ntdll.dll", "NtAdjustGroupsToken")
Interceptor.attach(NtAdjustGroupsToken, {onLeave: function (args) {send("NtAdjustGroupsToken");}});

var NtAdjustPrivilegesToken = Module.findExportByName("ntdll.dll", "NtAdjustPrivilegesToken")
Interceptor.attach(NtAdjustPrivilegesToken, {onLeave: function (args) {send("NtAdjustPrivilegesToken");}});

var NtAdjustTokenClaimsAndDeviceGroups = Module.findExportByName("ntdll.dll", "NtAdjustTokenClaimsAndDeviceGroups")
Interceptor.attach(NtAdjustTokenClaimsAndDeviceGroups, {onLeave: function (args) {send("NtAdjustTokenClaimsAndDeviceGroups");}});

var NtAlertResumeThread = Module.findExportByName("ntdll.dll", "NtAlertResumeThread")
Interceptor.attach(NtAlertResumeThread, {onLeave: function (args) {send("NtAlertResumeThread");}});

var NtAlertThread = Module.findExportByName("ntdll.dll", "NtAlertThread")
Interceptor.attach(NtAlertThread, {onLeave: function (args) {send("NtAlertThread");}});

var NtAlertThreadByThreadId = Module.findExportByName("ntdll.dll", "NtAlertThreadByThreadId")
Interceptor.attach(NtAlertThreadByThreadId, {onLeave: function (args) {send("NtAlertThreadByThreadId");}});

var NtAllocateLocallyUniqueId = Module.findExportByName("ntdll.dll", "NtAllocateLocallyUniqueId")
Interceptor.attach(NtAllocateLocallyUniqueId, {onLeave: function (args) {send("NtAllocateLocallyUniqueId");}});

var NtAllocateReserveObject = Module.findExportByName("ntdll.dll", "NtAllocateReserveObject")
Interceptor.attach(NtAllocateReserveObject, {onLeave: function (args) {send("NtAllocateReserveObject");}});

var NtAllocateUserPhysicalPages = Module.findExportByName("ntdll.dll", "NtAllocateUserPhysicalPages")
Interceptor.attach(NtAllocateUserPhysicalPages, {onLeave: function (args) {send("NtAllocateUserPhysicalPages");}});

var NtAllocateUserPhysicalPagesEx = Module.findExportByName("ntdll.dll", "NtAllocateUserPhysicalPagesEx")
Interceptor.attach(NtAllocateUserPhysicalPagesEx, {onLeave: function (args) {send("NtAllocateUserPhysicalPagesEx");}});

var NtAllocateUuids = Module.findExportByName("ntdll.dll", "NtAllocateUuids")
Interceptor.attach(NtAllocateUuids, {onLeave: function (args) {send("NtAllocateUuids");}});

var NtAllocateVirtualMemory = Module.findExportByName("ntdll.dll", "NtAllocateVirtualMemory")
Interceptor.attach(NtAllocateVirtualMemory, {onLeave: function (args) {send("NtAllocateVirtualMemory");}});

var NtAllocateVirtualMemoryEx = Module.findExportByName("ntdll.dll", "NtAllocateVirtualMemoryEx")
Interceptor.attach(NtAllocateVirtualMemoryEx, {onLeave: function (args) {send("NtAllocateVirtualMemoryEx");}});

var NtAlpcAcceptConnectPort = Module.findExportByName("ntdll.dll", "NtAlpcAcceptConnectPort")
Interceptor.attach(NtAlpcAcceptConnectPort, {onLeave: function (args) {send("NtAlpcAcceptConnectPort");}});

var NtAlpcCancelMessage = Module.findExportByName("ntdll.dll", "NtAlpcCancelMessage")
Interceptor.attach(NtAlpcCancelMessage, {onLeave: function (args) {send("NtAlpcCancelMessage");}});

var NtAlpcConnectPort = Module.findExportByName("ntdll.dll", "NtAlpcConnectPort")
Interceptor.attach(NtAlpcConnectPort, {onLeave: function (args) {send("NtAlpcConnectPort");}});

var NtAlpcConnectPortEx = Module.findExportByName("ntdll.dll", "NtAlpcConnectPortEx")
Interceptor.attach(NtAlpcConnectPortEx, {onLeave: function (args) {send("NtAlpcConnectPortEx");}});

var NtAlpcCreatePort = Module.findExportByName("ntdll.dll", "NtAlpcCreatePort")
Interceptor.attach(NtAlpcCreatePort, {onLeave: function (args) {send("NtAlpcCreatePort");}});

var NtAlpcCreatePortSection = Module.findExportByName("ntdll.dll", "NtAlpcCreatePortSection")
Interceptor.attach(NtAlpcCreatePortSection, {onLeave: function (args) {send("NtAlpcCreatePortSection");}});

var NtAlpcCreateResourceReserve = Module.findExportByName("ntdll.dll", "NtAlpcCreateResourceReserve")
Interceptor.attach(NtAlpcCreateResourceReserve, {onLeave: function (args) {send("NtAlpcCreateResourceReserve");}});

var NtAlpcCreateSectionView = Module.findExportByName("ntdll.dll", "NtAlpcCreateSectionView")
Interceptor.attach(NtAlpcCreateSectionView, {onLeave: function (args) {send("NtAlpcCreateSectionView");}});

var NtAlpcCreateSecurityContext = Module.findExportByName("ntdll.dll", "NtAlpcCreateSecurityContext")
Interceptor.attach(NtAlpcCreateSecurityContext, {onLeave: function (args) {send("NtAlpcCreateSecurityContext");}});

var NtAlpcDeletePortSection = Module.findExportByName("ntdll.dll", "NtAlpcDeletePortSection")
Interceptor.attach(NtAlpcDeletePortSection, {onLeave: function (args) {send("NtAlpcDeletePortSection");}});

var NtAlpcDeleteResourceReserve = Module.findExportByName("ntdll.dll", "NtAlpcDeleteResourceReserve")
Interceptor.attach(NtAlpcDeleteResourceReserve, {onLeave: function (args) {send("NtAlpcDeleteResourceReserve");}});

var NtAlpcDeleteSectionView = Module.findExportByName("ntdll.dll", "NtAlpcDeleteSectionView")
Interceptor.attach(NtAlpcDeleteSectionView, {onLeave: function (args) {send("NtAlpcDeleteSectionView");}});

var NtAlpcDeleteSecurityContext = Module.findExportByName("ntdll.dll", "NtAlpcDeleteSecurityContext")
Interceptor.attach(NtAlpcDeleteSecurityContext, {onLeave: function (args) {send("NtAlpcDeleteSecurityContext");}});

var NtAlpcDisconnectPort = Module.findExportByName("ntdll.dll", "NtAlpcDisconnectPort")
Interceptor.attach(NtAlpcDisconnectPort, {onLeave: function (args) {send("NtAlpcDisconnectPort");}});

var NtAlpcImpersonateClientContainerOfPort = Module.findExportByName("ntdll.dll", "NtAlpcImpersonateClientContainerOfPort")
Interceptor.attach(NtAlpcImpersonateClientContainerOfPort, {onLeave: function (args) {send("NtAlpcImpersonateClientContainerOfPort");}});

var NtAlpcImpersonateClientOfPort = Module.findExportByName("ntdll.dll", "NtAlpcImpersonateClientOfPort")
Interceptor.attach(NtAlpcImpersonateClientOfPort, {onLeave: function (args) {send("NtAlpcImpersonateClientOfPort");}});

var NtAlpcOpenSenderProcess = Module.findExportByName("ntdll.dll", "NtAlpcOpenSenderProcess")
Interceptor.attach(NtAlpcOpenSenderProcess, {onLeave: function (args) {send("NtAlpcOpenSenderProcess");}});

var NtAlpcOpenSenderThread = Module.findExportByName("ntdll.dll", "NtAlpcOpenSenderThread")
Interceptor.attach(NtAlpcOpenSenderThread, {onLeave: function (args) {send("NtAlpcOpenSenderThread");}});

var NtAlpcQueryInformation = Module.findExportByName("ntdll.dll", "NtAlpcQueryInformation")
Interceptor.attach(NtAlpcQueryInformation, {onLeave: function (args) {send("NtAlpcQueryInformation");}});

var NtAlpcQueryInformationMessage = Module.findExportByName("ntdll.dll", "NtAlpcQueryInformationMessage")
Interceptor.attach(NtAlpcQueryInformationMessage, {onLeave: function (args) {send("NtAlpcQueryInformationMessage");}});

var NtAlpcRevokeSecurityContext = Module.findExportByName("ntdll.dll", "NtAlpcRevokeSecurityContext")
Interceptor.attach(NtAlpcRevokeSecurityContext, {onLeave: function (args) {send("NtAlpcRevokeSecurityContext");}});

var NtAlpcSendWaitReceivePort = Module.findExportByName("ntdll.dll", "NtAlpcSendWaitReceivePort")
Interceptor.attach(NtAlpcSendWaitReceivePort, {onLeave: function (args) {send("NtAlpcSendWaitReceivePort");}});

var NtAlpcSetInformation = Module.findExportByName("ntdll.dll", "NtAlpcSetInformation")
Interceptor.attach(NtAlpcSetInformation, {onLeave: function (args) {send("NtAlpcSetInformation");}});

var NtApphelpCacheControl = Module.findExportByName("ntdll.dll", "NtApphelpCacheControl")
Interceptor.attach(NtApphelpCacheControl, {onLeave: function (args) {send("NtApphelpCacheControl");}});

var NtAreMappedFilesTheSame = Module.findExportByName("ntdll.dll", "NtAreMappedFilesTheSame")
Interceptor.attach(NtAreMappedFilesTheSame, {onLeave: function (args) {send("NtAreMappedFilesTheSame");}});

var NtAssignProcessToJobObject = Module.findExportByName("ntdll.dll", "NtAssignProcessToJobObject")
Interceptor.attach(NtAssignProcessToJobObject, {onLeave: function (args) {send("NtAssignProcessToJobObject");}});

var NtAssociateWaitCompletionPacket = Module.findExportByName("ntdll.dll", "NtAssociateWaitCompletionPacket")
Interceptor.attach(NtAssociateWaitCompletionPacket, {onLeave: function (args) {send("NtAssociateWaitCompletionPacket");}});

var NtCallEnclave = Module.findExportByName("ntdll.dll", "NtCallEnclave")
Interceptor.attach(NtCallEnclave, {onLeave: function (args) {send("NtCallEnclave");}});

var NtCallbackReturn = Module.findExportByName("ntdll.dll", "NtCallbackReturn")
Interceptor.attach(NtCallbackReturn, {onLeave: function (args) {send("NtCallbackReturn");}});

var NtCancelIoFile = Module.findExportByName("ntdll.dll", "NtCancelIoFile")
Interceptor.attach(NtCancelIoFile, {onLeave: function (args) {send("NtCancelIoFile");}});

var NtCancelIoFileEx = Module.findExportByName("ntdll.dll", "NtCancelIoFileEx")
Interceptor.attach(NtCancelIoFileEx, {onLeave: function (args) {send("NtCancelIoFileEx");}});

var NtCancelSynchronousIoFile = Module.findExportByName("ntdll.dll", "NtCancelSynchronousIoFile")
Interceptor.attach(NtCancelSynchronousIoFile, {onLeave: function (args) {send("NtCancelSynchronousIoFile");}});

var NtCancelTimer = Module.findExportByName("ntdll.dll", "NtCancelTimer")
Interceptor.attach(NtCancelTimer, {onLeave: function (args) {send("NtCancelTimer");}});

var NtCancelTimer2 = Module.findExportByName("ntdll.dll", "NtCancelTimer2")
Interceptor.attach(NtCancelTimer2, {onLeave: function (args) {send("NtCancelTimer2");}});

var NtCancelWaitCompletionPacket = Module.findExportByName("ntdll.dll", "NtCancelWaitCompletionPacket")
Interceptor.attach(NtCancelWaitCompletionPacket, {onLeave: function (args) {send("NtCancelWaitCompletionPacket");}});

var NtChangeProcessState = Module.findExportByName("ntdll.dll", "NtChangeProcessState")
Interceptor.attach(NtChangeProcessState, {onLeave: function (args) {send("NtChangeProcessState");}});

var NtChangeThreadState = Module.findExportByName("ntdll.dll", "NtChangeThreadState")
Interceptor.attach(NtChangeThreadState, {onLeave: function (args) {send("NtChangeThreadState");}});

var NtClearEvent = Module.findExportByName("ntdll.dll", "NtClearEvent")
Interceptor.attach(NtClearEvent, {onLeave: function (args) {send("NtClearEvent");}});

var NtClose = Module.findExportByName("ntdll.dll", "NtClose")
Interceptor.attach(NtClose, {onLeave: function (args) {send("NtClose");}});

var NtCloseObjectAuditAlarm = Module.findExportByName("ntdll.dll", "NtCloseObjectAuditAlarm")
Interceptor.attach(NtCloseObjectAuditAlarm, {onLeave: function (args) {send("NtCloseObjectAuditAlarm");}});

var NtCommitComplete = Module.findExportByName("ntdll.dll", "NtCommitComplete")
Interceptor.attach(NtCommitComplete, {onLeave: function (args) {send("NtCommitComplete");}});

var NtCommitEnlistment = Module.findExportByName("ntdll.dll", "NtCommitEnlistment")
Interceptor.attach(NtCommitEnlistment, {onLeave: function (args) {send("NtCommitEnlistment");}});

var NtCommitRegistryTransaction = Module.findExportByName("ntdll.dll", "NtCommitRegistryTransaction")
Interceptor.attach(NtCommitRegistryTransaction, {onLeave: function (args) {send("NtCommitRegistryTransaction");}});

var NtCommitTransaction = Module.findExportByName("ntdll.dll", "NtCommitTransaction")
Interceptor.attach(NtCommitTransaction, {onLeave: function (args) {send("NtCommitTransaction");}});

var NtCompactKeys = Module.findExportByName("ntdll.dll", "NtCompactKeys")
Interceptor.attach(NtCompactKeys, {onLeave: function (args) {send("NtCompactKeys");}});

var NtCompareObjects = Module.findExportByName("ntdll.dll", "NtCompareObjects")
Interceptor.attach(NtCompareObjects, {onLeave: function (args) {send("NtCompareObjects");}});

var NtCompareSigningLevels = Module.findExportByName("ntdll.dll", "NtCompareSigningLevels")
Interceptor.attach(NtCompareSigningLevels, {onLeave: function (args) {send("NtCompareSigningLevels");}});

var NtCompareTokens = Module.findExportByName("ntdll.dll", "NtCompareTokens")
Interceptor.attach(NtCompareTokens, {onLeave: function (args) {send("NtCompareTokens");}});

var NtCompleteConnectPort = Module.findExportByName("ntdll.dll", "NtCompleteConnectPort")
Interceptor.attach(NtCompleteConnectPort, {onLeave: function (args) {send("NtCompleteConnectPort");}});

var NtCompressKey = Module.findExportByName("ntdll.dll", "NtCompressKey")
Interceptor.attach(NtCompressKey, {onLeave: function (args) {send("NtCompressKey");}});

var NtConnectPort = Module.findExportByName("ntdll.dll", "NtConnectPort")
Interceptor.attach(NtConnectPort, {onLeave: function (args) {send("NtConnectPort");}});

var NtContinue = Module.findExportByName("ntdll.dll", "NtContinue")
Interceptor.attach(NtContinue, {onLeave: function (args) {send("NtContinue");}});

var NtContinueEx = Module.findExportByName("ntdll.dll", "NtContinueEx")
Interceptor.attach(NtContinueEx, {onLeave: function (args) {send("NtContinueEx");}});

var NtConvertBetweenAuxiliaryCounterAndPerformanceCounter = Module.findExportByName("ntdll.dll", "NtConvertBetweenAuxiliaryCounterAndPerformanceCounter")
Interceptor.attach(NtConvertBetweenAuxiliaryCounterAndPerformanceCounter, {onLeave: function (args) {send("NtConvertBetweenAuxiliaryCounterAndPerformanceCounter");}});

var NtCopyFileChunk = Module.findExportByName("ntdll.dll", "NtCopyFileChunk")
Interceptor.attach(NtCopyFileChunk, {onLeave: function (args) {send("NtCopyFileChunk");}});

var NtCreateCpuPartition = Module.findExportByName("ntdll.dll", "NtCreateCpuPartition")
Interceptor.attach(NtCreateCpuPartition, {onLeave: function (args) {send("NtCreateCpuPartition");}});

var NtCreateCrossVmEvent = Module.findExportByName("ntdll.dll", "NtCreateCrossVmEvent")
Interceptor.attach(NtCreateCrossVmEvent, {onLeave: function (args) {send("NtCreateCrossVmEvent");}});

var NtCreateCrossVmMutant = Module.findExportByName("ntdll.dll", "NtCreateCrossVmMutant")
Interceptor.attach(NtCreateCrossVmMutant, {onLeave: function (args) {send("NtCreateCrossVmMutant");}});

var NtCreateDebugObject = Module.findExportByName("ntdll.dll", "NtCreateDebugObject")
Interceptor.attach(NtCreateDebugObject, {onLeave: function (args) {send("NtCreateDebugObject");}});

var NtCreateDirectoryObject = Module.findExportByName("ntdll.dll", "NtCreateDirectoryObject")
Interceptor.attach(NtCreateDirectoryObject, {onLeave: function (args) {send("NtCreateDirectoryObject");}});

var NtCreateDirectoryObjectEx = Module.findExportByName("ntdll.dll", "NtCreateDirectoryObjectEx")
Interceptor.attach(NtCreateDirectoryObjectEx, {onLeave: function (args) {send("NtCreateDirectoryObjectEx");}});

var NtCreateEnclave = Module.findExportByName("ntdll.dll", "NtCreateEnclave")
Interceptor.attach(NtCreateEnclave, {onLeave: function (args) {send("NtCreateEnclave");}});

var NtCreateEnlistment = Module.findExportByName("ntdll.dll", "NtCreateEnlistment")
Interceptor.attach(NtCreateEnlistment, {onLeave: function (args) {send("NtCreateEnlistment");}});

var NtCreateEvent = Module.findExportByName("ntdll.dll", "NtCreateEvent")
Interceptor.attach(NtCreateEvent, {onLeave: function (args) {send("NtCreateEvent");}});

var NtCreateEventPair = Module.findExportByName("ntdll.dll", "NtCreateEventPair")
Interceptor.attach(NtCreateEventPair, {onLeave: function (args) {send("NtCreateEventPair");}});

var NtCreateFile = Module.findExportByName("ntdll.dll", "NtCreateFile")
Interceptor.attach(NtCreateFile, {onLeave: function (args) {send("NtCreateFile");}});

var NtCreateIRTimer = Module.findExportByName("ntdll.dll", "NtCreateIRTimer")
Interceptor.attach(NtCreateIRTimer, {onLeave: function (args) {send("NtCreateIRTimer");}});

var NtCreateIoCompletion = Module.findExportByName("ntdll.dll", "NtCreateIoCompletion")
Interceptor.attach(NtCreateIoCompletion, {onLeave: function (args) {send("NtCreateIoCompletion");}});

var NtCreateIoRing = Module.findExportByName("ntdll.dll", "NtCreateIoRing")
Interceptor.attach(NtCreateIoRing, {onLeave: function (args) {send("NtCreateIoRing");}});

var NtCreateJobObject = Module.findExportByName("ntdll.dll", "NtCreateJobObject")
Interceptor.attach(NtCreateJobObject, {onLeave: function (args) {send("NtCreateJobObject");}});

var NtCreateJobSet = Module.findExportByName("ntdll.dll", "NtCreateJobSet")
Interceptor.attach(NtCreateJobSet, {onLeave: function (args) {send("NtCreateJobSet");}});

var NtCreateKey = Module.findExportByName("ntdll.dll", "NtCreateKey")
Interceptor.attach(NtCreateKey, {onLeave: function (args) {send("NtCreateKey");}});

var NtCreateKeyTransacted = Module.findExportByName("ntdll.dll", "NtCreateKeyTransacted")
Interceptor.attach(NtCreateKeyTransacted, {onLeave: function (args) {send("NtCreateKeyTransacted");}});

var NtCreateKeyedEvent = Module.findExportByName("ntdll.dll", "NtCreateKeyedEvent")
Interceptor.attach(NtCreateKeyedEvent, {onLeave: function (args) {send("NtCreateKeyedEvent");}});

var NtCreateLowBoxToken = Module.findExportByName("ntdll.dll", "NtCreateLowBoxToken")
Interceptor.attach(NtCreateLowBoxToken, {onLeave: function (args) {send("NtCreateLowBoxToken");}});

var NtCreateMailslotFile = Module.findExportByName("ntdll.dll", "NtCreateMailslotFile")
Interceptor.attach(NtCreateMailslotFile, {onLeave: function (args) {send("NtCreateMailslotFile");}});

var NtCreateMutant = Module.findExportByName("ntdll.dll", "NtCreateMutant")
Interceptor.attach(NtCreateMutant, {onLeave: function (args) {send("NtCreateMutant");}});

var NtCreateNamedPipeFile = Module.findExportByName("ntdll.dll", "NtCreateNamedPipeFile")
Interceptor.attach(NtCreateNamedPipeFile, {onLeave: function (args) {send("NtCreateNamedPipeFile");}});

var NtCreatePagingFile = Module.findExportByName("ntdll.dll", "NtCreatePagingFile")
Interceptor.attach(NtCreatePagingFile, {onLeave: function (args) {send("NtCreatePagingFile");}});

var NtCreatePartition = Module.findExportByName("ntdll.dll", "NtCreatePartition")
Interceptor.attach(NtCreatePartition, {onLeave: function (args) {send("NtCreatePartition");}});

var NtCreatePort = Module.findExportByName("ntdll.dll", "NtCreatePort")
Interceptor.attach(NtCreatePort, {onLeave: function (args) {send("NtCreatePort");}});

var NtCreatePrivateNamespace = Module.findExportByName("ntdll.dll", "NtCreatePrivateNamespace")
Interceptor.attach(NtCreatePrivateNamespace, {onLeave: function (args) {send("NtCreatePrivateNamespace");}});

var NtCreateProcess = Module.findExportByName("ntdll.dll", "NtCreateProcess")
Interceptor.attach(NtCreateProcess, {onLeave: function (args) {send("NtCreateProcess");}});

var NtCreateProcessEx = Module.findExportByName("ntdll.dll", "NtCreateProcessEx")
Interceptor.attach(NtCreateProcessEx, {onLeave: function (args) {send("NtCreateProcessEx");}});

var NtCreateProcessStateChange = Module.findExportByName("ntdll.dll", "NtCreateProcessStateChange")
Interceptor.attach(NtCreateProcessStateChange, {onLeave: function (args) {send("NtCreateProcessStateChange");}});

var NtCreateProfile = Module.findExportByName("ntdll.dll", "NtCreateProfile")
Interceptor.attach(NtCreateProfile, {onLeave: function (args) {send("NtCreateProfile");}});

var NtCreateProfileEx = Module.findExportByName("ntdll.dll", "NtCreateProfileEx")
Interceptor.attach(NtCreateProfileEx, {onLeave: function (args) {send("NtCreateProfileEx");}});

var NtCreateRegistryTransaction = Module.findExportByName("ntdll.dll", "NtCreateRegistryTransaction")
Interceptor.attach(NtCreateRegistryTransaction, {onLeave: function (args) {send("NtCreateRegistryTransaction");}});

var NtCreateResourceManager = Module.findExportByName("ntdll.dll", "NtCreateResourceManager")
Interceptor.attach(NtCreateResourceManager, {onLeave: function (args) {send("NtCreateResourceManager");}});

var NtCreateSection = Module.findExportByName("ntdll.dll", "NtCreateSection")
Interceptor.attach(NtCreateSection, {onLeave: function (args) {send("NtCreateSection");}});

var NtCreateSectionEx = Module.findExportByName("ntdll.dll", "NtCreateSectionEx")
Interceptor.attach(NtCreateSectionEx, {onLeave: function (args) {send("NtCreateSectionEx");}});

var NtCreateSemaphore = Module.findExportByName("ntdll.dll", "NtCreateSemaphore")
Interceptor.attach(NtCreateSemaphore, {onLeave: function (args) {send("NtCreateSemaphore");}});

var NtCreateSymbolicLinkObject = Module.findExportByName("ntdll.dll", "NtCreateSymbolicLinkObject")
Interceptor.attach(NtCreateSymbolicLinkObject, {onLeave: function (args) {send("NtCreateSymbolicLinkObject");}});

var NtCreateThread = Module.findExportByName("ntdll.dll", "NtCreateThread")
Interceptor.attach(NtCreateThread, {onLeave: function (args) {send("NtCreateThread");}});

var NtCreateThreadEx = Module.findExportByName("ntdll.dll", "NtCreateThreadEx")
Interceptor.attach(NtCreateThreadEx, {onLeave: function (args) {send("NtCreateThreadEx");}});

var NtCreateThreadStateChange = Module.findExportByName("ntdll.dll", "NtCreateThreadStateChange")
Interceptor.attach(NtCreateThreadStateChange, {onLeave: function (args) {send("NtCreateThreadStateChange");}});

var NtCreateTimer = Module.findExportByName("ntdll.dll", "NtCreateTimer")
Interceptor.attach(NtCreateTimer, {onLeave: function (args) {send("NtCreateTimer");}});

var NtCreateTimer2 = Module.findExportByName("ntdll.dll", "NtCreateTimer2")
Interceptor.attach(NtCreateTimer2, {onLeave: function (args) {send("NtCreateTimer2");}});

var NtCreateToken = Module.findExportByName("ntdll.dll", "NtCreateToken")
Interceptor.attach(NtCreateToken, {onLeave: function (args) {send("NtCreateToken");}});

var NtCreateTokenEx = Module.findExportByName("ntdll.dll", "NtCreateTokenEx")
Interceptor.attach(NtCreateTokenEx, {onLeave: function (args) {send("NtCreateTokenEx");}});

var NtCreateTransaction = Module.findExportByName("ntdll.dll", "NtCreateTransaction")
Interceptor.attach(NtCreateTransaction, {onLeave: function (args) {send("NtCreateTransaction");}});

var NtCreateTransactionManager = Module.findExportByName("ntdll.dll", "NtCreateTransactionManager")
Interceptor.attach(NtCreateTransactionManager, {onLeave: function (args) {send("NtCreateTransactionManager");}});

var NtCreateUserProcess = Module.findExportByName("ntdll.dll", "NtCreateUserProcess")
Interceptor.attach(NtCreateUserProcess, {onLeave: function (args) {send("NtCreateUserProcess");}});

var NtCreateWaitCompletionPacket = Module.findExportByName("ntdll.dll", "NtCreateWaitCompletionPacket")
Interceptor.attach(NtCreateWaitCompletionPacket, {onLeave: function (args) {send("NtCreateWaitCompletionPacket");}});

var NtCreateWaitablePort = Module.findExportByName("ntdll.dll", "NtCreateWaitablePort")
Interceptor.attach(NtCreateWaitablePort, {onLeave: function (args) {send("NtCreateWaitablePort");}});

var NtCreateWnfStateName = Module.findExportByName("ntdll.dll", "NtCreateWnfStateName")
Interceptor.attach(NtCreateWnfStateName, {onLeave: function (args) {send("NtCreateWnfStateName");}});

var NtCreateWorkerFactory = Module.findExportByName("ntdll.dll", "NtCreateWorkerFactory")
Interceptor.attach(NtCreateWorkerFactory, {onLeave: function (args) {send("NtCreateWorkerFactory");}});

var NtDebugActiveProcess = Module.findExportByName("ntdll.dll", "NtDebugActiveProcess")
Interceptor.attach(NtDebugActiveProcess, {onLeave: function (args) {send("NtDebugActiveProcess");}});

var NtDebugContinue = Module.findExportByName("ntdll.dll", "NtDebugContinue")
Interceptor.attach(NtDebugContinue, {onLeave: function (args) {send("NtDebugContinue");}});

var NtDelayExecution = Module.findExportByName("ntdll.dll", "NtDelayExecution")
Interceptor.attach(NtDelayExecution, {onLeave: function (args) {send("NtDelayExecution");}});

var NtDeleteAtom = Module.findExportByName("ntdll.dll", "NtDeleteAtom")
Interceptor.attach(NtDeleteAtom, {onLeave: function (args) {send("NtDeleteAtom");}});

var NtDeleteBootEntry = Module.findExportByName("ntdll.dll", "NtDeleteBootEntry")
Interceptor.attach(NtDeleteBootEntry, {onLeave: function (args) {send("NtDeleteBootEntry");}});

var NtDeleteDriverEntry = Module.findExportByName("ntdll.dll", "NtDeleteDriverEntry")
Interceptor.attach(NtDeleteDriverEntry, {onLeave: function (args) {send("NtDeleteDriverEntry");}});

var NtDeleteFile = Module.findExportByName("ntdll.dll", "NtDeleteFile")
Interceptor.attach(NtDeleteFile, {onLeave: function (args) {send("NtDeleteFile");}});

var NtDeleteKey = Module.findExportByName("ntdll.dll", "NtDeleteKey")
Interceptor.attach(NtDeleteKey, {onLeave: function (args) {send("NtDeleteKey");}});

var NtDeleteObjectAuditAlarm = Module.findExportByName("ntdll.dll", "NtDeleteObjectAuditAlarm")
Interceptor.attach(NtDeleteObjectAuditAlarm, {onLeave: function (args) {send("NtDeleteObjectAuditAlarm");}});

var NtDeletePrivateNamespace = Module.findExportByName("ntdll.dll", "NtDeletePrivateNamespace")
Interceptor.attach(NtDeletePrivateNamespace, {onLeave: function (args) {send("NtDeletePrivateNamespace");}});

var NtDeleteValueKey = Module.findExportByName("ntdll.dll", "NtDeleteValueKey")
Interceptor.attach(NtDeleteValueKey, {onLeave: function (args) {send("NtDeleteValueKey");}});

var NtDeleteWnfStateData = Module.findExportByName("ntdll.dll", "NtDeleteWnfStateData")
Interceptor.attach(NtDeleteWnfStateData, {onLeave: function (args) {send("NtDeleteWnfStateData");}});

var NtDeleteWnfStateName = Module.findExportByName("ntdll.dll", "NtDeleteWnfStateName")
Interceptor.attach(NtDeleteWnfStateName, {onLeave: function (args) {send("NtDeleteWnfStateName");}});

var NtDeviceIoControlFile = Module.findExportByName("ntdll.dll", "NtDeviceIoControlFile")
Interceptor.attach(NtDeviceIoControlFile, {onLeave: function (args) {send("NtDeviceIoControlFile");}});

var NtDirectGraphicsCall = Module.findExportByName("ntdll.dll", "NtDirectGraphicsCall")
Interceptor.attach(NtDirectGraphicsCall, {onLeave: function (args) {send("NtDirectGraphicsCall");}});

var NtDisableLastKnownGood = Module.findExportByName("ntdll.dll", "NtDisableLastKnownGood")
Interceptor.attach(NtDisableLastKnownGood, {onLeave: function (args) {send("NtDisableLastKnownGood");}});

var NtDisplayString = Module.findExportByName("ntdll.dll", "NtDisplayString")
Interceptor.attach(NtDisplayString, {onLeave: function (args) {send("NtDisplayString");}});

var NtDrawText = Module.findExportByName("ntdll.dll", "NtDrawText")
Interceptor.attach(NtDrawText, {onLeave: function (args) {send("NtDrawText");}});

var NtDuplicateObject = Module.findExportByName("ntdll.dll", "NtDuplicateObject")
Interceptor.attach(NtDuplicateObject, {onLeave: function (args) {send("NtDuplicateObject");}});

var NtDuplicateToken = Module.findExportByName("ntdll.dll", "NtDuplicateToken")
Interceptor.attach(NtDuplicateToken, {onLeave: function (args) {send("NtDuplicateToken");}});

var NtEnableLastKnownGood = Module.findExportByName("ntdll.dll", "NtEnableLastKnownGood")
Interceptor.attach(NtEnableLastKnownGood, {onLeave: function (args) {send("NtEnableLastKnownGood");}});

var NtEnumerateBootEntries = Module.findExportByName("ntdll.dll", "NtEnumerateBootEntries")
Interceptor.attach(NtEnumerateBootEntries, {onLeave: function (args) {send("NtEnumerateBootEntries");}});

var NtEnumerateDriverEntries = Module.findExportByName("ntdll.dll", "NtEnumerateDriverEntries")
Interceptor.attach(NtEnumerateDriverEntries, {onLeave: function (args) {send("NtEnumerateDriverEntries");}});

var NtEnumerateKey = Module.findExportByName("ntdll.dll", "NtEnumerateKey")
Interceptor.attach(NtEnumerateKey, {onLeave: function (args) {send("NtEnumerateKey");}});

var NtEnumerateSystemEnvironmentValuesEx = Module.findExportByName("ntdll.dll", "NtEnumerateSystemEnvironmentValuesEx")
Interceptor.attach(NtEnumerateSystemEnvironmentValuesEx, {onLeave: function (args) {send("NtEnumerateSystemEnvironmentValuesEx");}});

var NtEnumerateTransactionObject = Module.findExportByName("ntdll.dll", "NtEnumerateTransactionObject")
Interceptor.attach(NtEnumerateTransactionObject, {onLeave: function (args) {send("NtEnumerateTransactionObject");}});

var NtEnumerateValueKey = Module.findExportByName("ntdll.dll", "NtEnumerateValueKey")
Interceptor.attach(NtEnumerateValueKey, {onLeave: function (args) {send("NtEnumerateValueKey");}});

var NtExtendSection = Module.findExportByName("ntdll.dll", "NtExtendSection")
Interceptor.attach(NtExtendSection, {onLeave: function (args) {send("NtExtendSection");}});

var NtFilterBootOption = Module.findExportByName("ntdll.dll", "NtFilterBootOption")
Interceptor.attach(NtFilterBootOption, {onLeave: function (args) {send("NtFilterBootOption");}});

var NtFilterToken = Module.findExportByName("ntdll.dll", "NtFilterToken")
Interceptor.attach(NtFilterToken, {onLeave: function (args) {send("NtFilterToken");}});

var NtFilterTokenEx = Module.findExportByName("ntdll.dll", "NtFilterTokenEx")
Interceptor.attach(NtFilterTokenEx, {onLeave: function (args) {send("NtFilterTokenEx");}});

var NtFindAtom = Module.findExportByName("ntdll.dll", "NtFindAtom")
Interceptor.attach(NtFindAtom, {onLeave: function (args) {send("NtFindAtom");}});

var NtFlushBuffersFile = Module.findExportByName("ntdll.dll", "NtFlushBuffersFile")
Interceptor.attach(NtFlushBuffersFile, {onLeave: function (args) {send("NtFlushBuffersFile");}});

var NtFlushBuffersFileEx = Module.findExportByName("ntdll.dll", "NtFlushBuffersFileEx")
Interceptor.attach(NtFlushBuffersFileEx, {onLeave: function (args) {send("NtFlushBuffersFileEx");}});

var NtFlushInstallUILanguage = Module.findExportByName("ntdll.dll", "NtFlushInstallUILanguage")
Interceptor.attach(NtFlushInstallUILanguage, {onLeave: function (args) {send("NtFlushInstallUILanguage");}});

var NtFlushInstructionCache = Module.findExportByName("ntdll.dll", "NtFlushInstructionCache")
Interceptor.attach(NtFlushInstructionCache, {onLeave: function (args) {send("NtFlushInstructionCache");}});

var NtFlushKey = Module.findExportByName("ntdll.dll", "NtFlushKey")
Interceptor.attach(NtFlushKey, {onLeave: function (args) {send("NtFlushKey");}});

var NtFlushProcessWriteBuffers = Module.findExportByName("ntdll.dll", "NtFlushProcessWriteBuffers")
Interceptor.attach(NtFlushProcessWriteBuffers, {onLeave: function (args) {send("NtFlushProcessWriteBuffers");}});

var NtFlushVirtualMemory = Module.findExportByName("ntdll.dll", "NtFlushVirtualMemory")
Interceptor.attach(NtFlushVirtualMemory, {onLeave: function (args) {send("NtFlushVirtualMemory");}});

var NtFlushWriteBuffer = Module.findExportByName("ntdll.dll", "NtFlushWriteBuffer")
Interceptor.attach(NtFlushWriteBuffer, {onLeave: function (args) {send("NtFlushWriteBuffer");}});

var NtFreeUserPhysicalPages = Module.findExportByName("ntdll.dll", "NtFreeUserPhysicalPages")
Interceptor.attach(NtFreeUserPhysicalPages, {onLeave: function (args) {send("NtFreeUserPhysicalPages");}});

var NtFreeVirtualMemory = Module.findExportByName("ntdll.dll", "NtFreeVirtualMemory")
Interceptor.attach(NtFreeVirtualMemory, {onLeave: function (args) {send("NtFreeVirtualMemory");}});

var NtFreezeRegistry = Module.findExportByName("ntdll.dll", "NtFreezeRegistry")
Interceptor.attach(NtFreezeRegistry, {onLeave: function (args) {send("NtFreezeRegistry");}});

var NtFreezeTransactions = Module.findExportByName("ntdll.dll", "NtFreezeTransactions")
Interceptor.attach(NtFreezeTransactions, {onLeave: function (args) {send("NtFreezeTransactions");}});

var NtFsControlFile = Module.findExportByName("ntdll.dll", "NtFsControlFile")
Interceptor.attach(NtFsControlFile, {onLeave: function (args) {send("NtFsControlFile");}});

var NtGetCachedSigningLevel = Module.findExportByName("ntdll.dll", "NtGetCachedSigningLevel")
Interceptor.attach(NtGetCachedSigningLevel, {onLeave: function (args) {send("NtGetCachedSigningLevel");}});

var NtGetCompleteWnfStateSubscription = Module.findExportByName("ntdll.dll", "NtGetCompleteWnfStateSubscription")
Interceptor.attach(NtGetCompleteWnfStateSubscription, {onLeave: function (args) {send("NtGetCompleteWnfStateSubscription");}});

var NtGetContextThread = Module.findExportByName("ntdll.dll", "NtGetContextThread")
Interceptor.attach(NtGetContextThread, {onLeave: function (args) {send("NtGetContextThread");}});

var NtGetCurrentProcessorNumber = Module.findExportByName("ntdll.dll", "NtGetCurrentProcessorNumber")
Interceptor.attach(NtGetCurrentProcessorNumber, {onLeave: function (args) {send("NtGetCurrentProcessorNumber");}});

var NtGetCurrentProcessorNumberEx = Module.findExportByName("ntdll.dll", "NtGetCurrentProcessorNumberEx")
Interceptor.attach(NtGetCurrentProcessorNumberEx, {onLeave: function (args) {send("NtGetCurrentProcessorNumberEx");}});

var NtGetDevicePowerState = Module.findExportByName("ntdll.dll", "NtGetDevicePowerState")
Interceptor.attach(NtGetDevicePowerState, {onLeave: function (args) {send("NtGetDevicePowerState");}});

var NtGetMUIRegistryInfo = Module.findExportByName("ntdll.dll", "NtGetMUIRegistryInfo")
Interceptor.attach(NtGetMUIRegistryInfo, {onLeave: function (args) {send("NtGetMUIRegistryInfo");}});

var NtGetNextProcess = Module.findExportByName("ntdll.dll", "NtGetNextProcess")
Interceptor.attach(NtGetNextProcess, {onLeave: function (args) {send("NtGetNextProcess");}});

var NtGetNextThread = Module.findExportByName("ntdll.dll", "NtGetNextThread")
Interceptor.attach(NtGetNextThread, {onLeave: function (args) {send("NtGetNextThread");}});

var NtGetNlsSectionPtr = Module.findExportByName("ntdll.dll", "NtGetNlsSectionPtr")
Interceptor.attach(NtGetNlsSectionPtr, {onLeave: function (args) {send("NtGetNlsSectionPtr");}});

var NtGetNotificationResourceManager = Module.findExportByName("ntdll.dll", "NtGetNotificationResourceManager")
Interceptor.attach(NtGetNotificationResourceManager, {onLeave: function (args) {send("NtGetNotificationResourceManager");}});

var NtGetTickCount = Module.findExportByName("ntdll.dll", "NtGetTickCount")
Interceptor.attach(NtGetTickCount, {onLeave: function (args) {send("NtGetTickCount");}});

var NtGetWriteWatch = Module.findExportByName("ntdll.dll", "NtGetWriteWatch")
Interceptor.attach(NtGetWriteWatch, {onLeave: function (args) {send("NtGetWriteWatch");}});

var NtImpersonateAnonymousToken = Module.findExportByName("ntdll.dll", "NtImpersonateAnonymousToken")
Interceptor.attach(NtImpersonateAnonymousToken, {onLeave: function (args) {send("NtImpersonateAnonymousToken");}});

var NtImpersonateClientOfPort = Module.findExportByName("ntdll.dll", "NtImpersonateClientOfPort")
Interceptor.attach(NtImpersonateClientOfPort, {onLeave: function (args) {send("NtImpersonateClientOfPort");}});

var NtImpersonateThread = Module.findExportByName("ntdll.dll", "NtImpersonateThread")
Interceptor.attach(NtImpersonateThread, {onLeave: function (args) {send("NtImpersonateThread");}});

var NtInitializeEnclave = Module.findExportByName("ntdll.dll", "NtInitializeEnclave")
Interceptor.attach(NtInitializeEnclave, {onLeave: function (args) {send("NtInitializeEnclave");}});

var NtInitializeNlsFiles = Module.findExportByName("ntdll.dll", "NtInitializeNlsFiles")
Interceptor.attach(NtInitializeNlsFiles, {onLeave: function (args) {send("NtInitializeNlsFiles");}});

var NtInitializeRegistry = Module.findExportByName("ntdll.dll", "NtInitializeRegistry")
Interceptor.attach(NtInitializeRegistry, {onLeave: function (args) {send("NtInitializeRegistry");}});

var NtInitiatePowerAction = Module.findExportByName("ntdll.dll", "NtInitiatePowerAction")
Interceptor.attach(NtInitiatePowerAction, {onLeave: function (args) {send("NtInitiatePowerAction");}});

var NtIsProcessInJob = Module.findExportByName("ntdll.dll", "NtIsProcessInJob")
Interceptor.attach(NtIsProcessInJob, {onLeave: function (args) {send("NtIsProcessInJob");}});

var NtIsSystemResumeAutomatic = Module.findExportByName("ntdll.dll", "NtIsSystemResumeAutomatic")
Interceptor.attach(NtIsSystemResumeAutomatic, {onLeave: function (args) {send("NtIsSystemResumeAutomatic");}});

var NtIsUILanguageComitted = Module.findExportByName("ntdll.dll", "NtIsUILanguageComitted")
Interceptor.attach(NtIsUILanguageComitted, {onLeave: function (args) {send("NtIsUILanguageComitted");}});

var NtListenPort = Module.findExportByName("ntdll.dll", "NtListenPort")
Interceptor.attach(NtListenPort, {onLeave: function (args) {send("NtListenPort");}});

var NtLoadDriver = Module.findExportByName("ntdll.dll", "NtLoadDriver")
Interceptor.attach(NtLoadDriver, {onLeave: function (args) {send("NtLoadDriver");}});

var NtLoadEnclaveData = Module.findExportByName("ntdll.dll", "NtLoadEnclaveData")
Interceptor.attach(NtLoadEnclaveData, {onLeave: function (args) {send("NtLoadEnclaveData");}});

var NtLoadKey = Module.findExportByName("ntdll.dll", "NtLoadKey")
Interceptor.attach(NtLoadKey, {onLeave: function (args) {send("NtLoadKey");}});

var NtLoadKey2 = Module.findExportByName("ntdll.dll", "NtLoadKey2")
Interceptor.attach(NtLoadKey2, {onLeave: function (args) {send("NtLoadKey2");}});

var NtLoadKey3 = Module.findExportByName("ntdll.dll", "NtLoadKey3")
Interceptor.attach(NtLoadKey3, {onLeave: function (args) {send("NtLoadKey3");}});

var NtLoadKeyEx = Module.findExportByName("ntdll.dll", "NtLoadKeyEx")
Interceptor.attach(NtLoadKeyEx, {onLeave: function (args) {send("NtLoadKeyEx");}});

var NtLockFile = Module.findExportByName("ntdll.dll", "NtLockFile")
Interceptor.attach(NtLockFile, {onLeave: function (args) {send("NtLockFile");}});

var NtLockProductActivationKeys = Module.findExportByName("ntdll.dll", "NtLockProductActivationKeys")
Interceptor.attach(NtLockProductActivationKeys, {onLeave: function (args) {send("NtLockProductActivationKeys");}});

var NtLockRegistryKey = Module.findExportByName("ntdll.dll", "NtLockRegistryKey")
Interceptor.attach(NtLockRegistryKey, {onLeave: function (args) {send("NtLockRegistryKey");}});

var NtLockVirtualMemory = Module.findExportByName("ntdll.dll", "NtLockVirtualMemory")
Interceptor.attach(NtLockVirtualMemory, {onLeave: function (args) {send("NtLockVirtualMemory");}});

var NtMakePermanentObject = Module.findExportByName("ntdll.dll", "NtMakePermanentObject")
Interceptor.attach(NtMakePermanentObject, {onLeave: function (args) {send("NtMakePermanentObject");}});

var NtMakeTemporaryObject = Module.findExportByName("ntdll.dll", "NtMakeTemporaryObject")
Interceptor.attach(NtMakeTemporaryObject, {onLeave: function (args) {send("NtMakeTemporaryObject");}});

var NtManageHotPatch = Module.findExportByName("ntdll.dll", "NtManageHotPatch")
Interceptor.attach(NtManageHotPatch, {onLeave: function (args) {send("NtManageHotPatch");}});

var NtManagePartition = Module.findExportByName("ntdll.dll", "NtManagePartition")
Interceptor.attach(NtManagePartition, {onLeave: function (args) {send("NtManagePartition");}});

var NtMapCMFModule = Module.findExportByName("ntdll.dll", "NtMapCMFModule")
Interceptor.attach(NtMapCMFModule, {onLeave: function (args) {send("NtMapCMFModule");}});

var NtMapUserPhysicalPages = Module.findExportByName("ntdll.dll", "NtMapUserPhysicalPages")
Interceptor.attach(NtMapUserPhysicalPages, {onLeave: function (args) {send("NtMapUserPhysicalPages");}});

var NtMapUserPhysicalPagesScatter = Module.findExportByName("ntdll.dll", "NtMapUserPhysicalPagesScatter")
Interceptor.attach(NtMapUserPhysicalPagesScatter, {onLeave: function (args) {send("NtMapUserPhysicalPagesScatter");}});

var NtMapViewOfSection = Module.findExportByName("ntdll.dll", "NtMapViewOfSection")
Interceptor.attach(NtMapViewOfSection, {onLeave: function (args) {send("NtMapViewOfSection");}});

var NtMapViewOfSectionEx = Module.findExportByName("ntdll.dll", "NtMapViewOfSectionEx")
Interceptor.attach(NtMapViewOfSectionEx, {onLeave: function (args) {send("NtMapViewOfSectionEx");}});

var NtModifyBootEntry = Module.findExportByName("ntdll.dll", "NtModifyBootEntry")
Interceptor.attach(NtModifyBootEntry, {onLeave: function (args) {send("NtModifyBootEntry");}});

var NtModifyDriverEntry = Module.findExportByName("ntdll.dll", "NtModifyDriverEntry")
Interceptor.attach(NtModifyDriverEntry, {onLeave: function (args) {send("NtModifyDriverEntry");}});

var NtNotifyChangeDirectoryFile = Module.findExportByName("ntdll.dll", "NtNotifyChangeDirectoryFile")
Interceptor.attach(NtNotifyChangeDirectoryFile, {onLeave: function (args) {send("NtNotifyChangeDirectoryFile");}});

var NtNotifyChangeDirectoryFileEx = Module.findExportByName("ntdll.dll", "NtNotifyChangeDirectoryFileEx")
Interceptor.attach(NtNotifyChangeDirectoryFileEx, {onLeave: function (args) {send("NtNotifyChangeDirectoryFileEx");}});

var NtNotifyChangeKey = Module.findExportByName("ntdll.dll", "NtNotifyChangeKey")
Interceptor.attach(NtNotifyChangeKey, {onLeave: function (args) {send("NtNotifyChangeKey");}});

var NtNotifyChangeMultipleKeys = Module.findExportByName("ntdll.dll", "NtNotifyChangeMultipleKeys")
Interceptor.attach(NtNotifyChangeMultipleKeys, {onLeave: function (args) {send("NtNotifyChangeMultipleKeys");}});

var NtNotifyChangeSession = Module.findExportByName("ntdll.dll", "NtNotifyChangeSession")
Interceptor.attach(NtNotifyChangeSession, {onLeave: function (args) {send("NtNotifyChangeSession");}});

var NtOpenCpuPartition = Module.findExportByName("ntdll.dll", "NtOpenCpuPartition")
Interceptor.attach(NtOpenCpuPartition, {onLeave: function (args) {send("NtOpenCpuPartition");}});

var NtOpenDirectoryObject = Module.findExportByName("ntdll.dll", "NtOpenDirectoryObject")
Interceptor.attach(NtOpenDirectoryObject, {onLeave: function (args) {send("NtOpenDirectoryObject");}});

var NtOpenEnlistment = Module.findExportByName("ntdll.dll", "NtOpenEnlistment")
Interceptor.attach(NtOpenEnlistment, {onLeave: function (args) {send("NtOpenEnlistment");}});

var NtOpenEvent = Module.findExportByName("ntdll.dll", "NtOpenEvent")
Interceptor.attach(NtOpenEvent, {onLeave: function (args) {send("NtOpenEvent");}});

var NtOpenEventPair = Module.findExportByName("ntdll.dll", "NtOpenEventPair")
Interceptor.attach(NtOpenEventPair, {onLeave: function (args) {send("NtOpenEventPair");}});

var NtOpenFile = Module.findExportByName("ntdll.dll", "NtOpenFile")
Interceptor.attach(NtOpenFile, {onLeave: function (args) {send("NtOpenFile");}});

var NtOpenIoCompletion = Module.findExportByName("ntdll.dll", "NtOpenIoCompletion")
Interceptor.attach(NtOpenIoCompletion, {onLeave: function (args) {send("NtOpenIoCompletion");}});

var NtOpenJobObject = Module.findExportByName("ntdll.dll", "NtOpenJobObject")
Interceptor.attach(NtOpenJobObject, {onLeave: function (args) {send("NtOpenJobObject");}});

var NtOpenKey = Module.findExportByName("ntdll.dll", "NtOpenKey")
Interceptor.attach(NtOpenKey, {onLeave: function (args) {send("NtOpenKey");}});

var NtOpenKeyEx = Module.findExportByName("ntdll.dll", "NtOpenKeyEx")
Interceptor.attach(NtOpenKeyEx, {onLeave: function (args) {send("NtOpenKeyEx");}});

var NtOpenKeyTransacted = Module.findExportByName("ntdll.dll", "NtOpenKeyTransacted")
Interceptor.attach(NtOpenKeyTransacted, {onLeave: function (args) {send("NtOpenKeyTransacted");}});

var NtOpenKeyTransactedEx = Module.findExportByName("ntdll.dll", "NtOpenKeyTransactedEx")
Interceptor.attach(NtOpenKeyTransactedEx, {onLeave: function (args) {send("NtOpenKeyTransactedEx");}});

var NtOpenKeyedEvent = Module.findExportByName("ntdll.dll", "NtOpenKeyedEvent")
Interceptor.attach(NtOpenKeyedEvent, {onLeave: function (args) {send("NtOpenKeyedEvent");}});

var NtOpenMutant = Module.findExportByName("ntdll.dll", "NtOpenMutant")
Interceptor.attach(NtOpenMutant, {onLeave: function (args) {send("NtOpenMutant");}});

var NtOpenObjectAuditAlarm = Module.findExportByName("ntdll.dll", "NtOpenObjectAuditAlarm")
Interceptor.attach(NtOpenObjectAuditAlarm, {onLeave: function (args) {send("NtOpenObjectAuditAlarm");}});

var NtOpenPartition = Module.findExportByName("ntdll.dll", "NtOpenPartition")
Interceptor.attach(NtOpenPartition, {onLeave: function (args) {send("NtOpenPartition");}});

var NtOpenPrivateNamespace = Module.findExportByName("ntdll.dll", "NtOpenPrivateNamespace")
Interceptor.attach(NtOpenPrivateNamespace, {onLeave: function (args) {send("NtOpenPrivateNamespace");}});

var NtOpenProcess = Module.findExportByName("ntdll.dll", "NtOpenProcess")
Interceptor.attach(NtOpenProcess, {onLeave: function (args) {send("NtOpenProcess");}});

var NtOpenProcessToken = Module.findExportByName("ntdll.dll", "NtOpenProcessToken")
Interceptor.attach(NtOpenProcessToken, {onLeave: function (args) {send("NtOpenProcessToken");}});

var NtOpenProcessTokenEx = Module.findExportByName("ntdll.dll", "NtOpenProcessTokenEx")
Interceptor.attach(NtOpenProcessTokenEx, {onLeave: function (args) {send("NtOpenProcessTokenEx");}});

var NtOpenRegistryTransaction = Module.findExportByName("ntdll.dll", "NtOpenRegistryTransaction")
Interceptor.attach(NtOpenRegistryTransaction, {onLeave: function (args) {send("NtOpenRegistryTransaction");}});

var NtOpenResourceManager = Module.findExportByName("ntdll.dll", "NtOpenResourceManager")
Interceptor.attach(NtOpenResourceManager, {onLeave: function (args) {send("NtOpenResourceManager");}});

var NtOpenSection = Module.findExportByName("ntdll.dll", "NtOpenSection")
Interceptor.attach(NtOpenSection, {onLeave: function (args) {send("NtOpenSection");}});

var NtOpenSemaphore = Module.findExportByName("ntdll.dll", "NtOpenSemaphore")
Interceptor.attach(NtOpenSemaphore, {onLeave: function (args) {send("NtOpenSemaphore");}});

var NtOpenSession = Module.findExportByName("ntdll.dll", "NtOpenSession")
Interceptor.attach(NtOpenSession, {onLeave: function (args) {send("NtOpenSession");}});

var NtOpenSymbolicLinkObject = Module.findExportByName("ntdll.dll", "NtOpenSymbolicLinkObject")
Interceptor.attach(NtOpenSymbolicLinkObject, {onLeave: function (args) {send("NtOpenSymbolicLinkObject");}});

var NtOpenThread = Module.findExportByName("ntdll.dll", "NtOpenThread")
Interceptor.attach(NtOpenThread, {onLeave: function (args) {send("NtOpenThread");}});

var NtOpenThreadToken = Module.findExportByName("ntdll.dll", "NtOpenThreadToken")
Interceptor.attach(NtOpenThreadToken, {onLeave: function (args) {send("NtOpenThreadToken");}});

var NtOpenThreadTokenEx = Module.findExportByName("ntdll.dll", "NtOpenThreadTokenEx")
Interceptor.attach(NtOpenThreadTokenEx, {onLeave: function (args) {send("NtOpenThreadTokenEx");}});

var NtOpenTimer = Module.findExportByName("ntdll.dll", "NtOpenTimer")
Interceptor.attach(NtOpenTimer, {onLeave: function (args) {send("NtOpenTimer");}});

var NtOpenTransaction = Module.findExportByName("ntdll.dll", "NtOpenTransaction")
Interceptor.attach(NtOpenTransaction, {onLeave: function (args) {send("NtOpenTransaction");}});

var NtOpenTransactionManager = Module.findExportByName("ntdll.dll", "NtOpenTransactionManager")
Interceptor.attach(NtOpenTransactionManager, {onLeave: function (args) {send("NtOpenTransactionManager");}});

var NtPlugPlayControl = Module.findExportByName("ntdll.dll", "NtPlugPlayControl")
Interceptor.attach(NtPlugPlayControl, {onLeave: function (args) {send("NtPlugPlayControl");}});

var NtPowerInformation = Module.findExportByName("ntdll.dll", "NtPowerInformation")
Interceptor.attach(NtPowerInformation, {onLeave: function (args) {send("NtPowerInformation");}});

var NtPrePrepareComplete = Module.findExportByName("ntdll.dll", "NtPrePrepareComplete")
Interceptor.attach(NtPrePrepareComplete, {onLeave: function (args) {send("NtPrePrepareComplete");}});

var NtPrePrepareEnlistment = Module.findExportByName("ntdll.dll", "NtPrePrepareEnlistment")
Interceptor.attach(NtPrePrepareEnlistment, {onLeave: function (args) {send("NtPrePrepareEnlistment");}});

var NtPrepareComplete = Module.findExportByName("ntdll.dll", "NtPrepareComplete")
Interceptor.attach(NtPrepareComplete, {onLeave: function (args) {send("NtPrepareComplete");}});

var NtPrepareEnlistment = Module.findExportByName("ntdll.dll", "NtPrepareEnlistment")
Interceptor.attach(NtPrepareEnlistment, {onLeave: function (args) {send("NtPrepareEnlistment");}});

var NtPrivilegeCheck = Module.findExportByName("ntdll.dll", "NtPrivilegeCheck")
Interceptor.attach(NtPrivilegeCheck, {onLeave: function (args) {send("NtPrivilegeCheck");}});

var NtPrivilegeObjectAuditAlarm = Module.findExportByName("ntdll.dll", "NtPrivilegeObjectAuditAlarm")
Interceptor.attach(NtPrivilegeObjectAuditAlarm, {onLeave: function (args) {send("NtPrivilegeObjectAuditAlarm");}});

var NtPrivilegedServiceAuditAlarm = Module.findExportByName("ntdll.dll", "NtPrivilegedServiceAuditAlarm")
Interceptor.attach(NtPrivilegedServiceAuditAlarm, {onLeave: function (args) {send("NtPrivilegedServiceAuditAlarm");}});

var NtPropagationComplete = Module.findExportByName("ntdll.dll", "NtPropagationComplete")
Interceptor.attach(NtPropagationComplete, {onLeave: function (args) {send("NtPropagationComplete");}});

var NtPropagationFailed = Module.findExportByName("ntdll.dll", "NtPropagationFailed")
Interceptor.attach(NtPropagationFailed, {onLeave: function (args) {send("NtPropagationFailed");}});

var NtProtectVirtualMemory = Module.findExportByName("ntdll.dll", "NtProtectVirtualMemory")
Interceptor.attach(NtProtectVirtualMemory, {onLeave: function (args) {send("NtProtectVirtualMemory");}});

var NtPssCaptureVaSpaceBulk = Module.findExportByName("ntdll.dll", "NtPssCaptureVaSpaceBulk")
Interceptor.attach(NtPssCaptureVaSpaceBulk, {onLeave: function (args) {send("NtPssCaptureVaSpaceBulk");}});

var NtPulseEvent = Module.findExportByName("ntdll.dll", "NtPulseEvent")
Interceptor.attach(NtPulseEvent, {onLeave: function (args) {send("NtPulseEvent");}});

var NtQueryAttributesFile = Module.findExportByName("ntdll.dll", "NtQueryAttributesFile")
Interceptor.attach(NtQueryAttributesFile, {onLeave: function (args) {send("NtQueryAttributesFile");}});

var NtQueryAuxiliaryCounterFrequency = Module.findExportByName("ntdll.dll", "NtQueryAuxiliaryCounterFrequency")
Interceptor.attach(NtQueryAuxiliaryCounterFrequency, {onLeave: function (args) {send("NtQueryAuxiliaryCounterFrequency");}});

var NtQueryBootEntryOrder = Module.findExportByName("ntdll.dll", "NtQueryBootEntryOrder")
Interceptor.attach(NtQueryBootEntryOrder, {onLeave: function (args) {send("NtQueryBootEntryOrder");}});

var NtQueryBootOptions = Module.findExportByName("ntdll.dll", "NtQueryBootOptions")
Interceptor.attach(NtQueryBootOptions, {onLeave: function (args) {send("NtQueryBootOptions");}});

var NtQueryDebugFilterState = Module.findExportByName("ntdll.dll", "NtQueryDebugFilterState")
Interceptor.attach(NtQueryDebugFilterState, {onLeave: function (args) {send("NtQueryDebugFilterState");}});

var NtQueryDefaultLocale = Module.findExportByName("ntdll.dll", "NtQueryDefaultLocale")
Interceptor.attach(NtQueryDefaultLocale, {onLeave: function (args) {send("NtQueryDefaultLocale");}});

var NtQueryDefaultUILanguage = Module.findExportByName("ntdll.dll", "NtQueryDefaultUILanguage")
Interceptor.attach(NtQueryDefaultUILanguage, {onLeave: function (args) {send("NtQueryDefaultUILanguage");}});

var NtQueryDirectoryFile = Module.findExportByName("ntdll.dll", "NtQueryDirectoryFile")
Interceptor.attach(NtQueryDirectoryFile, {onLeave: function (args) {send("NtQueryDirectoryFile");}});

var NtQueryDirectoryFileEx = Module.findExportByName("ntdll.dll", "NtQueryDirectoryFileEx")
Interceptor.attach(NtQueryDirectoryFileEx, {onLeave: function (args) {send("NtQueryDirectoryFileEx");}});

var NtQueryDirectoryObject = Module.findExportByName("ntdll.dll", "NtQueryDirectoryObject")
Interceptor.attach(NtQueryDirectoryObject, {onLeave: function (args) {send("NtQueryDirectoryObject");}});

var NtQueryDriverEntryOrder = Module.findExportByName("ntdll.dll", "NtQueryDriverEntryOrder")
Interceptor.attach(NtQueryDriverEntryOrder, {onLeave: function (args) {send("NtQueryDriverEntryOrder");}});

var NtQueryEaFile = Module.findExportByName("ntdll.dll", "NtQueryEaFile")
Interceptor.attach(NtQueryEaFile, {onLeave: function (args) {send("NtQueryEaFile");}});

var NtQueryEvent = Module.findExportByName("ntdll.dll", "NtQueryEvent")
Interceptor.attach(NtQueryEvent, {onLeave: function (args) {send("NtQueryEvent");}});

var NtQueryFullAttributesFile = Module.findExportByName("ntdll.dll", "NtQueryFullAttributesFile")
Interceptor.attach(NtQueryFullAttributesFile, {onLeave: function (args) {send("NtQueryFullAttributesFile");}});

var NtQueryInformationAtom = Module.findExportByName("ntdll.dll", "NtQueryInformationAtom")
Interceptor.attach(NtQueryInformationAtom, {onLeave: function (args) {send("NtQueryInformationAtom");}});

var NtQueryInformationByName = Module.findExportByName("ntdll.dll", "NtQueryInformationByName")
Interceptor.attach(NtQueryInformationByName, {onLeave: function (args) {send("NtQueryInformationByName");}});

var NtQueryInformationCpuPartition = Module.findExportByName("ntdll.dll", "NtQueryInformationCpuPartition")
Interceptor.attach(NtQueryInformationCpuPartition, {onLeave: function (args) {send("NtQueryInformationCpuPartition");}});

var NtQueryInformationEnlistment = Module.findExportByName("ntdll.dll", "NtQueryInformationEnlistment")
Interceptor.attach(NtQueryInformationEnlistment, {onLeave: function (args) {send("NtQueryInformationEnlistment");}});

var NtQueryInformationFile = Module.findExportByName("ntdll.dll", "NtQueryInformationFile")
Interceptor.attach(NtQueryInformationFile, {onLeave: function (args) {send("NtQueryInformationFile");}});

var NtQueryInformationJobObject = Module.findExportByName("ntdll.dll", "NtQueryInformationJobObject")
Interceptor.attach(NtQueryInformationJobObject, {onLeave: function (args) {send("NtQueryInformationJobObject");}});

var NtQueryInformationPort = Module.findExportByName("ntdll.dll", "NtQueryInformationPort")
Interceptor.attach(NtQueryInformationPort, {onLeave: function (args) {send("NtQueryInformationPort");}});

var NtQueryInformationProcess = Module.findExportByName("ntdll.dll", "NtQueryInformationProcess")
Interceptor.attach(NtQueryInformationProcess, {onLeave: function (args) {send("NtQueryInformationProcess");}});

var NtQueryInformationResourceManager = Module.findExportByName("ntdll.dll", "NtQueryInformationResourceManager")
Interceptor.attach(NtQueryInformationResourceManager, {onLeave: function (args) {send("NtQueryInformationResourceManager");}});

var NtQueryInformationThread = Module.findExportByName("ntdll.dll", "NtQueryInformationThread")
Interceptor.attach(NtQueryInformationThread, {onLeave: function (args) {send("NtQueryInformationThread");}});

var NtQueryInformationToken = Module.findExportByName("ntdll.dll", "NtQueryInformationToken")
Interceptor.attach(NtQueryInformationToken, {onLeave: function (args) {send("NtQueryInformationToken");}});

var NtQueryInformationTransaction = Module.findExportByName("ntdll.dll", "NtQueryInformationTransaction")
Interceptor.attach(NtQueryInformationTransaction, {onLeave: function (args) {send("NtQueryInformationTransaction");}});

var NtQueryInformationTransactionManager = Module.findExportByName("ntdll.dll", "NtQueryInformationTransactionManager")
Interceptor.attach(NtQueryInformationTransactionManager, {onLeave: function (args) {send("NtQueryInformationTransactionManager");}});

var NtQueryInformationWorkerFactory = Module.findExportByName("ntdll.dll", "NtQueryInformationWorkerFactory")
Interceptor.attach(NtQueryInformationWorkerFactory, {onLeave: function (args) {send("NtQueryInformationWorkerFactory");}});

var NtQueryInstallUILanguage = Module.findExportByName("ntdll.dll", "NtQueryInstallUILanguage")
Interceptor.attach(NtQueryInstallUILanguage, {onLeave: function (args) {send("NtQueryInstallUILanguage");}});

var NtQueryIntervalProfile = Module.findExportByName("ntdll.dll", "NtQueryIntervalProfile")
Interceptor.attach(NtQueryIntervalProfile, {onLeave: function (args) {send("NtQueryIntervalProfile");}});

var NtQueryIoCompletion = Module.findExportByName("ntdll.dll", "NtQueryIoCompletion")
Interceptor.attach(NtQueryIoCompletion, {onLeave: function (args) {send("NtQueryIoCompletion");}});

var NtQueryIoRingCapabilities = Module.findExportByName("ntdll.dll", "NtQueryIoRingCapabilities")
Interceptor.attach(NtQueryIoRingCapabilities, {onLeave: function (args) {send("NtQueryIoRingCapabilities");}});

var NtQueryKey = Module.findExportByName("ntdll.dll", "NtQueryKey")
Interceptor.attach(NtQueryKey, {onLeave: function (args) {send("NtQueryKey");}});

var NtQueryLicenseValue = Module.findExportByName("ntdll.dll", "NtQueryLicenseValue")
Interceptor.attach(NtQueryLicenseValue, {onLeave: function (args) {send("NtQueryLicenseValue");}});

var NtQueryMultipleValueKey = Module.findExportByName("ntdll.dll", "NtQueryMultipleValueKey")
Interceptor.attach(NtQueryMultipleValueKey, {onLeave: function (args) {send("NtQueryMultipleValueKey");}});

var NtQueryMutant = Module.findExportByName("ntdll.dll", "NtQueryMutant")
Interceptor.attach(NtQueryMutant, {onLeave: function (args) {send("NtQueryMutant");}});

var NtQueryObject = Module.findExportByName("ntdll.dll", "NtQueryObject")
Interceptor.attach(NtQueryObject, {onLeave: function (args) {send("NtQueryObject");}});

var NtQueryOpenSubKeys = Module.findExportByName("ntdll.dll", "NtQueryOpenSubKeys")
Interceptor.attach(NtQueryOpenSubKeys, {onLeave: function (args) {send("NtQueryOpenSubKeys");}});

var NtQueryOpenSubKeysEx = Module.findExportByName("ntdll.dll", "NtQueryOpenSubKeysEx")
Interceptor.attach(NtQueryOpenSubKeysEx, {onLeave: function (args) {send("NtQueryOpenSubKeysEx");}});

var NtQueryPerformanceCounter = Module.findExportByName("ntdll.dll", "NtQueryPerformanceCounter")
Interceptor.attach(NtQueryPerformanceCounter, {onLeave: function (args) {send("NtQueryPerformanceCounter");}});

var NtQueryPortInformationProcess = Module.findExportByName("ntdll.dll", "NtQueryPortInformationProcess")
Interceptor.attach(NtQueryPortInformationProcess, {onLeave: function (args) {send("NtQueryPortInformationProcess");}});

var NtQueryQuotaInformationFile = Module.findExportByName("ntdll.dll", "NtQueryQuotaInformationFile")
Interceptor.attach(NtQueryQuotaInformationFile, {onLeave: function (args) {send("NtQueryQuotaInformationFile");}});

var NtQuerySection = Module.findExportByName("ntdll.dll", "NtQuerySection")
Interceptor.attach(NtQuerySection, {onLeave: function (args) {send("NtQuerySection");}});

var NtQuerySecurityAttributesToken = Module.findExportByName("ntdll.dll", "NtQuerySecurityAttributesToken")
Interceptor.attach(NtQuerySecurityAttributesToken, {onLeave: function (args) {send("NtQuerySecurityAttributesToken");}});

var NtQuerySecurityObject = Module.findExportByName("ntdll.dll", "NtQuerySecurityObject")
Interceptor.attach(NtQuerySecurityObject, {onLeave: function (args) {send("NtQuerySecurityObject");}});

var NtQuerySecurityPolicy = Module.findExportByName("ntdll.dll", "NtQuerySecurityPolicy")
Interceptor.attach(NtQuerySecurityPolicy, {onLeave: function (args) {send("NtQuerySecurityPolicy");}});

var NtQuerySemaphore = Module.findExportByName("ntdll.dll", "NtQuerySemaphore")
Interceptor.attach(NtQuerySemaphore, {onLeave: function (args) {send("NtQuerySemaphore");}});

var NtQuerySymbolicLinkObject = Module.findExportByName("ntdll.dll", "NtQuerySymbolicLinkObject")
Interceptor.attach(NtQuerySymbolicLinkObject, {onLeave: function (args) {send("NtQuerySymbolicLinkObject");}});

var NtQuerySystemEnvironmentValue = Module.findExportByName("ntdll.dll", "NtQuerySystemEnvironmentValue")
Interceptor.attach(NtQuerySystemEnvironmentValue, {onLeave: function (args) {send("NtQuerySystemEnvironmentValue");}});

var NtQuerySystemEnvironmentValueEx = Module.findExportByName("ntdll.dll", "NtQuerySystemEnvironmentValueEx")
Interceptor.attach(NtQuerySystemEnvironmentValueEx, {onLeave: function (args) {send("NtQuerySystemEnvironmentValueEx");}});

var NtQuerySystemInformation = Module.findExportByName("ntdll.dll", "NtQuerySystemInformation")
Interceptor.attach(NtQuerySystemInformation, {onLeave: function (args) {send("NtQuerySystemInformation");}});

var NtQuerySystemInformationEx = Module.findExportByName("ntdll.dll", "NtQuerySystemInformationEx")
Interceptor.attach(NtQuerySystemInformationEx, {onLeave: function (args) {send("NtQuerySystemInformationEx");}});

var NtQuerySystemTime = Module.findExportByName("ntdll.dll", "NtQuerySystemTime")
Interceptor.attach(NtQuerySystemTime, {onLeave: function (args) {send("NtQuerySystemTime");}});

var NtQueryTimer = Module.findExportByName("ntdll.dll", "NtQueryTimer")
Interceptor.attach(NtQueryTimer, {onLeave: function (args) {send("NtQueryTimer");}});

var NtQueryTimerResolution = Module.findExportByName("ntdll.dll", "NtQueryTimerResolution")
Interceptor.attach(NtQueryTimerResolution, {onLeave: function (args) {send("NtQueryTimerResolution");}});

var NtQueryValueKey = Module.findExportByName("ntdll.dll", "NtQueryValueKey")
Interceptor.attach(NtQueryValueKey, {onLeave: function (args) {send("NtQueryValueKey");}});

var NtQueryVirtualMemory = Module.findExportByName("ntdll.dll", "NtQueryVirtualMemory")
Interceptor.attach(NtQueryVirtualMemory, {onLeave: function (args) {send("NtQueryVirtualMemory");}});

var NtQueryVolumeInformationFile = Module.findExportByName("ntdll.dll", "NtQueryVolumeInformationFile")
Interceptor.attach(NtQueryVolumeInformationFile, {onLeave: function (args) {send("NtQueryVolumeInformationFile");}});

var NtQueryWnfStateData = Module.findExportByName("ntdll.dll", "NtQueryWnfStateData")
Interceptor.attach(NtQueryWnfStateData, {onLeave: function (args) {send("NtQueryWnfStateData");}});

var NtQueryWnfStateNameInformation = Module.findExportByName("ntdll.dll", "NtQueryWnfStateNameInformation")
Interceptor.attach(NtQueryWnfStateNameInformation, {onLeave: function (args) {send("NtQueryWnfStateNameInformation");}});

var NtQueueApcThread = Module.findExportByName("ntdll.dll", "NtQueueApcThread")
Interceptor.attach(NtQueueApcThread, {onLeave: function (args) {send("NtQueueApcThread");}});

var NtQueueApcThreadEx = Module.findExportByName("ntdll.dll", "NtQueueApcThreadEx")
Interceptor.attach(NtQueueApcThreadEx, {onLeave: function (args) {send("NtQueueApcThreadEx");}});

var NtQueueApcThreadEx2 = Module.findExportByName("ntdll.dll", "NtQueueApcThreadEx2")
Interceptor.attach(NtQueueApcThreadEx2, {onLeave: function (args) {send("NtQueueApcThreadEx2");}});

var NtRaiseException = Module.findExportByName("ntdll.dll", "NtRaiseException")
Interceptor.attach(NtRaiseException, {onLeave: function (args) {send("NtRaiseException");}});

var NtRaiseHardError = Module.findExportByName("ntdll.dll", "NtRaiseHardError")
Interceptor.attach(NtRaiseHardError, {onLeave: function (args) {send("NtRaiseHardError");}});

var NtReadFile = Module.findExportByName("ntdll.dll", "NtReadFile")
Interceptor.attach(NtReadFile, {onLeave: function (args) {send("NtReadFile");}});

var NtReadFileScatter = Module.findExportByName("ntdll.dll", "NtReadFileScatter")
Interceptor.attach(NtReadFileScatter, {onLeave: function (args) {send("NtReadFileScatter");}});

var NtReadOnlyEnlistment = Module.findExportByName("ntdll.dll", "NtReadOnlyEnlistment")
Interceptor.attach(NtReadOnlyEnlistment, {onLeave: function (args) {send("NtReadOnlyEnlistment");}});

var NtReadRequestData = Module.findExportByName("ntdll.dll", "NtReadRequestData")
Interceptor.attach(NtReadRequestData, {onLeave: function (args) {send("NtReadRequestData");}});

var NtReadVirtualMemory = Module.findExportByName("ntdll.dll", "NtReadVirtualMemory")
Interceptor.attach(NtReadVirtualMemory, {onLeave: function (args) {send("NtReadVirtualMemory");}});

var NtReadVirtualMemoryEx = Module.findExportByName("ntdll.dll", "NtReadVirtualMemoryEx")
Interceptor.attach(NtReadVirtualMemoryEx, {onLeave: function (args) {send("NtReadVirtualMemoryEx");}});

var NtRecoverEnlistment = Module.findExportByName("ntdll.dll", "NtRecoverEnlistment")
Interceptor.attach(NtRecoverEnlistment, {onLeave: function (args) {send("NtRecoverEnlistment");}});

var NtRecoverResourceManager = Module.findExportByName("ntdll.dll", "NtRecoverResourceManager")
Interceptor.attach(NtRecoverResourceManager, {onLeave: function (args) {send("NtRecoverResourceManager");}});

var NtRecoverTransactionManager = Module.findExportByName("ntdll.dll", "NtRecoverTransactionManager")
Interceptor.attach(NtRecoverTransactionManager, {onLeave: function (args) {send("NtRecoverTransactionManager");}});

var NtRegisterProtocolAddressInformation = Module.findExportByName("ntdll.dll", "NtRegisterProtocolAddressInformation")
Interceptor.attach(NtRegisterProtocolAddressInformation, {onLeave: function (args) {send("NtRegisterProtocolAddressInformation");}});

var NtRegisterThreadTerminatePort = Module.findExportByName("ntdll.dll", "NtRegisterThreadTerminatePort")
Interceptor.attach(NtRegisterThreadTerminatePort, {onLeave: function (args) {send("NtRegisterThreadTerminatePort");}});

var NtReleaseKeyedEvent = Module.findExportByName("ntdll.dll", "NtReleaseKeyedEvent")
Interceptor.attach(NtReleaseKeyedEvent, {onLeave: function (args) {send("NtReleaseKeyedEvent");}});

var NtReleaseMutant = Module.findExportByName("ntdll.dll", "NtReleaseMutant")
Interceptor.attach(NtReleaseMutant, {onLeave: function (args) {send("NtReleaseMutant");}});

var NtReleaseSemaphore = Module.findExportByName("ntdll.dll", "NtReleaseSemaphore")
Interceptor.attach(NtReleaseSemaphore, {onLeave: function (args) {send("NtReleaseSemaphore");}});

var NtReleaseWorkerFactoryWorker = Module.findExportByName("ntdll.dll", "NtReleaseWorkerFactoryWorker")
Interceptor.attach(NtReleaseWorkerFactoryWorker, {onLeave: function (args) {send("NtReleaseWorkerFactoryWorker");}});

var NtRemoveIoCompletion = Module.findExportByName("ntdll.dll", "NtRemoveIoCompletion")
Interceptor.attach(NtRemoveIoCompletion, {onLeave: function (args) {send("NtRemoveIoCompletion");}});

var NtRemoveIoCompletionEx = Module.findExportByName("ntdll.dll", "NtRemoveIoCompletionEx")
Interceptor.attach(NtRemoveIoCompletionEx, {onLeave: function (args) {send("NtRemoveIoCompletionEx");}});

var NtRemoveProcessDebug = Module.findExportByName("ntdll.dll", "NtRemoveProcessDebug")
Interceptor.attach(NtRemoveProcessDebug, {onLeave: function (args) {send("NtRemoveProcessDebug");}});

var NtRenameKey = Module.findExportByName("ntdll.dll", "NtRenameKey")
Interceptor.attach(NtRenameKey, {onLeave: function (args) {send("NtRenameKey");}});

var NtRenameTransactionManager = Module.findExportByName("ntdll.dll", "NtRenameTransactionManager")
Interceptor.attach(NtRenameTransactionManager, {onLeave: function (args) {send("NtRenameTransactionManager");}});

var NtReplaceKey = Module.findExportByName("ntdll.dll", "NtReplaceKey")
Interceptor.attach(NtReplaceKey, {onLeave: function (args) {send("NtReplaceKey");}});

var NtReplacePartitionUnit = Module.findExportByName("ntdll.dll", "NtReplacePartitionUnit")
Interceptor.attach(NtReplacePartitionUnit, {onLeave: function (args) {send("NtReplacePartitionUnit");}});

var NtReplyPort = Module.findExportByName("ntdll.dll", "NtReplyPort")
Interceptor.attach(NtReplyPort, {onLeave: function (args) {send("NtReplyPort");}});

var NtReplyWaitReceivePort = Module.findExportByName("ntdll.dll", "NtReplyWaitReceivePort")
Interceptor.attach(NtReplyWaitReceivePort, {onLeave: function (args) {send("NtReplyWaitReceivePort");}});

var NtReplyWaitReceivePortEx = Module.findExportByName("ntdll.dll", "NtReplyWaitReceivePortEx")
Interceptor.attach(NtReplyWaitReceivePortEx, {onLeave: function (args) {send("NtReplyWaitReceivePortEx");}});

var NtReplyWaitReplyPort = Module.findExportByName("ntdll.dll", "NtReplyWaitReplyPort")
Interceptor.attach(NtReplyWaitReplyPort, {onLeave: function (args) {send("NtReplyWaitReplyPort");}});

var NtRequestPort = Module.findExportByName("ntdll.dll", "NtRequestPort")
Interceptor.attach(NtRequestPort, {onLeave: function (args) {send("NtRequestPort");}});

var NtRequestWaitReplyPort = Module.findExportByName("ntdll.dll", "NtRequestWaitReplyPort")
Interceptor.attach(NtRequestWaitReplyPort, {onLeave: function (args) {send("NtRequestWaitReplyPort");}});

var NtResetEvent = Module.findExportByName("ntdll.dll", "NtResetEvent")
Interceptor.attach(NtResetEvent, {onLeave: function (args) {send("NtResetEvent");}});

var NtResetWriteWatch = Module.findExportByName("ntdll.dll", "NtResetWriteWatch")
Interceptor.attach(NtResetWriteWatch, {onLeave: function (args) {send("NtResetWriteWatch");}});

var NtRestoreKey = Module.findExportByName("ntdll.dll", "NtRestoreKey")
Interceptor.attach(NtRestoreKey, {onLeave: function (args) {send("NtRestoreKey");}});

var NtResumeProcess = Module.findExportByName("ntdll.dll", "NtResumeProcess")
Interceptor.attach(NtResumeProcess, {onLeave: function (args) {send("NtResumeProcess");}});

var NtResumeThread = Module.findExportByName("ntdll.dll", "NtResumeThread")
Interceptor.attach(NtResumeThread, {onLeave: function (args) {send("NtResumeThread");}});

var NtRevertContainerImpersonation = Module.findExportByName("ntdll.dll", "NtRevertContainerImpersonation")
Interceptor.attach(NtRevertContainerImpersonation, {onLeave: function (args) {send("NtRevertContainerImpersonation");}});

var NtRollbackComplete = Module.findExportByName("ntdll.dll", "NtRollbackComplete")
Interceptor.attach(NtRollbackComplete, {onLeave: function (args) {send("NtRollbackComplete");}});

var NtRollbackEnlistment = Module.findExportByName("ntdll.dll", "NtRollbackEnlistment")
Interceptor.attach(NtRollbackEnlistment, {onLeave: function (args) {send("NtRollbackEnlistment");}});

var NtRollbackRegistryTransaction = Module.findExportByName("ntdll.dll", "NtRollbackRegistryTransaction")
Interceptor.attach(NtRollbackRegistryTransaction, {onLeave: function (args) {send("NtRollbackRegistryTransaction");}});

var NtRollbackTransaction = Module.findExportByName("ntdll.dll", "NtRollbackTransaction")
Interceptor.attach(NtRollbackTransaction, {onLeave: function (args) {send("NtRollbackTransaction");}});

var NtRollforwardTransactionManager = Module.findExportByName("ntdll.dll", "NtRollforwardTransactionManager")
Interceptor.attach(NtRollforwardTransactionManager, {onLeave: function (args) {send("NtRollforwardTransactionManager");}});

var NtSaveKey = Module.findExportByName("ntdll.dll", "NtSaveKey")
Interceptor.attach(NtSaveKey, {onLeave: function (args) {send("NtSaveKey");}});

var NtSaveKeyEx = Module.findExportByName("ntdll.dll", "NtSaveKeyEx")
Interceptor.attach(NtSaveKeyEx, {onLeave: function (args) {send("NtSaveKeyEx");}});

var NtSaveMergedKeys = Module.findExportByName("ntdll.dll", "NtSaveMergedKeys")
Interceptor.attach(NtSaveMergedKeys, {onLeave: function (args) {send("NtSaveMergedKeys");}});

var NtSecureConnectPort = Module.findExportByName("ntdll.dll", "NtSecureConnectPort")
Interceptor.attach(NtSecureConnectPort, {onLeave: function (args) {send("NtSecureConnectPort");}});

var NtSerializeBoot = Module.findExportByName("ntdll.dll", "NtSerializeBoot")
Interceptor.attach(NtSerializeBoot, {onLeave: function (args) {send("NtSerializeBoot");}});

var NtSetBootEntryOrder = Module.findExportByName("ntdll.dll", "NtSetBootEntryOrder")
Interceptor.attach(NtSetBootEntryOrder, {onLeave: function (args) {send("NtSetBootEntryOrder");}});

var NtSetBootOptions = Module.findExportByName("ntdll.dll", "NtSetBootOptions")
Interceptor.attach(NtSetBootOptions, {onLeave: function (args) {send("NtSetBootOptions");}});

var NtSetCachedSigningLevel = Module.findExportByName("ntdll.dll", "NtSetCachedSigningLevel")
Interceptor.attach(NtSetCachedSigningLevel, {onLeave: function (args) {send("NtSetCachedSigningLevel");}});

var NtSetCachedSigningLevel2 = Module.findExportByName("ntdll.dll", "NtSetCachedSigningLevel2")
Interceptor.attach(NtSetCachedSigningLevel2, {onLeave: function (args) {send("NtSetCachedSigningLevel2");}});

var NtSetContextThread = Module.findExportByName("ntdll.dll", "NtSetContextThread")
Interceptor.attach(NtSetContextThread, {onLeave: function (args) {send("NtSetContextThread");}});

var NtSetDebugFilterState = Module.findExportByName("ntdll.dll", "NtSetDebugFilterState")
Interceptor.attach(NtSetDebugFilterState, {onLeave: function (args) {send("NtSetDebugFilterState");}});

var NtSetDefaultHardErrorPort = Module.findExportByName("ntdll.dll", "NtSetDefaultHardErrorPort")
Interceptor.attach(NtSetDefaultHardErrorPort, {onLeave: function (args) {send("NtSetDefaultHardErrorPort");}});

var NtSetDefaultLocale = Module.findExportByName("ntdll.dll", "NtSetDefaultLocale")
Interceptor.attach(NtSetDefaultLocale, {onLeave: function (args) {send("NtSetDefaultLocale");}});

var NtSetDefaultUILanguage = Module.findExportByName("ntdll.dll", "NtSetDefaultUILanguage")
Interceptor.attach(NtSetDefaultUILanguage, {onLeave: function (args) {send("NtSetDefaultUILanguage");}});

var NtSetDriverEntryOrder = Module.findExportByName("ntdll.dll", "NtSetDriverEntryOrder")
Interceptor.attach(NtSetDriverEntryOrder, {onLeave: function (args) {send("NtSetDriverEntryOrder");}});

var NtSetEaFile = Module.findExportByName("ntdll.dll", "NtSetEaFile")
Interceptor.attach(NtSetEaFile, {onLeave: function (args) {send("NtSetEaFile");}});

var NtSetEvent = Module.findExportByName("ntdll.dll", "NtSetEvent")
Interceptor.attach(NtSetEvent, {onLeave: function (args) {send("NtSetEvent");}});

var NtSetEventBoostPriority = Module.findExportByName("ntdll.dll", "NtSetEventBoostPriority")
Interceptor.attach(NtSetEventBoostPriority, {onLeave: function (args) {send("NtSetEventBoostPriority");}});

var NtSetHighEventPair = Module.findExportByName("ntdll.dll", "NtSetHighEventPair")
Interceptor.attach(NtSetHighEventPair, {onLeave: function (args) {send("NtSetHighEventPair");}});

var NtSetHighWaitLowEventPair = Module.findExportByName("ntdll.dll", "NtSetHighWaitLowEventPair")
Interceptor.attach(NtSetHighWaitLowEventPair, {onLeave: function (args) {send("NtSetHighWaitLowEventPair");}});

var NtSetIRTimer = Module.findExportByName("ntdll.dll", "NtSetIRTimer")
Interceptor.attach(NtSetIRTimer, {onLeave: function (args) {send("NtSetIRTimer");}});

var NtSetInformationCpuPartition = Module.findExportByName("ntdll.dll", "NtSetInformationCpuPartition")
Interceptor.attach(NtSetInformationCpuPartition, {onLeave: function (args) {send("NtSetInformationCpuPartition");}});

var NtSetInformationDebugObject = Module.findExportByName("ntdll.dll", "NtSetInformationDebugObject")
Interceptor.attach(NtSetInformationDebugObject, {onLeave: function (args) {send("NtSetInformationDebugObject");}});

var NtSetInformationEnlistment = Module.findExportByName("ntdll.dll", "NtSetInformationEnlistment")
Interceptor.attach(NtSetInformationEnlistment, {onLeave: function (args) {send("NtSetInformationEnlistment");}});

var NtSetInformationFile = Module.findExportByName("ntdll.dll", "NtSetInformationFile")
Interceptor.attach(NtSetInformationFile, {onLeave: function (args) {send("NtSetInformationFile");}});

var NtSetInformationIoRing = Module.findExportByName("ntdll.dll", "NtSetInformationIoRing")
Interceptor.attach(NtSetInformationIoRing, {onLeave: function (args) {send("NtSetInformationIoRing");}});

var NtSetInformationJobObject = Module.findExportByName("ntdll.dll", "NtSetInformationJobObject")
Interceptor.attach(NtSetInformationJobObject, {onLeave: function (args) {send("NtSetInformationJobObject");}});

var NtSetInformationKey = Module.findExportByName("ntdll.dll", "NtSetInformationKey")
Interceptor.attach(NtSetInformationKey, {onLeave: function (args) {send("NtSetInformationKey");}});

var NtSetInformationObject = Module.findExportByName("ntdll.dll", "NtSetInformationObject")
Interceptor.attach(NtSetInformationObject, {onLeave: function (args) {send("NtSetInformationObject");}});

var NtSetInformationProcess = Module.findExportByName("ntdll.dll", "NtSetInformationProcess")
Interceptor.attach(NtSetInformationProcess, {onLeave: function (args) {send("NtSetInformationProcess");}});

var NtSetInformationResourceManager = Module.findExportByName("ntdll.dll", "NtSetInformationResourceManager")
Interceptor.attach(NtSetInformationResourceManager, {onLeave: function (args) {send("NtSetInformationResourceManager");}});

var NtSetInformationSymbolicLink = Module.findExportByName("ntdll.dll", "NtSetInformationSymbolicLink")
Interceptor.attach(NtSetInformationSymbolicLink, {onLeave: function (args) {send("NtSetInformationSymbolicLink");}});

var NtSetInformationThread = Module.findExportByName("ntdll.dll", "NtSetInformationThread")
Interceptor.attach(NtSetInformationThread, {onLeave: function (args) {send("NtSetInformationThread");}});

var NtSetInformationToken = Module.findExportByName("ntdll.dll", "NtSetInformationToken")
Interceptor.attach(NtSetInformationToken, {onLeave: function (args) {send("NtSetInformationToken");}});

var NtSetInformationTransaction = Module.findExportByName("ntdll.dll", "NtSetInformationTransaction")
Interceptor.attach(NtSetInformationTransaction, {onLeave: function (args) {send("NtSetInformationTransaction");}});

var NtSetInformationTransactionManager = Module.findExportByName("ntdll.dll", "NtSetInformationTransactionManager")
Interceptor.attach(NtSetInformationTransactionManager, {onLeave: function (args) {send("NtSetInformationTransactionManager");}});

var NtSetInformationVirtualMemory = Module.findExportByName("ntdll.dll", "NtSetInformationVirtualMemory")
Interceptor.attach(NtSetInformationVirtualMemory, {onLeave: function (args) {send("NtSetInformationVirtualMemory");}});

var NtSetInformationWorkerFactory = Module.findExportByName("ntdll.dll", "NtSetInformationWorkerFactory")
Interceptor.attach(NtSetInformationWorkerFactory, {onLeave: function (args) {send("NtSetInformationWorkerFactory");}});

var NtSetIntervalProfile = Module.findExportByName("ntdll.dll", "NtSetIntervalProfile")
Interceptor.attach(NtSetIntervalProfile, {onLeave: function (args) {send("NtSetIntervalProfile");}});

var NtSetIoCompletion = Module.findExportByName("ntdll.dll", "NtSetIoCompletion")
Interceptor.attach(NtSetIoCompletion, {onLeave: function (args) {send("NtSetIoCompletion");}});

var NtSetIoCompletionEx = Module.findExportByName("ntdll.dll", "NtSetIoCompletionEx")
Interceptor.attach(NtSetIoCompletionEx, {onLeave: function (args) {send("NtSetIoCompletionEx");}});

var NtSetLdtEntries = Module.findExportByName("ntdll.dll", "NtSetLdtEntries")
Interceptor.attach(NtSetLdtEntries, {onLeave: function (args) {send("NtSetLdtEntries");}});

var NtSetLowEventPair = Module.findExportByName("ntdll.dll", "NtSetLowEventPair")
Interceptor.attach(NtSetLowEventPair, {onLeave: function (args) {send("NtSetLowEventPair");}});

var NtSetLowWaitHighEventPair = Module.findExportByName("ntdll.dll", "NtSetLowWaitHighEventPair")
Interceptor.attach(NtSetLowWaitHighEventPair, {onLeave: function (args) {send("NtSetLowWaitHighEventPair");}});

var NtSetQuotaInformationFile = Module.findExportByName("ntdll.dll", "NtSetQuotaInformationFile")
Interceptor.attach(NtSetQuotaInformationFile, {onLeave: function (args) {send("NtSetQuotaInformationFile");}});

var NtSetSecurityObject = Module.findExportByName("ntdll.dll", "NtSetSecurityObject")
Interceptor.attach(NtSetSecurityObject, {onLeave: function (args) {send("NtSetSecurityObject");}});

var NtSetSystemEnvironmentValue = Module.findExportByName("ntdll.dll", "NtSetSystemEnvironmentValue")
Interceptor.attach(NtSetSystemEnvironmentValue, {onLeave: function (args) {send("NtSetSystemEnvironmentValue");}});

var NtSetSystemEnvironmentValueEx = Module.findExportByName("ntdll.dll", "NtSetSystemEnvironmentValueEx")
Interceptor.attach(NtSetSystemEnvironmentValueEx, {onLeave: function (args) {send("NtSetSystemEnvironmentValueEx");}});

var NtSetSystemInformation = Module.findExportByName("ntdll.dll", "NtSetSystemInformation")
Interceptor.attach(NtSetSystemInformation, {onLeave: function (args) {send("NtSetSystemInformation");}});

var NtSetSystemPowerState = Module.findExportByName("ntdll.dll", "NtSetSystemPowerState")
Interceptor.attach(NtSetSystemPowerState, {onLeave: function (args) {send("NtSetSystemPowerState");}});

var NtSetSystemTime = Module.findExportByName("ntdll.dll", "NtSetSystemTime")
Interceptor.attach(NtSetSystemTime, {onLeave: function (args) {send("NtSetSystemTime");}});

var NtSetThreadExecutionState = Module.findExportByName("ntdll.dll", "NtSetThreadExecutionState")
Interceptor.attach(NtSetThreadExecutionState, {onLeave: function (args) {send("NtSetThreadExecutionState");}});

var NtSetTimer = Module.findExportByName("ntdll.dll", "NtSetTimer")
Interceptor.attach(NtSetTimer, {onLeave: function (args) {send("NtSetTimer");}});

var NtSetTimer2 = Module.findExportByName("ntdll.dll", "NtSetTimer2")
Interceptor.attach(NtSetTimer2, {onLeave: function (args) {send("NtSetTimer2");}});

var NtSetTimerEx = Module.findExportByName("ntdll.dll", "NtSetTimerEx")
Interceptor.attach(NtSetTimerEx, {onLeave: function (args) {send("NtSetTimerEx");}});

var NtSetTimerResolution = Module.findExportByName("ntdll.dll", "NtSetTimerResolution")
Interceptor.attach(NtSetTimerResolution, {onLeave: function (args) {send("NtSetTimerResolution");}});

var NtSetUuidSeed = Module.findExportByName("ntdll.dll", "NtSetUuidSeed")
Interceptor.attach(NtSetUuidSeed, {onLeave: function (args) {send("NtSetUuidSeed");}});

var NtSetValueKey = Module.findExportByName("ntdll.dll", "NtSetValueKey")
Interceptor.attach(NtSetValueKey, {onLeave: function (args) {send("NtSetValueKey");}});

var NtSetVolumeInformationFile = Module.findExportByName("ntdll.dll", "NtSetVolumeInformationFile")
Interceptor.attach(NtSetVolumeInformationFile, {onLeave: function (args) {send("NtSetVolumeInformationFile");}});

var NtSetWnfProcessNotificationEvent = Module.findExportByName("ntdll.dll", "NtSetWnfProcessNotificationEvent")
Interceptor.attach(NtSetWnfProcessNotificationEvent, {onLeave: function (args) {send("NtSetWnfProcessNotificationEvent");}});

var NtShutdownSystem = Module.findExportByName("ntdll.dll", "NtShutdownSystem")
Interceptor.attach(NtShutdownSystem, {onLeave: function (args) {send("NtShutdownSystem");}});

var NtShutdownWorkerFactory = Module.findExportByName("ntdll.dll", "NtShutdownWorkerFactory")
Interceptor.attach(NtShutdownWorkerFactory, {onLeave: function (args) {send("NtShutdownWorkerFactory");}});

var NtSignalAndWaitForSingleObject = Module.findExportByName("ntdll.dll", "NtSignalAndWaitForSingleObject")
Interceptor.attach(NtSignalAndWaitForSingleObject, {onLeave: function (args) {send("NtSignalAndWaitForSingleObject");}});

var NtSinglePhaseReject = Module.findExportByName("ntdll.dll", "NtSinglePhaseReject")
Interceptor.attach(NtSinglePhaseReject, {onLeave: function (args) {send("NtSinglePhaseReject");}});

var NtStartProfile = Module.findExportByName("ntdll.dll", "NtStartProfile")
Interceptor.attach(NtStartProfile, {onLeave: function (args) {send("NtStartProfile");}});

var NtStopProfile = Module.findExportByName("ntdll.dll", "NtStopProfile")
Interceptor.attach(NtStopProfile, {onLeave: function (args) {send("NtStopProfile");}});

var NtSubmitIoRing = Module.findExportByName("ntdll.dll", "NtSubmitIoRing")
Interceptor.attach(NtSubmitIoRing, {onLeave: function (args) {send("NtSubmitIoRing");}});

var NtSubscribeWnfStateChange = Module.findExportByName("ntdll.dll", "NtSubscribeWnfStateChange")
Interceptor.attach(NtSubscribeWnfStateChange, {onLeave: function (args) {send("NtSubscribeWnfStateChange");}});

var NtSuspendProcess = Module.findExportByName("ntdll.dll", "NtSuspendProcess")
Interceptor.attach(NtSuspendProcess, {onLeave: function (args) {send("NtSuspendProcess");}});

var NtSuspendThread = Module.findExportByName("ntdll.dll", "NtSuspendThread")
Interceptor.attach(NtSuspendThread, {onLeave: function (args) {send("NtSuspendThread");}});

var NtSystemDebugControl = Module.findExportByName("ntdll.dll", "NtSystemDebugControl")
Interceptor.attach(NtSystemDebugControl, {onLeave: function (args) {send("NtSystemDebugControl");}});

var NtTerminateEnclave = Module.findExportByName("ntdll.dll", "NtTerminateEnclave")
Interceptor.attach(NtTerminateEnclave, {onLeave: function (args) {send("NtTerminateEnclave");}});

var NtTerminateJobObject = Module.findExportByName("ntdll.dll", "NtTerminateJobObject")
Interceptor.attach(NtTerminateJobObject, {onLeave: function (args) {send("NtTerminateJobObject");}});

var NtTerminateProcess = Module.findExportByName("ntdll.dll", "NtTerminateProcess")
Interceptor.attach(NtTerminateProcess, {onLeave: function (args) {send("NtTerminateProcess");}});

var NtTerminateThread = Module.findExportByName("ntdll.dll", "NtTerminateThread")
Interceptor.attach(NtTerminateThread, {onLeave: function (args) {send("NtTerminateThread");}});

var NtTestAlert = Module.findExportByName("ntdll.dll", "NtTestAlert")
Interceptor.attach(NtTestAlert, {onLeave: function (args) {send("NtTestAlert");}});

var NtThawRegistry = Module.findExportByName("ntdll.dll", "NtThawRegistry")
Interceptor.attach(NtThawRegistry, {onLeave: function (args) {send("NtThawRegistry");}});

var NtThawTransactions = Module.findExportByName("ntdll.dll", "NtThawTransactions")
Interceptor.attach(NtThawTransactions, {onLeave: function (args) {send("NtThawTransactions");}});

var NtTraceControl = Module.findExportByName("ntdll.dll", "NtTraceControl")
Interceptor.attach(NtTraceControl, {onLeave: function (args) {send("NtTraceControl");}});

var NtTraceEvent = Module.findExportByName("ntdll.dll", "NtTraceEvent")
Interceptor.attach(NtTraceEvent, {onLeave: function (args) {send("NtTraceEvent");}});

var NtTranslateFilePath = Module.findExportByName("ntdll.dll", "NtTranslateFilePath")
Interceptor.attach(NtTranslateFilePath, {onLeave: function (args) {send("NtTranslateFilePath");}});

var NtUmsThreadYield = Module.findExportByName("ntdll.dll", "NtUmsThreadYield")
Interceptor.attach(NtUmsThreadYield, {onLeave: function (args) {send("NtUmsThreadYield");}});

var NtUnloadDriver = Module.findExportByName("ntdll.dll", "NtUnloadDriver")
Interceptor.attach(NtUnloadDriver, {onLeave: function (args) {send("NtUnloadDriver");}});

var NtUnloadKey = Module.findExportByName("ntdll.dll", "NtUnloadKey")
Interceptor.attach(NtUnloadKey, {onLeave: function (args) {send("NtUnloadKey");}});

var NtUnloadKey2 = Module.findExportByName("ntdll.dll", "NtUnloadKey2")
Interceptor.attach(NtUnloadKey2, {onLeave: function (args) {send("NtUnloadKey2");}});

var NtUnloadKeyEx = Module.findExportByName("ntdll.dll", "NtUnloadKeyEx")
Interceptor.attach(NtUnloadKeyEx, {onLeave: function (args) {send("NtUnloadKeyEx");}});

var NtUnlockFile = Module.findExportByName("ntdll.dll", "NtUnlockFile")
Interceptor.attach(NtUnlockFile, {onLeave: function (args) {send("NtUnlockFile");}});

var NtUnlockVirtualMemory = Module.findExportByName("ntdll.dll", "NtUnlockVirtualMemory")
Interceptor.attach(NtUnlockVirtualMemory, {onLeave: function (args) {send("NtUnlockVirtualMemory");}});

var NtUnmapViewOfSection = Module.findExportByName("ntdll.dll", "NtUnmapViewOfSection")
Interceptor.attach(NtUnmapViewOfSection, {onLeave: function (args) {send("NtUnmapViewOfSection");}});

var NtUnmapViewOfSectionEx = Module.findExportByName("ntdll.dll", "NtUnmapViewOfSectionEx")
Interceptor.attach(NtUnmapViewOfSectionEx, {onLeave: function (args) {send("NtUnmapViewOfSectionEx");}});

var NtUnsubscribeWnfStateChange = Module.findExportByName("ntdll.dll", "NtUnsubscribeWnfStateChange")
Interceptor.attach(NtUnsubscribeWnfStateChange, {onLeave: function (args) {send("NtUnsubscribeWnfStateChange");}});

var NtUpdateWnfStateData = Module.findExportByName("ntdll.dll", "NtUpdateWnfStateData")
Interceptor.attach(NtUpdateWnfStateData, {onLeave: function (args) {send("NtUpdateWnfStateData");}});

var NtVdmControl = Module.findExportByName("ntdll.dll", "NtVdmControl")
Interceptor.attach(NtVdmControl, {onLeave: function (args) {send("NtVdmControl");}});

var NtWaitForAlertByThreadId = Module.findExportByName("ntdll.dll", "NtWaitForAlertByThreadId")
Interceptor.attach(NtWaitForAlertByThreadId, {onLeave: function (args) {send("NtWaitForAlertByThreadId");}});

var NtWaitForDebugEvent = Module.findExportByName("ntdll.dll", "NtWaitForDebugEvent")
Interceptor.attach(NtWaitForDebugEvent, {onLeave: function (args) {send("NtWaitForDebugEvent");}});

var NtWaitForKeyedEvent = Module.findExportByName("ntdll.dll", "NtWaitForKeyedEvent")
Interceptor.attach(NtWaitForKeyedEvent, {onLeave: function (args) {send("NtWaitForKeyedEvent");}});

var NtWaitForMultipleObjects = Module.findExportByName("ntdll.dll", "NtWaitForMultipleObjects")
Interceptor.attach(NtWaitForMultipleObjects, {onLeave: function (args) {send("NtWaitForMultipleObjects");}});

var NtWaitForMultipleObjects32 = Module.findExportByName("ntdll.dll", "NtWaitForMultipleObjects32")
Interceptor.attach(NtWaitForMultipleObjects32, {onLeave: function (args) {send("NtWaitForMultipleObjects32");}});

var NtWaitForSingleObject = Module.findExportByName("ntdll.dll", "NtWaitForSingleObject")
Interceptor.attach(NtWaitForSingleObject, {onLeave: function (args) {send("NtWaitForSingleObject");}});

var NtWaitForWorkViaWorkerFactory = Module.findExportByName("ntdll.dll", "NtWaitForWorkViaWorkerFactory")
Interceptor.attach(NtWaitForWorkViaWorkerFactory, {onLeave: function (args) {send("NtWaitForWorkViaWorkerFactory");}});

var NtWaitHighEventPair = Module.findExportByName("ntdll.dll", "NtWaitHighEventPair")
Interceptor.attach(NtWaitHighEventPair, {onLeave: function (args) {send("NtWaitHighEventPair");}});

var NtWaitLowEventPair = Module.findExportByName("ntdll.dll", "NtWaitLowEventPair")
Interceptor.attach(NtWaitLowEventPair, {onLeave: function (args) {send("NtWaitLowEventPair");}});

var NtWorkerFactoryWorkerReady = Module.findExportByName("ntdll.dll", "NtWorkerFactoryWorkerReady")
Interceptor.attach(NtWorkerFactoryWorkerReady, {onLeave: function (args) {send("NtWorkerFactoryWorkerReady");}});

var NtWriteFile = Module.findExportByName("ntdll.dll", "NtWriteFile")
Interceptor.attach(NtWriteFile, {onLeave: function (args) {send("NtWriteFile");}});

var NtWriteFileGather = Module.findExportByName("ntdll.dll", "NtWriteFileGather")
Interceptor.attach(NtWriteFileGather, {onLeave: function (args) {send("NtWriteFileGather");}});

var NtWriteRequestData = Module.findExportByName("ntdll.dll", "NtWriteRequestData")
Interceptor.attach(NtWriteRequestData, {onLeave: function (args) {send("NtWriteRequestData");}});

var NtWriteVirtualMemory = Module.findExportByName("ntdll.dll", "NtWriteVirtualMemory")
Interceptor.attach(NtWriteVirtualMemory, {onLeave: function (args) {send("NtWriteVirtualMemory");}});

var NtYieldExecution = Module.findExportByName("ntdll.dll", "NtYieldExecution")
Interceptor.attach(NtYieldExecution, {onLeave: function (args) {send("NtYieldExecution");}});

var NtdllDefWindowProc_A = Module.findExportByName("ntdll.dll", "NtdllDefWindowProc_A")
Interceptor.attach(NtdllDefWindowProc_A, {onLeave: function (args) {send("NtdllDefWindowProc_A");}});

var NtdllDefWindowProc_W = Module.findExportByName("ntdll.dll", "NtdllDefWindowProc_W")
Interceptor.attach(NtdllDefWindowProc_W, {onLeave: function (args) {send("NtdllDefWindowProc_W");}});

var NtdllDialogWndProc_A = Module.findExportByName("ntdll.dll", "NtdllDialogWndProc_A")
Interceptor.attach(NtdllDialogWndProc_A, {onLeave: function (args) {send("NtdllDialogWndProc_A");}});

var NtdllDialogWndProc_W = Module.findExportByName("ntdll.dll", "NtdllDialogWndProc_W")
Interceptor.attach(NtdllDialogWndProc_W, {onLeave: function (args) {send("NtdllDialogWndProc_W");}});

var PfxFindPrefix = Module.findExportByName("ntdll.dll", "PfxFindPrefix")
Interceptor.attach(PfxFindPrefix, {onLeave: function (args) {send("PfxFindPrefix");}});

var PfxInitialize = Module.findExportByName("ntdll.dll", "PfxInitialize")
Interceptor.attach(PfxInitialize, {onLeave: function (args) {send("PfxInitialize");}});

var PfxInsertPrefix = Module.findExportByName("ntdll.dll", "PfxInsertPrefix")
Interceptor.attach(PfxInsertPrefix, {onLeave: function (args) {send("PfxInsertPrefix");}});

var PfxRemovePrefix = Module.findExportByName("ntdll.dll", "PfxRemovePrefix")
Interceptor.attach(PfxRemovePrefix, {onLeave: function (args) {send("PfxRemovePrefix");}});

var PssNtCaptureSnapshot = Module.findExportByName("ntdll.dll", "PssNtCaptureSnapshot")
Interceptor.attach(PssNtCaptureSnapshot, {onLeave: function (args) {send("PssNtCaptureSnapshot");}});

var PssNtDuplicateSnapshot = Module.findExportByName("ntdll.dll", "PssNtDuplicateSnapshot")
Interceptor.attach(PssNtDuplicateSnapshot, {onLeave: function (args) {send("PssNtDuplicateSnapshot");}});

var PssNtFreeRemoteSnapshot = Module.findExportByName("ntdll.dll", "PssNtFreeRemoteSnapshot")
Interceptor.attach(PssNtFreeRemoteSnapshot, {onLeave: function (args) {send("PssNtFreeRemoteSnapshot");}});

var PssNtFreeSnapshot = Module.findExportByName("ntdll.dll", "PssNtFreeSnapshot")
Interceptor.attach(PssNtFreeSnapshot, {onLeave: function (args) {send("PssNtFreeSnapshot");}});

var PssNtFreeWalkMarker = Module.findExportByName("ntdll.dll", "PssNtFreeWalkMarker")
Interceptor.attach(PssNtFreeWalkMarker, {onLeave: function (args) {send("PssNtFreeWalkMarker");}});

var PssNtQuerySnapshot = Module.findExportByName("ntdll.dll", "PssNtQuerySnapshot")
Interceptor.attach(PssNtQuerySnapshot, {onLeave: function (args) {send("PssNtQuerySnapshot");}});

var PssNtValidateDescriptor = Module.findExportByName("ntdll.dll", "PssNtValidateDescriptor")
Interceptor.attach(PssNtValidateDescriptor, {onLeave: function (args) {send("PssNtValidateDescriptor");}});

var PssNtWalkSnapshot = Module.findExportByName("ntdll.dll", "PssNtWalkSnapshot")
Interceptor.attach(PssNtWalkSnapshot, {onLeave: function (args) {send("PssNtWalkSnapshot");}});

var RtlAbortRXact = Module.findExportByName("ntdll.dll", "RtlAbortRXact")
Interceptor.attach(RtlAbortRXact, {onLeave: function (args) {send("RtlAbortRXact");}});

var RtlAbsoluteToSelfRelativeSD = Module.findExportByName("ntdll.dll", "RtlAbsoluteToSelfRelativeSD")
Interceptor.attach(RtlAbsoluteToSelfRelativeSD, {onLeave: function (args) {send("RtlAbsoluteToSelfRelativeSD");}});

var RtlAcquirePebLock = Module.findExportByName("ntdll.dll", "RtlAcquirePebLock")
Interceptor.attach(RtlAcquirePebLock, {onLeave: function (args) {send("RtlAcquirePebLock");}});

var RtlAcquirePrivilege = Module.findExportByName("ntdll.dll", "RtlAcquirePrivilege")
Interceptor.attach(RtlAcquirePrivilege, {onLeave: function (args) {send("RtlAcquirePrivilege");}});

var RtlAcquireReleaseSRWLockExclusive = Module.findExportByName("ntdll.dll", "RtlAcquireReleaseSRWLockExclusive")
Interceptor.attach(RtlAcquireReleaseSRWLockExclusive, {onLeave: function (args) {send("RtlAcquireReleaseSRWLockExclusive");}});

var RtlAcquireResourceExclusive = Module.findExportByName("ntdll.dll", "RtlAcquireResourceExclusive")
Interceptor.attach(RtlAcquireResourceExclusive, {onLeave: function (args) {send("RtlAcquireResourceExclusive");}});

var RtlAcquireResourceShared = Module.findExportByName("ntdll.dll", "RtlAcquireResourceShared")
Interceptor.attach(RtlAcquireResourceShared, {onLeave: function (args) {send("RtlAcquireResourceShared");}});

var RtlAcquireSRWLockExclusive = Module.findExportByName("ntdll.dll", "RtlAcquireSRWLockExclusive")
Interceptor.attach(RtlAcquireSRWLockExclusive, {onLeave: function (args) {send("RtlAcquireSRWLockExclusive");}});

var RtlAcquireSRWLockShared = Module.findExportByName("ntdll.dll", "RtlAcquireSRWLockShared")
Interceptor.attach(RtlAcquireSRWLockShared, {onLeave: function (args) {send("RtlAcquireSRWLockShared");}});

var RtlActivateActivationContext = Module.findExportByName("ntdll.dll", "RtlActivateActivationContext")
Interceptor.attach(RtlActivateActivationContext, {onLeave: function (args) {send("RtlActivateActivationContext");}});

var RtlActivateActivationContextEx = Module.findExportByName("ntdll.dll", "RtlActivateActivationContextEx")
Interceptor.attach(RtlActivateActivationContextEx, {onLeave: function (args) {send("RtlActivateActivationContextEx");}});

var RtlActivateActivationContextUnsafeFast = Module.findExportByName("ntdll.dll", "RtlActivateActivationContextUnsafeFast")
Interceptor.attach(RtlActivateActivationContextUnsafeFast, {onLeave: function (args) {send("RtlActivateActivationContextUnsafeFast");}});

var RtlAddAccessAllowedAce = Module.findExportByName("ntdll.dll", "RtlAddAccessAllowedAce")
Interceptor.attach(RtlAddAccessAllowedAce, {onLeave: function (args) {send("RtlAddAccessAllowedAce");}});

var RtlAddAccessAllowedAceEx = Module.findExportByName("ntdll.dll", "RtlAddAccessAllowedAceEx")
Interceptor.attach(RtlAddAccessAllowedAceEx, {onLeave: function (args) {send("RtlAddAccessAllowedAceEx");}});

var RtlAddAccessAllowedObjectAce = Module.findExportByName("ntdll.dll", "RtlAddAccessAllowedObjectAce")
Interceptor.attach(RtlAddAccessAllowedObjectAce, {onLeave: function (args) {send("RtlAddAccessAllowedObjectAce");}});

var RtlAddAccessDeniedAce = Module.findExportByName("ntdll.dll", "RtlAddAccessDeniedAce")
Interceptor.attach(RtlAddAccessDeniedAce, {onLeave: function (args) {send("RtlAddAccessDeniedAce");}});

var RtlAddAccessDeniedAceEx = Module.findExportByName("ntdll.dll", "RtlAddAccessDeniedAceEx")
Interceptor.attach(RtlAddAccessDeniedAceEx, {onLeave: function (args) {send("RtlAddAccessDeniedAceEx");}});

var RtlAddAccessDeniedObjectAce = Module.findExportByName("ntdll.dll", "RtlAddAccessDeniedObjectAce")
Interceptor.attach(RtlAddAccessDeniedObjectAce, {onLeave: function (args) {send("RtlAddAccessDeniedObjectAce");}});

var RtlAddAccessFilterAce = Module.findExportByName("ntdll.dll", "RtlAddAccessFilterAce")
Interceptor.attach(RtlAddAccessFilterAce, {onLeave: function (args) {send("RtlAddAccessFilterAce");}});

var RtlAddAce = Module.findExportByName("ntdll.dll", "RtlAddAce")
Interceptor.attach(RtlAddAce, {onLeave: function (args) {send("RtlAddAce");}});

var RtlAddActionToRXact = Module.findExportByName("ntdll.dll", "RtlAddActionToRXact")
Interceptor.attach(RtlAddActionToRXact, {onLeave: function (args) {send("RtlAddActionToRXact");}});

var RtlAddAtomToAtomTable = Module.findExportByName("ntdll.dll", "RtlAddAtomToAtomTable")
Interceptor.attach(RtlAddAtomToAtomTable, {onLeave: function (args) {send("RtlAddAtomToAtomTable");}});

var RtlAddAttributeActionToRXact = Module.findExportByName("ntdll.dll", "RtlAddAttributeActionToRXact")
Interceptor.attach(RtlAddAttributeActionToRXact, {onLeave: function (args) {send("RtlAddAttributeActionToRXact");}});

var RtlAddAuditAccessAce = Module.findExportByName("ntdll.dll", "RtlAddAuditAccessAce")
Interceptor.attach(RtlAddAuditAccessAce, {onLeave: function (args) {send("RtlAddAuditAccessAce");}});

var RtlAddAuditAccessAceEx = Module.findExportByName("ntdll.dll", "RtlAddAuditAccessAceEx")
Interceptor.attach(RtlAddAuditAccessAceEx, {onLeave: function (args) {send("RtlAddAuditAccessAceEx");}});

var RtlAddAuditAccessObjectAce = Module.findExportByName("ntdll.dll", "RtlAddAuditAccessObjectAce")
Interceptor.attach(RtlAddAuditAccessObjectAce, {onLeave: function (args) {send("RtlAddAuditAccessObjectAce");}});

var RtlAddCompoundAce = Module.findExportByName("ntdll.dll", "RtlAddCompoundAce")
Interceptor.attach(RtlAddCompoundAce, {onLeave: function (args) {send("RtlAddCompoundAce");}});

var RtlAddFunctionTable = Module.findExportByName("ntdll.dll", "RtlAddFunctionTable")
Interceptor.attach(RtlAddFunctionTable, {onLeave: function (args) {send("RtlAddFunctionTable");}});

var RtlAddGrowableFunctionTable = Module.findExportByName("ntdll.dll", "RtlAddGrowableFunctionTable")
Interceptor.attach(RtlAddGrowableFunctionTable, {onLeave: function (args) {send("RtlAddGrowableFunctionTable");}});

var RtlAddIntegrityLabelToBoundaryDescriptor = Module.findExportByName("ntdll.dll", "RtlAddIntegrityLabelToBoundaryDescriptor")
Interceptor.attach(RtlAddIntegrityLabelToBoundaryDescriptor, {onLeave: function (args) {send("RtlAddIntegrityLabelToBoundaryDescriptor");}});

var RtlAddMandatoryAce = Module.findExportByName("ntdll.dll", "RtlAddMandatoryAce")
Interceptor.attach(RtlAddMandatoryAce, {onLeave: function (args) {send("RtlAddMandatoryAce");}});

var RtlAddProcessTrustLabelAce = Module.findExportByName("ntdll.dll", "RtlAddProcessTrustLabelAce")
Interceptor.attach(RtlAddProcessTrustLabelAce, {onLeave: function (args) {send("RtlAddProcessTrustLabelAce");}});

var RtlAddRefActivationContext = Module.findExportByName("ntdll.dll", "RtlAddRefActivationContext")
Interceptor.attach(RtlAddRefActivationContext, {onLeave: function (args) {send("RtlAddRefActivationContext");}});

var RtlAddRefMemoryStream = Module.findExportByName("ntdll.dll", "RtlAddRefMemoryStream")
Interceptor.attach(RtlAddRefMemoryStream, {onLeave: function (args) {send("RtlAddRefMemoryStream");}});

var RtlAddResourceAttributeAce = Module.findExportByName("ntdll.dll", "RtlAddResourceAttributeAce")
Interceptor.attach(RtlAddResourceAttributeAce, {onLeave: function (args) {send("RtlAddResourceAttributeAce");}});

var RtlAddSIDToBoundaryDescriptor = Module.findExportByName("ntdll.dll", "RtlAddSIDToBoundaryDescriptor")
Interceptor.attach(RtlAddSIDToBoundaryDescriptor, {onLeave: function (args) {send("RtlAddSIDToBoundaryDescriptor");}});

var RtlAddScopedPolicyIDAce = Module.findExportByName("ntdll.dll", "RtlAddScopedPolicyIDAce")
Interceptor.attach(RtlAddScopedPolicyIDAce, {onLeave: function (args) {send("RtlAddScopedPolicyIDAce");}});

var RtlAddVectoredContinueHandler = Module.findExportByName("ntdll.dll", "RtlAddVectoredContinueHandler")
Interceptor.attach(RtlAddVectoredContinueHandler, {onLeave: function (args) {send("RtlAddVectoredContinueHandler");}});

var RtlAddVectoredExceptionHandler = Module.findExportByName("ntdll.dll", "RtlAddVectoredExceptionHandler")
Interceptor.attach(RtlAddVectoredExceptionHandler, {onLeave: function (args) {send("RtlAddVectoredExceptionHandler");}});

var RtlAddressInSectionTable = Module.findExportByName("ntdll.dll", "RtlAddressInSectionTable")
Interceptor.attach(RtlAddressInSectionTable, {onLeave: function (args) {send("RtlAddressInSectionTable");}});

var RtlAdjustPrivilege = Module.findExportByName("ntdll.dll", "RtlAdjustPrivilege")
Interceptor.attach(RtlAdjustPrivilege, {onLeave: function (args) {send("RtlAdjustPrivilege");}});

var RtlAllocateActivationContextStack = Module.findExportByName("ntdll.dll", "RtlAllocateActivationContextStack")
Interceptor.attach(RtlAllocateActivationContextStack, {onLeave: function (args) {send("RtlAllocateActivationContextStack");}});

var RtlAllocateAndInitializeSid = Module.findExportByName("ntdll.dll", "RtlAllocateAndInitializeSid")
Interceptor.attach(RtlAllocateAndInitializeSid, {onLeave: function (args) {send("RtlAllocateAndInitializeSid");}});

var RtlAllocateAndInitializeSidEx = Module.findExportByName("ntdll.dll", "RtlAllocateAndInitializeSidEx")
Interceptor.attach(RtlAllocateAndInitializeSidEx, {onLeave: function (args) {send("RtlAllocateAndInitializeSidEx");}});

var RtlAllocateHandle = Module.findExportByName("ntdll.dll", "RtlAllocateHandle")
Interceptor.attach(RtlAllocateHandle, {onLeave: function (args) {send("RtlAllocateHandle");}});

var RtlAllocateHeap = Module.findExportByName("ntdll.dll", "RtlAllocateHeap")
Interceptor.attach(RtlAllocateHeap, {onLeave: function (args) {send("RtlAllocateHeap");}});

var RtlAllocateMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlAllocateMemoryBlockLookaside")
Interceptor.attach(RtlAllocateMemoryBlockLookaside, {onLeave: function (args) {send("RtlAllocateMemoryBlockLookaside");}});

var RtlAllocateMemoryZone = Module.findExportByName("ntdll.dll", "RtlAllocateMemoryZone")
Interceptor.attach(RtlAllocateMemoryZone, {onLeave: function (args) {send("RtlAllocateMemoryZone");}});

var RtlAllocateWnfSerializationGroup = Module.findExportByName("ntdll.dll", "RtlAllocateWnfSerializationGroup")
Interceptor.attach(RtlAllocateWnfSerializationGroup, {onLeave: function (args) {send("RtlAllocateWnfSerializationGroup");}});

var RtlAnsiCharToUnicodeChar = Module.findExportByName("ntdll.dll", "RtlAnsiCharToUnicodeChar")
Interceptor.attach(RtlAnsiCharToUnicodeChar, {onLeave: function (args) {send("RtlAnsiCharToUnicodeChar");}});

var RtlAnsiStringToUnicodeSize = Module.findExportByName("ntdll.dll", "RtlAnsiStringToUnicodeSize")
Interceptor.attach(RtlAnsiStringToUnicodeSize, {onLeave: function (args) {send("RtlAnsiStringToUnicodeSize");}});

var RtlAnsiStringToUnicodeString = Module.findExportByName("ntdll.dll", "RtlAnsiStringToUnicodeString")
Interceptor.attach(RtlAnsiStringToUnicodeString, {onLeave: function (args) {send("RtlAnsiStringToUnicodeString");}});

var RtlAppendAsciizToString = Module.findExportByName("ntdll.dll", "RtlAppendAsciizToString")
Interceptor.attach(RtlAppendAsciizToString, {onLeave: function (args) {send("RtlAppendAsciizToString");}});

var RtlAppendPathElement = Module.findExportByName("ntdll.dll", "RtlAppendPathElement")
Interceptor.attach(RtlAppendPathElement, {onLeave: function (args) {send("RtlAppendPathElement");}});

var RtlAppendStringToString = Module.findExportByName("ntdll.dll", "RtlAppendStringToString")
Interceptor.attach(RtlAppendStringToString, {onLeave: function (args) {send("RtlAppendStringToString");}});

var RtlAppendUnicodeStringToString = Module.findExportByName("ntdll.dll", "RtlAppendUnicodeStringToString")
Interceptor.attach(RtlAppendUnicodeStringToString, {onLeave: function (args) {send("RtlAppendUnicodeStringToString");}});

var RtlAppendUnicodeToString = Module.findExportByName("ntdll.dll", "RtlAppendUnicodeToString")
Interceptor.attach(RtlAppendUnicodeToString, {onLeave: function (args) {send("RtlAppendUnicodeToString");}});

var RtlApplicationVerifierStop = Module.findExportByName("ntdll.dll", "RtlApplicationVerifierStop")
Interceptor.attach(RtlApplicationVerifierStop, {onLeave: function (args) {send("RtlApplicationVerifierStop");}});

var RtlApplyRXact = Module.findExportByName("ntdll.dll", "RtlApplyRXact")
Interceptor.attach(RtlApplyRXact, {onLeave: function (args) {send("RtlApplyRXact");}});

var RtlApplyRXactNoFlush = Module.findExportByName("ntdll.dll", "RtlApplyRXactNoFlush")
Interceptor.attach(RtlApplyRXactNoFlush, {onLeave: function (args) {send("RtlApplyRXactNoFlush");}});

var RtlAppxIsFileOwnedByTrustedInstaller = Module.findExportByName("ntdll.dll", "RtlAppxIsFileOwnedByTrustedInstaller")
Interceptor.attach(RtlAppxIsFileOwnedByTrustedInstaller, {onLeave: function (args) {send("RtlAppxIsFileOwnedByTrustedInstaller");}});

var RtlAreAllAccessesGranted = Module.findExportByName("ntdll.dll", "RtlAreAllAccessesGranted")
Interceptor.attach(RtlAreAllAccessesGranted, {onLeave: function (args) {send("RtlAreAllAccessesGranted");}});

var RtlAreAnyAccessesGranted = Module.findExportByName("ntdll.dll", "RtlAreAnyAccessesGranted")
Interceptor.attach(RtlAreAnyAccessesGranted, {onLeave: function (args) {send("RtlAreAnyAccessesGranted");}});

var RtlAreBitsClear = Module.findExportByName("ntdll.dll", "RtlAreBitsClear")
Interceptor.attach(RtlAreBitsClear, {onLeave: function (args) {send("RtlAreBitsClear");}});

var RtlAreBitsClearEx = Module.findExportByName("ntdll.dll", "RtlAreBitsClearEx")
Interceptor.attach(RtlAreBitsClearEx, {onLeave: function (args) {send("RtlAreBitsClearEx");}});

var RtlAreBitsSet = Module.findExportByName("ntdll.dll", "RtlAreBitsSet")
Interceptor.attach(RtlAreBitsSet, {onLeave: function (args) {send("RtlAreBitsSet");}});

var RtlAreLongPathsEnabled = Module.findExportByName("ntdll.dll", "RtlAreLongPathsEnabled")
Interceptor.attach(RtlAreLongPathsEnabled, {onLeave: function (args) {send("RtlAreLongPathsEnabled");}});

var RtlAssert = Module.findExportByName("ntdll.dll", "RtlAssert")
Interceptor.attach(RtlAssert, {onLeave: function (args) {send("RtlAssert");}});

var RtlAvlInsertNodeEx = Module.findExportByName("ntdll.dll", "RtlAvlInsertNodeEx")
Interceptor.attach(RtlAvlInsertNodeEx, {onLeave: function (args) {send("RtlAvlInsertNodeEx");}});

var RtlAvlRemoveNode = Module.findExportByName("ntdll.dll", "RtlAvlRemoveNode")
Interceptor.attach(RtlAvlRemoveNode, {onLeave: function (args) {send("RtlAvlRemoveNode");}});

var RtlBarrier = Module.findExportByName("ntdll.dll", "RtlBarrier")
Interceptor.attach(RtlBarrier, {onLeave: function (args) {send("RtlBarrier");}});

var RtlBarrierForDelete = Module.findExportByName("ntdll.dll", "RtlBarrierForDelete")
Interceptor.attach(RtlBarrierForDelete, {onLeave: function (args) {send("RtlBarrierForDelete");}});

var RtlCallEnclave = Module.findExportByName("ntdll.dll", "RtlCallEnclave")
Interceptor.attach(RtlCallEnclave, {onLeave: function (args) {send("RtlCallEnclave");}});

var RtlCallEnclaveReturn = Module.findExportByName("ntdll.dll", "RtlCallEnclaveReturn")
Interceptor.attach(RtlCallEnclaveReturn, {onLeave: function (args) {send("RtlCallEnclaveReturn");}});

var RtlCancelTimer = Module.findExportByName("ntdll.dll", "RtlCancelTimer")
Interceptor.attach(RtlCancelTimer, {onLeave: function (args) {send("RtlCancelTimer");}});

var RtlCanonicalizeDomainName = Module.findExportByName("ntdll.dll", "RtlCanonicalizeDomainName")
Interceptor.attach(RtlCanonicalizeDomainName, {onLeave: function (args) {send("RtlCanonicalizeDomainName");}});

var RtlCapabilityCheck = Module.findExportByName("ntdll.dll", "RtlCapabilityCheck")
Interceptor.attach(RtlCapabilityCheck, {onLeave: function (args) {send("RtlCapabilityCheck");}});

var RtlCapabilityCheckForSingleSessionSku = Module.findExportByName("ntdll.dll", "RtlCapabilityCheckForSingleSessionSku")
Interceptor.attach(RtlCapabilityCheckForSingleSessionSku, {onLeave: function (args) {send("RtlCapabilityCheckForSingleSessionSku");}});

var RtlCaptureContext = Module.findExportByName("ntdll.dll", "RtlCaptureContext")
Interceptor.attach(RtlCaptureContext, {onLeave: function (args) {send("RtlCaptureContext");}});

var RtlCaptureContext2 = Module.findExportByName("ntdll.dll", "RtlCaptureContext2")
Interceptor.attach(RtlCaptureContext2, {onLeave: function (args) {send("RtlCaptureContext2");}});

var RtlCaptureStackBackTrace = Module.findExportByName("ntdll.dll", "RtlCaptureStackBackTrace")
Interceptor.attach(RtlCaptureStackBackTrace, {onLeave: function (args) {send("RtlCaptureStackBackTrace");}});

var RtlCharToInteger = Module.findExportByName("ntdll.dll", "RtlCharToInteger")
Interceptor.attach(RtlCharToInteger, {onLeave: function (args) {send("RtlCharToInteger");}});

var RtlCheckBootStatusIntegrity = Module.findExportByName("ntdll.dll", "RtlCheckBootStatusIntegrity")
Interceptor.attach(RtlCheckBootStatusIntegrity, {onLeave: function (args) {send("RtlCheckBootStatusIntegrity");}});

var RtlCheckForOrphanedCriticalSections = Module.findExportByName("ntdll.dll", "RtlCheckForOrphanedCriticalSections")
Interceptor.attach(RtlCheckForOrphanedCriticalSections, {onLeave: function (args) {send("RtlCheckForOrphanedCriticalSections");}});

var RtlCheckPortableOperatingSystem = Module.findExportByName("ntdll.dll", "RtlCheckPortableOperatingSystem")
Interceptor.attach(RtlCheckPortableOperatingSystem, {onLeave: function (args) {send("RtlCheckPortableOperatingSystem");}});

var RtlCheckRegistryKey = Module.findExportByName("ntdll.dll", "RtlCheckRegistryKey")
Interceptor.attach(RtlCheckRegistryKey, {onLeave: function (args) {send("RtlCheckRegistryKey");}});

var RtlCheckSandboxedToken = Module.findExportByName("ntdll.dll", "RtlCheckSandboxedToken")
Interceptor.attach(RtlCheckSandboxedToken, {onLeave: function (args) {send("RtlCheckSandboxedToken");}});

var RtlCheckSystemBootStatusIntegrity = Module.findExportByName("ntdll.dll", "RtlCheckSystemBootStatusIntegrity")
Interceptor.attach(RtlCheckSystemBootStatusIntegrity, {onLeave: function (args) {send("RtlCheckSystemBootStatusIntegrity");}});

var RtlCheckTokenCapability = Module.findExportByName("ntdll.dll", "RtlCheckTokenCapability")
Interceptor.attach(RtlCheckTokenCapability, {onLeave: function (args) {send("RtlCheckTokenCapability");}});

var RtlCheckTokenMembership = Module.findExportByName("ntdll.dll", "RtlCheckTokenMembership")
Interceptor.attach(RtlCheckTokenMembership, {onLeave: function (args) {send("RtlCheckTokenMembership");}});

var RtlCheckTokenMembershipEx = Module.findExportByName("ntdll.dll", "RtlCheckTokenMembershipEx")
Interceptor.attach(RtlCheckTokenMembershipEx, {onLeave: function (args) {send("RtlCheckTokenMembershipEx");}});

var RtlCleanUpTEBLangLists = Module.findExportByName("ntdll.dll", "RtlCleanUpTEBLangLists")
Interceptor.attach(RtlCleanUpTEBLangLists, {onLeave: function (args) {send("RtlCleanUpTEBLangLists");}});

var RtlClearAllBits = Module.findExportByName("ntdll.dll", "RtlClearAllBits")
Interceptor.attach(RtlClearAllBits, {onLeave: function (args) {send("RtlClearAllBits");}});

var RtlClearAllBitsEx = Module.findExportByName("ntdll.dll", "RtlClearAllBitsEx")
Interceptor.attach(RtlClearAllBitsEx, {onLeave: function (args) {send("RtlClearAllBitsEx");}});

var RtlClearBit = Module.findExportByName("ntdll.dll", "RtlClearBit")
Interceptor.attach(RtlClearBit, {onLeave: function (args) {send("RtlClearBit");}});

var RtlClearBitEx = Module.findExportByName("ntdll.dll", "RtlClearBitEx")
Interceptor.attach(RtlClearBitEx, {onLeave: function (args) {send("RtlClearBitEx");}});

var RtlClearBits = Module.findExportByName("ntdll.dll", "RtlClearBits")
Interceptor.attach(RtlClearBits, {onLeave: function (args) {send("RtlClearBits");}});

var RtlClearBitsEx = Module.findExportByName("ntdll.dll", "RtlClearBitsEx")
Interceptor.attach(RtlClearBitsEx, {onLeave: function (args) {send("RtlClearBitsEx");}});

var RtlClearThreadWorkOnBehalfTicket = Module.findExportByName("ntdll.dll", "RtlClearThreadWorkOnBehalfTicket")
Interceptor.attach(RtlClearThreadWorkOnBehalfTicket, {onLeave: function (args) {send("RtlClearThreadWorkOnBehalfTicket");}});

var RtlCloneMemoryStream = Module.findExportByName("ntdll.dll", "RtlCloneMemoryStream")
Interceptor.attach(RtlCloneMemoryStream, {onLeave: function (args) {send("RtlCloneMemoryStream");}});

var RtlCloneUserProcess = Module.findExportByName("ntdll.dll", "RtlCloneUserProcess")
Interceptor.attach(RtlCloneUserProcess, {onLeave: function (args) {send("RtlCloneUserProcess");}});

var RtlCmDecodeMemIoResource = Module.findExportByName("ntdll.dll", "RtlCmDecodeMemIoResource")
Interceptor.attach(RtlCmDecodeMemIoResource, {onLeave: function (args) {send("RtlCmDecodeMemIoResource");}});

var RtlCmEncodeMemIoResource = Module.findExportByName("ntdll.dll", "RtlCmEncodeMemIoResource")
Interceptor.attach(RtlCmEncodeMemIoResource, {onLeave: function (args) {send("RtlCmEncodeMemIoResource");}});

var RtlCommitDebugInfo = Module.findExportByName("ntdll.dll", "RtlCommitDebugInfo")
Interceptor.attach(RtlCommitDebugInfo, {onLeave: function (args) {send("RtlCommitDebugInfo");}});

var RtlCommitMemoryStream = Module.findExportByName("ntdll.dll", "RtlCommitMemoryStream")
Interceptor.attach(RtlCommitMemoryStream, {onLeave: function (args) {send("RtlCommitMemoryStream");}});

var RtlCompactHeap = Module.findExportByName("ntdll.dll", "RtlCompactHeap")
Interceptor.attach(RtlCompactHeap, {onLeave: function (args) {send("RtlCompactHeap");}});

var RtlCompareAltitudes = Module.findExportByName("ntdll.dll", "RtlCompareAltitudes")
Interceptor.attach(RtlCompareAltitudes, {onLeave: function (args) {send("RtlCompareAltitudes");}});

var RtlCompareExchangePointerMapping = Module.findExportByName("ntdll.dll", "RtlCompareExchangePointerMapping")
Interceptor.attach(RtlCompareExchangePointerMapping, {onLeave: function (args) {send("RtlCompareExchangePointerMapping");}});

var RtlCompareExchangePropertyStore = Module.findExportByName("ntdll.dll", "RtlCompareExchangePropertyStore")
Interceptor.attach(RtlCompareExchangePropertyStore, {onLeave: function (args) {send("RtlCompareExchangePropertyStore");}});

var RtlCompareMemory = Module.findExportByName("ntdll.dll", "RtlCompareMemory")
Interceptor.attach(RtlCompareMemory, {onLeave: function (args) {send("RtlCompareMemory");}});

var RtlCompareMemoryUlong = Module.findExportByName("ntdll.dll", "RtlCompareMemoryUlong")
Interceptor.attach(RtlCompareMemoryUlong, {onLeave: function (args) {send("RtlCompareMemoryUlong");}});

var RtlCompareString = Module.findExportByName("ntdll.dll", "RtlCompareString")
Interceptor.attach(RtlCompareString, {onLeave: function (args) {send("RtlCompareString");}});

var RtlCompareUnicodeString = Module.findExportByName("ntdll.dll", "RtlCompareUnicodeString")
Interceptor.attach(RtlCompareUnicodeString, {onLeave: function (args) {send("RtlCompareUnicodeString");}});

var RtlCompareUnicodeStrings = Module.findExportByName("ntdll.dll", "RtlCompareUnicodeStrings")
Interceptor.attach(RtlCompareUnicodeStrings, {onLeave: function (args) {send("RtlCompareUnicodeStrings");}});

var RtlCompleteProcessCloning = Module.findExportByName("ntdll.dll", "RtlCompleteProcessCloning")
Interceptor.attach(RtlCompleteProcessCloning, {onLeave: function (args) {send("RtlCompleteProcessCloning");}});

var RtlCompressBuffer = Module.findExportByName("ntdll.dll", "RtlCompressBuffer")
Interceptor.attach(RtlCompressBuffer, {onLeave: function (args) {send("RtlCompressBuffer");}});

var RtlComputeCrc32 = Module.findExportByName("ntdll.dll", "RtlComputeCrc32")
Interceptor.attach(RtlComputeCrc32, {onLeave: function (args) {send("RtlComputeCrc32");}});

var RtlComputeImportTableHash = Module.findExportByName("ntdll.dll", "RtlComputeImportTableHash")
Interceptor.attach(RtlComputeImportTableHash, {onLeave: function (args) {send("RtlComputeImportTableHash");}});

var RtlComputePrivatizedDllName_U = Module.findExportByName("ntdll.dll", "RtlComputePrivatizedDllName_U")
Interceptor.attach(RtlComputePrivatizedDllName_U, {onLeave: function (args) {send("RtlComputePrivatizedDllName_U");}});

var RtlConnectToSm = Module.findExportByName("ntdll.dll", "RtlConnectToSm")
Interceptor.attach(RtlConnectToSm, {onLeave: function (args) {send("RtlConnectToSm");}});

var RtlConsoleMultiByteToUnicodeN = Module.findExportByName("ntdll.dll", "RtlConsoleMultiByteToUnicodeN")
Interceptor.attach(RtlConsoleMultiByteToUnicodeN, {onLeave: function (args) {send("RtlConsoleMultiByteToUnicodeN");}});

var RtlConstructCrossVmEventPath = Module.findExportByName("ntdll.dll", "RtlConstructCrossVmEventPath")
Interceptor.attach(RtlConstructCrossVmEventPath, {onLeave: function (args) {send("RtlConstructCrossVmEventPath");}});

var RtlConstructCrossVmMutexPath = Module.findExportByName("ntdll.dll", "RtlConstructCrossVmMutexPath")
Interceptor.attach(RtlConstructCrossVmMutexPath, {onLeave: function (args) {send("RtlConstructCrossVmMutexPath");}});

var RtlContractHashTable = Module.findExportByName("ntdll.dll", "RtlContractHashTable")
Interceptor.attach(RtlContractHashTable, {onLeave: function (args) {send("RtlContractHashTable");}});

var RtlConvertDeviceFamilyInfoToString = Module.findExportByName("ntdll.dll", "RtlConvertDeviceFamilyInfoToString")
Interceptor.attach(RtlConvertDeviceFamilyInfoToString, {onLeave: function (args) {send("RtlConvertDeviceFamilyInfoToString");}});

var RtlConvertExclusiveToShared = Module.findExportByName("ntdll.dll", "RtlConvertExclusiveToShared")
Interceptor.attach(RtlConvertExclusiveToShared, {onLeave: function (args) {send("RtlConvertExclusiveToShared");}});

var RtlConvertHostPerfCounterToPerfCounter = Module.findExportByName("ntdll.dll", "RtlConvertHostPerfCounterToPerfCounter")
Interceptor.attach(RtlConvertHostPerfCounterToPerfCounter, {onLeave: function (args) {send("RtlConvertHostPerfCounterToPerfCounter");}});

var RtlConvertLCIDToString = Module.findExportByName("ntdll.dll", "RtlConvertLCIDToString")
Interceptor.attach(RtlConvertLCIDToString, {onLeave: function (args) {send("RtlConvertLCIDToString");}});

var RtlConvertSRWLockExclusiveToShared = Module.findExportByName("ntdll.dll", "RtlConvertSRWLockExclusiveToShared")
Interceptor.attach(RtlConvertSRWLockExclusiveToShared, {onLeave: function (args) {send("RtlConvertSRWLockExclusiveToShared");}});

var RtlConvertSharedToExclusive = Module.findExportByName("ntdll.dll", "RtlConvertSharedToExclusive")
Interceptor.attach(RtlConvertSharedToExclusive, {onLeave: function (args) {send("RtlConvertSharedToExclusive");}});

var RtlConvertSidToUnicodeString = Module.findExportByName("ntdll.dll", "RtlConvertSidToUnicodeString")
Interceptor.attach(RtlConvertSidToUnicodeString, {onLeave: function (args) {send("RtlConvertSidToUnicodeString");}});

var RtlConvertToAutoInheritSecurityObject = Module.findExportByName("ntdll.dll", "RtlConvertToAutoInheritSecurityObject")
Interceptor.attach(RtlConvertToAutoInheritSecurityObject, {onLeave: function (args) {send("RtlConvertToAutoInheritSecurityObject");}});

var RtlCopyBitMap = Module.findExportByName("ntdll.dll", "RtlCopyBitMap")
Interceptor.attach(RtlCopyBitMap, {onLeave: function (args) {send("RtlCopyBitMap");}});

var RtlCopyContext = Module.findExportByName("ntdll.dll", "RtlCopyContext")
Interceptor.attach(RtlCopyContext, {onLeave: function (args) {send("RtlCopyContext");}});

var RtlCopyExtendedContext = Module.findExportByName("ntdll.dll", "RtlCopyExtendedContext")
Interceptor.attach(RtlCopyExtendedContext, {onLeave: function (args) {send("RtlCopyExtendedContext");}});

var RtlCopyLuid = Module.findExportByName("ntdll.dll", "RtlCopyLuid")
Interceptor.attach(RtlCopyLuid, {onLeave: function (args) {send("RtlCopyLuid");}});

var RtlCopyLuidAndAttributesArray = Module.findExportByName("ntdll.dll", "RtlCopyLuidAndAttributesArray")
Interceptor.attach(RtlCopyLuidAndAttributesArray, {onLeave: function (args) {send("RtlCopyLuidAndAttributesArray");}});

var RtlCopyMappedMemory = Module.findExportByName("ntdll.dll", "RtlCopyMappedMemory")
Interceptor.attach(RtlCopyMappedMemory, {onLeave: function (args) {send("RtlCopyMappedMemory");}});

var RtlCopyMemory = Module.findExportByName("ntdll.dll", "RtlCopyMemory")
Interceptor.attach(RtlCopyMemory, {onLeave: function (args) {send("RtlCopyMemory");}});

var RtlCopyMemoryNonTemporal = Module.findExportByName("ntdll.dll", "RtlCopyMemoryNonTemporal")
Interceptor.attach(RtlCopyMemoryNonTemporal, {onLeave: function (args) {send("RtlCopyMemoryNonTemporal");}});

var RtlCopyMemoryStreamTo = Module.findExportByName("ntdll.dll", "RtlCopyMemoryStreamTo")
Interceptor.attach(RtlCopyMemoryStreamTo, {onLeave: function (args) {send("RtlCopyMemoryStreamTo");}});

var RtlCopyOutOfProcessMemoryStreamTo = Module.findExportByName("ntdll.dll", "RtlCopyOutOfProcessMemoryStreamTo")
Interceptor.attach(RtlCopyOutOfProcessMemoryStreamTo, {onLeave: function (args) {send("RtlCopyOutOfProcessMemoryStreamTo");}});

var RtlCopySecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlCopySecurityDescriptor")
Interceptor.attach(RtlCopySecurityDescriptor, {onLeave: function (args) {send("RtlCopySecurityDescriptor");}});

var RtlCopySid = Module.findExportByName("ntdll.dll", "RtlCopySid")
Interceptor.attach(RtlCopySid, {onLeave: function (args) {send("RtlCopySid");}});

var RtlCopySidAndAttributesArray = Module.findExportByName("ntdll.dll", "RtlCopySidAndAttributesArray")
Interceptor.attach(RtlCopySidAndAttributesArray, {onLeave: function (args) {send("RtlCopySidAndAttributesArray");}});

var RtlCopyString = Module.findExportByName("ntdll.dll", "RtlCopyString")
Interceptor.attach(RtlCopyString, {onLeave: function (args) {send("RtlCopyString");}});

var RtlCopyUnicodeString = Module.findExportByName("ntdll.dll", "RtlCopyUnicodeString")
Interceptor.attach(RtlCopyUnicodeString, {onLeave: function (args) {send("RtlCopyUnicodeString");}});

var RtlCrc32 = Module.findExportByName("ntdll.dll", "RtlCrc32")
Interceptor.attach(RtlCrc32, {onLeave: function (args) {send("RtlCrc32");}});

var RtlCrc64 = Module.findExportByName("ntdll.dll", "RtlCrc64")
Interceptor.attach(RtlCrc64, {onLeave: function (args) {send("RtlCrc64");}});

var RtlCreateAcl = Module.findExportByName("ntdll.dll", "RtlCreateAcl")
Interceptor.attach(RtlCreateAcl, {onLeave: function (args) {send("RtlCreateAcl");}});

var RtlCreateActivationContext = Module.findExportByName("ntdll.dll", "RtlCreateActivationContext")
Interceptor.attach(RtlCreateActivationContext, {onLeave: function (args) {send("RtlCreateActivationContext");}});

var RtlCreateAndSetSD = Module.findExportByName("ntdll.dll", "RtlCreateAndSetSD")
Interceptor.attach(RtlCreateAndSetSD, {onLeave: function (args) {send("RtlCreateAndSetSD");}});

var RtlCreateAtomTable = Module.findExportByName("ntdll.dll", "RtlCreateAtomTable")
Interceptor.attach(RtlCreateAtomTable, {onLeave: function (args) {send("RtlCreateAtomTable");}});

var RtlCreateBootStatusDataFile = Module.findExportByName("ntdll.dll", "RtlCreateBootStatusDataFile")
Interceptor.attach(RtlCreateBootStatusDataFile, {onLeave: function (args) {send("RtlCreateBootStatusDataFile");}});

var RtlCreateBoundaryDescriptor = Module.findExportByName("ntdll.dll", "RtlCreateBoundaryDescriptor")
Interceptor.attach(RtlCreateBoundaryDescriptor, {onLeave: function (args) {send("RtlCreateBoundaryDescriptor");}});

var RtlCreateEnvironment = Module.findExportByName("ntdll.dll", "RtlCreateEnvironment")
Interceptor.attach(RtlCreateEnvironment, {onLeave: function (args) {send("RtlCreateEnvironment");}});

var RtlCreateEnvironmentEx = Module.findExportByName("ntdll.dll", "RtlCreateEnvironmentEx")
Interceptor.attach(RtlCreateEnvironmentEx, {onLeave: function (args) {send("RtlCreateEnvironmentEx");}});

var RtlCreateHashTable = Module.findExportByName("ntdll.dll", "RtlCreateHashTable")
Interceptor.attach(RtlCreateHashTable, {onLeave: function (args) {send("RtlCreateHashTable");}});

var RtlCreateHashTableEx = Module.findExportByName("ntdll.dll", "RtlCreateHashTableEx")
Interceptor.attach(RtlCreateHashTableEx, {onLeave: function (args) {send("RtlCreateHashTableEx");}});

var RtlCreateHeap = Module.findExportByName("ntdll.dll", "RtlCreateHeap")
Interceptor.attach(RtlCreateHeap, {onLeave: function (args) {send("RtlCreateHeap");}});

var RtlCreateMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlCreateMemoryBlockLookaside")
Interceptor.attach(RtlCreateMemoryBlockLookaside, {onLeave: function (args) {send("RtlCreateMemoryBlockLookaside");}});

var RtlCreateMemoryZone = Module.findExportByName("ntdll.dll", "RtlCreateMemoryZone")
Interceptor.attach(RtlCreateMemoryZone, {onLeave: function (args) {send("RtlCreateMemoryZone");}});

var RtlCreateProcessParameters = Module.findExportByName("ntdll.dll", "RtlCreateProcessParameters")
Interceptor.attach(RtlCreateProcessParameters, {onLeave: function (args) {send("RtlCreateProcessParameters");}});

var RtlCreateProcessParametersEx = Module.findExportByName("ntdll.dll", "RtlCreateProcessParametersEx")
Interceptor.attach(RtlCreateProcessParametersEx, {onLeave: function (args) {send("RtlCreateProcessParametersEx");}});

var RtlCreateProcessParametersWithTemplate = Module.findExportByName("ntdll.dll", "RtlCreateProcessParametersWithTemplate")
Interceptor.attach(RtlCreateProcessParametersWithTemplate, {onLeave: function (args) {send("RtlCreateProcessParametersWithTemplate");}});

var RtlCreateProcessReflection = Module.findExportByName("ntdll.dll", "RtlCreateProcessReflection")
Interceptor.attach(RtlCreateProcessReflection, {onLeave: function (args) {send("RtlCreateProcessReflection");}});

var RtlCreateQueryDebugBuffer = Module.findExportByName("ntdll.dll", "RtlCreateQueryDebugBuffer")
Interceptor.attach(RtlCreateQueryDebugBuffer, {onLeave: function (args) {send("RtlCreateQueryDebugBuffer");}});

var RtlCreateRegistryKey = Module.findExportByName("ntdll.dll", "RtlCreateRegistryKey")
Interceptor.attach(RtlCreateRegistryKey, {onLeave: function (args) {send("RtlCreateRegistryKey");}});

var RtlCreateSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlCreateSecurityDescriptor")
Interceptor.attach(RtlCreateSecurityDescriptor, {onLeave: function (args) {send("RtlCreateSecurityDescriptor");}});

var RtlCreateServiceSid = Module.findExportByName("ntdll.dll", "RtlCreateServiceSid")
Interceptor.attach(RtlCreateServiceSid, {onLeave: function (args) {send("RtlCreateServiceSid");}});

var RtlCreateSystemVolumeInformationFolder = Module.findExportByName("ntdll.dll", "RtlCreateSystemVolumeInformationFolder")
Interceptor.attach(RtlCreateSystemVolumeInformationFolder, {onLeave: function (args) {send("RtlCreateSystemVolumeInformationFolder");}});

var RtlCreateTagHeap = Module.findExportByName("ntdll.dll", "RtlCreateTagHeap")
Interceptor.attach(RtlCreateTagHeap, {onLeave: function (args) {send("RtlCreateTagHeap");}});

var RtlCreateTimer = Module.findExportByName("ntdll.dll", "RtlCreateTimer")
Interceptor.attach(RtlCreateTimer, {onLeave: function (args) {send("RtlCreateTimer");}});

var RtlCreateTimerQueue = Module.findExportByName("ntdll.dll", "RtlCreateTimerQueue")
Interceptor.attach(RtlCreateTimerQueue, {onLeave: function (args) {send("RtlCreateTimerQueue");}});

var RtlCreateUmsCompletionList = Module.findExportByName("ntdll.dll", "RtlCreateUmsCompletionList")
Interceptor.attach(RtlCreateUmsCompletionList, {onLeave: function (args) {send("RtlCreateUmsCompletionList");}});

var RtlCreateUmsThreadContext = Module.findExportByName("ntdll.dll", "RtlCreateUmsThreadContext")
Interceptor.attach(RtlCreateUmsThreadContext, {onLeave: function (args) {send("RtlCreateUmsThreadContext");}});

var RtlCreateUnicodeString = Module.findExportByName("ntdll.dll", "RtlCreateUnicodeString")
Interceptor.attach(RtlCreateUnicodeString, {onLeave: function (args) {send("RtlCreateUnicodeString");}});

var RtlCreateUnicodeStringFromAsciiz = Module.findExportByName("ntdll.dll", "RtlCreateUnicodeStringFromAsciiz")
Interceptor.attach(RtlCreateUnicodeStringFromAsciiz, {onLeave: function (args) {send("RtlCreateUnicodeStringFromAsciiz");}});

var RtlCreateUserFiberShadowStack = Module.findExportByName("ntdll.dll", "RtlCreateUserFiberShadowStack")
Interceptor.attach(RtlCreateUserFiberShadowStack, {onLeave: function (args) {send("RtlCreateUserFiberShadowStack");}});

var RtlCreateUserProcess = Module.findExportByName("ntdll.dll", "RtlCreateUserProcess")
Interceptor.attach(RtlCreateUserProcess, {onLeave: function (args) {send("RtlCreateUserProcess");}});

var RtlCreateUserProcessEx = Module.findExportByName("ntdll.dll", "RtlCreateUserProcessEx")
Interceptor.attach(RtlCreateUserProcessEx, {onLeave: function (args) {send("RtlCreateUserProcessEx");}});

var RtlCreateUserSecurityObject = Module.findExportByName("ntdll.dll", "RtlCreateUserSecurityObject")
Interceptor.attach(RtlCreateUserSecurityObject, {onLeave: function (args) {send("RtlCreateUserSecurityObject");}});

var RtlCreateUserStack = Module.findExportByName("ntdll.dll", "RtlCreateUserStack")
Interceptor.attach(RtlCreateUserStack, {onLeave: function (args) {send("RtlCreateUserStack");}});

var RtlCreateUserThread = Module.findExportByName("ntdll.dll", "RtlCreateUserThread")
Interceptor.attach(RtlCreateUserThread, {onLeave: function (args) {send("RtlCreateUserThread");}});

var RtlCreateVirtualAccountSid = Module.findExportByName("ntdll.dll", "RtlCreateVirtualAccountSid")
Interceptor.attach(RtlCreateVirtualAccountSid, {onLeave: function (args) {send("RtlCreateVirtualAccountSid");}});

var RtlCultureNameToLCID = Module.findExportByName("ntdll.dll", "RtlCultureNameToLCID")
Interceptor.attach(RtlCultureNameToLCID, {onLeave: function (args) {send("RtlCultureNameToLCID");}});

var RtlCustomCPToUnicodeN = Module.findExportByName("ntdll.dll", "RtlCustomCPToUnicodeN")
Interceptor.attach(RtlCustomCPToUnicodeN, {onLeave: function (args) {send("RtlCustomCPToUnicodeN");}});

var RtlCutoverTimeToSystemTime = Module.findExportByName("ntdll.dll", "RtlCutoverTimeToSystemTime")
Interceptor.attach(RtlCutoverTimeToSystemTime, {onLeave: function (args) {send("RtlCutoverTimeToSystemTime");}});

var RtlDeCommitDebugInfo = Module.findExportByName("ntdll.dll", "RtlDeCommitDebugInfo")
Interceptor.attach(RtlDeCommitDebugInfo, {onLeave: function (args) {send("RtlDeCommitDebugInfo");}});

var RtlDeNormalizeProcessParams = Module.findExportByName("ntdll.dll", "RtlDeNormalizeProcessParams")
Interceptor.attach(RtlDeNormalizeProcessParams, {onLeave: function (args) {send("RtlDeNormalizeProcessParams");}});

var RtlDeactivateActivationContext = Module.findExportByName("ntdll.dll", "RtlDeactivateActivationContext")
Interceptor.attach(RtlDeactivateActivationContext, {onLeave: function (args) {send("RtlDeactivateActivationContext");}});

var RtlDeactivateActivationContextUnsafeFast = Module.findExportByName("ntdll.dll", "RtlDeactivateActivationContextUnsafeFast")
Interceptor.attach(RtlDeactivateActivationContextUnsafeFast, {onLeave: function (args) {send("RtlDeactivateActivationContextUnsafeFast");}});

var RtlDebugPrintTimes = Module.findExportByName("ntdll.dll", "RtlDebugPrintTimes")
Interceptor.attach(RtlDebugPrintTimes, {onLeave: function (args) {send("RtlDebugPrintTimes");}});

var RtlDecodePointer = Module.findExportByName("ntdll.dll", "RtlDecodePointer")
Interceptor.attach(RtlDecodePointer, {onLeave: function (args) {send("RtlDecodePointer");}});

var RtlDecodeRemotePointer = Module.findExportByName("ntdll.dll", "RtlDecodeRemotePointer")
Interceptor.attach(RtlDecodeRemotePointer, {onLeave: function (args) {send("RtlDecodeRemotePointer");}});

var RtlDecodeSystemPointer = Module.findExportByName("ntdll.dll", "RtlDecodeSystemPointer")
Interceptor.attach(RtlDecodeSystemPointer, {onLeave: function (args) {send("RtlDecodeSystemPointer");}});

var RtlDecompressBuffer = Module.findExportByName("ntdll.dll", "RtlDecompressBuffer")
Interceptor.attach(RtlDecompressBuffer, {onLeave: function (args) {send("RtlDecompressBuffer");}});

var RtlDecompressBufferEx = Module.findExportByName("ntdll.dll", "RtlDecompressBufferEx")
Interceptor.attach(RtlDecompressBufferEx, {onLeave: function (args) {send("RtlDecompressBufferEx");}});

var RtlDecompressFragment = Module.findExportByName("ntdll.dll", "RtlDecompressFragment")
Interceptor.attach(RtlDecompressFragment, {onLeave: function (args) {send("RtlDecompressFragment");}});

var RtlDefaultNpAcl = Module.findExportByName("ntdll.dll", "RtlDefaultNpAcl")
Interceptor.attach(RtlDefaultNpAcl, {onLeave: function (args) {send("RtlDefaultNpAcl");}});

var RtlDelayExecution = Module.findExportByName("ntdll.dll", "RtlDelayExecution")
Interceptor.attach(RtlDelayExecution, {onLeave: function (args) {send("RtlDelayExecution");}});

var RtlDelete = Module.findExportByName("ntdll.dll", "RtlDelete")
Interceptor.attach(RtlDelete, {onLeave: function (args) {send("RtlDelete");}});

var RtlDeleteAce = Module.findExportByName("ntdll.dll", "RtlDeleteAce")
Interceptor.attach(RtlDeleteAce, {onLeave: function (args) {send("RtlDeleteAce");}});

var RtlDeleteAtomFromAtomTable = Module.findExportByName("ntdll.dll", "RtlDeleteAtomFromAtomTable")
Interceptor.attach(RtlDeleteAtomFromAtomTable, {onLeave: function (args) {send("RtlDeleteAtomFromAtomTable");}});

var RtlDeleteBarrier = Module.findExportByName("ntdll.dll", "RtlDeleteBarrier")
Interceptor.attach(RtlDeleteBarrier, {onLeave: function (args) {send("RtlDeleteBarrier");}});

var RtlDeleteBoundaryDescriptor = Module.findExportByName("ntdll.dll", "RtlDeleteBoundaryDescriptor")
Interceptor.attach(RtlDeleteBoundaryDescriptor, {onLeave: function (args) {send("RtlDeleteBoundaryDescriptor");}});

var RtlDeleteCriticalSection = Module.findExportByName("ntdll.dll", "RtlDeleteCriticalSection")
Interceptor.attach(RtlDeleteCriticalSection, {onLeave: function (args) {send("RtlDeleteCriticalSection");}});

var RtlDeleteElementGenericTable = Module.findExportByName("ntdll.dll", "RtlDeleteElementGenericTable")
Interceptor.attach(RtlDeleteElementGenericTable, {onLeave: function (args) {send("RtlDeleteElementGenericTable");}});

var RtlDeleteElementGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlDeleteElementGenericTableAvl")
Interceptor.attach(RtlDeleteElementGenericTableAvl, {onLeave: function (args) {send("RtlDeleteElementGenericTableAvl");}});

var RtlDeleteElementGenericTableAvlEx = Module.findExportByName("ntdll.dll", "RtlDeleteElementGenericTableAvlEx")
Interceptor.attach(RtlDeleteElementGenericTableAvlEx, {onLeave: function (args) {send("RtlDeleteElementGenericTableAvlEx");}});

var RtlDeleteFunctionTable = Module.findExportByName("ntdll.dll", "RtlDeleteFunctionTable")
Interceptor.attach(RtlDeleteFunctionTable, {onLeave: function (args) {send("RtlDeleteFunctionTable");}});

var RtlDeleteGrowableFunctionTable = Module.findExportByName("ntdll.dll", "RtlDeleteGrowableFunctionTable")
Interceptor.attach(RtlDeleteGrowableFunctionTable, {onLeave: function (args) {send("RtlDeleteGrowableFunctionTable");}});

var RtlDeleteHashTable = Module.findExportByName("ntdll.dll", "RtlDeleteHashTable")
Interceptor.attach(RtlDeleteHashTable, {onLeave: function (args) {send("RtlDeleteHashTable");}});

var RtlDeleteNoSplay = Module.findExportByName("ntdll.dll", "RtlDeleteNoSplay")
Interceptor.attach(RtlDeleteNoSplay, {onLeave: function (args) {send("RtlDeleteNoSplay");}});

var RtlDeleteRegistryValue = Module.findExportByName("ntdll.dll", "RtlDeleteRegistryValue")
Interceptor.attach(RtlDeleteRegistryValue, {onLeave: function (args) {send("RtlDeleteRegistryValue");}});

var RtlDeleteResource = Module.findExportByName("ntdll.dll", "RtlDeleteResource")
Interceptor.attach(RtlDeleteResource, {onLeave: function (args) {send("RtlDeleteResource");}});

var RtlDeleteSecurityObject = Module.findExportByName("ntdll.dll", "RtlDeleteSecurityObject")
Interceptor.attach(RtlDeleteSecurityObject, {onLeave: function (args) {send("RtlDeleteSecurityObject");}});

var RtlDeleteTimer = Module.findExportByName("ntdll.dll", "RtlDeleteTimer")
Interceptor.attach(RtlDeleteTimer, {onLeave: function (args) {send("RtlDeleteTimer");}});

var RtlDeleteTimerQueue = Module.findExportByName("ntdll.dll", "RtlDeleteTimerQueue")
Interceptor.attach(RtlDeleteTimerQueue, {onLeave: function (args) {send("RtlDeleteTimerQueue");}});

var RtlDeleteTimerQueueEx = Module.findExportByName("ntdll.dll", "RtlDeleteTimerQueueEx")
Interceptor.attach(RtlDeleteTimerQueueEx, {onLeave: function (args) {send("RtlDeleteTimerQueueEx");}});

var RtlDeleteUmsCompletionList = Module.findExportByName("ntdll.dll", "RtlDeleteUmsCompletionList")
Interceptor.attach(RtlDeleteUmsCompletionList, {onLeave: function (args) {send("RtlDeleteUmsCompletionList");}});

var RtlDeleteUmsThreadContext = Module.findExportByName("ntdll.dll", "RtlDeleteUmsThreadContext")
Interceptor.attach(RtlDeleteUmsThreadContext, {onLeave: function (args) {send("RtlDeleteUmsThreadContext");}});

var RtlDequeueUmsCompletionListItems = Module.findExportByName("ntdll.dll", "RtlDequeueUmsCompletionListItems")
Interceptor.attach(RtlDequeueUmsCompletionListItems, {onLeave: function (args) {send("RtlDequeueUmsCompletionListItems");}});

var RtlDeregisterSecureMemoryCacheCallback = Module.findExportByName("ntdll.dll", "RtlDeregisterSecureMemoryCacheCallback")
Interceptor.attach(RtlDeregisterSecureMemoryCacheCallback, {onLeave: function (args) {send("RtlDeregisterSecureMemoryCacheCallback");}});

var RtlDeregisterWait = Module.findExportByName("ntdll.dll", "RtlDeregisterWait")
Interceptor.attach(RtlDeregisterWait, {onLeave: function (args) {send("RtlDeregisterWait");}});

var RtlDeregisterWaitEx = Module.findExportByName("ntdll.dll", "RtlDeregisterWaitEx")
Interceptor.attach(RtlDeregisterWaitEx, {onLeave: function (args) {send("RtlDeregisterWaitEx");}});

var RtlDeriveCapabilitySidsFromName = Module.findExportByName("ntdll.dll", "RtlDeriveCapabilitySidsFromName")
Interceptor.attach(RtlDeriveCapabilitySidsFromName, {onLeave: function (args) {send("RtlDeriveCapabilitySidsFromName");}});

var RtlDestroyAtomTable = Module.findExportByName("ntdll.dll", "RtlDestroyAtomTable")
Interceptor.attach(RtlDestroyAtomTable, {onLeave: function (args) {send("RtlDestroyAtomTable");}});

var RtlDestroyEnvironment = Module.findExportByName("ntdll.dll", "RtlDestroyEnvironment")
Interceptor.attach(RtlDestroyEnvironment, {onLeave: function (args) {send("RtlDestroyEnvironment");}});

var RtlDestroyHandleTable = Module.findExportByName("ntdll.dll", "RtlDestroyHandleTable")
Interceptor.attach(RtlDestroyHandleTable, {onLeave: function (args) {send("RtlDestroyHandleTable");}});

var RtlDestroyHeap = Module.findExportByName("ntdll.dll", "RtlDestroyHeap")
Interceptor.attach(RtlDestroyHeap, {onLeave: function (args) {send("RtlDestroyHeap");}});

var RtlDestroyMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlDestroyMemoryBlockLookaside")
Interceptor.attach(RtlDestroyMemoryBlockLookaside, {onLeave: function (args) {send("RtlDestroyMemoryBlockLookaside");}});

var RtlDestroyMemoryZone = Module.findExportByName("ntdll.dll", "RtlDestroyMemoryZone")
Interceptor.attach(RtlDestroyMemoryZone, {onLeave: function (args) {send("RtlDestroyMemoryZone");}});

var RtlDestroyProcessParameters = Module.findExportByName("ntdll.dll", "RtlDestroyProcessParameters")
Interceptor.attach(RtlDestroyProcessParameters, {onLeave: function (args) {send("RtlDestroyProcessParameters");}});

var RtlDestroyQueryDebugBuffer = Module.findExportByName("ntdll.dll", "RtlDestroyQueryDebugBuffer")
Interceptor.attach(RtlDestroyQueryDebugBuffer, {onLeave: function (args) {send("RtlDestroyQueryDebugBuffer");}});

var RtlDetectHeapLeaks = Module.findExportByName("ntdll.dll", "RtlDetectHeapLeaks")
Interceptor.attach(RtlDetectHeapLeaks, {onLeave: function (args) {send("RtlDetectHeapLeaks");}});

var RtlDetermineDosPathNameType_U = Module.findExportByName("ntdll.dll", "RtlDetermineDosPathNameType_U")
Interceptor.attach(RtlDetermineDosPathNameType_U, {onLeave: function (args) {send("RtlDetermineDosPathNameType_U");}});

var RtlDisableThreadProfiling = Module.findExportByName("ntdll.dll", "RtlDisableThreadProfiling")
Interceptor.attach(RtlDisableThreadProfiling, {onLeave: function (args) {send("RtlDisableThreadProfiling");}});

var RtlDisownModuleHeapAllocation = Module.findExportByName("ntdll.dll", "RtlDisownModuleHeapAllocation")
Interceptor.attach(RtlDisownModuleHeapAllocation, {onLeave: function (args) {send("RtlDisownModuleHeapAllocation");}});

var RtlDllShutdownInProgress = Module.findExportByName("ntdll.dll", "RtlDllShutdownInProgress")
Interceptor.attach(RtlDllShutdownInProgress, {onLeave: function (args) {send("RtlDllShutdownInProgress");}});

var RtlDnsHostNameToComputerName = Module.findExportByName("ntdll.dll", "RtlDnsHostNameToComputerName")
Interceptor.attach(RtlDnsHostNameToComputerName, {onLeave: function (args) {send("RtlDnsHostNameToComputerName");}});

var RtlDoesFileExists_U = Module.findExportByName("ntdll.dll", "RtlDoesFileExists_U")
Interceptor.attach(RtlDoesFileExists_U, {onLeave: function (args) {send("RtlDoesFileExists_U");}});

var RtlDoesNameContainWildCards = Module.findExportByName("ntdll.dll", "RtlDoesNameContainWildCards")
Interceptor.attach(RtlDoesNameContainWildCards, {onLeave: function (args) {send("RtlDoesNameContainWildCards");}});

var RtlDosApplyFileIsolationRedirection_Ustr = Module.findExportByName("ntdll.dll", "RtlDosApplyFileIsolationRedirection_Ustr")
Interceptor.attach(RtlDosApplyFileIsolationRedirection_Ustr, {onLeave: function (args) {send("RtlDosApplyFileIsolationRedirection_Ustr");}});

var RtlDosLongPathNameToNtPathName_U_WithStatus = Module.findExportByName("ntdll.dll", "RtlDosLongPathNameToNtPathName_U_WithStatus")
Interceptor.attach(RtlDosLongPathNameToNtPathName_U_WithStatus, {onLeave: function (args) {send("RtlDosLongPathNameToNtPathName_U_WithStatus");}});

var RtlDosLongPathNameToRelativeNtPathName_U_WithStatus = Module.findExportByName("ntdll.dll", "RtlDosLongPathNameToRelativeNtPathName_U_WithStatus")
Interceptor.attach(RtlDosLongPathNameToRelativeNtPathName_U_WithStatus, {onLeave: function (args) {send("RtlDosLongPathNameToRelativeNtPathName_U_WithStatus");}});

var RtlDosPathNameToNtPathName_U = Module.findExportByName("ntdll.dll", "RtlDosPathNameToNtPathName_U")
Interceptor.attach(RtlDosPathNameToNtPathName_U, {onLeave: function (args) {send("RtlDosPathNameToNtPathName_U");}});

var RtlDosPathNameToNtPathName_U_WithStatus = Module.findExportByName("ntdll.dll", "RtlDosPathNameToNtPathName_U_WithStatus")
Interceptor.attach(RtlDosPathNameToNtPathName_U_WithStatus, {onLeave: function (args) {send("RtlDosPathNameToNtPathName_U_WithStatus");}});

var RtlDosPathNameToRelativeNtPathName_U = Module.findExportByName("ntdll.dll", "RtlDosPathNameToRelativeNtPathName_U")
Interceptor.attach(RtlDosPathNameToRelativeNtPathName_U, {onLeave: function (args) {send("RtlDosPathNameToRelativeNtPathName_U");}});

var RtlDosPathNameToRelativeNtPathName_U_WithStatus = Module.findExportByName("ntdll.dll", "RtlDosPathNameToRelativeNtPathName_U_WithStatus")
Interceptor.attach(RtlDosPathNameToRelativeNtPathName_U_WithStatus, {onLeave: function (args) {send("RtlDosPathNameToRelativeNtPathName_U_WithStatus");}});

var RtlDosSearchPath_U = Module.findExportByName("ntdll.dll", "RtlDosSearchPath_U")
Interceptor.attach(RtlDosSearchPath_U, {onLeave: function (args) {send("RtlDosSearchPath_U");}});

var RtlDosSearchPath_Ustr = Module.findExportByName("ntdll.dll", "RtlDosSearchPath_Ustr")
Interceptor.attach(RtlDosSearchPath_Ustr, {onLeave: function (args) {send("RtlDosSearchPath_Ustr");}});

var RtlDowncaseUnicodeChar = Module.findExportByName("ntdll.dll", "RtlDowncaseUnicodeChar")
Interceptor.attach(RtlDowncaseUnicodeChar, {onLeave: function (args) {send("RtlDowncaseUnicodeChar");}});

var RtlDowncaseUnicodeString = Module.findExportByName("ntdll.dll", "RtlDowncaseUnicodeString")
Interceptor.attach(RtlDowncaseUnicodeString, {onLeave: function (args) {send("RtlDowncaseUnicodeString");}});

var RtlDrainNonVolatileFlush = Module.findExportByName("ntdll.dll", "RtlDrainNonVolatileFlush")
Interceptor.attach(RtlDrainNonVolatileFlush, {onLeave: function (args) {send("RtlDrainNonVolatileFlush");}});

var RtlDumpResource = Module.findExportByName("ntdll.dll", "RtlDumpResource")
Interceptor.attach(RtlDumpResource, {onLeave: function (args) {send("RtlDumpResource");}});

var RtlDuplicateUnicodeString = Module.findExportByName("ntdll.dll", "RtlDuplicateUnicodeString")
Interceptor.attach(RtlDuplicateUnicodeString, {onLeave: function (args) {send("RtlDuplicateUnicodeString");}});

var RtlEmptyAtomTable = Module.findExportByName("ntdll.dll", "RtlEmptyAtomTable")
Interceptor.attach(RtlEmptyAtomTable, {onLeave: function (args) {send("RtlEmptyAtomTable");}});

var RtlEnableEarlyCriticalSectionEventCreation = Module.findExportByName("ntdll.dll", "RtlEnableEarlyCriticalSectionEventCreation")
Interceptor.attach(RtlEnableEarlyCriticalSectionEventCreation, {onLeave: function (args) {send("RtlEnableEarlyCriticalSectionEventCreation");}});

var RtlEnableThreadProfiling = Module.findExportByName("ntdll.dll", "RtlEnableThreadProfiling")
Interceptor.attach(RtlEnableThreadProfiling, {onLeave: function (args) {send("RtlEnableThreadProfiling");}});

var RtlEnclaveCallDispatch = Module.findExportByName("ntdll.dll", "RtlEnclaveCallDispatch")
Interceptor.attach(RtlEnclaveCallDispatch, {onLeave: function (args) {send("RtlEnclaveCallDispatch");}});

var RtlEnclaveCallDispatchReturn = Module.findExportByName("ntdll.dll", "RtlEnclaveCallDispatchReturn")
Interceptor.attach(RtlEnclaveCallDispatchReturn, {onLeave: function (args) {send("RtlEnclaveCallDispatchReturn");}});

var RtlEncodePointer = Module.findExportByName("ntdll.dll", "RtlEncodePointer")
Interceptor.attach(RtlEncodePointer, {onLeave: function (args) {send("RtlEncodePointer");}});

var RtlEncodeRemotePointer = Module.findExportByName("ntdll.dll", "RtlEncodeRemotePointer")
Interceptor.attach(RtlEncodeRemotePointer, {onLeave: function (args) {send("RtlEncodeRemotePointer");}});

var RtlEncodeSystemPointer = Module.findExportByName("ntdll.dll", "RtlEncodeSystemPointer")
Interceptor.attach(RtlEncodeSystemPointer, {onLeave: function (args) {send("RtlEncodeSystemPointer");}});

var RtlEndEnumerationHashTable = Module.findExportByName("ntdll.dll", "RtlEndEnumerationHashTable")
Interceptor.attach(RtlEndEnumerationHashTable, {onLeave: function (args) {send("RtlEndEnumerationHashTable");}});

var RtlEndStrongEnumerationHashTable = Module.findExportByName("ntdll.dll", "RtlEndStrongEnumerationHashTable")
Interceptor.attach(RtlEndStrongEnumerationHashTable, {onLeave: function (args) {send("RtlEndStrongEnumerationHashTable");}});

var RtlEndWeakEnumerationHashTable = Module.findExportByName("ntdll.dll", "RtlEndWeakEnumerationHashTable")
Interceptor.attach(RtlEndWeakEnumerationHashTable, {onLeave: function (args) {send("RtlEndWeakEnumerationHashTable");}});

var RtlEnterCriticalSection = Module.findExportByName("ntdll.dll", "RtlEnterCriticalSection")
Interceptor.attach(RtlEnterCriticalSection, {onLeave: function (args) {send("RtlEnterCriticalSection");}});

var RtlEnterUmsSchedulingMode = Module.findExportByName("ntdll.dll", "RtlEnterUmsSchedulingMode")
Interceptor.attach(RtlEnterUmsSchedulingMode, {onLeave: function (args) {send("RtlEnterUmsSchedulingMode");}});

var RtlEnumProcessHeaps = Module.findExportByName("ntdll.dll", "RtlEnumProcessHeaps")
Interceptor.attach(RtlEnumProcessHeaps, {onLeave: function (args) {send("RtlEnumProcessHeaps");}});

var RtlEnumerateEntryHashTable = Module.findExportByName("ntdll.dll", "RtlEnumerateEntryHashTable")
Interceptor.attach(RtlEnumerateEntryHashTable, {onLeave: function (args) {send("RtlEnumerateEntryHashTable");}});

var RtlEnumerateGenericTable = Module.findExportByName("ntdll.dll", "RtlEnumerateGenericTable")
Interceptor.attach(RtlEnumerateGenericTable, {onLeave: function (args) {send("RtlEnumerateGenericTable");}});

var RtlEnumerateGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlEnumerateGenericTableAvl")
Interceptor.attach(RtlEnumerateGenericTableAvl, {onLeave: function (args) {send("RtlEnumerateGenericTableAvl");}});

var RtlEnumerateGenericTableLikeADirectory = Module.findExportByName("ntdll.dll", "RtlEnumerateGenericTableLikeADirectory")
Interceptor.attach(RtlEnumerateGenericTableLikeADirectory, {onLeave: function (args) {send("RtlEnumerateGenericTableLikeADirectory");}});

var RtlEnumerateGenericTableWithoutSplaying = Module.findExportByName("ntdll.dll", "RtlEnumerateGenericTableWithoutSplaying")
Interceptor.attach(RtlEnumerateGenericTableWithoutSplaying, {onLeave: function (args) {send("RtlEnumerateGenericTableWithoutSplaying");}});

var RtlEnumerateGenericTableWithoutSplayingAvl = Module.findExportByName("ntdll.dll", "RtlEnumerateGenericTableWithoutSplayingAvl")
Interceptor.attach(RtlEnumerateGenericTableWithoutSplayingAvl, {onLeave: function (args) {send("RtlEnumerateGenericTableWithoutSplayingAvl");}});

var RtlEqualComputerName = Module.findExportByName("ntdll.dll", "RtlEqualComputerName")
Interceptor.attach(RtlEqualComputerName, {onLeave: function (args) {send("RtlEqualComputerName");}});

var RtlEqualDomainName = Module.findExportByName("ntdll.dll", "RtlEqualDomainName")
Interceptor.attach(RtlEqualDomainName, {onLeave: function (args) {send("RtlEqualDomainName");}});

var RtlEqualLuid = Module.findExportByName("ntdll.dll", "RtlEqualLuid")
Interceptor.attach(RtlEqualLuid, {onLeave: function (args) {send("RtlEqualLuid");}});

var RtlEqualPrefixSid = Module.findExportByName("ntdll.dll", "RtlEqualPrefixSid")
Interceptor.attach(RtlEqualPrefixSid, {onLeave: function (args) {send("RtlEqualPrefixSid");}});

var RtlEqualSid = Module.findExportByName("ntdll.dll", "RtlEqualSid")
Interceptor.attach(RtlEqualSid, {onLeave: function (args) {send("RtlEqualSid");}});

var RtlEqualString = Module.findExportByName("ntdll.dll", "RtlEqualString")
Interceptor.attach(RtlEqualString, {onLeave: function (args) {send("RtlEqualString");}});

var RtlEqualUnicodeString = Module.findExportByName("ntdll.dll", "RtlEqualUnicodeString")
Interceptor.attach(RtlEqualUnicodeString, {onLeave: function (args) {send("RtlEqualUnicodeString");}});

var RtlEqualWnfChangeStamps = Module.findExportByName("ntdll.dll", "RtlEqualWnfChangeStamps")
Interceptor.attach(RtlEqualWnfChangeStamps, {onLeave: function (args) {send("RtlEqualWnfChangeStamps");}});

var RtlEraseUnicodeString = Module.findExportByName("ntdll.dll", "RtlEraseUnicodeString")
Interceptor.attach(RtlEraseUnicodeString, {onLeave: function (args) {send("RtlEraseUnicodeString");}});

var RtlEthernetAddressToStringA = Module.findExportByName("ntdll.dll", "RtlEthernetAddressToStringA")
Interceptor.attach(RtlEthernetAddressToStringA, {onLeave: function (args) {send("RtlEthernetAddressToStringA");}});

var RtlEthernetAddressToStringW = Module.findExportByName("ntdll.dll", "RtlEthernetAddressToStringW")
Interceptor.attach(RtlEthernetAddressToStringW, {onLeave: function (args) {send("RtlEthernetAddressToStringW");}});

var RtlEthernetStringToAddressA = Module.findExportByName("ntdll.dll", "RtlEthernetStringToAddressA")
Interceptor.attach(RtlEthernetStringToAddressA, {onLeave: function (args) {send("RtlEthernetStringToAddressA");}});

var RtlEthernetStringToAddressW = Module.findExportByName("ntdll.dll", "RtlEthernetStringToAddressW")
Interceptor.attach(RtlEthernetStringToAddressW, {onLeave: function (args) {send("RtlEthernetStringToAddressW");}});

var RtlExecuteUmsThread = Module.findExportByName("ntdll.dll", "RtlExecuteUmsThread")
Interceptor.attach(RtlExecuteUmsThread, {onLeave: function (args) {send("RtlExecuteUmsThread");}});

var RtlExitUserProcess = Module.findExportByName("ntdll.dll", "RtlExitUserProcess")
Interceptor.attach(RtlExitUserProcess, {onLeave: function (args) {send("RtlExitUserProcess");}});

var RtlExitUserThread = Module.findExportByName("ntdll.dll", "RtlExitUserThread")
Interceptor.attach(RtlExitUserThread, {onLeave: function (args) {send("RtlExitUserThread");}});

var RtlExpandEnvironmentStrings = Module.findExportByName("ntdll.dll", "RtlExpandEnvironmentStrings")
Interceptor.attach(RtlExpandEnvironmentStrings, {onLeave: function (args) {send("RtlExpandEnvironmentStrings");}});

var RtlExpandEnvironmentStrings_U = Module.findExportByName("ntdll.dll", "RtlExpandEnvironmentStrings_U")
Interceptor.attach(RtlExpandEnvironmentStrings_U, {onLeave: function (args) {send("RtlExpandEnvironmentStrings_U");}});

var RtlExpandHashTable = Module.findExportByName("ntdll.dll", "RtlExpandHashTable")
Interceptor.attach(RtlExpandHashTable, {onLeave: function (args) {send("RtlExpandHashTable");}});

var RtlExtendCorrelationVector = Module.findExportByName("ntdll.dll", "RtlExtendCorrelationVector")
Interceptor.attach(RtlExtendCorrelationVector, {onLeave: function (args) {send("RtlExtendCorrelationVector");}});

var RtlExtendMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlExtendMemoryBlockLookaside")
Interceptor.attach(RtlExtendMemoryBlockLookaside, {onLeave: function (args) {send("RtlExtendMemoryBlockLookaside");}});

var RtlExtendMemoryZone = Module.findExportByName("ntdll.dll", "RtlExtendMemoryZone")
Interceptor.attach(RtlExtendMemoryZone, {onLeave: function (args) {send("RtlExtendMemoryZone");}});

var RtlExtractBitMap = Module.findExportByName("ntdll.dll", "RtlExtractBitMap")
Interceptor.attach(RtlExtractBitMap, {onLeave: function (args) {send("RtlExtractBitMap");}});

var RtlFillMemory = Module.findExportByName("ntdll.dll", "RtlFillMemory")
Interceptor.attach(RtlFillMemory, {onLeave: function (args) {send("RtlFillMemory");}});

var RtlFillMemoryNonTemporal = Module.findExportByName("ntdll.dll", "RtlFillMemoryNonTemporal")
Interceptor.attach(RtlFillMemoryNonTemporal, {onLeave: function (args) {send("RtlFillMemoryNonTemporal");}});

var RtlFillNonVolatileMemory = Module.findExportByName("ntdll.dll", "RtlFillNonVolatileMemory")
Interceptor.attach(RtlFillNonVolatileMemory, {onLeave: function (args) {send("RtlFillNonVolatileMemory");}});

var RtlFinalReleaseOutOfProcessMemoryStream = Module.findExportByName("ntdll.dll", "RtlFinalReleaseOutOfProcessMemoryStream")
Interceptor.attach(RtlFinalReleaseOutOfProcessMemoryStream, {onLeave: function (args) {send("RtlFinalReleaseOutOfProcessMemoryStream");}});

var RtlFindAceByType = Module.findExportByName("ntdll.dll", "RtlFindAceByType")
Interceptor.attach(RtlFindAceByType, {onLeave: function (args) {send("RtlFindAceByType");}});

var RtlFindActivationContextSectionGuid = Module.findExportByName("ntdll.dll", "RtlFindActivationContextSectionGuid")
Interceptor.attach(RtlFindActivationContextSectionGuid, {onLeave: function (args) {send("RtlFindActivationContextSectionGuid");}});

var RtlFindActivationContextSectionString = Module.findExportByName("ntdll.dll", "RtlFindActivationContextSectionString")
Interceptor.attach(RtlFindActivationContextSectionString, {onLeave: function (args) {send("RtlFindActivationContextSectionString");}});

var RtlFindCharInUnicodeString = Module.findExportByName("ntdll.dll", "RtlFindCharInUnicodeString")
Interceptor.attach(RtlFindCharInUnicodeString, {onLeave: function (args) {send("RtlFindCharInUnicodeString");}});

var RtlFindClearBits = Module.findExportByName("ntdll.dll", "RtlFindClearBits")
Interceptor.attach(RtlFindClearBits, {onLeave: function (args) {send("RtlFindClearBits");}});

var RtlFindClearBitsAndSet = Module.findExportByName("ntdll.dll", "RtlFindClearBitsAndSet")
Interceptor.attach(RtlFindClearBitsAndSet, {onLeave: function (args) {send("RtlFindClearBitsAndSet");}});

var RtlFindClearBitsAndSetEx = Module.findExportByName("ntdll.dll", "RtlFindClearBitsAndSetEx")
Interceptor.attach(RtlFindClearBitsAndSetEx, {onLeave: function (args) {send("RtlFindClearBitsAndSetEx");}});

var RtlFindClearBitsEx = Module.findExportByName("ntdll.dll", "RtlFindClearBitsEx")
Interceptor.attach(RtlFindClearBitsEx, {onLeave: function (args) {send("RtlFindClearBitsEx");}});

var RtlFindClearRuns = Module.findExportByName("ntdll.dll", "RtlFindClearRuns")
Interceptor.attach(RtlFindClearRuns, {onLeave: function (args) {send("RtlFindClearRuns");}});

var RtlFindClosestEncodableLength = Module.findExportByName("ntdll.dll", "RtlFindClosestEncodableLength")
Interceptor.attach(RtlFindClosestEncodableLength, {onLeave: function (args) {send("RtlFindClosestEncodableLength");}});

var RtlFindExportedRoutineByName = Module.findExportByName("ntdll.dll", "RtlFindExportedRoutineByName")
Interceptor.attach(RtlFindExportedRoutineByName, {onLeave: function (args) {send("RtlFindExportedRoutineByName");}});

var RtlFindLastBackwardRunClear = Module.findExportByName("ntdll.dll", "RtlFindLastBackwardRunClear")
Interceptor.attach(RtlFindLastBackwardRunClear, {onLeave: function (args) {send("RtlFindLastBackwardRunClear");}});

var RtlFindLeastSignificantBit = Module.findExportByName("ntdll.dll", "RtlFindLeastSignificantBit")
Interceptor.attach(RtlFindLeastSignificantBit, {onLeave: function (args) {send("RtlFindLeastSignificantBit");}});

var RtlFindLongestRunClear = Module.findExportByName("ntdll.dll", "RtlFindLongestRunClear")
Interceptor.attach(RtlFindLongestRunClear, {onLeave: function (args) {send("RtlFindLongestRunClear");}});

var RtlFindMessage = Module.findExportByName("ntdll.dll", "RtlFindMessage")
Interceptor.attach(RtlFindMessage, {onLeave: function (args) {send("RtlFindMessage");}});

var RtlFindMostSignificantBit = Module.findExportByName("ntdll.dll", "RtlFindMostSignificantBit")
Interceptor.attach(RtlFindMostSignificantBit, {onLeave: function (args) {send("RtlFindMostSignificantBit");}});

var RtlFindNextForwardRunClear = Module.findExportByName("ntdll.dll", "RtlFindNextForwardRunClear")
Interceptor.attach(RtlFindNextForwardRunClear, {onLeave: function (args) {send("RtlFindNextForwardRunClear");}});

var RtlFindSetBits = Module.findExportByName("ntdll.dll", "RtlFindSetBits")
Interceptor.attach(RtlFindSetBits, {onLeave: function (args) {send("RtlFindSetBits");}});

var RtlFindSetBitsAndClear = Module.findExportByName("ntdll.dll", "RtlFindSetBitsAndClear")
Interceptor.attach(RtlFindSetBitsAndClear, {onLeave: function (args) {send("RtlFindSetBitsAndClear");}});

var RtlFindSetBitsAndClearEx = Module.findExportByName("ntdll.dll", "RtlFindSetBitsAndClearEx")
Interceptor.attach(RtlFindSetBitsAndClearEx, {onLeave: function (args) {send("RtlFindSetBitsAndClearEx");}});

var RtlFindSetBitsEx = Module.findExportByName("ntdll.dll", "RtlFindSetBitsEx")
Interceptor.attach(RtlFindSetBitsEx, {onLeave: function (args) {send("RtlFindSetBitsEx");}});

var RtlFindUnicodeSubstring = Module.findExportByName("ntdll.dll", "RtlFindUnicodeSubstring")
Interceptor.attach(RtlFindUnicodeSubstring, {onLeave: function (args) {send("RtlFindUnicodeSubstring");}});

var RtlFirstEntrySList = Module.findExportByName("ntdll.dll", "RtlFirstEntrySList")
Interceptor.attach(RtlFirstEntrySList, {onLeave: function (args) {send("RtlFirstEntrySList");}});

var RtlFirstFreeAce = Module.findExportByName("ntdll.dll", "RtlFirstFreeAce")
Interceptor.attach(RtlFirstFreeAce, {onLeave: function (args) {send("RtlFirstFreeAce");}});

var RtlFlsAlloc = Module.findExportByName("ntdll.dll", "RtlFlsAlloc")
Interceptor.attach(RtlFlsAlloc, {onLeave: function (args) {send("RtlFlsAlloc");}});

var RtlFlsFree = Module.findExportByName("ntdll.dll", "RtlFlsFree")
Interceptor.attach(RtlFlsFree, {onLeave: function (args) {send("RtlFlsFree");}});

var RtlFlsGetValue = Module.findExportByName("ntdll.dll", "RtlFlsGetValue")
Interceptor.attach(RtlFlsGetValue, {onLeave: function (args) {send("RtlFlsGetValue");}});

var RtlFlsSetValue = Module.findExportByName("ntdll.dll", "RtlFlsSetValue")
Interceptor.attach(RtlFlsSetValue, {onLeave: function (args) {send("RtlFlsSetValue");}});

var RtlFlushHeaps = Module.findExportByName("ntdll.dll", "RtlFlushHeaps")
Interceptor.attach(RtlFlushHeaps, {onLeave: function (args) {send("RtlFlushHeaps");}});

var RtlFlushNonVolatileMemory = Module.findExportByName("ntdll.dll", "RtlFlushNonVolatileMemory")
Interceptor.attach(RtlFlushNonVolatileMemory, {onLeave: function (args) {send("RtlFlushNonVolatileMemory");}});

var RtlFlushNonVolatileMemoryRanges = Module.findExportByName("ntdll.dll", "RtlFlushNonVolatileMemoryRanges")
Interceptor.attach(RtlFlushNonVolatileMemoryRanges, {onLeave: function (args) {send("RtlFlushNonVolatileMemoryRanges");}});

var RtlFlushSecureMemoryCache = Module.findExportByName("ntdll.dll", "RtlFlushSecureMemoryCache")
Interceptor.attach(RtlFlushSecureMemoryCache, {onLeave: function (args) {send("RtlFlushSecureMemoryCache");}});

var RtlFormatCurrentUserKeyPath = Module.findExportByName("ntdll.dll", "RtlFormatCurrentUserKeyPath")
Interceptor.attach(RtlFormatCurrentUserKeyPath, {onLeave: function (args) {send("RtlFormatCurrentUserKeyPath");}});

var RtlFormatMessage = Module.findExportByName("ntdll.dll", "RtlFormatMessage")
Interceptor.attach(RtlFormatMessage, {onLeave: function (args) {send("RtlFormatMessage");}});

var RtlFormatMessageEx = Module.findExportByName("ntdll.dll", "RtlFormatMessageEx")
Interceptor.attach(RtlFormatMessageEx, {onLeave: function (args) {send("RtlFormatMessageEx");}});

var RtlFreeActivationContextStack = Module.findExportByName("ntdll.dll", "RtlFreeActivationContextStack")
Interceptor.attach(RtlFreeActivationContextStack, {onLeave: function (args) {send("RtlFreeActivationContextStack");}});

var RtlFreeAnsiString = Module.findExportByName("ntdll.dll", "RtlFreeAnsiString")
Interceptor.attach(RtlFreeAnsiString, {onLeave: function (args) {send("RtlFreeAnsiString");}});

var RtlFreeHandle = Module.findExportByName("ntdll.dll", "RtlFreeHandle")
Interceptor.attach(RtlFreeHandle, {onLeave: function (args) {send("RtlFreeHandle");}});

var RtlFreeHeap = Module.findExportByName("ntdll.dll", "RtlFreeHeap")
Interceptor.attach(RtlFreeHeap, {onLeave: function (args) {send("RtlFreeHeap");}});

var RtlFreeMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlFreeMemoryBlockLookaside")
Interceptor.attach(RtlFreeMemoryBlockLookaside, {onLeave: function (args) {send("RtlFreeMemoryBlockLookaside");}});

var RtlFreeNonVolatileToken = Module.findExportByName("ntdll.dll", "RtlFreeNonVolatileToken")
Interceptor.attach(RtlFreeNonVolatileToken, {onLeave: function (args) {send("RtlFreeNonVolatileToken");}});

var RtlFreeOemString = Module.findExportByName("ntdll.dll", "RtlFreeOemString")
Interceptor.attach(RtlFreeOemString, {onLeave: function (args) {send("RtlFreeOemString");}});

var RtlFreeSid = Module.findExportByName("ntdll.dll", "RtlFreeSid")
Interceptor.attach(RtlFreeSid, {onLeave: function (args) {send("RtlFreeSid");}});

var RtlFreeThreadActivationContextStack = Module.findExportByName("ntdll.dll", "RtlFreeThreadActivationContextStack")
Interceptor.attach(RtlFreeThreadActivationContextStack, {onLeave: function (args) {send("RtlFreeThreadActivationContextStack");}});

var RtlFreeUTF8String = Module.findExportByName("ntdll.dll", "RtlFreeUTF8String")
Interceptor.attach(RtlFreeUTF8String, {onLeave: function (args) {send("RtlFreeUTF8String");}});

var RtlFreeUnicodeString = Module.findExportByName("ntdll.dll", "RtlFreeUnicodeString")
Interceptor.attach(RtlFreeUnicodeString, {onLeave: function (args) {send("RtlFreeUnicodeString");}});

var RtlFreeUserFiberShadowStack = Module.findExportByName("ntdll.dll", "RtlFreeUserFiberShadowStack")
Interceptor.attach(RtlFreeUserFiberShadowStack, {onLeave: function (args) {send("RtlFreeUserFiberShadowStack");}});

var RtlFreeUserStack = Module.findExportByName("ntdll.dll", "RtlFreeUserStack")
Interceptor.attach(RtlFreeUserStack, {onLeave: function (args) {send("RtlFreeUserStack");}});

var RtlGUIDFromString = Module.findExportByName("ntdll.dll", "RtlGUIDFromString")
Interceptor.attach(RtlGUIDFromString, {onLeave: function (args) {send("RtlGUIDFromString");}});

var RtlGenerate8dot3Name = Module.findExportByName("ntdll.dll", "RtlGenerate8dot3Name")
Interceptor.attach(RtlGenerate8dot3Name, {onLeave: function (args) {send("RtlGenerate8dot3Name");}});

var RtlGetAce = Module.findExportByName("ntdll.dll", "RtlGetAce")
Interceptor.attach(RtlGetAce, {onLeave: function (args) {send("RtlGetAce");}});

var RtlGetActiveActivationContext = Module.findExportByName("ntdll.dll", "RtlGetActiveActivationContext")
Interceptor.attach(RtlGetActiveActivationContext, {onLeave: function (args) {send("RtlGetActiveActivationContext");}});

var RtlGetActiveConsoleId = Module.findExportByName("ntdll.dll", "RtlGetActiveConsoleId")
Interceptor.attach(RtlGetActiveConsoleId, {onLeave: function (args) {send("RtlGetActiveConsoleId");}});

var RtlGetAppContainerNamedObjectPath = Module.findExportByName("ntdll.dll", "RtlGetAppContainerNamedObjectPath")
Interceptor.attach(RtlGetAppContainerNamedObjectPath, {onLeave: function (args) {send("RtlGetAppContainerNamedObjectPath");}});

var RtlGetAppContainerParent = Module.findExportByName("ntdll.dll", "RtlGetAppContainerParent")
Interceptor.attach(RtlGetAppContainerParent, {onLeave: function (args) {send("RtlGetAppContainerParent");}});

var RtlGetAppContainerSidType = Module.findExportByName("ntdll.dll", "RtlGetAppContainerSidType")
Interceptor.attach(RtlGetAppContainerSidType, {onLeave: function (args) {send("RtlGetAppContainerSidType");}});

var RtlGetCallersAddress = Module.findExportByName("ntdll.dll", "RtlGetCallersAddress")
Interceptor.attach(RtlGetCallersAddress, {onLeave: function (args) {send("RtlGetCallersAddress");}});

var RtlGetCompressionWorkSpaceSize = Module.findExportByName("ntdll.dll", "RtlGetCompressionWorkSpaceSize")
Interceptor.attach(RtlGetCompressionWorkSpaceSize, {onLeave: function (args) {send("RtlGetCompressionWorkSpaceSize");}});

var RtlGetConsoleSessionForegroundProcessId = Module.findExportByName("ntdll.dll", "RtlGetConsoleSessionForegroundProcessId")
Interceptor.attach(RtlGetConsoleSessionForegroundProcessId, {onLeave: function (args) {send("RtlGetConsoleSessionForegroundProcessId");}});

var RtlGetControlSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlGetControlSecurityDescriptor")
Interceptor.attach(RtlGetControlSecurityDescriptor, {onLeave: function (args) {send("RtlGetControlSecurityDescriptor");}});

var RtlGetCriticalSectionRecursionCount = Module.findExportByName("ntdll.dll", "RtlGetCriticalSectionRecursionCount")
Interceptor.attach(RtlGetCriticalSectionRecursionCount, {onLeave: function (args) {send("RtlGetCriticalSectionRecursionCount");}});

var RtlGetCurrentDirectory_U = Module.findExportByName("ntdll.dll", "RtlGetCurrentDirectory_U")
Interceptor.attach(RtlGetCurrentDirectory_U, {onLeave: function (args) {send("RtlGetCurrentDirectory_U");}});

var RtlGetCurrentPeb = Module.findExportByName("ntdll.dll", "RtlGetCurrentPeb")
Interceptor.attach(RtlGetCurrentPeb, {onLeave: function (args) {send("RtlGetCurrentPeb");}});

var RtlGetCurrentProcessorNumber = Module.findExportByName("ntdll.dll", "RtlGetCurrentProcessorNumber")
Interceptor.attach(RtlGetCurrentProcessorNumber, {onLeave: function (args) {send("RtlGetCurrentProcessorNumber");}});

var RtlGetCurrentProcessorNumberEx = Module.findExportByName("ntdll.dll", "RtlGetCurrentProcessorNumberEx")
Interceptor.attach(RtlGetCurrentProcessorNumberEx, {onLeave: function (args) {send("RtlGetCurrentProcessorNumberEx");}});

var RtlGetCurrentServiceSessionId = Module.findExportByName("ntdll.dll", "RtlGetCurrentServiceSessionId")
Interceptor.attach(RtlGetCurrentServiceSessionId, {onLeave: function (args) {send("RtlGetCurrentServiceSessionId");}});

var RtlGetCurrentTransaction = Module.findExportByName("ntdll.dll", "RtlGetCurrentTransaction")
Interceptor.attach(RtlGetCurrentTransaction, {onLeave: function (args) {send("RtlGetCurrentTransaction");}});

var RtlGetCurrentUmsThread = Module.findExportByName("ntdll.dll", "RtlGetCurrentUmsThread")
Interceptor.attach(RtlGetCurrentUmsThread, {onLeave: function (args) {send("RtlGetCurrentUmsThread");}});

var RtlGetDaclSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlGetDaclSecurityDescriptor")
Interceptor.attach(RtlGetDaclSecurityDescriptor, {onLeave: function (args) {send("RtlGetDaclSecurityDescriptor");}});

var RtlGetDeviceFamilyInfoEnum = Module.findExportByName("ntdll.dll", "RtlGetDeviceFamilyInfoEnum")
Interceptor.attach(RtlGetDeviceFamilyInfoEnum, {onLeave: function (args) {send("RtlGetDeviceFamilyInfoEnum");}});

var RtlGetElementGenericTable = Module.findExportByName("ntdll.dll", "RtlGetElementGenericTable")
Interceptor.attach(RtlGetElementGenericTable, {onLeave: function (args) {send("RtlGetElementGenericTable");}});

var RtlGetElementGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlGetElementGenericTableAvl")
Interceptor.attach(RtlGetElementGenericTableAvl, {onLeave: function (args) {send("RtlGetElementGenericTableAvl");}});

var RtlGetEnabledExtendedFeatures = Module.findExportByName("ntdll.dll", "RtlGetEnabledExtendedFeatures")
Interceptor.attach(RtlGetEnabledExtendedFeatures, {onLeave: function (args) {send("RtlGetEnabledExtendedFeatures");}});

var RtlGetExePath = Module.findExportByName("ntdll.dll", "RtlGetExePath")
Interceptor.attach(RtlGetExePath, {onLeave: function (args) {send("RtlGetExePath");}});

var RtlGetExtendedContextLength = Module.findExportByName("ntdll.dll", "RtlGetExtendedContextLength")
Interceptor.attach(RtlGetExtendedContextLength, {onLeave: function (args) {send("RtlGetExtendedContextLength");}});

var RtlGetExtendedContextLength2 = Module.findExportByName("ntdll.dll", "RtlGetExtendedContextLength2")
Interceptor.attach(RtlGetExtendedContextLength2, {onLeave: function (args) {send("RtlGetExtendedContextLength2");}});

var RtlGetExtendedFeaturesMask = Module.findExportByName("ntdll.dll", "RtlGetExtendedFeaturesMask")
Interceptor.attach(RtlGetExtendedFeaturesMask, {onLeave: function (args) {send("RtlGetExtendedFeaturesMask");}});

var RtlGetFileMUIPath = Module.findExportByName("ntdll.dll", "RtlGetFileMUIPath")
Interceptor.attach(RtlGetFileMUIPath, {onLeave: function (args) {send("RtlGetFileMUIPath");}});

var RtlGetFrame = Module.findExportByName("ntdll.dll", "RtlGetFrame")
Interceptor.attach(RtlGetFrame, {onLeave: function (args) {send("RtlGetFrame");}});

var RtlGetFullPathName_U = Module.findExportByName("ntdll.dll", "RtlGetFullPathName_U")
Interceptor.attach(RtlGetFullPathName_U, {onLeave: function (args) {send("RtlGetFullPathName_U");}});

var RtlGetFullPathName_UEx = Module.findExportByName("ntdll.dll", "RtlGetFullPathName_UEx")
Interceptor.attach(RtlGetFullPathName_UEx, {onLeave: function (args) {send("RtlGetFullPathName_UEx");}});

var RtlGetFullPathName_UstrEx = Module.findExportByName("ntdll.dll", "RtlGetFullPathName_UstrEx")
Interceptor.attach(RtlGetFullPathName_UstrEx, {onLeave: function (args) {send("RtlGetFullPathName_UstrEx");}});

var RtlGetFunctionTableListHead = Module.findExportByName("ntdll.dll", "RtlGetFunctionTableListHead")
Interceptor.attach(RtlGetFunctionTableListHead, {onLeave: function (args) {send("RtlGetFunctionTableListHead");}});

var RtlGetGroupSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlGetGroupSecurityDescriptor")
Interceptor.attach(RtlGetGroupSecurityDescriptor, {onLeave: function (args) {send("RtlGetGroupSecurityDescriptor");}});

var RtlGetImageFileMachines = Module.findExportByName("ntdll.dll", "RtlGetImageFileMachines")
Interceptor.attach(RtlGetImageFileMachines, {onLeave: function (args) {send("RtlGetImageFileMachines");}});

var RtlGetIntegerAtom = Module.findExportByName("ntdll.dll", "RtlGetIntegerAtom")
Interceptor.attach(RtlGetIntegerAtom, {onLeave: function (args) {send("RtlGetIntegerAtom");}});

var RtlGetInterruptTimePrecise = Module.findExportByName("ntdll.dll", "RtlGetInterruptTimePrecise")
Interceptor.attach(RtlGetInterruptTimePrecise, {onLeave: function (args) {send("RtlGetInterruptTimePrecise");}});

var RtlGetLastNtStatus = Module.findExportByName("ntdll.dll", "RtlGetLastNtStatus")
Interceptor.attach(RtlGetLastNtStatus, {onLeave: function (args) {send("RtlGetLastNtStatus");}});

var RtlGetLastWin32Error = Module.findExportByName("ntdll.dll", "RtlGetLastWin32Error")
Interceptor.attach(RtlGetLastWin32Error, {onLeave: function (args) {send("RtlGetLastWin32Error");}});

var RtlGetLengthWithoutLastFullDosOrNtPathElement = Module.findExportByName("ntdll.dll", "RtlGetLengthWithoutLastFullDosOrNtPathElement")
Interceptor.attach(RtlGetLengthWithoutLastFullDosOrNtPathElement, {onLeave: function (args) {send("RtlGetLengthWithoutLastFullDosOrNtPathElement");}});

var RtlGetLengthWithoutTrailingPathSeperators = Module.findExportByName("ntdll.dll", "RtlGetLengthWithoutTrailingPathSeperators")
Interceptor.attach(RtlGetLengthWithoutTrailingPathSeperators, {onLeave: function (args) {send("RtlGetLengthWithoutTrailingPathSeperators");}});

var RtlGetLocaleFileMappingAddress = Module.findExportByName("ntdll.dll", "RtlGetLocaleFileMappingAddress")
Interceptor.attach(RtlGetLocaleFileMappingAddress, {onLeave: function (args) {send("RtlGetLocaleFileMappingAddress");}});

var RtlGetLongestNtPathLength = Module.findExportByName("ntdll.dll", "RtlGetLongestNtPathLength")
Interceptor.attach(RtlGetLongestNtPathLength, {onLeave: function (args) {send("RtlGetLongestNtPathLength");}});

var RtlGetMultiTimePrecise = Module.findExportByName("ntdll.dll", "RtlGetMultiTimePrecise")
Interceptor.attach(RtlGetMultiTimePrecise, {onLeave: function (args) {send("RtlGetMultiTimePrecise");}});

var RtlGetNativeSystemInformation = Module.findExportByName("ntdll.dll", "RtlGetNativeSystemInformation")
Interceptor.attach(RtlGetNativeSystemInformation, {onLeave: function (args) {send("RtlGetNativeSystemInformation");}});

var RtlGetNextEntryHashTable = Module.findExportByName("ntdll.dll", "RtlGetNextEntryHashTable")
Interceptor.attach(RtlGetNextEntryHashTable, {onLeave: function (args) {send("RtlGetNextEntryHashTable");}});

var RtlGetNextUmsListItem = Module.findExportByName("ntdll.dll", "RtlGetNextUmsListItem")
Interceptor.attach(RtlGetNextUmsListItem, {onLeave: function (args) {send("RtlGetNextUmsListItem");}});

var RtlGetNonVolatileToken = Module.findExportByName("ntdll.dll", "RtlGetNonVolatileToken")
Interceptor.attach(RtlGetNonVolatileToken, {onLeave: function (args) {send("RtlGetNonVolatileToken");}});

var RtlGetNtGlobalFlags = Module.findExportByName("ntdll.dll", "RtlGetNtGlobalFlags")
Interceptor.attach(RtlGetNtGlobalFlags, {onLeave: function (args) {send("RtlGetNtGlobalFlags");}});

var RtlGetNtProductType = Module.findExportByName("ntdll.dll", "RtlGetNtProductType")
Interceptor.attach(RtlGetNtProductType, {onLeave: function (args) {send("RtlGetNtProductType");}});

var RtlGetNtSystemRoot = Module.findExportByName("ntdll.dll", "RtlGetNtSystemRoot")
Interceptor.attach(RtlGetNtSystemRoot, {onLeave: function (args) {send("RtlGetNtSystemRoot");}});

var RtlGetNtVersionNumbers = Module.findExportByName("ntdll.dll", "RtlGetNtVersionNumbers")
Interceptor.attach(RtlGetNtVersionNumbers, {onLeave: function (args) {send("RtlGetNtVersionNumbers");}});

var RtlGetOwnerSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlGetOwnerSecurityDescriptor")
Interceptor.attach(RtlGetOwnerSecurityDescriptor, {onLeave: function (args) {send("RtlGetOwnerSecurityDescriptor");}});

var RtlGetParentLocaleName = Module.findExportByName("ntdll.dll", "RtlGetParentLocaleName")
Interceptor.attach(RtlGetParentLocaleName, {onLeave: function (args) {send("RtlGetParentLocaleName");}});

var RtlGetPersistedStateLocation = Module.findExportByName("ntdll.dll", "RtlGetPersistedStateLocation")
Interceptor.attach(RtlGetPersistedStateLocation, {onLeave: function (args) {send("RtlGetPersistedStateLocation");}});

var RtlGetProcessHeaps = Module.findExportByName("ntdll.dll", "RtlGetProcessHeaps")
Interceptor.attach(RtlGetProcessHeaps, {onLeave: function (args) {send("RtlGetProcessHeaps");}});

var RtlGetProcessPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlGetProcessPreferredUILanguages")
Interceptor.attach(RtlGetProcessPreferredUILanguages, {onLeave: function (args) {send("RtlGetProcessPreferredUILanguages");}});

var RtlGetProductInfo = Module.findExportByName("ntdll.dll", "RtlGetProductInfo")
Interceptor.attach(RtlGetProductInfo, {onLeave: function (args) {send("RtlGetProductInfo");}});

var RtlGetReturnAddressHijackTarget = Module.findExportByName("ntdll.dll", "RtlGetReturnAddressHijackTarget")
Interceptor.attach(RtlGetReturnAddressHijackTarget, {onLeave: function (args) {send("RtlGetReturnAddressHijackTarget");}});

var RtlGetSaclSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlGetSaclSecurityDescriptor")
Interceptor.attach(RtlGetSaclSecurityDescriptor, {onLeave: function (args) {send("RtlGetSaclSecurityDescriptor");}});

var RtlGetSearchPath = Module.findExportByName("ntdll.dll", "RtlGetSearchPath")
Interceptor.attach(RtlGetSearchPath, {onLeave: function (args) {send("RtlGetSearchPath");}});

var RtlGetSecurityDescriptorRMControl = Module.findExportByName("ntdll.dll", "RtlGetSecurityDescriptorRMControl")
Interceptor.attach(RtlGetSecurityDescriptorRMControl, {onLeave: function (args) {send("RtlGetSecurityDescriptorRMControl");}});

var RtlGetSessionProperties = Module.findExportByName("ntdll.dll", "RtlGetSessionProperties")
Interceptor.attach(RtlGetSessionProperties, {onLeave: function (args) {send("RtlGetSessionProperties");}});

var RtlGetSetBootStatusData = Module.findExportByName("ntdll.dll", "RtlGetSetBootStatusData")
Interceptor.attach(RtlGetSetBootStatusData, {onLeave: function (args) {send("RtlGetSetBootStatusData");}});

var RtlGetSuiteMask = Module.findExportByName("ntdll.dll", "RtlGetSuiteMask")
Interceptor.attach(RtlGetSuiteMask, {onLeave: function (args) {send("RtlGetSuiteMask");}});

var RtlGetSystemBootStatus = Module.findExportByName("ntdll.dll", "RtlGetSystemBootStatus")
Interceptor.attach(RtlGetSystemBootStatus, {onLeave: function (args) {send("RtlGetSystemBootStatus");}});

var RtlGetSystemBootStatusEx = Module.findExportByName("ntdll.dll", "RtlGetSystemBootStatusEx")
Interceptor.attach(RtlGetSystemBootStatusEx, {onLeave: function (args) {send("RtlGetSystemBootStatusEx");}});

var RtlGetSystemGlobalData = Module.findExportByName("ntdll.dll", "RtlGetSystemGlobalData")
Interceptor.attach(RtlGetSystemGlobalData, {onLeave: function (args) {send("RtlGetSystemGlobalData");}});

var RtlGetSystemPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlGetSystemPreferredUILanguages")
Interceptor.attach(RtlGetSystemPreferredUILanguages, {onLeave: function (args) {send("RtlGetSystemPreferredUILanguages");}});

var RtlGetSystemTimeAndBias = Module.findExportByName("ntdll.dll", "RtlGetSystemTimeAndBias")
Interceptor.attach(RtlGetSystemTimeAndBias, {onLeave: function (args) {send("RtlGetSystemTimeAndBias");}});

var RtlGetSystemTimePrecise = Module.findExportByName("ntdll.dll", "RtlGetSystemTimePrecise")
Interceptor.attach(RtlGetSystemTimePrecise, {onLeave: function (args) {send("RtlGetSystemTimePrecise");}});

var RtlGetThreadErrorMode = Module.findExportByName("ntdll.dll", "RtlGetThreadErrorMode")
Interceptor.attach(RtlGetThreadErrorMode, {onLeave: function (args) {send("RtlGetThreadErrorMode");}});

var RtlGetThreadLangIdByIndex = Module.findExportByName("ntdll.dll", "RtlGetThreadLangIdByIndex")
Interceptor.attach(RtlGetThreadLangIdByIndex, {onLeave: function (args) {send("RtlGetThreadLangIdByIndex");}});

var RtlGetThreadPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlGetThreadPreferredUILanguages")
Interceptor.attach(RtlGetThreadPreferredUILanguages, {onLeave: function (args) {send("RtlGetThreadPreferredUILanguages");}});

var RtlGetThreadWorkOnBehalfTicket = Module.findExportByName("ntdll.dll", "RtlGetThreadWorkOnBehalfTicket")
Interceptor.attach(RtlGetThreadWorkOnBehalfTicket, {onLeave: function (args) {send("RtlGetThreadWorkOnBehalfTicket");}});

var RtlGetTokenNamedObjectPath = Module.findExportByName("ntdll.dll", "RtlGetTokenNamedObjectPath")
Interceptor.attach(RtlGetTokenNamedObjectPath, {onLeave: function (args) {send("RtlGetTokenNamedObjectPath");}});

var RtlGetUILanguageInfo = Module.findExportByName("ntdll.dll", "RtlGetUILanguageInfo")
Interceptor.attach(RtlGetUILanguageInfo, {onLeave: function (args) {send("RtlGetUILanguageInfo");}});

var RtlGetUmsCompletionListEvent = Module.findExportByName("ntdll.dll", "RtlGetUmsCompletionListEvent")
Interceptor.attach(RtlGetUmsCompletionListEvent, {onLeave: function (args) {send("RtlGetUmsCompletionListEvent");}});

var RtlGetUnloadEventTrace = Module.findExportByName("ntdll.dll", "RtlGetUnloadEventTrace")
Interceptor.attach(RtlGetUnloadEventTrace, {onLeave: function (args) {send("RtlGetUnloadEventTrace");}});

var RtlGetUnloadEventTraceEx = Module.findExportByName("ntdll.dll", "RtlGetUnloadEventTraceEx")
Interceptor.attach(RtlGetUnloadEventTraceEx, {onLeave: function (args) {send("RtlGetUnloadEventTraceEx");}});

var RtlGetUserInfoHeap = Module.findExportByName("ntdll.dll", "RtlGetUserInfoHeap")
Interceptor.attach(RtlGetUserInfoHeap, {onLeave: function (args) {send("RtlGetUserInfoHeap");}});

var RtlGetUserPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlGetUserPreferredUILanguages")
Interceptor.attach(RtlGetUserPreferredUILanguages, {onLeave: function (args) {send("RtlGetUserPreferredUILanguages");}});

var RtlGetVersion = Module.findExportByName("ntdll.dll", "RtlGetVersion")
Interceptor.attach(RtlGetVersion, {onLeave: function (args) {send("RtlGetVersion");}});

var RtlGrowFunctionTable = Module.findExportByName("ntdll.dll", "RtlGrowFunctionTable")
Interceptor.attach(RtlGrowFunctionTable, {onLeave: function (args) {send("RtlGrowFunctionTable");}});

var RtlGuardCheckLongJumpTarget = Module.findExportByName("ntdll.dll", "RtlGuardCheckLongJumpTarget")
Interceptor.attach(RtlGuardCheckLongJumpTarget, {onLeave: function (args) {send("RtlGuardCheckLongJumpTarget");}});

var RtlHashUnicodeString = Module.findExportByName("ntdll.dll", "RtlHashUnicodeString")
Interceptor.attach(RtlHashUnicodeString, {onLeave: function (args) {send("RtlHashUnicodeString");}});

var RtlHeapTrkInitialize = Module.findExportByName("ntdll.dll", "RtlHeapTrkInitialize")
Interceptor.attach(RtlHeapTrkInitialize, {onLeave: function (args) {send("RtlHeapTrkInitialize");}});

var RtlIdentifierAuthoritySid = Module.findExportByName("ntdll.dll", "RtlIdentifierAuthoritySid")
Interceptor.attach(RtlIdentifierAuthoritySid, {onLeave: function (args) {send("RtlIdentifierAuthoritySid");}});

var RtlIdnToAscii = Module.findExportByName("ntdll.dll", "RtlIdnToAscii")
Interceptor.attach(RtlIdnToAscii, {onLeave: function (args) {send("RtlIdnToAscii");}});

var RtlIdnToNameprepUnicode = Module.findExportByName("ntdll.dll", "RtlIdnToNameprepUnicode")
Interceptor.attach(RtlIdnToNameprepUnicode, {onLeave: function (args) {send("RtlIdnToNameprepUnicode");}});

var RtlIdnToUnicode = Module.findExportByName("ntdll.dll", "RtlIdnToUnicode")
Interceptor.attach(RtlIdnToUnicode, {onLeave: function (args) {send("RtlIdnToUnicode");}});

var RtlImageDirectoryEntryToData = Module.findExportByName("ntdll.dll", "RtlImageDirectoryEntryToData")
Interceptor.attach(RtlImageDirectoryEntryToData, {onLeave: function (args) {send("RtlImageDirectoryEntryToData");}});

var RtlImageNtHeader = Module.findExportByName("ntdll.dll", "RtlImageNtHeader")
Interceptor.attach(RtlImageNtHeader, {onLeave: function (args) {send("RtlImageNtHeader");}});

var RtlImageNtHeaderEx = Module.findExportByName("ntdll.dll", "RtlImageNtHeaderEx")
Interceptor.attach(RtlImageNtHeaderEx, {onLeave: function (args) {send("RtlImageNtHeaderEx");}});

var RtlImageRvaToSection = Module.findExportByName("ntdll.dll", "RtlImageRvaToSection")
Interceptor.attach(RtlImageRvaToSection, {onLeave: function (args) {send("RtlImageRvaToSection");}});

var RtlImageRvaToVa = Module.findExportByName("ntdll.dll", "RtlImageRvaToVa")
Interceptor.attach(RtlImageRvaToVa, {onLeave: function (args) {send("RtlImageRvaToVa");}});

var RtlImpersonateSelf = Module.findExportByName("ntdll.dll", "RtlImpersonateSelf")
Interceptor.attach(RtlImpersonateSelf, {onLeave: function (args) {send("RtlImpersonateSelf");}});

var RtlImpersonateSelfEx = Module.findExportByName("ntdll.dll", "RtlImpersonateSelfEx")
Interceptor.attach(RtlImpersonateSelfEx, {onLeave: function (args) {send("RtlImpersonateSelfEx");}});

var RtlIncrementCorrelationVector = Module.findExportByName("ntdll.dll", "RtlIncrementCorrelationVector")
Interceptor.attach(RtlIncrementCorrelationVector, {onLeave: function (args) {send("RtlIncrementCorrelationVector");}});

var RtlInitAnsiString = Module.findExportByName("ntdll.dll", "RtlInitAnsiString")
Interceptor.attach(RtlInitAnsiString, {onLeave: function (args) {send("RtlInitAnsiString");}});

var RtlInitAnsiStringEx = Module.findExportByName("ntdll.dll", "RtlInitAnsiStringEx")
Interceptor.attach(RtlInitAnsiStringEx, {onLeave: function (args) {send("RtlInitAnsiStringEx");}});

var RtlInitBarrier = Module.findExportByName("ntdll.dll", "RtlInitBarrier")
Interceptor.attach(RtlInitBarrier, {onLeave: function (args) {send("RtlInitBarrier");}});

var RtlInitCodePageTable = Module.findExportByName("ntdll.dll", "RtlInitCodePageTable")
Interceptor.attach(RtlInitCodePageTable, {onLeave: function (args) {send("RtlInitCodePageTable");}});

var RtlInitEnumerationHashTable = Module.findExportByName("ntdll.dll", "RtlInitEnumerationHashTable")
Interceptor.attach(RtlInitEnumerationHashTable, {onLeave: function (args) {send("RtlInitEnumerationHashTable");}});

var RtlInitMemoryStream = Module.findExportByName("ntdll.dll", "RtlInitMemoryStream")
Interceptor.attach(RtlInitMemoryStream, {onLeave: function (args) {send("RtlInitMemoryStream");}});

var RtlInitNlsTables = Module.findExportByName("ntdll.dll", "RtlInitNlsTables")
Interceptor.attach(RtlInitNlsTables, {onLeave: function (args) {send("RtlInitNlsTables");}});

var RtlInitOutOfProcessMemoryStream = Module.findExportByName("ntdll.dll", "RtlInitOutOfProcessMemoryStream")
Interceptor.attach(RtlInitOutOfProcessMemoryStream, {onLeave: function (args) {send("RtlInitOutOfProcessMemoryStream");}});

var RtlInitString = Module.findExportByName("ntdll.dll", "RtlInitString")
Interceptor.attach(RtlInitString, {onLeave: function (args) {send("RtlInitString");}});

var RtlInitStringEx = Module.findExportByName("ntdll.dll", "RtlInitStringEx")
Interceptor.attach(RtlInitStringEx, {onLeave: function (args) {send("RtlInitStringEx");}});

var RtlInitStrongEnumerationHashTable = Module.findExportByName("ntdll.dll", "RtlInitStrongEnumerationHashTable")
Interceptor.attach(RtlInitStrongEnumerationHashTable, {onLeave: function (args) {send("RtlInitStrongEnumerationHashTable");}});

var RtlInitUTF8String = Module.findExportByName("ntdll.dll", "RtlInitUTF8String")
Interceptor.attach(RtlInitUTF8String, {onLeave: function (args) {send("RtlInitUTF8String");}});

var RtlInitUTF8StringEx = Module.findExportByName("ntdll.dll", "RtlInitUTF8StringEx")
Interceptor.attach(RtlInitUTF8StringEx, {onLeave: function (args) {send("RtlInitUTF8StringEx");}});

var RtlInitUnicodeString = Module.findExportByName("ntdll.dll", "RtlInitUnicodeString")
Interceptor.attach(RtlInitUnicodeString, {onLeave: function (args) {send("RtlInitUnicodeString");}});

var RtlInitUnicodeStringEx = Module.findExportByName("ntdll.dll", "RtlInitUnicodeStringEx")
Interceptor.attach(RtlInitUnicodeStringEx, {onLeave: function (args) {send("RtlInitUnicodeStringEx");}});

var RtlInitWeakEnumerationHashTable = Module.findExportByName("ntdll.dll", "RtlInitWeakEnumerationHashTable")
Interceptor.attach(RtlInitWeakEnumerationHashTable, {onLeave: function (args) {send("RtlInitWeakEnumerationHashTable");}});

var RtlInitializeAtomPackage = Module.findExportByName("ntdll.dll", "RtlInitializeAtomPackage")
Interceptor.attach(RtlInitializeAtomPackage, {onLeave: function (args) {send("RtlInitializeAtomPackage");}});

var RtlInitializeBitMap = Module.findExportByName("ntdll.dll", "RtlInitializeBitMap")
Interceptor.attach(RtlInitializeBitMap, {onLeave: function (args) {send("RtlInitializeBitMap");}});

var RtlInitializeBitMapEx = Module.findExportByName("ntdll.dll", "RtlInitializeBitMapEx")
Interceptor.attach(RtlInitializeBitMapEx, {onLeave: function (args) {send("RtlInitializeBitMapEx");}});

var RtlInitializeConditionVariable = Module.findExportByName("ntdll.dll", "RtlInitializeConditionVariable")
Interceptor.attach(RtlInitializeConditionVariable, {onLeave: function (args) {send("RtlInitializeConditionVariable");}});

var RtlInitializeContext = Module.findExportByName("ntdll.dll", "RtlInitializeContext")
Interceptor.attach(RtlInitializeContext, {onLeave: function (args) {send("RtlInitializeContext");}});

var RtlInitializeCorrelationVector = Module.findExportByName("ntdll.dll", "RtlInitializeCorrelationVector")
Interceptor.attach(RtlInitializeCorrelationVector, {onLeave: function (args) {send("RtlInitializeCorrelationVector");}});

var RtlInitializeCriticalSection = Module.findExportByName("ntdll.dll", "RtlInitializeCriticalSection")
Interceptor.attach(RtlInitializeCriticalSection, {onLeave: function (args) {send("RtlInitializeCriticalSection");}});

var RtlInitializeCriticalSectionAndSpinCount = Module.findExportByName("ntdll.dll", "RtlInitializeCriticalSectionAndSpinCount")
Interceptor.attach(RtlInitializeCriticalSectionAndSpinCount, {onLeave: function (args) {send("RtlInitializeCriticalSectionAndSpinCount");}});

var RtlInitializeCriticalSectionEx = Module.findExportByName("ntdll.dll", "RtlInitializeCriticalSectionEx")
Interceptor.attach(RtlInitializeCriticalSectionEx, {onLeave: function (args) {send("RtlInitializeCriticalSectionEx");}});

var RtlInitializeExtendedContext = Module.findExportByName("ntdll.dll", "RtlInitializeExtendedContext")
Interceptor.attach(RtlInitializeExtendedContext, {onLeave: function (args) {send("RtlInitializeExtendedContext");}});

var RtlInitializeExtendedContext2 = Module.findExportByName("ntdll.dll", "RtlInitializeExtendedContext2")
Interceptor.attach(RtlInitializeExtendedContext2, {onLeave: function (args) {send("RtlInitializeExtendedContext2");}});

var RtlInitializeGenericTable = Module.findExportByName("ntdll.dll", "RtlInitializeGenericTable")
Interceptor.attach(RtlInitializeGenericTable, {onLeave: function (args) {send("RtlInitializeGenericTable");}});

var RtlInitializeGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlInitializeGenericTableAvl")
Interceptor.attach(RtlInitializeGenericTableAvl, {onLeave: function (args) {send("RtlInitializeGenericTableAvl");}});

var RtlInitializeHandleTable = Module.findExportByName("ntdll.dll", "RtlInitializeHandleTable")
Interceptor.attach(RtlInitializeHandleTable, {onLeave: function (args) {send("RtlInitializeHandleTable");}});

var RtlInitializeNtUserPfn = Module.findExportByName("ntdll.dll", "RtlInitializeNtUserPfn")
Interceptor.attach(RtlInitializeNtUserPfn, {onLeave: function (args) {send("RtlInitializeNtUserPfn");}});

var RtlInitializeRXact = Module.findExportByName("ntdll.dll", "RtlInitializeRXact")
Interceptor.attach(RtlInitializeRXact, {onLeave: function (args) {send("RtlInitializeRXact");}});

var RtlInitializeResource = Module.findExportByName("ntdll.dll", "RtlInitializeResource")
Interceptor.attach(RtlInitializeResource, {onLeave: function (args) {send("RtlInitializeResource");}});

var RtlInitializeSListHead = Module.findExportByName("ntdll.dll", "RtlInitializeSListHead")
Interceptor.attach(RtlInitializeSListHead, {onLeave: function (args) {send("RtlInitializeSListHead");}});

var RtlInitializeSRWLock = Module.findExportByName("ntdll.dll", "RtlInitializeSRWLock")
Interceptor.attach(RtlInitializeSRWLock, {onLeave: function (args) {send("RtlInitializeSRWLock");}});

var RtlInitializeSid = Module.findExportByName("ntdll.dll", "RtlInitializeSid")
Interceptor.attach(RtlInitializeSid, {onLeave: function (args) {send("RtlInitializeSid");}});

var RtlInitializeSidEx = Module.findExportByName("ntdll.dll", "RtlInitializeSidEx")
Interceptor.attach(RtlInitializeSidEx, {onLeave: function (args) {send("RtlInitializeSidEx");}});

var RtlInsertElementGenericTable = Module.findExportByName("ntdll.dll", "RtlInsertElementGenericTable")
Interceptor.attach(RtlInsertElementGenericTable, {onLeave: function (args) {send("RtlInsertElementGenericTable");}});

var RtlInsertElementGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlInsertElementGenericTableAvl")
Interceptor.attach(RtlInsertElementGenericTableAvl, {onLeave: function (args) {send("RtlInsertElementGenericTableAvl");}});

var RtlInsertElementGenericTableFull = Module.findExportByName("ntdll.dll", "RtlInsertElementGenericTableFull")
Interceptor.attach(RtlInsertElementGenericTableFull, {onLeave: function (args) {send("RtlInsertElementGenericTableFull");}});

var RtlInsertElementGenericTableFullAvl = Module.findExportByName("ntdll.dll", "RtlInsertElementGenericTableFullAvl")
Interceptor.attach(RtlInsertElementGenericTableFullAvl, {onLeave: function (args) {send("RtlInsertElementGenericTableFullAvl");}});

var RtlInsertEntryHashTable = Module.findExportByName("ntdll.dll", "RtlInsertEntryHashTable")
Interceptor.attach(RtlInsertEntryHashTable, {onLeave: function (args) {send("RtlInsertEntryHashTable");}});

var RtlInstallFunctionTableCallback = Module.findExportByName("ntdll.dll", "RtlInstallFunctionTableCallback")
Interceptor.attach(RtlInstallFunctionTableCallback, {onLeave: function (args) {send("RtlInstallFunctionTableCallback");}});

var RtlInt64ToUnicodeString = Module.findExportByName("ntdll.dll", "RtlInt64ToUnicodeString")
Interceptor.attach(RtlInt64ToUnicodeString, {onLeave: function (args) {send("RtlInt64ToUnicodeString");}});

var RtlIntegerToChar = Module.findExportByName("ntdll.dll", "RtlIntegerToChar")
Interceptor.attach(RtlIntegerToChar, {onLeave: function (args) {send("RtlIntegerToChar");}});

var RtlIntegerToUnicodeString = Module.findExportByName("ntdll.dll", "RtlIntegerToUnicodeString")
Interceptor.attach(RtlIntegerToUnicodeString, {onLeave: function (args) {send("RtlIntegerToUnicodeString");}});

var RtlInterlockedClearBitRun = Module.findExportByName("ntdll.dll", "RtlInterlockedClearBitRun")
Interceptor.attach(RtlInterlockedClearBitRun, {onLeave: function (args) {send("RtlInterlockedClearBitRun");}});

var RtlInterlockedClearBitRunEx = Module.findExportByName("ntdll.dll", "RtlInterlockedClearBitRunEx")
Interceptor.attach(RtlInterlockedClearBitRunEx, {onLeave: function (args) {send("RtlInterlockedClearBitRunEx");}});

var RtlInterlockedFlushSList = Module.findExportByName("ntdll.dll", "RtlInterlockedFlushSList")
Interceptor.attach(RtlInterlockedFlushSList, {onLeave: function (args) {send("RtlInterlockedFlushSList");}});

var RtlInterlockedPopEntrySList = Module.findExportByName("ntdll.dll", "RtlInterlockedPopEntrySList")
Interceptor.attach(RtlInterlockedPopEntrySList, {onLeave: function (args) {send("RtlInterlockedPopEntrySList");}});

var RtlInterlockedPushEntrySList = Module.findExportByName("ntdll.dll", "RtlInterlockedPushEntrySList")
Interceptor.attach(RtlInterlockedPushEntrySList, {onLeave: function (args) {send("RtlInterlockedPushEntrySList");}});

var RtlInterlockedPushListSList = Module.findExportByName("ntdll.dll", "RtlInterlockedPushListSList")
Interceptor.attach(RtlInterlockedPushListSList, {onLeave: function (args) {send("RtlInterlockedPushListSList");}});

var RtlInterlockedPushListSListEx = Module.findExportByName("ntdll.dll", "RtlInterlockedPushListSListEx")
Interceptor.attach(RtlInterlockedPushListSListEx, {onLeave: function (args) {send("RtlInterlockedPushListSListEx");}});

var RtlInterlockedSetBitRun = Module.findExportByName("ntdll.dll", "RtlInterlockedSetBitRun")
Interceptor.attach(RtlInterlockedSetBitRun, {onLeave: function (args) {send("RtlInterlockedSetBitRun");}});

var RtlIoDecodeMemIoResource = Module.findExportByName("ntdll.dll", "RtlIoDecodeMemIoResource")
Interceptor.attach(RtlIoDecodeMemIoResource, {onLeave: function (args) {send("RtlIoDecodeMemIoResource");}});

var RtlIoEncodeMemIoResource = Module.findExportByName("ntdll.dll", "RtlIoEncodeMemIoResource")
Interceptor.attach(RtlIoEncodeMemIoResource, {onLeave: function (args) {send("RtlIoEncodeMemIoResource");}});

var RtlIpv4AddressToStringA = Module.findExportByName("ntdll.dll", "RtlIpv4AddressToStringA")
Interceptor.attach(RtlIpv4AddressToStringA, {onLeave: function (args) {send("RtlIpv4AddressToStringA");}});

var RtlIpv4AddressToStringExA = Module.findExportByName("ntdll.dll", "RtlIpv4AddressToStringExA")
Interceptor.attach(RtlIpv4AddressToStringExA, {onLeave: function (args) {send("RtlIpv4AddressToStringExA");}});

var RtlIpv4AddressToStringExW = Module.findExportByName("ntdll.dll", "RtlIpv4AddressToStringExW")
Interceptor.attach(RtlIpv4AddressToStringExW, {onLeave: function (args) {send("RtlIpv4AddressToStringExW");}});

var RtlIpv4AddressToStringW = Module.findExportByName("ntdll.dll", "RtlIpv4AddressToStringW")
Interceptor.attach(RtlIpv4AddressToStringW, {onLeave: function (args) {send("RtlIpv4AddressToStringW");}});

var RtlIpv4StringToAddressA = Module.findExportByName("ntdll.dll", "RtlIpv4StringToAddressA")
Interceptor.attach(RtlIpv4StringToAddressA, {onLeave: function (args) {send("RtlIpv4StringToAddressA");}});

var RtlIpv4StringToAddressExA = Module.findExportByName("ntdll.dll", "RtlIpv4StringToAddressExA")
Interceptor.attach(RtlIpv4StringToAddressExA, {onLeave: function (args) {send("RtlIpv4StringToAddressExA");}});

var RtlIpv4StringToAddressExW = Module.findExportByName("ntdll.dll", "RtlIpv4StringToAddressExW")
Interceptor.attach(RtlIpv4StringToAddressExW, {onLeave: function (args) {send("RtlIpv4StringToAddressExW");}});

var RtlIpv4StringToAddressW = Module.findExportByName("ntdll.dll", "RtlIpv4StringToAddressW")
Interceptor.attach(RtlIpv4StringToAddressW, {onLeave: function (args) {send("RtlIpv4StringToAddressW");}});

var RtlIpv6AddressToStringA = Module.findExportByName("ntdll.dll", "RtlIpv6AddressToStringA")
Interceptor.attach(RtlIpv6AddressToStringA, {onLeave: function (args) {send("RtlIpv6AddressToStringA");}});

var RtlIpv6AddressToStringExA = Module.findExportByName("ntdll.dll", "RtlIpv6AddressToStringExA")
Interceptor.attach(RtlIpv6AddressToStringExA, {onLeave: function (args) {send("RtlIpv6AddressToStringExA");}});

var RtlIpv6AddressToStringExW = Module.findExportByName("ntdll.dll", "RtlIpv6AddressToStringExW")
Interceptor.attach(RtlIpv6AddressToStringExW, {onLeave: function (args) {send("RtlIpv6AddressToStringExW");}});

var RtlIpv6AddressToStringW = Module.findExportByName("ntdll.dll", "RtlIpv6AddressToStringW")
Interceptor.attach(RtlIpv6AddressToStringW, {onLeave: function (args) {send("RtlIpv6AddressToStringW");}});

var RtlIpv6StringToAddressA = Module.findExportByName("ntdll.dll", "RtlIpv6StringToAddressA")
Interceptor.attach(RtlIpv6StringToAddressA, {onLeave: function (args) {send("RtlIpv6StringToAddressA");}});

var RtlIpv6StringToAddressExA = Module.findExportByName("ntdll.dll", "RtlIpv6StringToAddressExA")
Interceptor.attach(RtlIpv6StringToAddressExA, {onLeave: function (args) {send("RtlIpv6StringToAddressExA");}});

var RtlIpv6StringToAddressExW = Module.findExportByName("ntdll.dll", "RtlIpv6StringToAddressExW")
Interceptor.attach(RtlIpv6StringToAddressExW, {onLeave: function (args) {send("RtlIpv6StringToAddressExW");}});

var RtlIpv6StringToAddressW = Module.findExportByName("ntdll.dll", "RtlIpv6StringToAddressW")
Interceptor.attach(RtlIpv6StringToAddressW, {onLeave: function (args) {send("RtlIpv6StringToAddressW");}});

var RtlIsActivationContextActive = Module.findExportByName("ntdll.dll", "RtlIsActivationContextActive")
Interceptor.attach(RtlIsActivationContextActive, {onLeave: function (args) {send("RtlIsActivationContextActive");}});

var RtlIsApiSetImplemented = Module.findExportByName("ntdll.dll", "RtlIsApiSetImplemented")
Interceptor.attach(RtlIsApiSetImplemented, {onLeave: function (args) {send("RtlIsApiSetImplemented");}});

var RtlIsCapabilitySid = Module.findExportByName("ntdll.dll", "RtlIsCapabilitySid")
Interceptor.attach(RtlIsCapabilitySid, {onLeave: function (args) {send("RtlIsCapabilitySid");}});

var RtlIsCloudFilesPlaceholder = Module.findExportByName("ntdll.dll", "RtlIsCloudFilesPlaceholder")
Interceptor.attach(RtlIsCloudFilesPlaceholder, {onLeave: function (args) {send("RtlIsCloudFilesPlaceholder");}});

var RtlIsCriticalSectionLocked = Module.findExportByName("ntdll.dll", "RtlIsCriticalSectionLocked")
Interceptor.attach(RtlIsCriticalSectionLocked, {onLeave: function (args) {send("RtlIsCriticalSectionLocked");}});

var RtlIsCriticalSectionLockedByThread = Module.findExportByName("ntdll.dll", "RtlIsCriticalSectionLockedByThread")
Interceptor.attach(RtlIsCriticalSectionLockedByThread, {onLeave: function (args) {send("RtlIsCriticalSectionLockedByThread");}});

var RtlIsCurrentProcess = Module.findExportByName("ntdll.dll", "RtlIsCurrentProcess")
Interceptor.attach(RtlIsCurrentProcess, {onLeave: function (args) {send("RtlIsCurrentProcess");}});

var RtlIsCurrentThread = Module.findExportByName("ntdll.dll", "RtlIsCurrentThread")
Interceptor.attach(RtlIsCurrentThread, {onLeave: function (args) {send("RtlIsCurrentThread");}});

var RtlIsCurrentThreadAttachExempt = Module.findExportByName("ntdll.dll", "RtlIsCurrentThreadAttachExempt")
Interceptor.attach(RtlIsCurrentThreadAttachExempt, {onLeave: function (args) {send("RtlIsCurrentThreadAttachExempt");}});

var RtlIsDosDeviceName_U = Module.findExportByName("ntdll.dll", "RtlIsDosDeviceName_U")
Interceptor.attach(RtlIsDosDeviceName_U, {onLeave: function (args) {send("RtlIsDosDeviceName_U");}});

var RtlIsEcCode = Module.findExportByName("ntdll.dll", "RtlIsEcCode")
Interceptor.attach(RtlIsEcCode, {onLeave: function (args) {send("RtlIsEcCode");}});

var RtlIsElevatedRid = Module.findExportByName("ntdll.dll", "RtlIsElevatedRid")
Interceptor.attach(RtlIsElevatedRid, {onLeave: function (args) {send("RtlIsElevatedRid");}});

var RtlIsEnclaveFeaturePresent = Module.findExportByName("ntdll.dll", "RtlIsEnclaveFeaturePresent")
Interceptor.attach(RtlIsEnclaveFeaturePresent, {onLeave: function (args) {send("RtlIsEnclaveFeaturePresent");}});

var RtlIsFeatureEnabledForEnterprise = Module.findExportByName("ntdll.dll", "RtlIsFeatureEnabledForEnterprise")
Interceptor.attach(RtlIsFeatureEnabledForEnterprise, {onLeave: function (args) {send("RtlIsFeatureEnabledForEnterprise");}});

var RtlIsGenericTableEmpty = Module.findExportByName("ntdll.dll", "RtlIsGenericTableEmpty")
Interceptor.attach(RtlIsGenericTableEmpty, {onLeave: function (args) {send("RtlIsGenericTableEmpty");}});

var RtlIsGenericTableEmptyAvl = Module.findExportByName("ntdll.dll", "RtlIsGenericTableEmptyAvl")
Interceptor.attach(RtlIsGenericTableEmptyAvl, {onLeave: function (args) {send("RtlIsGenericTableEmptyAvl");}});

var RtlIsMultiSessionSku = Module.findExportByName("ntdll.dll", "RtlIsMultiSessionSku")
Interceptor.attach(RtlIsMultiSessionSku, {onLeave: function (args) {send("RtlIsMultiSessionSku");}});

var RtlIsMultiUsersInSessionSku = Module.findExportByName("ntdll.dll", "RtlIsMultiUsersInSessionSku")
Interceptor.attach(RtlIsMultiUsersInSessionSku, {onLeave: function (args) {send("RtlIsMultiUsersInSessionSku");}});

var RtlIsNameInExpression = Module.findExportByName("ntdll.dll", "RtlIsNameInExpression")
Interceptor.attach(RtlIsNameInExpression, {onLeave: function (args) {send("RtlIsNameInExpression");}});

var RtlIsNameInUnUpcasedExpression = Module.findExportByName("ntdll.dll", "RtlIsNameInUnUpcasedExpression")
Interceptor.attach(RtlIsNameInUnUpcasedExpression, {onLeave: function (args) {send("RtlIsNameInUnUpcasedExpression");}});

var RtlIsNameLegalDOS8Dot3 = Module.findExportByName("ntdll.dll", "RtlIsNameLegalDOS8Dot3")
Interceptor.attach(RtlIsNameLegalDOS8Dot3, {onLeave: function (args) {send("RtlIsNameLegalDOS8Dot3");}});

var RtlIsNonEmptyDirectoryReparsePointAllowed = Module.findExportByName("ntdll.dll", "RtlIsNonEmptyDirectoryReparsePointAllowed")
Interceptor.attach(RtlIsNonEmptyDirectoryReparsePointAllowed, {onLeave: function (args) {send("RtlIsNonEmptyDirectoryReparsePointAllowed");}});

var RtlIsNormalizedString = Module.findExportByName("ntdll.dll", "RtlIsNormalizedString")
Interceptor.attach(RtlIsNormalizedString, {onLeave: function (args) {send("RtlIsNormalizedString");}});

var RtlIsPackageSid = Module.findExportByName("ntdll.dll", "RtlIsPackageSid")
Interceptor.attach(RtlIsPackageSid, {onLeave: function (args) {send("RtlIsPackageSid");}});

var RtlIsParentOfChildAppContainer = Module.findExportByName("ntdll.dll", "RtlIsParentOfChildAppContainer")
Interceptor.attach(RtlIsParentOfChildAppContainer, {onLeave: function (args) {send("RtlIsParentOfChildAppContainer");}});

var RtlIsPartialPlaceholder = Module.findExportByName("ntdll.dll", "RtlIsPartialPlaceholder")
Interceptor.attach(RtlIsPartialPlaceholder, {onLeave: function (args) {send("RtlIsPartialPlaceholder");}});

var RtlIsPartialPlaceholderFileHandle = Module.findExportByName("ntdll.dll", "RtlIsPartialPlaceholderFileHandle")
Interceptor.attach(RtlIsPartialPlaceholderFileHandle, {onLeave: function (args) {send("RtlIsPartialPlaceholderFileHandle");}});

var RtlIsPartialPlaceholderFileInfo = Module.findExportByName("ntdll.dll", "RtlIsPartialPlaceholderFileInfo")
Interceptor.attach(RtlIsPartialPlaceholderFileInfo, {onLeave: function (args) {send("RtlIsPartialPlaceholderFileInfo");}});

var RtlIsProcessorFeaturePresent = Module.findExportByName("ntdll.dll", "RtlIsProcessorFeaturePresent")
Interceptor.attach(RtlIsProcessorFeaturePresent, {onLeave: function (args) {send("RtlIsProcessorFeaturePresent");}});

var RtlIsStateSeparationEnabled = Module.findExportByName("ntdll.dll", "RtlIsStateSeparationEnabled")
Interceptor.attach(RtlIsStateSeparationEnabled, {onLeave: function (args) {send("RtlIsStateSeparationEnabled");}});

var RtlIsTextUnicode = Module.findExportByName("ntdll.dll", "RtlIsTextUnicode")
Interceptor.attach(RtlIsTextUnicode, {onLeave: function (args) {send("RtlIsTextUnicode");}});

var RtlIsThreadWithinLoaderCallout = Module.findExportByName("ntdll.dll", "RtlIsThreadWithinLoaderCallout")
Interceptor.attach(RtlIsThreadWithinLoaderCallout, {onLeave: function (args) {send("RtlIsThreadWithinLoaderCallout");}});

var RtlIsUntrustedObject = Module.findExportByName("ntdll.dll", "RtlIsUntrustedObject")
Interceptor.attach(RtlIsUntrustedObject, {onLeave: function (args) {send("RtlIsUntrustedObject");}});

var RtlIsValidHandle = Module.findExportByName("ntdll.dll", "RtlIsValidHandle")
Interceptor.attach(RtlIsValidHandle, {onLeave: function (args) {send("RtlIsValidHandle");}});

var RtlIsValidIndexHandle = Module.findExportByName("ntdll.dll", "RtlIsValidIndexHandle")
Interceptor.attach(RtlIsValidIndexHandle, {onLeave: function (args) {send("RtlIsValidIndexHandle");}});

var RtlIsValidLocaleName = Module.findExportByName("ntdll.dll", "RtlIsValidLocaleName")
Interceptor.attach(RtlIsValidLocaleName, {onLeave: function (args) {send("RtlIsValidLocaleName");}});

var RtlIsValidProcessTrustLabelSid = Module.findExportByName("ntdll.dll", "RtlIsValidProcessTrustLabelSid")
Interceptor.attach(RtlIsValidProcessTrustLabelSid, {onLeave: function (args) {send("RtlIsValidProcessTrustLabelSid");}});

var RtlIsZeroMemory = Module.findExportByName("ntdll.dll", "RtlIsZeroMemory")
Interceptor.attach(RtlIsZeroMemory, {onLeave: function (args) {send("RtlIsZeroMemory");}});

var RtlKnownExceptionFilter = Module.findExportByName("ntdll.dll", "RtlKnownExceptionFilter")
Interceptor.attach(RtlKnownExceptionFilter, {onLeave: function (args) {send("RtlKnownExceptionFilter");}});

var RtlLCIDToCultureName = Module.findExportByName("ntdll.dll", "RtlLCIDToCultureName")
Interceptor.attach(RtlLCIDToCultureName, {onLeave: function (args) {send("RtlLCIDToCultureName");}});

var RtlLargeIntegerToChar = Module.findExportByName("ntdll.dll", "RtlLargeIntegerToChar")
Interceptor.attach(RtlLargeIntegerToChar, {onLeave: function (args) {send("RtlLargeIntegerToChar");}});

var RtlLcidToLocaleName = Module.findExportByName("ntdll.dll", "RtlLcidToLocaleName")
Interceptor.attach(RtlLcidToLocaleName, {onLeave: function (args) {send("RtlLcidToLocaleName");}});

var RtlLeaveCriticalSection = Module.findExportByName("ntdll.dll", "RtlLeaveCriticalSection")
Interceptor.attach(RtlLeaveCriticalSection, {onLeave: function (args) {send("RtlLeaveCriticalSection");}});

var RtlLengthCurrentClearRunBackwardEx = Module.findExportByName("ntdll.dll", "RtlLengthCurrentClearRunBackwardEx")
Interceptor.attach(RtlLengthCurrentClearRunBackwardEx, {onLeave: function (args) {send("RtlLengthCurrentClearRunBackwardEx");}});

var RtlLengthCurrentClearRunForwardEx = Module.findExportByName("ntdll.dll", "RtlLengthCurrentClearRunForwardEx")
Interceptor.attach(RtlLengthCurrentClearRunForwardEx, {onLeave: function (args) {send("RtlLengthCurrentClearRunForwardEx");}});

var RtlLengthRequiredSid = Module.findExportByName("ntdll.dll", "RtlLengthRequiredSid")
Interceptor.attach(RtlLengthRequiredSid, {onLeave: function (args) {send("RtlLengthRequiredSid");}});

var RtlLengthSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlLengthSecurityDescriptor")
Interceptor.attach(RtlLengthSecurityDescriptor, {onLeave: function (args) {send("RtlLengthSecurityDescriptor");}});

var RtlLengthSid = Module.findExportByName("ntdll.dll", "RtlLengthSid")
Interceptor.attach(RtlLengthSid, {onLeave: function (args) {send("RtlLengthSid");}});

var RtlLengthSidAsUnicodeString = Module.findExportByName("ntdll.dll", "RtlLengthSidAsUnicodeString")
Interceptor.attach(RtlLengthSidAsUnicodeString, {onLeave: function (args) {send("RtlLengthSidAsUnicodeString");}});

var RtlLoadString = Module.findExportByName("ntdll.dll", "RtlLoadString")
Interceptor.attach(RtlLoadString, {onLeave: function (args) {send("RtlLoadString");}});

var RtlLocalTimeToSystemTime = Module.findExportByName("ntdll.dll", "RtlLocalTimeToSystemTime")
Interceptor.attach(RtlLocalTimeToSystemTime, {onLeave: function (args) {send("RtlLocalTimeToSystemTime");}});

var RtlLocaleNameToLcid = Module.findExportByName("ntdll.dll", "RtlLocaleNameToLcid")
Interceptor.attach(RtlLocaleNameToLcid, {onLeave: function (args) {send("RtlLocaleNameToLcid");}});

var RtlLocateExtendedFeature = Module.findExportByName("ntdll.dll", "RtlLocateExtendedFeature")
Interceptor.attach(RtlLocateExtendedFeature, {onLeave: function (args) {send("RtlLocateExtendedFeature");}});

var RtlLocateExtendedFeature2 = Module.findExportByName("ntdll.dll", "RtlLocateExtendedFeature2")
Interceptor.attach(RtlLocateExtendedFeature2, {onLeave: function (args) {send("RtlLocateExtendedFeature2");}});

var RtlLocateLegacyContext = Module.findExportByName("ntdll.dll", "RtlLocateLegacyContext")
Interceptor.attach(RtlLocateLegacyContext, {onLeave: function (args) {send("RtlLocateLegacyContext");}});

var RtlLockBootStatusData = Module.findExportByName("ntdll.dll", "RtlLockBootStatusData")
Interceptor.attach(RtlLockBootStatusData, {onLeave: function (args) {send("RtlLockBootStatusData");}});

var RtlLockCurrentThread = Module.findExportByName("ntdll.dll", "RtlLockCurrentThread")
Interceptor.attach(RtlLockCurrentThread, {onLeave: function (args) {send("RtlLockCurrentThread");}});

var RtlLockHeap = Module.findExportByName("ntdll.dll", "RtlLockHeap")
Interceptor.attach(RtlLockHeap, {onLeave: function (args) {send("RtlLockHeap");}});

var RtlLockMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlLockMemoryBlockLookaside")
Interceptor.attach(RtlLockMemoryBlockLookaside, {onLeave: function (args) {send("RtlLockMemoryBlockLookaside");}});

var RtlLockMemoryStreamRegion = Module.findExportByName("ntdll.dll", "RtlLockMemoryStreamRegion")
Interceptor.attach(RtlLockMemoryStreamRegion, {onLeave: function (args) {send("RtlLockMemoryStreamRegion");}});

var RtlLockMemoryZone = Module.findExportByName("ntdll.dll", "RtlLockMemoryZone")
Interceptor.attach(RtlLockMemoryZone, {onLeave: function (args) {send("RtlLockMemoryZone");}});

var RtlLockModuleSection = Module.findExportByName("ntdll.dll", "RtlLockModuleSection")
Interceptor.attach(RtlLockModuleSection, {onLeave: function (args) {send("RtlLockModuleSection");}});

var RtlLogStackBackTrace = Module.findExportByName("ntdll.dll", "RtlLogStackBackTrace")
Interceptor.attach(RtlLogStackBackTrace, {onLeave: function (args) {send("RtlLogStackBackTrace");}});

var RtlLookupAtomInAtomTable = Module.findExportByName("ntdll.dll", "RtlLookupAtomInAtomTable")
Interceptor.attach(RtlLookupAtomInAtomTable, {onLeave: function (args) {send("RtlLookupAtomInAtomTable");}});

var RtlLookupElementGenericTable = Module.findExportByName("ntdll.dll", "RtlLookupElementGenericTable")
Interceptor.attach(RtlLookupElementGenericTable, {onLeave: function (args) {send("RtlLookupElementGenericTable");}});

var RtlLookupElementGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlLookupElementGenericTableAvl")
Interceptor.attach(RtlLookupElementGenericTableAvl, {onLeave: function (args) {send("RtlLookupElementGenericTableAvl");}});

var RtlLookupElementGenericTableFull = Module.findExportByName("ntdll.dll", "RtlLookupElementGenericTableFull")
Interceptor.attach(RtlLookupElementGenericTableFull, {onLeave: function (args) {send("RtlLookupElementGenericTableFull");}});

var RtlLookupElementGenericTableFullAvl = Module.findExportByName("ntdll.dll", "RtlLookupElementGenericTableFullAvl")
Interceptor.attach(RtlLookupElementGenericTableFullAvl, {onLeave: function (args) {send("RtlLookupElementGenericTableFullAvl");}});

var RtlLookupEntryHashTable = Module.findExportByName("ntdll.dll", "RtlLookupEntryHashTable")
Interceptor.attach(RtlLookupEntryHashTable, {onLeave: function (args) {send("RtlLookupEntryHashTable");}});

var RtlLookupFirstMatchingElementGenericTableAvl = Module.findExportByName("ntdll.dll", "RtlLookupFirstMatchingElementGenericTableAvl")
Interceptor.attach(RtlLookupFirstMatchingElementGenericTableAvl, {onLeave: function (args) {send("RtlLookupFirstMatchingElementGenericTableAvl");}});

var RtlLookupFunctionEntry = Module.findExportByName("ntdll.dll", "RtlLookupFunctionEntry")
Interceptor.attach(RtlLookupFunctionEntry, {onLeave: function (args) {send("RtlLookupFunctionEntry");}});

var RtlLookupFunctionTable = Module.findExportByName("ntdll.dll", "RtlLookupFunctionTable")
Interceptor.attach(RtlLookupFunctionTable, {onLeave: function (args) {send("RtlLookupFunctionTable");}});

var RtlMakeSelfRelativeSD = Module.findExportByName("ntdll.dll", "RtlMakeSelfRelativeSD")
Interceptor.attach(RtlMakeSelfRelativeSD, {onLeave: function (args) {send("RtlMakeSelfRelativeSD");}});

var RtlMapGenericMask = Module.findExportByName("ntdll.dll", "RtlMapGenericMask")
Interceptor.attach(RtlMapGenericMask, {onLeave: function (args) {send("RtlMapGenericMask");}});

var RtlMapSecurityErrorToNtStatus = Module.findExportByName("ntdll.dll", "RtlMapSecurityErrorToNtStatus")
Interceptor.attach(RtlMapSecurityErrorToNtStatus, {onLeave: function (args) {send("RtlMapSecurityErrorToNtStatus");}});

var RtlMoveMemory = Module.findExportByName("ntdll.dll", "RtlMoveMemory")
Interceptor.attach(RtlMoveMemory, {onLeave: function (args) {send("RtlMoveMemory");}});

var RtlMultiAppendUnicodeStringBuffer = Module.findExportByName("ntdll.dll", "RtlMultiAppendUnicodeStringBuffer")
Interceptor.attach(RtlMultiAppendUnicodeStringBuffer, {onLeave: function (args) {send("RtlMultiAppendUnicodeStringBuffer");}});

var RtlMultiByteToUnicodeN = Module.findExportByName("ntdll.dll", "RtlMultiByteToUnicodeN")
Interceptor.attach(RtlMultiByteToUnicodeN, {onLeave: function (args) {send("RtlMultiByteToUnicodeN");}});

var RtlMultiByteToUnicodeSize = Module.findExportByName("ntdll.dll", "RtlMultiByteToUnicodeSize")
Interceptor.attach(RtlMultiByteToUnicodeSize, {onLeave: function (args) {send("RtlMultiByteToUnicodeSize");}});

var RtlMultipleAllocateHeap = Module.findExportByName("ntdll.dll", "RtlMultipleAllocateHeap")
Interceptor.attach(RtlMultipleAllocateHeap, {onLeave: function (args) {send("RtlMultipleAllocateHeap");}});

var RtlMultipleFreeHeap = Module.findExportByName("ntdll.dll", "RtlMultipleFreeHeap")
Interceptor.attach(RtlMultipleFreeHeap, {onLeave: function (args) {send("RtlMultipleFreeHeap");}});

var RtlNewInstanceSecurityObject = Module.findExportByName("ntdll.dll", "RtlNewInstanceSecurityObject")
Interceptor.attach(RtlNewInstanceSecurityObject, {onLeave: function (args) {send("RtlNewInstanceSecurityObject");}});

var RtlNewSecurityGrantedAccess = Module.findExportByName("ntdll.dll", "RtlNewSecurityGrantedAccess")
Interceptor.attach(RtlNewSecurityGrantedAccess, {onLeave: function (args) {send("RtlNewSecurityGrantedAccess");}});

var RtlNewSecurityObject = Module.findExportByName("ntdll.dll", "RtlNewSecurityObject")
Interceptor.attach(RtlNewSecurityObject, {onLeave: function (args) {send("RtlNewSecurityObject");}});

var RtlNewSecurityObjectEx = Module.findExportByName("ntdll.dll", "RtlNewSecurityObjectEx")
Interceptor.attach(RtlNewSecurityObjectEx, {onLeave: function (args) {send("RtlNewSecurityObjectEx");}});

var RtlNewSecurityObjectWithMultipleInheritance = Module.findExportByName("ntdll.dll", "RtlNewSecurityObjectWithMultipleInheritance")
Interceptor.attach(RtlNewSecurityObjectWithMultipleInheritance, {onLeave: function (args) {send("RtlNewSecurityObjectWithMultipleInheritance");}});

var RtlNormalizeProcessParams = Module.findExportByName("ntdll.dll", "RtlNormalizeProcessParams")
Interceptor.attach(RtlNormalizeProcessParams, {onLeave: function (args) {send("RtlNormalizeProcessParams");}});

var RtlNormalizeSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlNormalizeSecurityDescriptor")
Interceptor.attach(RtlNormalizeSecurityDescriptor, {onLeave: function (args) {send("RtlNormalizeSecurityDescriptor");}});

var RtlNormalizeString = Module.findExportByName("ntdll.dll", "RtlNormalizeString")
Interceptor.attach(RtlNormalizeString, {onLeave: function (args) {send("RtlNormalizeString");}});

var RtlNotifyFeatureUsage = Module.findExportByName("ntdll.dll", "RtlNotifyFeatureUsage")
Interceptor.attach(RtlNotifyFeatureUsage, {onLeave: function (args) {send("RtlNotifyFeatureUsage");}});

var RtlNtPathNameToDosPathName = Module.findExportByName("ntdll.dll", "RtlNtPathNameToDosPathName")
Interceptor.attach(RtlNtPathNameToDosPathName, {onLeave: function (args) {send("RtlNtPathNameToDosPathName");}});

var RtlNtStatusToDosError = Module.findExportByName("ntdll.dll", "RtlNtStatusToDosError")
Interceptor.attach(RtlNtStatusToDosError, {onLeave: function (args) {send("RtlNtStatusToDosError");}});

var RtlNtStatusToDosErrorNoTeb = Module.findExportByName("ntdll.dll", "RtlNtStatusToDosErrorNoTeb")
Interceptor.attach(RtlNtStatusToDosErrorNoTeb, {onLeave: function (args) {send("RtlNtStatusToDosErrorNoTeb");}});

var RtlNtdllName = Module.findExportByName("ntdll.dll", "RtlNtdllName")
Interceptor.attach(RtlNtdllName, {onLeave: function (args) {send("RtlNtdllName");}});

var RtlNumberGenericTableElements = Module.findExportByName("ntdll.dll", "RtlNumberGenericTableElements")
Interceptor.attach(RtlNumberGenericTableElements, {onLeave: function (args) {send("RtlNumberGenericTableElements");}});

var RtlNumberGenericTableElementsAvl = Module.findExportByName("ntdll.dll", "RtlNumberGenericTableElementsAvl")
Interceptor.attach(RtlNumberGenericTableElementsAvl, {onLeave: function (args) {send("RtlNumberGenericTableElementsAvl");}});

var RtlNumberOfClearBits = Module.findExportByName("ntdll.dll", "RtlNumberOfClearBits")
Interceptor.attach(RtlNumberOfClearBits, {onLeave: function (args) {send("RtlNumberOfClearBits");}});

var RtlNumberOfClearBitsEx = Module.findExportByName("ntdll.dll", "RtlNumberOfClearBitsEx")
Interceptor.attach(RtlNumberOfClearBitsEx, {onLeave: function (args) {send("RtlNumberOfClearBitsEx");}});

var RtlNumberOfClearBitsInRange = Module.findExportByName("ntdll.dll", "RtlNumberOfClearBitsInRange")
Interceptor.attach(RtlNumberOfClearBitsInRange, {onLeave: function (args) {send("RtlNumberOfClearBitsInRange");}});

var RtlNumberOfSetBits = Module.findExportByName("ntdll.dll", "RtlNumberOfSetBits")
Interceptor.attach(RtlNumberOfSetBits, {onLeave: function (args) {send("RtlNumberOfSetBits");}});

var RtlNumberOfSetBitsEx = Module.findExportByName("ntdll.dll", "RtlNumberOfSetBitsEx")
Interceptor.attach(RtlNumberOfSetBitsEx, {onLeave: function (args) {send("RtlNumberOfSetBitsEx");}});

var RtlNumberOfSetBitsInRange = Module.findExportByName("ntdll.dll", "RtlNumberOfSetBitsInRange")
Interceptor.attach(RtlNumberOfSetBitsInRange, {onLeave: function (args) {send("RtlNumberOfSetBitsInRange");}});

var RtlNumberOfSetBitsUlongPtr = Module.findExportByName("ntdll.dll", "RtlNumberOfSetBitsUlongPtr")
Interceptor.attach(RtlNumberOfSetBitsUlongPtr, {onLeave: function (args) {send("RtlNumberOfSetBitsUlongPtr");}});

var RtlOemStringToUnicodeSize = Module.findExportByName("ntdll.dll", "RtlOemStringToUnicodeSize")
Interceptor.attach(RtlOemStringToUnicodeSize, {onLeave: function (args) {send("RtlOemStringToUnicodeSize");}});

var RtlOemStringToUnicodeString = Module.findExportByName("ntdll.dll", "RtlOemStringToUnicodeString")
Interceptor.attach(RtlOemStringToUnicodeString, {onLeave: function (args) {send("RtlOemStringToUnicodeString");}});

var RtlOemToUnicodeN = Module.findExportByName("ntdll.dll", "RtlOemToUnicodeN")
Interceptor.attach(RtlOemToUnicodeN, {onLeave: function (args) {send("RtlOemToUnicodeN");}});

var RtlOpenCrossProcessEmulatorWorkConnection = Module.findExportByName("ntdll.dll", "RtlOpenCrossProcessEmulatorWorkConnection")
Interceptor.attach(RtlOpenCrossProcessEmulatorWorkConnection, {onLeave: function (args) {send("RtlOpenCrossProcessEmulatorWorkConnection");}});

var RtlOpenCurrentUser = Module.findExportByName("ntdll.dll", "RtlOpenCurrentUser")
Interceptor.attach(RtlOpenCurrentUser, {onLeave: function (args) {send("RtlOpenCurrentUser");}});

var RtlOsDeploymentState = Module.findExportByName("ntdll.dll", "RtlOsDeploymentState")
Interceptor.attach(RtlOsDeploymentState, {onLeave: function (args) {send("RtlOsDeploymentState");}});

var RtlOverwriteFeatureConfigurationBuffer = Module.findExportByName("ntdll.dll", "RtlOverwriteFeatureConfigurationBuffer")
Interceptor.attach(RtlOverwriteFeatureConfigurationBuffer, {onLeave: function (args) {send("RtlOverwriteFeatureConfigurationBuffer");}});

var RtlOwnerAcesPresent = Module.findExportByName("ntdll.dll", "RtlOwnerAcesPresent")
Interceptor.attach(RtlOwnerAcesPresent, {onLeave: function (args) {send("RtlOwnerAcesPresent");}});

var RtlPcToFileHeader = Module.findExportByName("ntdll.dll", "RtlPcToFileHeader")
Interceptor.attach(RtlPcToFileHeader, {onLeave: function (args) {send("RtlPcToFileHeader");}});

var RtlPinAtomInAtomTable = Module.findExportByName("ntdll.dll", "RtlPinAtomInAtomTable")
Interceptor.attach(RtlPinAtomInAtomTable, {onLeave: function (args) {send("RtlPinAtomInAtomTable");}});

var RtlPopFrame = Module.findExportByName("ntdll.dll", "RtlPopFrame")
Interceptor.attach(RtlPopFrame, {onLeave: function (args) {send("RtlPopFrame");}});

var RtlPrefixString = Module.findExportByName("ntdll.dll", "RtlPrefixString")
Interceptor.attach(RtlPrefixString, {onLeave: function (args) {send("RtlPrefixString");}});

var RtlPrefixUnicodeString = Module.findExportByName("ntdll.dll", "RtlPrefixUnicodeString")
Interceptor.attach(RtlPrefixUnicodeString, {onLeave: function (args) {send("RtlPrefixUnicodeString");}});

var RtlPrepareForProcessCloning = Module.findExportByName("ntdll.dll", "RtlPrepareForProcessCloning")
Interceptor.attach(RtlPrepareForProcessCloning, {onLeave: function (args) {send("RtlPrepareForProcessCloning");}});

var RtlProcessFlsData = Module.findExportByName("ntdll.dll", "RtlProcessFlsData")
Interceptor.attach(RtlProcessFlsData, {onLeave: function (args) {send("RtlProcessFlsData");}});

var RtlProtectHeap = Module.findExportByName("ntdll.dll", "RtlProtectHeap")
Interceptor.attach(RtlProtectHeap, {onLeave: function (args) {send("RtlProtectHeap");}});

var RtlPublishWnfStateData = Module.findExportByName("ntdll.dll", "RtlPublishWnfStateData")
Interceptor.attach(RtlPublishWnfStateData, {onLeave: function (args) {send("RtlPublishWnfStateData");}});

var RtlPushFrame = Module.findExportByName("ntdll.dll", "RtlPushFrame")
Interceptor.attach(RtlPushFrame, {onLeave: function (args) {send("RtlPushFrame");}});

var RtlQueryActivationContextApplicationSettings = Module.findExportByName("ntdll.dll", "RtlQueryActivationContextApplicationSettings")
Interceptor.attach(RtlQueryActivationContextApplicationSettings, {onLeave: function (args) {send("RtlQueryActivationContextApplicationSettings");}});

var RtlQueryAllFeatureConfigurations = Module.findExportByName("ntdll.dll", "RtlQueryAllFeatureConfigurations")
Interceptor.attach(RtlQueryAllFeatureConfigurations, {onLeave: function (args) {send("RtlQueryAllFeatureConfigurations");}});

var RtlQueryAtomInAtomTable = Module.findExportByName("ntdll.dll", "RtlQueryAtomInAtomTable")
Interceptor.attach(RtlQueryAtomInAtomTable, {onLeave: function (args) {send("RtlQueryAtomInAtomTable");}});

var RtlQueryCriticalSectionOwner = Module.findExportByName("ntdll.dll", "RtlQueryCriticalSectionOwner")
Interceptor.attach(RtlQueryCriticalSectionOwner, {onLeave: function (args) {send("RtlQueryCriticalSectionOwner");}});

var RtlQueryDepthSList = Module.findExportByName("ntdll.dll", "RtlQueryDepthSList")
Interceptor.attach(RtlQueryDepthSList, {onLeave: function (args) {send("RtlQueryDepthSList");}});

var RtlQueryDynamicTimeZoneInformation = Module.findExportByName("ntdll.dll", "RtlQueryDynamicTimeZoneInformation")
Interceptor.attach(RtlQueryDynamicTimeZoneInformation, {onLeave: function (args) {send("RtlQueryDynamicTimeZoneInformation");}});

var RtlQueryElevationFlags = Module.findExportByName("ntdll.dll", "RtlQueryElevationFlags")
Interceptor.attach(RtlQueryElevationFlags, {onLeave: function (args) {send("RtlQueryElevationFlags");}});

var RtlQueryEnvironmentVariable = Module.findExportByName("ntdll.dll", "RtlQueryEnvironmentVariable")
Interceptor.attach(RtlQueryEnvironmentVariable, {onLeave: function (args) {send("RtlQueryEnvironmentVariable");}});

var RtlQueryEnvironmentVariable_U = Module.findExportByName("ntdll.dll", "RtlQueryEnvironmentVariable_U")
Interceptor.attach(RtlQueryEnvironmentVariable_U, {onLeave: function (args) {send("RtlQueryEnvironmentVariable_U");}});

var RtlQueryFeatureConfiguration = Module.findExportByName("ntdll.dll", "RtlQueryFeatureConfiguration")
Interceptor.attach(RtlQueryFeatureConfiguration, {onLeave: function (args) {send("RtlQueryFeatureConfiguration");}});

var RtlQueryFeatureConfigurationChangeStamp = Module.findExportByName("ntdll.dll", "RtlQueryFeatureConfigurationChangeStamp")
Interceptor.attach(RtlQueryFeatureConfigurationChangeStamp, {onLeave: function (args) {send("RtlQueryFeatureConfigurationChangeStamp");}});

var RtlQueryFeatureUsageNotificationSubscriptions = Module.findExportByName("ntdll.dll", "RtlQueryFeatureUsageNotificationSubscriptions")
Interceptor.attach(RtlQueryFeatureUsageNotificationSubscriptions, {onLeave: function (args) {send("RtlQueryFeatureUsageNotificationSubscriptions");}});

var RtlQueryHeapInformation = Module.findExportByName("ntdll.dll", "RtlQueryHeapInformation")
Interceptor.attach(RtlQueryHeapInformation, {onLeave: function (args) {send("RtlQueryHeapInformation");}});

var RtlQueryImageMitigationPolicy = Module.findExportByName("ntdll.dll", "RtlQueryImageMitigationPolicy")
Interceptor.attach(RtlQueryImageMitigationPolicy, {onLeave: function (args) {send("RtlQueryImageMitigationPolicy");}});

var RtlQueryInformationAcl = Module.findExportByName("ntdll.dll", "RtlQueryInformationAcl")
Interceptor.attach(RtlQueryInformationAcl, {onLeave: function (args) {send("RtlQueryInformationAcl");}});

var RtlQueryInformationActivationContext = Module.findExportByName("ntdll.dll", "RtlQueryInformationActivationContext")
Interceptor.attach(RtlQueryInformationActivationContext, {onLeave: function (args) {send("RtlQueryInformationActivationContext");}});

var RtlQueryInformationActiveActivationContext = Module.findExportByName("ntdll.dll", "RtlQueryInformationActiveActivationContext")
Interceptor.attach(RtlQueryInformationActiveActivationContext, {onLeave: function (args) {send("RtlQueryInformationActiveActivationContext");}});

var RtlQueryInterfaceMemoryStream = Module.findExportByName("ntdll.dll", "RtlQueryInterfaceMemoryStream")
Interceptor.attach(RtlQueryInterfaceMemoryStream, {onLeave: function (args) {send("RtlQueryInterfaceMemoryStream");}});

var RtlQueryModuleInformation = Module.findExportByName("ntdll.dll", "RtlQueryModuleInformation")
Interceptor.attach(RtlQueryModuleInformation, {onLeave: function (args) {send("RtlQueryModuleInformation");}});

var RtlQueryPackageClaims = Module.findExportByName("ntdll.dll", "RtlQueryPackageClaims")
Interceptor.attach(RtlQueryPackageClaims, {onLeave: function (args) {send("RtlQueryPackageClaims");}});

var RtlQueryPackageIdentity = Module.findExportByName("ntdll.dll", "RtlQueryPackageIdentity")
Interceptor.attach(RtlQueryPackageIdentity, {onLeave: function (args) {send("RtlQueryPackageIdentity");}});

var RtlQueryPackageIdentityEx = Module.findExportByName("ntdll.dll", "RtlQueryPackageIdentityEx")
Interceptor.attach(RtlQueryPackageIdentityEx, {onLeave: function (args) {send("RtlQueryPackageIdentityEx");}});

var RtlQueryPerformanceCounter = Module.findExportByName("ntdll.dll", "RtlQueryPerformanceCounter")
Interceptor.attach(RtlQueryPerformanceCounter, {onLeave: function (args) {send("RtlQueryPerformanceCounter");}});

var RtlQueryPerformanceFrequency = Module.findExportByName("ntdll.dll", "RtlQueryPerformanceFrequency")
Interceptor.attach(RtlQueryPerformanceFrequency, {onLeave: function (args) {send("RtlQueryPerformanceFrequency");}});

var RtlQueryPointerMapping = Module.findExportByName("ntdll.dll", "RtlQueryPointerMapping")
Interceptor.attach(RtlQueryPointerMapping, {onLeave: function (args) {send("RtlQueryPointerMapping");}});

var RtlQueryProcessBackTraceInformation = Module.findExportByName("ntdll.dll", "RtlQueryProcessBackTraceInformation")
Interceptor.attach(RtlQueryProcessBackTraceInformation, {onLeave: function (args) {send("RtlQueryProcessBackTraceInformation");}});

var RtlQueryProcessDebugInformation = Module.findExportByName("ntdll.dll", "RtlQueryProcessDebugInformation")
Interceptor.attach(RtlQueryProcessDebugInformation, {onLeave: function (args) {send("RtlQueryProcessDebugInformation");}});

var RtlQueryProcessHeapInformation = Module.findExportByName("ntdll.dll", "RtlQueryProcessHeapInformation")
Interceptor.attach(RtlQueryProcessHeapInformation, {onLeave: function (args) {send("RtlQueryProcessHeapInformation");}});

var RtlQueryProcessLockInformation = Module.findExportByName("ntdll.dll", "RtlQueryProcessLockInformation")
Interceptor.attach(RtlQueryProcessLockInformation, {onLeave: function (args) {send("RtlQueryProcessLockInformation");}});

var RtlQueryProcessPlaceholderCompatibilityMode = Module.findExportByName("ntdll.dll", "RtlQueryProcessPlaceholderCompatibilityMode")
Interceptor.attach(RtlQueryProcessPlaceholderCompatibilityMode, {onLeave: function (args) {send("RtlQueryProcessPlaceholderCompatibilityMode");}});

var RtlQueryPropertyStore = Module.findExportByName("ntdll.dll", "RtlQueryPropertyStore")
Interceptor.attach(RtlQueryPropertyStore, {onLeave: function (args) {send("RtlQueryPropertyStore");}});

var RtlQueryProtectedPolicy = Module.findExportByName("ntdll.dll", "RtlQueryProtectedPolicy")
Interceptor.attach(RtlQueryProtectedPolicy, {onLeave: function (args) {send("RtlQueryProtectedPolicy");}});

var RtlQueryRegistryValueWithFallback = Module.findExportByName("ntdll.dll", "RtlQueryRegistryValueWithFallback")
Interceptor.attach(RtlQueryRegistryValueWithFallback, {onLeave: function (args) {send("RtlQueryRegistryValueWithFallback");}});

var RtlQueryRegistryValues = Module.findExportByName("ntdll.dll", "RtlQueryRegistryValues")
Interceptor.attach(RtlQueryRegistryValues, {onLeave: function (args) {send("RtlQueryRegistryValues");}});

var RtlQueryRegistryValuesEx = Module.findExportByName("ntdll.dll", "RtlQueryRegistryValuesEx")
Interceptor.attach(RtlQueryRegistryValuesEx, {onLeave: function (args) {send("RtlQueryRegistryValuesEx");}});

var RtlQueryResourcePolicy = Module.findExportByName("ntdll.dll", "RtlQueryResourcePolicy")
Interceptor.attach(RtlQueryResourcePolicy, {onLeave: function (args) {send("RtlQueryResourcePolicy");}});

var RtlQuerySecurityObject = Module.findExportByName("ntdll.dll", "RtlQuerySecurityObject")
Interceptor.attach(RtlQuerySecurityObject, {onLeave: function (args) {send("RtlQuerySecurityObject");}});

var RtlQueryTagHeap = Module.findExportByName("ntdll.dll", "RtlQueryTagHeap")
Interceptor.attach(RtlQueryTagHeap, {onLeave: function (args) {send("RtlQueryTagHeap");}});

var RtlQueryThreadPlaceholderCompatibilityMode = Module.findExportByName("ntdll.dll", "RtlQueryThreadPlaceholderCompatibilityMode")
Interceptor.attach(RtlQueryThreadPlaceholderCompatibilityMode, {onLeave: function (args) {send("RtlQueryThreadPlaceholderCompatibilityMode");}});

var RtlQueryThreadProfiling = Module.findExportByName("ntdll.dll", "RtlQueryThreadProfiling")
Interceptor.attach(RtlQueryThreadProfiling, {onLeave: function (args) {send("RtlQueryThreadProfiling");}});

var RtlQueryTimeZoneInformation = Module.findExportByName("ntdll.dll", "RtlQueryTimeZoneInformation")
Interceptor.attach(RtlQueryTimeZoneInformation, {onLeave: function (args) {send("RtlQueryTimeZoneInformation");}});

var RtlQueryTokenHostIdAsUlong64 = Module.findExportByName("ntdll.dll", "RtlQueryTokenHostIdAsUlong64")
Interceptor.attach(RtlQueryTokenHostIdAsUlong64, {onLeave: function (args) {send("RtlQueryTokenHostIdAsUlong64");}});

var RtlQueryUmsThreadInformation = Module.findExportByName("ntdll.dll", "RtlQueryUmsThreadInformation")
Interceptor.attach(RtlQueryUmsThreadInformation, {onLeave: function (args) {send("RtlQueryUmsThreadInformation");}});

var RtlQueryUnbiasedInterruptTime = Module.findExportByName("ntdll.dll", "RtlQueryUnbiasedInterruptTime")
Interceptor.attach(RtlQueryUnbiasedInterruptTime, {onLeave: function (args) {send("RtlQueryUnbiasedInterruptTime");}});

var RtlQueryValidationRunlevel = Module.findExportByName("ntdll.dll", "RtlQueryValidationRunlevel")
Interceptor.attach(RtlQueryValidationRunlevel, {onLeave: function (args) {send("RtlQueryValidationRunlevel");}});

var RtlQueryWnfMetaNotification = Module.findExportByName("ntdll.dll", "RtlQueryWnfMetaNotification")
Interceptor.attach(RtlQueryWnfMetaNotification, {onLeave: function (args) {send("RtlQueryWnfMetaNotification");}});

var RtlQueryWnfStateData = Module.findExportByName("ntdll.dll", "RtlQueryWnfStateData")
Interceptor.attach(RtlQueryWnfStateData, {onLeave: function (args) {send("RtlQueryWnfStateData");}});

var RtlQueryWnfStateDataWithExplicitScope = Module.findExportByName("ntdll.dll", "RtlQueryWnfStateDataWithExplicitScope")
Interceptor.attach(RtlQueryWnfStateDataWithExplicitScope, {onLeave: function (args) {send("RtlQueryWnfStateDataWithExplicitScope");}});

var RtlQueueApcWow64Thread = Module.findExportByName("ntdll.dll", "RtlQueueApcWow64Thread")
Interceptor.attach(RtlQueueApcWow64Thread, {onLeave: function (args) {send("RtlQueueApcWow64Thread");}});

var RtlQueueWorkItem = Module.findExportByName("ntdll.dll", "RtlQueueWorkItem")
Interceptor.attach(RtlQueueWorkItem, {onLeave: function (args) {send("RtlQueueWorkItem");}});

var RtlRaiseCustomSystemEventTrigger = Module.findExportByName("ntdll.dll", "RtlRaiseCustomSystemEventTrigger")
Interceptor.attach(RtlRaiseCustomSystemEventTrigger, {onLeave: function (args) {send("RtlRaiseCustomSystemEventTrigger");}});

var RtlRaiseException = Module.findExportByName("ntdll.dll", "RtlRaiseException")
Interceptor.attach(RtlRaiseException, {onLeave: function (args) {send("RtlRaiseException");}});

var RtlRaiseExceptionForReturnAddressHijack = Module.findExportByName("ntdll.dll", "RtlRaiseExceptionForReturnAddressHijack")
Interceptor.attach(RtlRaiseExceptionForReturnAddressHijack, {onLeave: function (args) {send("RtlRaiseExceptionForReturnAddressHijack");}});

var RtlRaiseNoncontinuableException = Module.findExportByName("ntdll.dll", "RtlRaiseNoncontinuableException")
Interceptor.attach(RtlRaiseNoncontinuableException, {onLeave: function (args) {send("RtlRaiseNoncontinuableException");}});

var RtlRaiseStatus = Module.findExportByName("ntdll.dll", "RtlRaiseStatus")
Interceptor.attach(RtlRaiseStatus, {onLeave: function (args) {send("RtlRaiseStatus");}});

var RtlRandom = Module.findExportByName("ntdll.dll", "RtlRandom")
Interceptor.attach(RtlRandom, {onLeave: function (args) {send("RtlRandom");}});

var RtlRandomEx = Module.findExportByName("ntdll.dll", "RtlRandomEx")
Interceptor.attach(RtlRandomEx, {onLeave: function (args) {send("RtlRandomEx");}});

var RtlRbInsertNodeEx = Module.findExportByName("ntdll.dll", "RtlRbInsertNodeEx")
Interceptor.attach(RtlRbInsertNodeEx, {onLeave: function (args) {send("RtlRbInsertNodeEx");}});

var RtlRbRemoveNode = Module.findExportByName("ntdll.dll", "RtlRbRemoveNode")
Interceptor.attach(RtlRbRemoveNode, {onLeave: function (args) {send("RtlRbRemoveNode");}});

var RtlReAllocateHeap = Module.findExportByName("ntdll.dll", "RtlReAllocateHeap")
Interceptor.attach(RtlReAllocateHeap, {onLeave: function (args) {send("RtlReAllocateHeap");}});

var RtlReadMemoryStream = Module.findExportByName("ntdll.dll", "RtlReadMemoryStream")
Interceptor.attach(RtlReadMemoryStream, {onLeave: function (args) {send("RtlReadMemoryStream");}});

var RtlReadOutOfProcessMemoryStream = Module.findExportByName("ntdll.dll", "RtlReadOutOfProcessMemoryStream")
Interceptor.attach(RtlReadOutOfProcessMemoryStream, {onLeave: function (args) {send("RtlReadOutOfProcessMemoryStream");}});

var RtlReadThreadProfilingData = Module.findExportByName("ntdll.dll", "RtlReadThreadProfilingData")
Interceptor.attach(RtlReadThreadProfilingData, {onLeave: function (args) {send("RtlReadThreadProfilingData");}});

var RtlRealPredecessor = Module.findExportByName("ntdll.dll", "RtlRealPredecessor")
Interceptor.attach(RtlRealPredecessor, {onLeave: function (args) {send("RtlRealPredecessor");}});

var RtlRealSuccessor = Module.findExportByName("ntdll.dll", "RtlRealSuccessor")
Interceptor.attach(RtlRealSuccessor, {onLeave: function (args) {send("RtlRealSuccessor");}});

var RtlRegisterFeatureConfigurationChangeNotification = Module.findExportByName("ntdll.dll", "RtlRegisterFeatureConfigurationChangeNotification")
Interceptor.attach(RtlRegisterFeatureConfigurationChangeNotification, {onLeave: function (args) {send("RtlRegisterFeatureConfigurationChangeNotification");}});

var RtlRegisterForWnfMetaNotification = Module.findExportByName("ntdll.dll", "RtlRegisterForWnfMetaNotification")
Interceptor.attach(RtlRegisterForWnfMetaNotification, {onLeave: function (args) {send("RtlRegisterForWnfMetaNotification");}});

var RtlRegisterSecureMemoryCacheCallback = Module.findExportByName("ntdll.dll", "RtlRegisterSecureMemoryCacheCallback")
Interceptor.attach(RtlRegisterSecureMemoryCacheCallback, {onLeave: function (args) {send("RtlRegisterSecureMemoryCacheCallback");}});

var RtlRegisterThreadWithCsrss = Module.findExportByName("ntdll.dll", "RtlRegisterThreadWithCsrss")
Interceptor.attach(RtlRegisterThreadWithCsrss, {onLeave: function (args) {send("RtlRegisterThreadWithCsrss");}});

var RtlRegisterWait = Module.findExportByName("ntdll.dll", "RtlRegisterWait")
Interceptor.attach(RtlRegisterWait, {onLeave: function (args) {send("RtlRegisterWait");}});

var RtlReleaseActivationContext = Module.findExportByName("ntdll.dll", "RtlReleaseActivationContext")
Interceptor.attach(RtlReleaseActivationContext, {onLeave: function (args) {send("RtlReleaseActivationContext");}});

var RtlReleaseMemoryStream = Module.findExportByName("ntdll.dll", "RtlReleaseMemoryStream")
Interceptor.attach(RtlReleaseMemoryStream, {onLeave: function (args) {send("RtlReleaseMemoryStream");}});

var RtlReleasePath = Module.findExportByName("ntdll.dll", "RtlReleasePath")
Interceptor.attach(RtlReleasePath, {onLeave: function (args) {send("RtlReleasePath");}});

var RtlReleasePebLock = Module.findExportByName("ntdll.dll", "RtlReleasePebLock")
Interceptor.attach(RtlReleasePebLock, {onLeave: function (args) {send("RtlReleasePebLock");}});

var RtlReleasePrivilege = Module.findExportByName("ntdll.dll", "RtlReleasePrivilege")
Interceptor.attach(RtlReleasePrivilege, {onLeave: function (args) {send("RtlReleasePrivilege");}});

var RtlReleaseRelativeName = Module.findExportByName("ntdll.dll", "RtlReleaseRelativeName")
Interceptor.attach(RtlReleaseRelativeName, {onLeave: function (args) {send("RtlReleaseRelativeName");}});

var RtlReleaseResource = Module.findExportByName("ntdll.dll", "RtlReleaseResource")
Interceptor.attach(RtlReleaseResource, {onLeave: function (args) {send("RtlReleaseResource");}});

var RtlReleaseSRWLockExclusive = Module.findExportByName("ntdll.dll", "RtlReleaseSRWLockExclusive")
Interceptor.attach(RtlReleaseSRWLockExclusive, {onLeave: function (args) {send("RtlReleaseSRWLockExclusive");}});

var RtlReleaseSRWLockShared = Module.findExportByName("ntdll.dll", "RtlReleaseSRWLockShared")
Interceptor.attach(RtlReleaseSRWLockShared, {onLeave: function (args) {send("RtlReleaseSRWLockShared");}});

var RtlRemoteCall = Module.findExportByName("ntdll.dll", "RtlRemoteCall")
Interceptor.attach(RtlRemoteCall, {onLeave: function (args) {send("RtlRemoteCall");}});

var RtlRemoveEntryHashTable = Module.findExportByName("ntdll.dll", "RtlRemoveEntryHashTable")
Interceptor.attach(RtlRemoveEntryHashTable, {onLeave: function (args) {send("RtlRemoveEntryHashTable");}});

var RtlRemovePointerMapping = Module.findExportByName("ntdll.dll", "RtlRemovePointerMapping")
Interceptor.attach(RtlRemovePointerMapping, {onLeave: function (args) {send("RtlRemovePointerMapping");}});

var RtlRemovePrivileges = Module.findExportByName("ntdll.dll", "RtlRemovePrivileges")
Interceptor.attach(RtlRemovePrivileges, {onLeave: function (args) {send("RtlRemovePrivileges");}});

var RtlRemovePropertyStore = Module.findExportByName("ntdll.dll", "RtlRemovePropertyStore")
Interceptor.attach(RtlRemovePropertyStore, {onLeave: function (args) {send("RtlRemovePropertyStore");}});

var RtlRemoveVectoredContinueHandler = Module.findExportByName("ntdll.dll", "RtlRemoveVectoredContinueHandler")
Interceptor.attach(RtlRemoveVectoredContinueHandler, {onLeave: function (args) {send("RtlRemoveVectoredContinueHandler");}});

var RtlRemoveVectoredExceptionHandler = Module.findExportByName("ntdll.dll", "RtlRemoveVectoredExceptionHandler")
Interceptor.attach(RtlRemoveVectoredExceptionHandler, {onLeave: function (args) {send("RtlRemoveVectoredExceptionHandler");}});

var RtlReplaceSidInSd = Module.findExportByName("ntdll.dll", "RtlReplaceSidInSd")
Interceptor.attach(RtlReplaceSidInSd, {onLeave: function (args) {send("RtlReplaceSidInSd");}});

var RtlReplaceSystemDirectoryInPath = Module.findExportByName("ntdll.dll", "RtlReplaceSystemDirectoryInPath")
Interceptor.attach(RtlReplaceSystemDirectoryInPath, {onLeave: function (args) {send("RtlReplaceSystemDirectoryInPath");}});

var RtlReportException = Module.findExportByName("ntdll.dll", "RtlReportException")
Interceptor.attach(RtlReportException, {onLeave: function (args) {send("RtlReportException");}});

var RtlReportExceptionEx = Module.findExportByName("ntdll.dll", "RtlReportExceptionEx")
Interceptor.attach(RtlReportExceptionEx, {onLeave: function (args) {send("RtlReportExceptionEx");}});

var RtlReportSilentProcessExit = Module.findExportByName("ntdll.dll", "RtlReportSilentProcessExit")
Interceptor.attach(RtlReportSilentProcessExit, {onLeave: function (args) {send("RtlReportSilentProcessExit");}});

var RtlReportSqmEscalation = Module.findExportByName("ntdll.dll", "RtlReportSqmEscalation")
Interceptor.attach(RtlReportSqmEscalation, {onLeave: function (args) {send("RtlReportSqmEscalation");}});

var RtlResetMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlResetMemoryBlockLookaside")
Interceptor.attach(RtlResetMemoryBlockLookaside, {onLeave: function (args) {send("RtlResetMemoryBlockLookaside");}});

var RtlResetMemoryZone = Module.findExportByName("ntdll.dll", "RtlResetMemoryZone")
Interceptor.attach(RtlResetMemoryZone, {onLeave: function (args) {send("RtlResetMemoryZone");}});

var RtlResetNtUserPfn = Module.findExportByName("ntdll.dll", "RtlResetNtUserPfn")
Interceptor.attach(RtlResetNtUserPfn, {onLeave: function (args) {send("RtlResetNtUserPfn");}});

var RtlResetRtlTranslations = Module.findExportByName("ntdll.dll", "RtlResetRtlTranslations")
Interceptor.attach(RtlResetRtlTranslations, {onLeave: function (args) {send("RtlResetRtlTranslations");}});

var RtlRestoreBootStatusDefaults = Module.findExportByName("ntdll.dll", "RtlRestoreBootStatusDefaults")
Interceptor.attach(RtlRestoreBootStatusDefaults, {onLeave: function (args) {send("RtlRestoreBootStatusDefaults");}});

var RtlRestoreContext = Module.findExportByName("ntdll.dll", "RtlRestoreContext")
Interceptor.attach(RtlRestoreContext, {onLeave: function (args) {send("RtlRestoreContext");}});

var RtlRestoreLastWin32Error = Module.findExportByName("ntdll.dll", "RtlRestoreLastWin32Error")
Interceptor.attach(RtlRestoreLastWin32Error, {onLeave: function (args) {send("RtlRestoreLastWin32Error");}});

var RtlRestoreSystemBootStatusDefaults = Module.findExportByName("ntdll.dll", "RtlRestoreSystemBootStatusDefaults")
Interceptor.attach(RtlRestoreSystemBootStatusDefaults, {onLeave: function (args) {send("RtlRestoreSystemBootStatusDefaults");}});

var RtlRestoreThreadPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlRestoreThreadPreferredUILanguages")
Interceptor.attach(RtlRestoreThreadPreferredUILanguages, {onLeave: function (args) {send("RtlRestoreThreadPreferredUILanguages");}});

var RtlRetrieveNtUserPfn = Module.findExportByName("ntdll.dll", "RtlRetrieveNtUserPfn")
Interceptor.attach(RtlRetrieveNtUserPfn, {onLeave: function (args) {send("RtlRetrieveNtUserPfn");}});

var RtlRevertMemoryStream = Module.findExportByName("ntdll.dll", "RtlRevertMemoryStream")
Interceptor.attach(RtlRevertMemoryStream, {onLeave: function (args) {send("RtlRevertMemoryStream");}});

var RtlRunDecodeUnicodeString = Module.findExportByName("ntdll.dll", "RtlRunDecodeUnicodeString")
Interceptor.attach(RtlRunDecodeUnicodeString, {onLeave: function (args) {send("RtlRunDecodeUnicodeString");}});

var RtlRunEncodeUnicodeString = Module.findExportByName("ntdll.dll", "RtlRunEncodeUnicodeString")
Interceptor.attach(RtlRunEncodeUnicodeString, {onLeave: function (args) {send("RtlRunEncodeUnicodeString");}});

var RtlRunOnceBeginInitialize = Module.findExportByName("ntdll.dll", "RtlRunOnceBeginInitialize")
Interceptor.attach(RtlRunOnceBeginInitialize, {onLeave: function (args) {send("RtlRunOnceBeginInitialize");}});

var RtlRunOnceComplete = Module.findExportByName("ntdll.dll", "RtlRunOnceComplete")
Interceptor.attach(RtlRunOnceComplete, {onLeave: function (args) {send("RtlRunOnceComplete");}});

var RtlRunOnceExecuteOnce = Module.findExportByName("ntdll.dll", "RtlRunOnceExecuteOnce")
Interceptor.attach(RtlRunOnceExecuteOnce, {onLeave: function (args) {send("RtlRunOnceExecuteOnce");}});

var RtlRunOnceInitialize = Module.findExportByName("ntdll.dll", "RtlRunOnceInitialize")
Interceptor.attach(RtlRunOnceInitialize, {onLeave: function (args) {send("RtlRunOnceInitialize");}});

var RtlSecondsSince1970ToTime = Module.findExportByName("ntdll.dll", "RtlSecondsSince1970ToTime")
Interceptor.attach(RtlSecondsSince1970ToTime, {onLeave: function (args) {send("RtlSecondsSince1970ToTime");}});

var RtlSecondsSince1980ToTime = Module.findExportByName("ntdll.dll", "RtlSecondsSince1980ToTime")
Interceptor.attach(RtlSecondsSince1980ToTime, {onLeave: function (args) {send("RtlSecondsSince1980ToTime");}});

var RtlSeekMemoryStream = Module.findExportByName("ntdll.dll", "RtlSeekMemoryStream")
Interceptor.attach(RtlSeekMemoryStream, {onLeave: function (args) {send("RtlSeekMemoryStream");}});

var RtlSelfRelativeToAbsoluteSD = Module.findExportByName("ntdll.dll", "RtlSelfRelativeToAbsoluteSD")
Interceptor.attach(RtlSelfRelativeToAbsoluteSD, {onLeave: function (args) {send("RtlSelfRelativeToAbsoluteSD");}});

var RtlSelfRelativeToAbsoluteSD2 = Module.findExportByName("ntdll.dll", "RtlSelfRelativeToAbsoluteSD2")
Interceptor.attach(RtlSelfRelativeToAbsoluteSD2, {onLeave: function (args) {send("RtlSelfRelativeToAbsoluteSD2");}});

var RtlSendMsgToSm = Module.findExportByName("ntdll.dll", "RtlSendMsgToSm")
Interceptor.attach(RtlSendMsgToSm, {onLeave: function (args) {send("RtlSendMsgToSm");}});

var RtlSetAllBits = Module.findExportByName("ntdll.dll", "RtlSetAllBits")
Interceptor.attach(RtlSetAllBits, {onLeave: function (args) {send("RtlSetAllBits");}});

var RtlSetAllBitsEx = Module.findExportByName("ntdll.dll", "RtlSetAllBitsEx")
Interceptor.attach(RtlSetAllBitsEx, {onLeave: function (args) {send("RtlSetAllBitsEx");}});

var RtlSetAttributesSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlSetAttributesSecurityDescriptor")
Interceptor.attach(RtlSetAttributesSecurityDescriptor, {onLeave: function (args) {send("RtlSetAttributesSecurityDescriptor");}});

var RtlSetBit = Module.findExportByName("ntdll.dll", "RtlSetBit")
Interceptor.attach(RtlSetBit, {onLeave: function (args) {send("RtlSetBit");}});

var RtlSetBitEx = Module.findExportByName("ntdll.dll", "RtlSetBitEx")
Interceptor.attach(RtlSetBitEx, {onLeave: function (args) {send("RtlSetBitEx");}});

var RtlSetBits = Module.findExportByName("ntdll.dll", "RtlSetBits")
Interceptor.attach(RtlSetBits, {onLeave: function (args) {send("RtlSetBits");}});

var RtlSetBitsEx = Module.findExportByName("ntdll.dll", "RtlSetBitsEx")
Interceptor.attach(RtlSetBitsEx, {onLeave: function (args) {send("RtlSetBitsEx");}});

var RtlSetControlSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlSetControlSecurityDescriptor")
Interceptor.attach(RtlSetControlSecurityDescriptor, {onLeave: function (args) {send("RtlSetControlSecurityDescriptor");}});

var RtlSetCriticalSectionSpinCount = Module.findExportByName("ntdll.dll", "RtlSetCriticalSectionSpinCount")
Interceptor.attach(RtlSetCriticalSectionSpinCount, {onLeave: function (args) {send("RtlSetCriticalSectionSpinCount");}});

var RtlSetCurrentDirectory_U = Module.findExportByName("ntdll.dll", "RtlSetCurrentDirectory_U")
Interceptor.attach(RtlSetCurrentDirectory_U, {onLeave: function (args) {send("RtlSetCurrentDirectory_U");}});

var RtlSetCurrentEnvironment = Module.findExportByName("ntdll.dll", "RtlSetCurrentEnvironment")
Interceptor.attach(RtlSetCurrentEnvironment, {onLeave: function (args) {send("RtlSetCurrentEnvironment");}});

var RtlSetCurrentTransaction = Module.findExportByName("ntdll.dll", "RtlSetCurrentTransaction")
Interceptor.attach(RtlSetCurrentTransaction, {onLeave: function (args) {send("RtlSetCurrentTransaction");}});

var RtlSetDaclSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlSetDaclSecurityDescriptor")
Interceptor.attach(RtlSetDaclSecurityDescriptor, {onLeave: function (args) {send("RtlSetDaclSecurityDescriptor");}});

var RtlSetDynamicTimeZoneInformation = Module.findExportByName("ntdll.dll", "RtlSetDynamicTimeZoneInformation")
Interceptor.attach(RtlSetDynamicTimeZoneInformation, {onLeave: function (args) {send("RtlSetDynamicTimeZoneInformation");}});

var RtlSetEnvironmentStrings = Module.findExportByName("ntdll.dll", "RtlSetEnvironmentStrings")
Interceptor.attach(RtlSetEnvironmentStrings, {onLeave: function (args) {send("RtlSetEnvironmentStrings");}});

var RtlSetEnvironmentVar = Module.findExportByName("ntdll.dll", "RtlSetEnvironmentVar")
Interceptor.attach(RtlSetEnvironmentVar, {onLeave: function (args) {send("RtlSetEnvironmentVar");}});

var RtlSetEnvironmentVariable = Module.findExportByName("ntdll.dll", "RtlSetEnvironmentVariable")
Interceptor.attach(RtlSetEnvironmentVariable, {onLeave: function (args) {send("RtlSetEnvironmentVariable");}});

var RtlSetExtendedFeaturesMask = Module.findExportByName("ntdll.dll", "RtlSetExtendedFeaturesMask")
Interceptor.attach(RtlSetExtendedFeaturesMask, {onLeave: function (args) {send("RtlSetExtendedFeaturesMask");}});

var RtlSetFeatureConfigurations = Module.findExportByName("ntdll.dll", "RtlSetFeatureConfigurations")
Interceptor.attach(RtlSetFeatureConfigurations, {onLeave: function (args) {send("RtlSetFeatureConfigurations");}});

var RtlSetGroupSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlSetGroupSecurityDescriptor")
Interceptor.attach(RtlSetGroupSecurityDescriptor, {onLeave: function (args) {send("RtlSetGroupSecurityDescriptor");}});

var RtlSetHeapInformation = Module.findExportByName("ntdll.dll", "RtlSetHeapInformation")
Interceptor.attach(RtlSetHeapInformation, {onLeave: function (args) {send("RtlSetHeapInformation");}});

var RtlSetImageMitigationPolicy = Module.findExportByName("ntdll.dll", "RtlSetImageMitigationPolicy")
Interceptor.attach(RtlSetImageMitigationPolicy, {onLeave: function (args) {send("RtlSetImageMitigationPolicy");}});

var RtlSetInformationAcl = Module.findExportByName("ntdll.dll", "RtlSetInformationAcl")
Interceptor.attach(RtlSetInformationAcl, {onLeave: function (args) {send("RtlSetInformationAcl");}});

var RtlSetIoCompletionCallback = Module.findExportByName("ntdll.dll", "RtlSetIoCompletionCallback")
Interceptor.attach(RtlSetIoCompletionCallback, {onLeave: function (args) {send("RtlSetIoCompletionCallback");}});

var RtlSetLastWin32Error = Module.findExportByName("ntdll.dll", "RtlSetLastWin32Error")
Interceptor.attach(RtlSetLastWin32Error, {onLeave: function (args) {send("RtlSetLastWin32Error");}});

var RtlSetLastWin32ErrorAndNtStatusFromNtStatus = Module.findExportByName("ntdll.dll", "RtlSetLastWin32ErrorAndNtStatusFromNtStatus")
Interceptor.attach(RtlSetLastWin32ErrorAndNtStatusFromNtStatus, {onLeave: function (args) {send("RtlSetLastWin32ErrorAndNtStatusFromNtStatus");}});

var RtlSetMemoryStreamSize = Module.findExportByName("ntdll.dll", "RtlSetMemoryStreamSize")
Interceptor.attach(RtlSetMemoryStreamSize, {onLeave: function (args) {send("RtlSetMemoryStreamSize");}});

var RtlSetOwnerSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlSetOwnerSecurityDescriptor")
Interceptor.attach(RtlSetOwnerSecurityDescriptor, {onLeave: function (args) {send("RtlSetOwnerSecurityDescriptor");}});

var RtlSetPortableOperatingSystem = Module.findExportByName("ntdll.dll", "RtlSetPortableOperatingSystem")
Interceptor.attach(RtlSetPortableOperatingSystem, {onLeave: function (args) {send("RtlSetPortableOperatingSystem");}});

var RtlSetProcessDebugInformation = Module.findExportByName("ntdll.dll", "RtlSetProcessDebugInformation")
Interceptor.attach(RtlSetProcessDebugInformation, {onLeave: function (args) {send("RtlSetProcessDebugInformation");}});

var RtlSetProcessIsCritical = Module.findExportByName("ntdll.dll", "RtlSetProcessIsCritical")
Interceptor.attach(RtlSetProcessIsCritical, {onLeave: function (args) {send("RtlSetProcessIsCritical");}});

var RtlSetProcessPlaceholderCompatibilityMode = Module.findExportByName("ntdll.dll", "RtlSetProcessPlaceholderCompatibilityMode")
Interceptor.attach(RtlSetProcessPlaceholderCompatibilityMode, {onLeave: function (args) {send("RtlSetProcessPlaceholderCompatibilityMode");}});

var RtlSetProcessPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlSetProcessPreferredUILanguages")
Interceptor.attach(RtlSetProcessPreferredUILanguages, {onLeave: function (args) {send("RtlSetProcessPreferredUILanguages");}});

var RtlSetProtectedPolicy = Module.findExportByName("ntdll.dll", "RtlSetProtectedPolicy")
Interceptor.attach(RtlSetProtectedPolicy, {onLeave: function (args) {send("RtlSetProtectedPolicy");}});

var RtlSetProxiedProcessId = Module.findExportByName("ntdll.dll", "RtlSetProxiedProcessId")
Interceptor.attach(RtlSetProxiedProcessId, {onLeave: function (args) {send("RtlSetProxiedProcessId");}});

var RtlSetSaclSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlSetSaclSecurityDescriptor")
Interceptor.attach(RtlSetSaclSecurityDescriptor, {onLeave: function (args) {send("RtlSetSaclSecurityDescriptor");}});

var RtlSetSearchPathMode = Module.findExportByName("ntdll.dll", "RtlSetSearchPathMode")
Interceptor.attach(RtlSetSearchPathMode, {onLeave: function (args) {send("RtlSetSearchPathMode");}});

var RtlSetSecurityDescriptorRMControl = Module.findExportByName("ntdll.dll", "RtlSetSecurityDescriptorRMControl")
Interceptor.attach(RtlSetSecurityDescriptorRMControl, {onLeave: function (args) {send("RtlSetSecurityDescriptorRMControl");}});

var RtlSetSecurityObject = Module.findExportByName("ntdll.dll", "RtlSetSecurityObject")
Interceptor.attach(RtlSetSecurityObject, {onLeave: function (args) {send("RtlSetSecurityObject");}});

var RtlSetSecurityObjectEx = Module.findExportByName("ntdll.dll", "RtlSetSecurityObjectEx")
Interceptor.attach(RtlSetSecurityObjectEx, {onLeave: function (args) {send("RtlSetSecurityObjectEx");}});

var RtlSetSystemBootStatus = Module.findExportByName("ntdll.dll", "RtlSetSystemBootStatus")
Interceptor.attach(RtlSetSystemBootStatus, {onLeave: function (args) {send("RtlSetSystemBootStatus");}});

var RtlSetSystemBootStatusEx = Module.findExportByName("ntdll.dll", "RtlSetSystemBootStatusEx")
Interceptor.attach(RtlSetSystemBootStatusEx, {onLeave: function (args) {send("RtlSetSystemBootStatusEx");}});

var RtlSetThreadErrorMode = Module.findExportByName("ntdll.dll", "RtlSetThreadErrorMode")
Interceptor.attach(RtlSetThreadErrorMode, {onLeave: function (args) {send("RtlSetThreadErrorMode");}});

var RtlSetThreadIsCritical = Module.findExportByName("ntdll.dll", "RtlSetThreadIsCritical")
Interceptor.attach(RtlSetThreadIsCritical, {onLeave: function (args) {send("RtlSetThreadIsCritical");}});

var RtlSetThreadPlaceholderCompatibilityMode = Module.findExportByName("ntdll.dll", "RtlSetThreadPlaceholderCompatibilityMode")
Interceptor.attach(RtlSetThreadPlaceholderCompatibilityMode, {onLeave: function (args) {send("RtlSetThreadPlaceholderCompatibilityMode");}});

var RtlSetThreadPoolStartFunc = Module.findExportByName("ntdll.dll", "RtlSetThreadPoolStartFunc")
Interceptor.attach(RtlSetThreadPoolStartFunc, {onLeave: function (args) {send("RtlSetThreadPoolStartFunc");}});

var RtlSetThreadPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlSetThreadPreferredUILanguages")
Interceptor.attach(RtlSetThreadPreferredUILanguages, {onLeave: function (args) {send("RtlSetThreadPreferredUILanguages");}});

var RtlSetThreadPreferredUILanguages2 = Module.findExportByName("ntdll.dll", "RtlSetThreadPreferredUILanguages2")
Interceptor.attach(RtlSetThreadPreferredUILanguages2, {onLeave: function (args) {send("RtlSetThreadPreferredUILanguages2");}});

var RtlSetThreadSubProcessTag = Module.findExportByName("ntdll.dll", "RtlSetThreadSubProcessTag")
Interceptor.attach(RtlSetThreadSubProcessTag, {onLeave: function (args) {send("RtlSetThreadSubProcessTag");}});

var RtlSetThreadWorkOnBehalfTicket = Module.findExportByName("ntdll.dll", "RtlSetThreadWorkOnBehalfTicket")
Interceptor.attach(RtlSetThreadWorkOnBehalfTicket, {onLeave: function (args) {send("RtlSetThreadWorkOnBehalfTicket");}});

var RtlSetTimeZoneInformation = Module.findExportByName("ntdll.dll", "RtlSetTimeZoneInformation")
Interceptor.attach(RtlSetTimeZoneInformation, {onLeave: function (args) {send("RtlSetTimeZoneInformation");}});

var RtlSetTimer = Module.findExportByName("ntdll.dll", "RtlSetTimer")
Interceptor.attach(RtlSetTimer, {onLeave: function (args) {send("RtlSetTimer");}});

var RtlSetUmsThreadInformation = Module.findExportByName("ntdll.dll", "RtlSetUmsThreadInformation")
Interceptor.attach(RtlSetUmsThreadInformation, {onLeave: function (args) {send("RtlSetUmsThreadInformation");}});

var RtlSetUnhandledExceptionFilter = Module.findExportByName("ntdll.dll", "RtlSetUnhandledExceptionFilter")
Interceptor.attach(RtlSetUnhandledExceptionFilter, {onLeave: function (args) {send("RtlSetUnhandledExceptionFilter");}});

var RtlSetUserFlagsHeap = Module.findExportByName("ntdll.dll", "RtlSetUserFlagsHeap")
Interceptor.attach(RtlSetUserFlagsHeap, {onLeave: function (args) {send("RtlSetUserFlagsHeap");}});

var RtlSetUserValueHeap = Module.findExportByName("ntdll.dll", "RtlSetUserValueHeap")
Interceptor.attach(RtlSetUserValueHeap, {onLeave: function (args) {send("RtlSetUserValueHeap");}});

var RtlSidDominates = Module.findExportByName("ntdll.dll", "RtlSidDominates")
Interceptor.attach(RtlSidDominates, {onLeave: function (args) {send("RtlSidDominates");}});

var RtlSidDominatesForTrust = Module.findExportByName("ntdll.dll", "RtlSidDominatesForTrust")
Interceptor.attach(RtlSidDominatesForTrust, {onLeave: function (args) {send("RtlSidDominatesForTrust");}});

var RtlSidEqualLevel = Module.findExportByName("ntdll.dll", "RtlSidEqualLevel")
Interceptor.attach(RtlSidEqualLevel, {onLeave: function (args) {send("RtlSidEqualLevel");}});

var RtlSidHashInitialize = Module.findExportByName("ntdll.dll", "RtlSidHashInitialize")
Interceptor.attach(RtlSidHashInitialize, {onLeave: function (args) {send("RtlSidHashInitialize");}});

var RtlSidHashLookup = Module.findExportByName("ntdll.dll", "RtlSidHashLookup")
Interceptor.attach(RtlSidHashLookup, {onLeave: function (args) {send("RtlSidHashLookup");}});

var RtlSidIsHigherLevel = Module.findExportByName("ntdll.dll", "RtlSidIsHigherLevel")
Interceptor.attach(RtlSidIsHigherLevel, {onLeave: function (args) {send("RtlSidIsHigherLevel");}});

var RtlSizeHeap = Module.findExportByName("ntdll.dll", "RtlSizeHeap")
Interceptor.attach(RtlSizeHeap, {onLeave: function (args) {send("RtlSizeHeap");}});

var RtlSleepConditionVariableCS = Module.findExportByName("ntdll.dll", "RtlSleepConditionVariableCS")
Interceptor.attach(RtlSleepConditionVariableCS, {onLeave: function (args) {send("RtlSleepConditionVariableCS");}});

var RtlSleepConditionVariableSRW = Module.findExportByName("ntdll.dll", "RtlSleepConditionVariableSRW")
Interceptor.attach(RtlSleepConditionVariableSRW, {onLeave: function (args) {send("RtlSleepConditionVariableSRW");}});

var RtlSplay = Module.findExportByName("ntdll.dll", "RtlSplay")
Interceptor.attach(RtlSplay, {onLeave: function (args) {send("RtlSplay");}});

var RtlStartRXact = Module.findExportByName("ntdll.dll", "RtlStartRXact")
Interceptor.attach(RtlStartRXact, {onLeave: function (args) {send("RtlStartRXact");}});

var RtlStatMemoryStream = Module.findExportByName("ntdll.dll", "RtlStatMemoryStream")
Interceptor.attach(RtlStatMemoryStream, {onLeave: function (args) {send("RtlStatMemoryStream");}});

var RtlStringFromGUID = Module.findExportByName("ntdll.dll", "RtlStringFromGUID")
Interceptor.attach(RtlStringFromGUID, {onLeave: function (args) {send("RtlStringFromGUID");}});

var RtlStringFromGUIDEx = Module.findExportByName("ntdll.dll", "RtlStringFromGUIDEx")
Interceptor.attach(RtlStringFromGUIDEx, {onLeave: function (args) {send("RtlStringFromGUIDEx");}});

var RtlStronglyEnumerateEntryHashTable = Module.findExportByName("ntdll.dll", "RtlStronglyEnumerateEntryHashTable")
Interceptor.attach(RtlStronglyEnumerateEntryHashTable, {onLeave: function (args) {send("RtlStronglyEnumerateEntryHashTable");}});

var RtlSubAuthorityCountSid = Module.findExportByName("ntdll.dll", "RtlSubAuthorityCountSid")
Interceptor.attach(RtlSubAuthorityCountSid, {onLeave: function (args) {send("RtlSubAuthorityCountSid");}});

var RtlSubAuthoritySid = Module.findExportByName("ntdll.dll", "RtlSubAuthoritySid")
Interceptor.attach(RtlSubAuthoritySid, {onLeave: function (args) {send("RtlSubAuthoritySid");}});

var RtlSubscribeForFeatureUsageNotification = Module.findExportByName("ntdll.dll", "RtlSubscribeForFeatureUsageNotification")
Interceptor.attach(RtlSubscribeForFeatureUsageNotification, {onLeave: function (args) {send("RtlSubscribeForFeatureUsageNotification");}});

var RtlSubscribeWnfStateChangeNotification = Module.findExportByName("ntdll.dll", "RtlSubscribeWnfStateChangeNotification")
Interceptor.attach(RtlSubscribeWnfStateChangeNotification, {onLeave: function (args) {send("RtlSubscribeWnfStateChangeNotification");}});

var RtlSubtreePredecessor = Module.findExportByName("ntdll.dll", "RtlSubtreePredecessor")
Interceptor.attach(RtlSubtreePredecessor, {onLeave: function (args) {send("RtlSubtreePredecessor");}});

var RtlSubtreeSuccessor = Module.findExportByName("ntdll.dll", "RtlSubtreeSuccessor")
Interceptor.attach(RtlSubtreeSuccessor, {onLeave: function (args) {send("RtlSubtreeSuccessor");}});

var RtlSwitchedVVI = Module.findExportByName("ntdll.dll", "RtlSwitchedVVI")
Interceptor.attach(RtlSwitchedVVI, {onLeave: function (args) {send("RtlSwitchedVVI");}});

var RtlSystemTimeToLocalTime = Module.findExportByName("ntdll.dll", "RtlSystemTimeToLocalTime")
Interceptor.attach(RtlSystemTimeToLocalTime, {onLeave: function (args) {send("RtlSystemTimeToLocalTime");}});

var RtlTestAndPublishWnfStateData = Module.findExportByName("ntdll.dll", "RtlTestAndPublishWnfStateData")
Interceptor.attach(RtlTestAndPublishWnfStateData, {onLeave: function (args) {send("RtlTestAndPublishWnfStateData");}});

var RtlTestBit = Module.findExportByName("ntdll.dll", "RtlTestBit")
Interceptor.attach(RtlTestBit, {onLeave: function (args) {send("RtlTestBit");}});

var RtlTestBitEx = Module.findExportByName("ntdll.dll", "RtlTestBitEx")
Interceptor.attach(RtlTestBitEx, {onLeave: function (args) {send("RtlTestBitEx");}});

var RtlTestProtectedAccess = Module.findExportByName("ntdll.dll", "RtlTestProtectedAccess")
Interceptor.attach(RtlTestProtectedAccess, {onLeave: function (args) {send("RtlTestProtectedAccess");}});

var RtlTimeFieldsToTime = Module.findExportByName("ntdll.dll", "RtlTimeFieldsToTime")
Interceptor.attach(RtlTimeFieldsToTime, {onLeave: function (args) {send("RtlTimeFieldsToTime");}});

var RtlTimeToElapsedTimeFields = Module.findExportByName("ntdll.dll", "RtlTimeToElapsedTimeFields")
Interceptor.attach(RtlTimeToElapsedTimeFields, {onLeave: function (args) {send("RtlTimeToElapsedTimeFields");}});

var RtlTimeToSecondsSince1970 = Module.findExportByName("ntdll.dll", "RtlTimeToSecondsSince1970")
Interceptor.attach(RtlTimeToSecondsSince1970, {onLeave: function (args) {send("RtlTimeToSecondsSince1970");}});

var RtlTimeToSecondsSince1980 = Module.findExportByName("ntdll.dll", "RtlTimeToSecondsSince1980")
Interceptor.attach(RtlTimeToSecondsSince1980, {onLeave: function (args) {send("RtlTimeToSecondsSince1980");}});

var RtlTimeToTimeFields = Module.findExportByName("ntdll.dll", "RtlTimeToTimeFields")
Interceptor.attach(RtlTimeToTimeFields, {onLeave: function (args) {send("RtlTimeToTimeFields");}});

var RtlTraceDatabaseAdd = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseAdd")
Interceptor.attach(RtlTraceDatabaseAdd, {onLeave: function (args) {send("RtlTraceDatabaseAdd");}});

var RtlTraceDatabaseCreate = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseCreate")
Interceptor.attach(RtlTraceDatabaseCreate, {onLeave: function (args) {send("RtlTraceDatabaseCreate");}});

var RtlTraceDatabaseDestroy = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseDestroy")
Interceptor.attach(RtlTraceDatabaseDestroy, {onLeave: function (args) {send("RtlTraceDatabaseDestroy");}});

var RtlTraceDatabaseEnumerate = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseEnumerate")
Interceptor.attach(RtlTraceDatabaseEnumerate, {onLeave: function (args) {send("RtlTraceDatabaseEnumerate");}});

var RtlTraceDatabaseFind = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseFind")
Interceptor.attach(RtlTraceDatabaseFind, {onLeave: function (args) {send("RtlTraceDatabaseFind");}});

var RtlTraceDatabaseLock = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseLock")
Interceptor.attach(RtlTraceDatabaseLock, {onLeave: function (args) {send("RtlTraceDatabaseLock");}});

var RtlTraceDatabaseUnlock = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseUnlock")
Interceptor.attach(RtlTraceDatabaseUnlock, {onLeave: function (args) {send("RtlTraceDatabaseUnlock");}});

var RtlTraceDatabaseValidate = Module.findExportByName("ntdll.dll", "RtlTraceDatabaseValidate")
Interceptor.attach(RtlTraceDatabaseValidate, {onLeave: function (args) {send("RtlTraceDatabaseValidate");}});

var RtlTryAcquirePebLock = Module.findExportByName("ntdll.dll", "RtlTryAcquirePebLock")
Interceptor.attach(RtlTryAcquirePebLock, {onLeave: function (args) {send("RtlTryAcquirePebLock");}});

var RtlTryAcquireSRWLockExclusive = Module.findExportByName("ntdll.dll", "RtlTryAcquireSRWLockExclusive")
Interceptor.attach(RtlTryAcquireSRWLockExclusive, {onLeave: function (args) {send("RtlTryAcquireSRWLockExclusive");}});

var RtlTryAcquireSRWLockShared = Module.findExportByName("ntdll.dll", "RtlTryAcquireSRWLockShared")
Interceptor.attach(RtlTryAcquireSRWLockShared, {onLeave: function (args) {send("RtlTryAcquireSRWLockShared");}});

var RtlTryConvertSRWLockSharedToExclusiveOrRelease = Module.findExportByName("ntdll.dll", "RtlTryConvertSRWLockSharedToExclusiveOrRelease")
Interceptor.attach(RtlTryConvertSRWLockSharedToExclusiveOrRelease, {onLeave: function (args) {send("RtlTryConvertSRWLockSharedToExclusiveOrRelease");}});

var RtlTryEnterCriticalSection = Module.findExportByName("ntdll.dll", "RtlTryEnterCriticalSection")
Interceptor.attach(RtlTryEnterCriticalSection, {onLeave: function (args) {send("RtlTryEnterCriticalSection");}});

var RtlUTF8StringToUnicodeString = Module.findExportByName("ntdll.dll", "RtlUTF8StringToUnicodeString")
Interceptor.attach(RtlUTF8StringToUnicodeString, {onLeave: function (args) {send("RtlUTF8StringToUnicodeString");}});

var RtlUTF8ToUnicodeN = Module.findExportByName("ntdll.dll", "RtlUTF8ToUnicodeN")
Interceptor.attach(RtlUTF8ToUnicodeN, {onLeave: function (args) {send("RtlUTF8ToUnicodeN");}});

var RtlUdiv128 = Module.findExportByName("ntdll.dll", "RtlUdiv128")
Interceptor.attach(RtlUdiv128, {onLeave: function (args) {send("RtlUdiv128");}});

var RtlUmsThreadYield = Module.findExportByName("ntdll.dll", "RtlUmsThreadYield")
Interceptor.attach(RtlUmsThreadYield, {onLeave: function (args) {send("RtlUmsThreadYield");}});

var RtlUnhandledExceptionFilter = Module.findExportByName("ntdll.dll", "RtlUnhandledExceptionFilter")
Interceptor.attach(RtlUnhandledExceptionFilter, {onLeave: function (args) {send("RtlUnhandledExceptionFilter");}});

var RtlUnhandledExceptionFilter2 = Module.findExportByName("ntdll.dll", "RtlUnhandledExceptionFilter2")
Interceptor.attach(RtlUnhandledExceptionFilter2, {onLeave: function (args) {send("RtlUnhandledExceptionFilter2");}});

var RtlUnicodeStringToAnsiSize = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToAnsiSize")
Interceptor.attach(RtlUnicodeStringToAnsiSize, {onLeave: function (args) {send("RtlUnicodeStringToAnsiSize");}});

var RtlUnicodeStringToAnsiString = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToAnsiString")
Interceptor.attach(RtlUnicodeStringToAnsiString, {onLeave: function (args) {send("RtlUnicodeStringToAnsiString");}});

var RtlUnicodeStringToCountedOemString = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToCountedOemString")
Interceptor.attach(RtlUnicodeStringToCountedOemString, {onLeave: function (args) {send("RtlUnicodeStringToCountedOemString");}});

var RtlUnicodeStringToInteger = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToInteger")
Interceptor.attach(RtlUnicodeStringToInteger, {onLeave: function (args) {send("RtlUnicodeStringToInteger");}});

var RtlUnicodeStringToOemSize = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToOemSize")
Interceptor.attach(RtlUnicodeStringToOemSize, {onLeave: function (args) {send("RtlUnicodeStringToOemSize");}});

var RtlUnicodeStringToOemString = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToOemString")
Interceptor.attach(RtlUnicodeStringToOemString, {onLeave: function (args) {send("RtlUnicodeStringToOemString");}});

var RtlUnicodeStringToUTF8String = Module.findExportByName("ntdll.dll", "RtlUnicodeStringToUTF8String")
Interceptor.attach(RtlUnicodeStringToUTF8String, {onLeave: function (args) {send("RtlUnicodeStringToUTF8String");}});

var RtlUnicodeToCustomCPN = Module.findExportByName("ntdll.dll", "RtlUnicodeToCustomCPN")
Interceptor.attach(RtlUnicodeToCustomCPN, {onLeave: function (args) {send("RtlUnicodeToCustomCPN");}});

var RtlUnicodeToMultiByteN = Module.findExportByName("ntdll.dll", "RtlUnicodeToMultiByteN")
Interceptor.attach(RtlUnicodeToMultiByteN, {onLeave: function (args) {send("RtlUnicodeToMultiByteN");}});

var RtlUnicodeToMultiByteSize = Module.findExportByName("ntdll.dll", "RtlUnicodeToMultiByteSize")
Interceptor.attach(RtlUnicodeToMultiByteSize, {onLeave: function (args) {send("RtlUnicodeToMultiByteSize");}});

var RtlUnicodeToOemN = Module.findExportByName("ntdll.dll", "RtlUnicodeToOemN")
Interceptor.attach(RtlUnicodeToOemN, {onLeave: function (args) {send("RtlUnicodeToOemN");}});

var RtlUnicodeToUTF8N = Module.findExportByName("ntdll.dll", "RtlUnicodeToUTF8N")
Interceptor.attach(RtlUnicodeToUTF8N, {onLeave: function (args) {send("RtlUnicodeToUTF8N");}});

var RtlUniform = Module.findExportByName("ntdll.dll", "RtlUniform")
Interceptor.attach(RtlUniform, {onLeave: function (args) {send("RtlUniform");}});

var RtlUnlockBootStatusData = Module.findExportByName("ntdll.dll", "RtlUnlockBootStatusData")
Interceptor.attach(RtlUnlockBootStatusData, {onLeave: function (args) {send("RtlUnlockBootStatusData");}});

var RtlUnlockCurrentThread = Module.findExportByName("ntdll.dll", "RtlUnlockCurrentThread")
Interceptor.attach(RtlUnlockCurrentThread, {onLeave: function (args) {send("RtlUnlockCurrentThread");}});

var RtlUnlockHeap = Module.findExportByName("ntdll.dll", "RtlUnlockHeap")
Interceptor.attach(RtlUnlockHeap, {onLeave: function (args) {send("RtlUnlockHeap");}});

var RtlUnlockMemoryBlockLookaside = Module.findExportByName("ntdll.dll", "RtlUnlockMemoryBlockLookaside")
Interceptor.attach(RtlUnlockMemoryBlockLookaside, {onLeave: function (args) {send("RtlUnlockMemoryBlockLookaside");}});

var RtlUnlockMemoryStreamRegion = Module.findExportByName("ntdll.dll", "RtlUnlockMemoryStreamRegion")
Interceptor.attach(RtlUnlockMemoryStreamRegion, {onLeave: function (args) {send("RtlUnlockMemoryStreamRegion");}});

var RtlUnlockMemoryZone = Module.findExportByName("ntdll.dll", "RtlUnlockMemoryZone")
Interceptor.attach(RtlUnlockMemoryZone, {onLeave: function (args) {send("RtlUnlockMemoryZone");}});

var RtlUnlockModuleSection = Module.findExportByName("ntdll.dll", "RtlUnlockModuleSection")
Interceptor.attach(RtlUnlockModuleSection, {onLeave: function (args) {send("RtlUnlockModuleSection");}});

var RtlUnregisterFeatureConfigurationChangeNotification = Module.findExportByName("ntdll.dll", "RtlUnregisterFeatureConfigurationChangeNotification")
Interceptor.attach(RtlUnregisterFeatureConfigurationChangeNotification, {onLeave: function (args) {send("RtlUnregisterFeatureConfigurationChangeNotification");}});

var RtlUnsubscribeFromFeatureUsageNotifications = Module.findExportByName("ntdll.dll", "RtlUnsubscribeFromFeatureUsageNotifications")
Interceptor.attach(RtlUnsubscribeFromFeatureUsageNotifications, {onLeave: function (args) {send("RtlUnsubscribeFromFeatureUsageNotifications");}});

var RtlUnsubscribeWnfNotificationWaitForCompletion = Module.findExportByName("ntdll.dll", "RtlUnsubscribeWnfNotificationWaitForCompletion")
Interceptor.attach(RtlUnsubscribeWnfNotificationWaitForCompletion, {onLeave: function (args) {send("RtlUnsubscribeWnfNotificationWaitForCompletion");}});

var RtlUnsubscribeWnfNotificationWithCompletionCallback = Module.findExportByName("ntdll.dll", "RtlUnsubscribeWnfNotificationWithCompletionCallback")
Interceptor.attach(RtlUnsubscribeWnfNotificationWithCompletionCallback, {onLeave: function (args) {send("RtlUnsubscribeWnfNotificationWithCompletionCallback");}});

var RtlUnsubscribeWnfStateChangeNotification = Module.findExportByName("ntdll.dll", "RtlUnsubscribeWnfStateChangeNotification")
Interceptor.attach(RtlUnsubscribeWnfStateChangeNotification, {onLeave: function (args) {send("RtlUnsubscribeWnfStateChangeNotification");}});

var RtlUnwind = Module.findExportByName("ntdll.dll", "RtlUnwind")
Interceptor.attach(RtlUnwind, {onLeave: function (args) {send("RtlUnwind");}});

var RtlUnwindEx = Module.findExportByName("ntdll.dll", "RtlUnwindEx")
Interceptor.attach(RtlUnwindEx, {onLeave: function (args) {send("RtlUnwindEx");}});

var RtlUpcaseUnicodeChar = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeChar")
Interceptor.attach(RtlUpcaseUnicodeChar, {onLeave: function (args) {send("RtlUpcaseUnicodeChar");}});

var RtlUpcaseUnicodeString = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeString")
Interceptor.attach(RtlUpcaseUnicodeString, {onLeave: function (args) {send("RtlUpcaseUnicodeString");}});

var RtlUpcaseUnicodeStringToAnsiString = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeStringToAnsiString")
Interceptor.attach(RtlUpcaseUnicodeStringToAnsiString, {onLeave: function (args) {send("RtlUpcaseUnicodeStringToAnsiString");}});

var RtlUpcaseUnicodeStringToCountedOemString = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeStringToCountedOemString")
Interceptor.attach(RtlUpcaseUnicodeStringToCountedOemString, {onLeave: function (args) {send("RtlUpcaseUnicodeStringToCountedOemString");}});

var RtlUpcaseUnicodeStringToOemString = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeStringToOemString")
Interceptor.attach(RtlUpcaseUnicodeStringToOemString, {onLeave: function (args) {send("RtlUpcaseUnicodeStringToOemString");}});

var RtlUpcaseUnicodeToCustomCPN = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeToCustomCPN")
Interceptor.attach(RtlUpcaseUnicodeToCustomCPN, {onLeave: function (args) {send("RtlUpcaseUnicodeToCustomCPN");}});

var RtlUpcaseUnicodeToMultiByteN = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeToMultiByteN")
Interceptor.attach(RtlUpcaseUnicodeToMultiByteN, {onLeave: function (args) {send("RtlUpcaseUnicodeToMultiByteN");}});

var RtlUpcaseUnicodeToOemN = Module.findExportByName("ntdll.dll", "RtlUpcaseUnicodeToOemN")
Interceptor.attach(RtlUpcaseUnicodeToOemN, {onLeave: function (args) {send("RtlUpcaseUnicodeToOemN");}});

var RtlUpdateClonedCriticalSection = Module.findExportByName("ntdll.dll", "RtlUpdateClonedCriticalSection")
Interceptor.attach(RtlUpdateClonedCriticalSection, {onLeave: function (args) {send("RtlUpdateClonedCriticalSection");}});

var RtlUpdateClonedSRWLock = Module.findExportByName("ntdll.dll", "RtlUpdateClonedSRWLock")
Interceptor.attach(RtlUpdateClonedSRWLock, {onLeave: function (args) {send("RtlUpdateClonedSRWLock");}});

var RtlUpdateTimer = Module.findExportByName("ntdll.dll", "RtlUpdateTimer")
Interceptor.attach(RtlUpdateTimer, {onLeave: function (args) {send("RtlUpdateTimer");}});

var RtlUpperChar = Module.findExportByName("ntdll.dll", "RtlUpperChar")
Interceptor.attach(RtlUpperChar, {onLeave: function (args) {send("RtlUpperChar");}});

var RtlUpperString = Module.findExportByName("ntdll.dll", "RtlUpperString")
Interceptor.attach(RtlUpperString, {onLeave: function (args) {send("RtlUpperString");}});

var RtlUserFiberStart = Module.findExportByName("ntdll.dll", "RtlUserFiberStart")
Interceptor.attach(RtlUserFiberStart, {onLeave: function (args) {send("RtlUserFiberStart");}});

var RtlUserThreadStart = Module.findExportByName("ntdll.dll", "RtlUserThreadStart")
Interceptor.attach(RtlUserThreadStart, {onLeave: function (args) {send("RtlUserThreadStart");}});

var RtlValidAcl = Module.findExportByName("ntdll.dll", "RtlValidAcl")
Interceptor.attach(RtlValidAcl, {onLeave: function (args) {send("RtlValidAcl");}});

var RtlValidProcessProtection = Module.findExportByName("ntdll.dll", "RtlValidProcessProtection")
Interceptor.attach(RtlValidProcessProtection, {onLeave: function (args) {send("RtlValidProcessProtection");}});

var RtlValidRelativeSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlValidRelativeSecurityDescriptor")
Interceptor.attach(RtlValidRelativeSecurityDescriptor, {onLeave: function (args) {send("RtlValidRelativeSecurityDescriptor");}});

var RtlValidSecurityDescriptor = Module.findExportByName("ntdll.dll", "RtlValidSecurityDescriptor")
Interceptor.attach(RtlValidSecurityDescriptor, {onLeave: function (args) {send("RtlValidSecurityDescriptor");}});

var RtlValidSid = Module.findExportByName("ntdll.dll", "RtlValidSid")
Interceptor.attach(RtlValidSid, {onLeave: function (args) {send("RtlValidSid");}});

var RtlValidateCorrelationVector = Module.findExportByName("ntdll.dll", "RtlValidateCorrelationVector")
Interceptor.attach(RtlValidateCorrelationVector, {onLeave: function (args) {send("RtlValidateCorrelationVector");}});

var RtlValidateHeap = Module.findExportByName("ntdll.dll", "RtlValidateHeap")
Interceptor.attach(RtlValidateHeap, {onLeave: function (args) {send("RtlValidateHeap");}});

var RtlValidateProcessHeaps = Module.findExportByName("ntdll.dll", "RtlValidateProcessHeaps")
Interceptor.attach(RtlValidateProcessHeaps, {onLeave: function (args) {send("RtlValidateProcessHeaps");}});

var RtlValidateUnicodeString = Module.findExportByName("ntdll.dll", "RtlValidateUnicodeString")
Interceptor.attach(RtlValidateUnicodeString, {onLeave: function (args) {send("RtlValidateUnicodeString");}});

var RtlVerifyVersionInfo = Module.findExportByName("ntdll.dll", "RtlVerifyVersionInfo")
Interceptor.attach(RtlVerifyVersionInfo, {onLeave: function (args) {send("RtlVerifyVersionInfo");}});

var RtlVirtualUnwind = Module.findExportByName("ntdll.dll", "RtlVirtualUnwind")
Interceptor.attach(RtlVirtualUnwind, {onLeave: function (args) {send("RtlVirtualUnwind");}});

var RtlVirtualUnwind2 = Module.findExportByName("ntdll.dll", "RtlVirtualUnwind2")
Interceptor.attach(RtlVirtualUnwind2, {onLeave: function (args) {send("RtlVirtualUnwind2");}});

var RtlWaitForWnfMetaNotification = Module.findExportByName("ntdll.dll", "RtlWaitForWnfMetaNotification")
Interceptor.attach(RtlWaitForWnfMetaNotification, {onLeave: function (args) {send("RtlWaitForWnfMetaNotification");}});

var RtlWaitOnAddress = Module.findExportByName("ntdll.dll", "RtlWaitOnAddress")
Interceptor.attach(RtlWaitOnAddress, {onLeave: function (args) {send("RtlWaitOnAddress");}});

var RtlWakeAddressAll = Module.findExportByName("ntdll.dll", "RtlWakeAddressAll")
Interceptor.attach(RtlWakeAddressAll, {onLeave: function (args) {send("RtlWakeAddressAll");}});

var RtlWakeAddressAllNoFence = Module.findExportByName("ntdll.dll", "RtlWakeAddressAllNoFence")
Interceptor.attach(RtlWakeAddressAllNoFence, {onLeave: function (args) {send("RtlWakeAddressAllNoFence");}});

var RtlWakeAddressSingle = Module.findExportByName("ntdll.dll", "RtlWakeAddressSingle")
Interceptor.attach(RtlWakeAddressSingle, {onLeave: function (args) {send("RtlWakeAddressSingle");}});

var RtlWakeAddressSingleNoFence = Module.findExportByName("ntdll.dll", "RtlWakeAddressSingleNoFence")
Interceptor.attach(RtlWakeAddressSingleNoFence, {onLeave: function (args) {send("RtlWakeAddressSingleNoFence");}});

var RtlWakeAllConditionVariable = Module.findExportByName("ntdll.dll", "RtlWakeAllConditionVariable")
Interceptor.attach(RtlWakeAllConditionVariable, {onLeave: function (args) {send("RtlWakeAllConditionVariable");}});

var RtlWakeConditionVariable = Module.findExportByName("ntdll.dll", "RtlWakeConditionVariable")
Interceptor.attach(RtlWakeConditionVariable, {onLeave: function (args) {send("RtlWakeConditionVariable");}});

var RtlWalkFrameChain = Module.findExportByName("ntdll.dll", "RtlWalkFrameChain")
Interceptor.attach(RtlWalkFrameChain, {onLeave: function (args) {send("RtlWalkFrameChain");}});

var RtlWalkHeap = Module.findExportByName("ntdll.dll", "RtlWalkHeap")
Interceptor.attach(RtlWalkHeap, {onLeave: function (args) {send("RtlWalkHeap");}});

var RtlWeaklyEnumerateEntryHashTable = Module.findExportByName("ntdll.dll", "RtlWeaklyEnumerateEntryHashTable")
Interceptor.attach(RtlWeaklyEnumerateEntryHashTable, {onLeave: function (args) {send("RtlWeaklyEnumerateEntryHashTable");}});

var RtlWerpReportException = Module.findExportByName("ntdll.dll", "RtlWerpReportException")
Interceptor.attach(RtlWerpReportException, {onLeave: function (args) {send("RtlWerpReportException");}});

var RtlWnfCompareChangeStamp = Module.findExportByName("ntdll.dll", "RtlWnfCompareChangeStamp")
Interceptor.attach(RtlWnfCompareChangeStamp, {onLeave: function (args) {send("RtlWnfCompareChangeStamp");}});

var RtlWnfDllUnloadCallback = Module.findExportByName("ntdll.dll", "RtlWnfDllUnloadCallback")
Interceptor.attach(RtlWnfDllUnloadCallback, {onLeave: function (args) {send("RtlWnfDllUnloadCallback");}});

var RtlWow64CallFunction64 = Module.findExportByName("ntdll.dll", "RtlWow64CallFunction64")
Interceptor.attach(RtlWow64CallFunction64, {onLeave: function (args) {send("RtlWow64CallFunction64");}});

var RtlWow64ChangeProcessState = Module.findExportByName("ntdll.dll", "RtlWow64ChangeProcessState")
Interceptor.attach(RtlWow64ChangeProcessState, {onLeave: function (args) {send("RtlWow64ChangeProcessState");}});

var RtlWow64ChangeThreadState = Module.findExportByName("ntdll.dll", "RtlWow64ChangeThreadState")
Interceptor.attach(RtlWow64ChangeThreadState, {onLeave: function (args) {send("RtlWow64ChangeThreadState");}});

var RtlWow64EnableFsRedirection = Module.findExportByName("ntdll.dll", "RtlWow64EnableFsRedirection")
Interceptor.attach(RtlWow64EnableFsRedirection, {onLeave: function (args) {send("RtlWow64EnableFsRedirection");}});

var RtlWow64EnableFsRedirectionEx = Module.findExportByName("ntdll.dll", "RtlWow64EnableFsRedirectionEx")
Interceptor.attach(RtlWow64EnableFsRedirectionEx, {onLeave: function (args) {send("RtlWow64EnableFsRedirectionEx");}});

var RtlWow64GetCpuAreaInfo = Module.findExportByName("ntdll.dll", "RtlWow64GetCpuAreaInfo")
Interceptor.attach(RtlWow64GetCpuAreaInfo, {onLeave: function (args) {send("RtlWow64GetCpuAreaInfo");}});

var RtlWow64GetCurrentCpuArea = Module.findExportByName("ntdll.dll", "RtlWow64GetCurrentCpuArea")
Interceptor.attach(RtlWow64GetCurrentCpuArea, {onLeave: function (args) {send("RtlWow64GetCurrentCpuArea");}});

var RtlWow64GetCurrentMachine = Module.findExportByName("ntdll.dll", "RtlWow64GetCurrentMachine")
Interceptor.attach(RtlWow64GetCurrentMachine, {onLeave: function (args) {send("RtlWow64GetCurrentMachine");}});

var RtlWow64GetEquivalentMachineCHPE = Module.findExportByName("ntdll.dll", "RtlWow64GetEquivalentMachineCHPE")
Interceptor.attach(RtlWow64GetEquivalentMachineCHPE, {onLeave: function (args) {send("RtlWow64GetEquivalentMachineCHPE");}});

var RtlWow64GetProcessMachines = Module.findExportByName("ntdll.dll", "RtlWow64GetProcessMachines")
Interceptor.attach(RtlWow64GetProcessMachines, {onLeave: function (args) {send("RtlWow64GetProcessMachines");}});

var RtlWow64GetSharedInfoProcess = Module.findExportByName("ntdll.dll", "RtlWow64GetSharedInfoProcess")
Interceptor.attach(RtlWow64GetSharedInfoProcess, {onLeave: function (args) {send("RtlWow64GetSharedInfoProcess");}});

var RtlWow64GetThreadContext = Module.findExportByName("ntdll.dll", "RtlWow64GetThreadContext")
Interceptor.attach(RtlWow64GetThreadContext, {onLeave: function (args) {send("RtlWow64GetThreadContext");}});

var RtlWow64GetThreadSelectorEntry = Module.findExportByName("ntdll.dll", "RtlWow64GetThreadSelectorEntry")
Interceptor.attach(RtlWow64GetThreadSelectorEntry, {onLeave: function (args) {send("RtlWow64GetThreadSelectorEntry");}});

var RtlWow64IsWowGuestMachineSupported = Module.findExportByName("ntdll.dll", "RtlWow64IsWowGuestMachineSupported")
Interceptor.attach(RtlWow64IsWowGuestMachineSupported, {onLeave: function (args) {send("RtlWow64IsWowGuestMachineSupported");}});

var RtlWow64LogMessageInEventLogger = Module.findExportByName("ntdll.dll", "RtlWow64LogMessageInEventLogger")
Interceptor.attach(RtlWow64LogMessageInEventLogger, {onLeave: function (args) {send("RtlWow64LogMessageInEventLogger");}});

var RtlWow64PopAllCrossProcessWorkFromWorkList = Module.findExportByName("ntdll.dll", "RtlWow64PopAllCrossProcessWorkFromWorkList")
Interceptor.attach(RtlWow64PopAllCrossProcessWorkFromWorkList, {onLeave: function (args) {send("RtlWow64PopAllCrossProcessWorkFromWorkList");}});

var RtlWow64PopCrossProcessWorkFromFreeList = Module.findExportByName("ntdll.dll", "RtlWow64PopCrossProcessWorkFromFreeList")
Interceptor.attach(RtlWow64PopCrossProcessWorkFromFreeList, {onLeave: function (args) {send("RtlWow64PopCrossProcessWorkFromFreeList");}});

var RtlWow64PushCrossProcessWorkOntoFreeList = Module.findExportByName("ntdll.dll", "RtlWow64PushCrossProcessWorkOntoFreeList")
Interceptor.attach(RtlWow64PushCrossProcessWorkOntoFreeList, {onLeave: function (args) {send("RtlWow64PushCrossProcessWorkOntoFreeList");}});

var RtlWow64PushCrossProcessWorkOntoWorkList = Module.findExportByName("ntdll.dll", "RtlWow64PushCrossProcessWorkOntoWorkList")
Interceptor.attach(RtlWow64PushCrossProcessWorkOntoWorkList, {onLeave: function (args) {send("RtlWow64PushCrossProcessWorkOntoWorkList");}});

var RtlWow64RequestCrossProcessHeavyFlush = Module.findExportByName("ntdll.dll", "RtlWow64RequestCrossProcessHeavyFlush")
Interceptor.attach(RtlWow64RequestCrossProcessHeavyFlush, {onLeave: function (args) {send("RtlWow64RequestCrossProcessHeavyFlush");}});

var RtlWow64SetThreadContext = Module.findExportByName("ntdll.dll", "RtlWow64SetThreadContext")
Interceptor.attach(RtlWow64SetThreadContext, {onLeave: function (args) {send("RtlWow64SetThreadContext");}});

var RtlWow64SuspendProcess = Module.findExportByName("ntdll.dll", "RtlWow64SuspendProcess")
Interceptor.attach(RtlWow64SuspendProcess, {onLeave: function (args) {send("RtlWow64SuspendProcess");}});

var RtlWow64SuspendThread = Module.findExportByName("ntdll.dll", "RtlWow64SuspendThread")
Interceptor.attach(RtlWow64SuspendThread, {onLeave: function (args) {send("RtlWow64SuspendThread");}});

var RtlWriteMemoryStream = Module.findExportByName("ntdll.dll", "RtlWriteMemoryStream")
Interceptor.attach(RtlWriteMemoryStream, {onLeave: function (args) {send("RtlWriteMemoryStream");}});

var RtlWriteNonVolatileMemory = Module.findExportByName("ntdll.dll", "RtlWriteNonVolatileMemory")
Interceptor.attach(RtlWriteNonVolatileMemory, {onLeave: function (args) {send("RtlWriteNonVolatileMemory");}});

var RtlWriteRegistryValue = Module.findExportByName("ntdll.dll", "RtlWriteRegistryValue")
Interceptor.attach(RtlWriteRegistryValue, {onLeave: function (args) {send("RtlWriteRegistryValue");}});

var RtlZeroHeap = Module.findExportByName("ntdll.dll", "RtlZeroHeap")
Interceptor.attach(RtlZeroHeap, {onLeave: function (args) {send("RtlZeroHeap");}});

var RtlZeroMemory = Module.findExportByName("ntdll.dll", "RtlZeroMemory")
Interceptor.attach(RtlZeroMemory, {onLeave: function (args) {send("RtlZeroMemory");}});

var RtlZombifyActivationContext = Module.findExportByName("ntdll.dll", "RtlZombifyActivationContext")
Interceptor.attach(RtlZombifyActivationContext, {onLeave: function (args) {send("RtlZombifyActivationContext");}});

var RtlpApplyLengthFunction = Module.findExportByName("ntdll.dll", "RtlpApplyLengthFunction")
Interceptor.attach(RtlpApplyLengthFunction, {onLeave: function (args) {send("RtlpApplyLengthFunction");}});

var RtlpCheckDynamicTimeZoneInformation = Module.findExportByName("ntdll.dll", "RtlpCheckDynamicTimeZoneInformation")
Interceptor.attach(RtlpCheckDynamicTimeZoneInformation, {onLeave: function (args) {send("RtlpCheckDynamicTimeZoneInformation");}});

var RtlpCleanupRegistryKeys = Module.findExportByName("ntdll.dll", "RtlpCleanupRegistryKeys")
Interceptor.attach(RtlpCleanupRegistryKeys, {onLeave: function (args) {send("RtlpCleanupRegistryKeys");}});

var RtlpConvertAbsoluteToRelativeSecurityAttribute = Module.findExportByName("ntdll.dll", "RtlpConvertAbsoluteToRelativeSecurityAttribute")
Interceptor.attach(RtlpConvertAbsoluteToRelativeSecurityAttribute, {onLeave: function (args) {send("RtlpConvertAbsoluteToRelativeSecurityAttribute");}});

var RtlpConvertCultureNamesToLCIDs = Module.findExportByName("ntdll.dll", "RtlpConvertCultureNamesToLCIDs")
Interceptor.attach(RtlpConvertCultureNamesToLCIDs, {onLeave: function (args) {send("RtlpConvertCultureNamesToLCIDs");}});

var RtlpConvertLCIDsToCultureNames = Module.findExportByName("ntdll.dll", "RtlpConvertLCIDsToCultureNames")
Interceptor.attach(RtlpConvertLCIDsToCultureNames, {onLeave: function (args) {send("RtlpConvertLCIDsToCultureNames");}});

var RtlpConvertRelativeToAbsoluteSecurityAttribute = Module.findExportByName("ntdll.dll", "RtlpConvertRelativeToAbsoluteSecurityAttribute")
Interceptor.attach(RtlpConvertRelativeToAbsoluteSecurityAttribute, {onLeave: function (args) {send("RtlpConvertRelativeToAbsoluteSecurityAttribute");}});

var RtlpCreateProcessRegistryInfo = Module.findExportByName("ntdll.dll", "RtlpCreateProcessRegistryInfo")
Interceptor.attach(RtlpCreateProcessRegistryInfo, {onLeave: function (args) {send("RtlpCreateProcessRegistryInfo");}});

var RtlpEnsureBufferSize = Module.findExportByName("ntdll.dll", "RtlpEnsureBufferSize")
Interceptor.attach(RtlpEnsureBufferSize, {onLeave: function (args) {send("RtlpEnsureBufferSize");}});

var RtlpFreezeTimeBias = Module.findExportByName("ntdll.dll", "RtlpFreezeTimeBias")
Interceptor.attach(RtlpFreezeTimeBias, {onLeave: function (args) {send("RtlpFreezeTimeBias");}});

var RtlpGetDeviceFamilyInfoEnum = Module.findExportByName("ntdll.dll", "RtlpGetDeviceFamilyInfoEnum")
Interceptor.attach(RtlpGetDeviceFamilyInfoEnum, {onLeave: function (args) {send("RtlpGetDeviceFamilyInfoEnum");}});

var RtlpGetLCIDFromLangInfoNode = Module.findExportByName("ntdll.dll", "RtlpGetLCIDFromLangInfoNode")
Interceptor.attach(RtlpGetLCIDFromLangInfoNode, {onLeave: function (args) {send("RtlpGetLCIDFromLangInfoNode");}});

var RtlpGetNameFromLangInfoNode = Module.findExportByName("ntdll.dll", "RtlpGetNameFromLangInfoNode")
Interceptor.attach(RtlpGetNameFromLangInfoNode, {onLeave: function (args) {send("RtlpGetNameFromLangInfoNode");}});

var RtlpGetSystemDefaultUILanguage = Module.findExportByName("ntdll.dll", "RtlpGetSystemDefaultUILanguage")
Interceptor.attach(RtlpGetSystemDefaultUILanguage, {onLeave: function (args) {send("RtlpGetSystemDefaultUILanguage");}});

var RtlpGetUserOrMachineUILanguage4NLS = Module.findExportByName("ntdll.dll", "RtlpGetUserOrMachineUILanguage4NLS")
Interceptor.attach(RtlpGetUserOrMachineUILanguage4NLS, {onLeave: function (args) {send("RtlpGetUserOrMachineUILanguage4NLS");}});

var RtlpInitializeLangRegistryInfo = Module.findExportByName("ntdll.dll", "RtlpInitializeLangRegistryInfo")
Interceptor.attach(RtlpInitializeLangRegistryInfo, {onLeave: function (args) {send("RtlpInitializeLangRegistryInfo");}});

var RtlpIsQualifiedLanguage = Module.findExportByName("ntdll.dll", "RtlpIsQualifiedLanguage")
Interceptor.attach(RtlpIsQualifiedLanguage, {onLeave: function (args) {send("RtlpIsQualifiedLanguage");}});

var RtlpLoadMachineUIByPolicy = Module.findExportByName("ntdll.dll", "RtlpLoadMachineUIByPolicy")
Interceptor.attach(RtlpLoadMachineUIByPolicy, {onLeave: function (args) {send("RtlpLoadMachineUIByPolicy");}});

var RtlpLoadUserUIByPolicy = Module.findExportByName("ntdll.dll", "RtlpLoadUserUIByPolicy")
Interceptor.attach(RtlpLoadUserUIByPolicy, {onLeave: function (args) {send("RtlpLoadUserUIByPolicy");}});

var RtlpMergeSecurityAttributeInformation = Module.findExportByName("ntdll.dll", "RtlpMergeSecurityAttributeInformation")
Interceptor.attach(RtlpMergeSecurityAttributeInformation, {onLeave: function (args) {send("RtlpMergeSecurityAttributeInformation");}});

var RtlpMuiFreeLangRegistryInfo = Module.findExportByName("ntdll.dll", "RtlpMuiFreeLangRegistryInfo")
Interceptor.attach(RtlpMuiFreeLangRegistryInfo, {onLeave: function (args) {send("RtlpMuiFreeLangRegistryInfo");}});

var RtlpMuiRegCreateRegistryInfo = Module.findExportByName("ntdll.dll", "RtlpMuiRegCreateRegistryInfo")
Interceptor.attach(RtlpMuiRegCreateRegistryInfo, {onLeave: function (args) {send("RtlpMuiRegCreateRegistryInfo");}});

var RtlpMuiRegFreeRegistryInfo = Module.findExportByName("ntdll.dll", "RtlpMuiRegFreeRegistryInfo")
Interceptor.attach(RtlpMuiRegFreeRegistryInfo, {onLeave: function (args) {send("RtlpMuiRegFreeRegistryInfo");}});

var RtlpMuiRegLoadRegistryInfo = Module.findExportByName("ntdll.dll", "RtlpMuiRegLoadRegistryInfo")
Interceptor.attach(RtlpMuiRegLoadRegistryInfo, {onLeave: function (args) {send("RtlpMuiRegLoadRegistryInfo");}});

var RtlpNotOwnerCriticalSection = Module.findExportByName("ntdll.dll", "RtlpNotOwnerCriticalSection")
Interceptor.attach(RtlpNotOwnerCriticalSection, {onLeave: function (args) {send("RtlpNotOwnerCriticalSection");}});

var RtlpNtCreateKey = Module.findExportByName("ntdll.dll", "RtlpNtCreateKey")
Interceptor.attach(RtlpNtCreateKey, {onLeave: function (args) {send("RtlpNtCreateKey");}});

var RtlpNtEnumerateSubKey = Module.findExportByName("ntdll.dll", "RtlpNtEnumerateSubKey")
Interceptor.attach(RtlpNtEnumerateSubKey, {onLeave: function (args) {send("RtlpNtEnumerateSubKey");}});

var RtlpNtMakeTemporaryKey = Module.findExportByName("ntdll.dll", "RtlpNtMakeTemporaryKey")
Interceptor.attach(RtlpNtMakeTemporaryKey, {onLeave: function (args) {send("RtlpNtMakeTemporaryKey");}});

var RtlpNtOpenKey = Module.findExportByName("ntdll.dll", "RtlpNtOpenKey")
Interceptor.attach(RtlpNtOpenKey, {onLeave: function (args) {send("RtlpNtOpenKey");}});

var RtlpNtQueryValueKey = Module.findExportByName("ntdll.dll", "RtlpNtQueryValueKey")
Interceptor.attach(RtlpNtQueryValueKey, {onLeave: function (args) {send("RtlpNtQueryValueKey");}});

var RtlpNtSetValueKey = Module.findExportByName("ntdll.dll", "RtlpNtSetValueKey")
Interceptor.attach(RtlpNtSetValueKey, {onLeave: function (args) {send("RtlpNtSetValueKey");}});

var RtlpQueryDefaultUILanguage = Module.findExportByName("ntdll.dll", "RtlpQueryDefaultUILanguage")
Interceptor.attach(RtlpQueryDefaultUILanguage, {onLeave: function (args) {send("RtlpQueryDefaultUILanguage");}});

var RtlpQueryProcessDebugInformationFromWow64 = Module.findExportByName("ntdll.dll", "RtlpQueryProcessDebugInformationFromWow64")
Interceptor.attach(RtlpQueryProcessDebugInformationFromWow64, {onLeave: function (args) {send("RtlpQueryProcessDebugInformationFromWow64");}});

var RtlpQueryProcessDebugInformationRemote = Module.findExportByName("ntdll.dll", "RtlpQueryProcessDebugInformationRemote")
Interceptor.attach(RtlpQueryProcessDebugInformationRemote, {onLeave: function (args) {send("RtlpQueryProcessDebugInformationRemote");}});

var RtlpRefreshCachedUILanguage = Module.findExportByName("ntdll.dll", "RtlpRefreshCachedUILanguage")
Interceptor.attach(RtlpRefreshCachedUILanguage, {onLeave: function (args) {send("RtlpRefreshCachedUILanguage");}});

var RtlpSetInstallLanguage = Module.findExportByName("ntdll.dll", "RtlpSetInstallLanguage")
Interceptor.attach(RtlpSetInstallLanguage, {onLeave: function (args) {send("RtlpSetInstallLanguage");}});

var RtlpSetPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlpSetPreferredUILanguages")
Interceptor.attach(RtlpSetPreferredUILanguages, {onLeave: function (args) {send("RtlpSetPreferredUILanguages");}});

var RtlpSetUserPreferredUILanguages = Module.findExportByName("ntdll.dll", "RtlpSetUserPreferredUILanguages")
Interceptor.attach(RtlpSetUserPreferredUILanguages, {onLeave: function (args) {send("RtlpSetUserPreferredUILanguages");}});

var RtlpTimeFieldsToTime = Module.findExportByName("ntdll.dll", "RtlpTimeFieldsToTime")
Interceptor.attach(RtlpTimeFieldsToTime, {onLeave: function (args) {send("RtlpTimeFieldsToTime");}});

var RtlpTimeToTimeFields = Module.findExportByName("ntdll.dll", "RtlpTimeToTimeFields")
Interceptor.attach(RtlpTimeToTimeFields, {onLeave: function (args) {send("RtlpTimeToTimeFields");}});

var RtlpUnWaitCriticalSection = Module.findExportByName("ntdll.dll", "RtlpUnWaitCriticalSection")
Interceptor.attach(RtlpUnWaitCriticalSection, {onLeave: function (args) {send("RtlpUnWaitCriticalSection");}});

var RtlpVerifyAndCommitUILanguageSettings = Module.findExportByName("ntdll.dll", "RtlpVerifyAndCommitUILanguageSettings")
Interceptor.attach(RtlpVerifyAndCommitUILanguageSettings, {onLeave: function (args) {send("RtlpVerifyAndCommitUILanguageSettings");}});

var RtlpWaitForCriticalSection = Module.findExportByName("ntdll.dll", "RtlpWaitForCriticalSection")
Interceptor.attach(RtlpWaitForCriticalSection, {onLeave: function (args) {send("RtlpWaitForCriticalSection");}});

var RtlpWow64CtxFromAmd64 = Module.findExportByName("ntdll.dll", "RtlpWow64CtxFromAmd64")
Interceptor.attach(RtlpWow64CtxFromAmd64, {onLeave: function (args) {send("RtlpWow64CtxFromAmd64");}});

var RtlpWow64GetContextOnAmd64 = Module.findExportByName("ntdll.dll", "RtlpWow64GetContextOnAmd64")
Interceptor.attach(RtlpWow64GetContextOnAmd64, {onLeave: function (args) {send("RtlpWow64GetContextOnAmd64");}});

var RtlpWow64SetContextOnAmd64 = Module.findExportByName("ntdll.dll", "RtlpWow64SetContextOnAmd64")
Interceptor.attach(RtlpWow64SetContextOnAmd64, {onLeave: function (args) {send("RtlpWow64SetContextOnAmd64");}});

var RtlxAnsiStringToUnicodeSize = Module.findExportByName("ntdll.dll", "RtlxAnsiStringToUnicodeSize")
Interceptor.attach(RtlxAnsiStringToUnicodeSize, {onLeave: function (args) {send("RtlxAnsiStringToUnicodeSize");}});

var RtlxOemStringToUnicodeSize = Module.findExportByName("ntdll.dll", "RtlxOemStringToUnicodeSize")
Interceptor.attach(RtlxOemStringToUnicodeSize, {onLeave: function (args) {send("RtlxOemStringToUnicodeSize");}});

var RtlxUnicodeStringToAnsiSize = Module.findExportByName("ntdll.dll", "RtlxUnicodeStringToAnsiSize")
Interceptor.attach(RtlxUnicodeStringToAnsiSize, {onLeave: function (args) {send("RtlxUnicodeStringToAnsiSize");}});

var RtlxUnicodeStringToOemSize = Module.findExportByName("ntdll.dll", "RtlxUnicodeStringToOemSize")
Interceptor.attach(RtlxUnicodeStringToOemSize, {onLeave: function (args) {send("RtlxUnicodeStringToOemSize");}});

var SbExecuteProcedure = Module.findExportByName("ntdll.dll", "SbExecuteProcedure")
Interceptor.attach(SbExecuteProcedure, {onLeave: function (args) {send("SbExecuteProcedure");}});

var SbSelectProcedure = Module.findExportByName("ntdll.dll", "SbSelectProcedure")
Interceptor.attach(SbSelectProcedure, {onLeave: function (args) {send("SbSelectProcedure");}});

var ShipAssert = Module.findExportByName("ntdll.dll", "ShipAssert")
Interceptor.attach(ShipAssert, {onLeave: function (args) {send("ShipAssert");}});

var ShipAssertGetBufferInfo = Module.findExportByName("ntdll.dll", "ShipAssertGetBufferInfo")
Interceptor.attach(ShipAssertGetBufferInfo, {onLeave: function (args) {send("ShipAssertGetBufferInfo");}});

var ShipAssertMsgA = Module.findExportByName("ntdll.dll", "ShipAssertMsgA")
Interceptor.attach(ShipAssertMsgA, {onLeave: function (args) {send("ShipAssertMsgA");}});

var ShipAssertMsgW = Module.findExportByName("ntdll.dll", "ShipAssertMsgW")
Interceptor.attach(ShipAssertMsgW, {onLeave: function (args) {send("ShipAssertMsgW");}});

var TpAllocAlpcCompletion = Module.findExportByName("ntdll.dll", "TpAllocAlpcCompletion")
Interceptor.attach(TpAllocAlpcCompletion, {onLeave: function (args) {send("TpAllocAlpcCompletion");}});

var TpAllocAlpcCompletionEx = Module.findExportByName("ntdll.dll", "TpAllocAlpcCompletionEx")
Interceptor.attach(TpAllocAlpcCompletionEx, {onLeave: function (args) {send("TpAllocAlpcCompletionEx");}});

var TpAllocCleanupGroup = Module.findExportByName("ntdll.dll", "TpAllocCleanupGroup")
Interceptor.attach(TpAllocCleanupGroup, {onLeave: function (args) {send("TpAllocCleanupGroup");}});

var TpAllocIoCompletion = Module.findExportByName("ntdll.dll", "TpAllocIoCompletion")
Interceptor.attach(TpAllocIoCompletion, {onLeave: function (args) {send("TpAllocIoCompletion");}});

var TpAllocJobNotification = Module.findExportByName("ntdll.dll", "TpAllocJobNotification")
Interceptor.attach(TpAllocJobNotification, {onLeave: function (args) {send("TpAllocJobNotification");}});

var TpAllocPool = Module.findExportByName("ntdll.dll", "TpAllocPool")
Interceptor.attach(TpAllocPool, {onLeave: function (args) {send("TpAllocPool");}});

var TpAllocTimer = Module.findExportByName("ntdll.dll", "TpAllocTimer")
Interceptor.attach(TpAllocTimer, {onLeave: function (args) {send("TpAllocTimer");}});

var TpAllocWait = Module.findExportByName("ntdll.dll", "TpAllocWait")
Interceptor.attach(TpAllocWait, {onLeave: function (args) {send("TpAllocWait");}});

var TpAllocWork = Module.findExportByName("ntdll.dll", "TpAllocWork")
Interceptor.attach(TpAllocWork, {onLeave: function (args) {send("TpAllocWork");}});

var TpAlpcRegisterCompletionList = Module.findExportByName("ntdll.dll", "TpAlpcRegisterCompletionList")
Interceptor.attach(TpAlpcRegisterCompletionList, {onLeave: function (args) {send("TpAlpcRegisterCompletionList");}});

var TpAlpcUnregisterCompletionList = Module.findExportByName("ntdll.dll", "TpAlpcUnregisterCompletionList")
Interceptor.attach(TpAlpcUnregisterCompletionList, {onLeave: function (args) {send("TpAlpcUnregisterCompletionList");}});

var TpCallbackDetectedUnrecoverableError = Module.findExportByName("ntdll.dll", "TpCallbackDetectedUnrecoverableError")
Interceptor.attach(TpCallbackDetectedUnrecoverableError, {onLeave: function (args) {send("TpCallbackDetectedUnrecoverableError");}});

var TpCallbackIndependent = Module.findExportByName("ntdll.dll", "TpCallbackIndependent")
Interceptor.attach(TpCallbackIndependent, {onLeave: function (args) {send("TpCallbackIndependent");}});

var TpCallbackLeaveCriticalSectionOnCompletion = Module.findExportByName("ntdll.dll", "TpCallbackLeaveCriticalSectionOnCompletion")
Interceptor.attach(TpCallbackLeaveCriticalSectionOnCompletion, {onLeave: function (args) {send("TpCallbackLeaveCriticalSectionOnCompletion");}});

var TpCallbackMayRunLong = Module.findExportByName("ntdll.dll", "TpCallbackMayRunLong")
Interceptor.attach(TpCallbackMayRunLong, {onLeave: function (args) {send("TpCallbackMayRunLong");}});

var TpCallbackReleaseMutexOnCompletion = Module.findExportByName("ntdll.dll", "TpCallbackReleaseMutexOnCompletion")
Interceptor.attach(TpCallbackReleaseMutexOnCompletion, {onLeave: function (args) {send("TpCallbackReleaseMutexOnCompletion");}});

var TpCallbackReleaseSemaphoreOnCompletion = Module.findExportByName("ntdll.dll", "TpCallbackReleaseSemaphoreOnCompletion")
Interceptor.attach(TpCallbackReleaseSemaphoreOnCompletion, {onLeave: function (args) {send("TpCallbackReleaseSemaphoreOnCompletion");}});

var TpCallbackSendAlpcMessageOnCompletion = Module.findExportByName("ntdll.dll", "TpCallbackSendAlpcMessageOnCompletion")
Interceptor.attach(TpCallbackSendAlpcMessageOnCompletion, {onLeave: function (args) {send("TpCallbackSendAlpcMessageOnCompletion");}});

var TpCallbackSendPendingAlpcMessage = Module.findExportByName("ntdll.dll", "TpCallbackSendPendingAlpcMessage")
Interceptor.attach(TpCallbackSendPendingAlpcMessage, {onLeave: function (args) {send("TpCallbackSendPendingAlpcMessage");}});

var TpCallbackSetEventOnCompletion = Module.findExportByName("ntdll.dll", "TpCallbackSetEventOnCompletion")
Interceptor.attach(TpCallbackSetEventOnCompletion, {onLeave: function (args) {send("TpCallbackSetEventOnCompletion");}});

var TpCallbackUnloadDllOnCompletion = Module.findExportByName("ntdll.dll", "TpCallbackUnloadDllOnCompletion")
Interceptor.attach(TpCallbackUnloadDllOnCompletion, {onLeave: function (args) {send("TpCallbackUnloadDllOnCompletion");}});

var TpCancelAsyncIoOperation = Module.findExportByName("ntdll.dll", "TpCancelAsyncIoOperation")
Interceptor.attach(TpCancelAsyncIoOperation, {onLeave: function (args) {send("TpCancelAsyncIoOperation");}});

var TpCaptureCaller = Module.findExportByName("ntdll.dll", "TpCaptureCaller")
Interceptor.attach(TpCaptureCaller, {onLeave: function (args) {send("TpCaptureCaller");}});

var TpCheckTerminateWorker = Module.findExportByName("ntdll.dll", "TpCheckTerminateWorker")
Interceptor.attach(TpCheckTerminateWorker, {onLeave: function (args) {send("TpCheckTerminateWorker");}});

var TpDbgDumpHeapUsage = Module.findExportByName("ntdll.dll", "TpDbgDumpHeapUsage")
Interceptor.attach(TpDbgDumpHeapUsage, {onLeave: function (args) {send("TpDbgDumpHeapUsage");}});

var TpDbgSetLogRoutine = Module.findExportByName("ntdll.dll", "TpDbgSetLogRoutine")
Interceptor.attach(TpDbgSetLogRoutine, {onLeave: function (args) {send("TpDbgSetLogRoutine");}});

var TpDisablePoolCallbackChecks = Module.findExportByName("ntdll.dll", "TpDisablePoolCallbackChecks")
Interceptor.attach(TpDisablePoolCallbackChecks, {onLeave: function (args) {send("TpDisablePoolCallbackChecks");}});

var TpDisassociateCallback = Module.findExportByName("ntdll.dll", "TpDisassociateCallback")
Interceptor.attach(TpDisassociateCallback, {onLeave: function (args) {send("TpDisassociateCallback");}});

var TpIsTimerSet = Module.findExportByName("ntdll.dll", "TpIsTimerSet")
Interceptor.attach(TpIsTimerSet, {onLeave: function (args) {send("TpIsTimerSet");}});

var TpPostWork = Module.findExportByName("ntdll.dll", "TpPostWork")
Interceptor.attach(TpPostWork, {onLeave: function (args) {send("TpPostWork");}});

var TpQueryPoolStackInformation = Module.findExportByName("ntdll.dll", "TpQueryPoolStackInformation")
Interceptor.attach(TpQueryPoolStackInformation, {onLeave: function (args) {send("TpQueryPoolStackInformation");}});

var TpReleaseAlpcCompletion = Module.findExportByName("ntdll.dll", "TpReleaseAlpcCompletion")
Interceptor.attach(TpReleaseAlpcCompletion, {onLeave: function (args) {send("TpReleaseAlpcCompletion");}});

var TpReleaseCleanupGroup = Module.findExportByName("ntdll.dll", "TpReleaseCleanupGroup")
Interceptor.attach(TpReleaseCleanupGroup, {onLeave: function (args) {send("TpReleaseCleanupGroup");}});

var TpReleaseCleanupGroupMembers = Module.findExportByName("ntdll.dll", "TpReleaseCleanupGroupMembers")
Interceptor.attach(TpReleaseCleanupGroupMembers, {onLeave: function (args) {send("TpReleaseCleanupGroupMembers");}});

var TpReleaseIoCompletion = Module.findExportByName("ntdll.dll", "TpReleaseIoCompletion")
Interceptor.attach(TpReleaseIoCompletion, {onLeave: function (args) {send("TpReleaseIoCompletion");}});

var TpReleaseJobNotification = Module.findExportByName("ntdll.dll", "TpReleaseJobNotification")
Interceptor.attach(TpReleaseJobNotification, {onLeave: function (args) {send("TpReleaseJobNotification");}});

var TpReleasePool = Module.findExportByName("ntdll.dll", "TpReleasePool")
Interceptor.attach(TpReleasePool, {onLeave: function (args) {send("TpReleasePool");}});

var TpReleaseTimer = Module.findExportByName("ntdll.dll", "TpReleaseTimer")
Interceptor.attach(TpReleaseTimer, {onLeave: function (args) {send("TpReleaseTimer");}});

var TpReleaseWait = Module.findExportByName("ntdll.dll", "TpReleaseWait")
Interceptor.attach(TpReleaseWait, {onLeave: function (args) {send("TpReleaseWait");}});

var TpReleaseWork = Module.findExportByName("ntdll.dll", "TpReleaseWork")
Interceptor.attach(TpReleaseWork, {onLeave: function (args) {send("TpReleaseWork");}});

var TpSetDefaultPoolMaxThreads = Module.findExportByName("ntdll.dll", "TpSetDefaultPoolMaxThreads")
Interceptor.attach(TpSetDefaultPoolMaxThreads, {onLeave: function (args) {send("TpSetDefaultPoolMaxThreads");}});

var TpSetDefaultPoolStackInformation = Module.findExportByName("ntdll.dll", "TpSetDefaultPoolStackInformation")
Interceptor.attach(TpSetDefaultPoolStackInformation, {onLeave: function (args) {send("TpSetDefaultPoolStackInformation");}});

var TpSetPoolMaxThreads = Module.findExportByName("ntdll.dll", "TpSetPoolMaxThreads")
Interceptor.attach(TpSetPoolMaxThreads, {onLeave: function (args) {send("TpSetPoolMaxThreads");}});

var TpSetPoolMaxThreadsSoftLimit = Module.findExportByName("ntdll.dll", "TpSetPoolMaxThreadsSoftLimit")
Interceptor.attach(TpSetPoolMaxThreadsSoftLimit, {onLeave: function (args) {send("TpSetPoolMaxThreadsSoftLimit");}});

var TpSetPoolMinThreads = Module.findExportByName("ntdll.dll", "TpSetPoolMinThreads")
Interceptor.attach(TpSetPoolMinThreads, {onLeave: function (args) {send("TpSetPoolMinThreads");}});

var TpSetPoolStackInformation = Module.findExportByName("ntdll.dll", "TpSetPoolStackInformation")
Interceptor.attach(TpSetPoolStackInformation, {onLeave: function (args) {send("TpSetPoolStackInformation");}});

var TpSetPoolThreadBasePriority = Module.findExportByName("ntdll.dll", "TpSetPoolThreadBasePriority")
Interceptor.attach(TpSetPoolThreadBasePriority, {onLeave: function (args) {send("TpSetPoolThreadBasePriority");}});

var TpSetPoolThreadCpuSets = Module.findExportByName("ntdll.dll", "TpSetPoolThreadCpuSets")
Interceptor.attach(TpSetPoolThreadCpuSets, {onLeave: function (args) {send("TpSetPoolThreadCpuSets");}});

var TpSetPoolWorkerThreadIdleTimeout = Module.findExportByName("ntdll.dll", "TpSetPoolWorkerThreadIdleTimeout")
Interceptor.attach(TpSetPoolWorkerThreadIdleTimeout, {onLeave: function (args) {send("TpSetPoolWorkerThreadIdleTimeout");}});

var TpSetTimer = Module.findExportByName("ntdll.dll", "TpSetTimer")
Interceptor.attach(TpSetTimer, {onLeave: function (args) {send("TpSetTimer");}});

var TpSetTimerEx = Module.findExportByName("ntdll.dll", "TpSetTimerEx")
Interceptor.attach(TpSetTimerEx, {onLeave: function (args) {send("TpSetTimerEx");}});

var TpSetWait = Module.findExportByName("ntdll.dll", "TpSetWait")
Interceptor.attach(TpSetWait, {onLeave: function (args) {send("TpSetWait");}});

var TpSetWaitEx = Module.findExportByName("ntdll.dll", "TpSetWaitEx")
Interceptor.attach(TpSetWaitEx, {onLeave: function (args) {send("TpSetWaitEx");}});

var TpSimpleTryPost = Module.findExportByName("ntdll.dll", "TpSimpleTryPost")
Interceptor.attach(TpSimpleTryPost, {onLeave: function (args) {send("TpSimpleTryPost");}});

var TpStartAsyncIoOperation = Module.findExportByName("ntdll.dll", "TpStartAsyncIoOperation")
Interceptor.attach(TpStartAsyncIoOperation, {onLeave: function (args) {send("TpStartAsyncIoOperation");}});

var TpTimerOutstandingCallbackCount = Module.findExportByName("ntdll.dll", "TpTimerOutstandingCallbackCount")
Interceptor.attach(TpTimerOutstandingCallbackCount, {onLeave: function (args) {send("TpTimerOutstandingCallbackCount");}});

var TpTrimPools = Module.findExportByName("ntdll.dll", "TpTrimPools")
Interceptor.attach(TpTrimPools, {onLeave: function (args) {send("TpTrimPools");}});

var TpWaitForAlpcCompletion = Module.findExportByName("ntdll.dll", "TpWaitForAlpcCompletion")
Interceptor.attach(TpWaitForAlpcCompletion, {onLeave: function (args) {send("TpWaitForAlpcCompletion");}});

var TpWaitForIoCompletion = Module.findExportByName("ntdll.dll", "TpWaitForIoCompletion")
Interceptor.attach(TpWaitForIoCompletion, {onLeave: function (args) {send("TpWaitForIoCompletion");}});

var TpWaitForJobNotification = Module.findExportByName("ntdll.dll", "TpWaitForJobNotification")
Interceptor.attach(TpWaitForJobNotification, {onLeave: function (args) {send("TpWaitForJobNotification");}});

var TpWaitForTimer = Module.findExportByName("ntdll.dll", "TpWaitForTimer")
Interceptor.attach(TpWaitForTimer, {onLeave: function (args) {send("TpWaitForTimer");}});

var TpWaitForWait = Module.findExportByName("ntdll.dll", "TpWaitForWait")
Interceptor.attach(TpWaitForWait, {onLeave: function (args) {send("TpWaitForWait");}});

var TpWaitForWork = Module.findExportByName("ntdll.dll", "TpWaitForWork")
Interceptor.attach(TpWaitForWork, {onLeave: function (args) {send("TpWaitForWork");}});

var TpWorkOnBehalfClearTicket = Module.findExportByName("ntdll.dll", "TpWorkOnBehalfClearTicket")
Interceptor.attach(TpWorkOnBehalfClearTicket, {onLeave: function (args) {send("TpWorkOnBehalfClearTicket");}});

var TpWorkOnBehalfSetTicket = Module.findExportByName("ntdll.dll", "TpWorkOnBehalfSetTicket")
Interceptor.attach(TpWorkOnBehalfSetTicket, {onLeave: function (args) {send("TpWorkOnBehalfSetTicket");}});

var VerSetConditionMask = Module.findExportByName("ntdll.dll", "VerSetConditionMask")
Interceptor.attach(VerSetConditionMask, {onLeave: function (args) {send("VerSetConditionMask");}});

var WerReportExceptionWorker = Module.findExportByName("ntdll.dll", "WerReportExceptionWorker")
Interceptor.attach(WerReportExceptionWorker, {onLeave: function (args) {send("WerReportExceptionWorker");}});

var WerReportSQMEvent = Module.findExportByName("ntdll.dll", "WerReportSQMEvent")
Interceptor.attach(WerReportSQMEvent, {onLeave: function (args) {send("WerReportSQMEvent");}});

var WinSqmAddToAverageDWORD = Module.findExportByName("ntdll.dll", "WinSqmAddToAverageDWORD")
Interceptor.attach(WinSqmAddToAverageDWORD, {onLeave: function (args) {send("WinSqmAddToAverageDWORD");}});

var WinSqmAddToStream = Module.findExportByName("ntdll.dll", "WinSqmAddToStream")
Interceptor.attach(WinSqmAddToStream, {onLeave: function (args) {send("WinSqmAddToStream");}});

var WinSqmAddToStreamEx = Module.findExportByName("ntdll.dll", "WinSqmAddToStreamEx")
Interceptor.attach(WinSqmAddToStreamEx, {onLeave: function (args) {send("WinSqmAddToStreamEx");}});

var WinSqmCheckEscalationAddToStreamEx = Module.findExportByName("ntdll.dll", "WinSqmCheckEscalationAddToStreamEx")
Interceptor.attach(WinSqmCheckEscalationAddToStreamEx, {onLeave: function (args) {send("WinSqmCheckEscalationAddToStreamEx");}});

var WinSqmCheckEscalationSetDWORD = Module.findExportByName("ntdll.dll", "WinSqmCheckEscalationSetDWORD")
Interceptor.attach(WinSqmCheckEscalationSetDWORD, {onLeave: function (args) {send("WinSqmCheckEscalationSetDWORD");}});

var WinSqmCheckEscalationSetDWORD64 = Module.findExportByName("ntdll.dll", "WinSqmCheckEscalationSetDWORD64")
Interceptor.attach(WinSqmCheckEscalationSetDWORD64, {onLeave: function (args) {send("WinSqmCheckEscalationSetDWORD64");}});

var WinSqmCheckEscalationSetString = Module.findExportByName("ntdll.dll", "WinSqmCheckEscalationSetString")
Interceptor.attach(WinSqmCheckEscalationSetString, {onLeave: function (args) {send("WinSqmCheckEscalationSetString");}});

var WinSqmCommonDatapointDelete = Module.findExportByName("ntdll.dll", "WinSqmCommonDatapointDelete")
Interceptor.attach(WinSqmCommonDatapointDelete, {onLeave: function (args) {send("WinSqmCommonDatapointDelete");}});

var WinSqmCommonDatapointSetDWORD = Module.findExportByName("ntdll.dll", "WinSqmCommonDatapointSetDWORD")
Interceptor.attach(WinSqmCommonDatapointSetDWORD, {onLeave: function (args) {send("WinSqmCommonDatapointSetDWORD");}});

var WinSqmCommonDatapointSetDWORD64 = Module.findExportByName("ntdll.dll", "WinSqmCommonDatapointSetDWORD64")
Interceptor.attach(WinSqmCommonDatapointSetDWORD64, {onLeave: function (args) {send("WinSqmCommonDatapointSetDWORD64");}});

var WinSqmCommonDatapointSetStreamEx = Module.findExportByName("ntdll.dll", "WinSqmCommonDatapointSetStreamEx")
Interceptor.attach(WinSqmCommonDatapointSetStreamEx, {onLeave: function (args) {send("WinSqmCommonDatapointSetStreamEx");}});

var WinSqmCommonDatapointSetString = Module.findExportByName("ntdll.dll", "WinSqmCommonDatapointSetString")
Interceptor.attach(WinSqmCommonDatapointSetString, {onLeave: function (args) {send("WinSqmCommonDatapointSetString");}});

var WinSqmEndSession = Module.findExportByName("ntdll.dll", "WinSqmEndSession")
Interceptor.attach(WinSqmEndSession, {onLeave: function (args) {send("WinSqmEndSession");}});

var WinSqmEventEnabled = Module.findExportByName("ntdll.dll", "WinSqmEventEnabled")
Interceptor.attach(WinSqmEventEnabled, {onLeave: function (args) {send("WinSqmEventEnabled");}});

var WinSqmEventWrite = Module.findExportByName("ntdll.dll", "WinSqmEventWrite")
Interceptor.attach(WinSqmEventWrite, {onLeave: function (args) {send("WinSqmEventWrite");}});

var WinSqmGetEscalationRuleStatus = Module.findExportByName("ntdll.dll", "WinSqmGetEscalationRuleStatus")
Interceptor.attach(WinSqmGetEscalationRuleStatus, {onLeave: function (args) {send("WinSqmGetEscalationRuleStatus");}});

var WinSqmGetInstrumentationProperty = Module.findExportByName("ntdll.dll", "WinSqmGetInstrumentationProperty")
Interceptor.attach(WinSqmGetInstrumentationProperty, {onLeave: function (args) {send("WinSqmGetInstrumentationProperty");}});

var WinSqmIncrementDWORD = Module.findExportByName("ntdll.dll", "WinSqmIncrementDWORD")
Interceptor.attach(WinSqmIncrementDWORD, {onLeave: function (args) {send("WinSqmIncrementDWORD");}});

var WinSqmIsOptedIn = Module.findExportByName("ntdll.dll", "WinSqmIsOptedIn")
Interceptor.attach(WinSqmIsOptedIn, {onLeave: function (args) {send("WinSqmIsOptedIn");}});

var WinSqmIsOptedInEx = Module.findExportByName("ntdll.dll", "WinSqmIsOptedInEx")
Interceptor.attach(WinSqmIsOptedInEx, {onLeave: function (args) {send("WinSqmIsOptedInEx");}});

var WinSqmIsSessionDisabled = Module.findExportByName("ntdll.dll", "WinSqmIsSessionDisabled")
Interceptor.attach(WinSqmIsSessionDisabled, {onLeave: function (args) {send("WinSqmIsSessionDisabled");}});

var WinSqmSetDWORD = Module.findExportByName("ntdll.dll", "WinSqmSetDWORD")
Interceptor.attach(WinSqmSetDWORD, {onLeave: function (args) {send("WinSqmSetDWORD");}});

var WinSqmSetDWORD64 = Module.findExportByName("ntdll.dll", "WinSqmSetDWORD64")
Interceptor.attach(WinSqmSetDWORD64, {onLeave: function (args) {send("WinSqmSetDWORD64");}});

var WinSqmSetEscalationInfo = Module.findExportByName("ntdll.dll", "WinSqmSetEscalationInfo")
Interceptor.attach(WinSqmSetEscalationInfo, {onLeave: function (args) {send("WinSqmSetEscalationInfo");}});

var WinSqmSetIfMaxDWORD = Module.findExportByName("ntdll.dll", "WinSqmSetIfMaxDWORD")
Interceptor.attach(WinSqmSetIfMaxDWORD, {onLeave: function (args) {send("WinSqmSetIfMaxDWORD");}});

var WinSqmSetIfMinDWORD = Module.findExportByName("ntdll.dll", "WinSqmSetIfMinDWORD")
Interceptor.attach(WinSqmSetIfMinDWORD, {onLeave: function (args) {send("WinSqmSetIfMinDWORD");}});

var WinSqmSetString = Module.findExportByName("ntdll.dll", "WinSqmSetString")
Interceptor.attach(WinSqmSetString, {onLeave: function (args) {send("WinSqmSetString");}});

var WinSqmStartSession = Module.findExportByName("ntdll.dll", "WinSqmStartSession")
Interceptor.attach(WinSqmStartSession, {onLeave: function (args) {send("WinSqmStartSession");}});

var WinSqmStartSessionForPartner = Module.findExportByName("ntdll.dll", "WinSqmStartSessionForPartner")
Interceptor.attach(WinSqmStartSessionForPartner, {onLeave: function (args) {send("WinSqmStartSessionForPartner");}});

var WinSqmStartSqmOptinListener = Module.findExportByName("ntdll.dll", "WinSqmStartSqmOptinListener")
Interceptor.attach(WinSqmStartSqmOptinListener, {onLeave: function (args) {send("WinSqmStartSqmOptinListener");}});

var ZwAcceptConnectPort = Module.findExportByName("ntdll.dll", "ZwAcceptConnectPort")
Interceptor.attach(ZwAcceptConnectPort, {onLeave: function (args) {send("ZwAcceptConnectPort");}});

var ZwAccessCheck = Module.findExportByName("ntdll.dll", "ZwAccessCheck")
Interceptor.attach(ZwAccessCheck, {onLeave: function (args) {send("ZwAccessCheck");}});

var ZwAccessCheckAndAuditAlarm = Module.findExportByName("ntdll.dll", "ZwAccessCheckAndAuditAlarm")
Interceptor.attach(ZwAccessCheckAndAuditAlarm, {onLeave: function (args) {send("ZwAccessCheckAndAuditAlarm");}});

var ZwAccessCheckByType = Module.findExportByName("ntdll.dll", "ZwAccessCheckByType")
Interceptor.attach(ZwAccessCheckByType, {onLeave: function (args) {send("ZwAccessCheckByType");}});

var ZwAccessCheckByTypeAndAuditAlarm = Module.findExportByName("ntdll.dll", "ZwAccessCheckByTypeAndAuditAlarm")
Interceptor.attach(ZwAccessCheckByTypeAndAuditAlarm, {onLeave: function (args) {send("ZwAccessCheckByTypeAndAuditAlarm");}});

var ZwAccessCheckByTypeResultList = Module.findExportByName("ntdll.dll", "ZwAccessCheckByTypeResultList")
Interceptor.attach(ZwAccessCheckByTypeResultList, {onLeave: function (args) {send("ZwAccessCheckByTypeResultList");}});

var ZwAccessCheckByTypeResultListAndAuditAlarm = Module.findExportByName("ntdll.dll", "ZwAccessCheckByTypeResultListAndAuditAlarm")
Interceptor.attach(ZwAccessCheckByTypeResultListAndAuditAlarm, {onLeave: function (args) {send("ZwAccessCheckByTypeResultListAndAuditAlarm");}});

var ZwAccessCheckByTypeResultListAndAuditAlarmByHandle = Module.findExportByName("ntdll.dll", "ZwAccessCheckByTypeResultListAndAuditAlarmByHandle")
Interceptor.attach(ZwAccessCheckByTypeResultListAndAuditAlarmByHandle, {onLeave: function (args) {send("ZwAccessCheckByTypeResultListAndAuditAlarmByHandle");}});

var ZwAcquireCrossVmMutant = Module.findExportByName("ntdll.dll", "ZwAcquireCrossVmMutant")
Interceptor.attach(ZwAcquireCrossVmMutant, {onLeave: function (args) {send("ZwAcquireCrossVmMutant");}});

var ZwAcquireProcessActivityReference = Module.findExportByName("ntdll.dll", "ZwAcquireProcessActivityReference")
Interceptor.attach(ZwAcquireProcessActivityReference, {onLeave: function (args) {send("ZwAcquireProcessActivityReference");}});

var ZwAddAtom = Module.findExportByName("ntdll.dll", "ZwAddAtom")
Interceptor.attach(ZwAddAtom, {onLeave: function (args) {send("ZwAddAtom");}});

var ZwAddAtomEx = Module.findExportByName("ntdll.dll", "ZwAddAtomEx")
Interceptor.attach(ZwAddAtomEx, {onLeave: function (args) {send("ZwAddAtomEx");}});

var ZwAddBootEntry = Module.findExportByName("ntdll.dll", "ZwAddBootEntry")
Interceptor.attach(ZwAddBootEntry, {onLeave: function (args) {send("ZwAddBootEntry");}});

var ZwAddDriverEntry = Module.findExportByName("ntdll.dll", "ZwAddDriverEntry")
Interceptor.attach(ZwAddDriverEntry, {onLeave: function (args) {send("ZwAddDriverEntry");}});

var ZwAdjustGroupsToken = Module.findExportByName("ntdll.dll", "ZwAdjustGroupsToken")
Interceptor.attach(ZwAdjustGroupsToken, {onLeave: function (args) {send("ZwAdjustGroupsToken");}});

var ZwAdjustPrivilegesToken = Module.findExportByName("ntdll.dll", "ZwAdjustPrivilegesToken")
Interceptor.attach(ZwAdjustPrivilegesToken, {onLeave: function (args) {send("ZwAdjustPrivilegesToken");}});

var ZwAdjustTokenClaimsAndDeviceGroups = Module.findExportByName("ntdll.dll", "ZwAdjustTokenClaimsAndDeviceGroups")
Interceptor.attach(ZwAdjustTokenClaimsAndDeviceGroups, {onLeave: function (args) {send("ZwAdjustTokenClaimsAndDeviceGroups");}});

var ZwAlertResumeThread = Module.findExportByName("ntdll.dll", "ZwAlertResumeThread")
Interceptor.attach(ZwAlertResumeThread, {onLeave: function (args) {send("ZwAlertResumeThread");}});

var ZwAlertThread = Module.findExportByName("ntdll.dll", "ZwAlertThread")
Interceptor.attach(ZwAlertThread, {onLeave: function (args) {send("ZwAlertThread");}});

var ZwAlertThreadByThreadId = Module.findExportByName("ntdll.dll", "ZwAlertThreadByThreadId")
Interceptor.attach(ZwAlertThreadByThreadId, {onLeave: function (args) {send("ZwAlertThreadByThreadId");}});

var ZwAllocateLocallyUniqueId = Module.findExportByName("ntdll.dll", "ZwAllocateLocallyUniqueId")
Interceptor.attach(ZwAllocateLocallyUniqueId, {onLeave: function (args) {send("ZwAllocateLocallyUniqueId");}});

var ZwAllocateReserveObject = Module.findExportByName("ntdll.dll", "ZwAllocateReserveObject")
Interceptor.attach(ZwAllocateReserveObject, {onLeave: function (args) {send("ZwAllocateReserveObject");}});

var ZwAllocateUserPhysicalPages = Module.findExportByName("ntdll.dll", "ZwAllocateUserPhysicalPages")
Interceptor.attach(ZwAllocateUserPhysicalPages, {onLeave: function (args) {send("ZwAllocateUserPhysicalPages");}});

var ZwAllocateUserPhysicalPagesEx = Module.findExportByName("ntdll.dll", "ZwAllocateUserPhysicalPagesEx")
Interceptor.attach(ZwAllocateUserPhysicalPagesEx, {onLeave: function (args) {send("ZwAllocateUserPhysicalPagesEx");}});

var ZwAllocateUuids = Module.findExportByName("ntdll.dll", "ZwAllocateUuids")
Interceptor.attach(ZwAllocateUuids, {onLeave: function (args) {send("ZwAllocateUuids");}});

var ZwAllocateVirtualMemory = Module.findExportByName("ntdll.dll", "ZwAllocateVirtualMemory")
Interceptor.attach(ZwAllocateVirtualMemory, {onLeave: function (args) {send("ZwAllocateVirtualMemory");}});

var ZwAllocateVirtualMemoryEx = Module.findExportByName("ntdll.dll", "ZwAllocateVirtualMemoryEx")
Interceptor.attach(ZwAllocateVirtualMemoryEx, {onLeave: function (args) {send("ZwAllocateVirtualMemoryEx");}});

var ZwAlpcAcceptConnectPort = Module.findExportByName("ntdll.dll", "ZwAlpcAcceptConnectPort")
Interceptor.attach(ZwAlpcAcceptConnectPort, {onLeave: function (args) {send("ZwAlpcAcceptConnectPort");}});

var ZwAlpcCancelMessage = Module.findExportByName("ntdll.dll", "ZwAlpcCancelMessage")
Interceptor.attach(ZwAlpcCancelMessage, {onLeave: function (args) {send("ZwAlpcCancelMessage");}});

var ZwAlpcConnectPort = Module.findExportByName("ntdll.dll", "ZwAlpcConnectPort")
Interceptor.attach(ZwAlpcConnectPort, {onLeave: function (args) {send("ZwAlpcConnectPort");}});

var ZwAlpcConnectPortEx = Module.findExportByName("ntdll.dll", "ZwAlpcConnectPortEx")
Interceptor.attach(ZwAlpcConnectPortEx, {onLeave: function (args) {send("ZwAlpcConnectPortEx");}});

var ZwAlpcCreatePort = Module.findExportByName("ntdll.dll", "ZwAlpcCreatePort")
Interceptor.attach(ZwAlpcCreatePort, {onLeave: function (args) {send("ZwAlpcCreatePort");}});

var ZwAlpcCreatePortSection = Module.findExportByName("ntdll.dll", "ZwAlpcCreatePortSection")
Interceptor.attach(ZwAlpcCreatePortSection, {onLeave: function (args) {send("ZwAlpcCreatePortSection");}});

var ZwAlpcCreateResourceReserve = Module.findExportByName("ntdll.dll", "ZwAlpcCreateResourceReserve")
Interceptor.attach(ZwAlpcCreateResourceReserve, {onLeave: function (args) {send("ZwAlpcCreateResourceReserve");}});

var ZwAlpcCreateSectionView = Module.findExportByName("ntdll.dll", "ZwAlpcCreateSectionView")
Interceptor.attach(ZwAlpcCreateSectionView, {onLeave: function (args) {send("ZwAlpcCreateSectionView");}});

var ZwAlpcCreateSecurityContext = Module.findExportByName("ntdll.dll", "ZwAlpcCreateSecurityContext")
Interceptor.attach(ZwAlpcCreateSecurityContext, {onLeave: function (args) {send("ZwAlpcCreateSecurityContext");}});

var ZwAlpcDeletePortSection = Module.findExportByName("ntdll.dll", "ZwAlpcDeletePortSection")
Interceptor.attach(ZwAlpcDeletePortSection, {onLeave: function (args) {send("ZwAlpcDeletePortSection");}});

var ZwAlpcDeleteResourceReserve = Module.findExportByName("ntdll.dll", "ZwAlpcDeleteResourceReserve")
Interceptor.attach(ZwAlpcDeleteResourceReserve, {onLeave: function (args) {send("ZwAlpcDeleteResourceReserve");}});

var ZwAlpcDeleteSectionView = Module.findExportByName("ntdll.dll", "ZwAlpcDeleteSectionView")
Interceptor.attach(ZwAlpcDeleteSectionView, {onLeave: function (args) {send("ZwAlpcDeleteSectionView");}});

var ZwAlpcDeleteSecurityContext = Module.findExportByName("ntdll.dll", "ZwAlpcDeleteSecurityContext")
Interceptor.attach(ZwAlpcDeleteSecurityContext, {onLeave: function (args) {send("ZwAlpcDeleteSecurityContext");}});

var ZwAlpcDisconnectPort = Module.findExportByName("ntdll.dll", "ZwAlpcDisconnectPort")
Interceptor.attach(ZwAlpcDisconnectPort, {onLeave: function (args) {send("ZwAlpcDisconnectPort");}});

var ZwAlpcImpersonateClientContainerOfPort = Module.findExportByName("ntdll.dll", "ZwAlpcImpersonateClientContainerOfPort")
Interceptor.attach(ZwAlpcImpersonateClientContainerOfPort, {onLeave: function (args) {send("ZwAlpcImpersonateClientContainerOfPort");}});

var ZwAlpcImpersonateClientOfPort = Module.findExportByName("ntdll.dll", "ZwAlpcImpersonateClientOfPort")
Interceptor.attach(ZwAlpcImpersonateClientOfPort, {onLeave: function (args) {send("ZwAlpcImpersonateClientOfPort");}});

var ZwAlpcOpenSenderProcess = Module.findExportByName("ntdll.dll", "ZwAlpcOpenSenderProcess")
Interceptor.attach(ZwAlpcOpenSenderProcess, {onLeave: function (args) {send("ZwAlpcOpenSenderProcess");}});

var ZwAlpcOpenSenderThread = Module.findExportByName("ntdll.dll", "ZwAlpcOpenSenderThread")
Interceptor.attach(ZwAlpcOpenSenderThread, {onLeave: function (args) {send("ZwAlpcOpenSenderThread");}});

var ZwAlpcQueryInformation = Module.findExportByName("ntdll.dll", "ZwAlpcQueryInformation")
Interceptor.attach(ZwAlpcQueryInformation, {onLeave: function (args) {send("ZwAlpcQueryInformation");}});

var ZwAlpcQueryInformationMessage = Module.findExportByName("ntdll.dll", "ZwAlpcQueryInformationMessage")
Interceptor.attach(ZwAlpcQueryInformationMessage, {onLeave: function (args) {send("ZwAlpcQueryInformationMessage");}});

var ZwAlpcRevokeSecurityContext = Module.findExportByName("ntdll.dll", "ZwAlpcRevokeSecurityContext")
Interceptor.attach(ZwAlpcRevokeSecurityContext, {onLeave: function (args) {send("ZwAlpcRevokeSecurityContext");}});

var ZwAlpcSendWaitReceivePort = Module.findExportByName("ntdll.dll", "ZwAlpcSendWaitReceivePort")
Interceptor.attach(ZwAlpcSendWaitReceivePort, {onLeave: function (args) {send("ZwAlpcSendWaitReceivePort");}});

var ZwAlpcSetInformation = Module.findExportByName("ntdll.dll", "ZwAlpcSetInformation")
Interceptor.attach(ZwAlpcSetInformation, {onLeave: function (args) {send("ZwAlpcSetInformation");}});

var ZwApphelpCacheControl = Module.findExportByName("ntdll.dll", "ZwApphelpCacheControl")
Interceptor.attach(ZwApphelpCacheControl, {onLeave: function (args) {send("ZwApphelpCacheControl");}});

var ZwAreMappedFilesTheSame = Module.findExportByName("ntdll.dll", "ZwAreMappedFilesTheSame")
Interceptor.attach(ZwAreMappedFilesTheSame, {onLeave: function (args) {send("ZwAreMappedFilesTheSame");}});

var ZwAssignProcessToJobObject = Module.findExportByName("ntdll.dll", "ZwAssignProcessToJobObject")
Interceptor.attach(ZwAssignProcessToJobObject, {onLeave: function (args) {send("ZwAssignProcessToJobObject");}});

var ZwAssociateWaitCompletionPacket = Module.findExportByName("ntdll.dll", "ZwAssociateWaitCompletionPacket")
Interceptor.attach(ZwAssociateWaitCompletionPacket, {onLeave: function (args) {send("ZwAssociateWaitCompletionPacket");}});

var ZwCallEnclave = Module.findExportByName("ntdll.dll", "ZwCallEnclave")
Interceptor.attach(ZwCallEnclave, {onLeave: function (args) {send("ZwCallEnclave");}});

var ZwCallbackReturn = Module.findExportByName("ntdll.dll", "ZwCallbackReturn")
Interceptor.attach(ZwCallbackReturn, {onLeave: function (args) {send("ZwCallbackReturn");}});

var ZwCancelIoFile = Module.findExportByName("ntdll.dll", "ZwCancelIoFile")
Interceptor.attach(ZwCancelIoFile, {onLeave: function (args) {send("ZwCancelIoFile");}});

var ZwCancelIoFileEx = Module.findExportByName("ntdll.dll", "ZwCancelIoFileEx")
Interceptor.attach(ZwCancelIoFileEx, {onLeave: function (args) {send("ZwCancelIoFileEx");}});

var ZwCancelSynchronousIoFile = Module.findExportByName("ntdll.dll", "ZwCancelSynchronousIoFile")
Interceptor.attach(ZwCancelSynchronousIoFile, {onLeave: function (args) {send("ZwCancelSynchronousIoFile");}});

var ZwCancelTimer = Module.findExportByName("ntdll.dll", "ZwCancelTimer")
Interceptor.attach(ZwCancelTimer, {onLeave: function (args) {send("ZwCancelTimer");}});

var ZwCancelTimer2 = Module.findExportByName("ntdll.dll", "ZwCancelTimer2")
Interceptor.attach(ZwCancelTimer2, {onLeave: function (args) {send("ZwCancelTimer2");}});

var ZwCancelWaitCompletionPacket = Module.findExportByName("ntdll.dll", "ZwCancelWaitCompletionPacket")
Interceptor.attach(ZwCancelWaitCompletionPacket, {onLeave: function (args) {send("ZwCancelWaitCompletionPacket");}});

var ZwChangeProcessState = Module.findExportByName("ntdll.dll", "ZwChangeProcessState")
Interceptor.attach(ZwChangeProcessState, {onLeave: function (args) {send("ZwChangeProcessState");}});

var ZwChangeThreadState = Module.findExportByName("ntdll.dll", "ZwChangeThreadState")
Interceptor.attach(ZwChangeThreadState, {onLeave: function (args) {send("ZwChangeThreadState");}});

var ZwClearEvent = Module.findExportByName("ntdll.dll", "ZwClearEvent")
Interceptor.attach(ZwClearEvent, {onLeave: function (args) {send("ZwClearEvent");}});

var ZwClose = Module.findExportByName("ntdll.dll", "ZwClose")
Interceptor.attach(ZwClose, {onLeave: function (args) {send("ZwClose");}});

var ZwCloseObjectAuditAlarm = Module.findExportByName("ntdll.dll", "ZwCloseObjectAuditAlarm")
Interceptor.attach(ZwCloseObjectAuditAlarm, {onLeave: function (args) {send("ZwCloseObjectAuditAlarm");}});

var ZwCommitComplete = Module.findExportByName("ntdll.dll", "ZwCommitComplete")
Interceptor.attach(ZwCommitComplete, {onLeave: function (args) {send("ZwCommitComplete");}});

var ZwCommitEnlistment = Module.findExportByName("ntdll.dll", "ZwCommitEnlistment")
Interceptor.attach(ZwCommitEnlistment, {onLeave: function (args) {send("ZwCommitEnlistment");}});

var ZwCommitRegistryTransaction = Module.findExportByName("ntdll.dll", "ZwCommitRegistryTransaction")
Interceptor.attach(ZwCommitRegistryTransaction, {onLeave: function (args) {send("ZwCommitRegistryTransaction");}});

var ZwCommitTransaction = Module.findExportByName("ntdll.dll", "ZwCommitTransaction")
Interceptor.attach(ZwCommitTransaction, {onLeave: function (args) {send("ZwCommitTransaction");}});

var ZwCompactKeys = Module.findExportByName("ntdll.dll", "ZwCompactKeys")
Interceptor.attach(ZwCompactKeys, {onLeave: function (args) {send("ZwCompactKeys");}});

var ZwCompareObjects = Module.findExportByName("ntdll.dll", "ZwCompareObjects")
Interceptor.attach(ZwCompareObjects, {onLeave: function (args) {send("ZwCompareObjects");}});

var ZwCompareSigningLevels = Module.findExportByName("ntdll.dll", "ZwCompareSigningLevels")
Interceptor.attach(ZwCompareSigningLevels, {onLeave: function (args) {send("ZwCompareSigningLevels");}});

var ZwCompareTokens = Module.findExportByName("ntdll.dll", "ZwCompareTokens")
Interceptor.attach(ZwCompareTokens, {onLeave: function (args) {send("ZwCompareTokens");}});

var ZwCompleteConnectPort = Module.findExportByName("ntdll.dll", "ZwCompleteConnectPort")
Interceptor.attach(ZwCompleteConnectPort, {onLeave: function (args) {send("ZwCompleteConnectPort");}});

var ZwCompressKey = Module.findExportByName("ntdll.dll", "ZwCompressKey")
Interceptor.attach(ZwCompressKey, {onLeave: function (args) {send("ZwCompressKey");}});

var ZwConnectPort = Module.findExportByName("ntdll.dll", "ZwConnectPort")
Interceptor.attach(ZwConnectPort, {onLeave: function (args) {send("ZwConnectPort");}});

var ZwContinue = Module.findExportByName("ntdll.dll", "ZwContinue")
Interceptor.attach(ZwContinue, {onLeave: function (args) {send("ZwContinue");}});

var ZwContinueEx = Module.findExportByName("ntdll.dll", "ZwContinueEx")
Interceptor.attach(ZwContinueEx, {onLeave: function (args) {send("ZwContinueEx");}});

var ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter = Module.findExportByName("ntdll.dll", "ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter")
Interceptor.attach(ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter, {onLeave: function (args) {send("ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter");}});

var ZwCopyFileChunk = Module.findExportByName("ntdll.dll", "ZwCopyFileChunk")
Interceptor.attach(ZwCopyFileChunk, {onLeave: function (args) {send("ZwCopyFileChunk");}});

var ZwCreateCpuPartition = Module.findExportByName("ntdll.dll", "ZwCreateCpuPartition")
Interceptor.attach(ZwCreateCpuPartition, {onLeave: function (args) {send("ZwCreateCpuPartition");}});

var ZwCreateCrossVmEvent = Module.findExportByName("ntdll.dll", "ZwCreateCrossVmEvent")
Interceptor.attach(ZwCreateCrossVmEvent, {onLeave: function (args) {send("ZwCreateCrossVmEvent");}});

var ZwCreateCrossVmMutant = Module.findExportByName("ntdll.dll", "ZwCreateCrossVmMutant")
Interceptor.attach(ZwCreateCrossVmMutant, {onLeave: function (args) {send("ZwCreateCrossVmMutant");}});

var ZwCreateDebugObject = Module.findExportByName("ntdll.dll", "ZwCreateDebugObject")
Interceptor.attach(ZwCreateDebugObject, {onLeave: function (args) {send("ZwCreateDebugObject");}});

var ZwCreateDirectoryObject = Module.findExportByName("ntdll.dll", "ZwCreateDirectoryObject")
Interceptor.attach(ZwCreateDirectoryObject, {onLeave: function (args) {send("ZwCreateDirectoryObject");}});

var ZwCreateDirectoryObjectEx = Module.findExportByName("ntdll.dll", "ZwCreateDirectoryObjectEx")
Interceptor.attach(ZwCreateDirectoryObjectEx, {onLeave: function (args) {send("ZwCreateDirectoryObjectEx");}});

var ZwCreateEnclave = Module.findExportByName("ntdll.dll", "ZwCreateEnclave")
Interceptor.attach(ZwCreateEnclave, {onLeave: function (args) {send("ZwCreateEnclave");}});

var ZwCreateEnlistment = Module.findExportByName("ntdll.dll", "ZwCreateEnlistment")
Interceptor.attach(ZwCreateEnlistment, {onLeave: function (args) {send("ZwCreateEnlistment");}});

var ZwCreateEvent = Module.findExportByName("ntdll.dll", "ZwCreateEvent")
Interceptor.attach(ZwCreateEvent, {onLeave: function (args) {send("ZwCreateEvent");}});

var ZwCreateEventPair = Module.findExportByName("ntdll.dll", "ZwCreateEventPair")
Interceptor.attach(ZwCreateEventPair, {onLeave: function (args) {send("ZwCreateEventPair");}});

var ZwCreateFile = Module.findExportByName("ntdll.dll", "ZwCreateFile")
Interceptor.attach(ZwCreateFile, {onLeave: function (args) {send("ZwCreateFile");}});

var ZwCreateIRTimer = Module.findExportByName("ntdll.dll", "ZwCreateIRTimer")
Interceptor.attach(ZwCreateIRTimer, {onLeave: function (args) {send("ZwCreateIRTimer");}});

var ZwCreateIoCompletion = Module.findExportByName("ntdll.dll", "ZwCreateIoCompletion")
Interceptor.attach(ZwCreateIoCompletion, {onLeave: function (args) {send("ZwCreateIoCompletion");}});

var ZwCreateIoRing = Module.findExportByName("ntdll.dll", "ZwCreateIoRing")
Interceptor.attach(ZwCreateIoRing, {onLeave: function (args) {send("ZwCreateIoRing");}});

var ZwCreateJobObject = Module.findExportByName("ntdll.dll", "ZwCreateJobObject")
Interceptor.attach(ZwCreateJobObject, {onLeave: function (args) {send("ZwCreateJobObject");}});

var ZwCreateJobSet = Module.findExportByName("ntdll.dll", "ZwCreateJobSet")
Interceptor.attach(ZwCreateJobSet, {onLeave: function (args) {send("ZwCreateJobSet");}});

var ZwCreateKey = Module.findExportByName("ntdll.dll", "ZwCreateKey")
Interceptor.attach(ZwCreateKey, {onLeave: function (args) {send("ZwCreateKey");}});

var ZwCreateKeyTransacted = Module.findExportByName("ntdll.dll", "ZwCreateKeyTransacted")
Interceptor.attach(ZwCreateKeyTransacted, {onLeave: function (args) {send("ZwCreateKeyTransacted");}});

var ZwCreateKeyedEvent = Module.findExportByName("ntdll.dll", "ZwCreateKeyedEvent")
Interceptor.attach(ZwCreateKeyedEvent, {onLeave: function (args) {send("ZwCreateKeyedEvent");}});

var ZwCreateLowBoxToken = Module.findExportByName("ntdll.dll", "ZwCreateLowBoxToken")
Interceptor.attach(ZwCreateLowBoxToken, {onLeave: function (args) {send("ZwCreateLowBoxToken");}});

var ZwCreateMailslotFile = Module.findExportByName("ntdll.dll", "ZwCreateMailslotFile")
Interceptor.attach(ZwCreateMailslotFile, {onLeave: function (args) {send("ZwCreateMailslotFile");}});

var ZwCreateMutant = Module.findExportByName("ntdll.dll", "ZwCreateMutant")
Interceptor.attach(ZwCreateMutant, {onLeave: function (args) {send("ZwCreateMutant");}});

var ZwCreateNamedPipeFile = Module.findExportByName("ntdll.dll", "ZwCreateNamedPipeFile")
Interceptor.attach(ZwCreateNamedPipeFile, {onLeave: function (args) {send("ZwCreateNamedPipeFile");}});

var ZwCreatePagingFile = Module.findExportByName("ntdll.dll", "ZwCreatePagingFile")
Interceptor.attach(ZwCreatePagingFile, {onLeave: function (args) {send("ZwCreatePagingFile");}});

var ZwCreatePartition = Module.findExportByName("ntdll.dll", "ZwCreatePartition")
Interceptor.attach(ZwCreatePartition, {onLeave: function (args) {send("ZwCreatePartition");}});

var ZwCreatePort = Module.findExportByName("ntdll.dll", "ZwCreatePort")
Interceptor.attach(ZwCreatePort, {onLeave: function (args) {send("ZwCreatePort");}});

var ZwCreatePrivateNamespace = Module.findExportByName("ntdll.dll", "ZwCreatePrivateNamespace")
Interceptor.attach(ZwCreatePrivateNamespace, {onLeave: function (args) {send("ZwCreatePrivateNamespace");}});

var ZwCreateProcess = Module.findExportByName("ntdll.dll", "ZwCreateProcess")
Interceptor.attach(ZwCreateProcess, {onLeave: function (args) {send("ZwCreateProcess");}});

var ZwCreateProcessEx = Module.findExportByName("ntdll.dll", "ZwCreateProcessEx")
Interceptor.attach(ZwCreateProcessEx, {onLeave: function (args) {send("ZwCreateProcessEx");}});

var ZwCreateProcessStateChange = Module.findExportByName("ntdll.dll", "ZwCreateProcessStateChange")
Interceptor.attach(ZwCreateProcessStateChange, {onLeave: function (args) {send("ZwCreateProcessStateChange");}});

var ZwCreateProfile = Module.findExportByName("ntdll.dll", "ZwCreateProfile")
Interceptor.attach(ZwCreateProfile, {onLeave: function (args) {send("ZwCreateProfile");}});

var ZwCreateProfileEx = Module.findExportByName("ntdll.dll", "ZwCreateProfileEx")
Interceptor.attach(ZwCreateProfileEx, {onLeave: function (args) {send("ZwCreateProfileEx");}});

var ZwCreateRegistryTransaction = Module.findExportByName("ntdll.dll", "ZwCreateRegistryTransaction")
Interceptor.attach(ZwCreateRegistryTransaction, {onLeave: function (args) {send("ZwCreateRegistryTransaction");}});

var ZwCreateResourceManager = Module.findExportByName("ntdll.dll", "ZwCreateResourceManager")
Interceptor.attach(ZwCreateResourceManager, {onLeave: function (args) {send("ZwCreateResourceManager");}});

var ZwCreateSection = Module.findExportByName("ntdll.dll", "ZwCreateSection")
Interceptor.attach(ZwCreateSection, {onLeave: function (args) {send("ZwCreateSection");}});

var ZwCreateSectionEx = Module.findExportByName("ntdll.dll", "ZwCreateSectionEx")
Interceptor.attach(ZwCreateSectionEx, {onLeave: function (args) {send("ZwCreateSectionEx");}});

var ZwCreateSemaphore = Module.findExportByName("ntdll.dll", "ZwCreateSemaphore")
Interceptor.attach(ZwCreateSemaphore, {onLeave: function (args) {send("ZwCreateSemaphore");}});

var ZwCreateSymbolicLinkObject = Module.findExportByName("ntdll.dll", "ZwCreateSymbolicLinkObject")
Interceptor.attach(ZwCreateSymbolicLinkObject, {onLeave: function (args) {send("ZwCreateSymbolicLinkObject");}});

var ZwCreateThread = Module.findExportByName("ntdll.dll", "ZwCreateThread")
Interceptor.attach(ZwCreateThread, {onLeave: function (args) {send("ZwCreateThread");}});

var ZwCreateThreadEx = Module.findExportByName("ntdll.dll", "ZwCreateThreadEx")
Interceptor.attach(ZwCreateThreadEx, {onLeave: function (args) {send("ZwCreateThreadEx");}});

var ZwCreateThreadStateChange = Module.findExportByName("ntdll.dll", "ZwCreateThreadStateChange")
Interceptor.attach(ZwCreateThreadStateChange, {onLeave: function (args) {send("ZwCreateThreadStateChange");}});

var ZwCreateTimer = Module.findExportByName("ntdll.dll", "ZwCreateTimer")
Interceptor.attach(ZwCreateTimer, {onLeave: function (args) {send("ZwCreateTimer");}});

var ZwCreateTimer2 = Module.findExportByName("ntdll.dll", "ZwCreateTimer2")
Interceptor.attach(ZwCreateTimer2, {onLeave: function (args) {send("ZwCreateTimer2");}});

var ZwCreateToken = Module.findExportByName("ntdll.dll", "ZwCreateToken")
Interceptor.attach(ZwCreateToken, {onLeave: function (args) {send("ZwCreateToken");}});

var ZwCreateTokenEx = Module.findExportByName("ntdll.dll", "ZwCreateTokenEx")
Interceptor.attach(ZwCreateTokenEx, {onLeave: function (args) {send("ZwCreateTokenEx");}});

var ZwCreateTransaction = Module.findExportByName("ntdll.dll", "ZwCreateTransaction")
Interceptor.attach(ZwCreateTransaction, {onLeave: function (args) {send("ZwCreateTransaction");}});

var ZwCreateTransactionManager = Module.findExportByName("ntdll.dll", "ZwCreateTransactionManager")
Interceptor.attach(ZwCreateTransactionManager, {onLeave: function (args) {send("ZwCreateTransactionManager");}});

var ZwCreateUserProcess = Module.findExportByName("ntdll.dll", "ZwCreateUserProcess")
Interceptor.attach(ZwCreateUserProcess, {onLeave: function (args) {send("ZwCreateUserProcess");}});

var ZwCreateWaitCompletionPacket = Module.findExportByName("ntdll.dll", "ZwCreateWaitCompletionPacket")
Interceptor.attach(ZwCreateWaitCompletionPacket, {onLeave: function (args) {send("ZwCreateWaitCompletionPacket");}});

var ZwCreateWaitablePort = Module.findExportByName("ntdll.dll", "ZwCreateWaitablePort")
Interceptor.attach(ZwCreateWaitablePort, {onLeave: function (args) {send("ZwCreateWaitablePort");}});

var ZwCreateWnfStateName = Module.findExportByName("ntdll.dll", "ZwCreateWnfStateName")
Interceptor.attach(ZwCreateWnfStateName, {onLeave: function (args) {send("ZwCreateWnfStateName");}});

var ZwCreateWorkerFactory = Module.findExportByName("ntdll.dll", "ZwCreateWorkerFactory")
Interceptor.attach(ZwCreateWorkerFactory, {onLeave: function (args) {send("ZwCreateWorkerFactory");}});

var ZwDebugActiveProcess = Module.findExportByName("ntdll.dll", "ZwDebugActiveProcess")
Interceptor.attach(ZwDebugActiveProcess, {onLeave: function (args) {send("ZwDebugActiveProcess");}});

var ZwDebugContinue = Module.findExportByName("ntdll.dll", "ZwDebugContinue")
Interceptor.attach(ZwDebugContinue, {onLeave: function (args) {send("ZwDebugContinue");}});

var ZwDelayExecution = Module.findExportByName("ntdll.dll", "ZwDelayExecution")
Interceptor.attach(ZwDelayExecution, {onLeave: function (args) {send("ZwDelayExecution");}});

var ZwDeleteAtom = Module.findExportByName("ntdll.dll", "ZwDeleteAtom")
Interceptor.attach(ZwDeleteAtom, {onLeave: function (args) {send("ZwDeleteAtom");}});

var ZwDeleteBootEntry = Module.findExportByName("ntdll.dll", "ZwDeleteBootEntry")
Interceptor.attach(ZwDeleteBootEntry, {onLeave: function (args) {send("ZwDeleteBootEntry");}});

var ZwDeleteDriverEntry = Module.findExportByName("ntdll.dll", "ZwDeleteDriverEntry")
Interceptor.attach(ZwDeleteDriverEntry, {onLeave: function (args) {send("ZwDeleteDriverEntry");}});

var ZwDeleteFile = Module.findExportByName("ntdll.dll", "ZwDeleteFile")
Interceptor.attach(ZwDeleteFile, {onLeave: function (args) {send("ZwDeleteFile");}});

var ZwDeleteKey = Module.findExportByName("ntdll.dll", "ZwDeleteKey")
Interceptor.attach(ZwDeleteKey, {onLeave: function (args) {send("ZwDeleteKey");}});

var ZwDeleteObjectAuditAlarm = Module.findExportByName("ntdll.dll", "ZwDeleteObjectAuditAlarm")
Interceptor.attach(ZwDeleteObjectAuditAlarm, {onLeave: function (args) {send("ZwDeleteObjectAuditAlarm");}});

var ZwDeletePrivateNamespace = Module.findExportByName("ntdll.dll", "ZwDeletePrivateNamespace")
Interceptor.attach(ZwDeletePrivateNamespace, {onLeave: function (args) {send("ZwDeletePrivateNamespace");}});

var ZwDeleteValueKey = Module.findExportByName("ntdll.dll", "ZwDeleteValueKey")
Interceptor.attach(ZwDeleteValueKey, {onLeave: function (args) {send("ZwDeleteValueKey");}});

var ZwDeleteWnfStateData = Module.findExportByName("ntdll.dll", "ZwDeleteWnfStateData")
Interceptor.attach(ZwDeleteWnfStateData, {onLeave: function (args) {send("ZwDeleteWnfStateData");}});

var ZwDeleteWnfStateName = Module.findExportByName("ntdll.dll", "ZwDeleteWnfStateName")
Interceptor.attach(ZwDeleteWnfStateName, {onLeave: function (args) {send("ZwDeleteWnfStateName");}});

var ZwDeviceIoControlFile = Module.findExportByName("ntdll.dll", "ZwDeviceIoControlFile")
Interceptor.attach(ZwDeviceIoControlFile, {onLeave: function (args) {send("ZwDeviceIoControlFile");}});

var ZwDirectGraphicsCall = Module.findExportByName("ntdll.dll", "ZwDirectGraphicsCall")
Interceptor.attach(ZwDirectGraphicsCall, {onLeave: function (args) {send("ZwDirectGraphicsCall");}});

var ZwDisableLastKnownGood = Module.findExportByName("ntdll.dll", "ZwDisableLastKnownGood")
Interceptor.attach(ZwDisableLastKnownGood, {onLeave: function (args) {send("ZwDisableLastKnownGood");}});

var ZwDisplayString = Module.findExportByName("ntdll.dll", "ZwDisplayString")
Interceptor.attach(ZwDisplayString, {onLeave: function (args) {send("ZwDisplayString");}});

var ZwDrawText = Module.findExportByName("ntdll.dll", "ZwDrawText")
Interceptor.attach(ZwDrawText, {onLeave: function (args) {send("ZwDrawText");}});

var ZwDuplicateObject = Module.findExportByName("ntdll.dll", "ZwDuplicateObject")
Interceptor.attach(ZwDuplicateObject, {onLeave: function (args) {send("ZwDuplicateObject");}});

var ZwDuplicateToken = Module.findExportByName("ntdll.dll", "ZwDuplicateToken")
Interceptor.attach(ZwDuplicateToken, {onLeave: function (args) {send("ZwDuplicateToken");}});

var ZwEnableLastKnownGood = Module.findExportByName("ntdll.dll", "ZwEnableLastKnownGood")
Interceptor.attach(ZwEnableLastKnownGood, {onLeave: function (args) {send("ZwEnableLastKnownGood");}});

var ZwEnumerateBootEntries = Module.findExportByName("ntdll.dll", "ZwEnumerateBootEntries")
Interceptor.attach(ZwEnumerateBootEntries, {onLeave: function (args) {send("ZwEnumerateBootEntries");}});

var ZwEnumerateDriverEntries = Module.findExportByName("ntdll.dll", "ZwEnumerateDriverEntries")
Interceptor.attach(ZwEnumerateDriverEntries, {onLeave: function (args) {send("ZwEnumerateDriverEntries");}});

var ZwEnumerateKey = Module.findExportByName("ntdll.dll", "ZwEnumerateKey")
Interceptor.attach(ZwEnumerateKey, {onLeave: function (args) {send("ZwEnumerateKey");}});

var ZwEnumerateSystemEnvironmentValuesEx = Module.findExportByName("ntdll.dll", "ZwEnumerateSystemEnvironmentValuesEx")
Interceptor.attach(ZwEnumerateSystemEnvironmentValuesEx, {onLeave: function (args) {send("ZwEnumerateSystemEnvironmentValuesEx");}});

var ZwEnumerateTransactionObject = Module.findExportByName("ntdll.dll", "ZwEnumerateTransactionObject")
Interceptor.attach(ZwEnumerateTransactionObject, {onLeave: function (args) {send("ZwEnumerateTransactionObject");}});

var ZwEnumerateValueKey = Module.findExportByName("ntdll.dll", "ZwEnumerateValueKey")
Interceptor.attach(ZwEnumerateValueKey, {onLeave: function (args) {send("ZwEnumerateValueKey");}});

var ZwExtendSection = Module.findExportByName("ntdll.dll", "ZwExtendSection")
Interceptor.attach(ZwExtendSection, {onLeave: function (args) {send("ZwExtendSection");}});

var ZwFilterBootOption = Module.findExportByName("ntdll.dll", "ZwFilterBootOption")
Interceptor.attach(ZwFilterBootOption, {onLeave: function (args) {send("ZwFilterBootOption");}});

var ZwFilterToken = Module.findExportByName("ntdll.dll", "ZwFilterToken")
Interceptor.attach(ZwFilterToken, {onLeave: function (args) {send("ZwFilterToken");}});

var ZwFilterTokenEx = Module.findExportByName("ntdll.dll", "ZwFilterTokenEx")
Interceptor.attach(ZwFilterTokenEx, {onLeave: function (args) {send("ZwFilterTokenEx");}});

var ZwFindAtom = Module.findExportByName("ntdll.dll", "ZwFindAtom")
Interceptor.attach(ZwFindAtom, {onLeave: function (args) {send("ZwFindAtom");}});

var ZwFlushBuffersFile = Module.findExportByName("ntdll.dll", "ZwFlushBuffersFile")
Interceptor.attach(ZwFlushBuffersFile, {onLeave: function (args) {send("ZwFlushBuffersFile");}});

var ZwFlushBuffersFileEx = Module.findExportByName("ntdll.dll", "ZwFlushBuffersFileEx")
Interceptor.attach(ZwFlushBuffersFileEx, {onLeave: function (args) {send("ZwFlushBuffersFileEx");}});

var ZwFlushInstallUILanguage = Module.findExportByName("ntdll.dll", "ZwFlushInstallUILanguage")
Interceptor.attach(ZwFlushInstallUILanguage, {onLeave: function (args) {send("ZwFlushInstallUILanguage");}});

var ZwFlushInstructionCache = Module.findExportByName("ntdll.dll", "ZwFlushInstructionCache")
Interceptor.attach(ZwFlushInstructionCache, {onLeave: function (args) {send("ZwFlushInstructionCache");}});

var ZwFlushKey = Module.findExportByName("ntdll.dll", "ZwFlushKey")
Interceptor.attach(ZwFlushKey, {onLeave: function (args) {send("ZwFlushKey");}});

var ZwFlushProcessWriteBuffers = Module.findExportByName("ntdll.dll", "ZwFlushProcessWriteBuffers")
Interceptor.attach(ZwFlushProcessWriteBuffers, {onLeave: function (args) {send("ZwFlushProcessWriteBuffers");}});

var ZwFlushVirtualMemory = Module.findExportByName("ntdll.dll", "ZwFlushVirtualMemory")
Interceptor.attach(ZwFlushVirtualMemory, {onLeave: function (args) {send("ZwFlushVirtualMemory");}});

var ZwFlushWriteBuffer = Module.findExportByName("ntdll.dll", "ZwFlushWriteBuffer")
Interceptor.attach(ZwFlushWriteBuffer, {onLeave: function (args) {send("ZwFlushWriteBuffer");}});

var ZwFreeUserPhysicalPages = Module.findExportByName("ntdll.dll", "ZwFreeUserPhysicalPages")
Interceptor.attach(ZwFreeUserPhysicalPages, {onLeave: function (args) {send("ZwFreeUserPhysicalPages");}});

var ZwFreeVirtualMemory = Module.findExportByName("ntdll.dll", "ZwFreeVirtualMemory")
Interceptor.attach(ZwFreeVirtualMemory, {onLeave: function (args) {send("ZwFreeVirtualMemory");}});

var ZwFreezeRegistry = Module.findExportByName("ntdll.dll", "ZwFreezeRegistry")
Interceptor.attach(ZwFreezeRegistry, {onLeave: function (args) {send("ZwFreezeRegistry");}});

var ZwFreezeTransactions = Module.findExportByName("ntdll.dll", "ZwFreezeTransactions")
Interceptor.attach(ZwFreezeTransactions, {onLeave: function (args) {send("ZwFreezeTransactions");}});

var ZwFsControlFile = Module.findExportByName("ntdll.dll", "ZwFsControlFile")
Interceptor.attach(ZwFsControlFile, {onLeave: function (args) {send("ZwFsControlFile");}});

var ZwGetCachedSigningLevel = Module.findExportByName("ntdll.dll", "ZwGetCachedSigningLevel")
Interceptor.attach(ZwGetCachedSigningLevel, {onLeave: function (args) {send("ZwGetCachedSigningLevel");}});

var ZwGetCompleteWnfStateSubscription = Module.findExportByName("ntdll.dll", "ZwGetCompleteWnfStateSubscription")
Interceptor.attach(ZwGetCompleteWnfStateSubscription, {onLeave: function (args) {send("ZwGetCompleteWnfStateSubscription");}});

var ZwGetContextThread = Module.findExportByName("ntdll.dll", "ZwGetContextThread")
Interceptor.attach(ZwGetContextThread, {onLeave: function (args) {send("ZwGetContextThread");}});

var ZwGetCurrentProcessorNumber = Module.findExportByName("ntdll.dll", "ZwGetCurrentProcessorNumber")
Interceptor.attach(ZwGetCurrentProcessorNumber, {onLeave: function (args) {send("ZwGetCurrentProcessorNumber");}});

var ZwGetCurrentProcessorNumberEx = Module.findExportByName("ntdll.dll", "ZwGetCurrentProcessorNumberEx")
Interceptor.attach(ZwGetCurrentProcessorNumberEx, {onLeave: function (args) {send("ZwGetCurrentProcessorNumberEx");}});

var ZwGetDevicePowerState = Module.findExportByName("ntdll.dll", "ZwGetDevicePowerState")
Interceptor.attach(ZwGetDevicePowerState, {onLeave: function (args) {send("ZwGetDevicePowerState");}});

var ZwGetMUIRegistryInfo = Module.findExportByName("ntdll.dll", "ZwGetMUIRegistryInfo")
Interceptor.attach(ZwGetMUIRegistryInfo, {onLeave: function (args) {send("ZwGetMUIRegistryInfo");}});

var ZwGetNextProcess = Module.findExportByName("ntdll.dll", "ZwGetNextProcess")
Interceptor.attach(ZwGetNextProcess, {onLeave: function (args) {send("ZwGetNextProcess");}});

var ZwGetNextThread = Module.findExportByName("ntdll.dll", "ZwGetNextThread")
Interceptor.attach(ZwGetNextThread, {onLeave: function (args) {send("ZwGetNextThread");}});

var ZwGetNlsSectionPtr = Module.findExportByName("ntdll.dll", "ZwGetNlsSectionPtr")
Interceptor.attach(ZwGetNlsSectionPtr, {onLeave: function (args) {send("ZwGetNlsSectionPtr");}});

var ZwGetNotificationResourceManager = Module.findExportByName("ntdll.dll", "ZwGetNotificationResourceManager")
Interceptor.attach(ZwGetNotificationResourceManager, {onLeave: function (args) {send("ZwGetNotificationResourceManager");}});

var ZwGetWriteWatch = Module.findExportByName("ntdll.dll", "ZwGetWriteWatch")
Interceptor.attach(ZwGetWriteWatch, {onLeave: function (args) {send("ZwGetWriteWatch");}});

var ZwImpersonateAnonymousToken = Module.findExportByName("ntdll.dll", "ZwImpersonateAnonymousToken")
Interceptor.attach(ZwImpersonateAnonymousToken, {onLeave: function (args) {send("ZwImpersonateAnonymousToken");}});

var ZwImpersonateClientOfPort = Module.findExportByName("ntdll.dll", "ZwImpersonateClientOfPort")
Interceptor.attach(ZwImpersonateClientOfPort, {onLeave: function (args) {send("ZwImpersonateClientOfPort");}});

var ZwImpersonateThread = Module.findExportByName("ntdll.dll", "ZwImpersonateThread")
Interceptor.attach(ZwImpersonateThread, {onLeave: function (args) {send("ZwImpersonateThread");}});

var ZwInitializeEnclave = Module.findExportByName("ntdll.dll", "ZwInitializeEnclave")
Interceptor.attach(ZwInitializeEnclave, {onLeave: function (args) {send("ZwInitializeEnclave");}});

var ZwInitializeNlsFiles = Module.findExportByName("ntdll.dll", "ZwInitializeNlsFiles")
Interceptor.attach(ZwInitializeNlsFiles, {onLeave: function (args) {send("ZwInitializeNlsFiles");}});

var ZwInitializeRegistry = Module.findExportByName("ntdll.dll", "ZwInitializeRegistry")
Interceptor.attach(ZwInitializeRegistry, {onLeave: function (args) {send("ZwInitializeRegistry");}});

var ZwInitiatePowerAction = Module.findExportByName("ntdll.dll", "ZwInitiatePowerAction")
Interceptor.attach(ZwInitiatePowerAction, {onLeave: function (args) {send("ZwInitiatePowerAction");}});

var ZwIsProcessInJob = Module.findExportByName("ntdll.dll", "ZwIsProcessInJob")
Interceptor.attach(ZwIsProcessInJob, {onLeave: function (args) {send("ZwIsProcessInJob");}});

var ZwIsSystemResumeAutomatic = Module.findExportByName("ntdll.dll", "ZwIsSystemResumeAutomatic")
Interceptor.attach(ZwIsSystemResumeAutomatic, {onLeave: function (args) {send("ZwIsSystemResumeAutomatic");}});

var ZwIsUILanguageComitted = Module.findExportByName("ntdll.dll", "ZwIsUILanguageComitted")
Interceptor.attach(ZwIsUILanguageComitted, {onLeave: function (args) {send("ZwIsUILanguageComitted");}});

var ZwListenPort = Module.findExportByName("ntdll.dll", "ZwListenPort")
Interceptor.attach(ZwListenPort, {onLeave: function (args) {send("ZwListenPort");}});

var ZwLoadDriver = Module.findExportByName("ntdll.dll", "ZwLoadDriver")
Interceptor.attach(ZwLoadDriver, {onLeave: function (args) {send("ZwLoadDriver");}});

var ZwLoadEnclaveData = Module.findExportByName("ntdll.dll", "ZwLoadEnclaveData")
Interceptor.attach(ZwLoadEnclaveData, {onLeave: function (args) {send("ZwLoadEnclaveData");}});

var ZwLoadKey = Module.findExportByName("ntdll.dll", "ZwLoadKey")
Interceptor.attach(ZwLoadKey, {onLeave: function (args) {send("ZwLoadKey");}});

var ZwLoadKey2 = Module.findExportByName("ntdll.dll", "ZwLoadKey2")
Interceptor.attach(ZwLoadKey2, {onLeave: function (args) {send("ZwLoadKey2");}});

var ZwLoadKey3 = Module.findExportByName("ntdll.dll", "ZwLoadKey3")
Interceptor.attach(ZwLoadKey3, {onLeave: function (args) {send("ZwLoadKey3");}});

var ZwLoadKeyEx = Module.findExportByName("ntdll.dll", "ZwLoadKeyEx")
Interceptor.attach(ZwLoadKeyEx, {onLeave: function (args) {send("ZwLoadKeyEx");}});

var ZwLockFile = Module.findExportByName("ntdll.dll", "ZwLockFile")
Interceptor.attach(ZwLockFile, {onLeave: function (args) {send("ZwLockFile");}});

var ZwLockProductActivationKeys = Module.findExportByName("ntdll.dll", "ZwLockProductActivationKeys")
Interceptor.attach(ZwLockProductActivationKeys, {onLeave: function (args) {send("ZwLockProductActivationKeys");}});

var ZwLockRegistryKey = Module.findExportByName("ntdll.dll", "ZwLockRegistryKey")
Interceptor.attach(ZwLockRegistryKey, {onLeave: function (args) {send("ZwLockRegistryKey");}});

var ZwLockVirtualMemory = Module.findExportByName("ntdll.dll", "ZwLockVirtualMemory")
Interceptor.attach(ZwLockVirtualMemory, {onLeave: function (args) {send("ZwLockVirtualMemory");}});

var ZwMakePermanentObject = Module.findExportByName("ntdll.dll", "ZwMakePermanentObject")
Interceptor.attach(ZwMakePermanentObject, {onLeave: function (args) {send("ZwMakePermanentObject");}});

var ZwMakeTemporaryObject = Module.findExportByName("ntdll.dll", "ZwMakeTemporaryObject")
Interceptor.attach(ZwMakeTemporaryObject, {onLeave: function (args) {send("ZwMakeTemporaryObject");}});

var ZwManageHotPatch = Module.findExportByName("ntdll.dll", "ZwManageHotPatch")
Interceptor.attach(ZwManageHotPatch, {onLeave: function (args) {send("ZwManageHotPatch");}});

var ZwManagePartition = Module.findExportByName("ntdll.dll", "ZwManagePartition")
Interceptor.attach(ZwManagePartition, {onLeave: function (args) {send("ZwManagePartition");}});

var ZwMapCMFModule = Module.findExportByName("ntdll.dll", "ZwMapCMFModule")
Interceptor.attach(ZwMapCMFModule, {onLeave: function (args) {send("ZwMapCMFModule");}});

var ZwMapUserPhysicalPages = Module.findExportByName("ntdll.dll", "ZwMapUserPhysicalPages")
Interceptor.attach(ZwMapUserPhysicalPages, {onLeave: function (args) {send("ZwMapUserPhysicalPages");}});

var ZwMapUserPhysicalPagesScatter = Module.findExportByName("ntdll.dll", "ZwMapUserPhysicalPagesScatter")
Interceptor.attach(ZwMapUserPhysicalPagesScatter, {onLeave: function (args) {send("ZwMapUserPhysicalPagesScatter");}});

var ZwMapViewOfSection = Module.findExportByName("ntdll.dll", "ZwMapViewOfSection")
Interceptor.attach(ZwMapViewOfSection, {onLeave: function (args) {send("ZwMapViewOfSection");}});

var ZwMapViewOfSectionEx = Module.findExportByName("ntdll.dll", "ZwMapViewOfSectionEx")
Interceptor.attach(ZwMapViewOfSectionEx, {onLeave: function (args) {send("ZwMapViewOfSectionEx");}});

var ZwModifyBootEntry = Module.findExportByName("ntdll.dll", "ZwModifyBootEntry")
Interceptor.attach(ZwModifyBootEntry, {onLeave: function (args) {send("ZwModifyBootEntry");}});

var ZwModifyDriverEntry = Module.findExportByName("ntdll.dll", "ZwModifyDriverEntry")
Interceptor.attach(ZwModifyDriverEntry, {onLeave: function (args) {send("ZwModifyDriverEntry");}});

var ZwNotifyChangeDirectoryFile = Module.findExportByName("ntdll.dll", "ZwNotifyChangeDirectoryFile")
Interceptor.attach(ZwNotifyChangeDirectoryFile, {onLeave: function (args) {send("ZwNotifyChangeDirectoryFile");}});

var ZwNotifyChangeDirectoryFileEx = Module.findExportByName("ntdll.dll", "ZwNotifyChangeDirectoryFileEx")
Interceptor.attach(ZwNotifyChangeDirectoryFileEx, {onLeave: function (args) {send("ZwNotifyChangeDirectoryFileEx");}});

var ZwNotifyChangeKey = Module.findExportByName("ntdll.dll", "ZwNotifyChangeKey")
Interceptor.attach(ZwNotifyChangeKey, {onLeave: function (args) {send("ZwNotifyChangeKey");}});

var ZwNotifyChangeMultipleKeys = Module.findExportByName("ntdll.dll", "ZwNotifyChangeMultipleKeys")
Interceptor.attach(ZwNotifyChangeMultipleKeys, {onLeave: function (args) {send("ZwNotifyChangeMultipleKeys");}});

var ZwNotifyChangeSession = Module.findExportByName("ntdll.dll", "ZwNotifyChangeSession")
Interceptor.attach(ZwNotifyChangeSession, {onLeave: function (args) {send("ZwNotifyChangeSession");}});

var ZwOpenCpuPartition = Module.findExportByName("ntdll.dll", "ZwOpenCpuPartition")
Interceptor.attach(ZwOpenCpuPartition, {onLeave: function (args) {send("ZwOpenCpuPartition");}});

var ZwOpenDirectoryObject = Module.findExportByName("ntdll.dll", "ZwOpenDirectoryObject")
Interceptor.attach(ZwOpenDirectoryObject, {onLeave: function (args) {send("ZwOpenDirectoryObject");}});

var ZwOpenEnlistment = Module.findExportByName("ntdll.dll", "ZwOpenEnlistment")
Interceptor.attach(ZwOpenEnlistment, {onLeave: function (args) {send("ZwOpenEnlistment");}});

var ZwOpenEvent = Module.findExportByName("ntdll.dll", "ZwOpenEvent")
Interceptor.attach(ZwOpenEvent, {onLeave: function (args) {send("ZwOpenEvent");}});

var ZwOpenEventPair = Module.findExportByName("ntdll.dll", "ZwOpenEventPair")
Interceptor.attach(ZwOpenEventPair, {onLeave: function (args) {send("ZwOpenEventPair");}});

var ZwOpenFile = Module.findExportByName("ntdll.dll", "ZwOpenFile")
Interceptor.attach(ZwOpenFile, {onLeave: function (args) {send("ZwOpenFile");}});

var ZwOpenIoCompletion = Module.findExportByName("ntdll.dll", "ZwOpenIoCompletion")
Interceptor.attach(ZwOpenIoCompletion, {onLeave: function (args) {send("ZwOpenIoCompletion");}});

var ZwOpenJobObject = Module.findExportByName("ntdll.dll", "ZwOpenJobObject")
Interceptor.attach(ZwOpenJobObject, {onLeave: function (args) {send("ZwOpenJobObject");}});

var ZwOpenKey = Module.findExportByName("ntdll.dll", "ZwOpenKey")
Interceptor.attach(ZwOpenKey, {onLeave: function (args) {send("ZwOpenKey");}});

var ZwOpenKeyEx = Module.findExportByName("ntdll.dll", "ZwOpenKeyEx")
Interceptor.attach(ZwOpenKeyEx, {onLeave: function (args) {send("ZwOpenKeyEx");}});

var ZwOpenKeyTransacted = Module.findExportByName("ntdll.dll", "ZwOpenKeyTransacted")
Interceptor.attach(ZwOpenKeyTransacted, {onLeave: function (args) {send("ZwOpenKeyTransacted");}});

var ZwOpenKeyTransactedEx = Module.findExportByName("ntdll.dll", "ZwOpenKeyTransactedEx")
Interceptor.attach(ZwOpenKeyTransactedEx, {onLeave: function (args) {send("ZwOpenKeyTransactedEx");}});

var ZwOpenKeyedEvent = Module.findExportByName("ntdll.dll", "ZwOpenKeyedEvent")
Interceptor.attach(ZwOpenKeyedEvent, {onLeave: function (args) {send("ZwOpenKeyedEvent");}});

var ZwOpenMutant = Module.findExportByName("ntdll.dll", "ZwOpenMutant")
Interceptor.attach(ZwOpenMutant, {onLeave: function (args) {send("ZwOpenMutant");}});

var ZwOpenObjectAuditAlarm = Module.findExportByName("ntdll.dll", "ZwOpenObjectAuditAlarm")
Interceptor.attach(ZwOpenObjectAuditAlarm, {onLeave: function (args) {send("ZwOpenObjectAuditAlarm");}});

var ZwOpenPartition = Module.findExportByName("ntdll.dll", "ZwOpenPartition")
Interceptor.attach(ZwOpenPartition, {onLeave: function (args) {send("ZwOpenPartition");}});

var ZwOpenPrivateNamespace = Module.findExportByName("ntdll.dll", "ZwOpenPrivateNamespace")
Interceptor.attach(ZwOpenPrivateNamespace, {onLeave: function (args) {send("ZwOpenPrivateNamespace");}});

var ZwOpenProcess = Module.findExportByName("ntdll.dll", "ZwOpenProcess")
Interceptor.attach(ZwOpenProcess, {onLeave: function (args) {send("ZwOpenProcess");}});

var ZwOpenProcessToken = Module.findExportByName("ntdll.dll", "ZwOpenProcessToken")
Interceptor.attach(ZwOpenProcessToken, {onLeave: function (args) {send("ZwOpenProcessToken");}});

var ZwOpenProcessTokenEx = Module.findExportByName("ntdll.dll", "ZwOpenProcessTokenEx")
Interceptor.attach(ZwOpenProcessTokenEx, {onLeave: function (args) {send("ZwOpenProcessTokenEx");}});

var ZwOpenRegistryTransaction = Module.findExportByName("ntdll.dll", "ZwOpenRegistryTransaction")
Interceptor.attach(ZwOpenRegistryTransaction, {onLeave: function (args) {send("ZwOpenRegistryTransaction");}});

var ZwOpenResourceManager = Module.findExportByName("ntdll.dll", "ZwOpenResourceManager")
Interceptor.attach(ZwOpenResourceManager, {onLeave: function (args) {send("ZwOpenResourceManager");}});

var ZwOpenSection = Module.findExportByName("ntdll.dll", "ZwOpenSection")
Interceptor.attach(ZwOpenSection, {onLeave: function (args) {send("ZwOpenSection");}});

var ZwOpenSemaphore = Module.findExportByName("ntdll.dll", "ZwOpenSemaphore")
Interceptor.attach(ZwOpenSemaphore, {onLeave: function (args) {send("ZwOpenSemaphore");}});

var ZwOpenSession = Module.findExportByName("ntdll.dll", "ZwOpenSession")
Interceptor.attach(ZwOpenSession, {onLeave: function (args) {send("ZwOpenSession");}});

var ZwOpenSymbolicLinkObject = Module.findExportByName("ntdll.dll", "ZwOpenSymbolicLinkObject")
Interceptor.attach(ZwOpenSymbolicLinkObject, {onLeave: function (args) {send("ZwOpenSymbolicLinkObject");}});

var ZwOpenThread = Module.findExportByName("ntdll.dll", "ZwOpenThread")
Interceptor.attach(ZwOpenThread, {onLeave: function (args) {send("ZwOpenThread");}});

var ZwOpenThreadToken = Module.findExportByName("ntdll.dll", "ZwOpenThreadToken")
Interceptor.attach(ZwOpenThreadToken, {onLeave: function (args) {send("ZwOpenThreadToken");}});

var ZwOpenThreadTokenEx = Module.findExportByName("ntdll.dll", "ZwOpenThreadTokenEx")
Interceptor.attach(ZwOpenThreadTokenEx, {onLeave: function (args) {send("ZwOpenThreadTokenEx");}});

var ZwOpenTimer = Module.findExportByName("ntdll.dll", "ZwOpenTimer")
Interceptor.attach(ZwOpenTimer, {onLeave: function (args) {send("ZwOpenTimer");}});

var ZwOpenTransaction = Module.findExportByName("ntdll.dll", "ZwOpenTransaction")
Interceptor.attach(ZwOpenTransaction, {onLeave: function (args) {send("ZwOpenTransaction");}});

var ZwOpenTransactionManager = Module.findExportByName("ntdll.dll", "ZwOpenTransactionManager")
Interceptor.attach(ZwOpenTransactionManager, {onLeave: function (args) {send("ZwOpenTransactionManager");}});

var ZwPlugPlayControl = Module.findExportByName("ntdll.dll", "ZwPlugPlayControl")
Interceptor.attach(ZwPlugPlayControl, {onLeave: function (args) {send("ZwPlugPlayControl");}});

var ZwPowerInformation = Module.findExportByName("ntdll.dll", "ZwPowerInformation")
Interceptor.attach(ZwPowerInformation, {onLeave: function (args) {send("ZwPowerInformation");}});

var ZwPrePrepareComplete = Module.findExportByName("ntdll.dll", "ZwPrePrepareComplete")
Interceptor.attach(ZwPrePrepareComplete, {onLeave: function (args) {send("ZwPrePrepareComplete");}});

var ZwPrePrepareEnlistment = Module.findExportByName("ntdll.dll", "ZwPrePrepareEnlistment")
Interceptor.attach(ZwPrePrepareEnlistment, {onLeave: function (args) {send("ZwPrePrepareEnlistment");}});

var ZwPrepareComplete = Module.findExportByName("ntdll.dll", "ZwPrepareComplete")
Interceptor.attach(ZwPrepareComplete, {onLeave: function (args) {send("ZwPrepareComplete");}});

var ZwPrepareEnlistment = Module.findExportByName("ntdll.dll", "ZwPrepareEnlistment")
Interceptor.attach(ZwPrepareEnlistment, {onLeave: function (args) {send("ZwPrepareEnlistment");}});

var ZwPrivilegeCheck = Module.findExportByName("ntdll.dll", "ZwPrivilegeCheck")
Interceptor.attach(ZwPrivilegeCheck, {onLeave: function (args) {send("ZwPrivilegeCheck");}});

var ZwPrivilegeObjectAuditAlarm = Module.findExportByName("ntdll.dll", "ZwPrivilegeObjectAuditAlarm")
Interceptor.attach(ZwPrivilegeObjectAuditAlarm, {onLeave: function (args) {send("ZwPrivilegeObjectAuditAlarm");}});

var ZwPrivilegedServiceAuditAlarm = Module.findExportByName("ntdll.dll", "ZwPrivilegedServiceAuditAlarm")
Interceptor.attach(ZwPrivilegedServiceAuditAlarm, {onLeave: function (args) {send("ZwPrivilegedServiceAuditAlarm");}});

var ZwPropagationComplete = Module.findExportByName("ntdll.dll", "ZwPropagationComplete")
Interceptor.attach(ZwPropagationComplete, {onLeave: function (args) {send("ZwPropagationComplete");}});

var ZwPropagationFailed = Module.findExportByName("ntdll.dll", "ZwPropagationFailed")
Interceptor.attach(ZwPropagationFailed, {onLeave: function (args) {send("ZwPropagationFailed");}});

var ZwProtectVirtualMemory = Module.findExportByName("ntdll.dll", "ZwProtectVirtualMemory")
Interceptor.attach(ZwProtectVirtualMemory, {onLeave: function (args) {send("ZwProtectVirtualMemory");}});

var ZwPssCaptureVaSpaceBulk = Module.findExportByName("ntdll.dll", "ZwPssCaptureVaSpaceBulk")
Interceptor.attach(ZwPssCaptureVaSpaceBulk, {onLeave: function (args) {send("ZwPssCaptureVaSpaceBulk");}});

var ZwPulseEvent = Module.findExportByName("ntdll.dll", "ZwPulseEvent")
Interceptor.attach(ZwPulseEvent, {onLeave: function (args) {send("ZwPulseEvent");}});

var ZwQueryAttributesFile = Module.findExportByName("ntdll.dll", "ZwQueryAttributesFile")
Interceptor.attach(ZwQueryAttributesFile, {onLeave: function (args) {send("ZwQueryAttributesFile");}});

var ZwQueryAuxiliaryCounterFrequency = Module.findExportByName("ntdll.dll", "ZwQueryAuxiliaryCounterFrequency")
Interceptor.attach(ZwQueryAuxiliaryCounterFrequency, {onLeave: function (args) {send("ZwQueryAuxiliaryCounterFrequency");}});

var ZwQueryBootEntryOrder = Module.findExportByName("ntdll.dll", "ZwQueryBootEntryOrder")
Interceptor.attach(ZwQueryBootEntryOrder, {onLeave: function (args) {send("ZwQueryBootEntryOrder");}});

var ZwQueryBootOptions = Module.findExportByName("ntdll.dll", "ZwQueryBootOptions")
Interceptor.attach(ZwQueryBootOptions, {onLeave: function (args) {send("ZwQueryBootOptions");}});

var ZwQueryDebugFilterState = Module.findExportByName("ntdll.dll", "ZwQueryDebugFilterState")
Interceptor.attach(ZwQueryDebugFilterState, {onLeave: function (args) {send("ZwQueryDebugFilterState");}});

var ZwQueryDefaultLocale = Module.findExportByName("ntdll.dll", "ZwQueryDefaultLocale")
Interceptor.attach(ZwQueryDefaultLocale, {onLeave: function (args) {send("ZwQueryDefaultLocale");}});

var ZwQueryDefaultUILanguage = Module.findExportByName("ntdll.dll", "ZwQueryDefaultUILanguage")
Interceptor.attach(ZwQueryDefaultUILanguage, {onLeave: function (args) {send("ZwQueryDefaultUILanguage");}});

var ZwQueryDirectoryFile = Module.findExportByName("ntdll.dll", "ZwQueryDirectoryFile")
Interceptor.attach(ZwQueryDirectoryFile, {onLeave: function (args) {send("ZwQueryDirectoryFile");}});

var ZwQueryDirectoryFileEx = Module.findExportByName("ntdll.dll", "ZwQueryDirectoryFileEx")
Interceptor.attach(ZwQueryDirectoryFileEx, {onLeave: function (args) {send("ZwQueryDirectoryFileEx");}});

var ZwQueryDirectoryObject = Module.findExportByName("ntdll.dll", "ZwQueryDirectoryObject")
Interceptor.attach(ZwQueryDirectoryObject, {onLeave: function (args) {send("ZwQueryDirectoryObject");}});

var ZwQueryDriverEntryOrder = Module.findExportByName("ntdll.dll", "ZwQueryDriverEntryOrder")
Interceptor.attach(ZwQueryDriverEntryOrder, {onLeave: function (args) {send("ZwQueryDriverEntryOrder");}});

var ZwQueryEaFile = Module.findExportByName("ntdll.dll", "ZwQueryEaFile")
Interceptor.attach(ZwQueryEaFile, {onLeave: function (args) {send("ZwQueryEaFile");}});

var ZwQueryEvent = Module.findExportByName("ntdll.dll", "ZwQueryEvent")
Interceptor.attach(ZwQueryEvent, {onLeave: function (args) {send("ZwQueryEvent");}});

var ZwQueryFullAttributesFile = Module.findExportByName("ntdll.dll", "ZwQueryFullAttributesFile")
Interceptor.attach(ZwQueryFullAttributesFile, {onLeave: function (args) {send("ZwQueryFullAttributesFile");}});

var ZwQueryInformationAtom = Module.findExportByName("ntdll.dll", "ZwQueryInformationAtom")
Interceptor.attach(ZwQueryInformationAtom, {onLeave: function (args) {send("ZwQueryInformationAtom");}});

var ZwQueryInformationByName = Module.findExportByName("ntdll.dll", "ZwQueryInformationByName")
Interceptor.attach(ZwQueryInformationByName, {onLeave: function (args) {send("ZwQueryInformationByName");}});

var ZwQueryInformationCpuPartition = Module.findExportByName("ntdll.dll", "ZwQueryInformationCpuPartition")
Interceptor.attach(ZwQueryInformationCpuPartition, {onLeave: function (args) {send("ZwQueryInformationCpuPartition");}});

var ZwQueryInformationEnlistment = Module.findExportByName("ntdll.dll", "ZwQueryInformationEnlistment")
Interceptor.attach(ZwQueryInformationEnlistment, {onLeave: function (args) {send("ZwQueryInformationEnlistment");}});

var ZwQueryInformationFile = Module.findExportByName("ntdll.dll", "ZwQueryInformationFile")
Interceptor.attach(ZwQueryInformationFile, {onLeave: function (args) {send("ZwQueryInformationFile");}});

var ZwQueryInformationJobObject = Module.findExportByName("ntdll.dll", "ZwQueryInformationJobObject")
Interceptor.attach(ZwQueryInformationJobObject, {onLeave: function (args) {send("ZwQueryInformationJobObject");}});

var ZwQueryInformationPort = Module.findExportByName("ntdll.dll", "ZwQueryInformationPort")
Interceptor.attach(ZwQueryInformationPort, {onLeave: function (args) {send("ZwQueryInformationPort");}});

var ZwQueryInformationProcess = Module.findExportByName("ntdll.dll", "ZwQueryInformationProcess")
Interceptor.attach(ZwQueryInformationProcess, {onLeave: function (args) {send("ZwQueryInformationProcess");}});

var ZwQueryInformationResourceManager = Module.findExportByName("ntdll.dll", "ZwQueryInformationResourceManager")
Interceptor.attach(ZwQueryInformationResourceManager, {onLeave: function (args) {send("ZwQueryInformationResourceManager");}});

var ZwQueryInformationThread = Module.findExportByName("ntdll.dll", "ZwQueryInformationThread")
Interceptor.attach(ZwQueryInformationThread, {onLeave: function (args) {send("ZwQueryInformationThread");}});

var ZwQueryInformationToken = Module.findExportByName("ntdll.dll", "ZwQueryInformationToken")
Interceptor.attach(ZwQueryInformationToken, {onLeave: function (args) {send("ZwQueryInformationToken");}});

var ZwQueryInformationTransaction = Module.findExportByName("ntdll.dll", "ZwQueryInformationTransaction")
Interceptor.attach(ZwQueryInformationTransaction, {onLeave: function (args) {send("ZwQueryInformationTransaction");}});

var ZwQueryInformationTransactionManager = Module.findExportByName("ntdll.dll", "ZwQueryInformationTransactionManager")
Interceptor.attach(ZwQueryInformationTransactionManager, {onLeave: function (args) {send("ZwQueryInformationTransactionManager");}});

var ZwQueryInformationWorkerFactory = Module.findExportByName("ntdll.dll", "ZwQueryInformationWorkerFactory")
Interceptor.attach(ZwQueryInformationWorkerFactory, {onLeave: function (args) {send("ZwQueryInformationWorkerFactory");}});

var ZwQueryInstallUILanguage = Module.findExportByName("ntdll.dll", "ZwQueryInstallUILanguage")
Interceptor.attach(ZwQueryInstallUILanguage, {onLeave: function (args) {send("ZwQueryInstallUILanguage");}});

var ZwQueryIntervalProfile = Module.findExportByName("ntdll.dll", "ZwQueryIntervalProfile")
Interceptor.attach(ZwQueryIntervalProfile, {onLeave: function (args) {send("ZwQueryIntervalProfile");}});

var ZwQueryIoCompletion = Module.findExportByName("ntdll.dll", "ZwQueryIoCompletion")
Interceptor.attach(ZwQueryIoCompletion, {onLeave: function (args) {send("ZwQueryIoCompletion");}});

var ZwQueryIoRingCapabilities = Module.findExportByName("ntdll.dll", "ZwQueryIoRingCapabilities")
Interceptor.attach(ZwQueryIoRingCapabilities, {onLeave: function (args) {send("ZwQueryIoRingCapabilities");}});

var ZwQueryKey = Module.findExportByName("ntdll.dll", "ZwQueryKey")
Interceptor.attach(ZwQueryKey, {onLeave: function (args) {send("ZwQueryKey");}});

var ZwQueryLicenseValue = Module.findExportByName("ntdll.dll", "ZwQueryLicenseValue")
Interceptor.attach(ZwQueryLicenseValue, {onLeave: function (args) {send("ZwQueryLicenseValue");}});

var ZwQueryMultipleValueKey = Module.findExportByName("ntdll.dll", "ZwQueryMultipleValueKey")
Interceptor.attach(ZwQueryMultipleValueKey, {onLeave: function (args) {send("ZwQueryMultipleValueKey");}});

var ZwQueryMutant = Module.findExportByName("ntdll.dll", "ZwQueryMutant")
Interceptor.attach(ZwQueryMutant, {onLeave: function (args) {send("ZwQueryMutant");}});

var ZwQueryObject = Module.findExportByName("ntdll.dll", "ZwQueryObject")
Interceptor.attach(ZwQueryObject, {onLeave: function (args) {send("ZwQueryObject");}});

var ZwQueryOpenSubKeys = Module.findExportByName("ntdll.dll", "ZwQueryOpenSubKeys")
Interceptor.attach(ZwQueryOpenSubKeys, {onLeave: function (args) {send("ZwQueryOpenSubKeys");}});

var ZwQueryOpenSubKeysEx = Module.findExportByName("ntdll.dll", "ZwQueryOpenSubKeysEx")
Interceptor.attach(ZwQueryOpenSubKeysEx, {onLeave: function (args) {send("ZwQueryOpenSubKeysEx");}});

var ZwQueryPerformanceCounter = Module.findExportByName("ntdll.dll", "ZwQueryPerformanceCounter")
Interceptor.attach(ZwQueryPerformanceCounter, {onLeave: function (args) {send("ZwQueryPerformanceCounter");}});

var ZwQueryPortInformationProcess = Module.findExportByName("ntdll.dll", "ZwQueryPortInformationProcess")
Interceptor.attach(ZwQueryPortInformationProcess, {onLeave: function (args) {send("ZwQueryPortInformationProcess");}});

var ZwQueryQuotaInformationFile = Module.findExportByName("ntdll.dll", "ZwQueryQuotaInformationFile")
Interceptor.attach(ZwQueryQuotaInformationFile, {onLeave: function (args) {send("ZwQueryQuotaInformationFile");}});

var ZwQuerySection = Module.findExportByName("ntdll.dll", "ZwQuerySection")
Interceptor.attach(ZwQuerySection, {onLeave: function (args) {send("ZwQuerySection");}});

var ZwQuerySecurityAttributesToken = Module.findExportByName("ntdll.dll", "ZwQuerySecurityAttributesToken")
Interceptor.attach(ZwQuerySecurityAttributesToken, {onLeave: function (args) {send("ZwQuerySecurityAttributesToken");}});

var ZwQuerySecurityObject = Module.findExportByName("ntdll.dll", "ZwQuerySecurityObject")
Interceptor.attach(ZwQuerySecurityObject, {onLeave: function (args) {send("ZwQuerySecurityObject");}});

var ZwQuerySecurityPolicy = Module.findExportByName("ntdll.dll", "ZwQuerySecurityPolicy")
Interceptor.attach(ZwQuerySecurityPolicy, {onLeave: function (args) {send("ZwQuerySecurityPolicy");}});

var ZwQuerySemaphore = Module.findExportByName("ntdll.dll", "ZwQuerySemaphore")
Interceptor.attach(ZwQuerySemaphore, {onLeave: function (args) {send("ZwQuerySemaphore");}});

var ZwQuerySymbolicLinkObject = Module.findExportByName("ntdll.dll", "ZwQuerySymbolicLinkObject")
Interceptor.attach(ZwQuerySymbolicLinkObject, {onLeave: function (args) {send("ZwQuerySymbolicLinkObject");}});

var ZwQuerySystemEnvironmentValue = Module.findExportByName("ntdll.dll", "ZwQuerySystemEnvironmentValue")
Interceptor.attach(ZwQuerySystemEnvironmentValue, {onLeave: function (args) {send("ZwQuerySystemEnvironmentValue");}});

var ZwQuerySystemEnvironmentValueEx = Module.findExportByName("ntdll.dll", "ZwQuerySystemEnvironmentValueEx")
Interceptor.attach(ZwQuerySystemEnvironmentValueEx, {onLeave: function (args) {send("ZwQuerySystemEnvironmentValueEx");}});

var ZwQuerySystemInformation = Module.findExportByName("ntdll.dll", "ZwQuerySystemInformation")
Interceptor.attach(ZwQuerySystemInformation, {onLeave: function (args) {send("ZwQuerySystemInformation");}});

var ZwQuerySystemInformationEx = Module.findExportByName("ntdll.dll", "ZwQuerySystemInformationEx")
Interceptor.attach(ZwQuerySystemInformationEx, {onLeave: function (args) {send("ZwQuerySystemInformationEx");}});

var ZwQuerySystemTime = Module.findExportByName("ntdll.dll", "ZwQuerySystemTime")
Interceptor.attach(ZwQuerySystemTime, {onLeave: function (args) {send("ZwQuerySystemTime");}});

var ZwQueryTimer = Module.findExportByName("ntdll.dll", "ZwQueryTimer")
Interceptor.attach(ZwQueryTimer, {onLeave: function (args) {send("ZwQueryTimer");}});

var ZwQueryTimerResolution = Module.findExportByName("ntdll.dll", "ZwQueryTimerResolution")
Interceptor.attach(ZwQueryTimerResolution, {onLeave: function (args) {send("ZwQueryTimerResolution");}});

var ZwQueryValueKey = Module.findExportByName("ntdll.dll", "ZwQueryValueKey")
Interceptor.attach(ZwQueryValueKey, {onLeave: function (args) {send("ZwQueryValueKey");}});

var ZwQueryVirtualMemory = Module.findExportByName("ntdll.dll", "ZwQueryVirtualMemory")
Interceptor.attach(ZwQueryVirtualMemory, {onLeave: function (args) {send("ZwQueryVirtualMemory");}});

var ZwQueryVolumeInformationFile = Module.findExportByName("ntdll.dll", "ZwQueryVolumeInformationFile")
Interceptor.attach(ZwQueryVolumeInformationFile, {onLeave: function (args) {send("ZwQueryVolumeInformationFile");}});

var ZwQueryWnfStateData = Module.findExportByName("ntdll.dll", "ZwQueryWnfStateData")
Interceptor.attach(ZwQueryWnfStateData, {onLeave: function (args) {send("ZwQueryWnfStateData");}});

var ZwQueryWnfStateNameInformation = Module.findExportByName("ntdll.dll", "ZwQueryWnfStateNameInformation")
Interceptor.attach(ZwQueryWnfStateNameInformation, {onLeave: function (args) {send("ZwQueryWnfStateNameInformation");}});

var ZwQueueApcThread = Module.findExportByName("ntdll.dll", "ZwQueueApcThread")
Interceptor.attach(ZwQueueApcThread, {onLeave: function (args) {send("ZwQueueApcThread");}});

var ZwQueueApcThreadEx = Module.findExportByName("ntdll.dll", "ZwQueueApcThreadEx")
Interceptor.attach(ZwQueueApcThreadEx, {onLeave: function (args) {send("ZwQueueApcThreadEx");}});

var ZwQueueApcThreadEx2 = Module.findExportByName("ntdll.dll", "ZwQueueApcThreadEx2")
Interceptor.attach(ZwQueueApcThreadEx2, {onLeave: function (args) {send("ZwQueueApcThreadEx2");}});

var ZwRaiseException = Module.findExportByName("ntdll.dll", "ZwRaiseException")
Interceptor.attach(ZwRaiseException, {onLeave: function (args) {send("ZwRaiseException");}});

var ZwRaiseHardError = Module.findExportByName("ntdll.dll", "ZwRaiseHardError")
Interceptor.attach(ZwRaiseHardError, {onLeave: function (args) {send("ZwRaiseHardError");}});

var ZwReadFile = Module.findExportByName("ntdll.dll", "ZwReadFile")
Interceptor.attach(ZwReadFile, {onLeave: function (args) {send("ZwReadFile");}});

var ZwReadFileScatter = Module.findExportByName("ntdll.dll", "ZwReadFileScatter")
Interceptor.attach(ZwReadFileScatter, {onLeave: function (args) {send("ZwReadFileScatter");}});

var ZwReadOnlyEnlistment = Module.findExportByName("ntdll.dll", "ZwReadOnlyEnlistment")
Interceptor.attach(ZwReadOnlyEnlistment, {onLeave: function (args) {send("ZwReadOnlyEnlistment");}});

var ZwReadRequestData = Module.findExportByName("ntdll.dll", "ZwReadRequestData")
Interceptor.attach(ZwReadRequestData, {onLeave: function (args) {send("ZwReadRequestData");}});

var ZwReadVirtualMemory = Module.findExportByName("ntdll.dll", "ZwReadVirtualMemory")
Interceptor.attach(ZwReadVirtualMemory, {onLeave: function (args) {send("ZwReadVirtualMemory");}});

var ZwReadVirtualMemoryEx = Module.findExportByName("ntdll.dll", "ZwReadVirtualMemoryEx")
Interceptor.attach(ZwReadVirtualMemoryEx, {onLeave: function (args) {send("ZwReadVirtualMemoryEx");}});

var ZwRecoverEnlistment = Module.findExportByName("ntdll.dll", "ZwRecoverEnlistment")
Interceptor.attach(ZwRecoverEnlistment, {onLeave: function (args) {send("ZwRecoverEnlistment");}});

var ZwRecoverResourceManager = Module.findExportByName("ntdll.dll", "ZwRecoverResourceManager")
Interceptor.attach(ZwRecoverResourceManager, {onLeave: function (args) {send("ZwRecoverResourceManager");}});

var ZwRecoverTransactionManager = Module.findExportByName("ntdll.dll", "ZwRecoverTransactionManager")
Interceptor.attach(ZwRecoverTransactionManager, {onLeave: function (args) {send("ZwRecoverTransactionManager");}});

var ZwRegisterProtocolAddressInformation = Module.findExportByName("ntdll.dll", "ZwRegisterProtocolAddressInformation")
Interceptor.attach(ZwRegisterProtocolAddressInformation, {onLeave: function (args) {send("ZwRegisterProtocolAddressInformation");}});

var ZwRegisterThreadTerminatePort = Module.findExportByName("ntdll.dll", "ZwRegisterThreadTerminatePort")
Interceptor.attach(ZwRegisterThreadTerminatePort, {onLeave: function (args) {send("ZwRegisterThreadTerminatePort");}});

var ZwReleaseKeyedEvent = Module.findExportByName("ntdll.dll", "ZwReleaseKeyedEvent")
Interceptor.attach(ZwReleaseKeyedEvent, {onLeave: function (args) {send("ZwReleaseKeyedEvent");}});

var ZwReleaseMutant = Module.findExportByName("ntdll.dll", "ZwReleaseMutant")
Interceptor.attach(ZwReleaseMutant, {onLeave: function (args) {send("ZwReleaseMutant");}});

var ZwReleaseSemaphore = Module.findExportByName("ntdll.dll", "ZwReleaseSemaphore")
Interceptor.attach(ZwReleaseSemaphore, {onLeave: function (args) {send("ZwReleaseSemaphore");}});

var ZwReleaseWorkerFactoryWorker = Module.findExportByName("ntdll.dll", "ZwReleaseWorkerFactoryWorker")
Interceptor.attach(ZwReleaseWorkerFactoryWorker, {onLeave: function (args) {send("ZwReleaseWorkerFactoryWorker");}});

var ZwRemoveIoCompletion = Module.findExportByName("ntdll.dll", "ZwRemoveIoCompletion")
Interceptor.attach(ZwRemoveIoCompletion, {onLeave: function (args) {send("ZwRemoveIoCompletion");}});

var ZwRemoveIoCompletionEx = Module.findExportByName("ntdll.dll", "ZwRemoveIoCompletionEx")
Interceptor.attach(ZwRemoveIoCompletionEx, {onLeave: function (args) {send("ZwRemoveIoCompletionEx");}});

var ZwRemoveProcessDebug = Module.findExportByName("ntdll.dll", "ZwRemoveProcessDebug")
Interceptor.attach(ZwRemoveProcessDebug, {onLeave: function (args) {send("ZwRemoveProcessDebug");}});

var ZwRenameKey = Module.findExportByName("ntdll.dll", "ZwRenameKey")
Interceptor.attach(ZwRenameKey, {onLeave: function (args) {send("ZwRenameKey");}});

var ZwRenameTransactionManager = Module.findExportByName("ntdll.dll", "ZwRenameTransactionManager")
Interceptor.attach(ZwRenameTransactionManager, {onLeave: function (args) {send("ZwRenameTransactionManager");}});

var ZwReplaceKey = Module.findExportByName("ntdll.dll", "ZwReplaceKey")
Interceptor.attach(ZwReplaceKey, {onLeave: function (args) {send("ZwReplaceKey");}});

var ZwReplacePartitionUnit = Module.findExportByName("ntdll.dll", "ZwReplacePartitionUnit")
Interceptor.attach(ZwReplacePartitionUnit, {onLeave: function (args) {send("ZwReplacePartitionUnit");}});

var ZwReplyPort = Module.findExportByName("ntdll.dll", "ZwReplyPort")
Interceptor.attach(ZwReplyPort, {onLeave: function (args) {send("ZwReplyPort");}});

var ZwReplyWaitReceivePort = Module.findExportByName("ntdll.dll", "ZwReplyWaitReceivePort")
Interceptor.attach(ZwReplyWaitReceivePort, {onLeave: function (args) {send("ZwReplyWaitReceivePort");}});

var ZwReplyWaitReceivePortEx = Module.findExportByName("ntdll.dll", "ZwReplyWaitReceivePortEx")
Interceptor.attach(ZwReplyWaitReceivePortEx, {onLeave: function (args) {send("ZwReplyWaitReceivePortEx");}});

var ZwReplyWaitReplyPort = Module.findExportByName("ntdll.dll", "ZwReplyWaitReplyPort")
Interceptor.attach(ZwReplyWaitReplyPort, {onLeave: function (args) {send("ZwReplyWaitReplyPort");}});

var ZwRequestPort = Module.findExportByName("ntdll.dll", "ZwRequestPort")
Interceptor.attach(ZwRequestPort, {onLeave: function (args) {send("ZwRequestPort");}});

var ZwRequestWaitReplyPort = Module.findExportByName("ntdll.dll", "ZwRequestWaitReplyPort")
Interceptor.attach(ZwRequestWaitReplyPort, {onLeave: function (args) {send("ZwRequestWaitReplyPort");}});

var ZwResetEvent = Module.findExportByName("ntdll.dll", "ZwResetEvent")
Interceptor.attach(ZwResetEvent, {onLeave: function (args) {send("ZwResetEvent");}});

var ZwResetWriteWatch = Module.findExportByName("ntdll.dll", "ZwResetWriteWatch")
Interceptor.attach(ZwResetWriteWatch, {onLeave: function (args) {send("ZwResetWriteWatch");}});

var ZwRestoreKey = Module.findExportByName("ntdll.dll", "ZwRestoreKey")
Interceptor.attach(ZwRestoreKey, {onLeave: function (args) {send("ZwRestoreKey");}});

var ZwResumeProcess = Module.findExportByName("ntdll.dll", "ZwResumeProcess")
Interceptor.attach(ZwResumeProcess, {onLeave: function (args) {send("ZwResumeProcess");}});

var ZwResumeThread = Module.findExportByName("ntdll.dll", "ZwResumeThread")
Interceptor.attach(ZwResumeThread, {onLeave: function (args) {send("ZwResumeThread");}});

var ZwRevertContainerImpersonation = Module.findExportByName("ntdll.dll", "ZwRevertContainerImpersonation")
Interceptor.attach(ZwRevertContainerImpersonation, {onLeave: function (args) {send("ZwRevertContainerImpersonation");}});

var ZwRollbackComplete = Module.findExportByName("ntdll.dll", "ZwRollbackComplete")
Interceptor.attach(ZwRollbackComplete, {onLeave: function (args) {send("ZwRollbackComplete");}});

var ZwRollbackEnlistment = Module.findExportByName("ntdll.dll", "ZwRollbackEnlistment")
Interceptor.attach(ZwRollbackEnlistment, {onLeave: function (args) {send("ZwRollbackEnlistment");}});

var ZwRollbackRegistryTransaction = Module.findExportByName("ntdll.dll", "ZwRollbackRegistryTransaction")
Interceptor.attach(ZwRollbackRegistryTransaction, {onLeave: function (args) {send("ZwRollbackRegistryTransaction");}});

var ZwRollbackTransaction = Module.findExportByName("ntdll.dll", "ZwRollbackTransaction")
Interceptor.attach(ZwRollbackTransaction, {onLeave: function (args) {send("ZwRollbackTransaction");}});

var ZwRollforwardTransactionManager = Module.findExportByName("ntdll.dll", "ZwRollforwardTransactionManager")
Interceptor.attach(ZwRollforwardTransactionManager, {onLeave: function (args) {send("ZwRollforwardTransactionManager");}});

var ZwSaveKey = Module.findExportByName("ntdll.dll", "ZwSaveKey")
Interceptor.attach(ZwSaveKey, {onLeave: function (args) {send("ZwSaveKey");}});

var ZwSaveKeyEx = Module.findExportByName("ntdll.dll", "ZwSaveKeyEx")
Interceptor.attach(ZwSaveKeyEx, {onLeave: function (args) {send("ZwSaveKeyEx");}});

var ZwSaveMergedKeys = Module.findExportByName("ntdll.dll", "ZwSaveMergedKeys")
Interceptor.attach(ZwSaveMergedKeys, {onLeave: function (args) {send("ZwSaveMergedKeys");}});

var ZwSecureConnectPort = Module.findExportByName("ntdll.dll", "ZwSecureConnectPort")
Interceptor.attach(ZwSecureConnectPort, {onLeave: function (args) {send("ZwSecureConnectPort");}});

var ZwSerializeBoot = Module.findExportByName("ntdll.dll", "ZwSerializeBoot")
Interceptor.attach(ZwSerializeBoot, {onLeave: function (args) {send("ZwSerializeBoot");}});

var ZwSetBootEntryOrder = Module.findExportByName("ntdll.dll", "ZwSetBootEntryOrder")
Interceptor.attach(ZwSetBootEntryOrder, {onLeave: function (args) {send("ZwSetBootEntryOrder");}});

var ZwSetBootOptions = Module.findExportByName("ntdll.dll", "ZwSetBootOptions")
Interceptor.attach(ZwSetBootOptions, {onLeave: function (args) {send("ZwSetBootOptions");}});

var ZwSetCachedSigningLevel = Module.findExportByName("ntdll.dll", "ZwSetCachedSigningLevel")
Interceptor.attach(ZwSetCachedSigningLevel, {onLeave: function (args) {send("ZwSetCachedSigningLevel");}});

var ZwSetCachedSigningLevel2 = Module.findExportByName("ntdll.dll", "ZwSetCachedSigningLevel2")
Interceptor.attach(ZwSetCachedSigningLevel2, {onLeave: function (args) {send("ZwSetCachedSigningLevel2");}});

var ZwSetContextThread = Module.findExportByName("ntdll.dll", "ZwSetContextThread")
Interceptor.attach(ZwSetContextThread, {onLeave: function (args) {send("ZwSetContextThread");}});

var ZwSetDebugFilterState = Module.findExportByName("ntdll.dll", "ZwSetDebugFilterState")
Interceptor.attach(ZwSetDebugFilterState, {onLeave: function (args) {send("ZwSetDebugFilterState");}});

var ZwSetDefaultHardErrorPort = Module.findExportByName("ntdll.dll", "ZwSetDefaultHardErrorPort")
Interceptor.attach(ZwSetDefaultHardErrorPort, {onLeave: function (args) {send("ZwSetDefaultHardErrorPort");}});

var ZwSetDefaultLocale = Module.findExportByName("ntdll.dll", "ZwSetDefaultLocale")
Interceptor.attach(ZwSetDefaultLocale, {onLeave: function (args) {send("ZwSetDefaultLocale");}});

var ZwSetDefaultUILanguage = Module.findExportByName("ntdll.dll", "ZwSetDefaultUILanguage")
Interceptor.attach(ZwSetDefaultUILanguage, {onLeave: function (args) {send("ZwSetDefaultUILanguage");}});

var ZwSetDriverEntryOrder = Module.findExportByName("ntdll.dll", "ZwSetDriverEntryOrder")
Interceptor.attach(ZwSetDriverEntryOrder, {onLeave: function (args) {send("ZwSetDriverEntryOrder");}});

var ZwSetEaFile = Module.findExportByName("ntdll.dll", "ZwSetEaFile")
Interceptor.attach(ZwSetEaFile, {onLeave: function (args) {send("ZwSetEaFile");}});

var ZwSetEvent = Module.findExportByName("ntdll.dll", "ZwSetEvent")
Interceptor.attach(ZwSetEvent, {onLeave: function (args) {send("ZwSetEvent");}});

var ZwSetEventBoostPriority = Module.findExportByName("ntdll.dll", "ZwSetEventBoostPriority")
Interceptor.attach(ZwSetEventBoostPriority, {onLeave: function (args) {send("ZwSetEventBoostPriority");}});

var ZwSetHighEventPair = Module.findExportByName("ntdll.dll", "ZwSetHighEventPair")
Interceptor.attach(ZwSetHighEventPair, {onLeave: function (args) {send("ZwSetHighEventPair");}});

var ZwSetHighWaitLowEventPair = Module.findExportByName("ntdll.dll", "ZwSetHighWaitLowEventPair")
Interceptor.attach(ZwSetHighWaitLowEventPair, {onLeave: function (args) {send("ZwSetHighWaitLowEventPair");}});

var ZwSetIRTimer = Module.findExportByName("ntdll.dll", "ZwSetIRTimer")
Interceptor.attach(ZwSetIRTimer, {onLeave: function (args) {send("ZwSetIRTimer");}});

var ZwSetInformationCpuPartition = Module.findExportByName("ntdll.dll", "ZwSetInformationCpuPartition")
Interceptor.attach(ZwSetInformationCpuPartition, {onLeave: function (args) {send("ZwSetInformationCpuPartition");}});

var ZwSetInformationDebugObject = Module.findExportByName("ntdll.dll", "ZwSetInformationDebugObject")
Interceptor.attach(ZwSetInformationDebugObject, {onLeave: function (args) {send("ZwSetInformationDebugObject");}});

var ZwSetInformationEnlistment = Module.findExportByName("ntdll.dll", "ZwSetInformationEnlistment")
Interceptor.attach(ZwSetInformationEnlistment, {onLeave: function (args) {send("ZwSetInformationEnlistment");}});

var ZwSetInformationFile = Module.findExportByName("ntdll.dll", "ZwSetInformationFile")
Interceptor.attach(ZwSetInformationFile, {onLeave: function (args) {send("ZwSetInformationFile");}});

var ZwSetInformationIoRing = Module.findExportByName("ntdll.dll", "ZwSetInformationIoRing")
Interceptor.attach(ZwSetInformationIoRing, {onLeave: function (args) {send("ZwSetInformationIoRing");}});

var ZwSetInformationJobObject = Module.findExportByName("ntdll.dll", "ZwSetInformationJobObject")
Interceptor.attach(ZwSetInformationJobObject, {onLeave: function (args) {send("ZwSetInformationJobObject");}});

var ZwSetInformationKey = Module.findExportByName("ntdll.dll", "ZwSetInformationKey")
Interceptor.attach(ZwSetInformationKey, {onLeave: function (args) {send("ZwSetInformationKey");}});

var ZwSetInformationObject = Module.findExportByName("ntdll.dll", "ZwSetInformationObject")
Interceptor.attach(ZwSetInformationObject, {onLeave: function (args) {send("ZwSetInformationObject");}});

var ZwSetInformationProcess = Module.findExportByName("ntdll.dll", "ZwSetInformationProcess")
Interceptor.attach(ZwSetInformationProcess, {onLeave: function (args) {send("ZwSetInformationProcess");}});

var ZwSetInformationResourceManager = Module.findExportByName("ntdll.dll", "ZwSetInformationResourceManager")
Interceptor.attach(ZwSetInformationResourceManager, {onLeave: function (args) {send("ZwSetInformationResourceManager");}});

var ZwSetInformationSymbolicLink = Module.findExportByName("ntdll.dll", "ZwSetInformationSymbolicLink")
Interceptor.attach(ZwSetInformationSymbolicLink, {onLeave: function (args) {send("ZwSetInformationSymbolicLink");}});

var ZwSetInformationThread = Module.findExportByName("ntdll.dll", "ZwSetInformationThread")
Interceptor.attach(ZwSetInformationThread, {onLeave: function (args) {send("ZwSetInformationThread");}});

var ZwSetInformationToken = Module.findExportByName("ntdll.dll", "ZwSetInformationToken")
Interceptor.attach(ZwSetInformationToken, {onLeave: function (args) {send("ZwSetInformationToken");}});

var ZwSetInformationTransaction = Module.findExportByName("ntdll.dll", "ZwSetInformationTransaction")
Interceptor.attach(ZwSetInformationTransaction, {onLeave: function (args) {send("ZwSetInformationTransaction");}});

var ZwSetInformationTransactionManager = Module.findExportByName("ntdll.dll", "ZwSetInformationTransactionManager")
Interceptor.attach(ZwSetInformationTransactionManager, {onLeave: function (args) {send("ZwSetInformationTransactionManager");}});

var ZwSetInformationVirtualMemory = Module.findExportByName("ntdll.dll", "ZwSetInformationVirtualMemory")
Interceptor.attach(ZwSetInformationVirtualMemory, {onLeave: function (args) {send("ZwSetInformationVirtualMemory");}});

var ZwSetInformationWorkerFactory = Module.findExportByName("ntdll.dll", "ZwSetInformationWorkerFactory")
Interceptor.attach(ZwSetInformationWorkerFactory, {onLeave: function (args) {send("ZwSetInformationWorkerFactory");}});

var ZwSetIntervalProfile = Module.findExportByName("ntdll.dll", "ZwSetIntervalProfile")
Interceptor.attach(ZwSetIntervalProfile, {onLeave: function (args) {send("ZwSetIntervalProfile");}});

var ZwSetIoCompletion = Module.findExportByName("ntdll.dll", "ZwSetIoCompletion")
Interceptor.attach(ZwSetIoCompletion, {onLeave: function (args) {send("ZwSetIoCompletion");}});

var ZwSetIoCompletionEx = Module.findExportByName("ntdll.dll", "ZwSetIoCompletionEx")
Interceptor.attach(ZwSetIoCompletionEx, {onLeave: function (args) {send("ZwSetIoCompletionEx");}});

var ZwSetLdtEntries = Module.findExportByName("ntdll.dll", "ZwSetLdtEntries")
Interceptor.attach(ZwSetLdtEntries, {onLeave: function (args) {send("ZwSetLdtEntries");}});

var ZwSetLowEventPair = Module.findExportByName("ntdll.dll", "ZwSetLowEventPair")
Interceptor.attach(ZwSetLowEventPair, {onLeave: function (args) {send("ZwSetLowEventPair");}});

var ZwSetLowWaitHighEventPair = Module.findExportByName("ntdll.dll", "ZwSetLowWaitHighEventPair")
Interceptor.attach(ZwSetLowWaitHighEventPair, {onLeave: function (args) {send("ZwSetLowWaitHighEventPair");}});

var ZwSetQuotaInformationFile = Module.findExportByName("ntdll.dll", "ZwSetQuotaInformationFile")
Interceptor.attach(ZwSetQuotaInformationFile, {onLeave: function (args) {send("ZwSetQuotaInformationFile");}});

var ZwSetSecurityObject = Module.findExportByName("ntdll.dll", "ZwSetSecurityObject")
Interceptor.attach(ZwSetSecurityObject, {onLeave: function (args) {send("ZwSetSecurityObject");}});

var ZwSetSystemEnvironmentValue = Module.findExportByName("ntdll.dll", "ZwSetSystemEnvironmentValue")
Interceptor.attach(ZwSetSystemEnvironmentValue, {onLeave: function (args) {send("ZwSetSystemEnvironmentValue");}});

var ZwSetSystemEnvironmentValueEx = Module.findExportByName("ntdll.dll", "ZwSetSystemEnvironmentValueEx")
Interceptor.attach(ZwSetSystemEnvironmentValueEx, {onLeave: function (args) {send("ZwSetSystemEnvironmentValueEx");}});

var ZwSetSystemInformation = Module.findExportByName("ntdll.dll", "ZwSetSystemInformation")
Interceptor.attach(ZwSetSystemInformation, {onLeave: function (args) {send("ZwSetSystemInformation");}});

var ZwSetSystemPowerState = Module.findExportByName("ntdll.dll", "ZwSetSystemPowerState")
Interceptor.attach(ZwSetSystemPowerState, {onLeave: function (args) {send("ZwSetSystemPowerState");}});

var ZwSetSystemTime = Module.findExportByName("ntdll.dll", "ZwSetSystemTime")
Interceptor.attach(ZwSetSystemTime, {onLeave: function (args) {send("ZwSetSystemTime");}});

var ZwSetThreadExecutionState = Module.findExportByName("ntdll.dll", "ZwSetThreadExecutionState")
Interceptor.attach(ZwSetThreadExecutionState, {onLeave: function (args) {send("ZwSetThreadExecutionState");}});

var ZwSetTimer = Module.findExportByName("ntdll.dll", "ZwSetTimer")
Interceptor.attach(ZwSetTimer, {onLeave: function (args) {send("ZwSetTimer");}});

var ZwSetTimer2 = Module.findExportByName("ntdll.dll", "ZwSetTimer2")
Interceptor.attach(ZwSetTimer2, {onLeave: function (args) {send("ZwSetTimer2");}});

var ZwSetTimerEx = Module.findExportByName("ntdll.dll", "ZwSetTimerEx")
Interceptor.attach(ZwSetTimerEx, {onLeave: function (args) {send("ZwSetTimerEx");}});

var ZwSetTimerResolution = Module.findExportByName("ntdll.dll", "ZwSetTimerResolution")
Interceptor.attach(ZwSetTimerResolution, {onLeave: function (args) {send("ZwSetTimerResolution");}});

var ZwSetUuidSeed = Module.findExportByName("ntdll.dll", "ZwSetUuidSeed")
Interceptor.attach(ZwSetUuidSeed, {onLeave: function (args) {send("ZwSetUuidSeed");}});

var ZwSetValueKey = Module.findExportByName("ntdll.dll", "ZwSetValueKey")
Interceptor.attach(ZwSetValueKey, {onLeave: function (args) {send("ZwSetValueKey");}});

var ZwSetVolumeInformationFile = Module.findExportByName("ntdll.dll", "ZwSetVolumeInformationFile")
Interceptor.attach(ZwSetVolumeInformationFile, {onLeave: function (args) {send("ZwSetVolumeInformationFile");}});

var ZwSetWnfProcessNotificationEvent = Module.findExportByName("ntdll.dll", "ZwSetWnfProcessNotificationEvent")
Interceptor.attach(ZwSetWnfProcessNotificationEvent, {onLeave: function (args) {send("ZwSetWnfProcessNotificationEvent");}});

var ZwShutdownSystem = Module.findExportByName("ntdll.dll", "ZwShutdownSystem")
Interceptor.attach(ZwShutdownSystem, {onLeave: function (args) {send("ZwShutdownSystem");}});

var ZwShutdownWorkerFactory = Module.findExportByName("ntdll.dll", "ZwShutdownWorkerFactory")
Interceptor.attach(ZwShutdownWorkerFactory, {onLeave: function (args) {send("ZwShutdownWorkerFactory");}});

var ZwSignalAndWaitForSingleObject = Module.findExportByName("ntdll.dll", "ZwSignalAndWaitForSingleObject")
Interceptor.attach(ZwSignalAndWaitForSingleObject, {onLeave: function (args) {send("ZwSignalAndWaitForSingleObject");}});

var ZwSinglePhaseReject = Module.findExportByName("ntdll.dll", "ZwSinglePhaseReject")
Interceptor.attach(ZwSinglePhaseReject, {onLeave: function (args) {send("ZwSinglePhaseReject");}});

var ZwStartProfile = Module.findExportByName("ntdll.dll", "ZwStartProfile")
Interceptor.attach(ZwStartProfile, {onLeave: function (args) {send("ZwStartProfile");}});

var ZwStopProfile = Module.findExportByName("ntdll.dll", "ZwStopProfile")
Interceptor.attach(ZwStopProfile, {onLeave: function (args) {send("ZwStopProfile");}});

var ZwSubmitIoRing = Module.findExportByName("ntdll.dll", "ZwSubmitIoRing")
Interceptor.attach(ZwSubmitIoRing, {onLeave: function (args) {send("ZwSubmitIoRing");}});

var ZwSubscribeWnfStateChange = Module.findExportByName("ntdll.dll", "ZwSubscribeWnfStateChange")
Interceptor.attach(ZwSubscribeWnfStateChange, {onLeave: function (args) {send("ZwSubscribeWnfStateChange");}});

var ZwSuspendProcess = Module.findExportByName("ntdll.dll", "ZwSuspendProcess")
Interceptor.attach(ZwSuspendProcess, {onLeave: function (args) {send("ZwSuspendProcess");}});

var ZwSuspendThread = Module.findExportByName("ntdll.dll", "ZwSuspendThread")
Interceptor.attach(ZwSuspendThread, {onLeave: function (args) {send("ZwSuspendThread");}});

var ZwSystemDebugControl = Module.findExportByName("ntdll.dll", "ZwSystemDebugControl")
Interceptor.attach(ZwSystemDebugControl, {onLeave: function (args) {send("ZwSystemDebugControl");}});

var ZwTerminateEnclave = Module.findExportByName("ntdll.dll", "ZwTerminateEnclave")
Interceptor.attach(ZwTerminateEnclave, {onLeave: function (args) {send("ZwTerminateEnclave");}});

var ZwTerminateJobObject = Module.findExportByName("ntdll.dll", "ZwTerminateJobObject")
Interceptor.attach(ZwTerminateJobObject, {onLeave: function (args) {send("ZwTerminateJobObject");}});

var ZwTerminateProcess = Module.findExportByName("ntdll.dll", "ZwTerminateProcess")
Interceptor.attach(ZwTerminateProcess, {onLeave: function (args) {send("ZwTerminateProcess");}});

var ZwTerminateThread = Module.findExportByName("ntdll.dll", "ZwTerminateThread")
Interceptor.attach(ZwTerminateThread, {onLeave: function (args) {send("ZwTerminateThread");}});

var ZwTestAlert = Module.findExportByName("ntdll.dll", "ZwTestAlert")
Interceptor.attach(ZwTestAlert, {onLeave: function (args) {send("ZwTestAlert");}});

var ZwThawRegistry = Module.findExportByName("ntdll.dll", "ZwThawRegistry")
Interceptor.attach(ZwThawRegistry, {onLeave: function (args) {send("ZwThawRegistry");}});

var ZwThawTransactions = Module.findExportByName("ntdll.dll", "ZwThawTransactions")
Interceptor.attach(ZwThawTransactions, {onLeave: function (args) {send("ZwThawTransactions");}});

var ZwTraceControl = Module.findExportByName("ntdll.dll", "ZwTraceControl")
Interceptor.attach(ZwTraceControl, {onLeave: function (args) {send("ZwTraceControl");}});

var ZwTraceEvent = Module.findExportByName("ntdll.dll", "ZwTraceEvent")
Interceptor.attach(ZwTraceEvent, {onLeave: function (args) {send("ZwTraceEvent");}});

var ZwTranslateFilePath = Module.findExportByName("ntdll.dll", "ZwTranslateFilePath")
Interceptor.attach(ZwTranslateFilePath, {onLeave: function (args) {send("ZwTranslateFilePath");}});

var ZwUmsThreadYield = Module.findExportByName("ntdll.dll", "ZwUmsThreadYield")
Interceptor.attach(ZwUmsThreadYield, {onLeave: function (args) {send("ZwUmsThreadYield");}});

var ZwUnloadDriver = Module.findExportByName("ntdll.dll", "ZwUnloadDriver")
Interceptor.attach(ZwUnloadDriver, {onLeave: function (args) {send("ZwUnloadDriver");}});

var ZwUnloadKey = Module.findExportByName("ntdll.dll", "ZwUnloadKey")
Interceptor.attach(ZwUnloadKey, {onLeave: function (args) {send("ZwUnloadKey");}});

var ZwUnloadKey2 = Module.findExportByName("ntdll.dll", "ZwUnloadKey2")
Interceptor.attach(ZwUnloadKey2, {onLeave: function (args) {send("ZwUnloadKey2");}});

var ZwUnloadKeyEx = Module.findExportByName("ntdll.dll", "ZwUnloadKeyEx")
Interceptor.attach(ZwUnloadKeyEx, {onLeave: function (args) {send("ZwUnloadKeyEx");}});

var ZwUnlockFile = Module.findExportByName("ntdll.dll", "ZwUnlockFile")
Interceptor.attach(ZwUnlockFile, {onLeave: function (args) {send("ZwUnlockFile");}});

var ZwUnlockVirtualMemory = Module.findExportByName("ntdll.dll", "ZwUnlockVirtualMemory")
Interceptor.attach(ZwUnlockVirtualMemory, {onLeave: function (args) {send("ZwUnlockVirtualMemory");}});

var ZwUnmapViewOfSection = Module.findExportByName("ntdll.dll", "ZwUnmapViewOfSection")
Interceptor.attach(ZwUnmapViewOfSection, {onLeave: function (args) {send("ZwUnmapViewOfSection");}});

var ZwUnmapViewOfSectionEx = Module.findExportByName("ntdll.dll", "ZwUnmapViewOfSectionEx")
Interceptor.attach(ZwUnmapViewOfSectionEx, {onLeave: function (args) {send("ZwUnmapViewOfSectionEx");}});

var ZwUnsubscribeWnfStateChange = Module.findExportByName("ntdll.dll", "ZwUnsubscribeWnfStateChange")
Interceptor.attach(ZwUnsubscribeWnfStateChange, {onLeave: function (args) {send("ZwUnsubscribeWnfStateChange");}});

var ZwUpdateWnfStateData = Module.findExportByName("ntdll.dll", "ZwUpdateWnfStateData")
Interceptor.attach(ZwUpdateWnfStateData, {onLeave: function (args) {send("ZwUpdateWnfStateData");}});

var ZwVdmControl = Module.findExportByName("ntdll.dll", "ZwVdmControl")
Interceptor.attach(ZwVdmControl, {onLeave: function (args) {send("ZwVdmControl");}});

var ZwWaitForAlertByThreadId = Module.findExportByName("ntdll.dll", "ZwWaitForAlertByThreadId")
Interceptor.attach(ZwWaitForAlertByThreadId, {onLeave: function (args) {send("ZwWaitForAlertByThreadId");}});

var ZwWaitForDebugEvent = Module.findExportByName("ntdll.dll", "ZwWaitForDebugEvent")
Interceptor.attach(ZwWaitForDebugEvent, {onLeave: function (args) {send("ZwWaitForDebugEvent");}});

var ZwWaitForKeyedEvent = Module.findExportByName("ntdll.dll", "ZwWaitForKeyedEvent")
Interceptor.attach(ZwWaitForKeyedEvent, {onLeave: function (args) {send("ZwWaitForKeyedEvent");}});

var ZwWaitForMultipleObjects = Module.findExportByName("ntdll.dll", "ZwWaitForMultipleObjects")
Interceptor.attach(ZwWaitForMultipleObjects, {onLeave: function (args) {send("ZwWaitForMultipleObjects");}});

var ZwWaitForMultipleObjects32 = Module.findExportByName("ntdll.dll", "ZwWaitForMultipleObjects32")
Interceptor.attach(ZwWaitForMultipleObjects32, {onLeave: function (args) {send("ZwWaitForMultipleObjects32");}});

var ZwWaitForSingleObject = Module.findExportByName("ntdll.dll", "ZwWaitForSingleObject")
Interceptor.attach(ZwWaitForSingleObject, {onLeave: function (args) {send("ZwWaitForSingleObject");}});

var ZwWaitForWorkViaWorkerFactory = Module.findExportByName("ntdll.dll", "ZwWaitForWorkViaWorkerFactory")
Interceptor.attach(ZwWaitForWorkViaWorkerFactory, {onLeave: function (args) {send("ZwWaitForWorkViaWorkerFactory");}});

var ZwWaitHighEventPair = Module.findExportByName("ntdll.dll", "ZwWaitHighEventPair")
Interceptor.attach(ZwWaitHighEventPair, {onLeave: function (args) {send("ZwWaitHighEventPair");}});

var ZwWaitLowEventPair = Module.findExportByName("ntdll.dll", "ZwWaitLowEventPair")
Interceptor.attach(ZwWaitLowEventPair, {onLeave: function (args) {send("ZwWaitLowEventPair");}});

var ZwWorkerFactoryWorkerReady = Module.findExportByName("ntdll.dll", "ZwWorkerFactoryWorkerReady")
Interceptor.attach(ZwWorkerFactoryWorkerReady, {onLeave: function (args) {send("ZwWorkerFactoryWorkerReady");}});

var ZwWriteFile = Module.findExportByName("ntdll.dll", "ZwWriteFile")
Interceptor.attach(ZwWriteFile, {onLeave: function (args) {send("ZwWriteFile");}});

var ZwWriteFileGather = Module.findExportByName("ntdll.dll", "ZwWriteFileGather")
Interceptor.attach(ZwWriteFileGather, {onLeave: function (args) {send("ZwWriteFileGather");}});

var ZwWriteRequestData = Module.findExportByName("ntdll.dll", "ZwWriteRequestData")
Interceptor.attach(ZwWriteRequestData, {onLeave: function (args) {send("ZwWriteRequestData");}});

var ZwWriteVirtualMemory = Module.findExportByName("ntdll.dll", "ZwWriteVirtualMemory")
Interceptor.attach(ZwWriteVirtualMemory, {onLeave: function (args) {send("ZwWriteVirtualMemory");}});

var ZwYieldExecution = Module.findExportByName("ntdll.dll", "ZwYieldExecution")
Interceptor.attach(ZwYieldExecution, {onLeave: function (args) {send("ZwYieldExecution");}});

var __C_specific_handler = Module.findExportByName("ntdll.dll", "__C_specific_handler")
Interceptor.attach(__C_specific_handler, {onLeave: function (args) {send("__C_specific_handler");}});

var __chkstk = Module.findExportByName("ntdll.dll", "__chkstk")
Interceptor.attach(__chkstk, {onLeave: function (args) {send("__chkstk");}});

var __isascii = Module.findExportByName("ntdll.dll", "__isascii")
Interceptor.attach(__isascii, {onLeave: function (args) {send("__isascii");}});

var __iscsym = Module.findExportByName("ntdll.dll", "__iscsym")
Interceptor.attach(__iscsym, {onLeave: function (args) {send("__iscsym");}});

var __iscsymf = Module.findExportByName("ntdll.dll", "__iscsymf")
Interceptor.attach(__iscsymf, {onLeave: function (args) {send("__iscsymf");}});

var __misaligned_access = Module.findExportByName("ntdll.dll", "__misaligned_access")
Interceptor.attach(__misaligned_access, {onLeave: function (args) {send("__misaligned_access");}});

var __toascii = Module.findExportByName("ntdll.dll", "__toascii")
Interceptor.attach(__toascii, {onLeave: function (args) {send("__toascii");}});

var _atoi64 = Module.findExportByName("ntdll.dll", "_atoi64")
Interceptor.attach(_atoi64, {onLeave: function (args) {send("_atoi64");}});

var _errno = Module.findExportByName("ntdll.dll", "_errno")
Interceptor.attach(_errno, {onLeave: function (args) {send("_errno");}});

var _fltused = Module.findExportByName("ntdll.dll", "_fltused")
Interceptor.attach(_fltused, {onLeave: function (args) {send("_fltused");}});

var _i64toa = Module.findExportByName("ntdll.dll", "_i64toa")
Interceptor.attach(_i64toa, {onLeave: function (args) {send("_i64toa");}});

var _i64toa_s = Module.findExportByName("ntdll.dll", "_i64toa_s")
Interceptor.attach(_i64toa_s, {onLeave: function (args) {send("_i64toa_s");}});

var _i64tow = Module.findExportByName("ntdll.dll", "_i64tow")
Interceptor.attach(_i64tow, {onLeave: function (args) {send("_i64tow");}});

var _i64tow_s = Module.findExportByName("ntdll.dll", "_i64tow_s")
Interceptor.attach(_i64tow_s, {onLeave: function (args) {send("_i64tow_s");}});

var _itoa = Module.findExportByName("ntdll.dll", "_itoa")
Interceptor.attach(_itoa, {onLeave: function (args) {send("_itoa");}});

var _itoa_s = Module.findExportByName("ntdll.dll", "_itoa_s")
Interceptor.attach(_itoa_s, {onLeave: function (args) {send("_itoa_s");}});

var _itow = Module.findExportByName("ntdll.dll", "_itow")
Interceptor.attach(_itow, {onLeave: function (args) {send("_itow");}});

var _itow_s = Module.findExportByName("ntdll.dll", "_itow_s")
Interceptor.attach(_itow_s, {onLeave: function (args) {send("_itow_s");}});

var _lfind = Module.findExportByName("ntdll.dll", "_lfind")
Interceptor.attach(_lfind, {onLeave: function (args) {send("_lfind");}});

var _local_unwind = Module.findExportByName("ntdll.dll", "_local_unwind")
Interceptor.attach(_local_unwind, {onLeave: function (args) {send("_local_unwind");}});

var _ltoa = Module.findExportByName("ntdll.dll", "_ltoa")
Interceptor.attach(_ltoa, {onLeave: function (args) {send("_ltoa");}});

var _ltoa_s = Module.findExportByName("ntdll.dll", "_ltoa_s")
Interceptor.attach(_ltoa_s, {onLeave: function (args) {send("_ltoa_s");}});

var _ltow = Module.findExportByName("ntdll.dll", "_ltow")
Interceptor.attach(_ltow, {onLeave: function (args) {send("_ltow");}});

var _ltow_s = Module.findExportByName("ntdll.dll", "_ltow_s")
Interceptor.attach(_ltow_s, {onLeave: function (args) {send("_ltow_s");}});

var _makepath_s = Module.findExportByName("ntdll.dll", "_makepath_s")
Interceptor.attach(_makepath_s, {onLeave: function (args) {send("_makepath_s");}});

var _memccpy = Module.findExportByName("ntdll.dll", "_memccpy")
Interceptor.attach(_memccpy, {onLeave: function (args) {send("_memccpy");}});

var _memicmp = Module.findExportByName("ntdll.dll", "_memicmp")
Interceptor.attach(_memicmp, {onLeave: function (args) {send("_memicmp");}});

var _setjmp = Module.findExportByName("ntdll.dll", "_setjmp")
Interceptor.attach(_setjmp, {onLeave: function (args) {send("_setjmp");}});

var _setjmpex = Module.findExportByName("ntdll.dll", "_setjmpex")
Interceptor.attach(_setjmpex, {onLeave: function (args) {send("_setjmpex");}});

var _snprintf = Module.findExportByName("ntdll.dll", "_snprintf")
Interceptor.attach(_snprintf, {onLeave: function (args) {send("_snprintf");}});

var _snprintf_s = Module.findExportByName("ntdll.dll", "_snprintf_s")
Interceptor.attach(_snprintf_s, {onLeave: function (args) {send("_snprintf_s");}});

var _snscanf_s = Module.findExportByName("ntdll.dll", "_snscanf_s")
Interceptor.attach(_snscanf_s, {onLeave: function (args) {send("_snscanf_s");}});

var _snwprintf = Module.findExportByName("ntdll.dll", "_snwprintf")
Interceptor.attach(_snwprintf, {onLeave: function (args) {send("_snwprintf");}});

var _snwprintf_s = Module.findExportByName("ntdll.dll", "_snwprintf_s")
Interceptor.attach(_snwprintf_s, {onLeave: function (args) {send("_snwprintf_s");}});

var _snwscanf_s = Module.findExportByName("ntdll.dll", "_snwscanf_s")
Interceptor.attach(_snwscanf_s, {onLeave: function (args) {send("_snwscanf_s");}});

var _splitpath = Module.findExportByName("ntdll.dll", "_splitpath")
Interceptor.attach(_splitpath, {onLeave: function (args) {send("_splitpath");}});

var _splitpath_s = Module.findExportByName("ntdll.dll", "_splitpath_s")
Interceptor.attach(_splitpath_s, {onLeave: function (args) {send("_splitpath_s");}});

var _strcmpi = Module.findExportByName("ntdll.dll", "_strcmpi")
Interceptor.attach(_strcmpi, {onLeave: function (args) {send("_strcmpi");}});

var _stricmp = Module.findExportByName("ntdll.dll", "_stricmp")
Interceptor.attach(_stricmp, {onLeave: function (args) {send("_stricmp");}});

var _strlwr = Module.findExportByName("ntdll.dll", "_strlwr")
Interceptor.attach(_strlwr, {onLeave: function (args) {send("_strlwr");}});

var _strlwr_s = Module.findExportByName("ntdll.dll", "_strlwr_s")
Interceptor.attach(_strlwr_s, {onLeave: function (args) {send("_strlwr_s");}});

var _strnicmp = Module.findExportByName("ntdll.dll", "_strnicmp")
Interceptor.attach(_strnicmp, {onLeave: function (args) {send("_strnicmp");}});

var _strnset_s = Module.findExportByName("ntdll.dll", "_strnset_s")
Interceptor.attach(_strnset_s, {onLeave: function (args) {send("_strnset_s");}});

var _strset_s = Module.findExportByName("ntdll.dll", "_strset_s")
Interceptor.attach(_strset_s, {onLeave: function (args) {send("_strset_s");}});

var _strupr = Module.findExportByName("ntdll.dll", "_strupr")
Interceptor.attach(_strupr, {onLeave: function (args) {send("_strupr");}});

var _strupr_s = Module.findExportByName("ntdll.dll", "_strupr_s")
Interceptor.attach(_strupr_s, {onLeave: function (args) {send("_strupr_s");}});

var _swprintf = Module.findExportByName("ntdll.dll", "_swprintf")
Interceptor.attach(_swprintf, {onLeave: function (args) {send("_swprintf");}});

var _ui64toa = Module.findExportByName("ntdll.dll", "_ui64toa")
Interceptor.attach(_ui64toa, {onLeave: function (args) {send("_ui64toa");}});

var _ui64toa_s = Module.findExportByName("ntdll.dll", "_ui64toa_s")
Interceptor.attach(_ui64toa_s, {onLeave: function (args) {send("_ui64toa_s");}});

var _ui64tow = Module.findExportByName("ntdll.dll", "_ui64tow")
Interceptor.attach(_ui64tow, {onLeave: function (args) {send("_ui64tow");}});

var _ui64tow_s = Module.findExportByName("ntdll.dll", "_ui64tow_s")
Interceptor.attach(_ui64tow_s, {onLeave: function (args) {send("_ui64tow_s");}});

var _ultoa = Module.findExportByName("ntdll.dll", "_ultoa")
Interceptor.attach(_ultoa, {onLeave: function (args) {send("_ultoa");}});

var _ultoa_s = Module.findExportByName("ntdll.dll", "_ultoa_s")
Interceptor.attach(_ultoa_s, {onLeave: function (args) {send("_ultoa_s");}});

var _ultow = Module.findExportByName("ntdll.dll", "_ultow")
Interceptor.attach(_ultow, {onLeave: function (args) {send("_ultow");}});

var _ultow_s = Module.findExportByName("ntdll.dll", "_ultow_s")
Interceptor.attach(_ultow_s, {onLeave: function (args) {send("_ultow_s");}});

var _vscprintf = Module.findExportByName("ntdll.dll", "_vscprintf")
Interceptor.attach(_vscprintf, {onLeave: function (args) {send("_vscprintf");}});

var _vscwprintf = Module.findExportByName("ntdll.dll", "_vscwprintf")
Interceptor.attach(_vscwprintf, {onLeave: function (args) {send("_vscwprintf");}});

var _vsnprintf = Module.findExportByName("ntdll.dll", "_vsnprintf")
Interceptor.attach(_vsnprintf, {onLeave: function (args) {send("_vsnprintf");}});

var _vsnprintf_s = Module.findExportByName("ntdll.dll", "_vsnprintf_s")
Interceptor.attach(_vsnprintf_s, {onLeave: function (args) {send("_vsnprintf_s");}});

var _vsnwprintf = Module.findExportByName("ntdll.dll", "_vsnwprintf")
Interceptor.attach(_vsnwprintf, {onLeave: function (args) {send("_vsnwprintf");}});

var _vsnwprintf_s = Module.findExportByName("ntdll.dll", "_vsnwprintf_s")
Interceptor.attach(_vsnwprintf_s, {onLeave: function (args) {send("_vsnwprintf_s");}});

var _vswprintf = Module.findExportByName("ntdll.dll", "_vswprintf")
Interceptor.attach(_vswprintf, {onLeave: function (args) {send("_vswprintf");}});

var _wcsicmp = Module.findExportByName("ntdll.dll", "_wcsicmp")
Interceptor.attach(_wcsicmp, {onLeave: function (args) {send("_wcsicmp");}});

var _wcslwr = Module.findExportByName("ntdll.dll", "_wcslwr")
Interceptor.attach(_wcslwr, {onLeave: function (args) {send("_wcslwr");}});

var _wcslwr_s = Module.findExportByName("ntdll.dll", "_wcslwr_s")
Interceptor.attach(_wcslwr_s, {onLeave: function (args) {send("_wcslwr_s");}});

var _wcsnicmp = Module.findExportByName("ntdll.dll", "_wcsnicmp")
Interceptor.attach(_wcsnicmp, {onLeave: function (args) {send("_wcsnicmp");}});

var _wcsnset_s = Module.findExportByName("ntdll.dll", "_wcsnset_s")
Interceptor.attach(_wcsnset_s, {onLeave: function (args) {send("_wcsnset_s");}});

var _wcsset_s = Module.findExportByName("ntdll.dll", "_wcsset_s")
Interceptor.attach(_wcsset_s, {onLeave: function (args) {send("_wcsset_s");}});

var _wcstoi64 = Module.findExportByName("ntdll.dll", "_wcstoi64")
Interceptor.attach(_wcstoi64, {onLeave: function (args) {send("_wcstoi64");}});

var _wcstoui64 = Module.findExportByName("ntdll.dll", "_wcstoui64")
Interceptor.attach(_wcstoui64, {onLeave: function (args) {send("_wcstoui64");}});

var _wcsupr = Module.findExportByName("ntdll.dll", "_wcsupr")
Interceptor.attach(_wcsupr, {onLeave: function (args) {send("_wcsupr");}});

var _wcsupr_s = Module.findExportByName("ntdll.dll", "_wcsupr_s")
Interceptor.attach(_wcsupr_s, {onLeave: function (args) {send("_wcsupr_s");}});

var _wmakepath_s = Module.findExportByName("ntdll.dll", "_wmakepath_s")
Interceptor.attach(_wmakepath_s, {onLeave: function (args) {send("_wmakepath_s");}});

var _wsplitpath_s = Module.findExportByName("ntdll.dll", "_wsplitpath_s")
Interceptor.attach(_wsplitpath_s, {onLeave: function (args) {send("_wsplitpath_s");}});

var _wtoi = Module.findExportByName("ntdll.dll", "_wtoi")
Interceptor.attach(_wtoi, {onLeave: function (args) {send("_wtoi");}});

var _wtoi64 = Module.findExportByName("ntdll.dll", "_wtoi64")
Interceptor.attach(_wtoi64, {onLeave: function (args) {send("_wtoi64");}});

var _wtol = Module.findExportByName("ntdll.dll", "_wtol")
Interceptor.attach(_wtol, {onLeave: function (args) {send("_wtol");}});

var abs = Module.findExportByName("ntdll.dll", "abs")
Interceptor.attach(abs, {onLeave: function (args) {send("abs");}});

var atan = Module.findExportByName("ntdll.dll", "atan")
Interceptor.attach(atan, {onLeave: function (args) {send("atan");}});

var atan2 = Module.findExportByName("ntdll.dll", "atan2")
Interceptor.attach(atan2, {onLeave: function (args) {send("atan2");}});

var atoi = Module.findExportByName("ntdll.dll", "atoi")
Interceptor.attach(atoi, {onLeave: function (args) {send("atoi");}});

var atol = Module.findExportByName("ntdll.dll", "atol")
Interceptor.attach(atol, {onLeave: function (args) {send("atol");}});

var bsearch = Module.findExportByName("ntdll.dll", "bsearch")
Interceptor.attach(bsearch, {onLeave: function (args) {send("bsearch");}});

var bsearch_s = Module.findExportByName("ntdll.dll", "bsearch_s")
Interceptor.attach(bsearch_s, {onLeave: function (args) {send("bsearch_s");}});

var ceil = Module.findExportByName("ntdll.dll", "ceil")
Interceptor.attach(ceil, {onLeave: function (args) {send("ceil");}});

var cos = Module.findExportByName("ntdll.dll", "cos")
Interceptor.attach(cos, {onLeave: function (args) {send("cos");}});

var fabs = Module.findExportByName("ntdll.dll", "fabs")
Interceptor.attach(fabs, {onLeave: function (args) {send("fabs");}});

var floor = Module.findExportByName("ntdll.dll", "floor")
Interceptor.attach(floor, {onLeave: function (args) {send("floor");}});

var isalnum = Module.findExportByName("ntdll.dll", "isalnum")
Interceptor.attach(isalnum, {onLeave: function (args) {send("isalnum");}});

var isalpha = Module.findExportByName("ntdll.dll", "isalpha")
Interceptor.attach(isalpha, {onLeave: function (args) {send("isalpha");}});

var iscntrl = Module.findExportByName("ntdll.dll", "iscntrl")
Interceptor.attach(iscntrl, {onLeave: function (args) {send("iscntrl");}});

var isdigit = Module.findExportByName("ntdll.dll", "isdigit")
Interceptor.attach(isdigit, {onLeave: function (args) {send("isdigit");}});

var isgraph = Module.findExportByName("ntdll.dll", "isgraph")
Interceptor.attach(isgraph, {onLeave: function (args) {send("isgraph");}});

var islower = Module.findExportByName("ntdll.dll", "islower")
Interceptor.attach(islower, {onLeave: function (args) {send("islower");}});

var isprint = Module.findExportByName("ntdll.dll", "isprint")
Interceptor.attach(isprint, {onLeave: function (args) {send("isprint");}});

var ispunct = Module.findExportByName("ntdll.dll", "ispunct")
Interceptor.attach(ispunct, {onLeave: function (args) {send("ispunct");}});

var isspace = Module.findExportByName("ntdll.dll", "isspace")
Interceptor.attach(isspace, {onLeave: function (args) {send("isspace");}});

var isupper = Module.findExportByName("ntdll.dll", "isupper")
Interceptor.attach(isupper, {onLeave: function (args) {send("isupper");}});

var iswalnum = Module.findExportByName("ntdll.dll", "iswalnum")
Interceptor.attach(iswalnum, {onLeave: function (args) {send("iswalnum");}});

var iswalpha = Module.findExportByName("ntdll.dll", "iswalpha")
Interceptor.attach(iswalpha, {onLeave: function (args) {send("iswalpha");}});

var iswascii = Module.findExportByName("ntdll.dll", "iswascii")
Interceptor.attach(iswascii, {onLeave: function (args) {send("iswascii");}});

var iswctype = Module.findExportByName("ntdll.dll", "iswctype")
Interceptor.attach(iswctype, {onLeave: function (args) {send("iswctype");}});

var iswdigit = Module.findExportByName("ntdll.dll", "iswdigit")
Interceptor.attach(iswdigit, {onLeave: function (args) {send("iswdigit");}});

var iswgraph = Module.findExportByName("ntdll.dll", "iswgraph")
Interceptor.attach(iswgraph, {onLeave: function (args) {send("iswgraph");}});

var iswlower = Module.findExportByName("ntdll.dll", "iswlower")
Interceptor.attach(iswlower, {onLeave: function (args) {send("iswlower");}});

var iswprint = Module.findExportByName("ntdll.dll", "iswprint")
Interceptor.attach(iswprint, {onLeave: function (args) {send("iswprint");}});

var iswspace = Module.findExportByName("ntdll.dll", "iswspace")
Interceptor.attach(iswspace, {onLeave: function (args) {send("iswspace");}});

var iswxdigit = Module.findExportByName("ntdll.dll", "iswxdigit")
Interceptor.attach(iswxdigit, {onLeave: function (args) {send("iswxdigit");}});

var isxdigit = Module.findExportByName("ntdll.dll", "isxdigit")
Interceptor.attach(isxdigit, {onLeave: function (args) {send("isxdigit");}});

var labs = Module.findExportByName("ntdll.dll", "labs")
Interceptor.attach(labs, {onLeave: function (args) {send("labs");}});

var log = Module.findExportByName("ntdll.dll", "log")
Interceptor.attach(log, {onLeave: function (args) {send("log");}});

var longjmp = Module.findExportByName("ntdll.dll", "longjmp")
Interceptor.attach(longjmp, {onLeave: function (args) {send("longjmp");}});

var mbstowcs = Module.findExportByName("ntdll.dll", "mbstowcs")
Interceptor.attach(mbstowcs, {onLeave: function (args) {send("mbstowcs");}});

var memchr = Module.findExportByName("ntdll.dll", "memchr")
Interceptor.attach(memchr, {onLeave: function (args) {send("memchr");}});

var memcmp = Module.findExportByName("ntdll.dll", "memcmp")
Interceptor.attach(memcmp, {onLeave: function (args) {send("memcmp");}});

var memcpy = Module.findExportByName("ntdll.dll", "memcpy")
Interceptor.attach(memcpy, {onLeave: function (args) {send("memcpy");}});

var memcpy_s = Module.findExportByName("ntdll.dll", "memcpy_s")
Interceptor.attach(memcpy_s, {onLeave: function (args) {send("memcpy_s");}});

var memmove = Module.findExportByName("ntdll.dll", "memmove")
Interceptor.attach(memmove, {onLeave: function (args) {send("memmove");}});

var memmove_s = Module.findExportByName("ntdll.dll", "memmove_s")
Interceptor.attach(memmove_s, {onLeave: function (args) {send("memmove_s");}});

var memset = Module.findExportByName("ntdll.dll", "memset")
Interceptor.attach(memset, {onLeave: function (args) {send("memset");}});

var pow = Module.findExportByName("ntdll.dll", "pow")
Interceptor.attach(pow, {onLeave: function (args) {send("pow");}});

var qsort = Module.findExportByName("ntdll.dll", "qsort")
Interceptor.attach(qsort, {onLeave: function (args) {send("qsort");}});

var qsort_s = Module.findExportByName("ntdll.dll", "qsort_s")
Interceptor.attach(qsort_s, {onLeave: function (args) {send("qsort_s");}});

var sin = Module.findExportByName("ntdll.dll", "sin")
Interceptor.attach(sin, {onLeave: function (args) {send("sin");}});

var sprintf = Module.findExportByName("ntdll.dll", "sprintf")
Interceptor.attach(sprintf, {onLeave: function (args) {send("sprintf");}});

var sprintf_s = Module.findExportByName("ntdll.dll", "sprintf_s")
Interceptor.attach(sprintf_s, {onLeave: function (args) {send("sprintf_s");}});

var sqrt = Module.findExportByName("ntdll.dll", "sqrt")
Interceptor.attach(sqrt, {onLeave: function (args) {send("sqrt");}});

var sscanf = Module.findExportByName("ntdll.dll", "sscanf")
Interceptor.attach(sscanf, {onLeave: function (args) {send("sscanf");}});

var sscanf_s = Module.findExportByName("ntdll.dll", "sscanf_s")
Interceptor.attach(sscanf_s, {onLeave: function (args) {send("sscanf_s");}});

var strcat = Module.findExportByName("ntdll.dll", "strcat")
Interceptor.attach(strcat, {onLeave: function (args) {send("strcat");}});

var strcat_s = Module.findExportByName("ntdll.dll", "strcat_s")
Interceptor.attach(strcat_s, {onLeave: function (args) {send("strcat_s");}});

var strchr = Module.findExportByName("ntdll.dll", "strchr")
Interceptor.attach(strchr, {onLeave: function (args) {send("strchr");}});

var strcmp = Module.findExportByName("ntdll.dll", "strcmp")
Interceptor.attach(strcmp, {onLeave: function (args) {send("strcmp");}});

var strcpy = Module.findExportByName("ntdll.dll", "strcpy")
Interceptor.attach(strcpy, {onLeave: function (args) {send("strcpy");}});

var strcpy_s = Module.findExportByName("ntdll.dll", "strcpy_s")
Interceptor.attach(strcpy_s, {onLeave: function (args) {send("strcpy_s");}});

var strcspn = Module.findExportByName("ntdll.dll", "strcspn")
Interceptor.attach(strcspn, {onLeave: function (args) {send("strcspn");}});

var strlen = Module.findExportByName("ntdll.dll", "strlen")
Interceptor.attach(strlen, {onLeave: function (args) {send("strlen");}});

var strncat = Module.findExportByName("ntdll.dll", "strncat")
Interceptor.attach(strncat, {onLeave: function (args) {send("strncat");}});

var strncat_s = Module.findExportByName("ntdll.dll", "strncat_s")
Interceptor.attach(strncat_s, {onLeave: function (args) {send("strncat_s");}});

var strncmp = Module.findExportByName("ntdll.dll", "strncmp")
Interceptor.attach(strncmp, {onLeave: function (args) {send("strncmp");}});

var strncpy = Module.findExportByName("ntdll.dll", "strncpy")
Interceptor.attach(strncpy, {onLeave: function (args) {send("strncpy");}});

var strncpy_s = Module.findExportByName("ntdll.dll", "strncpy_s")
Interceptor.attach(strncpy_s, {onLeave: function (args) {send("strncpy_s");}});

var strnlen = Module.findExportByName("ntdll.dll", "strnlen")
Interceptor.attach(strnlen, {onLeave: function (args) {send("strnlen");}});

var strpbrk = Module.findExportByName("ntdll.dll", "strpbrk")
Interceptor.attach(strpbrk, {onLeave: function (args) {send("strpbrk");}});

var strrchr = Module.findExportByName("ntdll.dll", "strrchr")
Interceptor.attach(strrchr, {onLeave: function (args) {send("strrchr");}});

var strspn = Module.findExportByName("ntdll.dll", "strspn")
Interceptor.attach(strspn, {onLeave: function (args) {send("strspn");}});

var strstr = Module.findExportByName("ntdll.dll", "strstr")
Interceptor.attach(strstr, {onLeave: function (args) {send("strstr");}});

var strtok_s = Module.findExportByName("ntdll.dll", "strtok_s")
Interceptor.attach(strtok_s, {onLeave: function (args) {send("strtok_s");}});

var strtol = Module.findExportByName("ntdll.dll", "strtol")
Interceptor.attach(strtol, {onLeave: function (args) {send("strtol");}});

var strtoul = Module.findExportByName("ntdll.dll", "strtoul")
Interceptor.attach(strtoul, {onLeave: function (args) {send("strtoul");}});

var swprintf = Module.findExportByName("ntdll.dll", "swprintf")
Interceptor.attach(swprintf, {onLeave: function (args) {send("swprintf");}});

var swprintf_s = Module.findExportByName("ntdll.dll", "swprintf_s")
Interceptor.attach(swprintf_s, {onLeave: function (args) {send("swprintf_s");}});

var swscanf_s = Module.findExportByName("ntdll.dll", "swscanf_s")
Interceptor.attach(swscanf_s, {onLeave: function (args) {send("swscanf_s");}});

var tan = Module.findExportByName("ntdll.dll", "tan")
Interceptor.attach(tan, {onLeave: function (args) {send("tan");}});

var tolower = Module.findExportByName("ntdll.dll", "tolower")
Interceptor.attach(tolower, {onLeave: function (args) {send("tolower");}});

var toupper = Module.findExportByName("ntdll.dll", "toupper")
Interceptor.attach(toupper, {onLeave: function (args) {send("toupper");}});

var towlower = Module.findExportByName("ntdll.dll", "towlower")
Interceptor.attach(towlower, {onLeave: function (args) {send("towlower");}});

var towupper = Module.findExportByName("ntdll.dll", "towupper")
Interceptor.attach(towupper, {onLeave: function (args) {send("towupper");}});

var vDbgPrintEx = Module.findExportByName("ntdll.dll", "vDbgPrintEx")
Interceptor.attach(vDbgPrintEx, {onLeave: function (args) {send("vDbgPrintEx");}});

var vDbgPrintExWithPrefix = Module.findExportByName("ntdll.dll", "vDbgPrintExWithPrefix")
Interceptor.attach(vDbgPrintExWithPrefix, {onLeave: function (args) {send("vDbgPrintExWithPrefix");}});

var vsprintf = Module.findExportByName("ntdll.dll", "vsprintf")
Interceptor.attach(vsprintf, {onLeave: function (args) {send("vsprintf");}});

var vsprintf_s = Module.findExportByName("ntdll.dll", "vsprintf_s")
Interceptor.attach(vsprintf_s, {onLeave: function (args) {send("vsprintf_s");}});

var vswprintf_s = Module.findExportByName("ntdll.dll", "vswprintf_s")
Interceptor.attach(vswprintf_s, {onLeave: function (args) {send("vswprintf_s");}});

var wcscat = Module.findExportByName("ntdll.dll", "wcscat")
Interceptor.attach(wcscat, {onLeave: function (args) {send("wcscat");}});

var wcscat_s = Module.findExportByName("ntdll.dll", "wcscat_s")
Interceptor.attach(wcscat_s, {onLeave: function (args) {send("wcscat_s");}});

var wcschr = Module.findExportByName("ntdll.dll", "wcschr")
Interceptor.attach(wcschr, {onLeave: function (args) {send("wcschr");}});

var wcscmp = Module.findExportByName("ntdll.dll", "wcscmp")
Interceptor.attach(wcscmp, {onLeave: function (args) {send("wcscmp");}});

var wcscpy = Module.findExportByName("ntdll.dll", "wcscpy")
Interceptor.attach(wcscpy, {onLeave: function (args) {send("wcscpy");}});

var wcscpy_s = Module.findExportByName("ntdll.dll", "wcscpy_s")
Interceptor.attach(wcscpy_s, {onLeave: function (args) {send("wcscpy_s");}});

var wcscspn = Module.findExportByName("ntdll.dll", "wcscspn")
Interceptor.attach(wcscspn, {onLeave: function (args) {send("wcscspn");}});

var wcslen = Module.findExportByName("ntdll.dll", "wcslen")
Interceptor.attach(wcslen, {onLeave: function (args) {send("wcslen");}});

var wcsncat = Module.findExportByName("ntdll.dll", "wcsncat")
Interceptor.attach(wcsncat, {onLeave: function (args) {send("wcsncat");}});

var wcsncat_s = Module.findExportByName("ntdll.dll", "wcsncat_s")
Interceptor.attach(wcsncat_s, {onLeave: function (args) {send("wcsncat_s");}});

var wcsncmp = Module.findExportByName("ntdll.dll", "wcsncmp")
Interceptor.attach(wcsncmp, {onLeave: function (args) {send("wcsncmp");}});

var wcsncpy = Module.findExportByName("ntdll.dll", "wcsncpy")
Interceptor.attach(wcsncpy, {onLeave: function (args) {send("wcsncpy");}});

var wcsncpy_s = Module.findExportByName("ntdll.dll", "wcsncpy_s")
Interceptor.attach(wcsncpy_s, {onLeave: function (args) {send("wcsncpy_s");}});

var wcsnlen = Module.findExportByName("ntdll.dll", "wcsnlen")
Interceptor.attach(wcsnlen, {onLeave: function (args) {send("wcsnlen");}});

var wcspbrk = Module.findExportByName("ntdll.dll", "wcspbrk")
Interceptor.attach(wcspbrk, {onLeave: function (args) {send("wcspbrk");}});

var wcsrchr = Module.findExportByName("ntdll.dll", "wcsrchr")
Interceptor.attach(wcsrchr, {onLeave: function (args) {send("wcsrchr");}});

var wcsspn = Module.findExportByName("ntdll.dll", "wcsspn")
Interceptor.attach(wcsspn, {onLeave: function (args) {send("wcsspn");}});

var wcsstr = Module.findExportByName("ntdll.dll", "wcsstr")
Interceptor.attach(wcsstr, {onLeave: function (args) {send("wcsstr");}});

var wcstok_s = Module.findExportByName("ntdll.dll", "wcstok_s")
Interceptor.attach(wcstok_s, {onLeave: function (args) {send("wcstok_s");}});

var wcstol = Module.findExportByName("ntdll.dll", "wcstol")
Interceptor.attach(wcstol, {onLeave: function (args) {send("wcstol");}});

var wcstombs = Module.findExportByName("ntdll.dll", "wcstombs")
Interceptor.attach(wcstombs, {onLeave: function (args) {send("wcstombs");}});

var wcstoul = Module.findExportByName("ntdll.dll", "wcstoul")
Interceptor.attach(wcstoul, {onLeave: function (args) {send("wcstoul");}});

